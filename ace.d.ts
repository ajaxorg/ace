/* This file is generated using `npm run update-types` */

/// <reference path="./types/ace-lib.d.ts" />
/// <reference path="./types/ace-modules.d.ts" />
/// <reference path="./types/ace-theme.d.ts" />
/// <reference path="./types/ace-ext.d.ts" />
/// <reference path="./types/ace-snippets.d.ts" />
/// <reference path="./ace-modes.d.ts" />
declare module "ace-code" {
    export namespace Ace {
        type Anchor = import("ace-code/src/anchor").Anchor;
        type Editor = import("ace-code/src/editor").Editor;
        type EditSession = import("ace-code/src/edit_session").EditSession;
        type Document = import("ace-code/src/document").Document;
        type Fold = import("ace-code/src/edit_session/fold").Fold;
        type FoldLine = import("ace-code/src/edit_session/fold_line").FoldLine;
        type Range = import("ace-code/src/range").Range;
        type VirtualRenderer = import("ace-code/src/virtual_renderer").VirtualRenderer;
        type UndoManager = import("ace-code/src/undomanager").UndoManager;
        type Tokenizer = import("ace-code/src/tokenizer").Tokenizer;
        type TokenIterator = import("ace-code/src/token_iterator").TokenIterator;
        type Selection = import("ace-code/src/selection").Selection;
        type Autocomplete = import("ace-code/src/autocomplete").Autocomplete;
        type InlineAutocomplete = import("ace-code/src/ext/inline_autocomplete").InlineAutocomplete;
        type CompletionProvider = import("ace-code/src/autocomplete").CompletionProvider;
        type AcePopup = import("ace-code/src/autocomplete/popup").AcePopup;
        type AceInline = import("ace-code/src/autocomplete/inline").AceInline;
        type MouseEvent = import("ace-code/src/mouse/mouse_event").MouseEvent;
        type RangeList = import("ace-code/src/range_list").RangeList;
        type FilteredList = import("ace-code/src/autocomplete").FilteredList;
        type LineWidgets = import("ace-code/src/line_widgets").LineWidgets;
        type SearchBox = import("ace-code/src/ext/searchbox").SearchBox;
        type Occur = import("ace-code/src/occur").Occur;
        type DefaultHandlers = import("ace-code/src/mouse/default_handlers").DefaultHandlers;
        type GutterHandler = import("ace-code/src/mouse/default_gutter_handler").GutterHandler;
        type DragdropHandler = import("ace-code/src/mouse/dragdrop_handler").DragdropHandler;
        type AppConfig = import("ace-code/src/lib/app_config").AppConfig;
        type Config = typeof import("ace-code/src/config");
        type AfterLoadCallback = import("./interfaces").AfterLoadCallback;
        type LoaderFunction = import("./interfaces").LoaderFunction;
        type ConfigOptions = import("./interfaces").ConfigOptions;
        type Theme = import("./interfaces").Theme;
        type ScrollBar = import("./interfaces").ScrollBar;
        type HScrollbar = import("./interfaces").HScrollbar;
        type VScrollbar = import("./interfaces").VScrollbar;
        type LayerConfig = import("./interfaces").LayerConfig;
        type HardWrapOptions = import("./interfaces").HardWrapOptions;
        type CommandBarOptions = import("./interfaces").CommandBarOptions;
        type ScreenCoordinates = import("./interfaces").ScreenCoordinates;
        type Folding = import("./interfaces").Folding;
        type BracketMatch = import("./interfaces").BracketMatch;
        type IRange = import("./interfaces").IRange;
        type LineWidget = import("./interfaces").LineWidget;
        type NewLineMode = import("./interfaces").NewLineMode;
        type EditSessionOptions = import("./interfaces").EditSessionOptions;
        type VirtualRendererOptions = import("./interfaces").VirtualRendererOptions;
        type MouseHandlerOptions = import("./interfaces").MouseHandlerOptions;
        type EditorOptions = import("./interfaces").EditorOptions;
        type EventsBase = import("./interfaces").EventsBase;
        type EditSessionEvents = import("./interfaces").EditSessionEvents;
        type EditorEvents = import("./interfaces").EditorEvents;
        type AcePopupEvents = import("./interfaces").AcePopupEvents;
        type DocumentEvents = import("./interfaces").DocumentEvents;
        type AnchorEvents = import("./interfaces").AnchorEvents;
        type BackgroundTokenizerEvents = import("./interfaces").BackgroundTokenizerEvents;
        type SelectionEvents = import("./interfaces").SelectionEvents;
        type MultiSelectionEvents = import("./interfaces").MultiSelectionEvents;
        type PlaceHolderEvents = import("./interfaces").PlaceHolderEvents;
        type GutterEvents = import("./interfaces").GutterEvents;
        type TextEvents = import("./interfaces").TextEvents;
        type VirtualRendererEvents = import("./interfaces").VirtualRendererEvents;
        type EventEmitter<T extends {
            [K in keyof T]: (...args: any[]) => any;
        }> = import("./interfaces").EventEmitter<T>;
        type SearchOptions = import("./interfaces").SearchOptions;
        type Point = import("./interfaces").Point;
        type Position = Point;
        type Delta = import("./interfaces").Delta;
        type Annotation = import("./interfaces").Annotation;
        type MarkerGroupItem = import("./interfaces").MarkerGroupItem;
        type MarkerGroup = import("ace-code/src/marker_group").MarkerGroup;
        type Command = import("./interfaces").Command;
        type CommandLike = import("./interfaces").CommandLike;
        type KeyboardHandler = import("./interfaces").KeyboardHandler;
        type MarkerLike = import("./interfaces").MarkerLike;
        type MarkerRenderer = import("./interfaces").MarkerRenderer;
        type Token = import("./interfaces").Token;
        type BaseCompletion = import("ace-code/src/autocomplete").BaseCompletion;
        type SnippetCompletion = import("ace-code/src/autocomplete").SnippetCompletion;
        type ValueCompletion = import("ace-code/src/autocomplete").ValueCompletion;
        type Completion = import("ace-code/src/autocomplete").Completion;
        type HighlightRule = import("./interfaces").HighlightRule;
        type HighlightRulesMap = import("./interfaces").HighlightRulesMap;
        type KeywordMapper = import("./interfaces").KeywordMapper;
        type HighlightRules = import("./interfaces").HighlightRules;
        type FoldWidget = import("./interfaces").FoldWidget;
        type FoldMode = import("./interfaces").FoldMode;
        type BehaviorAction = import("./interfaces").BehaviorAction;
        type BehaviorMap = import("./interfaces").BehaviorMap;
        type Behaviour = import("./interfaces").Behaviour;
        type Outdent = import("./interfaces").Outdent;
        type SyntaxMode = import("./interfaces").SyntaxMode;
        type OptionsBase = import("./interfaces").OptionsBase;
        type OptionsProvider<T> = import("./interfaces").OptionsProvider<T>;
        type KeyBinding = import("ace-code/src/keyboard/keybinding").KeyBinding;
        type CommandMap = import("./interfaces").CommandMap;
        type execEventHandler = import("./interfaces").execEventHandler;
        type CommandManagerEvents = import("./interfaces").CommandManagerEvents;
        type CommandManager = import("ace-code/src/commands/command_manager").CommandManager;
        type SavedSelection = import("./interfaces").SavedSelection;
        type TextInput = import("./interfaces").TextInput;
        type CompleterCallback = import("./interfaces").CompleterCallback;
        type Completer = import("./interfaces").Completer;
        type CompletionOptions = import("./interfaces").CompletionOptions;
        type CompletionProviderOptions = import("./interfaces").CompletionProviderOptions;
        type GatherCompletionRecord = import("./interfaces").GatherCompletionRecord;
        type CompletionCallbackFunction = import("./interfaces").CompletionCallbackFunction;
        type CompletionProviderCallback = import("./interfaces").CompletionProviderCallback;
        type AcePopupNavigation = import("./interfaces").AcePopupNavigation;
        type EditorMultiSelectProperties = import("./interfaces").EditorMultiSelectProperties;
        type CodeLenseProvider = import("./interfaces").CodeLenseProvider;
        type CodeLense = import("./interfaces").CodeLense;
        type CodeLenseEditorExtension = import("./interfaces").CodeLenseEditorExtension;
        type ElasticTabstopsEditorExtension = import("./interfaces").ElasticTabstopsEditorExtension;
        type TextareaEditorExtension = import("./interfaces").TextareaEditorExtension;
        type PromptEditorExtension = import("./interfaces").PromptEditorExtension;
        type OptionsEditorExtension = import("./interfaces").OptionsEditorExtension;
        type MultiSelectProperties = import("./interfaces").MultiSelectProperties;
        type AcePopupEventsCombined = import("./interfaces").AcePopupEventsCombined;
        type AcePopupWithEditor = import("./interfaces").AcePopupWithEditor;
        type InlineAutocompleteAction = import("./interfaces").InlineAutocompleteAction;
        type TooltipCommandFunction<T> = import("./interfaces").TooltipCommandFunction<T>;
        type TooltipCommand = import("./interfaces").TooltipCommand;
        export type CommandBarTooltip = import("ace-code/src/ext/command_bar").CommandBarTooltip;
        export type TokenizeResult = import("./interfaces").TokenizeResult;
        type StaticHighlightOptions = import("./interfaces").StaticHighlightOptions;
    }
    export const config: typeof import("ace-code/src/config");
    export function edit(el?: string | (HTMLElement & {
        env?: any;
        value?: any;
    }) | null, options?: any): Editor;
    export function createEditSession(text: import("ace-code/src/document").Document | string, mode?: import('./interfaces').SyntaxMode): EditSession;
    import { Editor } from "ace-code/src/editor";
    import { EditSession } from "ace-code/src/edit_session";
    import { Range } from "ace-code/src/range";
    import { UndoManager } from "ace-code/src/undomanager";
    import { VirtualRenderer as Renderer } from "ace-code/src/virtual_renderer";
    export var version: "1.36.5";
    export { Range, Editor, EditSession, UndoManager, Renderer as VirtualRenderer };
}
