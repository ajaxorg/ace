/* ***** BEGIN LICENSE BLOCK *****
 * Distributed under the BSD license:
 *
 * Copyright (c) 2010, Ajax.org B.V.
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of Ajax.org B.V. nor the
 *       names of its contributors may be used to endorse or promote products
 *       derived from this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL AJAX.ORG B.V. BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * ***** END LICENSE BLOCK ***** */
 
define(function(require, exports, module){

var XQueryParser = exports.XQueryParser = function XQueryParser(string)
{
  init(string);

  function ParseException(b, e, s, o, x)
  {
    var
      begin = b,
      end = e,
      state = s,
      offending = o,
      expected = x;

    this.getBegin = function() {return begin;};
    this.getEnd = function() {return end;};
    this.getState = function() {return state;};
    this.getExpected = function() {return expected;};
    this.getOffending = function() {return offending;};

    this.getMessage = function()
    {
      return offending < 0 ? "lexical analysis failed" : "syntax error";
    };
  }

  function init(string)
  {
    input = string;
    size = string.length;
    reset(0, 0, 0);
    delayedTag = null;
  }

  this.getInput = function()
  {
    return input;
  };

  function reset(l, b, e)
  {
                 b0 = b; e0 = b;
    l1 = l; b1 = b; e1 = e;
    l2 = 0;
    end = e;
    ex = -1;
    memo = new Object;
  }

  this.getOffendingToken = function(e)
  {
    var o = e.getOffending();
    return o >= 0 ? TOKEN[o] : null;
  }

  this.getExpectedTokenSet = function(e)
  {
    var expected;
    if (e.getExpected() < 0)
    {
      expected = getExpectedTokenSet(e.getState());
    }
    else
    {
      expected = [TOKEN[e.getExpected()]];
    }
    return expected;
  }

  this.getErrorMessage = function(e){
    var tokenSet = this.getExpectedTokenSet(e);
    var found = this.getOffendingToken(e);
    var prefix = input.substring(0, e.getBegin());
    var line = prefix.split("\n").length - 1;
    var column = e.getBegin() - prefix.lastIndexOf("\n");
    var size = e.getEnd() - e.getBegin();
    return e.getMessage() 
         + (found == null ? "" : ", found " + found)
         + " while expecting "
         + (tokenSet.length == 1 ? tokenSet[0] : tokenSet.splice(0 , 5))
         + (tokenSet.splice > 5? "..." : "")
         //+ "\n"
         //+ (size == 0 ? "" : "after successfully scanning " + size + " characters beginning ")
         + " at line " + line + ", column " + column + ":\n..."
         + input.substring(e.getBegin(), Math.min(input.length, e.getBegin() + 64))
         + "...";
  }

  this.parse_XQuery = function()
  {
    startNonterminal("XQuery");
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    parse_Module();
    lookahead1W(43);                // S^WS | EOF | '(:'
    shift(25);                      // EOF
    endNonterminal("XQuery");
    flushOutput();
  }

  function parse_Module()
  {
    startNonterminal("Module");
    lookahead1W(323);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | EOF | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' |
                                    // '..' | '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    switch (l1)
    {
    case 274:                       // 'xquery'
      lookahead2W(239);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'encoding' | 'eq' | 'except' | 'ge' | 'gt' |
                                    // 'idiv' | 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' |
                                    // 'to' | 'treat' | 'union' | 'version' | '|' | '||'
      break;
    default:
      lk = l1;
    }
    if (lk == 64274                 // 'xquery' 'encoding'
     || lk == 134930)               // 'xquery' 'version'
    {
      parse_VersionDecl();
    }
    lookahead1W(323);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | EOF | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' |
                                    // '..' | '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    switch (l1)
    {
    case 182:                       // 'module'
      lookahead2W(234);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'namespace' | 'ne' |
                                    // 'or' | 'to' | 'treat' | 'union' | '|' | '||'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 94390:                     // 'module' 'namespace'
      parse_LibraryModule();
      break;
    default:
      parse_MainModule();
    }
    endNonterminal("Module");
  }

  function parse_VersionDecl()
  {
    startNonterminal("VersionDecl");
    shift(274);                     // 'xquery'
    lookahead1W(148);               // S^WS | '(:' | 'encoding' | 'version'
    switch (l1)
    {
    case 125:                       // 'encoding'
      shift(125);                   // 'encoding'
      lookahead1W(40);              // StringLiteral | S^WS | '(:'
      shift(11);                    // StringLiteral
      break;
    default:
      shift(263);                   // 'version'
      lookahead1W(40);              // StringLiteral | S^WS | '(:'
      shift(11);                    // StringLiteral
      lookahead1W(140);             // S^WS | '(:' | ';' | 'encoding'
      if (l1 == 125)                // 'encoding'
      {
        shift(125);                 // 'encoding'
        lookahead1W(40);            // StringLiteral | S^WS | '(:'
        shift(11);                  // StringLiteral
      }
    }
    lookahead1W(53);                // S^WS | '(:' | ';'
    parse_Separator();
    endNonterminal("VersionDecl");
  }

  function parse_LibraryModule()
  {
    startNonterminal("LibraryModule");
    parse_ModuleDecl();
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    parse_Prolog();
    endNonterminal("LibraryModule");
  }

  function parse_ModuleDecl()
  {
    startNonterminal("ModuleDecl");
    lookahead1(18);                 // 'module'
    shift(182);                     // 'module'
    lookahead1W(85);                // S^WS | '(:' | 'namespace'
    shift(184);                     // 'namespace'
    lookahead1W(306);               // NCName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    parse_NCName();
    lookahead1W(54);                // S^WS | '(:' | '='
    shift(60);                      // '='
    lookahead1W(38);                // URILiteral | S^WS | '(:'
    shift(7);                       // URILiteral
    lookahead1W(53);                // S^WS | '(:' | ';'
    parse_Separator();
    endNonterminal("ModuleDecl");
  }

  function parse_Prolog()
  {
    startNonterminal("Prolog");
    for (;;)
    {
      lookahead1W(323);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | EOF | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' |
                                    // '..' | '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      switch (l1)
      {
      case 108:                     // 'declare'
        lookahead2W(261);           // S^WS | EOF | '!' | '!=' | '#' | '%' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' |
                                    // 'base-uri' | 'boundary-space' | 'cast' | 'castable' | 'collection' |
                                    // 'construction' | 'contains' | 'context' | 'copy-namespaces' | 'decimal-format' |
                                    // 'default' | 'div' | 'eq' | 'except' | 'ft-option' | 'function' | 'ge' | 'gt' |
                                    // 'idiv' | 'index' | 'instance' | 'integrity' | 'intersect' | 'is' | 'le' | 'lt' |
                                    // 'mod' | 'namespace' | 'ne' | 'option' | 'or' | 'ordering' | 'revalidation' |
                                    // 'to' | 'treat' | 'union' | 'updating' | 'variable' | '|' | '||'
        break;
      case 153:                     // 'import'
        lookahead2W(241);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'module' | 'ne' | 'or' |
                                    // 'schema' | 'to' | 'treat' | 'union' | '|' | '||'
        break;
      default:
        lk = l1;
      }
      if (lk != 42604               // 'declare' 'base-uri'
       && lk != 43628               // 'declare' 'boundary-space'
       && lk != 50284               // 'declare' 'construction'
       && lk != 53356               // 'declare' 'copy-namespaces'
       && lk != 54380               // 'declare' 'decimal-format'
       && lk != 55916               // 'declare' 'default'
       && lk != 72300               // 'declare' 'ft-option'
       && lk != 93337               // 'import' 'module'
       && lk != 94316               // 'declare' 'namespace'
       && lk != 104044              // 'declare' 'ordering'
       && lk != 113772              // 'declare' 'revalidation'
       && lk != 115353)             // 'import' 'schema'
      {
        break;
      }
      switch (l1)
      {
      case 108:                     // 'declare'
        lookahead2W(215);           // S^WS | '(:' | 'base-uri' | 'boundary-space' | 'construction' |
                                    // 'copy-namespaces' | 'decimal-format' | 'default' | 'ft-option' | 'namespace' |
                                    // 'ordering' | 'revalidation'
        break;
      default:
        lk = l1;
      }
      if (lk == 55916)              // 'declare' 'default'
      {
        lk = memoized(0, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2;
          try
          {
            try_DefaultNamespaceDecl();
            lk = -1;
          }
          catch (p1A)
          {
            lk = -2;
          }
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(0, e0, lk);
        }
      }
      switch (lk)
      {
      case -1:
        parse_DefaultNamespaceDecl();
        break;
      case 94316:                   // 'declare' 'namespace'
        parse_NamespaceDecl();
        break;
      case 153:                     // 'import'
        parse_Import();
        break;
      case 72300:                   // 'declare' 'ft-option'
        parse_FTOptionDecl();
        break;
      default:
        parse_Setter();
      }
      lookahead1W(53);              // S^WS | '(:' | ';'
      parse_Separator();
    }
    for (;;)
    {
      lookahead1W(323);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | EOF | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' |
                                    // '..' | '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      switch (l1)
      {
      case 108:                     // 'declare'
        lookahead2W(251);           // S^WS | EOF | '!' | '!=' | '#' | '%' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'collection' | 'contains' | 'context' | 'div' | 'eq' | 'except' |
                                    // 'function' | 'ge' | 'gt' | 'idiv' | 'index' | 'instance' | 'integrity' |
                                    // 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'option' | 'or' | 'to' |
                                    // 'treat' | 'union' | 'updating' | 'variable' | '|' | '||'
        break;
      default:
        lk = l1;
      }
      if (lk != 16492               // 'declare' '%'
       && lk != 48748               // 'declare' 'collection'
       && lk != 51820               // 'declare' 'context'
       && lk != 74348               // 'declare' 'function'
       && lk != 79468               // 'declare' 'index'
       && lk != 82540               // 'declare' 'integrity'
       && lk != 101996              // 'declare' 'option'
       && lk != 131692              // 'declare' 'updating'
       && lk != 134252)             // 'declare' 'variable'
      {
        break;
      }
      switch (l1)
      {
      case 108:                     // 'declare'
        lookahead2W(211);           // S^WS | '%' | '(:' | 'collection' | 'context' | 'function' | 'index' |
                                    // 'integrity' | 'option' | 'updating' | 'variable'
        break;
      default:
        lk = l1;
      }
      switch (lk)
      {
      case 51820:                   // 'declare' 'context'
        parse_ContextItemDecl();
        break;
      case 101996:                  // 'declare' 'option'
        parse_OptionDecl();
        break;
      default:
        parse_AnnotatedDecl();
      }
      lookahead1W(53);              // S^WS | '(:' | ';'
      parse_Separator();
    }
    endNonterminal("Prolog");
  }

  function parse_Separator()
  {
    startNonterminal("Separator");
    shift(53);                      // ';'
    endNonterminal("Separator");
  }

  function parse_Setter()
  {
    startNonterminal("Setter");
    switch (l1)
    {
    case 108:                       // 'declare'
      lookahead2W(207);             // S^WS | '(:' | 'base-uri' | 'boundary-space' | 'construction' |
                                    // 'copy-namespaces' | 'decimal-format' | 'default' | 'ordering' | 'revalidation'
      break;
    default:
      lk = l1;
    }
    if (lk == 55916)                // 'declare' 'default'
    {
      lk = memoized(1, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_DefaultCollationDecl();
          lk = -2;
        }
        catch (p2A)
        {
          try
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            try_EmptyOrderDecl();
            lk = -6;
          }
          catch (p6A)
          {
            lk = -9;
          }
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(1, e0, lk);
      }
    }
    switch (lk)
    {
    case 43628:                     // 'declare' 'boundary-space'
      parse_BoundarySpaceDecl();
      break;
    case -2:
      parse_DefaultCollationDecl();
      break;
    case 42604:                     // 'declare' 'base-uri'
      parse_BaseURIDecl();
      break;
    case 50284:                     // 'declare' 'construction'
      parse_ConstructionDecl();
      break;
    case 104044:                    // 'declare' 'ordering'
      parse_OrderingModeDecl();
      break;
    case -6:
      parse_EmptyOrderDecl();
      break;
    case 113772:                    // 'declare' 'revalidation'
      parse_RevalidationDecl();
      break;
    case 53356:                     // 'declare' 'copy-namespaces'
      parse_CopyNamespacesDecl();
      break;
    default:
      parse_DecimalFormatDecl();
    }
    endNonterminal("Setter");
  }

  function try_Setter()
  {
    switch (l1)
    {
    case 108:                       // 'declare'
      lookahead2W(207);             // S^WS | '(:' | 'base-uri' | 'boundary-space' | 'construction' |
                                    // 'copy-namespaces' | 'decimal-format' | 'default' | 'ordering' | 'revalidation'
      break;
    default:
      lk = l1;
    }
    if (lk == 55916)                // 'declare' 'default'
    {
      lk = memoized(1, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_DefaultCollationDecl();
          lk = -2;
        }
        catch (p2A)
        {
          try
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            try_EmptyOrderDecl();
            lk = -6;
          }
          catch (p6A)
          {
            lk = -9;
          }
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(1, e0, lk);
      }
    }
    switch (lk)
    {
    case 43628:                     // 'declare' 'boundary-space'
      try_BoundarySpaceDecl();
      break;
    case -2:
      try_DefaultCollationDecl();
      break;
    case 42604:                     // 'declare' 'base-uri'
      try_BaseURIDecl();
      break;
    case 50284:                     // 'declare' 'construction'
      try_ConstructionDecl();
      break;
    case 104044:                    // 'declare' 'ordering'
      try_OrderingModeDecl();
      break;
    case -6:
      try_EmptyOrderDecl();
      break;
    case 113772:                    // 'declare' 'revalidation'
      try_RevalidationDecl();
      break;
    case 53356:                     // 'declare' 'copy-namespaces'
      try_CopyNamespacesDecl();
      break;
    default:
      try_DecimalFormatDecl();
    }
  }

  function parse_BoundarySpaceDecl()
  {
    startNonterminal("BoundarySpaceDecl");
    shift(108);                     // 'declare'
    lookahead1W(58);                // S^WS | '(:' | 'boundary-space'
    shift(85);                      // 'boundary-space'
    lookahead1W(166);               // S^WS | '(:' | 'preserve' | 'strip'
    switch (l1)
    {
    case 214:                       // 'preserve'
      shift(214);                   // 'preserve'
      break;
    default:
      shift(241);                   // 'strip'
    }
    endNonterminal("BoundarySpaceDecl");
  }

  function try_BoundarySpaceDecl()
  {
    shiftT(108);                    // 'declare'
    lookahead1W(58);                // S^WS | '(:' | 'boundary-space'
    shiftT(85);                     // 'boundary-space'
    lookahead1W(166);               // S^WS | '(:' | 'preserve' | 'strip'
    switch (l1)
    {
    case 214:                       // 'preserve'
      shiftT(214);                  // 'preserve'
      break;
    default:
      shiftT(241);                  // 'strip'
    }
  }

  function parse_DefaultCollationDecl()
  {
    startNonterminal("DefaultCollationDecl");
    shift(108);                     // 'declare'
    lookahead1W(71);                // S^WS | '(:' | 'default'
    shift(109);                     // 'default'
    lookahead1W(63);                // S^WS | '(:' | 'collation'
    shift(94);                      // 'collation'
    lookahead1W(38);                // URILiteral | S^WS | '(:'
    shift(7);                       // URILiteral
    endNonterminal("DefaultCollationDecl");
  }

  function try_DefaultCollationDecl()
  {
    shiftT(108);                    // 'declare'
    lookahead1W(71);                // S^WS | '(:' | 'default'
    shiftT(109);                    // 'default'
    lookahead1W(63);                // S^WS | '(:' | 'collation'
    shiftT(94);                     // 'collation'
    lookahead1W(38);                // URILiteral | S^WS | '(:'
    shiftT(7);                      // URILiteral
  }

  function parse_BaseURIDecl()
  {
    startNonterminal("BaseURIDecl");
    shift(108);                     // 'declare'
    lookahead1W(57);                // S^WS | '(:' | 'base-uri'
    shift(83);                      // 'base-uri'
    lookahead1W(38);                // URILiteral | S^WS | '(:'
    shift(7);                       // URILiteral
    endNonterminal("BaseURIDecl");
  }

  function try_BaseURIDecl()
  {
    shiftT(108);                    // 'declare'
    lookahead1W(57);                // S^WS | '(:' | 'base-uri'
    shiftT(83);                     // 'base-uri'
    lookahead1W(38);                // URILiteral | S^WS | '(:'
    shiftT(7);                      // URILiteral
  }

  function parse_ConstructionDecl()
  {
    startNonterminal("ConstructionDecl");
    shift(108);                     // 'declare'
    lookahead1W(66);                // S^WS | '(:' | 'construction'
    shift(98);                      // 'construction'
    lookahead1W(166);               // S^WS | '(:' | 'preserve' | 'strip'
    switch (l1)
    {
    case 241:                       // 'strip'
      shift(241);                   // 'strip'
      break;
    default:
      shift(214);                   // 'preserve'
    }
    endNonterminal("ConstructionDecl");
  }

  function try_ConstructionDecl()
  {
    shiftT(108);                    // 'declare'
    lookahead1W(66);                // S^WS | '(:' | 'construction'
    shiftT(98);                     // 'construction'
    lookahead1W(166);               // S^WS | '(:' | 'preserve' | 'strip'
    switch (l1)
    {
    case 241:                       // 'strip'
      shiftT(241);                  // 'strip'
      break;
    default:
      shiftT(214);                  // 'preserve'
    }
  }

  function parse_OrderingModeDecl()
  {
    startNonterminal("OrderingModeDecl");
    shift(108);                     // 'declare'
    lookahead1W(92);                // S^WS | '(:' | 'ordering'
    shift(203);                     // 'ordering'
    lookahead1W(164);               // S^WS | '(:' | 'ordered' | 'unordered'
    switch (l1)
    {
    case 202:                       // 'ordered'
      shift(202);                   // 'ordered'
      break;
    default:
      shift(256);                   // 'unordered'
    }
    endNonterminal("OrderingModeDecl");
  }

  function try_OrderingModeDecl()
  {
    shiftT(108);                    // 'declare'
    lookahead1W(92);                // S^WS | '(:' | 'ordering'
    shiftT(203);                    // 'ordering'
    lookahead1W(164);               // S^WS | '(:' | 'ordered' | 'unordered'
    switch (l1)
    {
    case 202:                       // 'ordered'
      shiftT(202);                  // 'ordered'
      break;
    default:
      shiftT(256);                  // 'unordered'
    }
  }

  function parse_EmptyOrderDecl()
  {
    startNonterminal("EmptyOrderDecl");
    shift(108);                     // 'declare'
    lookahead1W(71);                // S^WS | '(:' | 'default'
    shift(109);                     // 'default'
    lookahead1W(91);                // S^WS | '(:' | 'order'
    shift(201);                     // 'order'
    lookahead1W(74);                // S^WS | '(:' | 'empty'
    shift(123);                     // 'empty'
    lookahead1W(154);               // S^WS | '(:' | 'greatest' | 'least'
    switch (l1)
    {
    case 147:                       // 'greatest'
      shift(147);                   // 'greatest'
      break;
    default:
      shift(173);                   // 'least'
    }
    endNonterminal("EmptyOrderDecl");
  }

  function try_EmptyOrderDecl()
  {
    shiftT(108);                    // 'declare'
    lookahead1W(71);                // S^WS | '(:' | 'default'
    shiftT(109);                    // 'default'
    lookahead1W(91);                // S^WS | '(:' | 'order'
    shiftT(201);                    // 'order'
    lookahead1W(74);                // S^WS | '(:' | 'empty'
    shiftT(123);                    // 'empty'
    lookahead1W(154);               // S^WS | '(:' | 'greatest' | 'least'
    switch (l1)
    {
    case 147:                       // 'greatest'
      shiftT(147);                  // 'greatest'
      break;
    default:
      shiftT(173);                  // 'least'
    }
  }

  function parse_CopyNamespacesDecl()
  {
    startNonterminal("CopyNamespacesDecl");
    shift(108);                     // 'declare'
    lookahead1W(69);                // S^WS | '(:' | 'copy-namespaces'
    shift(104);                     // 'copy-namespaces'
    lookahead1W(161);               // S^WS | '(:' | 'no-preserve' | 'preserve'
    parse_PreserveMode();
    lookahead1W(49);                // S^WS | '(:' | ','
    shift(41);                      // ','
    lookahead1W(156);               // S^WS | '(:' | 'inherit' | 'no-inherit'
    parse_InheritMode();
    endNonterminal("CopyNamespacesDecl");
  }

  function try_CopyNamespacesDecl()
  {
    shiftT(108);                    // 'declare'
    lookahead1W(69);                // S^WS | '(:' | 'copy-namespaces'
    shiftT(104);                    // 'copy-namespaces'
    lookahead1W(161);               // S^WS | '(:' | 'no-preserve' | 'preserve'
    try_PreserveMode();
    lookahead1W(49);                // S^WS | '(:' | ','
    shiftT(41);                     // ','
    lookahead1W(156);               // S^WS | '(:' | 'inherit' | 'no-inherit'
    try_InheritMode();
  }

  function parse_PreserveMode()
  {
    startNonterminal("PreserveMode");
    lookahead1(35);                 // 'no-preserve' | 'preserve'
    switch (l1)
    {
    case 214:                       // 'preserve'
      shift(214);                   // 'preserve'
      break;
    default:
      shift(190);                   // 'no-preserve'
    }
    endNonterminal("PreserveMode");
  }

  function try_PreserveMode()
  {
    lookahead1(35);                 // 'no-preserve' | 'preserve'
    switch (l1)
    {
    case 214:                       // 'preserve'
      shiftT(214);                  // 'preserve'
      break;
    default:
      shiftT(190);                  // 'no-preserve'
    }
  }

  function parse_InheritMode()
  {
    startNonterminal("InheritMode");
    lookahead1(34);                 // 'inherit' | 'no-inherit'
    switch (l1)
    {
    case 157:                       // 'inherit'
      shift(157);                   // 'inherit'
      break;
    default:
      shift(189);                   // 'no-inherit'
    }
    endNonterminal("InheritMode");
  }

  function try_InheritMode()
  {
    lookahead1(34);                 // 'inherit' | 'no-inherit'
    switch (l1)
    {
    case 157:                       // 'inherit'
      shiftT(157);                  // 'inherit'
      break;
    default:
      shiftT(189);                  // 'no-inherit'
    }
  }

  function parse_DecimalFormatDecl()
  {
    startNonterminal("DecimalFormatDecl");
    shift(108);                     // 'declare'
    lookahead1W(146);               // S^WS | '(:' | 'decimal-format' | 'default'
    switch (l1)
    {
    case 106:                       // 'decimal-format'
      shift(106);                   // 'decimal-format'
      lookahead1W(305);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      parse_EQName();
      break;
    default:
      shift(109);                   // 'default'
      lookahead1W(70);              // S^WS | '(:' | 'decimal-format'
      shift(106);                   // 'decimal-format'
    }
    for (;;)
    {
      lookahead1W(218);             // S^WS | '(:' | ';' | 'NaN' | 'decimal-separator' | 'digit' |
                                    // 'grouping-separator' | 'infinity' | 'minus-sign' | 'pattern-separator' |
                                    // 'per-mille' | 'percent' | 'zero-digit'
      if (l1 == 53)                 // ';'
      {
        break;
      }
      parse_DFPropertyName();
      lookahead1W(54);              // S^WS | '(:' | '='
      shift(60);                    // '='
      lookahead1W(40);              // StringLiteral | S^WS | '(:'
      shift(11);                    // StringLiteral
    }
    endNonterminal("DecimalFormatDecl");
  }

  function try_DecimalFormatDecl()
  {
    shiftT(108);                    // 'declare'
    lookahead1W(146);               // S^WS | '(:' | 'decimal-format' | 'default'
    switch (l1)
    {
    case 106:                       // 'decimal-format'
      shiftT(106);                  // 'decimal-format'
      lookahead1W(305);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      try_EQName();
      break;
    default:
      shiftT(109);                  // 'default'
      lookahead1W(70);              // S^WS | '(:' | 'decimal-format'
      shiftT(106);                  // 'decimal-format'
    }
    for (;;)
    {
      lookahead1W(218);             // S^WS | '(:' | ';' | 'NaN' | 'decimal-separator' | 'digit' |
                                    // 'grouping-separator' | 'infinity' | 'minus-sign' | 'pattern-separator' |
                                    // 'per-mille' | 'percent' | 'zero-digit'
      if (l1 == 53)                 // ';'
      {
        break;
      }
      try_DFPropertyName();
      lookahead1W(54);              // S^WS | '(:' | '='
      shiftT(60);                   // '='
      lookahead1W(40);              // StringLiteral | S^WS | '(:'
      shiftT(11);                   // StringLiteral
    }
  }

  function parse_DFPropertyName()
  {
    startNonterminal("DFPropertyName");
    switch (l1)
    {
    case 107:                       // 'decimal-separator'
      shift(107);                   // 'decimal-separator'
      break;
    case 149:                       // 'grouping-separator'
      shift(149);                   // 'grouping-separator'
      break;
    case 156:                       // 'infinity'
      shift(156);                   // 'infinity'
      break;
    case 179:                       // 'minus-sign'
      shift(179);                   // 'minus-sign'
      break;
    case 67:                        // 'NaN'
      shift(67);                    // 'NaN'
      break;
    case 209:                       // 'percent'
      shift(209);                   // 'percent'
      break;
    case 208:                       // 'per-mille'
      shift(208);                   // 'per-mille'
      break;
    case 275:                       // 'zero-digit'
      shift(275);                   // 'zero-digit'
      break;
    case 116:                       // 'digit'
      shift(116);                   // 'digit'
      break;
    default:
      shift(207);                   // 'pattern-separator'
    }
    endNonterminal("DFPropertyName");
  }

  function try_DFPropertyName()
  {
    switch (l1)
    {
    case 107:                       // 'decimal-separator'
      shiftT(107);                  // 'decimal-separator'
      break;
    case 149:                       // 'grouping-separator'
      shiftT(149);                  // 'grouping-separator'
      break;
    case 156:                       // 'infinity'
      shiftT(156);                  // 'infinity'
      break;
    case 179:                       // 'minus-sign'
      shiftT(179);                  // 'minus-sign'
      break;
    case 67:                        // 'NaN'
      shiftT(67);                   // 'NaN'
      break;
    case 209:                       // 'percent'
      shiftT(209);                  // 'percent'
      break;
    case 208:                       // 'per-mille'
      shiftT(208);                  // 'per-mille'
      break;
    case 275:                       // 'zero-digit'
      shiftT(275);                  // 'zero-digit'
      break;
    case 116:                       // 'digit'
      shiftT(116);                  // 'digit'
      break;
    default:
      shiftT(207);                  // 'pattern-separator'
    }
  }

  function parse_Import()
  {
    startNonterminal("Import");
    switch (l1)
    {
    case 153:                       // 'import'
      lookahead2W(159);             // S^WS | '(:' | 'module' | 'schema'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 115353:                    // 'import' 'schema'
      parse_SchemaImport();
      break;
    default:
      parse_ModuleImport();
    }
    endNonterminal("Import");
  }

  function parse_SchemaImport()
  {
    startNonterminal("SchemaImport");
    shift(153);                     // 'import'
    lookahead1W(97);                // S^WS | '(:' | 'schema'
    shift(225);                     // 'schema'
    lookahead1W(170);               // URILiteral | S^WS | '(:' | 'default' | 'namespace'
    if (l1 != 7)                    // URILiteral
    {
      parse_SchemaPrefix();
    }
    lookahead1W(38);                // URILiteral | S^WS | '(:'
    shift(7);                       // URILiteral
    lookahead1W(139);               // S^WS | '(:' | ';' | 'at'
    if (l1 == 81)                   // 'at'
    {
      shift(81);                    // 'at'
      lookahead1W(38);              // URILiteral | S^WS | '(:'
      shift(7);                     // URILiteral
      for (;;)
      {
        lookahead1W(131);           // S^WS | '(:' | ',' | ';'
        if (l1 != 41)               // ','
        {
          break;
        }
        shift(41);                  // ','
        lookahead1W(38);            // URILiteral | S^WS | '(:'
        shift(7);                   // URILiteral
      }
    }
    endNonterminal("SchemaImport");
  }

  function parse_SchemaPrefix()
  {
    startNonterminal("SchemaPrefix");
    switch (l1)
    {
    case 184:                       // 'namespace'
      shift(184);                   // 'namespace'
      lookahead1W(306);             // NCName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      parse_NCName();
      lookahead1W(54);              // S^WS | '(:' | '='
      shift(60);                    // '='
      break;
    default:
      shift(109);                   // 'default'
      lookahead1W(72);              // S^WS | '(:' | 'element'
      shift(121);                   // 'element'
      lookahead1W(85);              // S^WS | '(:' | 'namespace'
      shift(184);                   // 'namespace'
    }
    endNonterminal("SchemaPrefix");
  }

  function parse_ModuleImport()
  {
    startNonterminal("ModuleImport");
    shift(153);                     // 'import'
    lookahead1W(84);                // S^WS | '(:' | 'module'
    shift(182);                     // 'module'
    lookahead1W(119);               // URILiteral | S^WS | '(:' | 'namespace'
    if (l1 == 184)                  // 'namespace'
    {
      shift(184);                   // 'namespace'
      lookahead1W(306);             // NCName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      parse_NCName();
      lookahead1W(54);              // S^WS | '(:' | '='
      shift(60);                    // '='
    }
    lookahead1W(38);                // URILiteral | S^WS | '(:'
    shift(7);                       // URILiteral
    lookahead1W(139);               // S^WS | '(:' | ';' | 'at'
    if (l1 == 81)                   // 'at'
    {
      shift(81);                    // 'at'
      lookahead1W(38);              // URILiteral | S^WS | '(:'
      shift(7);                     // URILiteral
      for (;;)
      {
        lookahead1W(131);           // S^WS | '(:' | ',' | ';'
        if (l1 != 41)               // ','
        {
          break;
        }
        shift(41);                  // ','
        lookahead1W(38);            // URILiteral | S^WS | '(:'
        shift(7);                   // URILiteral
      }
    }
    endNonterminal("ModuleImport");
  }

  function parse_NamespaceDecl()
  {
    startNonterminal("NamespaceDecl");
    shift(108);                     // 'declare'
    lookahead1W(85);                // S^WS | '(:' | 'namespace'
    shift(184);                     // 'namespace'
    lookahead1W(306);               // NCName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    parse_NCName();
    lookahead1W(54);                // S^WS | '(:' | '='
    shift(60);                      // '='
    lookahead1W(38);                // URILiteral | S^WS | '(:'
    shift(7);                       // URILiteral
    endNonterminal("NamespaceDecl");
  }

  function parse_DefaultNamespaceDecl()
  {
    startNonterminal("DefaultNamespaceDecl");
    shift(108);                     // 'declare'
    lookahead1W(71);                // S^WS | '(:' | 'default'
    shift(109);                     // 'default'
    lookahead1W(147);               // S^WS | '(:' | 'element' | 'function'
    switch (l1)
    {
    case 121:                       // 'element'
      shift(121);                   // 'element'
      break;
    default:
      shift(145);                   // 'function'
    }
    lookahead1W(85);                // S^WS | '(:' | 'namespace'
    shift(184);                     // 'namespace'
    lookahead1W(38);                // URILiteral | S^WS | '(:'
    shift(7);                       // URILiteral
    endNonterminal("DefaultNamespaceDecl");
  }

  function try_DefaultNamespaceDecl()
  {
    shiftT(108);                    // 'declare'
    lookahead1W(71);                // S^WS | '(:' | 'default'
    shiftT(109);                    // 'default'
    lookahead1W(147);               // S^WS | '(:' | 'element' | 'function'
    switch (l1)
    {
    case 121:                       // 'element'
      shiftT(121);                  // 'element'
      break;
    default:
      shiftT(145);                  // 'function'
    }
    lookahead1W(85);                // S^WS | '(:' | 'namespace'
    shiftT(184);                    // 'namespace'
    lookahead1W(38);                // URILiteral | S^WS | '(:'
    shiftT(7);                      // URILiteral
  }

  function parse_FTOptionDecl()
  {
    startNonterminal("FTOptionDecl");
    shift(108);                     // 'declare'
    lookahead1W(76);                // S^WS | '(:' | 'ft-option'
    shift(141);                     // 'ft-option'
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    parse_FTMatchOptions();
    endNonterminal("FTOptionDecl");
  }

  function parse_AnnotatedDecl()
  {
    startNonterminal("AnnotatedDecl");
    shift(108);                     // 'declare'
    for (;;)
    {
      lookahead1W(205);             // S^WS | '%' | '(:' | 'collection' | 'function' | 'index' | 'integrity' |
                                    // 'updating' | 'variable'
      if (l1 != 32                  // '%'
       && l1 != 257)                // 'updating'
      {
        break;
      }
      switch (l1)
      {
      case 257:                     // 'updating'
        parse_CompatibilityAnnotation();
        break;
      default:
        parse_Annotation();
      }
    }
    switch (l1)
    {
    case 262:                       // 'variable'
      parse_VarDecl();
      break;
    case 145:                       // 'function'
      parse_FunctionDecl();
      break;
    case 95:                        // 'collection'
      parse_CollectionDecl();
      break;
    case 155:                       // 'index'
      parse_IndexDecl();
      break;
    default:
      parse_ICDecl();
    }
    endNonterminal("AnnotatedDecl");
  }

  function parse_CompatibilityAnnotation()
  {
    startNonterminal("CompatibilityAnnotation");
    shift(257);                     // 'updating'
    endNonterminal("CompatibilityAnnotation");
  }

  function parse_Annotation()
  {
    startNonterminal("Annotation");
    shift(32);                      // '%'
    lookahead1W(305);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    parse_EQName();
    lookahead1W(206);               // S^WS | '%' | '(' | '(:' | 'collection' | 'function' | 'index' | 'integrity' |
                                    // 'updating' | 'variable'
    if (l1 == 34)                   // '('
    {
      shift(34);                    // '('
      lookahead1W(186);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | S^WS | '(:'
      parse_Literal();
      for (;;)
      {
        lookahead1W(129);           // S^WS | '(:' | ')' | ','
        if (l1 != 41)               // ','
        {
          break;
        }
        shift(41);                  // ','
        lookahead1W(186);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | S^WS | '(:'
        parse_Literal();
      }
      shift(37);                    // ')'
    }
    endNonterminal("Annotation");
  }

  function try_Annotation()
  {
    shiftT(32);                     // '%'
    lookahead1W(305);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    try_EQName();
    lookahead1W(206);               // S^WS | '%' | '(' | '(:' | 'collection' | 'function' | 'index' | 'integrity' |
                                    // 'updating' | 'variable'
    if (l1 == 34)                   // '('
    {
      shiftT(34);                   // '('
      lookahead1W(186);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | S^WS | '(:'
      try_Literal();
      for (;;)
      {
        lookahead1W(129);           // S^WS | '(:' | ')' | ','
        if (l1 != 41)               // ','
        {
          break;
        }
        shiftT(41);                 // ','
        lookahead1W(186);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | S^WS | '(:'
        try_Literal();
      }
      shiftT(37);                   // ')'
    }
  }

  function parse_VarDecl()
  {
    startNonterminal("VarDecl");
    shift(262);                     // 'variable'
    lookahead1W(45);                // S^WS | '$' | '(:'
    shift(31);                      // '$'
    lookahead1W(305);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    parse_VarName();
    lookahead1W(179);               // S^WS | '(:' | ':=' | 'as' | 'external'
    if (l1 == 79)                   // 'as'
    {
      parse_TypeDeclaration();
    }
    lookahead1W(137);               // S^WS | '(:' | ':=' | 'external'
    switch (l1)
    {
    case 52:                        // ':='
      shift(52);                    // ':='
      lookahead1W(37);              // EPSILON | S^WS | '(:'
      parse_VarValue();
      break;
    default:
      shift(133);                   // 'external'
      lookahead1W(135);             // S^WS | '(:' | ':=' | ';'
      if (l1 == 52)                 // ':='
      {
        shift(52);                  // ':='
        lookahead1W(37);            // EPSILON | S^WS | '(:'
        parse_VarDefaultValue();
      }
    }
    endNonterminal("VarDecl");
  }

  function parse_VarValue()
  {
    startNonterminal("VarValue");
    parse_ExprSingle();
    endNonterminal("VarValue");
  }

  function parse_VarDefaultValue()
  {
    startNonterminal("VarDefaultValue");
    parse_ExprSingle();
    endNonterminal("VarDefaultValue");
  }

  function parse_ContextItemDecl()
  {
    startNonterminal("ContextItemDecl");
    shift(108);                     // 'declare'
    lookahead1W(68);                // S^WS | '(:' | 'context'
    shift(101);                     // 'context'
    lookahead1W(79);                // S^WS | '(:' | 'item'
    shift(165);                     // 'item'
    lookahead1W(179);               // S^WS | '(:' | ':=' | 'as' | 'external'
    if (l1 == 79)                   // 'as'
    {
      shift(79);                    // 'as'
      lookahead1W(37);              // EPSILON | S^WS | '(:'
      parse_ItemType();
    }
    lookahead1W(137);               // S^WS | '(:' | ':=' | 'external'
    switch (l1)
    {
    case 52:                        // ':='
      shift(52);                    // ':='
      lookahead1W(37);              // EPSILON | S^WS | '(:'
      parse_VarValue();
      break;
    default:
      shift(133);                   // 'external'
      lookahead1W(135);             // S^WS | '(:' | ':=' | ';'
      if (l1 == 52)                 // ':='
      {
        shift(52);                  // ':='
        lookahead1W(37);            // EPSILON | S^WS | '(:'
        parse_VarDefaultValue();
      }
    }
    endNonterminal("ContextItemDecl");
  }

  function parse_ParamList()
  {
    startNonterminal("ParamList");
    parse_Param();
    for (;;)
    {
      lookahead1W(129);             // S^WS | '(:' | ')' | ','
      if (l1 != 41)                 // ','
      {
        break;
      }
      shift(41);                    // ','
      lookahead1W(37);              // EPSILON | S^WS | '(:'
      parse_Param();
    }
    endNonterminal("ParamList");
  }

  function try_ParamList()
  {
    try_Param();
    for (;;)
    {
      lookahead1W(129);             // S^WS | '(:' | ')' | ','
      if (l1 != 41)                 // ','
      {
        break;
      }
      shiftT(41);                   // ','
      lookahead1W(37);              // EPSILON | S^WS | '(:'
      try_Param();
    }
  }

  function parse_Param()
  {
    startNonterminal("Param");
    lookahead1(6);                  // '$'
    shift(31);                      // '$'
    lookahead1W(305);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    parse_EQName();
    lookahead1W(175);               // S^WS | '(:' | ')' | ',' | 'as'
    if (l1 == 79)                   // 'as'
    {
      parse_TypeDeclaration();
    }
    endNonterminal("Param");
  }

  function try_Param()
  {
    lookahead1(6);                  // '$'
    shiftT(31);                     // '$'
    lookahead1W(305);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    try_EQName();
    lookahead1W(175);               // S^WS | '(:' | ')' | ',' | 'as'
    if (l1 == 79)                   // 'as'
    {
      try_TypeDeclaration();
    }
  }

  function parse_FunctionBody()
  {
    startNonterminal("FunctionBody");
    parse_EnclosedExpr();
    endNonterminal("FunctionBody");
  }

  function try_FunctionBody()
  {
    try_EnclosedExpr();
  }

  function parse_EnclosedExpr()
  {
    startNonterminal("EnclosedExpr");
    lookahead1(22);                 // '{'
    shift(276);                     // '{'
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    parse_Expr();
    lookahead1W(115);               // S^WS | '(:' | '}'
    shift(282);                     // '}'
    endNonterminal("EnclosedExpr");
  }

  function try_EnclosedExpr()
  {
    lookahead1(22);                 // '{'
    shiftT(276);                    // '{'
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    try_Expr();
    lookahead1W(115);               // S^WS | '(:' | '}'
    shiftT(282);                    // '}'
  }

  function parse_OptionDecl()
  {
    startNonterminal("OptionDecl");
    shift(108);                     // 'declare'
    lookahead1W(90);                // S^WS | '(:' | 'option'
    shift(199);                     // 'option'
    lookahead1W(305);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    parse_EQName();
    lookahead1W(40);                // StringLiteral | S^WS | '(:'
    shift(11);                      // StringLiteral
    endNonterminal("OptionDecl");
  }

  function parse_Expr()
  {
    startNonterminal("Expr");
    parse_ExprSingle();
    for (;;)
    {
      lookahead1W(203);             // S^WS | EOF | '(:' | ')' | ',' | ']' | '|}' | '}'
      if (l1 != 41)                 // ','
      {
        break;
      }
      shift(41);                    // ','
      lookahead1W(37);              // EPSILON | S^WS | '(:'
      parse_ExprSingle();
    }
    endNonterminal("Expr");
  }

  function try_Expr()
  {
    try_ExprSingle();
    for (;;)
    {
      lookahead1W(203);             // S^WS | EOF | '(:' | ')' | ',' | ']' | '|}' | '}'
      if (l1 != 41)                 // ','
      {
        break;
      }
      shiftT(41);                   // ','
      lookahead1W(37);              // EPSILON | S^WS | '(:'
      try_ExprSingle();
    }
  }

  function parse_FLWORExpr()
  {
    startNonterminal("FLWORExpr");
    parse_InitialClause();
    for (;;)
    {
      lookahead1W(208);             // S^WS | '(:' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' | 'stable' |
                                    // 'where'
      if (l1 == 220)                // 'return'
      {
        break;
      }
      parse_IntermediateClause();
    }
    parse_ReturnClause();
    endNonterminal("FLWORExpr");
  }

  function try_FLWORExpr()
  {
    try_InitialClause();
    for (;;)
    {
      lookahead1W(208);             // S^WS | '(:' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' | 'stable' |
                                    // 'where'
      if (l1 == 220)                // 'return'
      {
        break;
      }
      try_IntermediateClause();
    }
    try_ReturnClause();
  }

  function parse_InitialClause()
  {
    startNonterminal("InitialClause");
    lookahead1(33);                 // 'for' | 'let'
    switch (l1)
    {
    case 137:                       // 'for'
      lookahead2W(173);             // S^WS | '$' | '(:' | 'sliding' | 'tumbling'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 16009:                     // 'for' '$'
      parse_ForClause();
      break;
    case 174:                       // 'let'
      parse_LetClause();
      break;
    default:
      parse_WindowClause();
    }
    endNonterminal("InitialClause");
  }

  function try_InitialClause()
  {
    lookahead1(33);                 // 'for' | 'let'
    switch (l1)
    {
    case 137:                       // 'for'
      lookahead2W(173);             // S^WS | '$' | '(:' | 'sliding' | 'tumbling'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 16009:                     // 'for' '$'
      try_ForClause();
      break;
    case 174:                       // 'let'
      try_LetClause();
      break;
    default:
      try_WindowClause();
    }
  }

  function parse_IntermediateClause()
  {
    startNonterminal("IntermediateClause");
    switch (l1)
    {
    case 137:                       // 'for'
    case 174:                       // 'let'
      parse_InitialClause();
      break;
    case 266:                       // 'where'
      parse_WhereClause();
      break;
    case 148:                       // 'group'
      parse_GroupByClause();
      break;
    case 105:                       // 'count'
      parse_CountClause();
      break;
    default:
      parse_OrderByClause();
    }
    endNonterminal("IntermediateClause");
  }

  function try_IntermediateClause()
  {
    switch (l1)
    {
    case 137:                       // 'for'
    case 174:                       // 'let'
      try_InitialClause();
      break;
    case 266:                       // 'where'
      try_WhereClause();
      break;
    case 148:                       // 'group'
      try_GroupByClause();
      break;
    case 105:                       // 'count'
      try_CountClause();
      break;
    default:
      try_OrderByClause();
    }
  }

  function parse_ForClause()
  {
    startNonterminal("ForClause");
    shift(137);                     // 'for'
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    parse_ForBinding();
    for (;;)
    {
      lookahead1W(212);             // S^WS | '(:' | ',' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' |
                                    // 'stable' | 'where'
      if (l1 != 41)                 // ','
      {
        break;
      }
      shift(41);                    // ','
      lookahead1W(37);              // EPSILON | S^WS | '(:'
      parse_ForBinding();
    }
    endNonterminal("ForClause");
  }

  function try_ForClause()
  {
    shiftT(137);                    // 'for'
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    try_ForBinding();
    for (;;)
    {
      lookahead1W(212);             // S^WS | '(:' | ',' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' |
                                    // 'stable' | 'where'
      if (l1 != 41)                 // ','
      {
        break;
      }
      shiftT(41);                   // ','
      lookahead1W(37);              // EPSILON | S^WS | '(:'
      try_ForBinding();
    }
  }

  function parse_ForBinding()
  {
    startNonterminal("ForBinding");
    lookahead1(6);                  // '$'
    shift(31);                      // '$'
    lookahead1W(305);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    parse_VarName();
    lookahead1W(198);               // S^WS | '(:' | 'allowing' | 'as' | 'at' | 'in' | 'score'
    if (l1 == 79)                   // 'as'
    {
      parse_TypeDeclaration();
    }
    lookahead1W(192);               // S^WS | '(:' | 'allowing' | 'at' | 'in' | 'score'
    if (l1 == 72)                   // 'allowing'
    {
      parse_AllowingEmpty();
    }
    lookahead1W(181);               // S^WS | '(:' | 'at' | 'in' | 'score'
    if (l1 == 81)                   // 'at'
    {
      parse_PositionalVar();
    }
    lookahead1W(155);               // S^WS | '(:' | 'in' | 'score'
    if (l1 == 228)                  // 'score'
    {
      parse_FTScoreVar();
    }
    lookahead1W(77);                // S^WS | '(:' | 'in'
    shift(154);                     // 'in'
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    parse_ExprSingle();
    endNonterminal("ForBinding");
  }

  function try_ForBinding()
  {
    lookahead1(6);                  // '$'
    shiftT(31);                     // '$'
    lookahead1W(305);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    try_VarName();
    lookahead1W(198);               // S^WS | '(:' | 'allowing' | 'as' | 'at' | 'in' | 'score'
    if (l1 == 79)                   // 'as'
    {
      try_TypeDeclaration();
    }
    lookahead1W(192);               // S^WS | '(:' | 'allowing' | 'at' | 'in' | 'score'
    if (l1 == 72)                   // 'allowing'
    {
      try_AllowingEmpty();
    }
    lookahead1W(181);               // S^WS | '(:' | 'at' | 'in' | 'score'
    if (l1 == 81)                   // 'at'
    {
      try_PositionalVar();
    }
    lookahead1W(155);               // S^WS | '(:' | 'in' | 'score'
    if (l1 == 228)                  // 'score'
    {
      try_FTScoreVar();
    }
    lookahead1W(77);                // S^WS | '(:' | 'in'
    shiftT(154);                    // 'in'
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    try_ExprSingle();
  }

  function parse_AllowingEmpty()
  {
    startNonterminal("AllowingEmpty");
    shift(72);                      // 'allowing'
    lookahead1W(74);                // S^WS | '(:' | 'empty'
    shift(123);                     // 'empty'
    endNonterminal("AllowingEmpty");
  }

  function try_AllowingEmpty()
  {
    shiftT(72);                     // 'allowing'
    lookahead1W(74);                // S^WS | '(:' | 'empty'
    shiftT(123);                    // 'empty'
  }

  function parse_PositionalVar()
  {
    startNonterminal("PositionalVar");
    shift(81);                      // 'at'
    lookahead1W(45);                // S^WS | '$' | '(:'
    shift(31);                      // '$'
    lookahead1W(305);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    parse_VarName();
    endNonterminal("PositionalVar");
  }

  function try_PositionalVar()
  {
    shiftT(81);                     // 'at'
    lookahead1W(45);                // S^WS | '$' | '(:'
    shiftT(31);                     // '$'
    lookahead1W(305);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    try_VarName();
  }

  function parse_FTScoreVar()
  {
    startNonterminal("FTScoreVar");
    shift(228);                     // 'score'
    lookahead1W(45);                // S^WS | '$' | '(:'
    shift(31);                      // '$'
    lookahead1W(305);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    parse_VarName();
    endNonterminal("FTScoreVar");
  }

  function try_FTScoreVar()
  {
    shiftT(228);                    // 'score'
    lookahead1W(45);                // S^WS | '$' | '(:'
    shiftT(31);                     // '$'
    lookahead1W(305);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    try_VarName();
  }

  function parse_LetClause()
  {
    startNonterminal("LetClause");
    shift(174);                     // 'let'
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    parse_LetBinding();
    for (;;)
    {
      lookahead1W(212);             // S^WS | '(:' | ',' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' |
                                    // 'stable' | 'where'
      if (l1 != 41)                 // ','
      {
        break;
      }
      shift(41);                    // ','
      lookahead1W(37);              // EPSILON | S^WS | '(:'
      parse_LetBinding();
    }
    endNonterminal("LetClause");
  }

  function try_LetClause()
  {
    shiftT(174);                    // 'let'
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    try_LetBinding();
    for (;;)
    {
      lookahead1W(212);             // S^WS | '(:' | ',' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' |
                                    // 'stable' | 'where'
      if (l1 != 41)                 // ','
      {
        break;
      }
      shiftT(41);                   // ','
      lookahead1W(37);              // EPSILON | S^WS | '(:'
      try_LetBinding();
    }
  }

  function parse_LetBinding()
  {
    startNonterminal("LetBinding");
    lookahead1(30);                 // '$' | 'score'
    switch (l1)
    {
    case 31:                        // '$'
      shift(31);                    // '$'
      lookahead1W(305);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      parse_VarName();
      lookahead1W(136);             // S^WS | '(:' | ':=' | 'as'
      if (l1 == 79)                 // 'as'
      {
        parse_TypeDeclaration();
      }
      break;
    default:
      parse_FTScoreVar();
    }
    lookahead1W(52);                // S^WS | '(:' | ':='
    shift(52);                      // ':='
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    parse_ExprSingle();
    endNonterminal("LetBinding");
  }

  function try_LetBinding()
  {
    lookahead1(30);                 // '$' | 'score'
    switch (l1)
    {
    case 31:                        // '$'
      shiftT(31);                   // '$'
      lookahead1W(305);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      try_VarName();
      lookahead1W(136);             // S^WS | '(:' | ':=' | 'as'
      if (l1 == 79)                 // 'as'
      {
        try_TypeDeclaration();
      }
      break;
    default:
      try_FTScoreVar();
    }
    lookahead1W(52);                // S^WS | '(:' | ':='
    shiftT(52);                     // ':='
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    try_ExprSingle();
  }

  function parse_WindowClause()
  {
    startNonterminal("WindowClause");
    shift(137);                     // 'for'
    lookahead1W(168);               // S^WS | '(:' | 'sliding' | 'tumbling'
    switch (l1)
    {
    case 251:                       // 'tumbling'
      parse_TumblingWindowClause();
      break;
    default:
      parse_SlidingWindowClause();
    }
    endNonterminal("WindowClause");
  }

  function try_WindowClause()
  {
    shiftT(137);                    // 'for'
    lookahead1W(168);               // S^WS | '(:' | 'sliding' | 'tumbling'
    switch (l1)
    {
    case 251:                       // 'tumbling'
      try_TumblingWindowClause();
      break;
    default:
      try_SlidingWindowClause();
    }
  }

  function parse_TumblingWindowClause()
  {
    startNonterminal("TumblingWindowClause");
    shift(251);                     // 'tumbling'
    lookahead1W(110);               // S^WS | '(:' | 'window'
    shift(269);                     // 'window'
    lookahead1W(45);                // S^WS | '$' | '(:'
    shift(31);                      // '$'
    lookahead1W(305);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    parse_VarName();
    lookahead1W(141);               // S^WS | '(:' | 'as' | 'in'
    if (l1 == 79)                   // 'as'
    {
      parse_TypeDeclaration();
    }
    lookahead1W(77);                // S^WS | '(:' | 'in'
    shift(154);                     // 'in'
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    parse_ExprSingle();
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    parse_WindowStartCondition();
    lookahead1W(216);               // S^WS | '(:' | 'count' | 'end' | 'for' | 'group' | 'let' | 'only' | 'order' |
                                    // 'return' | 'stable' | 'where'
    if (l1 == 126                   // 'end'
     || l1 == 198)                  // 'only'
    {
      parse_WindowEndCondition();
    }
    endNonterminal("TumblingWindowClause");
  }

  function try_TumblingWindowClause()
  {
    shiftT(251);                    // 'tumbling'
    lookahead1W(110);               // S^WS | '(:' | 'window'
    shiftT(269);                    // 'window'
    lookahead1W(45);                // S^WS | '$' | '(:'
    shiftT(31);                     // '$'
    lookahead1W(305);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    try_VarName();
    lookahead1W(141);               // S^WS | '(:' | 'as' | 'in'
    if (l1 == 79)                   // 'as'
    {
      try_TypeDeclaration();
    }
    lookahead1W(77);                // S^WS | '(:' | 'in'
    shiftT(154);                    // 'in'
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    try_ExprSingle();
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    try_WindowStartCondition();
    lookahead1W(216);               // S^WS | '(:' | 'count' | 'end' | 'for' | 'group' | 'let' | 'only' | 'order' |
                                    // 'return' | 'stable' | 'where'
    if (l1 == 126                   // 'end'
     || l1 == 198)                  // 'only'
    {
      try_WindowEndCondition();
    }
  }

  function parse_SlidingWindowClause()
  {
    startNonterminal("SlidingWindowClause");
    shift(234);                     // 'sliding'
    lookahead1W(110);               // S^WS | '(:' | 'window'
    shift(269);                     // 'window'
    lookahead1W(45);                // S^WS | '$' | '(:'
    shift(31);                      // '$'
    lookahead1W(305);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    parse_VarName();
    lookahead1W(141);               // S^WS | '(:' | 'as' | 'in'
    if (l1 == 79)                   // 'as'
    {
      parse_TypeDeclaration();
    }
    lookahead1W(77);                // S^WS | '(:' | 'in'
    shift(154);                     // 'in'
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    parse_ExprSingle();
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    parse_WindowStartCondition();
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    parse_WindowEndCondition();
    endNonterminal("SlidingWindowClause");
  }

  function try_SlidingWindowClause()
  {
    shiftT(234);                    // 'sliding'
    lookahead1W(110);               // S^WS | '(:' | 'window'
    shiftT(269);                    // 'window'
    lookahead1W(45);                // S^WS | '$' | '(:'
    shiftT(31);                     // '$'
    lookahead1W(305);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    try_VarName();
    lookahead1W(141);               // S^WS | '(:' | 'as' | 'in'
    if (l1 == 79)                   // 'as'
    {
      try_TypeDeclaration();
    }
    lookahead1W(77);                // S^WS | '(:' | 'in'
    shiftT(154);                    // 'in'
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    try_ExprSingle();
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    try_WindowStartCondition();
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    try_WindowEndCondition();
  }

  function parse_WindowStartCondition()
  {
    startNonterminal("WindowStartCondition");
    lookahead1(19);                 // 'start'
    shift(237);                     // 'start'
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    parse_WindowVars();
    lookahead1W(108);               // S^WS | '(:' | 'when'
    shift(265);                     // 'when'
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    parse_ExprSingle();
    endNonterminal("WindowStartCondition");
  }

  function try_WindowStartCondition()
  {
    lookahead1(19);                 // 'start'
    shiftT(237);                    // 'start'
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    try_WindowVars();
    lookahead1W(108);               // S^WS | '(:' | 'when'
    shiftT(265);                    // 'when'
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    try_ExprSingle();
  }

  function parse_WindowEndCondition()
  {
    startNonterminal("WindowEndCondition");
    lookahead1W(149);               // S^WS | '(:' | 'end' | 'only'
    if (l1 == 198)                  // 'only'
    {
      shift(198);                   // 'only'
    }
    lookahead1W(75);                // S^WS | '(:' | 'end'
    shift(126);                     // 'end'
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    parse_WindowVars();
    lookahead1W(108);               // S^WS | '(:' | 'when'
    shift(265);                     // 'when'
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    parse_ExprSingle();
    endNonterminal("WindowEndCondition");
  }

  function try_WindowEndCondition()
  {
    lookahead1W(149);               // S^WS | '(:' | 'end' | 'only'
    if (l1 == 198)                  // 'only'
    {
      shiftT(198);                  // 'only'
    }
    lookahead1W(75);                // S^WS | '(:' | 'end'
    shiftT(126);                    // 'end'
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    try_WindowVars();
    lookahead1W(108);               // S^WS | '(:' | 'when'
    shiftT(265);                    // 'when'
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    try_ExprSingle();
  }

  function parse_WindowVars()
  {
    startNonterminal("WindowVars");
    lookahead1W(197);               // S^WS | '$' | '(:' | 'at' | 'next' | 'previous' | 'when'
    if (l1 == 31)                   // '$'
    {
      shift(31);                    // '$'
      lookahead1W(305);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      parse_CurrentItem();
    }
    lookahead1W(193);               // S^WS | '(:' | 'at' | 'next' | 'previous' | 'when'
    if (l1 == 81)                   // 'at'
    {
      parse_PositionalVar();
    }
    lookahead1W(184);               // S^WS | '(:' | 'next' | 'previous' | 'when'
    if (l1 == 215)                  // 'previous'
    {
      shift(215);                   // 'previous'
      lookahead1W(45);              // S^WS | '$' | '(:'
      shift(31);                    // '$'
      lookahead1W(305);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      parse_PreviousItem();
    }
    lookahead1W(160);               // S^WS | '(:' | 'next' | 'when'
    if (l1 == 187)                  // 'next'
    {
      shift(187);                   // 'next'
      lookahead1W(45);              // S^WS | '$' | '(:'
      shift(31);                    // '$'
      lookahead1W(305);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      parse_NextItem();
    }
    endNonterminal("WindowVars");
  }

  function try_WindowVars()
  {
    lookahead1W(197);               // S^WS | '$' | '(:' | 'at' | 'next' | 'previous' | 'when'
    if (l1 == 31)                   // '$'
    {
      shiftT(31);                   // '$'
      lookahead1W(305);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      try_CurrentItem();
    }
    lookahead1W(193);               // S^WS | '(:' | 'at' | 'next' | 'previous' | 'when'
    if (l1 == 81)                   // 'at'
    {
      try_PositionalVar();
    }
    lookahead1W(184);               // S^WS | '(:' | 'next' | 'previous' | 'when'
    if (l1 == 215)                  // 'previous'
    {
      shiftT(215);                  // 'previous'
      lookahead1W(45);              // S^WS | '$' | '(:'
      shiftT(31);                   // '$'
      lookahead1W(305);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      try_PreviousItem();
    }
    lookahead1W(160);               // S^WS | '(:' | 'next' | 'when'
    if (l1 == 187)                  // 'next'
    {
      shiftT(187);                  // 'next'
      lookahead1W(45);              // S^WS | '$' | '(:'
      shiftT(31);                   // '$'
      lookahead1W(305);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      try_NextItem();
    }
  }

  function parse_CurrentItem()
  {
    startNonterminal("CurrentItem");
    parse_EQName();
    endNonterminal("CurrentItem");
  }

  function try_CurrentItem()
  {
    try_EQName();
  }

  function parse_PreviousItem()
  {
    startNonterminal("PreviousItem");
    parse_EQName();
    endNonterminal("PreviousItem");
  }

  function try_PreviousItem()
  {
    try_EQName();
  }

  function parse_NextItem()
  {
    startNonterminal("NextItem");
    parse_EQName();
    endNonterminal("NextItem");
  }

  function try_NextItem()
  {
    try_EQName();
  }

  function parse_CountClause()
  {
    startNonterminal("CountClause");
    shift(105);                     // 'count'
    lookahead1W(45);                // S^WS | '$' | '(:'
    shift(31);                      // '$'
    lookahead1W(305);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    parse_VarName();
    endNonterminal("CountClause");
  }

  function try_CountClause()
  {
    shiftT(105);                    // 'count'
    lookahead1W(45);                // S^WS | '$' | '(:'
    shiftT(31);                     // '$'
    lookahead1W(305);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    try_VarName();
  }

  function parse_WhereClause()
  {
    startNonterminal("WhereClause");
    shift(266);                     // 'where'
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    parse_ExprSingle();
    endNonterminal("WhereClause");
  }

  function try_WhereClause()
  {
    shiftT(266);                    // 'where'
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    try_ExprSingle();
  }

  function parse_GroupByClause()
  {
    startNonterminal("GroupByClause");
    shift(148);                     // 'group'
    lookahead1W(59);                // S^WS | '(:' | 'by'
    shift(87);                      // 'by'
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    parse_GroupingSpecList();
    endNonterminal("GroupByClause");
  }

  function try_GroupByClause()
  {
    shiftT(148);                    // 'group'
    lookahead1W(59);                // S^WS | '(:' | 'by'
    shiftT(87);                     // 'by'
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    try_GroupingSpecList();
  }

  function parse_GroupingSpecList()
  {
    startNonterminal("GroupingSpecList");
    parse_GroupingSpec();
    for (;;)
    {
      lookahead1W(212);             // S^WS | '(:' | ',' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' |
                                    // 'stable' | 'where'
      if (l1 != 41)                 // ','
      {
        break;
      }
      shift(41);                    // ','
      lookahead1W(37);              // EPSILON | S^WS | '(:'
      parse_GroupingSpec();
    }
    endNonterminal("GroupingSpecList");
  }

  function try_GroupingSpecList()
  {
    try_GroupingSpec();
    for (;;)
    {
      lookahead1W(212);             // S^WS | '(:' | ',' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' |
                                    // 'stable' | 'where'
      if (l1 != 41)                 // ','
      {
        break;
      }
      shiftT(41);                   // ','
      lookahead1W(37);              // EPSILON | S^WS | '(:'
      try_GroupingSpec();
    }
  }

  function parse_GroupingSpec()
  {
    startNonterminal("GroupingSpec");
    lookahead1(6);                  // '$'
    shift(31);                      // '$'
    lookahead1W(305);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    parse_VarName();
    lookahead1W(219);               // S^WS | '(:' | ',' | ':=' | 'as' | 'collation' | 'count' | 'for' | 'group' |
                                    // 'let' | 'order' | 'return' | 'stable' | 'where'
    if (l1 == 52                    // ':='
     || l1 == 79)                   // 'as'
    {
      if (l1 == 79)                 // 'as'
      {
        parse_TypeDeclaration();
      }
      lookahead1W(52);              // S^WS | '(:' | ':='
      shift(52);                    // ':='
      lookahead1W(37);              // EPSILON | S^WS | '(:'
      parse_ExprSingle();
    }
    lookahead1W(214);               // S^WS | '(:' | ',' | 'collation' | 'count' | 'for' | 'group' | 'let' | 'order' |
                                    // 'return' | 'stable' | 'where'
    if (l1 == 94)                   // 'collation'
    {
      shift(94);                    // 'collation'
      lookahead1W(38);              // URILiteral | S^WS | '(:'
      shift(7);                     // URILiteral
    }
    endNonterminal("GroupingSpec");
  }

  function try_GroupingSpec()
  {
    lookahead1(6);                  // '$'
    shiftT(31);                     // '$'
    lookahead1W(305);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    try_VarName();
    lookahead1W(219);               // S^WS | '(:' | ',' | ':=' | 'as' | 'collation' | 'count' | 'for' | 'group' |
                                    // 'let' | 'order' | 'return' | 'stable' | 'where'
    if (l1 == 52                    // ':='
     || l1 == 79)                   // 'as'
    {
      if (l1 == 79)                 // 'as'
      {
        try_TypeDeclaration();
      }
      lookahead1W(52);              // S^WS | '(:' | ':='
      shiftT(52);                   // ':='
      lookahead1W(37);              // EPSILON | S^WS | '(:'
      try_ExprSingle();
    }
    lookahead1W(214);               // S^WS | '(:' | ',' | 'collation' | 'count' | 'for' | 'group' | 'let' | 'order' |
                                    // 'return' | 'stable' | 'where'
    if (l1 == 94)                   // 'collation'
    {
      shiftT(94);                   // 'collation'
      lookahead1W(38);              // URILiteral | S^WS | '(:'
      shiftT(7);                    // URILiteral
    }
  }

  function parse_OrderByClause()
  {
    startNonterminal("OrderByClause");
    switch (l1)
    {
    case 201:                       // 'order'
      shift(201);                   // 'order'
      lookahead1W(59);              // S^WS | '(:' | 'by'
      shift(87);                    // 'by'
      break;
    default:
      shift(236);                   // 'stable'
      lookahead1W(91);              // S^WS | '(:' | 'order'
      shift(201);                   // 'order'
      lookahead1W(59);              // S^WS | '(:' | 'by'
      shift(87);                    // 'by'
    }
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    parse_OrderSpecList();
    endNonterminal("OrderByClause");
  }

  function try_OrderByClause()
  {
    switch (l1)
    {
    case 201:                       // 'order'
      shiftT(201);                  // 'order'
      lookahead1W(59);              // S^WS | '(:' | 'by'
      shiftT(87);                   // 'by'
      break;
    default:
      shiftT(236);                  // 'stable'
      lookahead1W(91);              // S^WS | '(:' | 'order'
      shiftT(201);                  // 'order'
      lookahead1W(59);              // S^WS | '(:' | 'by'
      shiftT(87);                   // 'by'
    }
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    try_OrderSpecList();
  }

  function parse_OrderSpecList()
  {
    startNonterminal("OrderSpecList");
    parse_OrderSpec();
    for (;;)
    {
      lookahead1W(212);             // S^WS | '(:' | ',' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' |
                                    // 'stable' | 'where'
      if (l1 != 41)                 // ','
      {
        break;
      }
      shift(41);                    // ','
      lookahead1W(37);              // EPSILON | S^WS | '(:'
      parse_OrderSpec();
    }
    endNonterminal("OrderSpecList");
  }

  function try_OrderSpecList()
  {
    try_OrderSpec();
    for (;;)
    {
      lookahead1W(212);             // S^WS | '(:' | ',' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' |
                                    // 'stable' | 'where'
      if (l1 != 41)                 // ','
      {
        break;
      }
      shiftT(41);                   // ','
      lookahead1W(37);              // EPSILON | S^WS | '(:'
      try_OrderSpec();
    }
  }

  function parse_OrderSpec()
  {
    startNonterminal("OrderSpec");
    parse_ExprSingle();
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    parse_OrderModifier();
    endNonterminal("OrderSpec");
  }

  function try_OrderSpec()
  {
    try_ExprSingle();
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    try_OrderModifier();
  }

  function parse_OrderModifier()
  {
    startNonterminal("OrderModifier");
    lookahead1W(220);               // S^WS | '(:' | ',' | 'ascending' | 'collation' | 'count' | 'descending' |
                                    // 'empty' | 'for' | 'group' | 'let' | 'order' | 'return' | 'stable' | 'where'
    if (l1 == 80                    // 'ascending'
     || l1 == 113)                  // 'descending'
    {
      switch (l1)
      {
      case 80:                      // 'ascending'
        shift(80);                  // 'ascending'
        break;
      default:
        shift(113);                 // 'descending'
      }
    }
    lookahead1W(217);               // S^WS | '(:' | ',' | 'collation' | 'count' | 'empty' | 'for' | 'group' | 'let' |
                                    // 'order' | 'return' | 'stable' | 'where'
    if (l1 == 123)                  // 'empty'
    {
      shift(123);                   // 'empty'
      lookahead1W(154);             // S^WS | '(:' | 'greatest' | 'least'
      switch (l1)
      {
      case 147:                     // 'greatest'
        shift(147);                 // 'greatest'
        break;
      default:
        shift(173);                 // 'least'
      }
    }
    lookahead1W(214);               // S^WS | '(:' | ',' | 'collation' | 'count' | 'for' | 'group' | 'let' | 'order' |
                                    // 'return' | 'stable' | 'where'
    if (l1 == 94)                   // 'collation'
    {
      shift(94);                    // 'collation'
      lookahead1W(38);              // URILiteral | S^WS | '(:'
      shift(7);                     // URILiteral
    }
    endNonterminal("OrderModifier");
  }

  function try_OrderModifier()
  {
    lookahead1W(220);               // S^WS | '(:' | ',' | 'ascending' | 'collation' | 'count' | 'descending' |
                                    // 'empty' | 'for' | 'group' | 'let' | 'order' | 'return' | 'stable' | 'where'
    if (l1 == 80                    // 'ascending'
     || l1 == 113)                  // 'descending'
    {
      switch (l1)
      {
      case 80:                      // 'ascending'
        shiftT(80);                 // 'ascending'
        break;
      default:
        shiftT(113);                // 'descending'
      }
    }
    lookahead1W(217);               // S^WS | '(:' | ',' | 'collation' | 'count' | 'empty' | 'for' | 'group' | 'let' |
                                    // 'order' | 'return' | 'stable' | 'where'
    if (l1 == 123)                  // 'empty'
    {
      shiftT(123);                  // 'empty'
      lookahead1W(154);             // S^WS | '(:' | 'greatest' | 'least'
      switch (l1)
      {
      case 147:                     // 'greatest'
        shiftT(147);                // 'greatest'
        break;
      default:
        shiftT(173);                // 'least'
      }
    }
    lookahead1W(214);               // S^WS | '(:' | ',' | 'collation' | 'count' | 'for' | 'group' | 'let' | 'order' |
                                    // 'return' | 'stable' | 'where'
    if (l1 == 94)                   // 'collation'
    {
      shiftT(94);                   // 'collation'
      lookahead1W(38);              // URILiteral | S^WS | '(:'
      shiftT(7);                    // URILiteral
    }
  }

  function parse_ReturnClause()
  {
    startNonterminal("ReturnClause");
    shift(220);                     // 'return'
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    parse_ExprSingle();
    endNonterminal("ReturnClause");
  }

  function try_ReturnClause()
  {
    shiftT(220);                    // 'return'
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    try_ExprSingle();
  }

  function parse_QuantifiedExpr()
  {
    startNonterminal("QuantifiedExpr");
    switch (l1)
    {
    case 235:                       // 'some'
      shift(235);                   // 'some'
      break;
    default:
      shift(129);                   // 'every'
    }
    lookahead1W(45);                // S^WS | '$' | '(:'
    shift(31);                      // '$'
    lookahead1W(305);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    parse_VarName();
    lookahead1W(141);               // S^WS | '(:' | 'as' | 'in'
    if (l1 == 79)                   // 'as'
    {
      parse_TypeDeclaration();
    }
    lookahead1W(77);                // S^WS | '(:' | 'in'
    shift(154);                     // 'in'
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    parse_ExprSingle();
    for (;;)
    {
      lookahead1W(133);             // S^WS | '(:' | ',' | 'satisfies'
      if (l1 != 41)                 // ','
      {
        break;
      }
      shift(41);                    // ','
      lookahead1W(45);              // S^WS | '$' | '(:'
      shift(31);                    // '$'
      lookahead1W(305);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      parse_VarName();
      lookahead1W(141);             // S^WS | '(:' | 'as' | 'in'
      if (l1 == 79)                 // 'as'
      {
        parse_TypeDeclaration();
      }
      lookahead1W(77);              // S^WS | '(:' | 'in'
      shift(154);                   // 'in'
      lookahead1W(37);              // EPSILON | S^WS | '(:'
      parse_ExprSingle();
    }
    shift(224);                     // 'satisfies'
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    parse_ExprSingle();
    endNonterminal("QuantifiedExpr");
  }

  function try_QuantifiedExpr()
  {
    switch (l1)
    {
    case 235:                       // 'some'
      shiftT(235);                  // 'some'
      break;
    default:
      shiftT(129);                  // 'every'
    }
    lookahead1W(45);                // S^WS | '$' | '(:'
    shiftT(31);                     // '$'
    lookahead1W(305);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    try_VarName();
    lookahead1W(141);               // S^WS | '(:' | 'as' | 'in'
    if (l1 == 79)                   // 'as'
    {
      try_TypeDeclaration();
    }
    lookahead1W(77);                // S^WS | '(:' | 'in'
    shiftT(154);                    // 'in'
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    try_ExprSingle();
    for (;;)
    {
      lookahead1W(133);             // S^WS | '(:' | ',' | 'satisfies'
      if (l1 != 41)                 // ','
      {
        break;
      }
      shiftT(41);                   // ','
      lookahead1W(45);              // S^WS | '$' | '(:'
      shiftT(31);                   // '$'
      lookahead1W(305);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      try_VarName();
      lookahead1W(141);             // S^WS | '(:' | 'as' | 'in'
      if (l1 == 79)                 // 'as'
      {
        try_TypeDeclaration();
      }
      lookahead1W(77);              // S^WS | '(:' | 'in'
      shiftT(154);                  // 'in'
      lookahead1W(37);              // EPSILON | S^WS | '(:'
      try_ExprSingle();
    }
    shiftT(224);                    // 'satisfies'
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    try_ExprSingle();
  }

  function parse_SwitchExpr()
  {
    startNonterminal("SwitchExpr");
    shift(243);                     // 'switch'
    lookahead1W(46);                // S^WS | '(' | '(:'
    shift(34);                      // '('
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    parse_Expr();
    lookahead1W(47);                // S^WS | '(:' | ')'
    shift(37);                      // ')'
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    for (;;)
    {
      lookahead1W(37);              // EPSILON | S^WS | '(:'
      parse_SwitchCaseClause();
      lookahead1W(144);             // S^WS | '(:' | 'case' | 'default'
      if (l1 != 88)                 // 'case'
      {
        break;
      }
    }
    shift(109);                     // 'default'
    lookahead1W(94);                // S^WS | '(:' | 'return'
    shift(220);                     // 'return'
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    parse_ExprSingle();
    endNonterminal("SwitchExpr");
  }

  function try_SwitchExpr()
  {
    shiftT(243);                    // 'switch'
    lookahead1W(46);                // S^WS | '(' | '(:'
    shiftT(34);                     // '('
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    try_Expr();
    lookahead1W(47);                // S^WS | '(:' | ')'
    shiftT(37);                     // ')'
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    for (;;)
    {
      lookahead1W(37);              // EPSILON | S^WS | '(:'
      try_SwitchCaseClause();
      lookahead1W(144);             // S^WS | '(:' | 'case' | 'default'
      if (l1 != 88)                 // 'case'
      {
        break;
      }
    }
    shiftT(109);                    // 'default'
    lookahead1W(94);                // S^WS | '(:' | 'return'
    shiftT(220);                    // 'return'
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    try_ExprSingle();
  }

  function parse_SwitchCaseClause()
  {
    startNonterminal("SwitchCaseClause");
    for (;;)
    {
      lookahead1W(60);              // S^WS | '(:' | 'case'
      shift(88);                    // 'case'
      lookahead1W(37);              // EPSILON | S^WS | '(:'
      parse_SwitchCaseOperand();
      lookahead1W(145);             // S^WS | '(:' | 'case' | 'return'
      if (l1 != 88)                 // 'case'
      {
        break;
      }
    }
    shift(220);                     // 'return'
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    parse_ExprSingle();
    endNonterminal("SwitchCaseClause");
  }

  function try_SwitchCaseClause()
  {
    for (;;)
    {
      lookahead1W(60);              // S^WS | '(:' | 'case'
      shiftT(88);                   // 'case'
      lookahead1W(37);              // EPSILON | S^WS | '(:'
      try_SwitchCaseOperand();
      lookahead1W(145);             // S^WS | '(:' | 'case' | 'return'
      if (l1 != 88)                 // 'case'
      {
        break;
      }
    }
    shiftT(220);                    // 'return'
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    try_ExprSingle();
  }

  function parse_SwitchCaseOperand()
  {
    startNonterminal("SwitchCaseOperand");
    parse_ExprSingle();
    endNonterminal("SwitchCaseOperand");
  }

  function try_SwitchCaseOperand()
  {
    try_ExprSingle();
  }

  function parse_TypeswitchExpr()
  {
    startNonterminal("TypeswitchExpr");
    shift(253);                     // 'typeswitch'
    lookahead1W(46);                // S^WS | '(' | '(:'
    shift(34);                      // '('
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    parse_Expr();
    lookahead1W(47);                // S^WS | '(:' | ')'
    shift(37);                      // ')'
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    for (;;)
    {
      lookahead1W(37);              // EPSILON | S^WS | '(:'
      parse_CaseClause();
      lookahead1W(144);             // S^WS | '(:' | 'case' | 'default'
      if (l1 != 88)                 // 'case'
      {
        break;
      }
    }
    shift(109);                     // 'default'
    lookahead1W(125);               // S^WS | '$' | '(:' | 'return'
    if (l1 == 31)                   // '$'
    {
      shift(31);                    // '$'
      lookahead1W(305);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      parse_VarName();
    }
    lookahead1W(94);                // S^WS | '(:' | 'return'
    shift(220);                     // 'return'
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    parse_ExprSingle();
    endNonterminal("TypeswitchExpr");
  }

  function try_TypeswitchExpr()
  {
    shiftT(253);                    // 'typeswitch'
    lookahead1W(46);                // S^WS | '(' | '(:'
    shiftT(34);                     // '('
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    try_Expr();
    lookahead1W(47);                // S^WS | '(:' | ')'
    shiftT(37);                     // ')'
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    for (;;)
    {
      lookahead1W(37);              // EPSILON | S^WS | '(:'
      try_CaseClause();
      lookahead1W(144);             // S^WS | '(:' | 'case' | 'default'
      if (l1 != 88)                 // 'case'
      {
        break;
      }
    }
    shiftT(109);                    // 'default'
    lookahead1W(125);               // S^WS | '$' | '(:' | 'return'
    if (l1 == 31)                   // '$'
    {
      shiftT(31);                   // '$'
      lookahead1W(305);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      try_VarName();
    }
    lookahead1W(94);                // S^WS | '(:' | 'return'
    shiftT(220);                    // 'return'
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    try_ExprSingle();
  }

  function parse_CaseClause()
  {
    startNonterminal("CaseClause");
    lookahead1(14);                 // 'case'
    shift(88);                      // 'case'
    lookahead1W(316);               // EQName^Token | S^WS | '$' | '%' | '(' | '(:' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
    if (l1 == 31)                   // '$'
    {
      shift(31);                    // '$'
      lookahead1W(305);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      parse_VarName();
      lookahead1W(56);              // S^WS | '(:' | 'as'
      shift(79);                    // 'as'
    }
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    parse_SequenceTypeUnion();
    lookahead1W(94);                // S^WS | '(:' | 'return'
    shift(220);                     // 'return'
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    parse_ExprSingle();
    endNonterminal("CaseClause");
  }

  function try_CaseClause()
  {
    lookahead1(14);                 // 'case'
    shiftT(88);                     // 'case'
    lookahead1W(316);               // EQName^Token | S^WS | '$' | '%' | '(' | '(:' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
    if (l1 == 31)                   // '$'
    {
      shiftT(31);                   // '$'
      lookahead1W(305);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      try_VarName();
      lookahead1W(56);              // S^WS | '(:' | 'as'
      shiftT(79);                   // 'as'
    }
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    try_SequenceTypeUnion();
    lookahead1W(94);                // S^WS | '(:' | 'return'
    shiftT(220);                    // 'return'
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    try_ExprSingle();
  }

  function parse_SequenceTypeUnion()
  {
    startNonterminal("SequenceTypeUnion");
    parse_SequenceType();
    for (;;)
    {
      lookahead1W(167);             // S^WS | '(:' | 'return' | '|'
      if (l1 != 279)                // '|'
      {
        break;
      }
      shift(279);                   // '|'
      lookahead1W(37);              // EPSILON | S^WS | '(:'
      parse_SequenceType();
    }
    endNonterminal("SequenceTypeUnion");
  }

  function try_SequenceTypeUnion()
  {
    try_SequenceType();
    for (;;)
    {
      lookahead1W(167);             // S^WS | '(:' | 'return' | '|'
      if (l1 != 279)                // '|'
      {
        break;
      }
      shiftT(279);                  // '|'
      lookahead1W(37);              // EPSILON | S^WS | '(:'
      try_SequenceType();
    }
  }

  function parse_IfExpr()
  {
    startNonterminal("IfExpr");
    shift(152);                     // 'if'
    lookahead1W(46);                // S^WS | '(' | '(:'
    shift(34);                      // '('
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    parse_Expr();
    lookahead1W(47);                // S^WS | '(:' | ')'
    shift(37);                      // ')'
    lookahead1W(101);               // S^WS | '(:' | 'then'
    shift(245);                     // 'then'
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    parse_ExprSingle();
    lookahead1W(73);                // S^WS | '(:' | 'else'
    shift(122);                     // 'else'
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    parse_ExprSingle();
    endNonterminal("IfExpr");
  }

  function try_IfExpr()
  {
    shiftT(152);                    // 'if'
    lookahead1W(46);                // S^WS | '(' | '(:'
    shiftT(34);                     // '('
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    try_Expr();
    lookahead1W(47);                // S^WS | '(:' | ')'
    shiftT(37);                     // ')'
    lookahead1W(101);               // S^WS | '(:' | 'then'
    shiftT(245);                    // 'then'
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    try_ExprSingle();
    lookahead1W(73);                // S^WS | '(:' | 'else'
    shiftT(122);                    // 'else'
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    try_ExprSingle();
  }

  function parse_TryCatchExpr()
  {
    startNonterminal("TryCatchExpr");
    parse_TryClause();
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    for (;;)
    {
      lookahead1W(37);              // EPSILON | S^WS | '(:'
      parse_CatchClause();
      lookahead1W(222);             // S^WS | EOF | '(:' | ')' | ',' | ':' | ';' | ']' | 'after' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'catch' | 'collation' | 'count' | 'default' |
                                    // 'descending' | 'else' | 'empty' | 'end' | 'for' | 'group' | 'into' | 'let' |
                                    // 'modify' | 'only' | 'order' | 'return' | 'satisfies' | 'stable' | 'start' |
                                    // 'where' | 'with' | '|}' | '}'
      if (l1 != 91)                 // 'catch'
      {
        break;
      }
    }
    endNonterminal("TryCatchExpr");
  }

  function try_TryCatchExpr()
  {
    try_TryClause();
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    for (;;)
    {
      lookahead1W(37);              // EPSILON | S^WS | '(:'
      try_CatchClause();
      lookahead1W(222);             // S^WS | EOF | '(:' | ')' | ',' | ':' | ';' | ']' | 'after' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'catch' | 'collation' | 'count' | 'default' |
                                    // 'descending' | 'else' | 'empty' | 'end' | 'for' | 'group' | 'into' | 'let' |
                                    // 'modify' | 'only' | 'order' | 'return' | 'satisfies' | 'stable' | 'start' |
                                    // 'where' | 'with' | '|}' | '}'
      if (l1 != 91)                 // 'catch'
      {
        break;
      }
    }
  }

  function parse_TryClause()
  {
    startNonterminal("TryClause");
    lookahead1(21);                 // 'try'
    shift(250);                     // 'try'
    lookahead1W(113);               // S^WS | '(:' | '{'
    shift(276);                     // '{'
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    parse_TryTargetExpr();
    lookahead1W(115);               // S^WS | '(:' | '}'
    shift(282);                     // '}'
    endNonterminal("TryClause");
  }

  function try_TryClause()
  {
    lookahead1(21);                 // 'try'
    shiftT(250);                    // 'try'
    lookahead1W(113);               // S^WS | '(:' | '{'
    shiftT(276);                    // '{'
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    try_TryTargetExpr();
    lookahead1W(115);               // S^WS | '(:' | '}'
    shiftT(282);                    // '}'
  }

  function parse_TryTargetExpr()
  {
    startNonterminal("TryTargetExpr");
    parse_Expr();
    endNonterminal("TryTargetExpr");
  }

  function try_TryTargetExpr()
  {
    try_Expr();
  }

  function parse_CatchClause()
  {
    startNonterminal("CatchClause");
    lookahead1(15);                 // 'catch'
    shift(91);                      // 'catch'
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    parse_CatchErrorList();
    lookahead1W(113);               // S^WS | '(:' | '{'
    shift(276);                     // '{'
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    parse_Expr();
    lookahead1W(115);               // S^WS | '(:' | '}'
    shift(282);                     // '}'
    endNonterminal("CatchClause");
  }

  function try_CatchClause()
  {
    lookahead1(15);                 // 'catch'
    shiftT(91);                     // 'catch'
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    try_CatchErrorList();
    lookahead1W(113);               // S^WS | '(:' | '{'
    shiftT(276);                    // '{'
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    try_Expr();
    lookahead1W(115);               // S^WS | '(:' | '}'
    shiftT(282);                    // '}'
  }

  function parse_CatchErrorList()
  {
    startNonterminal("CatchErrorList");
    lookahead1(303);                // Wildcard | EQName^Token | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    parse_NameTest();
    for (;;)
    {
      lookahead1W(169);             // S^WS | '(:' | '{' | '|'
      if (l1 != 279)                // '|'
      {
        break;
      }
      shift(279);                   // '|'
      lookahead1W(307);             // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      parse_NameTest();
    }
    endNonterminal("CatchErrorList");
  }

  function try_CatchErrorList()
  {
    lookahead1(303);                // Wildcard | EQName^Token | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    try_NameTest();
    for (;;)
    {
      lookahead1W(169);             // S^WS | '(:' | '{' | '|'
      if (l1 != 279)                // '|'
      {
        break;
      }
      shiftT(279);                  // '|'
      lookahead1W(307);             // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      try_NameTest();
    }
  }

  function parse_OrExpr()
  {
    startNonterminal("OrExpr");
    parse_AndExpr();
    for (;;)
    {
      lookahead1W(223);             // S^WS | EOF | '(:' | ')' | ',' | ':' | ';' | ']' | 'after' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'else' | 'empty' | 'end' | 'for' | 'group' | 'into' | 'let' | 'modify' | 'only' |
                                    // 'or' | 'order' | 'return' | 'satisfies' | 'stable' | 'start' | 'where' | 'with' |
                                    // '|}' | '}'
      if (l1 != 200)                // 'or'
      {
        break;
      }
      shift(200);                   // 'or'
      lookahead1W(37);              // EPSILON | S^WS | '(:'
      parse_AndExpr();
    }
    endNonterminal("OrExpr");
  }

  function try_OrExpr()
  {
    try_AndExpr();
    for (;;)
    {
      lookahead1W(223);             // S^WS | EOF | '(:' | ')' | ',' | ':' | ';' | ']' | 'after' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'else' | 'empty' | 'end' | 'for' | 'group' | 'into' | 'let' | 'modify' | 'only' |
                                    // 'or' | 'order' | 'return' | 'satisfies' | 'stable' | 'start' | 'where' | 'with' |
                                    // '|}' | '}'
      if (l1 != 200)                // 'or'
      {
        break;
      }
      shiftT(200);                  // 'or'
      lookahead1W(37);              // EPSILON | S^WS | '(:'
      try_AndExpr();
    }
  }

  function parse_AndExpr()
  {
    startNonterminal("AndExpr");
    parse_ComparisonExpr();
    for (;;)
    {
      lookahead1W(224);             // S^WS | EOF | '(:' | ')' | ',' | ':' | ';' | ']' | 'after' | 'and' | 'as' |
                                    // 'ascending' | 'at' | 'before' | 'case' | 'collation' | 'count' | 'default' |
                                    // 'descending' | 'else' | 'empty' | 'end' | 'for' | 'group' | 'into' | 'let' |
                                    // 'modify' | 'only' | 'or' | 'order' | 'return' | 'satisfies' | 'stable' |
                                    // 'start' | 'where' | 'with' | '|}' | '}'
      if (l1 != 75)                 // 'and'
      {
        break;
      }
      shift(75);                    // 'and'
      lookahead1W(37);              // EPSILON | S^WS | '(:'
      parse_ComparisonExpr();
    }
    endNonterminal("AndExpr");
  }

  function try_AndExpr()
  {
    try_ComparisonExpr();
    for (;;)
    {
      lookahead1W(224);             // S^WS | EOF | '(:' | ')' | ',' | ':' | ';' | ']' | 'after' | 'and' | 'as' |
                                    // 'ascending' | 'at' | 'before' | 'case' | 'collation' | 'count' | 'default' |
                                    // 'descending' | 'else' | 'empty' | 'end' | 'for' | 'group' | 'into' | 'let' |
                                    // 'modify' | 'only' | 'or' | 'order' | 'return' | 'satisfies' | 'stable' |
                                    // 'start' | 'where' | 'with' | '|}' | '}'
      if (l1 != 75)                 // 'and'
      {
        break;
      }
      shiftT(75);                   // 'and'
      lookahead1W(37);              // EPSILON | S^WS | '(:'
      try_ComparisonExpr();
    }
  }

  function parse_ComparisonExpr()
  {
    startNonterminal("ComparisonExpr");
    parse_FTContainsExpr();
    lookahead1W(250);               // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'for' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'return' |
                                    // 'satisfies' | 'stable' | 'start' | 'where' | 'with' | '|}' | '}'
    if (l1 == 27                    // '!='
     || l1 == 54                    // '<'
     || l1 == 57                    // '<<'
     || l1 == 58                    // '<='
     || l1 == 60                    // '='
     || l1 == 61                    // '>'
     || l1 == 62                    // '>='
     || l1 == 63                    // '>>'
     || l1 == 128                   // 'eq'
     || l1 == 146                   // 'ge'
     || l1 == 150                   // 'gt'
     || l1 == 164                   // 'is'
     || l1 == 172                   // 'le'
     || l1 == 178                   // 'lt'
     || l1 == 186)                  // 'ne'
    {
      switch (l1)
      {
      case 128:                     // 'eq'
      case 146:                     // 'ge'
      case 150:                     // 'gt'
      case 172:                     // 'le'
      case 178:                     // 'lt'
      case 186:                     // 'ne'
        parse_ValueComp();
        break;
      case 57:                      // '<<'
      case 63:                      // '>>'
      case 164:                     // 'is'
        parse_NodeComp();
        break;
      default:
        parse_GeneralComp();
      }
      lookahead1W(37);              // EPSILON | S^WS | '(:'
      parse_FTContainsExpr();
    }
    endNonterminal("ComparisonExpr");
  }

  function try_ComparisonExpr()
  {
    try_FTContainsExpr();
    lookahead1W(250);               // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'for' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'return' |
                                    // 'satisfies' | 'stable' | 'start' | 'where' | 'with' | '|}' | '}'
    if (l1 == 27                    // '!='
     || l1 == 54                    // '<'
     || l1 == 57                    // '<<'
     || l1 == 58                    // '<='
     || l1 == 60                    // '='
     || l1 == 61                    // '>'
     || l1 == 62                    // '>='
     || l1 == 63                    // '>>'
     || l1 == 128                   // 'eq'
     || l1 == 146                   // 'ge'
     || l1 == 150                   // 'gt'
     || l1 == 164                   // 'is'
     || l1 == 172                   // 'le'
     || l1 == 178                   // 'lt'
     || l1 == 186)                  // 'ne'
    {
      switch (l1)
      {
      case 128:                     // 'eq'
      case 146:                     // 'ge'
      case 150:                     // 'gt'
      case 172:                     // 'le'
      case 178:                     // 'lt'
      case 186:                     // 'ne'
        try_ValueComp();
        break;
      case 57:                      // '<<'
      case 63:                      // '>>'
      case 164:                     // 'is'
        try_NodeComp();
        break;
      default:
        try_GeneralComp();
      }
      lookahead1W(37);              // EPSILON | S^WS | '(:'
      try_FTContainsExpr();
    }
  }

  function parse_FTContainsExpr()
  {
    startNonterminal("FTContainsExpr");
    parse_StringConcatExpr();
    lookahead1W(252);               // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'else' | 'empty' | 'end' | 'eq' | 'for' | 'ge' | 'group' | 'gt' |
                                    // 'into' | 'is' | 'le' | 'let' | 'lt' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'return' | 'satisfies' | 'stable' | 'start' | 'where' | 'with' | '|}' | '}'
    if (l1 == 99)                   // 'contains'
    {
      shift(99);                    // 'contains'
      lookahead1W(100);             // S^WS | '(:' | 'text'
      shift(244);                   // 'text'
      lookahead1W(37);              // EPSILON | S^WS | '(:'
      parse_FTSelection();
      lookahead1W(253);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'for' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'return' |
                                    // 'satisfies' | 'stable' | 'start' | 'where' | 'with' | 'without' | '|}' | '}'
      if (l1 == 271)                // 'without'
      {
        parse_FTIgnoreOption();
      }
    }
    endNonterminal("FTContainsExpr");
  }

  function try_FTContainsExpr()
  {
    try_StringConcatExpr();
    lookahead1W(252);               // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'else' | 'empty' | 'end' | 'eq' | 'for' | 'ge' | 'group' | 'gt' |
                                    // 'into' | 'is' | 'le' | 'let' | 'lt' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'return' | 'satisfies' | 'stable' | 'start' | 'where' | 'with' | '|}' | '}'
    if (l1 == 99)                   // 'contains'
    {
      shiftT(99);                   // 'contains'
      lookahead1W(100);             // S^WS | '(:' | 'text'
      shiftT(244);                  // 'text'
      lookahead1W(37);              // EPSILON | S^WS | '(:'
      try_FTSelection();
      lookahead1W(253);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'for' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'return' |
                                    // 'satisfies' | 'stable' | 'start' | 'where' | 'with' | 'without' | '|}' | '}'
      if (l1 == 271)                // 'without'
      {
        try_FTIgnoreOption();
      }
    }
  }

  function parse_StringConcatExpr()
  {
    startNonterminal("StringConcatExpr");
    parse_RangeExpr();
    for (;;)
    {
      lookahead1W(254);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'else' | 'empty' | 'end' | 'eq' | 'for' | 'ge' | 'group' | 'gt' |
                                    // 'into' | 'is' | 'le' | 'let' | 'lt' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'return' | 'satisfies' | 'stable' | 'start' | 'where' | 'with' | '||' | '|}' |
                                    // '}'
      if (l1 != 280)                // '||'
      {
        break;
      }
      shift(280);                   // '||'
      lookahead1W(37);              // EPSILON | S^WS | '(:'
      parse_RangeExpr();
    }
    endNonterminal("StringConcatExpr");
  }

  function try_StringConcatExpr()
  {
    try_RangeExpr();
    for (;;)
    {
      lookahead1W(254);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'else' | 'empty' | 'end' | 'eq' | 'for' | 'ge' | 'group' | 'gt' |
                                    // 'into' | 'is' | 'le' | 'let' | 'lt' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'return' | 'satisfies' | 'stable' | 'start' | 'where' | 'with' | '||' | '|}' |
                                    // '}'
      if (l1 != 280)                // '||'
      {
        break;
      }
      shiftT(280);                  // '||'
      lookahead1W(37);              // EPSILON | S^WS | '(:'
      try_RangeExpr();
    }
  }

  function parse_RangeExpr()
  {
    startNonterminal("RangeExpr");
    parse_AdditiveExpr();
    lookahead1W(255);               // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'else' | 'empty' | 'end' | 'eq' | 'for' | 'ge' | 'group' | 'gt' |
                                    // 'into' | 'is' | 'le' | 'let' | 'lt' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'where' | 'with' | '||' |
                                    // '|}' | '}'
    if (l1 == 248)                  // 'to'
    {
      shift(248);                   // 'to'
      lookahead1W(37);              // EPSILON | S^WS | '(:'
      parse_AdditiveExpr();
    }
    endNonterminal("RangeExpr");
  }

  function try_RangeExpr()
  {
    try_AdditiveExpr();
    lookahead1W(255);               // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'else' | 'empty' | 'end' | 'eq' | 'for' | 'ge' | 'group' | 'gt' |
                                    // 'into' | 'is' | 'le' | 'let' | 'lt' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'where' | 'with' | '||' |
                                    // '|}' | '}'
    if (l1 == 248)                  // 'to'
    {
      shiftT(248);                  // 'to'
      lookahead1W(37);              // EPSILON | S^WS | '(:'
      try_AdditiveExpr();
    }
  }

  function parse_AdditiveExpr()
  {
    startNonterminal("AdditiveExpr");
    parse_MultiplicativeExpr();
    for (;;)
    {
      lookahead1W(258);             // S^WS | EOF | '!=' | '(:' | ')' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'else' | 'empty' | 'end' | 'eq' | 'for' | 'ge' | 'group' | 'gt' |
                                    // 'into' | 'is' | 'le' | 'let' | 'lt' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'where' | 'with' | 'words' | '||' | '|}' | '}'
      if (l1 != 40                  // '+'
       && l1 != 42)                 // '-'
      {
        break;
      }
      switch (l1)
      {
      case 40:                      // '+'
        shift(40);                  // '+'
        break;
      default:
        shift(42);                  // '-'
      }
      lookahead1W(37);              // EPSILON | S^WS | '(:'
      parse_MultiplicativeExpr();
    }
    endNonterminal("AdditiveExpr");
  }

  function try_AdditiveExpr()
  {
    try_MultiplicativeExpr();
    for (;;)
    {
      lookahead1W(258);             // S^WS | EOF | '!=' | '(:' | ')' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'else' | 'empty' | 'end' | 'eq' | 'for' | 'ge' | 'group' | 'gt' |
                                    // 'into' | 'is' | 'le' | 'let' | 'lt' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'where' | 'with' | 'words' | '||' | '|}' | '}'
      if (l1 != 40                  // '+'
       && l1 != 42)                 // '-'
      {
        break;
      }
      switch (l1)
      {
      case 40:                      // '+'
        shiftT(40);                 // '+'
        break;
      default:
        shiftT(42);                 // '-'
      }
      lookahead1W(37);              // EPSILON | S^WS | '(:'
      try_MultiplicativeExpr();
    }
  }

  function parse_MultiplicativeExpr()
  {
    startNonterminal("MultiplicativeExpr");
    parse_UnionExpr();
    for (;;)
    {
      lookahead1W(264);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' |
                                    // 'only' | 'or' | 'order' | 'paragraphs' | 'return' | 'satisfies' | 'sentences' |
                                    // 'stable' | 'start' | 'times' | 'to' | 'where' | 'with' | 'words' | '||' | '|}' |
                                    // '}'
      if (l1 != 38                  // '*'
       && l1 != 118                 // 'div'
       && l1 != 151                 // 'idiv'
       && l1 != 180)                // 'mod'
      {
        break;
      }
      switch (l1)
      {
      case 38:                      // '*'
        shift(38);                  // '*'
        break;
      case 118:                     // 'div'
        shift(118);                 // 'div'
        break;
      case 151:                     // 'idiv'
        shift(151);                 // 'idiv'
        break;
      default:
        shift(180);                 // 'mod'
      }
      lookahead1W(37);              // EPSILON | S^WS | '(:'
      parse_UnionExpr();
    }
    endNonterminal("MultiplicativeExpr");
  }

  function try_MultiplicativeExpr()
  {
    try_UnionExpr();
    for (;;)
    {
      lookahead1W(264);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' |
                                    // 'only' | 'or' | 'order' | 'paragraphs' | 'return' | 'satisfies' | 'sentences' |
                                    // 'stable' | 'start' | 'times' | 'to' | 'where' | 'with' | 'words' | '||' | '|}' |
                                    // '}'
      if (l1 != 38                  // '*'
       && l1 != 118                 // 'div'
       && l1 != 151                 // 'idiv'
       && l1 != 180)                // 'mod'
      {
        break;
      }
      switch (l1)
      {
      case 38:                      // '*'
        shiftT(38);                 // '*'
        break;
      case 118:                     // 'div'
        shiftT(118);                // 'div'
        break;
      case 151:                     // 'idiv'
        shiftT(151);                // 'idiv'
        break;
      default:
        shiftT(180);                // 'mod'
      }
      lookahead1W(37);              // EPSILON | S^WS | '(:'
      try_UnionExpr();
    }
  }

  function parse_UnionExpr()
  {
    startNonterminal("UnionExpr");
    parse_IntersectExceptExpr();
    for (;;)
    {
      lookahead1W(270);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' |
                                    // 'only' | 'or' | 'order' | 'paragraphs' | 'return' | 'satisfies' | 'sentences' |
                                    // 'stable' | 'start' | 'times' | 'to' | 'union' | 'where' | 'with' | 'words' |
                                    // '|' | '||' | '|}' | '}'
      if (l1 != 254                 // 'union'
       && l1 != 279)                // '|'
      {
        break;
      }
      switch (l1)
      {
      case 254:                     // 'union'
        shift(254);                 // 'union'
        break;
      default:
        shift(279);                 // '|'
      }
      lookahead1W(37);              // EPSILON | S^WS | '(:'
      parse_IntersectExceptExpr();
    }
    endNonterminal("UnionExpr");
  }

  function try_UnionExpr()
  {
    try_IntersectExceptExpr();
    for (;;)
    {
      lookahead1W(270);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' |
                                    // 'only' | 'or' | 'order' | 'paragraphs' | 'return' | 'satisfies' | 'sentences' |
                                    // 'stable' | 'start' | 'times' | 'to' | 'union' | 'where' | 'with' | 'words' |
                                    // '|' | '||' | '|}' | '}'
      if (l1 != 254                 // 'union'
       && l1 != 279)                // '|'
      {
        break;
      }
      switch (l1)
      {
      case 254:                     // 'union'
        shiftT(254);                // 'union'
        break;
      default:
        shiftT(279);                // '|'
      }
      lookahead1W(37);              // EPSILON | S^WS | '(:'
      try_IntersectExceptExpr();
    }
  }

  function parse_IntersectExceptExpr()
  {
    startNonterminal("IntersectExceptExpr");
    parse_InstanceofExpr();
    for (;;)
    {
      lookahead1W(273);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'intersect' | 'into' | 'is' | 'le' | 'let' |
                                    // 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' |
                                    // 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
      if (l1 != 131                 // 'except'
       && l1 != 162)                // 'intersect'
      {
        break;
      }
      switch (l1)
      {
      case 162:                     // 'intersect'
        shift(162);                 // 'intersect'
        break;
      default:
        shift(131);                 // 'except'
      }
      lookahead1W(37);              // EPSILON | S^WS | '(:'
      parse_InstanceofExpr();
    }
    endNonterminal("IntersectExceptExpr");
  }

  function try_IntersectExceptExpr()
  {
    try_InstanceofExpr();
    for (;;)
    {
      lookahead1W(273);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'intersect' | 'into' | 'is' | 'le' | 'let' |
                                    // 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' |
                                    // 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
      if (l1 != 131                 // 'except'
       && l1 != 162)                // 'intersect'
      {
        break;
      }
      switch (l1)
      {
      case 162:                     // 'intersect'
        shiftT(162);                // 'intersect'
        break;
      default:
        shiftT(131);                // 'except'
      }
      lookahead1W(37);              // EPSILON | S^WS | '(:'
      try_InstanceofExpr();
    }
  }

  function parse_InstanceofExpr()
  {
    startNonterminal("InstanceofExpr");
    parse_TreatExpr();
    lookahead1W(274);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
    if (l1 == 160)                  // 'instance'
    {
      shift(160);                   // 'instance'
      lookahead1W(88);              // S^WS | '(:' | 'of'
      shift(196);                   // 'of'
      lookahead1W(37);              // EPSILON | S^WS | '(:'
      parse_SequenceType();
    }
    endNonterminal("InstanceofExpr");
  }

  function try_InstanceofExpr()
  {
    try_TreatExpr();
    lookahead1W(274);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
    if (l1 == 160)                  // 'instance'
    {
      shiftT(160);                  // 'instance'
      lookahead1W(88);              // S^WS | '(:' | 'of'
      shiftT(196);                  // 'of'
      lookahead1W(37);              // EPSILON | S^WS | '(:'
      try_SequenceType();
    }
  }

  function parse_TreatExpr()
  {
    startNonterminal("TreatExpr");
    parse_CastableExpr();
    lookahead1W(275);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' | '||' |
                                    // '|}' | '}'
    if (l1 == 249)                  // 'treat'
    {
      shift(249);                   // 'treat'
      lookahead1W(56);              // S^WS | '(:' | 'as'
      shift(79);                    // 'as'
      lookahead1W(37);              // EPSILON | S^WS | '(:'
      parse_SequenceType();
    }
    endNonterminal("TreatExpr");
  }

  function try_TreatExpr()
  {
    try_CastableExpr();
    lookahead1W(275);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' | '||' |
                                    // '|}' | '}'
    if (l1 == 249)                  // 'treat'
    {
      shiftT(249);                  // 'treat'
      lookahead1W(56);              // S^WS | '(:' | 'as'
      shiftT(79);                   // 'as'
      lookahead1W(37);              // EPSILON | S^WS | '(:'
      try_SequenceType();
    }
  }

  function parse_CastableExpr()
  {
    startNonterminal("CastableExpr");
    parse_CastExpr();
    lookahead1W(276);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'castable' | 'collation' | 'contains' | 'count' |
                                    // 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' |
                                    // 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' | '||' |
                                    // '|}' | '}'
    if (l1 == 90)                   // 'castable'
    {
      shift(90);                    // 'castable'
      lookahead1W(56);              // S^WS | '(:' | 'as'
      shift(79);                    // 'as'
      lookahead1W(37);              // EPSILON | S^WS | '(:'
      parse_SingleType();
    }
    endNonterminal("CastableExpr");
  }

  function try_CastableExpr()
  {
    try_CastExpr();
    lookahead1W(276);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'castable' | 'collation' | 'contains' | 'count' |
                                    // 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' |
                                    // 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' | '||' |
                                    // '|}' | '}'
    if (l1 == 90)                   // 'castable'
    {
      shiftT(90);                   // 'castable'
      lookahead1W(56);              // S^WS | '(:' | 'as'
      shiftT(79);                   // 'as'
      lookahead1W(37);              // EPSILON | S^WS | '(:'
      try_SingleType();
    }
  }

  function parse_CastExpr()
  {
    startNonterminal("CastExpr");
    parse_UnaryExpr();
    lookahead1W(278);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' |
                                    // 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' |
                                    // 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' |
                                    // 'order' | 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' |
                                    // 'start' | 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' |
                                    // '||' | '|}' | '}'
    if (l1 == 89)                   // 'cast'
    {
      shift(89);                    // 'cast'
      lookahead1W(56);              // S^WS | '(:' | 'as'
      shift(79);                    // 'as'
      lookahead1W(37);              // EPSILON | S^WS | '(:'
      parse_SingleType();
    }
    endNonterminal("CastExpr");
  }

  function try_CastExpr()
  {
    try_UnaryExpr();
    lookahead1W(278);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' |
                                    // 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' |
                                    // 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' |
                                    // 'order' | 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' |
                                    // 'start' | 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' |
                                    // '||' | '|}' | '}'
    if (l1 == 89)                   // 'cast'
    {
      shiftT(89);                   // 'cast'
      lookahead1W(56);              // S^WS | '(:' | 'as'
      shiftT(79);                   // 'as'
      lookahead1W(37);              // EPSILON | S^WS | '(:'
      try_SingleType();
    }
  }

  function parse_UnaryExpr()
  {
    startNonterminal("UnaryExpr");
    for (;;)
    {
      lookahead1W(321);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      if (l1 != 40                  // '+'
       && l1 != 42)                 // '-'
      {
        break;
      }
      switch (l1)
      {
      case 42:                      // '-'
        shift(42);                  // '-'
        break;
      default:
        shift(40);                  // '+'
      }
    }
    parse_ValueExpr();
    endNonterminal("UnaryExpr");
  }

  function try_UnaryExpr()
  {
    for (;;)
    {
      lookahead1W(321);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
      if (l1 != 40                  // '+'
       && l1 != 42)                 // '-'
      {
        break;
      }
      switch (l1)
      {
      case 42:                      // '-'
        shiftT(42);                 // '-'
        break;
      default:
        shiftT(40);                 // '+'
      }
    }
    try_ValueExpr();
  }

  function parse_ValueExpr()
  {
    startNonterminal("ValueExpr");
    switch (l1)
    {
    case 260:                       // 'validate'
      lookahead2W(299);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'lax' | 'le' | 'let' |
                                    // 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' |
                                    // 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' | 'strict' | 'times' |
                                    // 'to' | 'treat' | 'type' | 'union' | 'where' | 'with' | 'words' | '{' | '|' |
                                    // '||' | '|}' | '}'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 87812:                     // 'validate' 'lax'
    case 123140:                    // 'validate' 'strict'
    case 129284:                    // 'validate' 'type'
    case 141572:                    // 'validate' '{'
      parse_ValidateExpr();
      break;
    case 35:                        // '(#'
      parse_ExtensionExpr();
      break;
    default:
      parse_SimpleMapExpr();
    }
    endNonterminal("ValueExpr");
  }

  function try_ValueExpr()
  {
    switch (l1)
    {
    case 260:                       // 'validate'
      lookahead2W(299);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'lax' | 'le' | 'let' |
                                    // 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' |
                                    // 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' | 'strict' | 'times' |
                                    // 'to' | 'treat' | 'type' | 'union' | 'where' | 'with' | 'words' | '{' | '|' |
                                    // '||' | '|}' | '}'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 87812:                     // 'validate' 'lax'
    case 123140:                    // 'validate' 'strict'
    case 129284:                    // 'validate' 'type'
    case 141572:                    // 'validate' '{'
      try_ValidateExpr();
      break;
    case 35:                        // '(#'
      try_ExtensionExpr();
      break;
    default:
      try_SimpleMapExpr();
    }
  }

  function parse_SimpleMapExpr()
  {
    startNonterminal("SimpleMapExpr");
    parse_PathExpr();
    for (;;)
    {
      lookahead1W(279);             // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' |
                                    // '<<' | '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' |
                                    // 'ascending' | 'at' | 'before' | 'case' | 'cast' | 'castable' | 'collation' |
                                    // 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' |
                                    // 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' |
                                    // 'only' | 'or' | 'order' | 'paragraphs' | 'return' | 'satisfies' | 'sentences' |
                                    // 'stable' | 'start' | 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' |
                                    // 'words' | '|' | '||' | '|}' | '}'
      if (l1 != 26)                 // '!'
      {
        break;
      }
      shift(26);                    // '!'
      lookahead1W(37);              // EPSILON | S^WS | '(:'
      parse_PathExpr();
    }
    endNonterminal("SimpleMapExpr");
  }

  function try_SimpleMapExpr()
  {
    try_PathExpr();
    for (;;)
    {
      lookahead1W(279);             // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' |
                                    // '<<' | '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' |
                                    // 'ascending' | 'at' | 'before' | 'case' | 'cast' | 'castable' | 'collation' |
                                    // 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' |
                                    // 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' |
                                    // 'only' | 'or' | 'order' | 'paragraphs' | 'return' | 'satisfies' | 'sentences' |
                                    // 'stable' | 'start' | 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' |
                                    // 'words' | '|' | '||' | '|}' | '}'
      if (l1 != 26)                 // '!'
      {
        break;
      }
      shiftT(26);                   // '!'
      lookahead1W(37);              // EPSILON | S^WS | '(:'
      try_PathExpr();
    }
  }

  function parse_GeneralComp()
  {
    startNonterminal("GeneralComp");
    switch (l1)
    {
    case 60:                        // '='
      shift(60);                    // '='
      break;
    case 27:                        // '!='
      shift(27);                    // '!='
      break;
    case 54:                        // '<'
      shift(54);                    // '<'
      break;
    case 58:                        // '<='
      shift(58);                    // '<='
      break;
    case 61:                        // '>'
      shift(61);                    // '>'
      break;
    default:
      shift(62);                    // '>='
    }
    endNonterminal("GeneralComp");
  }

  function try_GeneralComp()
  {
    switch (l1)
    {
    case 60:                        // '='
      shiftT(60);                   // '='
      break;
    case 27:                        // '!='
      shiftT(27);                   // '!='
      break;
    case 54:                        // '<'
      shiftT(54);                   // '<'
      break;
    case 58:                        // '<='
      shiftT(58);                   // '<='
      break;
    case 61:                        // '>'
      shiftT(61);                   // '>'
      break;
    default:
      shiftT(62);                   // '>='
    }
  }

  function parse_ValueComp()
  {
    startNonterminal("ValueComp");
    switch (l1)
    {
    case 128:                       // 'eq'
      shift(128);                   // 'eq'
      break;
    case 186:                       // 'ne'
      shift(186);                   // 'ne'
      break;
    case 178:                       // 'lt'
      shift(178);                   // 'lt'
      break;
    case 172:                       // 'le'
      shift(172);                   // 'le'
      break;
    case 150:                       // 'gt'
      shift(150);                   // 'gt'
      break;
    default:
      shift(146);                   // 'ge'
    }
    endNonterminal("ValueComp");
  }

  function try_ValueComp()
  {
    switch (l1)
    {
    case 128:                       // 'eq'
      shiftT(128);                  // 'eq'
      break;
    case 186:                       // 'ne'
      shiftT(186);                  // 'ne'
      break;
    case 178:                       // 'lt'
      shiftT(178);                  // 'lt'
      break;
    case 172:                       // 'le'
      shiftT(172);                  // 'le'
      break;
    case 150:                       // 'gt'
      shiftT(150);                  // 'gt'
      break;
    default:
      shiftT(146);                  // 'ge'
    }
  }

  function parse_NodeComp()
  {
    startNonterminal("NodeComp");
    switch (l1)
    {
    case 164:                       // 'is'
      shift(164);                   // 'is'
      break;
    case 57:                        // '<<'
      shift(57);                    // '<<'
      break;
    default:
      shift(63);                    // '>>'
    }
    endNonterminal("NodeComp");
  }

  function try_NodeComp()
  {
    switch (l1)
    {
    case 164:                       // 'is'
      shiftT(164);                  // 'is'
      break;
    case 57:                        // '<<'
      shiftT(57);                   // '<<'
      break;
    default:
      shiftT(63);                   // '>>'
    }
  }

  function parse_ValidateExpr()
  {
    startNonterminal("ValidateExpr");
    shift(260);                     // 'validate'
    lookahead1W(194);               // S^WS | '(:' | 'lax' | 'strict' | 'type' | '{'
    if (l1 != 276)                  // '{'
    {
      switch (l1)
      {
      case 252:                     // 'type'
        shift(252);                 // 'type'
        lookahead1W(305);           // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
        parse_TypeName();
        break;
      default:
        parse_ValidationMode();
      }
    }
    lookahead1W(113);               // S^WS | '(:' | '{'
    shift(276);                     // '{'
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    parse_Expr();
    lookahead1W(115);               // S^WS | '(:' | '}'
    shift(282);                     // '}'
    endNonterminal("ValidateExpr");
  }

  function try_ValidateExpr()
  {
    shiftT(260);                    // 'validate'
    lookahead1W(194);               // S^WS | '(:' | 'lax' | 'strict' | 'type' | '{'
    if (l1 != 276)                  // '{'
    {
      switch (l1)
      {
      case 252:                     // 'type'
        shiftT(252);                // 'type'
        lookahead1W(305);           // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
        try_TypeName();
        break;
      default:
        try_ValidationMode();
      }
    }
    lookahead1W(113);               // S^WS | '(:' | '{'
    shiftT(276);                    // '{'
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    try_Expr();
    lookahead1W(115);               // S^WS | '(:' | '}'
    shiftT(282);                    // '}'
  }

  function parse_ValidationMode()
  {
    startNonterminal("ValidationMode");
    switch (l1)
    {
    case 171:                       // 'lax'
      shift(171);                   // 'lax'
      break;
    default:
      shift(240);                   // 'strict'
    }
    endNonterminal("ValidationMode");
  }

  function try_ValidationMode()
  {
    switch (l1)
    {
    case 171:                       // 'lax'
      shiftT(171);                  // 'lax'
      break;
    default:
      shiftT(240);                  // 'strict'
    }
  }

  function parse_ExtensionExpr()
  {
    startNonterminal("ExtensionExpr");
    for (;;)
    {
      parse_Pragma();
      lookahead1W(128);             // S^WS | '(#' | '(:' | '{'
      if (l1 != 35)                 // '(#'
      {
        break;
      }
    }
    shift(276);                     // '{'
    lookahead1W(328);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|' | '}'
    if (l1 != 282)                  // '}'
    {
      parse_Expr();
    }
    lookahead1W(115);               // S^WS | '(:' | '}'
    shift(282);                     // '}'
    endNonterminal("ExtensionExpr");
  }

  function try_ExtensionExpr()
  {
    for (;;)
    {
      try_Pragma();
      lookahead1W(128);             // S^WS | '(#' | '(:' | '{'
      if (l1 != 35)                 // '(#'
      {
        break;
      }
    }
    shiftT(276);                    // '{'
    lookahead1W(328);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|' | '}'
    if (l1 != 282)                  // '}'
    {
      try_Expr();
    }
    lookahead1W(115);               // S^WS | '(:' | '}'
    shiftT(282);                    // '}'
  }

  function parse_Pragma()
  {
    startNonterminal("Pragma");
    lookahead1(8);                  // '(#'
    shift(35);                      // '(#'
    lookahead1(304);                // EQName^Token | S | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    if (l1 == 21)                   // S
    {
      shift(21);                    // S
    }
    lookahead1(301);                // EQName^Token | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    parse_EQName();
    lookahead1(24);                 // S | '#)'
    if (l1 == 21)                   // S
    {
      shift(21);                    // S
      lookahead1(0);                // PragmaContents
      shift(1);                     // PragmaContents
    }
    lookahead1(5);                  // '#)'
    shift(30);                      // '#)'
    endNonterminal("Pragma");
  }

  function try_Pragma()
  {
    lookahead1(8);                  // '(#'
    shiftT(35);                     // '(#'
    lookahead1(304);                // EQName^Token | S | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    if (l1 == 21)                   // S
    {
      shiftT(21);                   // S
    }
    lookahead1(301);                // EQName^Token | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    try_EQName();
    lookahead1(24);                 // S | '#)'
    if (l1 == 21)                   // S
    {
      shiftT(21);                   // S
      lookahead1(0);                // PragmaContents
      shiftT(1);                    // PragmaContents
    }
    lookahead1(5);                  // '#)'
    shiftT(30);                     // '#)'
  }

  function parse_PathExpr()
  {
    startNonterminal("PathExpr");
    lookahead1W(320);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(:' | '.' | '..' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    switch (l1)
    {
    case 46:                        // '/'
      shift(46);                    // '/'
      lookahead1W(339);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | EOF | '!' | '!=' | '$' | '%' | '(' | '(:' | ')' | '*' |
                                    // '+' | ',' | '-' | '.' | '..' | ':' | ';' | '<' | '<!--' | '<<' | '<=' | '<?' |
                                    // '=' | '>' | '>=' | '>>' | '@' | '[' | ']' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'contains' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'paragraphs' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sentences' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' |
                                    // 'times' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'words' | 'xquery' | '{' | '{|' | '|' | '||' |
                                    // '|}' | '}'
      switch (l1)
      {
      case 25:                      // EOF
      case 26:                      // '!'
      case 27:                      // '!='
      case 37:                      // ')'
      case 38:                      // '*'
      case 40:                      // '+'
      case 41:                      // ','
      case 42:                      // '-'
      case 49:                      // ':'
      case 53:                      // ';'
      case 57:                      // '<<'
      case 58:                      // '<='
      case 60:                      // '='
      case 61:                      // '>'
      case 62:                      // '>='
      case 63:                      // '>>'
      case 69:                      // ']'
      case 87:                      // 'by'
      case 99:                      // 'contains'
      case 205:                     // 'paragraphs'
      case 232:                     // 'sentences'
      case 247:                     // 'times'
      case 273:                     // 'words'
      case 279:                     // '|'
      case 280:                     // '||'
      case 281:                     // '|}'
      case 282:                     // '}'
        break;
      default:
        parse_RelativePathExpr();
      }
      break;
    case 47:                        // '//'
      shift(47);                    // '//'
      lookahead1W(37);              // EPSILON | S^WS | '(:'
      parse_RelativePathExpr();
      break;
    default:
      parse_RelativePathExpr();
    }
    endNonterminal("PathExpr");
  }

  function try_PathExpr()
  {
    lookahead1W(320);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(:' | '.' | '..' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    switch (l1)
    {
    case 46:                        // '/'
      shiftT(46);                   // '/'
      lookahead1W(339);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | EOF | '!' | '!=' | '$' | '%' | '(' | '(:' | ')' | '*' |
                                    // '+' | ',' | '-' | '.' | '..' | ':' | ';' | '<' | '<!--' | '<<' | '<=' | '<?' |
                                    // '=' | '>' | '>=' | '>>' | '@' | '[' | ']' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'contains' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'paragraphs' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sentences' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' |
                                    // 'times' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'words' | 'xquery' | '{' | '{|' | '|' | '||' |
                                    // '|}' | '}'
      switch (l1)
      {
      case 25:                      // EOF
      case 26:                      // '!'
      case 27:                      // '!='
      case 37:                      // ')'
      case 38:                      // '*'
      case 40:                      // '+'
      case 41:                      // ','
      case 42:                      // '-'
      case 49:                      // ':'
      case 53:                      // ';'
      case 57:                      // '<<'
      case 58:                      // '<='
      case 60:                      // '='
      case 61:                      // '>'
      case 62:                      // '>='
      case 63:                      // '>>'
      case 69:                      // ']'
      case 87:                      // 'by'
      case 99:                      // 'contains'
      case 205:                     // 'paragraphs'
      case 232:                     // 'sentences'
      case 247:                     // 'times'
      case 273:                     // 'words'
      case 279:                     // '|'
      case 280:                     // '||'
      case 281:                     // '|}'
      case 282:                     // '}'
        break;
      default:
        try_RelativePathExpr();
      }
      break;
    case 47:                        // '//'
      shiftT(47);                   // '//'
      lookahead1W(37);              // EPSILON | S^WS | '(:'
      try_RelativePathExpr();
      break;
    default:
      try_RelativePathExpr();
    }
  }

  function parse_RelativePathExpr()
  {
    startNonterminal("RelativePathExpr");
    parse_StepExpr();
    for (;;)
    {
      lookahead1W(285);             // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' |
                                    // 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
      switch (l1)
      {
      case 26:                      // '!'
        lookahead2W(320);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(:' | '.' | '..' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
        break;
      default:
        lk = l1;
      }
      if (lk != 25                  // EOF
       && lk != 27                  // '!='
       && lk != 37                  // ')'
       && lk != 38                  // '*'
       && lk != 40                  // '+'
       && lk != 41                  // ','
       && lk != 42                  // '-'
       && lk != 46                  // '/'
       && lk != 47                  // '//'
       && lk != 49                  // ':'
       && lk != 53                  // ';'
       && lk != 54                  // '<'
       && lk != 57                  // '<<'
       && lk != 58                  // '<='
       && lk != 60                  // '='
       && lk != 61                  // '>'
       && lk != 62                  // '>='
       && lk != 63                  // '>>'
       && lk != 69                  // ']'
       && lk != 70                  // 'after'
       && lk != 75                  // 'and'
       && lk != 79                  // 'as'
       && lk != 80                  // 'ascending'
       && lk != 81                  // 'at'
       && lk != 84                  // 'before'
       && lk != 87                  // 'by'
       && lk != 88                  // 'case'
       && lk != 89                  // 'cast'
       && lk != 90                  // 'castable'
       && lk != 94                  // 'collation'
       && lk != 99                  // 'contains'
       && lk != 105                 // 'count'
       && lk != 109                 // 'default'
       && lk != 113                 // 'descending'
       && lk != 118                 // 'div'
       && lk != 122                 // 'else'
       && lk != 123                 // 'empty'
       && lk != 126                 // 'end'
       && lk != 128                 // 'eq'
       && lk != 131                 // 'except'
       && lk != 137                 // 'for'
       && lk != 146                 // 'ge'
       && lk != 148                 // 'group'
       && lk != 150                 // 'gt'
       && lk != 151                 // 'idiv'
       && lk != 160                 // 'instance'
       && lk != 162                 // 'intersect'
       && lk != 163                 // 'into'
       && lk != 164                 // 'is'
       && lk != 172                 // 'le'
       && lk != 174                 // 'let'
       && lk != 178                 // 'lt'
       && lk != 180                 // 'mod'
       && lk != 181                 // 'modify'
       && lk != 186                 // 'ne'
       && lk != 198                 // 'only'
       && lk != 200                 // 'or'
       && lk != 201                 // 'order'
       && lk != 205                 // 'paragraphs'
       && lk != 220                 // 'return'
       && lk != 224                 // 'satisfies'
       && lk != 232                 // 'sentences'
       && lk != 236                 // 'stable'
       && lk != 237                 // 'start'
       && lk != 247                 // 'times'
       && lk != 248                 // 'to'
       && lk != 249                 // 'treat'
       && lk != 254                 // 'union'
       && lk != 266                 // 'where'
       && lk != 270                 // 'with'
       && lk != 273                 // 'words'
       && lk != 279                 // '|'
       && lk != 280                 // '||'
       && lk != 281                 // '|}'
       && lk != 282                 // '}'
       && lk != 23578               // '!' '/'
       && lk != 24090)              // '!' '//'
      {
        lk = memoized(2, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2;
          try
          {
            switch (l1)
            {
            case 46:                // '/'
              shiftT(46);           // '/'
              break;
            case 47:                // '//'
              shiftT(47);           // '//'
              break;
            default:
              shiftT(26);           // '!'
            }
            lookahead1W(37);        // EPSILON | S^WS | '(:'
            try_StepExpr();
            lk = -1;
          }
          catch (p1A)
          {
            lk = -2;
          }
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(2, e0, lk);
        }
      }
      if (lk != -1
       && lk != 46                  // '/'
       && lk != 47)                 // '//'
      {
        break;
      }
      switch (l1)
      {
      case 46:                      // '/'
        shift(46);                  // '/'
        break;
      case 47:                      // '//'
        shift(47);                  // '//'
        break;
      default:
        shift(26);                  // '!'
      }
      lookahead1W(37);              // EPSILON | S^WS | '(:'
      parse_StepExpr();
    }
    endNonterminal("RelativePathExpr");
  }

  function try_RelativePathExpr()
  {
    try_StepExpr();
    for (;;)
    {
      lookahead1W(285);             // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' |
                                    // 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
      switch (l1)
      {
      case 26:                      // '!'
        lookahead2W(320);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(:' | '.' | '..' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
        break;
      default:
        lk = l1;
      }
      if (lk != 25                  // EOF
       && lk != 27                  // '!='
       && lk != 37                  // ')'
       && lk != 38                  // '*'
       && lk != 40                  // '+'
       && lk != 41                  // ','
       && lk != 42                  // '-'
       && lk != 46                  // '/'
       && lk != 47                  // '//'
       && lk != 49                  // ':'
       && lk != 53                  // ';'
       && lk != 54                  // '<'
       && lk != 57                  // '<<'
       && lk != 58                  // '<='
       && lk != 60                  // '='
       && lk != 61                  // '>'
       && lk != 62                  // '>='
       && lk != 63                  // '>>'
       && lk != 69                  // ']'
       && lk != 70                  // 'after'
       && lk != 75                  // 'and'
       && lk != 79                  // 'as'
       && lk != 80                  // 'ascending'
       && lk != 81                  // 'at'
       && lk != 84                  // 'before'
       && lk != 87                  // 'by'
       && lk != 88                  // 'case'
       && lk != 89                  // 'cast'
       && lk != 90                  // 'castable'
       && lk != 94                  // 'collation'
       && lk != 99                  // 'contains'
       && lk != 105                 // 'count'
       && lk != 109                 // 'default'
       && lk != 113                 // 'descending'
       && lk != 118                 // 'div'
       && lk != 122                 // 'else'
       && lk != 123                 // 'empty'
       && lk != 126                 // 'end'
       && lk != 128                 // 'eq'
       && lk != 131                 // 'except'
       && lk != 137                 // 'for'
       && lk != 146                 // 'ge'
       && lk != 148                 // 'group'
       && lk != 150                 // 'gt'
       && lk != 151                 // 'idiv'
       && lk != 160                 // 'instance'
       && lk != 162                 // 'intersect'
       && lk != 163                 // 'into'
       && lk != 164                 // 'is'
       && lk != 172                 // 'le'
       && lk != 174                 // 'let'
       && lk != 178                 // 'lt'
       && lk != 180                 // 'mod'
       && lk != 181                 // 'modify'
       && lk != 186                 // 'ne'
       && lk != 198                 // 'only'
       && lk != 200                 // 'or'
       && lk != 201                 // 'order'
       && lk != 205                 // 'paragraphs'
       && lk != 220                 // 'return'
       && lk != 224                 // 'satisfies'
       && lk != 232                 // 'sentences'
       && lk != 236                 // 'stable'
       && lk != 237                 // 'start'
       && lk != 247                 // 'times'
       && lk != 248                 // 'to'
       && lk != 249                 // 'treat'
       && lk != 254                 // 'union'
       && lk != 266                 // 'where'
       && lk != 270                 // 'with'
       && lk != 273                 // 'words'
       && lk != 279                 // '|'
       && lk != 280                 // '||'
       && lk != 281                 // '|}'
       && lk != 282                 // '}'
       && lk != 23578               // '!' '/'
       && lk != 24090)              // '!' '//'
      {
        lk = memoized(2, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2;
          try
          {
            switch (l1)
            {
            case 46:                // '/'
              shiftT(46);           // '/'
              break;
            case 47:                // '//'
              shiftT(47);           // '//'
              break;
            default:
              shiftT(26);           // '!'
            }
            lookahead1W(37);        // EPSILON | S^WS | '(:'
            try_StepExpr();
            lk = -1;
          }
          catch (p1A)
          {
            lk = -2;
          }
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(2, e0, lk);
        }
      }
      if (lk != -1
       && lk != 46                  // '/'
       && lk != 47)                 // '//'
      {
        break;
      }
      switch (l1)
      {
      case 46:                      // '/'
        shiftT(46);                 // '/'
        break;
      case 47:                      // '//'
        shiftT(47);                 // '//'
        break;
      default:
        shiftT(26);                 // '!'
      }
      lookahead1W(37);              // EPSILON | S^WS | '(:'
      try_StepExpr();
    }
  }

  function parse_StepExpr()
  {
    startNonterminal("StepExpr");
    lookahead1W(319);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(:' | '.' | '..' | '<' | '<!--' |
                                    // '<?' | '@' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    switch (l1)
    {
    case 82:                        // 'attribute'
      lookahead2W(338);             // EQName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' |
                                    // ',' | '-' | '/' | '//' | ':' | '::' | ';' | '<' | '<<' | '<=' | '=' | '>' |
                                    // '>=' | '>>' | '[' | ']' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'contains' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'paragraphs' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sentences' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' |
                                    // 'times' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'words' | 'xquery' | '{' | '|' | '||' | '|}' | '}'
      break;
    case 121:                       // 'element'
      lookahead2W(335);             // EQName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' |
                                    // ',' | '-' | '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' |
                                    // '>>' | '[' | ']' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'by' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'contains' |
                                    // 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'paragraphs' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sentences' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'times' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'words' |
                                    // 'xquery' | '{' | '|' | '||' | '|}' | '}'
      break;
    case 184:                       // 'namespace'
    case 216:                       // 'processing-instruction'
      lookahead2W(336);             // NCName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' |
                                    // ',' | '-' | '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' |
                                    // '>>' | '[' | ']' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'by' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'contains' |
                                    // 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'paragraphs' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sentences' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'times' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'words' |
                                    // 'xquery' | '{' | '|' | '||' | '|}' | '}'
      break;
    case 96:                        // 'comment'
    case 119:                       // 'document'
    case 202:                       // 'ordered'
    case 244:                       // 'text'
    case 256:                       // 'unordered'
      lookahead2W(298);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '{' | '|' | '||' | '|}' | '}'
      break;
    case 124:                       // 'empty-sequence'
    case 152:                       // 'if'
    case 165:                       // 'item'
    case 243:                       // 'switch'
    case 253:                       // 'typeswitch'
      lookahead2W(291);             // S^WS | EOF | '!' | '!=' | '#' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' | 'after' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
      break;
    case 73:                        // 'ancestor'
    case 74:                        // 'ancestor-or-self'
    case 93:                        // 'child'
    case 111:                       // 'descendant'
    case 112:                       // 'descendant-or-self'
    case 135:                       // 'following'
    case 136:                       // 'following-sibling'
    case 206:                       // 'parent'
    case 212:                       // 'preceding'
    case 213:                       // 'preceding-sibling'
    case 229:                       // 'self'
      lookahead2W(297);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | '::' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' |
                                    // 'cast' | 'castable' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' | '||' |
                                    // '|}' | '}'
      break;
    case 6:                         // EQName^Token
    case 70:                        // 'after'
    case 72:                        // 'allowing'
    case 75:                        // 'and'
    case 79:                        // 'as'
    case 80:                        // 'ascending'
    case 81:                        // 'at'
    case 83:                        // 'base-uri'
    case 84:                        // 'before'
    case 85:                        // 'boundary-space'
    case 86:                        // 'break'
    case 88:                        // 'case'
    case 89:                        // 'cast'
    case 90:                        // 'castable'
    case 91:                        // 'catch'
    case 94:                        // 'collation'
    case 97:                        // 'constraint'
    case 98:                        // 'construction'
    case 101:                       // 'context'
    case 102:                       // 'continue'
    case 103:                       // 'copy'
    case 104:                       // 'copy-namespaces'
    case 105:                       // 'count'
    case 106:                       // 'decimal-format'
    case 108:                       // 'declare'
    case 109:                       // 'default'
    case 110:                       // 'delete'
    case 113:                       // 'descending'
    case 118:                       // 'div'
    case 120:                       // 'document-node'
    case 122:                       // 'else'
    case 123:                       // 'empty'
    case 125:                       // 'encoding'
    case 126:                       // 'end'
    case 128:                       // 'eq'
    case 129:                       // 'every'
    case 131:                       // 'except'
    case 132:                       // 'exit'
    case 133:                       // 'external'
    case 134:                       // 'first'
    case 137:                       // 'for'
    case 141:                       // 'ft-option'
    case 145:                       // 'function'
    case 146:                       // 'ge'
    case 148:                       // 'group'
    case 150:                       // 'gt'
    case 151:                       // 'idiv'
    case 153:                       // 'import'
    case 154:                       // 'in'
    case 155:                       // 'index'
    case 159:                       // 'insert'
    case 160:                       // 'instance'
    case 161:                       // 'integrity'
    case 162:                       // 'intersect'
    case 163:                       // 'into'
    case 164:                       // 'is'
    case 170:                       // 'last'
    case 171:                       // 'lax'
    case 172:                       // 'le'
    case 174:                       // 'let'
    case 176:                       // 'loop'
    case 178:                       // 'lt'
    case 180:                       // 'mod'
    case 181:                       // 'modify'
    case 182:                       // 'module'
    case 185:                       // 'namespace-node'
    case 186:                       // 'ne'
    case 191:                       // 'node'
    case 192:                       // 'nodes'
    case 198:                       // 'only'
    case 199:                       // 'option'
    case 200:                       // 'or'
    case 201:                       // 'order'
    case 203:                       // 'ordering'
    case 218:                       // 'rename'
    case 219:                       // 'replace'
    case 220:                       // 'return'
    case 221:                       // 'returning'
    case 222:                       // 'revalidation'
    case 224:                       // 'satisfies'
    case 225:                       // 'schema'
    case 226:                       // 'schema-attribute'
    case 227:                       // 'schema-element'
    case 228:                       // 'score'
    case 234:                       // 'sliding'
    case 235:                       // 'some'
    case 236:                       // 'stable'
    case 237:                       // 'start'
    case 240:                       // 'strict'
    case 248:                       // 'to'
    case 249:                       // 'treat'
    case 250:                       // 'try'
    case 251:                       // 'tumbling'
    case 252:                       // 'type'
    case 254:                       // 'union'
    case 257:                       // 'updating'
    case 260:                       // 'validate'
    case 261:                       // 'value'
    case 262:                       // 'variable'
    case 263:                       // 'version'
    case 266:                       // 'where'
    case 267:                       // 'while'
    case 270:                       // 'with'
    case 274:                       // 'xquery'
      lookahead2W(295);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
      break;
    default:
      lk = l1;
    }
    if (lk == 35922                 // 'attribute' 'after'
     || lk == 35961                 // 'element' 'after'
     || lk == 36024                 // 'namespace' 'after'
     || lk == 36056                 // 'processing-instruction' 'after'
     || lk == 38482                 // 'attribute' 'and'
     || lk == 38521                 // 'element' 'and'
     || lk == 38584                 // 'namespace' 'and'
     || lk == 38616                 // 'processing-instruction' 'and'
     || lk == 40530                 // 'attribute' 'as'
     || lk == 40569                 // 'element' 'as'
     || lk == 40632                 // 'namespace' 'as'
     || lk == 40664                 // 'processing-instruction' 'as'
     || lk == 41042                 // 'attribute' 'ascending'
     || lk == 41081                 // 'element' 'ascending'
     || lk == 41144                 // 'namespace' 'ascending'
     || lk == 41176                 // 'processing-instruction' 'ascending'
     || lk == 41554                 // 'attribute' 'at'
     || lk == 41593                 // 'element' 'at'
     || lk == 41656                 // 'namespace' 'at'
     || lk == 41688                 // 'processing-instruction' 'at'
     || lk == 43090                 // 'attribute' 'before'
     || lk == 43129                 // 'element' 'before'
     || lk == 43192                 // 'namespace' 'before'
     || lk == 43224                 // 'processing-instruction' 'before'
     || lk == 45138                 // 'attribute' 'case'
     || lk == 45177                 // 'element' 'case'
     || lk == 45240                 // 'namespace' 'case'
     || lk == 45272                 // 'processing-instruction' 'case'
     || lk == 45650                 // 'attribute' 'cast'
     || lk == 45689                 // 'element' 'cast'
     || lk == 45752                 // 'namespace' 'cast'
     || lk == 45784                 // 'processing-instruction' 'cast'
     || lk == 46162                 // 'attribute' 'castable'
     || lk == 46201                 // 'element' 'castable'
     || lk == 46264                 // 'namespace' 'castable'
     || lk == 46296                 // 'processing-instruction' 'castable'
     || lk == 48210                 // 'attribute' 'collation'
     || lk == 48249                 // 'element' 'collation'
     || lk == 48312                 // 'namespace' 'collation'
     || lk == 48344                 // 'processing-instruction' 'collation'
     || lk == 53842                 // 'attribute' 'count'
     || lk == 53881                 // 'element' 'count'
     || lk == 53944                 // 'namespace' 'count'
     || lk == 53976                 // 'processing-instruction' 'count'
     || lk == 55890                 // 'attribute' 'default'
     || lk == 55929                 // 'element' 'default'
     || lk == 55992                 // 'namespace' 'default'
     || lk == 56024                 // 'processing-instruction' 'default'
     || lk == 57938                 // 'attribute' 'descending'
     || lk == 57977                 // 'element' 'descending'
     || lk == 58040                 // 'namespace' 'descending'
     || lk == 58072                 // 'processing-instruction' 'descending'
     || lk == 60498                 // 'attribute' 'div'
     || lk == 60537                 // 'element' 'div'
     || lk == 60600                 // 'namespace' 'div'
     || lk == 60632                 // 'processing-instruction' 'div'
     || lk == 62546                 // 'attribute' 'else'
     || lk == 62585                 // 'element' 'else'
     || lk == 62648                 // 'namespace' 'else'
     || lk == 62680                 // 'processing-instruction' 'else'
     || lk == 63058                 // 'attribute' 'empty'
     || lk == 63097                 // 'element' 'empty'
     || lk == 63160                 // 'namespace' 'empty'
     || lk == 63192                 // 'processing-instruction' 'empty'
     || lk == 64594                 // 'attribute' 'end'
     || lk == 64633                 // 'element' 'end'
     || lk == 64696                 // 'namespace' 'end'
     || lk == 64728                 // 'processing-instruction' 'end'
     || lk == 65618                 // 'attribute' 'eq'
     || lk == 65657                 // 'element' 'eq'
     || lk == 65720                 // 'namespace' 'eq'
     || lk == 65752                 // 'processing-instruction' 'eq'
     || lk == 67154                 // 'attribute' 'except'
     || lk == 67193                 // 'element' 'except'
     || lk == 67256                 // 'namespace' 'except'
     || lk == 67288                 // 'processing-instruction' 'except'
     || lk == 70226                 // 'attribute' 'for'
     || lk == 70265                 // 'element' 'for'
     || lk == 70328                 // 'namespace' 'for'
     || lk == 70360                 // 'processing-instruction' 'for'
     || lk == 74834                 // 'attribute' 'ge'
     || lk == 74873                 // 'element' 'ge'
     || lk == 74936                 // 'namespace' 'ge'
     || lk == 74968                 // 'processing-instruction' 'ge'
     || lk == 75858                 // 'attribute' 'group'
     || lk == 75897                 // 'element' 'group'
     || lk == 75960                 // 'namespace' 'group'
     || lk == 75992                 // 'processing-instruction' 'group'
     || lk == 76882                 // 'attribute' 'gt'
     || lk == 76921                 // 'element' 'gt'
     || lk == 76984                 // 'namespace' 'gt'
     || lk == 77016                 // 'processing-instruction' 'gt'
     || lk == 77394                 // 'attribute' 'idiv'
     || lk == 77433                 // 'element' 'idiv'
     || lk == 77496                 // 'namespace' 'idiv'
     || lk == 77528                 // 'processing-instruction' 'idiv'
     || lk == 82002                 // 'attribute' 'instance'
     || lk == 82041                 // 'element' 'instance'
     || lk == 82104                 // 'namespace' 'instance'
     || lk == 82136                 // 'processing-instruction' 'instance'
     || lk == 83026                 // 'attribute' 'intersect'
     || lk == 83065                 // 'element' 'intersect'
     || lk == 83128                 // 'namespace' 'intersect'
     || lk == 83160                 // 'processing-instruction' 'intersect'
     || lk == 83538                 // 'attribute' 'into'
     || lk == 83577                 // 'element' 'into'
     || lk == 83640                 // 'namespace' 'into'
     || lk == 83672                 // 'processing-instruction' 'into'
     || lk == 84050                 // 'attribute' 'is'
     || lk == 84089                 // 'element' 'is'
     || lk == 84152                 // 'namespace' 'is'
     || lk == 84184                 // 'processing-instruction' 'is'
     || lk == 88146                 // 'attribute' 'le'
     || lk == 88185                 // 'element' 'le'
     || lk == 88248                 // 'namespace' 'le'
     || lk == 88280                 // 'processing-instruction' 'le'
     || lk == 89170                 // 'attribute' 'let'
     || lk == 89209                 // 'element' 'let'
     || lk == 89272                 // 'namespace' 'let'
     || lk == 89304                 // 'processing-instruction' 'let'
     || lk == 91218                 // 'attribute' 'lt'
     || lk == 91257                 // 'element' 'lt'
     || lk == 91320                 // 'namespace' 'lt'
     || lk == 91352                 // 'processing-instruction' 'lt'
     || lk == 92242                 // 'attribute' 'mod'
     || lk == 92281                 // 'element' 'mod'
     || lk == 92344                 // 'namespace' 'mod'
     || lk == 92376                 // 'processing-instruction' 'mod'
     || lk == 92754                 // 'attribute' 'modify'
     || lk == 92793                 // 'element' 'modify'
     || lk == 92856                 // 'namespace' 'modify'
     || lk == 92888                 // 'processing-instruction' 'modify'
     || lk == 95314                 // 'attribute' 'ne'
     || lk == 95353                 // 'element' 'ne'
     || lk == 95416                 // 'namespace' 'ne'
     || lk == 95448                 // 'processing-instruction' 'ne'
     || lk == 101458                // 'attribute' 'only'
     || lk == 101497                // 'element' 'only'
     || lk == 101560                // 'namespace' 'only'
     || lk == 101592                // 'processing-instruction' 'only'
     || lk == 102482                // 'attribute' 'or'
     || lk == 102521                // 'element' 'or'
     || lk == 102584                // 'namespace' 'or'
     || lk == 102616                // 'processing-instruction' 'or'
     || lk == 102994                // 'attribute' 'order'
     || lk == 103033                // 'element' 'order'
     || lk == 103096                // 'namespace' 'order'
     || lk == 103128                // 'processing-instruction' 'order'
     || lk == 112722                // 'attribute' 'return'
     || lk == 112761                // 'element' 'return'
     || lk == 112824                // 'namespace' 'return'
     || lk == 112856                // 'processing-instruction' 'return'
     || lk == 114770                // 'attribute' 'satisfies'
     || lk == 114809                // 'element' 'satisfies'
     || lk == 114872                // 'namespace' 'satisfies'
     || lk == 114904                // 'processing-instruction' 'satisfies'
     || lk == 120914                // 'attribute' 'stable'
     || lk == 120953                // 'element' 'stable'
     || lk == 121016                // 'namespace' 'stable'
     || lk == 121048                // 'processing-instruction' 'stable'
     || lk == 121426                // 'attribute' 'start'
     || lk == 121465                // 'element' 'start'
     || lk == 121528                // 'namespace' 'start'
     || lk == 121560                // 'processing-instruction' 'start'
     || lk == 127058                // 'attribute' 'to'
     || lk == 127097                // 'element' 'to'
     || lk == 127160                // 'namespace' 'to'
     || lk == 127192                // 'processing-instruction' 'to'
     || lk == 127570                // 'attribute' 'treat'
     || lk == 127609                // 'element' 'treat'
     || lk == 127672                // 'namespace' 'treat'
     || lk == 127704                // 'processing-instruction' 'treat'
     || lk == 130130                // 'attribute' 'union'
     || lk == 130169                // 'element' 'union'
     || lk == 130232                // 'namespace' 'union'
     || lk == 130264                // 'processing-instruction' 'union'
     || lk == 136274                // 'attribute' 'where'
     || lk == 136313                // 'element' 'where'
     || lk == 136376                // 'namespace' 'where'
     || lk == 136408                // 'processing-instruction' 'where'
     || lk == 138322                // 'attribute' 'with'
     || lk == 138361                // 'element' 'with'
     || lk == 138424                // 'namespace' 'with'
     || lk == 138456)               // 'processing-instruction' 'with'
    {
      lk = memoized(3, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_PostfixExpr();
          lk = -1;
        }
        catch (p1A)
        {
          lk = -2;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(3, e0, lk);
      }
    }
    switch (lk)
    {
    case -1:
    case 8:                         // IntegerLiteral
    case 9:                         // DecimalLiteral
    case 10:                        // DoubleLiteral
    case 11:                        // StringLiteral
    case 31:                        // '$'
    case 32:                        // '%'
    case 34:                        // '('
    case 44:                        // '.'
    case 54:                        // '<'
    case 55:                        // '<!--'
    case 59:                        // '<?'
    case 68:                        // '['
    case 276:                       // '{'
    case 278:                       // '{|'
    case 3154:                      // 'attribute' EQName^Token
    case 3193:                      // 'element' EQName^Token
    case 9912:                      // 'namespace' NCName^Token
    case 9944:                      // 'processing-instruction' NCName^Token
    case 14854:                     // EQName^Token '#'
    case 14918:                     // 'after' '#'
    case 14920:                     // 'allowing' '#'
    case 14921:                     // 'ancestor' '#'
    case 14922:                     // 'ancestor-or-self' '#'
    case 14923:                     // 'and' '#'
    case 14927:                     // 'as' '#'
    case 14928:                     // 'ascending' '#'
    case 14929:                     // 'at' '#'
    case 14930:                     // 'attribute' '#'
    case 14931:                     // 'base-uri' '#'
    case 14932:                     // 'before' '#'
    case 14933:                     // 'boundary-space' '#'
    case 14934:                     // 'break' '#'
    case 14936:                     // 'case' '#'
    case 14937:                     // 'cast' '#'
    case 14938:                     // 'castable' '#'
    case 14939:                     // 'catch' '#'
    case 14941:                     // 'child' '#'
    case 14942:                     // 'collation' '#'
    case 14944:                     // 'comment' '#'
    case 14945:                     // 'constraint' '#'
    case 14946:                     // 'construction' '#'
    case 14949:                     // 'context' '#'
    case 14950:                     // 'continue' '#'
    case 14951:                     // 'copy' '#'
    case 14952:                     // 'copy-namespaces' '#'
    case 14953:                     // 'count' '#'
    case 14954:                     // 'decimal-format' '#'
    case 14956:                     // 'declare' '#'
    case 14957:                     // 'default' '#'
    case 14958:                     // 'delete' '#'
    case 14959:                     // 'descendant' '#'
    case 14960:                     // 'descendant-or-self' '#'
    case 14961:                     // 'descending' '#'
    case 14966:                     // 'div' '#'
    case 14967:                     // 'document' '#'
    case 14968:                     // 'document-node' '#'
    case 14969:                     // 'element' '#'
    case 14970:                     // 'else' '#'
    case 14971:                     // 'empty' '#'
    case 14972:                     // 'empty-sequence' '#'
    case 14973:                     // 'encoding' '#'
    case 14974:                     // 'end' '#'
    case 14976:                     // 'eq' '#'
    case 14977:                     // 'every' '#'
    case 14979:                     // 'except' '#'
    case 14980:                     // 'exit' '#'
    case 14981:                     // 'external' '#'
    case 14982:                     // 'first' '#'
    case 14983:                     // 'following' '#'
    case 14984:                     // 'following-sibling' '#'
    case 14985:                     // 'for' '#'
    case 14989:                     // 'ft-option' '#'
    case 14993:                     // 'function' '#'
    case 14994:                     // 'ge' '#'
    case 14996:                     // 'group' '#'
    case 14998:                     // 'gt' '#'
    case 14999:                     // 'idiv' '#'
    case 15000:                     // 'if' '#'
    case 15001:                     // 'import' '#'
    case 15002:                     // 'in' '#'
    case 15003:                     // 'index' '#'
    case 15007:                     // 'insert' '#'
    case 15008:                     // 'instance' '#'
    case 15009:                     // 'integrity' '#'
    case 15010:                     // 'intersect' '#'
    case 15011:                     // 'into' '#'
    case 15012:                     // 'is' '#'
    case 15013:                     // 'item' '#'
    case 15018:                     // 'last' '#'
    case 15019:                     // 'lax' '#'
    case 15020:                     // 'le' '#'
    case 15022:                     // 'let' '#'
    case 15024:                     // 'loop' '#'
    case 15026:                     // 'lt' '#'
    case 15028:                     // 'mod' '#'
    case 15029:                     // 'modify' '#'
    case 15030:                     // 'module' '#'
    case 15032:                     // 'namespace' '#'
    case 15033:                     // 'namespace-node' '#'
    case 15034:                     // 'ne' '#'
    case 15039:                     // 'node' '#'
    case 15040:                     // 'nodes' '#'
    case 15046:                     // 'only' '#'
    case 15047:                     // 'option' '#'
    case 15048:                     // 'or' '#'
    case 15049:                     // 'order' '#'
    case 15050:                     // 'ordered' '#'
    case 15051:                     // 'ordering' '#'
    case 15054:                     // 'parent' '#'
    case 15060:                     // 'preceding' '#'
    case 15061:                     // 'preceding-sibling' '#'
    case 15064:                     // 'processing-instruction' '#'
    case 15066:                     // 'rename' '#'
    case 15067:                     // 'replace' '#'
    case 15068:                     // 'return' '#'
    case 15069:                     // 'returning' '#'
    case 15070:                     // 'revalidation' '#'
    case 15072:                     // 'satisfies' '#'
    case 15073:                     // 'schema' '#'
    case 15074:                     // 'schema-attribute' '#'
    case 15075:                     // 'schema-element' '#'
    case 15076:                     // 'score' '#'
    case 15077:                     // 'self' '#'
    case 15082:                     // 'sliding' '#'
    case 15083:                     // 'some' '#'
    case 15084:                     // 'stable' '#'
    case 15085:                     // 'start' '#'
    case 15088:                     // 'strict' '#'
    case 15091:                     // 'switch' '#'
    case 15092:                     // 'text' '#'
    case 15096:                     // 'to' '#'
    case 15097:                     // 'treat' '#'
    case 15098:                     // 'try' '#'
    case 15099:                     // 'tumbling' '#'
    case 15100:                     // 'type' '#'
    case 15101:                     // 'typeswitch' '#'
    case 15102:                     // 'union' '#'
    case 15104:                     // 'unordered' '#'
    case 15105:                     // 'updating' '#'
    case 15108:                     // 'validate' '#'
    case 15109:                     // 'value' '#'
    case 15110:                     // 'variable' '#'
    case 15111:                     // 'version' '#'
    case 15114:                     // 'where' '#'
    case 15115:                     // 'while' '#'
    case 15118:                     // 'with' '#'
    case 15122:                     // 'xquery' '#'
    case 17414:                     // EQName^Token '('
    case 17478:                     // 'after' '('
    case 17480:                     // 'allowing' '('
    case 17481:                     // 'ancestor' '('
    case 17482:                     // 'ancestor-or-self' '('
    case 17483:                     // 'and' '('
    case 17487:                     // 'as' '('
    case 17488:                     // 'ascending' '('
    case 17489:                     // 'at' '('
    case 17491:                     // 'base-uri' '('
    case 17492:                     // 'before' '('
    case 17493:                     // 'boundary-space' '('
    case 17494:                     // 'break' '('
    case 17496:                     // 'case' '('
    case 17497:                     // 'cast' '('
    case 17498:                     // 'castable' '('
    case 17499:                     // 'catch' '('
    case 17501:                     // 'child' '('
    case 17502:                     // 'collation' '('
    case 17505:                     // 'constraint' '('
    case 17506:                     // 'construction' '('
    case 17509:                     // 'context' '('
    case 17510:                     // 'continue' '('
    case 17511:                     // 'copy' '('
    case 17512:                     // 'copy-namespaces' '('
    case 17513:                     // 'count' '('
    case 17514:                     // 'decimal-format' '('
    case 17516:                     // 'declare' '('
    case 17517:                     // 'default' '('
    case 17518:                     // 'delete' '('
    case 17519:                     // 'descendant' '('
    case 17520:                     // 'descendant-or-self' '('
    case 17521:                     // 'descending' '('
    case 17526:                     // 'div' '('
    case 17527:                     // 'document' '('
    case 17530:                     // 'else' '('
    case 17531:                     // 'empty' '('
    case 17533:                     // 'encoding' '('
    case 17534:                     // 'end' '('
    case 17536:                     // 'eq' '('
    case 17537:                     // 'every' '('
    case 17539:                     // 'except' '('
    case 17540:                     // 'exit' '('
    case 17541:                     // 'external' '('
    case 17542:                     // 'first' '('
    case 17543:                     // 'following' '('
    case 17544:                     // 'following-sibling' '('
    case 17545:                     // 'for' '('
    case 17549:                     // 'ft-option' '('
    case 17553:                     // 'function' '('
    case 17554:                     // 'ge' '('
    case 17556:                     // 'group' '('
    case 17558:                     // 'gt' '('
    case 17559:                     // 'idiv' '('
    case 17561:                     // 'import' '('
    case 17562:                     // 'in' '('
    case 17563:                     // 'index' '('
    case 17567:                     // 'insert' '('
    case 17568:                     // 'instance' '('
    case 17569:                     // 'integrity' '('
    case 17570:                     // 'intersect' '('
    case 17571:                     // 'into' '('
    case 17572:                     // 'is' '('
    case 17578:                     // 'last' '('
    case 17579:                     // 'lax' '('
    case 17580:                     // 'le' '('
    case 17582:                     // 'let' '('
    case 17584:                     // 'loop' '('
    case 17586:                     // 'lt' '('
    case 17588:                     // 'mod' '('
    case 17589:                     // 'modify' '('
    case 17590:                     // 'module' '('
    case 17592:                     // 'namespace' '('
    case 17594:                     // 'ne' '('
    case 17600:                     // 'nodes' '('
    case 17606:                     // 'only' '('
    case 17607:                     // 'option' '('
    case 17608:                     // 'or' '('
    case 17609:                     // 'order' '('
    case 17610:                     // 'ordered' '('
    case 17611:                     // 'ordering' '('
    case 17614:                     // 'parent' '('
    case 17620:                     // 'preceding' '('
    case 17621:                     // 'preceding-sibling' '('
    case 17626:                     // 'rename' '('
    case 17627:                     // 'replace' '('
    case 17628:                     // 'return' '('
    case 17629:                     // 'returning' '('
    case 17630:                     // 'revalidation' '('
    case 17632:                     // 'satisfies' '('
    case 17633:                     // 'schema' '('
    case 17636:                     // 'score' '('
    case 17637:                     // 'self' '('
    case 17642:                     // 'sliding' '('
    case 17643:                     // 'some' '('
    case 17644:                     // 'stable' '('
    case 17645:                     // 'start' '('
    case 17648:                     // 'strict' '('
    case 17656:                     // 'to' '('
    case 17657:                     // 'treat' '('
    case 17658:                     // 'try' '('
    case 17659:                     // 'tumbling' '('
    case 17660:                     // 'type' '('
    case 17662:                     // 'union' '('
    case 17664:                     // 'unordered' '('
    case 17665:                     // 'updating' '('
    case 17668:                     // 'validate' '('
    case 17669:                     // 'value' '('
    case 17670:                     // 'variable' '('
    case 17671:                     // 'version' '('
    case 17674:                     // 'where' '('
    case 17675:                     // 'while' '('
    case 17678:                     // 'with' '('
    case 17682:                     // 'xquery' '('
    case 36946:                     // 'attribute' 'allowing'
    case 36985:                     // 'element' 'allowing'
    case 37048:                     // 'namespace' 'allowing'
    case 37080:                     // 'processing-instruction' 'allowing'
    case 37458:                     // 'attribute' 'ancestor'
    case 37497:                     // 'element' 'ancestor'
    case 37560:                     // 'namespace' 'ancestor'
    case 37592:                     // 'processing-instruction' 'ancestor'
    case 37970:                     // 'attribute' 'ancestor-or-self'
    case 38009:                     // 'element' 'ancestor-or-self'
    case 38072:                     // 'namespace' 'ancestor-or-self'
    case 38104:                     // 'processing-instruction' 'ancestor-or-self'
    case 42066:                     // 'attribute' 'attribute'
    case 42105:                     // 'element' 'attribute'
    case 42168:                     // 'namespace' 'attribute'
    case 42200:                     // 'processing-instruction' 'attribute'
    case 42578:                     // 'attribute' 'base-uri'
    case 42617:                     // 'element' 'base-uri'
    case 42680:                     // 'namespace' 'base-uri'
    case 42712:                     // 'processing-instruction' 'base-uri'
    case 43602:                     // 'attribute' 'boundary-space'
    case 43641:                     // 'element' 'boundary-space'
    case 43704:                     // 'namespace' 'boundary-space'
    case 43736:                     // 'processing-instruction' 'boundary-space'
    case 44114:                     // 'attribute' 'break'
    case 44153:                     // 'element' 'break'
    case 44216:                     // 'namespace' 'break'
    case 44248:                     // 'processing-instruction' 'break'
    case 46674:                     // 'attribute' 'catch'
    case 46713:                     // 'element' 'catch'
    case 46776:                     // 'namespace' 'catch'
    case 46808:                     // 'processing-instruction' 'catch'
    case 47698:                     // 'attribute' 'child'
    case 47737:                     // 'element' 'child'
    case 47800:                     // 'namespace' 'child'
    case 47832:                     // 'processing-instruction' 'child'
    case 49234:                     // 'attribute' 'comment'
    case 49273:                     // 'element' 'comment'
    case 49336:                     // 'namespace' 'comment'
    case 49368:                     // 'processing-instruction' 'comment'
    case 49746:                     // 'attribute' 'constraint'
    case 49785:                     // 'element' 'constraint'
    case 49848:                     // 'namespace' 'constraint'
    case 49880:                     // 'processing-instruction' 'constraint'
    case 50258:                     // 'attribute' 'construction'
    case 50297:                     // 'element' 'construction'
    case 50360:                     // 'namespace' 'construction'
    case 50392:                     // 'processing-instruction' 'construction'
    case 51794:                     // 'attribute' 'context'
    case 51833:                     // 'element' 'context'
    case 51896:                     // 'namespace' 'context'
    case 51928:                     // 'processing-instruction' 'context'
    case 52306:                     // 'attribute' 'continue'
    case 52345:                     // 'element' 'continue'
    case 52408:                     // 'namespace' 'continue'
    case 52440:                     // 'processing-instruction' 'continue'
    case 52818:                     // 'attribute' 'copy'
    case 52857:                     // 'element' 'copy'
    case 52920:                     // 'namespace' 'copy'
    case 52952:                     // 'processing-instruction' 'copy'
    case 53330:                     // 'attribute' 'copy-namespaces'
    case 53369:                     // 'element' 'copy-namespaces'
    case 53432:                     // 'namespace' 'copy-namespaces'
    case 53464:                     // 'processing-instruction' 'copy-namespaces'
    case 54354:                     // 'attribute' 'decimal-format'
    case 54393:                     // 'element' 'decimal-format'
    case 54456:                     // 'namespace' 'decimal-format'
    case 54488:                     // 'processing-instruction' 'decimal-format'
    case 55378:                     // 'attribute' 'declare'
    case 55417:                     // 'element' 'declare'
    case 55480:                     // 'namespace' 'declare'
    case 55512:                     // 'processing-instruction' 'declare'
    case 56402:                     // 'attribute' 'delete'
    case 56441:                     // 'element' 'delete'
    case 56504:                     // 'namespace' 'delete'
    case 56536:                     // 'processing-instruction' 'delete'
    case 56914:                     // 'attribute' 'descendant'
    case 56953:                     // 'element' 'descendant'
    case 57016:                     // 'namespace' 'descendant'
    case 57048:                     // 'processing-instruction' 'descendant'
    case 57426:                     // 'attribute' 'descendant-or-self'
    case 57465:                     // 'element' 'descendant-or-self'
    case 57528:                     // 'namespace' 'descendant-or-self'
    case 57560:                     // 'processing-instruction' 'descendant-or-self'
    case 61010:                     // 'attribute' 'document'
    case 61049:                     // 'element' 'document'
    case 61112:                     // 'namespace' 'document'
    case 61144:                     // 'processing-instruction' 'document'
    case 61522:                     // 'attribute' 'document-node'
    case 61561:                     // 'element' 'document-node'
    case 61624:                     // 'namespace' 'document-node'
    case 61656:                     // 'processing-instruction' 'document-node'
    case 62034:                     // 'attribute' 'element'
    case 62073:                     // 'element' 'element'
    case 62136:                     // 'namespace' 'element'
    case 62168:                     // 'processing-instruction' 'element'
    case 63570:                     // 'attribute' 'empty-sequence'
    case 63609:                     // 'element' 'empty-sequence'
    case 63672:                     // 'namespace' 'empty-sequence'
    case 63704:                     // 'processing-instruction' 'empty-sequence'
    case 64082:                     // 'attribute' 'encoding'
    case 64121:                     // 'element' 'encoding'
    case 64184:                     // 'namespace' 'encoding'
    case 64216:                     // 'processing-instruction' 'encoding'
    case 66130:                     // 'attribute' 'every'
    case 66169:                     // 'element' 'every'
    case 66232:                     // 'namespace' 'every'
    case 66264:                     // 'processing-instruction' 'every'
    case 67666:                     // 'attribute' 'exit'
    case 67705:                     // 'element' 'exit'
    case 67768:                     // 'namespace' 'exit'
    case 67800:                     // 'processing-instruction' 'exit'
    case 68178:                     // 'attribute' 'external'
    case 68217:                     // 'element' 'external'
    case 68280:                     // 'namespace' 'external'
    case 68312:                     // 'processing-instruction' 'external'
    case 68690:                     // 'attribute' 'first'
    case 68729:                     // 'element' 'first'
    case 68792:                     // 'namespace' 'first'
    case 68824:                     // 'processing-instruction' 'first'
    case 69202:                     // 'attribute' 'following'
    case 69241:                     // 'element' 'following'
    case 69304:                     // 'namespace' 'following'
    case 69336:                     // 'processing-instruction' 'following'
    case 69714:                     // 'attribute' 'following-sibling'
    case 69753:                     // 'element' 'following-sibling'
    case 69816:                     // 'namespace' 'following-sibling'
    case 69848:                     // 'processing-instruction' 'following-sibling'
    case 72274:                     // 'attribute' 'ft-option'
    case 72313:                     // 'element' 'ft-option'
    case 72376:                     // 'namespace' 'ft-option'
    case 72408:                     // 'processing-instruction' 'ft-option'
    case 74322:                     // 'attribute' 'function'
    case 74361:                     // 'element' 'function'
    case 74424:                     // 'namespace' 'function'
    case 74456:                     // 'processing-instruction' 'function'
    case 77906:                     // 'attribute' 'if'
    case 77945:                     // 'element' 'if'
    case 78008:                     // 'namespace' 'if'
    case 78040:                     // 'processing-instruction' 'if'
    case 78418:                     // 'attribute' 'import'
    case 78457:                     // 'element' 'import'
    case 78520:                     // 'namespace' 'import'
    case 78552:                     // 'processing-instruction' 'import'
    case 78930:                     // 'attribute' 'in'
    case 78969:                     // 'element' 'in'
    case 79032:                     // 'namespace' 'in'
    case 79064:                     // 'processing-instruction' 'in'
    case 79442:                     // 'attribute' 'index'
    case 79481:                     // 'element' 'index'
    case 79544:                     // 'namespace' 'index'
    case 79576:                     // 'processing-instruction' 'index'
    case 81490:                     // 'attribute' 'insert'
    case 81529:                     // 'element' 'insert'
    case 81592:                     // 'namespace' 'insert'
    case 81624:                     // 'processing-instruction' 'insert'
    case 82514:                     // 'attribute' 'integrity'
    case 82553:                     // 'element' 'integrity'
    case 82616:                     // 'namespace' 'integrity'
    case 82648:                     // 'processing-instruction' 'integrity'
    case 84562:                     // 'attribute' 'item'
    case 84601:                     // 'element' 'item'
    case 84664:                     // 'namespace' 'item'
    case 84696:                     // 'processing-instruction' 'item'
    case 87122:                     // 'attribute' 'last'
    case 87161:                     // 'element' 'last'
    case 87224:                     // 'namespace' 'last'
    case 87256:                     // 'processing-instruction' 'last'
    case 87634:                     // 'attribute' 'lax'
    case 87673:                     // 'element' 'lax'
    case 87736:                     // 'namespace' 'lax'
    case 87768:                     // 'processing-instruction' 'lax'
    case 90194:                     // 'attribute' 'loop'
    case 90233:                     // 'element' 'loop'
    case 90296:                     // 'namespace' 'loop'
    case 90328:                     // 'processing-instruction' 'loop'
    case 93266:                     // 'attribute' 'module'
    case 93305:                     // 'element' 'module'
    case 93368:                     // 'namespace' 'module'
    case 93400:                     // 'processing-instruction' 'module'
    case 94290:                     // 'attribute' 'namespace'
    case 94329:                     // 'element' 'namespace'
    case 94392:                     // 'namespace' 'namespace'
    case 94424:                     // 'processing-instruction' 'namespace'
    case 94802:                     // 'attribute' 'namespace-node'
    case 94841:                     // 'element' 'namespace-node'
    case 94904:                     // 'namespace' 'namespace-node'
    case 94936:                     // 'processing-instruction' 'namespace-node'
    case 97874:                     // 'attribute' 'node'
    case 97913:                     // 'element' 'node'
    case 97976:                     // 'namespace' 'node'
    case 98008:                     // 'processing-instruction' 'node'
    case 98386:                     // 'attribute' 'nodes'
    case 98425:                     // 'element' 'nodes'
    case 98488:                     // 'namespace' 'nodes'
    case 98520:                     // 'processing-instruction' 'nodes'
    case 101970:                    // 'attribute' 'option'
    case 102009:                    // 'element' 'option'
    case 102072:                    // 'namespace' 'option'
    case 102104:                    // 'processing-instruction' 'option'
    case 103506:                    // 'attribute' 'ordered'
    case 103545:                    // 'element' 'ordered'
    case 103608:                    // 'namespace' 'ordered'
    case 103640:                    // 'processing-instruction' 'ordered'
    case 104018:                    // 'attribute' 'ordering'
    case 104057:                    // 'element' 'ordering'
    case 104120:                    // 'namespace' 'ordering'
    case 104152:                    // 'processing-instruction' 'ordering'
    case 105554:                    // 'attribute' 'parent'
    case 105593:                    // 'element' 'parent'
    case 105656:                    // 'namespace' 'parent'
    case 105688:                    // 'processing-instruction' 'parent'
    case 108626:                    // 'attribute' 'preceding'
    case 108665:                    // 'element' 'preceding'
    case 108728:                    // 'namespace' 'preceding'
    case 108760:                    // 'processing-instruction' 'preceding'
    case 109138:                    // 'attribute' 'preceding-sibling'
    case 109177:                    // 'element' 'preceding-sibling'
    case 109240:                    // 'namespace' 'preceding-sibling'
    case 109272:                    // 'processing-instruction' 'preceding-sibling'
    case 110674:                    // 'attribute' 'processing-instruction'
    case 110713:                    // 'element' 'processing-instruction'
    case 110776:                    // 'namespace' 'processing-instruction'
    case 110808:                    // 'processing-instruction' 'processing-instruction'
    case 111698:                    // 'attribute' 'rename'
    case 111737:                    // 'element' 'rename'
    case 111800:                    // 'namespace' 'rename'
    case 111832:                    // 'processing-instruction' 'rename'
    case 112210:                    // 'attribute' 'replace'
    case 112249:                    // 'element' 'replace'
    case 112312:                    // 'namespace' 'replace'
    case 112344:                    // 'processing-instruction' 'replace'
    case 113234:                    // 'attribute' 'returning'
    case 113273:                    // 'element' 'returning'
    case 113336:                    // 'namespace' 'returning'
    case 113368:                    // 'processing-instruction' 'returning'
    case 113746:                    // 'attribute' 'revalidation'
    case 113785:                    // 'element' 'revalidation'
    case 113848:                    // 'namespace' 'revalidation'
    case 113880:                    // 'processing-instruction' 'revalidation'
    case 115282:                    // 'attribute' 'schema'
    case 115321:                    // 'element' 'schema'
    case 115384:                    // 'namespace' 'schema'
    case 115416:                    // 'processing-instruction' 'schema'
    case 115794:                    // 'attribute' 'schema-attribute'
    case 115833:                    // 'element' 'schema-attribute'
    case 115896:                    // 'namespace' 'schema-attribute'
    case 115928:                    // 'processing-instruction' 'schema-attribute'
    case 116306:                    // 'attribute' 'schema-element'
    case 116345:                    // 'element' 'schema-element'
    case 116408:                    // 'namespace' 'schema-element'
    case 116440:                    // 'processing-instruction' 'schema-element'
    case 116818:                    // 'attribute' 'score'
    case 116857:                    // 'element' 'score'
    case 116920:                    // 'namespace' 'score'
    case 116952:                    // 'processing-instruction' 'score'
    case 117330:                    // 'attribute' 'self'
    case 117369:                    // 'element' 'self'
    case 117432:                    // 'namespace' 'self'
    case 117464:                    // 'processing-instruction' 'self'
    case 119890:                    // 'attribute' 'sliding'
    case 119929:                    // 'element' 'sliding'
    case 119992:                    // 'namespace' 'sliding'
    case 120024:                    // 'processing-instruction' 'sliding'
    case 120402:                    // 'attribute' 'some'
    case 120441:                    // 'element' 'some'
    case 120504:                    // 'namespace' 'some'
    case 120536:                    // 'processing-instruction' 'some'
    case 122962:                    // 'attribute' 'strict'
    case 123001:                    // 'element' 'strict'
    case 123064:                    // 'namespace' 'strict'
    case 123096:                    // 'processing-instruction' 'strict'
    case 124498:                    // 'attribute' 'switch'
    case 124537:                    // 'element' 'switch'
    case 124600:                    // 'namespace' 'switch'
    case 124632:                    // 'processing-instruction' 'switch'
    case 125010:                    // 'attribute' 'text'
    case 125049:                    // 'element' 'text'
    case 125112:                    // 'namespace' 'text'
    case 125144:                    // 'processing-instruction' 'text'
    case 128082:                    // 'attribute' 'try'
    case 128121:                    // 'element' 'try'
    case 128184:                    // 'namespace' 'try'
    case 128216:                    // 'processing-instruction' 'try'
    case 128594:                    // 'attribute' 'tumbling'
    case 128633:                    // 'element' 'tumbling'
    case 128696:                    // 'namespace' 'tumbling'
    case 128728:                    // 'processing-instruction' 'tumbling'
    case 129106:                    // 'attribute' 'type'
    case 129145:                    // 'element' 'type'
    case 129208:                    // 'namespace' 'type'
    case 129240:                    // 'processing-instruction' 'type'
    case 129618:                    // 'attribute' 'typeswitch'
    case 129657:                    // 'element' 'typeswitch'
    case 129720:                    // 'namespace' 'typeswitch'
    case 129752:                    // 'processing-instruction' 'typeswitch'
    case 131154:                    // 'attribute' 'unordered'
    case 131193:                    // 'element' 'unordered'
    case 131256:                    // 'namespace' 'unordered'
    case 131288:                    // 'processing-instruction' 'unordered'
    case 131666:                    // 'attribute' 'updating'
    case 131705:                    // 'element' 'updating'
    case 131768:                    // 'namespace' 'updating'
    case 131800:                    // 'processing-instruction' 'updating'
    case 133202:                    // 'attribute' 'validate'
    case 133241:                    // 'element' 'validate'
    case 133304:                    // 'namespace' 'validate'
    case 133336:                    // 'processing-instruction' 'validate'
    case 133714:                    // 'attribute' 'value'
    case 133753:                    // 'element' 'value'
    case 133816:                    // 'namespace' 'value'
    case 133848:                    // 'processing-instruction' 'value'
    case 134226:                    // 'attribute' 'variable'
    case 134265:                    // 'element' 'variable'
    case 134328:                    // 'namespace' 'variable'
    case 134360:                    // 'processing-instruction' 'variable'
    case 134738:                    // 'attribute' 'version'
    case 134777:                    // 'element' 'version'
    case 134840:                    // 'namespace' 'version'
    case 134872:                    // 'processing-instruction' 'version'
    case 136786:                    // 'attribute' 'while'
    case 136825:                    // 'element' 'while'
    case 136888:                    // 'namespace' 'while'
    case 136920:                    // 'processing-instruction' 'while'
    case 140370:                    // 'attribute' 'xquery'
    case 140409:                    // 'element' 'xquery'
    case 140472:                    // 'namespace' 'xquery'
    case 140504:                    // 'processing-instruction' 'xquery'
    case 141394:                    // 'attribute' '{'
    case 141408:                    // 'comment' '{'
    case 141431:                    // 'document' '{'
    case 141433:                    // 'element' '{'
    case 141496:                    // 'namespace' '{'
    case 141514:                    // 'ordered' '{'
    case 141528:                    // 'processing-instruction' '{'
    case 141556:                    // 'text' '{'
    case 141568:                    // 'unordered' '{'
      parse_PostfixExpr();
      break;
    default:
      parse_AxisStep();
    }
    endNonterminal("StepExpr");
  }

  function try_StepExpr()
  {
    lookahead1W(319);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(:' | '.' | '..' | '<' | '<!--' |
                                    // '<?' | '@' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    switch (l1)
    {
    case 82:                        // 'attribute'
      lookahead2W(338);             // EQName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' |
                                    // ',' | '-' | '/' | '//' | ':' | '::' | ';' | '<' | '<<' | '<=' | '=' | '>' |
                                    // '>=' | '>>' | '[' | ']' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'contains' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'paragraphs' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sentences' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' |
                                    // 'times' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'words' | 'xquery' | '{' | '|' | '||' | '|}' | '}'
      break;
    case 121:                       // 'element'
      lookahead2W(335);             // EQName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' |
                                    // ',' | '-' | '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' |
                                    // '>>' | '[' | ']' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'by' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'contains' |
                                    // 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'paragraphs' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sentences' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'times' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'words' |
                                    // 'xquery' | '{' | '|' | '||' | '|}' | '}'
      break;
    case 184:                       // 'namespace'
    case 216:                       // 'processing-instruction'
      lookahead2W(336);             // NCName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' |
                                    // ',' | '-' | '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' |
                                    // '>>' | '[' | ']' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'by' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'contains' |
                                    // 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'paragraphs' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sentences' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'switch' | 'text' | 'times' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'words' |
                                    // 'xquery' | '{' | '|' | '||' | '|}' | '}'
      break;
    case 96:                        // 'comment'
    case 119:                       // 'document'
    case 202:                       // 'ordered'
    case 244:                       // 'text'
    case 256:                       // 'unordered'
      lookahead2W(298);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '{' | '|' | '||' | '|}' | '}'
      break;
    case 124:                       // 'empty-sequence'
    case 152:                       // 'if'
    case 165:                       // 'item'
    case 243:                       // 'switch'
    case 253:                       // 'typeswitch'
      lookahead2W(291);             // S^WS | EOF | '!' | '!=' | '#' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' | 'after' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
      break;
    case 73:                        // 'ancestor'
    case 74:                        // 'ancestor-or-self'
    case 93:                        // 'child'
    case 111:                       // 'descendant'
    case 112:                       // 'descendant-or-self'
    case 135:                       // 'following'
    case 136:                       // 'following-sibling'
    case 206:                       // 'parent'
    case 212:                       // 'preceding'
    case 213:                       // 'preceding-sibling'
    case 229:                       // 'self'
      lookahead2W(297);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | '::' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' |
                                    // 'cast' | 'castable' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' | '||' |
                                    // '|}' | '}'
      break;
    case 6:                         // EQName^Token
    case 70:                        // 'after'
    case 72:                        // 'allowing'
    case 75:                        // 'and'
    case 79:                        // 'as'
    case 80:                        // 'ascending'
    case 81:                        // 'at'
    case 83:                        // 'base-uri'
    case 84:                        // 'before'
    case 85:                        // 'boundary-space'
    case 86:                        // 'break'
    case 88:                        // 'case'
    case 89:                        // 'cast'
    case 90:                        // 'castable'
    case 91:                        // 'catch'
    case 94:                        // 'collation'
    case 97:                        // 'constraint'
    case 98:                        // 'construction'
    case 101:                       // 'context'
    case 102:                       // 'continue'
    case 103:                       // 'copy'
    case 104:                       // 'copy-namespaces'
    case 105:                       // 'count'
    case 106:                       // 'decimal-format'
    case 108:                       // 'declare'
    case 109:                       // 'default'
    case 110:                       // 'delete'
    case 113:                       // 'descending'
    case 118:                       // 'div'
    case 120:                       // 'document-node'
    case 122:                       // 'else'
    case 123:                       // 'empty'
    case 125:                       // 'encoding'
    case 126:                       // 'end'
    case 128:                       // 'eq'
    case 129:                       // 'every'
    case 131:                       // 'except'
    case 132:                       // 'exit'
    case 133:                       // 'external'
    case 134:                       // 'first'
    case 137:                       // 'for'
    case 141:                       // 'ft-option'
    case 145:                       // 'function'
    case 146:                       // 'ge'
    case 148:                       // 'group'
    case 150:                       // 'gt'
    case 151:                       // 'idiv'
    case 153:                       // 'import'
    case 154:                       // 'in'
    case 155:                       // 'index'
    case 159:                       // 'insert'
    case 160:                       // 'instance'
    case 161:                       // 'integrity'
    case 162:                       // 'intersect'
    case 163:                       // 'into'
    case 164:                       // 'is'
    case 170:                       // 'last'
    case 171:                       // 'lax'
    case 172:                       // 'le'
    case 174:                       // 'let'
    case 176:                       // 'loop'
    case 178:                       // 'lt'
    case 180:                       // 'mod'
    case 181:                       // 'modify'
    case 182:                       // 'module'
    case 185:                       // 'namespace-node'
    case 186:                       // 'ne'
    case 191:                       // 'node'
    case 192:                       // 'nodes'
    case 198:                       // 'only'
    case 199:                       // 'option'
    case 200:                       // 'or'
    case 201:                       // 'order'
    case 203:                       // 'ordering'
    case 218:                       // 'rename'
    case 219:                       // 'replace'
    case 220:                       // 'return'
    case 221:                       // 'returning'
    case 222:                       // 'revalidation'
    case 224:                       // 'satisfies'
    case 225:                       // 'schema'
    case 226:                       // 'schema-attribute'
    case 227:                       // 'schema-element'
    case 228:                       // 'score'
    case 234:                       // 'sliding'
    case 235:                       // 'some'
    case 236:                       // 'stable'
    case 237:                       // 'start'
    case 240:                       // 'strict'
    case 248:                       // 'to'
    case 249:                       // 'treat'
    case 250:                       // 'try'
    case 251:                       // 'tumbling'
    case 252:                       // 'type'
    case 254:                       // 'union'
    case 257:                       // 'updating'
    case 260:                       // 'validate'
    case 261:                       // 'value'
    case 262:                       // 'variable'
    case 263:                       // 'version'
    case 266:                       // 'where'
    case 267:                       // 'while'
    case 270:                       // 'with'
    case 274:                       // 'xquery'
      lookahead2W(295);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
      break;
    default:
      lk = l1;
    }
    if (lk == 35922                 // 'attribute' 'after'
     || lk == 35961                 // 'element' 'after'
     || lk == 36024                 // 'namespace' 'after'
     || lk == 36056                 // 'processing-instruction' 'after'
     || lk == 38482                 // 'attribute' 'and'
     || lk == 38521                 // 'element' 'and'
     || lk == 38584                 // 'namespace' 'and'
     || lk == 38616                 // 'processing-instruction' 'and'
     || lk == 40530                 // 'attribute' 'as'
     || lk == 40569                 // 'element' 'as'
     || lk == 40632                 // 'namespace' 'as'
     || lk == 40664                 // 'processing-instruction' 'as'
     || lk == 41042                 // 'attribute' 'ascending'
     || lk == 41081                 // 'element' 'ascending'
     || lk == 41144                 // 'namespace' 'ascending'
     || lk == 41176                 // 'processing-instruction' 'ascending'
     || lk == 41554                 // 'attribute' 'at'
     || lk == 41593                 // 'element' 'at'
     || lk == 41656                 // 'namespace' 'at'
     || lk == 41688                 // 'processing-instruction' 'at'
     || lk == 43090                 // 'attribute' 'before'
     || lk == 43129                 // 'element' 'before'
     || lk == 43192                 // 'namespace' 'before'
     || lk == 43224                 // 'processing-instruction' 'before'
     || lk == 45138                 // 'attribute' 'case'
     || lk == 45177                 // 'element' 'case'
     || lk == 45240                 // 'namespace' 'case'
     || lk == 45272                 // 'processing-instruction' 'case'
     || lk == 45650                 // 'attribute' 'cast'
     || lk == 45689                 // 'element' 'cast'
     || lk == 45752                 // 'namespace' 'cast'
     || lk == 45784                 // 'processing-instruction' 'cast'
     || lk == 46162                 // 'attribute' 'castable'
     || lk == 46201                 // 'element' 'castable'
     || lk == 46264                 // 'namespace' 'castable'
     || lk == 46296                 // 'processing-instruction' 'castable'
     || lk == 48210                 // 'attribute' 'collation'
     || lk == 48249                 // 'element' 'collation'
     || lk == 48312                 // 'namespace' 'collation'
     || lk == 48344                 // 'processing-instruction' 'collation'
     || lk == 53842                 // 'attribute' 'count'
     || lk == 53881                 // 'element' 'count'
     || lk == 53944                 // 'namespace' 'count'
     || lk == 53976                 // 'processing-instruction' 'count'
     || lk == 55890                 // 'attribute' 'default'
     || lk == 55929                 // 'element' 'default'
     || lk == 55992                 // 'namespace' 'default'
     || lk == 56024                 // 'processing-instruction' 'default'
     || lk == 57938                 // 'attribute' 'descending'
     || lk == 57977                 // 'element' 'descending'
     || lk == 58040                 // 'namespace' 'descending'
     || lk == 58072                 // 'processing-instruction' 'descending'
     || lk == 60498                 // 'attribute' 'div'
     || lk == 60537                 // 'element' 'div'
     || lk == 60600                 // 'namespace' 'div'
     || lk == 60632                 // 'processing-instruction' 'div'
     || lk == 62546                 // 'attribute' 'else'
     || lk == 62585                 // 'element' 'else'
     || lk == 62648                 // 'namespace' 'else'
     || lk == 62680                 // 'processing-instruction' 'else'
     || lk == 63058                 // 'attribute' 'empty'
     || lk == 63097                 // 'element' 'empty'
     || lk == 63160                 // 'namespace' 'empty'
     || lk == 63192                 // 'processing-instruction' 'empty'
     || lk == 64594                 // 'attribute' 'end'
     || lk == 64633                 // 'element' 'end'
     || lk == 64696                 // 'namespace' 'end'
     || lk == 64728                 // 'processing-instruction' 'end'
     || lk == 65618                 // 'attribute' 'eq'
     || lk == 65657                 // 'element' 'eq'
     || lk == 65720                 // 'namespace' 'eq'
     || lk == 65752                 // 'processing-instruction' 'eq'
     || lk == 67154                 // 'attribute' 'except'
     || lk == 67193                 // 'element' 'except'
     || lk == 67256                 // 'namespace' 'except'
     || lk == 67288                 // 'processing-instruction' 'except'
     || lk == 70226                 // 'attribute' 'for'
     || lk == 70265                 // 'element' 'for'
     || lk == 70328                 // 'namespace' 'for'
     || lk == 70360                 // 'processing-instruction' 'for'
     || lk == 74834                 // 'attribute' 'ge'
     || lk == 74873                 // 'element' 'ge'
     || lk == 74936                 // 'namespace' 'ge'
     || lk == 74968                 // 'processing-instruction' 'ge'
     || lk == 75858                 // 'attribute' 'group'
     || lk == 75897                 // 'element' 'group'
     || lk == 75960                 // 'namespace' 'group'
     || lk == 75992                 // 'processing-instruction' 'group'
     || lk == 76882                 // 'attribute' 'gt'
     || lk == 76921                 // 'element' 'gt'
     || lk == 76984                 // 'namespace' 'gt'
     || lk == 77016                 // 'processing-instruction' 'gt'
     || lk == 77394                 // 'attribute' 'idiv'
     || lk == 77433                 // 'element' 'idiv'
     || lk == 77496                 // 'namespace' 'idiv'
     || lk == 77528                 // 'processing-instruction' 'idiv'
     || lk == 82002                 // 'attribute' 'instance'
     || lk == 82041                 // 'element' 'instance'
     || lk == 82104                 // 'namespace' 'instance'
     || lk == 82136                 // 'processing-instruction' 'instance'
     || lk == 83026                 // 'attribute' 'intersect'
     || lk == 83065                 // 'element' 'intersect'
     || lk == 83128                 // 'namespace' 'intersect'
     || lk == 83160                 // 'processing-instruction' 'intersect'
     || lk == 83538                 // 'attribute' 'into'
     || lk == 83577                 // 'element' 'into'
     || lk == 83640                 // 'namespace' 'into'
     || lk == 83672                 // 'processing-instruction' 'into'
     || lk == 84050                 // 'attribute' 'is'
     || lk == 84089                 // 'element' 'is'
     || lk == 84152                 // 'namespace' 'is'
     || lk == 84184                 // 'processing-instruction' 'is'
     || lk == 88146                 // 'attribute' 'le'
     || lk == 88185                 // 'element' 'le'
     || lk == 88248                 // 'namespace' 'le'
     || lk == 88280                 // 'processing-instruction' 'le'
     || lk == 89170                 // 'attribute' 'let'
     || lk == 89209                 // 'element' 'let'
     || lk == 89272                 // 'namespace' 'let'
     || lk == 89304                 // 'processing-instruction' 'let'
     || lk == 91218                 // 'attribute' 'lt'
     || lk == 91257                 // 'element' 'lt'
     || lk == 91320                 // 'namespace' 'lt'
     || lk == 91352                 // 'processing-instruction' 'lt'
     || lk == 92242                 // 'attribute' 'mod'
     || lk == 92281                 // 'element' 'mod'
     || lk == 92344                 // 'namespace' 'mod'
     || lk == 92376                 // 'processing-instruction' 'mod'
     || lk == 92754                 // 'attribute' 'modify'
     || lk == 92793                 // 'element' 'modify'
     || lk == 92856                 // 'namespace' 'modify'
     || lk == 92888                 // 'processing-instruction' 'modify'
     || lk == 95314                 // 'attribute' 'ne'
     || lk == 95353                 // 'element' 'ne'
     || lk == 95416                 // 'namespace' 'ne'
     || lk == 95448                 // 'processing-instruction' 'ne'
     || lk == 101458                // 'attribute' 'only'
     || lk == 101497                // 'element' 'only'
     || lk == 101560                // 'namespace' 'only'
     || lk == 101592                // 'processing-instruction' 'only'
     || lk == 102482                // 'attribute' 'or'
     || lk == 102521                // 'element' 'or'
     || lk == 102584                // 'namespace' 'or'
     || lk == 102616                // 'processing-instruction' 'or'
     || lk == 102994                // 'attribute' 'order'
     || lk == 103033                // 'element' 'order'
     || lk == 103096                // 'namespace' 'order'
     || lk == 103128                // 'processing-instruction' 'order'
     || lk == 112722                // 'attribute' 'return'
     || lk == 112761                // 'element' 'return'
     || lk == 112824                // 'namespace' 'return'
     || lk == 112856                // 'processing-instruction' 'return'
     || lk == 114770                // 'attribute' 'satisfies'
     || lk == 114809                // 'element' 'satisfies'
     || lk == 114872                // 'namespace' 'satisfies'
     || lk == 114904                // 'processing-instruction' 'satisfies'
     || lk == 120914                // 'attribute' 'stable'
     || lk == 120953                // 'element' 'stable'
     || lk == 121016                // 'namespace' 'stable'
     || lk == 121048                // 'processing-instruction' 'stable'
     || lk == 121426                // 'attribute' 'start'
     || lk == 121465                // 'element' 'start'
     || lk == 121528                // 'namespace' 'start'
     || lk == 121560                // 'processing-instruction' 'start'
     || lk == 127058                // 'attribute' 'to'
     || lk == 127097                // 'element' 'to'
     || lk == 127160                // 'namespace' 'to'
     || lk == 127192                // 'processing-instruction' 'to'
     || lk == 127570                // 'attribute' 'treat'
     || lk == 127609                // 'element' 'treat'
     || lk == 127672                // 'namespace' 'treat'
     || lk == 127704                // 'processing-instruction' 'treat'
     || lk == 130130                // 'attribute' 'union'
     || lk == 130169                // 'element' 'union'
     || lk == 130232                // 'namespace' 'union'
     || lk == 130264                // 'processing-instruction' 'union'
     || lk == 136274                // 'attribute' 'where'
     || lk == 136313                // 'element' 'where'
     || lk == 136376                // 'namespace' 'where'
     || lk == 136408                // 'processing-instruction' 'where'
     || lk == 138322                // 'attribute' 'with'
     || lk == 138361                // 'element' 'with'
     || lk == 138424                // 'namespace' 'with'
     || lk == 138456)               // 'processing-instruction' 'with'
    {
      lk = memoized(3, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_PostfixExpr();
          lk = -1;
        }
        catch (p1A)
        {
          lk = -2;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(3, e0, lk);
      }
    }
    switch (lk)
    {
    case -1:
    case 8:                         // IntegerLiteral
    case 9:                         // DecimalLiteral
    case 10:                        // DoubleLiteral
    case 11:                        // StringLiteral
    case 31:                        // '$'
    case 32:                        // '%'
    case 34:                        // '('
    case 44:                        // '.'
    case 54:                        // '<'
    case 55:                        // '<!--'
    case 59:                        // '<?'
    case 68:                        // '['
    case 276:                       // '{'
    case 278:                       // '{|'
    case 3154:                      // 'attribute' EQName^Token
    case 3193:                      // 'element' EQName^Token
    case 9912:                      // 'namespace' NCName^Token
    case 9944:                      // 'processing-instruction' NCName^Token
    case 14854:                     // EQName^Token '#'
    case 14918:                     // 'after' '#'
    case 14920:                     // 'allowing' '#'
    case 14921:                     // 'ancestor' '#'
    case 14922:                     // 'ancestor-or-self' '#'
    case 14923:                     // 'and' '#'
    case 14927:                     // 'as' '#'
    case 14928:                     // 'ascending' '#'
    case 14929:                     // 'at' '#'
    case 14930:                     // 'attribute' '#'
    case 14931:                     // 'base-uri' '#'
    case 14932:                     // 'before' '#'
    case 14933:                     // 'boundary-space' '#'
    case 14934:                     // 'break' '#'
    case 14936:                     // 'case' '#'
    case 14937:                     // 'cast' '#'
    case 14938:                     // 'castable' '#'
    case 14939:                     // 'catch' '#'
    case 14941:                     // 'child' '#'
    case 14942:                     // 'collation' '#'
    case 14944:                     // 'comment' '#'
    case 14945:                     // 'constraint' '#'
    case 14946:                     // 'construction' '#'
    case 14949:                     // 'context' '#'
    case 14950:                     // 'continue' '#'
    case 14951:                     // 'copy' '#'
    case 14952:                     // 'copy-namespaces' '#'
    case 14953:                     // 'count' '#'
    case 14954:                     // 'decimal-format' '#'
    case 14956:                     // 'declare' '#'
    case 14957:                     // 'default' '#'
    case 14958:                     // 'delete' '#'
    case 14959:                     // 'descendant' '#'
    case 14960:                     // 'descendant-or-self' '#'
    case 14961:                     // 'descending' '#'
    case 14966:                     // 'div' '#'
    case 14967:                     // 'document' '#'
    case 14968:                     // 'document-node' '#'
    case 14969:                     // 'element' '#'
    case 14970:                     // 'else' '#'
    case 14971:                     // 'empty' '#'
    case 14972:                     // 'empty-sequence' '#'
    case 14973:                     // 'encoding' '#'
    case 14974:                     // 'end' '#'
    case 14976:                     // 'eq' '#'
    case 14977:                     // 'every' '#'
    case 14979:                     // 'except' '#'
    case 14980:                     // 'exit' '#'
    case 14981:                     // 'external' '#'
    case 14982:                     // 'first' '#'
    case 14983:                     // 'following' '#'
    case 14984:                     // 'following-sibling' '#'
    case 14985:                     // 'for' '#'
    case 14989:                     // 'ft-option' '#'
    case 14993:                     // 'function' '#'
    case 14994:                     // 'ge' '#'
    case 14996:                     // 'group' '#'
    case 14998:                     // 'gt' '#'
    case 14999:                     // 'idiv' '#'
    case 15000:                     // 'if' '#'
    case 15001:                     // 'import' '#'
    case 15002:                     // 'in' '#'
    case 15003:                     // 'index' '#'
    case 15007:                     // 'insert' '#'
    case 15008:                     // 'instance' '#'
    case 15009:                     // 'integrity' '#'
    case 15010:                     // 'intersect' '#'
    case 15011:                     // 'into' '#'
    case 15012:                     // 'is' '#'
    case 15013:                     // 'item' '#'
    case 15018:                     // 'last' '#'
    case 15019:                     // 'lax' '#'
    case 15020:                     // 'le' '#'
    case 15022:                     // 'let' '#'
    case 15024:                     // 'loop' '#'
    case 15026:                     // 'lt' '#'
    case 15028:                     // 'mod' '#'
    case 15029:                     // 'modify' '#'
    case 15030:                     // 'module' '#'
    case 15032:                     // 'namespace' '#'
    case 15033:                     // 'namespace-node' '#'
    case 15034:                     // 'ne' '#'
    case 15039:                     // 'node' '#'
    case 15040:                     // 'nodes' '#'
    case 15046:                     // 'only' '#'
    case 15047:                     // 'option' '#'
    case 15048:                     // 'or' '#'
    case 15049:                     // 'order' '#'
    case 15050:                     // 'ordered' '#'
    case 15051:                     // 'ordering' '#'
    case 15054:                     // 'parent' '#'
    case 15060:                     // 'preceding' '#'
    case 15061:                     // 'preceding-sibling' '#'
    case 15064:                     // 'processing-instruction' '#'
    case 15066:                     // 'rename' '#'
    case 15067:                     // 'replace' '#'
    case 15068:                     // 'return' '#'
    case 15069:                     // 'returning' '#'
    case 15070:                     // 'revalidation' '#'
    case 15072:                     // 'satisfies' '#'
    case 15073:                     // 'schema' '#'
    case 15074:                     // 'schema-attribute' '#'
    case 15075:                     // 'schema-element' '#'
    case 15076:                     // 'score' '#'
    case 15077:                     // 'self' '#'
    case 15082:                     // 'sliding' '#'
    case 15083:                     // 'some' '#'
    case 15084:                     // 'stable' '#'
    case 15085:                     // 'start' '#'
    case 15088:                     // 'strict' '#'
    case 15091:                     // 'switch' '#'
    case 15092:                     // 'text' '#'
    case 15096:                     // 'to' '#'
    case 15097:                     // 'treat' '#'
    case 15098:                     // 'try' '#'
    case 15099:                     // 'tumbling' '#'
    case 15100:                     // 'type' '#'
    case 15101:                     // 'typeswitch' '#'
    case 15102:                     // 'union' '#'
    case 15104:                     // 'unordered' '#'
    case 15105:                     // 'updating' '#'
    case 15108:                     // 'validate' '#'
    case 15109:                     // 'value' '#'
    case 15110:                     // 'variable' '#'
    case 15111:                     // 'version' '#'
    case 15114:                     // 'where' '#'
    case 15115:                     // 'while' '#'
    case 15118:                     // 'with' '#'
    case 15122:                     // 'xquery' '#'
    case 17414:                     // EQName^Token '('
    case 17478:                     // 'after' '('
    case 17480:                     // 'allowing' '('
    case 17481:                     // 'ancestor' '('
    case 17482:                     // 'ancestor-or-self' '('
    case 17483:                     // 'and' '('
    case 17487:                     // 'as' '('
    case 17488:                     // 'ascending' '('
    case 17489:                     // 'at' '('
    case 17491:                     // 'base-uri' '('
    case 17492:                     // 'before' '('
    case 17493:                     // 'boundary-space' '('
    case 17494:                     // 'break' '('
    case 17496:                     // 'case' '('
    case 17497:                     // 'cast' '('
    case 17498:                     // 'castable' '('
    case 17499:                     // 'catch' '('
    case 17501:                     // 'child' '('
    case 17502:                     // 'collation' '('
    case 17505:                     // 'constraint' '('
    case 17506:                     // 'construction' '('
    case 17509:                     // 'context' '('
    case 17510:                     // 'continue' '('
    case 17511:                     // 'copy' '('
    case 17512:                     // 'copy-namespaces' '('
    case 17513:                     // 'count' '('
    case 17514:                     // 'decimal-format' '('
    case 17516:                     // 'declare' '('
    case 17517:                     // 'default' '('
    case 17518:                     // 'delete' '('
    case 17519:                     // 'descendant' '('
    case 17520:                     // 'descendant-or-self' '('
    case 17521:                     // 'descending' '('
    case 17526:                     // 'div' '('
    case 17527:                     // 'document' '('
    case 17530:                     // 'else' '('
    case 17531:                     // 'empty' '('
    case 17533:                     // 'encoding' '('
    case 17534:                     // 'end' '('
    case 17536:                     // 'eq' '('
    case 17537:                     // 'every' '('
    case 17539:                     // 'except' '('
    case 17540:                     // 'exit' '('
    case 17541:                     // 'external' '('
    case 17542:                     // 'first' '('
    case 17543:                     // 'following' '('
    case 17544:                     // 'following-sibling' '('
    case 17545:                     // 'for' '('
    case 17549:                     // 'ft-option' '('
    case 17553:                     // 'function' '('
    case 17554:                     // 'ge' '('
    case 17556:                     // 'group' '('
    case 17558:                     // 'gt' '('
    case 17559:                     // 'idiv' '('
    case 17561:                     // 'import' '('
    case 17562:                     // 'in' '('
    case 17563:                     // 'index' '('
    case 17567:                     // 'insert' '('
    case 17568:                     // 'instance' '('
    case 17569:                     // 'integrity' '('
    case 17570:                     // 'intersect' '('
    case 17571:                     // 'into' '('
    case 17572:                     // 'is' '('
    case 17578:                     // 'last' '('
    case 17579:                     // 'lax' '('
    case 17580:                     // 'le' '('
    case 17582:                     // 'let' '('
    case 17584:                     // 'loop' '('
    case 17586:                     // 'lt' '('
    case 17588:                     // 'mod' '('
    case 17589:                     // 'modify' '('
    case 17590:                     // 'module' '('
    case 17592:                     // 'namespace' '('
    case 17594:                     // 'ne' '('
    case 17600:                     // 'nodes' '('
    case 17606:                     // 'only' '('
    case 17607:                     // 'option' '('
    case 17608:                     // 'or' '('
    case 17609:                     // 'order' '('
    case 17610:                     // 'ordered' '('
    case 17611:                     // 'ordering' '('
    case 17614:                     // 'parent' '('
    case 17620:                     // 'preceding' '('
    case 17621:                     // 'preceding-sibling' '('
    case 17626:                     // 'rename' '('
    case 17627:                     // 'replace' '('
    case 17628:                     // 'return' '('
    case 17629:                     // 'returning' '('
    case 17630:                     // 'revalidation' '('
    case 17632:                     // 'satisfies' '('
    case 17633:                     // 'schema' '('
    case 17636:                     // 'score' '('
    case 17637:                     // 'self' '('
    case 17642:                     // 'sliding' '('
    case 17643:                     // 'some' '('
    case 17644:                     // 'stable' '('
    case 17645:                     // 'start' '('
    case 17648:                     // 'strict' '('
    case 17656:                     // 'to' '('
    case 17657:                     // 'treat' '('
    case 17658:                     // 'try' '('
    case 17659:                     // 'tumbling' '('
    case 17660:                     // 'type' '('
    case 17662:                     // 'union' '('
    case 17664:                     // 'unordered' '('
    case 17665:                     // 'updating' '('
    case 17668:                     // 'validate' '('
    case 17669:                     // 'value' '('
    case 17670:                     // 'variable' '('
    case 17671:                     // 'version' '('
    case 17674:                     // 'where' '('
    case 17675:                     // 'while' '('
    case 17678:                     // 'with' '('
    case 17682:                     // 'xquery' '('
    case 36946:                     // 'attribute' 'allowing'
    case 36985:                     // 'element' 'allowing'
    case 37048:                     // 'namespace' 'allowing'
    case 37080:                     // 'processing-instruction' 'allowing'
    case 37458:                     // 'attribute' 'ancestor'
    case 37497:                     // 'element' 'ancestor'
    case 37560:                     // 'namespace' 'ancestor'
    case 37592:                     // 'processing-instruction' 'ancestor'
    case 37970:                     // 'attribute' 'ancestor-or-self'
    case 38009:                     // 'element' 'ancestor-or-self'
    case 38072:                     // 'namespace' 'ancestor-or-self'
    case 38104:                     // 'processing-instruction' 'ancestor-or-self'
    case 42066:                     // 'attribute' 'attribute'
    case 42105:                     // 'element' 'attribute'
    case 42168:                     // 'namespace' 'attribute'
    case 42200:                     // 'processing-instruction' 'attribute'
    case 42578:                     // 'attribute' 'base-uri'
    case 42617:                     // 'element' 'base-uri'
    case 42680:                     // 'namespace' 'base-uri'
    case 42712:                     // 'processing-instruction' 'base-uri'
    case 43602:                     // 'attribute' 'boundary-space'
    case 43641:                     // 'element' 'boundary-space'
    case 43704:                     // 'namespace' 'boundary-space'
    case 43736:                     // 'processing-instruction' 'boundary-space'
    case 44114:                     // 'attribute' 'break'
    case 44153:                     // 'element' 'break'
    case 44216:                     // 'namespace' 'break'
    case 44248:                     // 'processing-instruction' 'break'
    case 46674:                     // 'attribute' 'catch'
    case 46713:                     // 'element' 'catch'
    case 46776:                     // 'namespace' 'catch'
    case 46808:                     // 'processing-instruction' 'catch'
    case 47698:                     // 'attribute' 'child'
    case 47737:                     // 'element' 'child'
    case 47800:                     // 'namespace' 'child'
    case 47832:                     // 'processing-instruction' 'child'
    case 49234:                     // 'attribute' 'comment'
    case 49273:                     // 'element' 'comment'
    case 49336:                     // 'namespace' 'comment'
    case 49368:                     // 'processing-instruction' 'comment'
    case 49746:                     // 'attribute' 'constraint'
    case 49785:                     // 'element' 'constraint'
    case 49848:                     // 'namespace' 'constraint'
    case 49880:                     // 'processing-instruction' 'constraint'
    case 50258:                     // 'attribute' 'construction'
    case 50297:                     // 'element' 'construction'
    case 50360:                     // 'namespace' 'construction'
    case 50392:                     // 'processing-instruction' 'construction'
    case 51794:                     // 'attribute' 'context'
    case 51833:                     // 'element' 'context'
    case 51896:                     // 'namespace' 'context'
    case 51928:                     // 'processing-instruction' 'context'
    case 52306:                     // 'attribute' 'continue'
    case 52345:                     // 'element' 'continue'
    case 52408:                     // 'namespace' 'continue'
    case 52440:                     // 'processing-instruction' 'continue'
    case 52818:                     // 'attribute' 'copy'
    case 52857:                     // 'element' 'copy'
    case 52920:                     // 'namespace' 'copy'
    case 52952:                     // 'processing-instruction' 'copy'
    case 53330:                     // 'attribute' 'copy-namespaces'
    case 53369:                     // 'element' 'copy-namespaces'
    case 53432:                     // 'namespace' 'copy-namespaces'
    case 53464:                     // 'processing-instruction' 'copy-namespaces'
    case 54354:                     // 'attribute' 'decimal-format'
    case 54393:                     // 'element' 'decimal-format'
    case 54456:                     // 'namespace' 'decimal-format'
    case 54488:                     // 'processing-instruction' 'decimal-format'
    case 55378:                     // 'attribute' 'declare'
    case 55417:                     // 'element' 'declare'
    case 55480:                     // 'namespace' 'declare'
    case 55512:                     // 'processing-instruction' 'declare'
    case 56402:                     // 'attribute' 'delete'
    case 56441:                     // 'element' 'delete'
    case 56504:                     // 'namespace' 'delete'
    case 56536:                     // 'processing-instruction' 'delete'
    case 56914:                     // 'attribute' 'descendant'
    case 56953:                     // 'element' 'descendant'
    case 57016:                     // 'namespace' 'descendant'
    case 57048:                     // 'processing-instruction' 'descendant'
    case 57426:                     // 'attribute' 'descendant-or-self'
    case 57465:                     // 'element' 'descendant-or-self'
    case 57528:                     // 'namespace' 'descendant-or-self'
    case 57560:                     // 'processing-instruction' 'descendant-or-self'
    case 61010:                     // 'attribute' 'document'
    case 61049:                     // 'element' 'document'
    case 61112:                     // 'namespace' 'document'
    case 61144:                     // 'processing-instruction' 'document'
    case 61522:                     // 'attribute' 'document-node'
    case 61561:                     // 'element' 'document-node'
    case 61624:                     // 'namespace' 'document-node'
    case 61656:                     // 'processing-instruction' 'document-node'
    case 62034:                     // 'attribute' 'element'
    case 62073:                     // 'element' 'element'
    case 62136:                     // 'namespace' 'element'
    case 62168:                     // 'processing-instruction' 'element'
    case 63570:                     // 'attribute' 'empty-sequence'
    case 63609:                     // 'element' 'empty-sequence'
    case 63672:                     // 'namespace' 'empty-sequence'
    case 63704:                     // 'processing-instruction' 'empty-sequence'
    case 64082:                     // 'attribute' 'encoding'
    case 64121:                     // 'element' 'encoding'
    case 64184:                     // 'namespace' 'encoding'
    case 64216:                     // 'processing-instruction' 'encoding'
    case 66130:                     // 'attribute' 'every'
    case 66169:                     // 'element' 'every'
    case 66232:                     // 'namespace' 'every'
    case 66264:                     // 'processing-instruction' 'every'
    case 67666:                     // 'attribute' 'exit'
    case 67705:                     // 'element' 'exit'
    case 67768:                     // 'namespace' 'exit'
    case 67800:                     // 'processing-instruction' 'exit'
    case 68178:                     // 'attribute' 'external'
    case 68217:                     // 'element' 'external'
    case 68280:                     // 'namespace' 'external'
    case 68312:                     // 'processing-instruction' 'external'
    case 68690:                     // 'attribute' 'first'
    case 68729:                     // 'element' 'first'
    case 68792:                     // 'namespace' 'first'
    case 68824:                     // 'processing-instruction' 'first'
    case 69202:                     // 'attribute' 'following'
    case 69241:                     // 'element' 'following'
    case 69304:                     // 'namespace' 'following'
    case 69336:                     // 'processing-instruction' 'following'
    case 69714:                     // 'attribute' 'following-sibling'
    case 69753:                     // 'element' 'following-sibling'
    case 69816:                     // 'namespace' 'following-sibling'
    case 69848:                     // 'processing-instruction' 'following-sibling'
    case 72274:                     // 'attribute' 'ft-option'
    case 72313:                     // 'element' 'ft-option'
    case 72376:                     // 'namespace' 'ft-option'
    case 72408:                     // 'processing-instruction' 'ft-option'
    case 74322:                     // 'attribute' 'function'
    case 74361:                     // 'element' 'function'
    case 74424:                     // 'namespace' 'function'
    case 74456:                     // 'processing-instruction' 'function'
    case 77906:                     // 'attribute' 'if'
    case 77945:                     // 'element' 'if'
    case 78008:                     // 'namespace' 'if'
    case 78040:                     // 'processing-instruction' 'if'
    case 78418:                     // 'attribute' 'import'
    case 78457:                     // 'element' 'import'
    case 78520:                     // 'namespace' 'import'
    case 78552:                     // 'processing-instruction' 'import'
    case 78930:                     // 'attribute' 'in'
    case 78969:                     // 'element' 'in'
    case 79032:                     // 'namespace' 'in'
    case 79064:                     // 'processing-instruction' 'in'
    case 79442:                     // 'attribute' 'index'
    case 79481:                     // 'element' 'index'
    case 79544:                     // 'namespace' 'index'
    case 79576:                     // 'processing-instruction' 'index'
    case 81490:                     // 'attribute' 'insert'
    case 81529:                     // 'element' 'insert'
    case 81592:                     // 'namespace' 'insert'
    case 81624:                     // 'processing-instruction' 'insert'
    case 82514:                     // 'attribute' 'integrity'
    case 82553:                     // 'element' 'integrity'
    case 82616:                     // 'namespace' 'integrity'
    case 82648:                     // 'processing-instruction' 'integrity'
    case 84562:                     // 'attribute' 'item'
    case 84601:                     // 'element' 'item'
    case 84664:                     // 'namespace' 'item'
    case 84696:                     // 'processing-instruction' 'item'
    case 87122:                     // 'attribute' 'last'
    case 87161:                     // 'element' 'last'
    case 87224:                     // 'namespace' 'last'
    case 87256:                     // 'processing-instruction' 'last'
    case 87634:                     // 'attribute' 'lax'
    case 87673:                     // 'element' 'lax'
    case 87736:                     // 'namespace' 'lax'
    case 87768:                     // 'processing-instruction' 'lax'
    case 90194:                     // 'attribute' 'loop'
    case 90233:                     // 'element' 'loop'
    case 90296:                     // 'namespace' 'loop'
    case 90328:                     // 'processing-instruction' 'loop'
    case 93266:                     // 'attribute' 'module'
    case 93305:                     // 'element' 'module'
    case 93368:                     // 'namespace' 'module'
    case 93400:                     // 'processing-instruction' 'module'
    case 94290:                     // 'attribute' 'namespace'
    case 94329:                     // 'element' 'namespace'
    case 94392:                     // 'namespace' 'namespace'
    case 94424:                     // 'processing-instruction' 'namespace'
    case 94802:                     // 'attribute' 'namespace-node'
    case 94841:                     // 'element' 'namespace-node'
    case 94904:                     // 'namespace' 'namespace-node'
    case 94936:                     // 'processing-instruction' 'namespace-node'
    case 97874:                     // 'attribute' 'node'
    case 97913:                     // 'element' 'node'
    case 97976:                     // 'namespace' 'node'
    case 98008:                     // 'processing-instruction' 'node'
    case 98386:                     // 'attribute' 'nodes'
    case 98425:                     // 'element' 'nodes'
    case 98488:                     // 'namespace' 'nodes'
    case 98520:                     // 'processing-instruction' 'nodes'
    case 101970:                    // 'attribute' 'option'
    case 102009:                    // 'element' 'option'
    case 102072:                    // 'namespace' 'option'
    case 102104:                    // 'processing-instruction' 'option'
    case 103506:                    // 'attribute' 'ordered'
    case 103545:                    // 'element' 'ordered'
    case 103608:                    // 'namespace' 'ordered'
    case 103640:                    // 'processing-instruction' 'ordered'
    case 104018:                    // 'attribute' 'ordering'
    case 104057:                    // 'element' 'ordering'
    case 104120:                    // 'namespace' 'ordering'
    case 104152:                    // 'processing-instruction' 'ordering'
    case 105554:                    // 'attribute' 'parent'
    case 105593:                    // 'element' 'parent'
    case 105656:                    // 'namespace' 'parent'
    case 105688:                    // 'processing-instruction' 'parent'
    case 108626:                    // 'attribute' 'preceding'
    case 108665:                    // 'element' 'preceding'
    case 108728:                    // 'namespace' 'preceding'
    case 108760:                    // 'processing-instruction' 'preceding'
    case 109138:                    // 'attribute' 'preceding-sibling'
    case 109177:                    // 'element' 'preceding-sibling'
    case 109240:                    // 'namespace' 'preceding-sibling'
    case 109272:                    // 'processing-instruction' 'preceding-sibling'
    case 110674:                    // 'attribute' 'processing-instruction'
    case 110713:                    // 'element' 'processing-instruction'
    case 110776:                    // 'namespace' 'processing-instruction'
    case 110808:                    // 'processing-instruction' 'processing-instruction'
    case 111698:                    // 'attribute' 'rename'
    case 111737:                    // 'element' 'rename'
    case 111800:                    // 'namespace' 'rename'
    case 111832:                    // 'processing-instruction' 'rename'
    case 112210:                    // 'attribute' 'replace'
    case 112249:                    // 'element' 'replace'
    case 112312:                    // 'namespace' 'replace'
    case 112344:                    // 'processing-instruction' 'replace'
    case 113234:                    // 'attribute' 'returning'
    case 113273:                    // 'element' 'returning'
    case 113336:                    // 'namespace' 'returning'
    case 113368:                    // 'processing-instruction' 'returning'
    case 113746:                    // 'attribute' 'revalidation'
    case 113785:                    // 'element' 'revalidation'
    case 113848:                    // 'namespace' 'revalidation'
    case 113880:                    // 'processing-instruction' 'revalidation'
    case 115282:                    // 'attribute' 'schema'
    case 115321:                    // 'element' 'schema'
    case 115384:                    // 'namespace' 'schema'
    case 115416:                    // 'processing-instruction' 'schema'
    case 115794:                    // 'attribute' 'schema-attribute'
    case 115833:                    // 'element' 'schema-attribute'
    case 115896:                    // 'namespace' 'schema-attribute'
    case 115928:                    // 'processing-instruction' 'schema-attribute'
    case 116306:                    // 'attribute' 'schema-element'
    case 116345:                    // 'element' 'schema-element'
    case 116408:                    // 'namespace' 'schema-element'
    case 116440:                    // 'processing-instruction' 'schema-element'
    case 116818:                    // 'attribute' 'score'
    case 116857:                    // 'element' 'score'
    case 116920:                    // 'namespace' 'score'
    case 116952:                    // 'processing-instruction' 'score'
    case 117330:                    // 'attribute' 'self'
    case 117369:                    // 'element' 'self'
    case 117432:                    // 'namespace' 'self'
    case 117464:                    // 'processing-instruction' 'self'
    case 119890:                    // 'attribute' 'sliding'
    case 119929:                    // 'element' 'sliding'
    case 119992:                    // 'namespace' 'sliding'
    case 120024:                    // 'processing-instruction' 'sliding'
    case 120402:                    // 'attribute' 'some'
    case 120441:                    // 'element' 'some'
    case 120504:                    // 'namespace' 'some'
    case 120536:                    // 'processing-instruction' 'some'
    case 122962:                    // 'attribute' 'strict'
    case 123001:                    // 'element' 'strict'
    case 123064:                    // 'namespace' 'strict'
    case 123096:                    // 'processing-instruction' 'strict'
    case 124498:                    // 'attribute' 'switch'
    case 124537:                    // 'element' 'switch'
    case 124600:                    // 'namespace' 'switch'
    case 124632:                    // 'processing-instruction' 'switch'
    case 125010:                    // 'attribute' 'text'
    case 125049:                    // 'element' 'text'
    case 125112:                    // 'namespace' 'text'
    case 125144:                    // 'processing-instruction' 'text'
    case 128082:                    // 'attribute' 'try'
    case 128121:                    // 'element' 'try'
    case 128184:                    // 'namespace' 'try'
    case 128216:                    // 'processing-instruction' 'try'
    case 128594:                    // 'attribute' 'tumbling'
    case 128633:                    // 'element' 'tumbling'
    case 128696:                    // 'namespace' 'tumbling'
    case 128728:                    // 'processing-instruction' 'tumbling'
    case 129106:                    // 'attribute' 'type'
    case 129145:                    // 'element' 'type'
    case 129208:                    // 'namespace' 'type'
    case 129240:                    // 'processing-instruction' 'type'
    case 129618:                    // 'attribute' 'typeswitch'
    case 129657:                    // 'element' 'typeswitch'
    case 129720:                    // 'namespace' 'typeswitch'
    case 129752:                    // 'processing-instruction' 'typeswitch'
    case 131154:                    // 'attribute' 'unordered'
    case 131193:                    // 'element' 'unordered'
    case 131256:                    // 'namespace' 'unordered'
    case 131288:                    // 'processing-instruction' 'unordered'
    case 131666:                    // 'attribute' 'updating'
    case 131705:                    // 'element' 'updating'
    case 131768:                    // 'namespace' 'updating'
    case 131800:                    // 'processing-instruction' 'updating'
    case 133202:                    // 'attribute' 'validate'
    case 133241:                    // 'element' 'validate'
    case 133304:                    // 'namespace' 'validate'
    case 133336:                    // 'processing-instruction' 'validate'
    case 133714:                    // 'attribute' 'value'
    case 133753:                    // 'element' 'value'
    case 133816:                    // 'namespace' 'value'
    case 133848:                    // 'processing-instruction' 'value'
    case 134226:                    // 'attribute' 'variable'
    case 134265:                    // 'element' 'variable'
    case 134328:                    // 'namespace' 'variable'
    case 134360:                    // 'processing-instruction' 'variable'
    case 134738:                    // 'attribute' 'version'
    case 134777:                    // 'element' 'version'
    case 134840:                    // 'namespace' 'version'
    case 134872:                    // 'processing-instruction' 'version'
    case 136786:                    // 'attribute' 'while'
    case 136825:                    // 'element' 'while'
    case 136888:                    // 'namespace' 'while'
    case 136920:                    // 'processing-instruction' 'while'
    case 140370:                    // 'attribute' 'xquery'
    case 140409:                    // 'element' 'xquery'
    case 140472:                    // 'namespace' 'xquery'
    case 140504:                    // 'processing-instruction' 'xquery'
    case 141394:                    // 'attribute' '{'
    case 141408:                    // 'comment' '{'
    case 141431:                    // 'document' '{'
    case 141433:                    // 'element' '{'
    case 141496:                    // 'namespace' '{'
    case 141514:                    // 'ordered' '{'
    case 141528:                    // 'processing-instruction' '{'
    case 141556:                    // 'text' '{'
    case 141568:                    // 'unordered' '{'
      try_PostfixExpr();
      break;
    default:
      try_AxisStep();
    }
  }

  function parse_AxisStep()
  {
    startNonterminal("AxisStep");
    switch (l1)
    {
    case 73:                        // 'ancestor'
    case 74:                        // 'ancestor-or-self'
    case 206:                       // 'parent'
    case 212:                       // 'preceding'
    case 213:                       // 'preceding-sibling'
      lookahead2W(293);             // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' |
                                    // '::' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' | 'after' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 45:                        // '..'
    case 26185:                     // 'ancestor' '::'
    case 26186:                     // 'ancestor-or-self' '::'
    case 26318:                     // 'parent' '::'
    case 26324:                     // 'preceding' '::'
    case 26325:                     // 'preceding-sibling' '::'
      parse_ReverseStep();
      break;
    default:
      parse_ForwardStep();
    }
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    parse_PredicateList();
    endNonterminal("AxisStep");
  }

  function try_AxisStep()
  {
    switch (l1)
    {
    case 73:                        // 'ancestor'
    case 74:                        // 'ancestor-or-self'
    case 206:                       // 'parent'
    case 212:                       // 'preceding'
    case 213:                       // 'preceding-sibling'
      lookahead2W(293);             // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' |
                                    // '::' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' | 'after' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 45:                        // '..'
    case 26185:                     // 'ancestor' '::'
    case 26186:                     // 'ancestor-or-self' '::'
    case 26318:                     // 'parent' '::'
    case 26324:                     // 'preceding' '::'
    case 26325:                     // 'preceding-sibling' '::'
      try_ReverseStep();
      break;
    default:
      try_ForwardStep();
    }
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    try_PredicateList();
  }

  function parse_ForwardStep()
  {
    startNonterminal("ForwardStep");
    switch (l1)
    {
    case 82:                        // 'attribute'
      lookahead2W(296);             // S^WS | EOF | '!' | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | '::' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
      break;
    case 93:                        // 'child'
    case 111:                       // 'descendant'
    case 112:                       // 'descendant-or-self'
    case 135:                       // 'following'
    case 136:                       // 'following-sibling'
    case 229:                       // 'self'
      lookahead2W(293);             // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' |
                                    // '::' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' | 'after' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 26194:                     // 'attribute' '::'
    case 26205:                     // 'child' '::'
    case 26223:                     // 'descendant' '::'
    case 26224:                     // 'descendant-or-self' '::'
    case 26247:                     // 'following' '::'
    case 26248:                     // 'following-sibling' '::'
    case 26341:                     // 'self' '::'
      parse_ForwardAxis();
      lookahead1W(37);              // EPSILON | S^WS | '(:'
      parse_NodeTest();
      break;
    default:
      parse_AbbrevForwardStep();
    }
    endNonterminal("ForwardStep");
  }

  function try_ForwardStep()
  {
    switch (l1)
    {
    case 82:                        // 'attribute'
      lookahead2W(296);             // S^WS | EOF | '!' | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | '::' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
      break;
    case 93:                        // 'child'
    case 111:                       // 'descendant'
    case 112:                       // 'descendant-or-self'
    case 135:                       // 'following'
    case 136:                       // 'following-sibling'
    case 229:                       // 'self'
      lookahead2W(293);             // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' |
                                    // '::' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' | 'after' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 26194:                     // 'attribute' '::'
    case 26205:                     // 'child' '::'
    case 26223:                     // 'descendant' '::'
    case 26224:                     // 'descendant-or-self' '::'
    case 26247:                     // 'following' '::'
    case 26248:                     // 'following-sibling' '::'
    case 26341:                     // 'self' '::'
      try_ForwardAxis();
      lookahead1W(37);              // EPSILON | S^WS | '(:'
      try_NodeTest();
      break;
    default:
      try_AbbrevForwardStep();
    }
  }

  function parse_ForwardAxis()
  {
    startNonterminal("ForwardAxis");
    switch (l1)
    {
    case 93:                        // 'child'
      shift(93);                    // 'child'
      lookahead1W(51);              // S^WS | '(:' | '::'
      shift(51);                    // '::'
      break;
    case 111:                       // 'descendant'
      shift(111);                   // 'descendant'
      lookahead1W(51);              // S^WS | '(:' | '::'
      shift(51);                    // '::'
      break;
    case 82:                        // 'attribute'
      shift(82);                    // 'attribute'
      lookahead1W(51);              // S^WS | '(:' | '::'
      shift(51);                    // '::'
      break;
    case 229:                       // 'self'
      shift(229);                   // 'self'
      lookahead1W(51);              // S^WS | '(:' | '::'
      shift(51);                    // '::'
      break;
    case 112:                       // 'descendant-or-self'
      shift(112);                   // 'descendant-or-self'
      lookahead1W(51);              // S^WS | '(:' | '::'
      shift(51);                    // '::'
      break;
    case 136:                       // 'following-sibling'
      shift(136);                   // 'following-sibling'
      lookahead1W(51);              // S^WS | '(:' | '::'
      shift(51);                    // '::'
      break;
    default:
      shift(135);                   // 'following'
      lookahead1W(51);              // S^WS | '(:' | '::'
      shift(51);                    // '::'
    }
    endNonterminal("ForwardAxis");
  }

  function try_ForwardAxis()
  {
    switch (l1)
    {
    case 93:                        // 'child'
      shiftT(93);                   // 'child'
      lookahead1W(51);              // S^WS | '(:' | '::'
      shiftT(51);                   // '::'
      break;
    case 111:                       // 'descendant'
      shiftT(111);                  // 'descendant'
      lookahead1W(51);              // S^WS | '(:' | '::'
      shiftT(51);                   // '::'
      break;
    case 82:                        // 'attribute'
      shiftT(82);                   // 'attribute'
      lookahead1W(51);              // S^WS | '(:' | '::'
      shiftT(51);                   // '::'
      break;
    case 229:                       // 'self'
      shiftT(229);                  // 'self'
      lookahead1W(51);              // S^WS | '(:' | '::'
      shiftT(51);                   // '::'
      break;
    case 112:                       // 'descendant-or-self'
      shiftT(112);                  // 'descendant-or-self'
      lookahead1W(51);              // S^WS | '(:' | '::'
      shiftT(51);                   // '::'
      break;
    case 136:                       // 'following-sibling'
      shiftT(136);                  // 'following-sibling'
      lookahead1W(51);              // S^WS | '(:' | '::'
      shiftT(51);                   // '::'
      break;
    default:
      shiftT(135);                  // 'following'
      lookahead1W(51);              // S^WS | '(:' | '::'
      shiftT(51);                   // '::'
    }
  }

  function parse_AbbrevForwardStep()
  {
    startNonterminal("AbbrevForwardStep");
    if (l1 == 66)                   // '@'
    {
      shift(66);                    // '@'
    }
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    parse_NodeTest();
    endNonterminal("AbbrevForwardStep");
  }

  function try_AbbrevForwardStep()
  {
    if (l1 == 66)                   // '@'
    {
      shiftT(66);                   // '@'
    }
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    try_NodeTest();
  }

  function parse_ReverseStep()
  {
    startNonterminal("ReverseStep");
    switch (l1)
    {
    case 45:                        // '..'
      parse_AbbrevReverseStep();
      break;
    default:
      parse_ReverseAxis();
      lookahead1W(37);              // EPSILON | S^WS | '(:'
      parse_NodeTest();
    }
    endNonterminal("ReverseStep");
  }

  function try_ReverseStep()
  {
    switch (l1)
    {
    case 45:                        // '..'
      try_AbbrevReverseStep();
      break;
    default:
      try_ReverseAxis();
      lookahead1W(37);              // EPSILON | S^WS | '(:'
      try_NodeTest();
    }
  }

  function parse_ReverseAxis()
  {
    startNonterminal("ReverseAxis");
    switch (l1)
    {
    case 206:                       // 'parent'
      shift(206);                   // 'parent'
      lookahead1W(51);              // S^WS | '(:' | '::'
      shift(51);                    // '::'
      break;
    case 73:                        // 'ancestor'
      shift(73);                    // 'ancestor'
      lookahead1W(51);              // S^WS | '(:' | '::'
      shift(51);                    // '::'
      break;
    case 213:                       // 'preceding-sibling'
      shift(213);                   // 'preceding-sibling'
      lookahead1W(51);              // S^WS | '(:' | '::'
      shift(51);                    // '::'
      break;
    case 212:                       // 'preceding'
      shift(212);                   // 'preceding'
      lookahead1W(51);              // S^WS | '(:' | '::'
      shift(51);                    // '::'
      break;
    default:
      shift(74);                    // 'ancestor-or-self'
      lookahead1W(51);              // S^WS | '(:' | '::'
      shift(51);                    // '::'
    }
    endNonterminal("ReverseAxis");
  }

  function try_ReverseAxis()
  {
    switch (l1)
    {
    case 206:                       // 'parent'
      shiftT(206);                  // 'parent'
      lookahead1W(51);              // S^WS | '(:' | '::'
      shiftT(51);                   // '::'
      break;
    case 73:                        // 'ancestor'
      shiftT(73);                   // 'ancestor'
      lookahead1W(51);              // S^WS | '(:' | '::'
      shiftT(51);                   // '::'
      break;
    case 213:                       // 'preceding-sibling'
      shiftT(213);                  // 'preceding-sibling'
      lookahead1W(51);              // S^WS | '(:' | '::'
      shiftT(51);                   // '::'
      break;
    case 212:                       // 'preceding'
      shiftT(212);                  // 'preceding'
      lookahead1W(51);              // S^WS | '(:' | '::'
      shiftT(51);                   // '::'
      break;
    default:
      shiftT(74);                   // 'ancestor-or-self'
      lookahead1W(51);              // S^WS | '(:' | '::'
      shiftT(51);                   // '::'
    }
  }

  function parse_AbbrevReverseStep()
  {
    startNonterminal("AbbrevReverseStep");
    shift(45);                      // '..'
    endNonterminal("AbbrevReverseStep");
  }

  function try_AbbrevReverseStep()
  {
    shiftT(45);                     // '..'
  }

  function parse_NodeTest()
  {
    startNonterminal("NodeTest");
    lookahead1(303);                // Wildcard | EQName^Token | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    switch (l1)
    {
    case 82:                        // 'attribute'
    case 96:                        // 'comment'
    case 120:                       // 'document-node'
    case 121:                       // 'element'
    case 185:                       // 'namespace-node'
    case 191:                       // 'node'
    case 216:                       // 'processing-instruction'
    case 226:                       // 'schema-attribute'
    case 227:                       // 'schema-element'
    case 244:                       // 'text'
      lookahead2W(292);             // S^WS | EOF | '!' | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' | 'after' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 17490:                     // 'attribute' '('
    case 17504:                     // 'comment' '('
    case 17528:                     // 'document-node' '('
    case 17529:                     // 'element' '('
    case 17593:                     // 'namespace-node' '('
    case 17599:                     // 'node' '('
    case 17624:                     // 'processing-instruction' '('
    case 17634:                     // 'schema-attribute' '('
    case 17635:                     // 'schema-element' '('
    case 17652:                     // 'text' '('
      parse_KindTest();
      break;
    default:
      parse_NameTest();
    }
    endNonterminal("NodeTest");
  }

  function try_NodeTest()
  {
    lookahead1(303);                // Wildcard | EQName^Token | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    switch (l1)
    {
    case 82:                        // 'attribute'
    case 96:                        // 'comment'
    case 120:                       // 'document-node'
    case 121:                       // 'element'
    case 185:                       // 'namespace-node'
    case 191:                       // 'node'
    case 216:                       // 'processing-instruction'
    case 226:                       // 'schema-attribute'
    case 227:                       // 'schema-element'
    case 244:                       // 'text'
      lookahead2W(292);             // S^WS | EOF | '!' | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' | 'after' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 17490:                     // 'attribute' '('
    case 17504:                     // 'comment' '('
    case 17528:                     // 'document-node' '('
    case 17529:                     // 'element' '('
    case 17593:                     // 'namespace-node' '('
    case 17599:                     // 'node' '('
    case 17624:                     // 'processing-instruction' '('
    case 17634:                     // 'schema-attribute' '('
    case 17635:                     // 'schema-element' '('
    case 17652:                     // 'text' '('
      try_KindTest();
      break;
    default:
      try_NameTest();
    }
  }

  function parse_NameTest()
  {
    startNonterminal("NameTest");
    lookahead1(303);                // Wildcard | EQName^Token | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    switch (l1)
    {
    case 5:                         // Wildcard
      shift(5);                     // Wildcard
      break;
    default:
      parse_EQName();
    }
    endNonterminal("NameTest");
  }

  function try_NameTest()
  {
    lookahead1(303);                // Wildcard | EQName^Token | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    switch (l1)
    {
    case 5:                         // Wildcard
      shiftT(5);                    // Wildcard
      break;
    default:
      try_EQName();
    }
  }

  function parse_PostfixExpr()
  {
    startNonterminal("PostfixExpr");
    parse_PrimaryExpr();
    for (;;)
    {
      lookahead1W(292);             // S^WS | EOF | '!' | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' | 'after' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
      if (l1 != 34                  // '('
       && l1 != 68)                 // '['
      {
        break;
      }
      switch (l1)
      {
      case 68:                      // '['
        parse_Predicate();
        break;
      default:
        parse_ArgumentList();
      }
    }
    endNonterminal("PostfixExpr");
  }

  function try_PostfixExpr()
  {
    try_PrimaryExpr();
    for (;;)
    {
      lookahead1W(292);             // S^WS | EOF | '!' | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' | 'after' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
      if (l1 != 34                  // '('
       && l1 != 68)                 // '['
      {
        break;
      }
      switch (l1)
      {
      case 68:                      // '['
        try_Predicate();
        break;
      default:
        try_ArgumentList();
      }
    }
  }

  function parse_ArgumentList()
  {
    startNonterminal("ArgumentList");
    lookahead1(7);                  // '('
    shift(34);                      // '('
    lookahead1W(330);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | ')' | '+' | '-' | '.' |
                                    // '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    if (l1 != 37)                   // ')'
    {
      parse_Argument();
      for (;;)
      {
        lookahead1W(129);           // S^WS | '(:' | ')' | ','
        if (l1 != 41)               // ','
        {
          break;
        }
        shift(41);                  // ','
        lookahead1W(37);            // EPSILON | S^WS | '(:'
        parse_Argument();
      }
    }
    lookahead1W(47);                // S^WS | '(:' | ')'
    shift(37);                      // ')'
    endNonterminal("ArgumentList");
  }

  function try_ArgumentList()
  {
    lookahead1(7);                  // '('
    shiftT(34);                     // '('
    lookahead1W(330);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | ')' | '+' | '-' | '.' |
                                    // '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    if (l1 != 37)                   // ')'
    {
      try_Argument();
      for (;;)
      {
        lookahead1W(129);           // S^WS | '(:' | ')' | ','
        if (l1 != 41)               // ','
        {
          break;
        }
        shiftT(41);                 // ','
        lookahead1W(37);            // EPSILON | S^WS | '(:'
        try_Argument();
      }
    }
    lookahead1W(47);                // S^WS | '(:' | ')'
    shiftT(37);                     // ')'
  }

  function parse_PredicateList()
  {
    startNonterminal("PredicateList");
    for (;;)
    {
      lookahead1W(289);             // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' | 'after' | 'and' |
                                    // 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
      if (l1 != 68)                 // '['
      {
        break;
      }
      parse_Predicate();
    }
    endNonterminal("PredicateList");
  }

  function try_PredicateList()
  {
    for (;;)
    {
      lookahead1W(289);             // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' | 'after' | 'and' |
                                    // 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
      if (l1 != 68)                 // '['
      {
        break;
      }
      try_Predicate();
    }
  }

  function parse_Predicate()
  {
    startNonterminal("Predicate");
    shift(68);                      // '['
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    parse_Expr();
    lookahead1W(55);                // S^WS | '(:' | ']'
    shift(69);                      // ']'
    endNonterminal("Predicate");
  }

  function try_Predicate()
  {
    shiftT(68);                     // '['
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    try_Expr();
    lookahead1W(55);                // S^WS | '(:' | ']'
    shiftT(69);                     // ']'
  }

  function parse_Literal()
  {
    startNonterminal("Literal");
    lookahead1(120);                // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral
    switch (l1)
    {
    case 11:                        // StringLiteral
      shift(11);                    // StringLiteral
      break;
    default:
      parse_NumericLiteral();
    }
    endNonterminal("Literal");
  }

  function try_Literal()
  {
    lookahead1(120);                // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral
    switch (l1)
    {
    case 11:                        // StringLiteral
      shiftT(11);                   // StringLiteral
      break;
    default:
      try_NumericLiteral();
    }
  }

  function parse_NumericLiteral()
  {
    startNonterminal("NumericLiteral");
    switch (l1)
    {
    case 8:                         // IntegerLiteral
      shift(8);                     // IntegerLiteral
      break;
    case 9:                         // DecimalLiteral
      shift(9);                     // DecimalLiteral
      break;
    default:
      shift(10);                    // DoubleLiteral
    }
    endNonterminal("NumericLiteral");
  }

  function try_NumericLiteral()
  {
    switch (l1)
    {
    case 8:                         // IntegerLiteral
      shiftT(8);                    // IntegerLiteral
      break;
    case 9:                         // DecimalLiteral
      shiftT(9);                    // DecimalLiteral
      break;
    default:
      shiftT(10);                   // DoubleLiteral
    }
  }

  function parse_VarRef()
  {
    startNonterminal("VarRef");
    lookahead1(6);                  // '$'
    shift(31);                      // '$'
    lookahead1W(305);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    parse_VarName();
    endNonterminal("VarRef");
  }

  function try_VarRef()
  {
    lookahead1(6);                  // '$'
    shiftT(31);                     // '$'
    lookahead1W(305);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    try_VarName();
  }

  function parse_VarName()
  {
    startNonterminal("VarName");
    parse_EQName();
    endNonterminal("VarName");
  }

  function try_VarName()
  {
    try_EQName();
  }

  function parse_ParenthesizedExpr()
  {
    startNonterminal("ParenthesizedExpr");
    shift(34);                      // '('
    lookahead1W(324);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | ')' | '+' | '-' | '.' |
                                    // '..' | '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    if (l1 != 37)                   // ')'
    {
      parse_Expr();
    }
    lookahead1W(47);                // S^WS | '(:' | ')'
    shift(37);                      // ')'
    endNonterminal("ParenthesizedExpr");
  }

  function try_ParenthesizedExpr()
  {
    shiftT(34);                     // '('
    lookahead1W(324);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | ')' | '+' | '-' | '.' |
                                    // '..' | '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    if (l1 != 37)                   // ')'
    {
      try_Expr();
    }
    lookahead1W(47);                // S^WS | '(:' | ')'
    shiftT(37);                     // ')'
  }

  function parse_ContextItemExpr()
  {
    startNonterminal("ContextItemExpr");
    shift(44);                      // '.'
    endNonterminal("ContextItemExpr");
  }

  function try_ContextItemExpr()
  {
    shiftT(44);                     // '.'
  }

  function parse_OrderedExpr()
  {
    startNonterminal("OrderedExpr");
    shift(202);                     // 'ordered'
    lookahead1W(113);               // S^WS | '(:' | '{'
    shift(276);                     // '{'
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    parse_Expr();
    lookahead1W(115);               // S^WS | '(:' | '}'
    shift(282);                     // '}'
    endNonterminal("OrderedExpr");
  }

  function try_OrderedExpr()
  {
    shiftT(202);                    // 'ordered'
    lookahead1W(113);               // S^WS | '(:' | '{'
    shiftT(276);                    // '{'
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    try_Expr();
    lookahead1W(115);               // S^WS | '(:' | '}'
    shiftT(282);                    // '}'
  }

  function parse_UnorderedExpr()
  {
    startNonterminal("UnorderedExpr");
    shift(256);                     // 'unordered'
    lookahead1W(113);               // S^WS | '(:' | '{'
    shift(276);                     // '{'
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    parse_Expr();
    lookahead1W(115);               // S^WS | '(:' | '}'
    shift(282);                     // '}'
    endNonterminal("UnorderedExpr");
  }

  function try_UnorderedExpr()
  {
    shiftT(256);                    // 'unordered'
    lookahead1W(113);               // S^WS | '(:' | '{'
    shiftT(276);                    // '{'
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    try_Expr();
    lookahead1W(115);               // S^WS | '(:' | '}'
    shiftT(282);                    // '}'
  }

  function parse_FunctionCall()
  {
    startNonterminal("FunctionCall");
    parse_FunctionName();
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    parse_ArgumentList();
    endNonterminal("FunctionCall");
  }

  function try_FunctionCall()
  {
    try_FunctionName();
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    try_ArgumentList();
  }

  function parse_Argument()
  {
    startNonterminal("Argument");
    lookahead1W(325);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    switch (l1)
    {
    case 64:                        // '?'
      parse_ArgumentPlaceholder();
      break;
    default:
      parse_ExprSingle();
    }
    endNonterminal("Argument");
  }

  function try_Argument()
  {
    lookahead1W(325);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    switch (l1)
    {
    case 64:                        // '?'
      try_ArgumentPlaceholder();
      break;
    default:
      try_ExprSingle();
    }
  }

  function parse_ArgumentPlaceholder()
  {
    startNonterminal("ArgumentPlaceholder");
    shift(64);                      // '?'
    endNonterminal("ArgumentPlaceholder");
  }

  function try_ArgumentPlaceholder()
  {
    shiftT(64);                     // '?'
  }

  function parse_Constructor()
  {
    startNonterminal("Constructor");
    switch (l1)
    {
    case 54:                        // '<'
    case 55:                        // '<!--'
    case 59:                        // '<?'
      parse_DirectConstructor();
      break;
    default:
      parse_ComputedConstructor();
    }
    endNonterminal("Constructor");
  }

  function try_Constructor()
  {
    switch (l1)
    {
    case 54:                        // '<'
    case 55:                        // '<!--'
    case 59:                        // '<?'
      try_DirectConstructor();
      break;
    default:
      try_ComputedConstructor();
    }
  }

  function parse_DirectConstructor()
  {
    startNonterminal("DirectConstructor");
    switch (l1)
    {
    case 54:                        // '<'
      parse_DirElemConstructor();
      break;
    case 55:                        // '<!--'
      parse_DirCommentConstructor();
      break;
    default:
      parse_DirPIConstructor();
    }
    endNonterminal("DirectConstructor");
  }

  function try_DirectConstructor()
  {
    switch (l1)
    {
    case 54:                        // '<'
      try_DirElemConstructor();
      break;
    case 55:                        // '<!--'
      try_DirCommentConstructor();
      break;
    default:
      try_DirPIConstructor();
    }
  }

  function parse_DirElemConstructor()
  {
    startNonterminal("DirElemConstructor");
    shift(54);                      // '<'
    lookahead1(4);                  // QName
    shift(20);                      // QName
    parse_DirAttributeList();
    lookahead1(32);                 // '/>' | '>'
    switch (l1)
    {
    case 48:                        // '/>'
      shift(48);                    // '/>'
      break;
    default:
      shift(61);                    // '>'
      for (;;)
      {
        lookahead1(210);            // CDataSection | PredefinedEntityRef | ElementContentChar | CharRef | '<' |
                                    // '<!--' | '</' | '<?' | '{' | '{{' | '}}'
        if (l1 == 56)               // '</'
        {
          break;
        }
        parse_DirElemContent();
      }
      shift(56);                    // '</'
      lookahead1(4);                // QName
      shift(20);                    // QName
      lookahead1(26);               // S | '>'
      if (l1 == 21)                 // S
      {
        shift(21);                  // S
      }
      lookahead1(11);               // '>'
      shift(61);                    // '>'
    }
    endNonterminal("DirElemConstructor");
  }

  function try_DirElemConstructor()
  {
    shiftT(54);                     // '<'
    lookahead1(4);                  // QName
    shiftT(20);                     // QName
    try_DirAttributeList();
    lookahead1(32);                 // '/>' | '>'
    switch (l1)
    {
    case 48:                        // '/>'
      shiftT(48);                   // '/>'
      break;
    default:
      shiftT(61);                   // '>'
      for (;;)
      {
        lookahead1(210);            // CDataSection | PredefinedEntityRef | ElementContentChar | CharRef | '<' |
                                    // '<!--' | '</' | '<?' | '{' | '{{' | '}}'
        if (l1 == 56)               // '</'
        {
          break;
        }
        try_DirElemContent();
      }
      shiftT(56);                   // '</'
      lookahead1(4);                // QName
      shiftT(20);                   // QName
      lookahead1(26);               // S | '>'
      if (l1 == 21)                 // S
      {
        shiftT(21);                 // S
      }
      lookahead1(11);               // '>'
      shiftT(61);                   // '>'
    }
  }

  function parse_DirAttributeList()
  {
    startNonterminal("DirAttributeList");
    for (;;)
    {
      lookahead1(42);               // S | '/>' | '>'
      if (l1 != 21)                 // S
      {
        break;
      }
      shift(21);                    // S
      lookahead1(121);              // QName | S | '/>' | '>'
      if (l1 == 20)                 // QName
      {
        shift(20);                  // QName
        lookahead1(25);             // S | '='
        if (l1 == 21)               // S
        {
          shift(21);                // S
        }
        lookahead1(10);             // '='
        shift(60);                  // '='
        lookahead1(41);             // S | '"' | "'"
        if (l1 == 21)               // S
        {
          shift(21);                // S
        }
        parse_DirAttributeValue();
      }
    }
    endNonterminal("DirAttributeList");
  }

  function try_DirAttributeList()
  {
    for (;;)
    {
      lookahead1(42);               // S | '/>' | '>'
      if (l1 != 21)                 // S
      {
        break;
      }
      shiftT(21);                   // S
      lookahead1(121);              // QName | S | '/>' | '>'
      if (l1 == 20)                 // QName
      {
        shiftT(20);                 // QName
        lookahead1(25);             // S | '='
        if (l1 == 21)               // S
        {
          shiftT(21);               // S
        }
        lookahead1(10);             // '='
        shiftT(60);                 // '='
        lookahead1(41);             // S | '"' | "'"
        if (l1 == 21)               // S
        {
          shiftT(21);               // S
        }
        try_DirAttributeValue();
      }
    }
  }

  function parse_DirAttributeValue()
  {
    startNonterminal("DirAttributeValue");
    lookahead1(29);                 // '"' | "'"
    switch (l1)
    {
    case 28:                        // '"'
      shift(28);                    // '"'
      for (;;)
      {
        lookahead1(201);            // PredefinedEntityRef | EscapeQuot | QuotAttrContentChar | CharRef | '"' | '{' |
                                    // '{{' | '}}'
        if (l1 == 28)               // '"'
        {
          break;
        }
        switch (l1)
        {
        case 13:                    // EscapeQuot
          shift(13);                // EscapeQuot
          break;
        default:
          parse_QuotAttrValueContent();
        }
      }
      shift(28);                    // '"'
      break;
    default:
      shift(33);                    // "'"
      for (;;)
      {
        lookahead1(202);            // PredefinedEntityRef | EscapeApos | AposAttrContentChar | CharRef | "'" | '{' |
                                    // '{{' | '}}'
        if (l1 == 33)               // "'"
        {
          break;
        }
        switch (l1)
        {
        case 14:                    // EscapeApos
          shift(14);                // EscapeApos
          break;
        default:
          parse_AposAttrValueContent();
        }
      }
      shift(33);                    // "'"
    }
    endNonterminal("DirAttributeValue");
  }

  function try_DirAttributeValue()
  {
    lookahead1(29);                 // '"' | "'"
    switch (l1)
    {
    case 28:                        // '"'
      shiftT(28);                   // '"'
      for (;;)
      {
        lookahead1(201);            // PredefinedEntityRef | EscapeQuot | QuotAttrContentChar | CharRef | '"' | '{' |
                                    // '{{' | '}}'
        if (l1 == 28)               // '"'
        {
          break;
        }
        switch (l1)
        {
        case 13:                    // EscapeQuot
          shiftT(13);               // EscapeQuot
          break;
        default:
          try_QuotAttrValueContent();
        }
      }
      shiftT(28);                   // '"'
      break;
    default:
      shiftT(33);                   // "'"
      for (;;)
      {
        lookahead1(202);            // PredefinedEntityRef | EscapeApos | AposAttrContentChar | CharRef | "'" | '{' |
                                    // '{{' | '}}'
        if (l1 == 33)               // "'"
        {
          break;
        }
        switch (l1)
        {
        case 14:                    // EscapeApos
          shiftT(14);               // EscapeApos
          break;
        default:
          try_AposAttrValueContent();
        }
      }
      shiftT(33);                   // "'"
    }
  }

  function parse_QuotAttrValueContent()
  {
    startNonterminal("QuotAttrValueContent");
    switch (l1)
    {
    case 16:                        // QuotAttrContentChar
      shift(16);                    // QuotAttrContentChar
      break;
    default:
      parse_CommonContent();
    }
    endNonterminal("QuotAttrValueContent");
  }

  function try_QuotAttrValueContent()
  {
    switch (l1)
    {
    case 16:                        // QuotAttrContentChar
      shiftT(16);                   // QuotAttrContentChar
      break;
    default:
      try_CommonContent();
    }
  }

  function parse_AposAttrValueContent()
  {
    startNonterminal("AposAttrValueContent");
    switch (l1)
    {
    case 17:                        // AposAttrContentChar
      shift(17);                    // AposAttrContentChar
      break;
    default:
      parse_CommonContent();
    }
    endNonterminal("AposAttrValueContent");
  }

  function try_AposAttrValueContent()
  {
    switch (l1)
    {
    case 17:                        // AposAttrContentChar
      shiftT(17);                   // AposAttrContentChar
      break;
    default:
      try_CommonContent();
    }
  }

  function parse_DirElemContent()
  {
    startNonterminal("DirElemContent");
    switch (l1)
    {
    case 54:                        // '<'
    case 55:                        // '<!--'
    case 59:                        // '<?'
      parse_DirectConstructor();
      break;
    case 4:                         // CDataSection
      shift(4);                     // CDataSection
      break;
    case 15:                        // ElementContentChar
      shift(15);                    // ElementContentChar
      break;
    default:
      parse_CommonContent();
    }
    endNonterminal("DirElemContent");
  }

  function try_DirElemContent()
  {
    switch (l1)
    {
    case 54:                        // '<'
    case 55:                        // '<!--'
    case 59:                        // '<?'
      try_DirectConstructor();
      break;
    case 4:                         // CDataSection
      shiftT(4);                    // CDataSection
      break;
    case 15:                        // ElementContentChar
      shiftT(15);                   // ElementContentChar
      break;
    default:
      try_CommonContent();
    }
  }

  function parse_DirCommentConstructor()
  {
    startNonterminal("DirCommentConstructor");
    shift(55);                      // '<!--'
    lookahead1(1);                  // DirCommentContents
    shift(2);                       // DirCommentContents
    lookahead1(9);                  // '-->'
    shift(43);                      // '-->'
    endNonterminal("DirCommentConstructor");
  }

  function try_DirCommentConstructor()
  {
    shiftT(55);                     // '<!--'
    lookahead1(1);                  // DirCommentContents
    shiftT(2);                      // DirCommentContents
    lookahead1(9);                  // '-->'
    shiftT(43);                     // '-->'
  }

  function parse_DirPIConstructor()
  {
    startNonterminal("DirPIConstructor");
    shift(59);                      // '<?'
    lookahead1(3);                  // PITarget
    shift(18);                      // PITarget
    lookahead1(27);                 // S | '?>'
    if (l1 == 21)                   // S
    {
      shift(21);                    // S
      lookahead1(2);                // DirPIContents
      shift(3);                     // DirPIContents
    }
    lookahead1(12);                 // '?>'
    shift(65);                      // '?>'
    endNonterminal("DirPIConstructor");
  }

  function try_DirPIConstructor()
  {
    shiftT(59);                     // '<?'
    lookahead1(3);                  // PITarget
    shiftT(18);                     // PITarget
    lookahead1(27);                 // S | '?>'
    if (l1 == 21)                   // S
    {
      shiftT(21);                   // S
      lookahead1(2);                // DirPIContents
      shiftT(3);                    // DirPIContents
    }
    lookahead1(12);                 // '?>'
    shiftT(65);                     // '?>'
  }

  function parse_ComputedConstructor()
  {
    startNonterminal("ComputedConstructor");
    switch (l1)
    {
    case 119:                       // 'document'
      parse_CompDocConstructor();
      break;
    case 121:                       // 'element'
      parse_CompElemConstructor();
      break;
    case 82:                        // 'attribute'
      parse_CompAttrConstructor();
      break;
    case 184:                       // 'namespace'
      parse_CompNamespaceConstructor();
      break;
    case 244:                       // 'text'
      parse_CompTextConstructor();
      break;
    case 96:                        // 'comment'
      parse_CompCommentConstructor();
      break;
    default:
      parse_CompPIConstructor();
    }
    endNonterminal("ComputedConstructor");
  }

  function try_ComputedConstructor()
  {
    switch (l1)
    {
    case 119:                       // 'document'
      try_CompDocConstructor();
      break;
    case 121:                       // 'element'
      try_CompElemConstructor();
      break;
    case 82:                        // 'attribute'
      try_CompAttrConstructor();
      break;
    case 184:                       // 'namespace'
      try_CompNamespaceConstructor();
      break;
    case 244:                       // 'text'
      try_CompTextConstructor();
      break;
    case 96:                        // 'comment'
      try_CompCommentConstructor();
      break;
    default:
      try_CompPIConstructor();
    }
  }

  function parse_CompElemConstructor()
  {
    startNonterminal("CompElemConstructor");
    shift(121);                     // 'element'
    lookahead1W(308);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    switch (l1)
    {
    case 276:                       // '{'
      shift(276);                   // '{'
      lookahead1W(37);              // EPSILON | S^WS | '(:'
      parse_Expr();
      lookahead1W(115);             // S^WS | '(:' | '}'
      shift(282);                   // '}'
      break;
    default:
      parse_EQName();
    }
    lookahead1W(113);               // S^WS | '(:' | '{'
    shift(276);                     // '{'
    lookahead1W(328);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|' | '}'
    if (l1 != 282)                  // '}'
    {
      parse_ContentExpr();
    }
    lookahead1W(115);               // S^WS | '(:' | '}'
    shift(282);                     // '}'
    endNonterminal("CompElemConstructor");
  }

  function try_CompElemConstructor()
  {
    shiftT(121);                    // 'element'
    lookahead1W(308);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    switch (l1)
    {
    case 276:                       // '{'
      shiftT(276);                  // '{'
      lookahead1W(37);              // EPSILON | S^WS | '(:'
      try_Expr();
      lookahead1W(115);             // S^WS | '(:' | '}'
      shiftT(282);                  // '}'
      break;
    default:
      try_EQName();
    }
    lookahead1W(113);               // S^WS | '(:' | '{'
    shiftT(276);                    // '{'
    lookahead1W(328);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|' | '}'
    if (l1 != 282)                  // '}'
    {
      try_ContentExpr();
    }
    lookahead1W(115);               // S^WS | '(:' | '}'
    shiftT(282);                    // '}'
  }

  function parse_CompNamespaceConstructor()
  {
    startNonterminal("CompNamespaceConstructor");
    shift(184);                     // 'namespace'
    lookahead1W(309);               // NCName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    switch (l1)
    {
    case 276:                       // '{'
      shift(276);                   // '{'
      lookahead1W(37);              // EPSILON | S^WS | '(:'
      parse_PrefixExpr();
      lookahead1W(115);             // S^WS | '(:' | '}'
      shift(282);                   // '}'
      break;
    default:
      parse_Prefix();
    }
    lookahead1W(113);               // S^WS | '(:' | '{'
    shift(276);                     // '{'
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    parse_URIExpr();
    lookahead1W(115);               // S^WS | '(:' | '}'
    shift(282);                     // '}'
    endNonterminal("CompNamespaceConstructor");
  }

  function try_CompNamespaceConstructor()
  {
    shiftT(184);                    // 'namespace'
    lookahead1W(309);               // NCName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    switch (l1)
    {
    case 276:                       // '{'
      shiftT(276);                  // '{'
      lookahead1W(37);              // EPSILON | S^WS | '(:'
      try_PrefixExpr();
      lookahead1W(115);             // S^WS | '(:' | '}'
      shiftT(282);                  // '}'
      break;
    default:
      try_Prefix();
    }
    lookahead1W(113);               // S^WS | '(:' | '{'
    shiftT(276);                    // '{'
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    try_URIExpr();
    lookahead1W(115);               // S^WS | '(:' | '}'
    shiftT(282);                    // '}'
  }

  function parse_Prefix()
  {
    startNonterminal("Prefix");
    parse_NCName();
    endNonterminal("Prefix");
  }

  function try_Prefix()
  {
    try_NCName();
  }

  function parse_PrefixExpr()
  {
    startNonterminal("PrefixExpr");
    parse_Expr();
    endNonterminal("PrefixExpr");
  }

  function try_PrefixExpr()
  {
    try_Expr();
  }

  function parse_URIExpr()
  {
    startNonterminal("URIExpr");
    parse_Expr();
    endNonterminal("URIExpr");
  }

  function try_URIExpr()
  {
    try_Expr();
  }

  function parse_FunctionItemExpr()
  {
    startNonterminal("FunctionItemExpr");
    switch (l1)
    {
    case 145:                       // 'function'
      lookahead2W(122);             // S^WS | '#' | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 32:                        // '%'
    case 17553:                     // 'function' '('
      parse_InlineFunctionExpr();
      break;
    default:
      parse_NamedFunctionRef();
    }
    endNonterminal("FunctionItemExpr");
  }

  function try_FunctionItemExpr()
  {
    switch (l1)
    {
    case 145:                       // 'function'
      lookahead2W(122);             // S^WS | '#' | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 32:                        // '%'
    case 17553:                     // 'function' '('
      try_InlineFunctionExpr();
      break;
    default:
      try_NamedFunctionRef();
    }
  }

  function parse_NamedFunctionRef()
  {
    startNonterminal("NamedFunctionRef");
    parse_EQName();
    lookahead1W(44);                // S^WS | '#' | '(:'
    shift(29);                      // '#'
    lookahead1W(39);                // IntegerLiteral | S^WS | '(:'
    shift(8);                       // IntegerLiteral
    endNonterminal("NamedFunctionRef");
  }

  function try_NamedFunctionRef()
  {
    try_EQName();
    lookahead1W(44);                // S^WS | '#' | '(:'
    shiftT(29);                     // '#'
    lookahead1W(39);                // IntegerLiteral | S^WS | '(:'
    shiftT(8);                      // IntegerLiteral
  }

  function parse_InlineFunctionExpr()
  {
    startNonterminal("InlineFunctionExpr");
    for (;;)
    {
      lookahead1W(126);             // S^WS | '%' | '(:' | 'function'
      if (l1 != 32)                 // '%'
      {
        break;
      }
      parse_Annotation();
    }
    shift(145);                     // 'function'
    lookahead1W(46);                // S^WS | '(' | '(:'
    shift(34);                      // '('
    lookahead1W(124);               // S^WS | '$' | '(:' | ')'
    if (l1 == 31)                   // '$'
    {
      parse_ParamList();
    }
    lookahead1W(47);                // S^WS | '(:' | ')'
    shift(37);                      // ')'
    lookahead1W(142);               // S^WS | '(:' | 'as' | '{'
    if (l1 == 79)                   // 'as'
    {
      shift(79);                    // 'as'
      lookahead1W(37);              // EPSILON | S^WS | '(:'
      parse_SequenceType();
    }
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    parse_FunctionBody();
    endNonterminal("InlineFunctionExpr");
  }

  function try_InlineFunctionExpr()
  {
    for (;;)
    {
      lookahead1W(126);             // S^WS | '%' | '(:' | 'function'
      if (l1 != 32)                 // '%'
      {
        break;
      }
      try_Annotation();
    }
    shiftT(145);                    // 'function'
    lookahead1W(46);                // S^WS | '(' | '(:'
    shiftT(34);                     // '('
    lookahead1W(124);               // S^WS | '$' | '(:' | ')'
    if (l1 == 31)                   // '$'
    {
      try_ParamList();
    }
    lookahead1W(47);                // S^WS | '(:' | ')'
    shiftT(37);                     // ')'
    lookahead1W(142);               // S^WS | '(:' | 'as' | '{'
    if (l1 == 79)                   // 'as'
    {
      shiftT(79);                   // 'as'
      lookahead1W(37);              // EPSILON | S^WS | '(:'
      try_SequenceType();
    }
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    try_FunctionBody();
  }

  function parse_SingleType()
  {
    startNonterminal("SingleType");
    lookahead1(301);                // EQName^Token | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    parse_SimpleTypeName();
    lookahead1W(277);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' | 'and' | 'as' |
                                    // 'ascending' | 'at' | 'before' | 'case' | 'castable' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' |
                                    // 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' |
                                    // 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' |
                                    // 'order' | 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' |
                                    // 'start' | 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' |
                                    // '||' | '|}' | '}'
    if (l1 == 64)                   // '?'
    {
      shift(64);                    // '?'
    }
    endNonterminal("SingleType");
  }

  function try_SingleType()
  {
    lookahead1(301);                // EQName^Token | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    try_SimpleTypeName();
    lookahead1W(277);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' | 'and' | 'as' |
                                    // 'ascending' | 'at' | 'before' | 'case' | 'castable' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' |
                                    // 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' |
                                    // 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' |
                                    // 'order' | 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' |
                                    // 'start' | 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' |
                                    // '||' | '|}' | '}'
    if (l1 == 64)                   // '?'
    {
      shiftT(64);                   // '?'
    }
  }

  function parse_TypeDeclaration()
  {
    startNonterminal("TypeDeclaration");
    shift(79);                      // 'as'
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    parse_SequenceType();
    endNonterminal("TypeDeclaration");
  }

  function try_TypeDeclaration()
  {
    shiftT(79);                     // 'as'
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    try_SequenceType();
  }

  function parse_SequenceType()
  {
    startNonterminal("SequenceType");
    lookahead1W(315);               // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
    switch (l1)
    {
    case 124:                       // 'empty-sequence'
      lookahead2W(294);             // S^WS | EOF | '!=' | '(' | '(:' | ')' | '*' | '*' | '+' | ',' | '-' | ':' | ':=' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' |
                                    // 'allowing' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'external' | 'for' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'in' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'score' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'union' | 'where' | 'with' | 'words' | '{' | '|' | '||' | '|}' | '}'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 17532:                     // 'empty-sequence' '('
      shift(124);                   // 'empty-sequence'
      lookahead1W(46);              // S^WS | '(' | '(:'
      shift(34);                    // '('
      lookahead1W(47);              // S^WS | '(:' | ')'
      shift(37);                    // ')'
      break;
    default:
      parse_ItemType();
      lookahead1W(290);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '*' | '+' | ',' | '-' | ':' | ':=' | ';' |
                                    // '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' | 'allowing' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'collation' |
                                    // 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' |
                                    // 'end' | 'eq' | 'except' | 'external' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'in' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'score' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'union' | 'where' | 'with' | 'words' | '{' | '|' | '||' | '|}' | '}'
      switch (l1)
      {
      case 39:                      // '*'
      case 40:                      // '+'
      case 64:                      // '?'
        parse_OccurrenceIndicator();
        break;
      default:
        break;
      }
    }
    endNonterminal("SequenceType");
  }

  function try_SequenceType()
  {
    lookahead1W(315);               // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
    switch (l1)
    {
    case 124:                       // 'empty-sequence'
      lookahead2W(294);             // S^WS | EOF | '!=' | '(' | '(:' | ')' | '*' | '*' | '+' | ',' | '-' | ':' | ':=' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' |
                                    // 'allowing' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'external' | 'for' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'in' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'score' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'union' | 'where' | 'with' | 'words' | '{' | '|' | '||' | '|}' | '}'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 17532:                     // 'empty-sequence' '('
      shiftT(124);                  // 'empty-sequence'
      lookahead1W(46);              // S^WS | '(' | '(:'
      shiftT(34);                   // '('
      lookahead1W(47);              // S^WS | '(:' | ')'
      shiftT(37);                   // ')'
      break;
    default:
      try_ItemType();
      lookahead1W(290);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '*' | '+' | ',' | '-' | ':' | ':=' | ';' |
                                    // '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' | 'allowing' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'collation' |
                                    // 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' |
                                    // 'end' | 'eq' | 'except' | 'external' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'in' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'score' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'union' | 'where' | 'with' | 'words' | '{' | '|' | '||' | '|}' | '}'
      switch (l1)
      {
      case 39:                      // '*'
      case 40:                      // '+'
      case 64:                      // '?'
        try_OccurrenceIndicator();
        break;
      default:
        break;
      }
    }
  }

  function parse_OccurrenceIndicator()
  {
    startNonterminal("OccurrenceIndicator");
    switch (l1)
    {
    case 64:                        // '?'
      shift(64);                    // '?'
      break;
    case 39:                        // '*'
      shift(39);                    // '*'
      break;
    default:
      shift(40);                    // '+'
    }
    endNonterminal("OccurrenceIndicator");
  }

  function try_OccurrenceIndicator()
  {
    switch (l1)
    {
    case 64:                        // '?'
      shiftT(64);                   // '?'
      break;
    case 39:                        // '*'
      shiftT(39);                   // '*'
      break;
    default:
      shiftT(40);                   // '+'
    }
  }

  function parse_ItemType()
  {
    startNonterminal("ItemType");
    lookahead1W(315);               // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
    switch (l1)
    {
    case 82:                        // 'attribute'
    case 96:                        // 'comment'
    case 120:                       // 'document-node'
    case 121:                       // 'element'
    case 145:                       // 'function'
    case 165:                       // 'item'
    case 185:                       // 'namespace-node'
    case 191:                       // 'node'
    case 216:                       // 'processing-instruction'
    case 226:                       // 'schema-attribute'
    case 227:                       // 'schema-element'
    case 244:                       // 'text'
      lookahead2W(294);             // S^WS | EOF | '!=' | '(' | '(:' | ')' | '*' | '*' | '+' | ',' | '-' | ':' | ':=' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' |
                                    // 'allowing' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'external' | 'for' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'in' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'score' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'union' | 'where' | 'with' | 'words' | '{' | '|' | '||' | '|}' | '}'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 17490:                     // 'attribute' '('
    case 17504:                     // 'comment' '('
    case 17528:                     // 'document-node' '('
    case 17529:                     // 'element' '('
    case 17593:                     // 'namespace-node' '('
    case 17599:                     // 'node' '('
    case 17624:                     // 'processing-instruction' '('
    case 17634:                     // 'schema-attribute' '('
    case 17635:                     // 'schema-element' '('
    case 17652:                     // 'text' '('
      parse_KindTest();
      break;
    case 17573:                     // 'item' '('
      shift(165);                   // 'item'
      lookahead1W(46);              // S^WS | '(' | '(:'
      shift(34);                    // '('
      lookahead1W(47);              // S^WS | '(:' | ')'
      shift(37);                    // ')'
      break;
    case 32:                        // '%'
    case 17553:                     // 'function' '('
      parse_FunctionTest();
      break;
    case 34:                        // '('
      parse_ParenthesizedItemType();
      break;
    case 78:                        // 'array'
    case 167:                       // 'json-item'
    case 194:                       // 'object'
      parse_JSONTest();
      break;
    case 242:                       // 'structured-item'
      parse_StructuredItemTest();
      break;
    default:
      parse_AtomicOrUnionType();
    }
    endNonterminal("ItemType");
  }

  function try_ItemType()
  {
    lookahead1W(315);               // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json-item' | 'last' | 'lax' | 'le' |
                                    // 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
    switch (l1)
    {
    case 82:                        // 'attribute'
    case 96:                        // 'comment'
    case 120:                       // 'document-node'
    case 121:                       // 'element'
    case 145:                       // 'function'
    case 165:                       // 'item'
    case 185:                       // 'namespace-node'
    case 191:                       // 'node'
    case 216:                       // 'processing-instruction'
    case 226:                       // 'schema-attribute'
    case 227:                       // 'schema-element'
    case 244:                       // 'text'
      lookahead2W(294);             // S^WS | EOF | '!=' | '(' | '(:' | ')' | '*' | '*' | '+' | ',' | '-' | ':' | ':=' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' |
                                    // 'allowing' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'external' | 'for' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'in' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'score' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'union' | 'where' | 'with' | 'words' | '{' | '|' | '||' | '|}' | '}'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 17490:                     // 'attribute' '('
    case 17504:                     // 'comment' '('
    case 17528:                     // 'document-node' '('
    case 17529:                     // 'element' '('
    case 17593:                     // 'namespace-node' '('
    case 17599:                     // 'node' '('
    case 17624:                     // 'processing-instruction' '('
    case 17634:                     // 'schema-attribute' '('
    case 17635:                     // 'schema-element' '('
    case 17652:                     // 'text' '('
      try_KindTest();
      break;
    case 17573:                     // 'item' '('
      shiftT(165);                  // 'item'
      lookahead1W(46);              // S^WS | '(' | '(:'
      shiftT(34);                   // '('
      lookahead1W(47);              // S^WS | '(:' | ')'
      shiftT(37);                   // ')'
      break;
    case 32:                        // '%'
    case 17553:                     // 'function' '('
      try_FunctionTest();
      break;
    case 34:                        // '('
      try_ParenthesizedItemType();
      break;
    case 78:                        // 'array'
    case 167:                       // 'json-item'
    case 194:                       // 'object'
      try_JSONTest();
      break;
    case 242:                       // 'structured-item'
      try_StructuredItemTest();
      break;
    default:
      try_AtomicOrUnionType();
    }
  }

  function parse_JSONTest()
  {
    startNonterminal("JSONTest");
    switch (l1)
    {
    case 167:                       // 'json-item'
      parse_JSONItemTest();
      break;
    case 194:                       // 'object'
      parse_JSONObjectTest();
      break;
    default:
      parse_JSONArrayTest();
    }
    endNonterminal("JSONTest");
  }

  function try_JSONTest()
  {
    switch (l1)
    {
    case 167:                       // 'json-item'
      try_JSONItemTest();
      break;
    case 194:                       // 'object'
      try_JSONObjectTest();
      break;
    default:
      try_JSONArrayTest();
    }
  }

  function parse_StructuredItemTest()
  {
    startNonterminal("StructuredItemTest");
    shift(242);                     // 'structured-item'
    lookahead1W(46);                // S^WS | '(' | '(:'
    shift(34);                      // '('
    lookahead1W(47);                // S^WS | '(:' | ')'
    shift(37);                      // ')'
    endNonterminal("StructuredItemTest");
  }

  function try_StructuredItemTest()
  {
    shiftT(242);                    // 'structured-item'
    lookahead1W(46);                // S^WS | '(' | '(:'
    shiftT(34);                     // '('
    lookahead1W(47);                // S^WS | '(:' | ')'
    shiftT(37);                     // ')'
  }

  function parse_JSONItemTest()
  {
    startNonterminal("JSONItemTest");
    shift(167);                     // 'json-item'
    lookahead1W(46);                // S^WS | '(' | '(:'
    shift(34);                      // '('
    lookahead1W(47);                // S^WS | '(:' | ')'
    shift(37);                      // ')'
    endNonterminal("JSONItemTest");
  }

  function try_JSONItemTest()
  {
    shiftT(167);                    // 'json-item'
    lookahead1W(46);                // S^WS | '(' | '(:'
    shiftT(34);                     // '('
    lookahead1W(47);                // S^WS | '(:' | ')'
    shiftT(37);                     // ')'
  }

  function parse_JSONObjectTest()
  {
    startNonterminal("JSONObjectTest");
    shift(194);                     // 'object'
    lookahead1W(46);                // S^WS | '(' | '(:'
    shift(34);                      // '('
    lookahead1W(47);                // S^WS | '(:' | ')'
    shift(37);                      // ')'
    endNonterminal("JSONObjectTest");
  }

  function try_JSONObjectTest()
  {
    shiftT(194);                    // 'object'
    lookahead1W(46);                // S^WS | '(' | '(:'
    shiftT(34);                     // '('
    lookahead1W(47);                // S^WS | '(:' | ')'
    shiftT(37);                     // ')'
  }

  function parse_JSONArrayTest()
  {
    startNonterminal("JSONArrayTest");
    shift(78);                      // 'array'
    lookahead1W(46);                // S^WS | '(' | '(:'
    shift(34);                      // '('
    lookahead1W(47);                // S^WS | '(:' | ')'
    shift(37);                      // ')'
    endNonterminal("JSONArrayTest");
  }

  function try_JSONArrayTest()
  {
    shiftT(78);                     // 'array'
    lookahead1W(46);                // S^WS | '(' | '(:'
    shiftT(34);                     // '('
    lookahead1W(47);                // S^WS | '(:' | ')'
    shiftT(37);                     // ')'
  }

  function parse_AtomicOrUnionType()
  {
    startNonterminal("AtomicOrUnionType");
    parse_EQName();
    endNonterminal("AtomicOrUnionType");
  }

  function try_AtomicOrUnionType()
  {
    try_EQName();
  }

  function parse_KindTest()
  {
    startNonterminal("KindTest");
    lookahead1(209);                // 'attribute' | 'comment' | 'document-node' | 'element' | 'namespace-node' |
                                    // 'node' | 'processing-instruction' | 'schema-attribute' | 'schema-element' |
                                    // 'text'
    switch (l1)
    {
    case 120:                       // 'document-node'
      parse_DocumentTest();
      break;
    case 121:                       // 'element'
      parse_ElementTest();
      break;
    case 82:                        // 'attribute'
      parse_AttributeTest();
      break;
    case 227:                       // 'schema-element'
      parse_SchemaElementTest();
      break;
    case 226:                       // 'schema-attribute'
      parse_SchemaAttributeTest();
      break;
    case 216:                       // 'processing-instruction'
      parse_PITest();
      break;
    case 96:                        // 'comment'
      parse_CommentTest();
      break;
    case 244:                       // 'text'
      parse_TextTest();
      break;
    case 185:                       // 'namespace-node'
      parse_NamespaceNodeTest();
      break;
    default:
      parse_AnyKindTest();
    }
    endNonterminal("KindTest");
  }

  function try_KindTest()
  {
    lookahead1(209);                // 'attribute' | 'comment' | 'document-node' | 'element' | 'namespace-node' |
                                    // 'node' | 'processing-instruction' | 'schema-attribute' | 'schema-element' |
                                    // 'text'
    switch (l1)
    {
    case 120:                       // 'document-node'
      try_DocumentTest();
      break;
    case 121:                       // 'element'
      try_ElementTest();
      break;
    case 82:                        // 'attribute'
      try_AttributeTest();
      break;
    case 227:                       // 'schema-element'
      try_SchemaElementTest();
      break;
    case 226:                       // 'schema-attribute'
      try_SchemaAttributeTest();
      break;
    case 216:                       // 'processing-instruction'
      try_PITest();
      break;
    case 96:                        // 'comment'
      try_CommentTest();
      break;
    case 244:                       // 'text'
      try_TextTest();
      break;
    case 185:                       // 'namespace-node'
      try_NamespaceNodeTest();
      break;
    default:
      try_AnyKindTest();
    }
  }

  function parse_AnyKindTest()
  {
    startNonterminal("AnyKindTest");
    shift(191);                     // 'node'
    lookahead1W(46);                // S^WS | '(' | '(:'
    shift(34);                      // '('
    lookahead1W(47);                // S^WS | '(:' | ')'
    shift(37);                      // ')'
    endNonterminal("AnyKindTest");
  }

  function try_AnyKindTest()
  {
    shiftT(191);                    // 'node'
    lookahead1W(46);                // S^WS | '(' | '(:'
    shiftT(34);                     // '('
    lookahead1W(47);                // S^WS | '(:' | ')'
    shiftT(37);                     // ')'
  }

  function parse_DocumentTest()
  {
    startNonterminal("DocumentTest");
    shift(120);                     // 'document-node'
    lookahead1W(46);                // S^WS | '(' | '(:'
    shift(34);                      // '('
    lookahead1W(176);               // S^WS | '(:' | ')' | 'element' | 'schema-element'
    if (l1 != 37)                   // ')'
    {
      switch (l1)
      {
      case 121:                     // 'element'
        parse_ElementTest();
        break;
      default:
        parse_SchemaElementTest();
      }
    }
    lookahead1W(47);                // S^WS | '(:' | ')'
    shift(37);                      // ')'
    endNonterminal("DocumentTest");
  }

  function try_DocumentTest()
  {
    shiftT(120);                    // 'document-node'
    lookahead1W(46);                // S^WS | '(' | '(:'
    shiftT(34);                     // '('
    lookahead1W(176);               // S^WS | '(:' | ')' | 'element' | 'schema-element'
    if (l1 != 37)                   // ')'
    {
      switch (l1)
      {
      case 121:                     // 'element'
        try_ElementTest();
        break;
      default:
        try_SchemaElementTest();
      }
    }
    lookahead1W(47);                // S^WS | '(:' | ')'
    shiftT(37);                     // ')'
  }

  function parse_TextTest()
  {
    startNonterminal("TextTest");
    shift(244);                     // 'text'
    lookahead1W(46);                // S^WS | '(' | '(:'
    shift(34);                      // '('
    lookahead1W(47);                // S^WS | '(:' | ')'
    shift(37);                      // ')'
    endNonterminal("TextTest");
  }

  function try_TextTest()
  {
    shiftT(244);                    // 'text'
    lookahead1W(46);                // S^WS | '(' | '(:'
    shiftT(34);                     // '('
    lookahead1W(47);                // S^WS | '(:' | ')'
    shiftT(37);                     // ')'
  }

  function parse_CommentTest()
  {
    startNonterminal("CommentTest");
    shift(96);                      // 'comment'
    lookahead1W(46);                // S^WS | '(' | '(:'
    shift(34);                      // '('
    lookahead1W(47);                // S^WS | '(:' | ')'
    shift(37);                      // ')'
    endNonterminal("CommentTest");
  }

  function try_CommentTest()
  {
    shiftT(96);                     // 'comment'
    lookahead1W(46);                // S^WS | '(' | '(:'
    shiftT(34);                     // '('
    lookahead1W(47);                // S^WS | '(:' | ')'
    shiftT(37);                     // ')'
  }

  function parse_NamespaceNodeTest()
  {
    startNonterminal("NamespaceNodeTest");
    shift(185);                     // 'namespace-node'
    lookahead1W(46);                // S^WS | '(' | '(:'
    shift(34);                      // '('
    lookahead1W(47);                // S^WS | '(:' | ')'
    shift(37);                      // ')'
    endNonterminal("NamespaceNodeTest");
  }

  function try_NamespaceNodeTest()
  {
    shiftT(185);                    // 'namespace-node'
    lookahead1W(46);                // S^WS | '(' | '(:'
    shiftT(34);                     // '('
    lookahead1W(47);                // S^WS | '(:' | ')'
    shiftT(37);                     // ')'
  }

  function parse_PITest()
  {
    startNonterminal("PITest");
    shift(216);                     // 'processing-instruction'
    lookahead1W(46);                // S^WS | '(' | '(:'
    shift(34);                      // '('
    lookahead1W(312);               // StringLiteral | NCName^Token | S^WS | '(:' | ')' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    if (l1 != 37)                   // ')'
    {
      switch (l1)
      {
      case 11:                      // StringLiteral
        shift(11);                  // StringLiteral
        break;
      default:
        parse_NCName();
      }
    }
    lookahead1W(47);                // S^WS | '(:' | ')'
    shift(37);                      // ')'
    endNonterminal("PITest");
  }

  function try_PITest()
  {
    shiftT(216);                    // 'processing-instruction'
    lookahead1W(46);                // S^WS | '(' | '(:'
    shiftT(34);                     // '('
    lookahead1W(312);               // StringLiteral | NCName^Token | S^WS | '(:' | ')' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    if (l1 != 37)                   // ')'
    {
      switch (l1)
      {
      case 11:                      // StringLiteral
        shiftT(11);                 // StringLiteral
        break;
      default:
        try_NCName();
      }
    }
    lookahead1W(47);                // S^WS | '(:' | ')'
    shiftT(37);                     // ')'
  }

  function parse_AttributeTest()
  {
    startNonterminal("AttributeTest");
    shift(82);                      // 'attribute'
    lookahead1W(46);                // S^WS | '(' | '(:'
    shift(34);                      // '('
    lookahead1W(311);               // EQName^Token | S^WS | '(:' | ')' | '*' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    if (l1 != 37)                   // ')'
    {
      parse_AttribNameOrWildcard();
      lookahead1W(129);             // S^WS | '(:' | ')' | ','
      if (l1 == 41)                 // ','
      {
        shift(41);                  // ','
        lookahead1W(305);           // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
        parse_TypeName();
      }
    }
    lookahead1W(47);                // S^WS | '(:' | ')'
    shift(37);                      // ')'
    endNonterminal("AttributeTest");
  }

  function try_AttributeTest()
  {
    shiftT(82);                     // 'attribute'
    lookahead1W(46);                // S^WS | '(' | '(:'
    shiftT(34);                     // '('
    lookahead1W(311);               // EQName^Token | S^WS | '(:' | ')' | '*' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    if (l1 != 37)                   // ')'
    {
      try_AttribNameOrWildcard();
      lookahead1W(129);             // S^WS | '(:' | ')' | ','
      if (l1 == 41)                 // ','
      {
        shiftT(41);                 // ','
        lookahead1W(305);           // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
        try_TypeName();
      }
    }
    lookahead1W(47);                // S^WS | '(:' | ')'
    shiftT(37);                     // ')'
  }

  function parse_AttribNameOrWildcard()
  {
    startNonterminal("AttribNameOrWildcard");
    switch (l1)
    {
    case 38:                        // '*'
      shift(38);                    // '*'
      break;
    default:
      parse_AttributeName();
    }
    endNonterminal("AttribNameOrWildcard");
  }

  function try_AttribNameOrWildcard()
  {
    switch (l1)
    {
    case 38:                        // '*'
      shiftT(38);                   // '*'
      break;
    default:
      try_AttributeName();
    }
  }

  function parse_SchemaAttributeTest()
  {
    startNonterminal("SchemaAttributeTest");
    shift(226);                     // 'schema-attribute'
    lookahead1W(46);                // S^WS | '(' | '(:'
    shift(34);                      // '('
    lookahead1W(305);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    parse_AttributeDeclaration();
    lookahead1W(47);                // S^WS | '(:' | ')'
    shift(37);                      // ')'
    endNonterminal("SchemaAttributeTest");
  }

  function try_SchemaAttributeTest()
  {
    shiftT(226);                    // 'schema-attribute'
    lookahead1W(46);                // S^WS | '(' | '(:'
    shiftT(34);                     // '('
    lookahead1W(305);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    try_AttributeDeclaration();
    lookahead1W(47);                // S^WS | '(:' | ')'
    shiftT(37);                     // ')'
  }

  function parse_AttributeDeclaration()
  {
    startNonterminal("AttributeDeclaration");
    parse_AttributeName();
    endNonterminal("AttributeDeclaration");
  }

  function try_AttributeDeclaration()
  {
    try_AttributeName();
  }

  function parse_ElementTest()
  {
    startNonterminal("ElementTest");
    shift(121);                     // 'element'
    lookahead1W(46);                // S^WS | '(' | '(:'
    shift(34);                      // '('
    lookahead1W(311);               // EQName^Token | S^WS | '(:' | ')' | '*' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    if (l1 != 37)                   // ')'
    {
      parse_ElementNameOrWildcard();
      lookahead1W(129);             // S^WS | '(:' | ')' | ','
      if (l1 == 41)                 // ','
      {
        shift(41);                  // ','
        lookahead1W(305);           // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
        parse_TypeName();
        lookahead1W(130);           // S^WS | '(:' | ')' | '?'
        if (l1 == 64)               // '?'
        {
          shift(64);                // '?'
        }
      }
    }
    lookahead1W(47);                // S^WS | '(:' | ')'
    shift(37);                      // ')'
    endNonterminal("ElementTest");
  }

  function try_ElementTest()
  {
    shiftT(121);                    // 'element'
    lookahead1W(46);                // S^WS | '(' | '(:'
    shiftT(34);                     // '('
    lookahead1W(311);               // EQName^Token | S^WS | '(:' | ')' | '*' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    if (l1 != 37)                   // ')'
    {
      try_ElementNameOrWildcard();
      lookahead1W(129);             // S^WS | '(:' | ')' | ','
      if (l1 == 41)                 // ','
      {
        shiftT(41);                 // ','
        lookahead1W(305);           // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
        try_TypeName();
        lookahead1W(130);           // S^WS | '(:' | ')' | '?'
        if (l1 == 64)               // '?'
        {
          shiftT(64);               // '?'
        }
      }
    }
    lookahead1W(47);                // S^WS | '(:' | ')'
    shiftT(37);                     // ')'
  }

  function parse_ElementNameOrWildcard()
  {
    startNonterminal("ElementNameOrWildcard");
    switch (l1)
    {
    case 38:                        // '*'
      shift(38);                    // '*'
      break;
    default:
      parse_ElementName();
    }
    endNonterminal("ElementNameOrWildcard");
  }

  function try_ElementNameOrWildcard()
  {
    switch (l1)
    {
    case 38:                        // '*'
      shiftT(38);                   // '*'
      break;
    default:
      try_ElementName();
    }
  }

  function parse_SchemaElementTest()
  {
    startNonterminal("SchemaElementTest");
    shift(227);                     // 'schema-element'
    lookahead1W(46);                // S^WS | '(' | '(:'
    shift(34);                      // '('
    lookahead1W(305);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    parse_ElementDeclaration();
    lookahead1W(47);                // S^WS | '(:' | ')'
    shift(37);                      // ')'
    endNonterminal("SchemaElementTest");
  }

  function try_SchemaElementTest()
  {
    shiftT(227);                    // 'schema-element'
    lookahead1W(46);                // S^WS | '(' | '(:'
    shiftT(34);                     // '('
    lookahead1W(305);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    try_ElementDeclaration();
    lookahead1W(47);                // S^WS | '(:' | ')'
    shiftT(37);                     // ')'
  }

  function parse_ElementDeclaration()
  {
    startNonterminal("ElementDeclaration");
    parse_ElementName();
    endNonterminal("ElementDeclaration");
  }

  function try_ElementDeclaration()
  {
    try_ElementName();
  }

  function parse_AttributeName()
  {
    startNonterminal("AttributeName");
    parse_EQName();
    endNonterminal("AttributeName");
  }

  function try_AttributeName()
  {
    try_EQName();
  }

  function parse_ElementName()
  {
    startNonterminal("ElementName");
    parse_EQName();
    endNonterminal("ElementName");
  }

  function try_ElementName()
  {
    try_EQName();
  }

  function parse_SimpleTypeName()
  {
    startNonterminal("SimpleTypeName");
    parse_TypeName();
    endNonterminal("SimpleTypeName");
  }

  function try_SimpleTypeName()
  {
    try_TypeName();
  }

  function parse_TypeName()
  {
    startNonterminal("TypeName");
    parse_EQName();
    endNonterminal("TypeName");
  }

  function try_TypeName()
  {
    try_EQName();
  }

  function parse_FunctionTest()
  {
    startNonterminal("FunctionTest");
    for (;;)
    {
      lookahead1W(126);             // S^WS | '%' | '(:' | 'function'
      if (l1 != 32)                 // '%'
      {
        break;
      }
      parse_Annotation();
    }
    switch (l1)
    {
    case 145:                       // 'function'
      lookahead2W(46);              // S^WS | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    lk = memoized(4, e0);
    if (lk == 0)
    {
      var b0A = b0; var e0A = e0; var l1A = l1;
      var b1A = b1; var e1A = e1; var l2A = l2;
      var b2A = b2; var e2A = e2;
      try
      {
        try_AnyFunctionTest();
        lk = -1;
      }
      catch (p1A)
      {
        lk = -2;
      }
      b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
      b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
      b2 = b2A; e2 = e2A; end = e2A; }}
      memoize(4, e0, lk);
    }
    switch (lk)
    {
    case -1:
      parse_AnyFunctionTest();
      break;
    default:
      parse_TypedFunctionTest();
    }
    endNonterminal("FunctionTest");
  }

  function try_FunctionTest()
  {
    for (;;)
    {
      lookahead1W(126);             // S^WS | '%' | '(:' | 'function'
      if (l1 != 32)                 // '%'
      {
        break;
      }
      try_Annotation();
    }
    switch (l1)
    {
    case 145:                       // 'function'
      lookahead2W(46);              // S^WS | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    lk = memoized(4, e0);
    if (lk == 0)
    {
      var b0A = b0; var e0A = e0; var l1A = l1;
      var b1A = b1; var e1A = e1; var l2A = l2;
      var b2A = b2; var e2A = e2;
      try
      {
        try_AnyFunctionTest();
        lk = -1;
      }
      catch (p1A)
      {
        lk = -2;
      }
      b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
      b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
      b2 = b2A; e2 = e2A; end = e2A; }}
      memoize(4, e0, lk);
    }
    switch (lk)
    {
    case -1:
      try_AnyFunctionTest();
      break;
    default:
      try_TypedFunctionTest();
    }
  }

  function parse_AnyFunctionTest()
  {
    startNonterminal("AnyFunctionTest");
    shift(145);                     // 'function'
    lookahead1W(46);                // S^WS | '(' | '(:'
    shift(34);                      // '('
    lookahead1W(48);                // S^WS | '(:' | '*'
    shift(38);                      // '*'
    lookahead1W(47);                // S^WS | '(:' | ')'
    shift(37);                      // ')'
    endNonterminal("AnyFunctionTest");
  }

  function try_AnyFunctionTest()
  {
    shiftT(145);                    // 'function'
    lookahead1W(46);                // S^WS | '(' | '(:'
    shiftT(34);                     // '('
    lookahead1W(48);                // S^WS | '(:' | '*'
    shiftT(38);                     // '*'
    lookahead1W(47);                // S^WS | '(:' | ')'
    shiftT(37);                     // ')'
  }

  function parse_TypedFunctionTest()
  {
    startNonterminal("TypedFunctionTest");
    shift(145);                     // 'function'
    lookahead1W(46);                // S^WS | '(' | '(:'
    shift(34);                      // '('
    lookahead1W(317);               // EQName^Token | S^WS | '%' | '(' | '(:' | ')' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
    if (l1 != 37)                   // ')'
    {
      parse_SequenceType();
      for (;;)
      {
        lookahead1W(129);           // S^WS | '(:' | ')' | ','
        if (l1 != 41)               // ','
        {
          break;
        }
        shift(41);                  // ','
        lookahead1W(37);            // EPSILON | S^WS | '(:'
        parse_SequenceType();
      }
    }
    lookahead1W(47);                // S^WS | '(:' | ')'
    shift(37);                      // ')'
    lookahead1W(56);                // S^WS | '(:' | 'as'
    shift(79);                      // 'as'
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    parse_SequenceType();
    endNonterminal("TypedFunctionTest");
  }

  function try_TypedFunctionTest()
  {
    shiftT(145);                    // 'function'
    lookahead1W(46);                // S^WS | '(' | '(:'
    shiftT(34);                     // '('
    lookahead1W(317);               // EQName^Token | S^WS | '%' | '(' | '(:' | ')' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
    if (l1 != 37)                   // ')'
    {
      try_SequenceType();
      for (;;)
      {
        lookahead1W(129);           // S^WS | '(:' | ')' | ','
        if (l1 != 41)               // ','
        {
          break;
        }
        shiftT(41);                 // ','
        lookahead1W(37);            // EPSILON | S^WS | '(:'
        try_SequenceType();
      }
    }
    lookahead1W(47);                // S^WS | '(:' | ')'
    shiftT(37);                     // ')'
    lookahead1W(56);                // S^WS | '(:' | 'as'
    shiftT(79);                     // 'as'
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    try_SequenceType();
  }

  function parse_ParenthesizedItemType()
  {
    startNonterminal("ParenthesizedItemType");
    shift(34);                      // '('
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    parse_ItemType();
    lookahead1W(47);                // S^WS | '(:' | ')'
    shift(37);                      // ')'
    endNonterminal("ParenthesizedItemType");
  }

  function try_ParenthesizedItemType()
  {
    shiftT(34);                     // '('
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    try_ItemType();
    lookahead1W(47);                // S^WS | '(:' | ')'
    shiftT(37);                     // ')'
  }

  function parse_RevalidationDecl()
  {
    startNonterminal("RevalidationDecl");
    shift(108);                     // 'declare'
    lookahead1W(96);                // S^WS | '(:' | 'revalidation'
    shift(222);                     // 'revalidation'
    lookahead1W(183);               // S^WS | '(:' | 'lax' | 'skip' | 'strict'
    switch (l1)
    {
    case 240:                       // 'strict'
      shift(240);                   // 'strict'
      break;
    case 171:                       // 'lax'
      shift(171);                   // 'lax'
      break;
    default:
      shift(233);                   // 'skip'
    }
    endNonterminal("RevalidationDecl");
  }

  function try_RevalidationDecl()
  {
    shiftT(108);                    // 'declare'
    lookahead1W(96);                // S^WS | '(:' | 'revalidation'
    shiftT(222);                    // 'revalidation'
    lookahead1W(183);               // S^WS | '(:' | 'lax' | 'skip' | 'strict'
    switch (l1)
    {
    case 240:                       // 'strict'
      shiftT(240);                  // 'strict'
      break;
    case 171:                       // 'lax'
      shiftT(171);                  // 'lax'
      break;
    default:
      shiftT(233);                  // 'skip'
    }
  }

  function parse_InsertExprTargetChoice()
  {
    startNonterminal("InsertExprTargetChoice");
    lookahead1W(191);               // S^WS | '(:' | 'after' | 'as' | 'before' | 'into'
    switch (l1)
    {
    case 70:                        // 'after'
      shift(70);                    // 'after'
      break;
    case 84:                        // 'before'
      shift(84);                    // 'before'
      break;
    default:
      if (l1 == 79)                 // 'as'
      {
        shift(79);                  // 'as'
        lookahead1W(152);           // S^WS | '(:' | 'first' | 'last'
        switch (l1)
        {
        case 134:                   // 'first'
          shift(134);               // 'first'
          break;
        default:
          shift(170);               // 'last'
        }
      }
      lookahead1W(78);              // S^WS | '(:' | 'into'
      shift(163);                   // 'into'
    }
    endNonterminal("InsertExprTargetChoice");
  }

  function try_InsertExprTargetChoice()
  {
    lookahead1W(191);               // S^WS | '(:' | 'after' | 'as' | 'before' | 'into'
    switch (l1)
    {
    case 70:                        // 'after'
      shiftT(70);                   // 'after'
      break;
    case 84:                        // 'before'
      shiftT(84);                   // 'before'
      break;
    default:
      if (l1 == 79)                 // 'as'
      {
        shiftT(79);                 // 'as'
        lookahead1W(152);           // S^WS | '(:' | 'first' | 'last'
        switch (l1)
        {
        case 134:                   // 'first'
          shiftT(134);              // 'first'
          break;
        default:
          shiftT(170);              // 'last'
        }
      }
      lookahead1W(78);              // S^WS | '(:' | 'into'
      shiftT(163);                  // 'into'
    }
  }

  function parse_InsertExpr()
  {
    startNonterminal("InsertExpr");
    shift(159);                     // 'insert'
    lookahead1W(162);               // S^WS | '(:' | 'node' | 'nodes'
    switch (l1)
    {
    case 191:                       // 'node'
      shift(191);                   // 'node'
      break;
    default:
      shift(192);                   // 'nodes'
    }
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    parse_SourceExpr();
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    parse_InsertExprTargetChoice();
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    parse_TargetExpr();
    endNonterminal("InsertExpr");
  }

  function try_InsertExpr()
  {
    shiftT(159);                    // 'insert'
    lookahead1W(162);               // S^WS | '(:' | 'node' | 'nodes'
    switch (l1)
    {
    case 191:                       // 'node'
      shiftT(191);                  // 'node'
      break;
    default:
      shiftT(192);                  // 'nodes'
    }
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    try_SourceExpr();
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    try_InsertExprTargetChoice();
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    try_TargetExpr();
  }

  function parse_DeleteExpr()
  {
    startNonterminal("DeleteExpr");
    shift(110);                     // 'delete'
    lookahead1W(162);               // S^WS | '(:' | 'node' | 'nodes'
    switch (l1)
    {
    case 191:                       // 'node'
      shift(191);                   // 'node'
      break;
    default:
      shift(192);                   // 'nodes'
    }
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    parse_TargetExpr();
    endNonterminal("DeleteExpr");
  }

  function try_DeleteExpr()
  {
    shiftT(110);                    // 'delete'
    lookahead1W(162);               // S^WS | '(:' | 'node' | 'nodes'
    switch (l1)
    {
    case 191:                       // 'node'
      shiftT(191);                  // 'node'
      break;
    default:
      shiftT(192);                  // 'nodes'
    }
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    try_TargetExpr();
  }

  function parse_ReplaceExpr()
  {
    startNonterminal("ReplaceExpr");
    shift(219);                     // 'replace'
    lookahead1W(163);               // S^WS | '(:' | 'node' | 'value'
    if (l1 == 261)                  // 'value'
    {
      shift(261);                   // 'value'
      lookahead1W(88);              // S^WS | '(:' | 'of'
      shift(196);                   // 'of'
    }
    lookahead1W(86);                // S^WS | '(:' | 'node'
    shift(191);                     // 'node'
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    parse_TargetExpr();
    lookahead1W(111);               // S^WS | '(:' | 'with'
    shift(270);                     // 'with'
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    parse_ExprSingle();
    endNonterminal("ReplaceExpr");
  }

  function try_ReplaceExpr()
  {
    shiftT(219);                    // 'replace'
    lookahead1W(163);               // S^WS | '(:' | 'node' | 'value'
    if (l1 == 261)                  // 'value'
    {
      shiftT(261);                  // 'value'
      lookahead1W(88);              // S^WS | '(:' | 'of'
      shiftT(196);                  // 'of'
    }
    lookahead1W(86);                // S^WS | '(:' | 'node'
    shiftT(191);                    // 'node'
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    try_TargetExpr();
    lookahead1W(111);               // S^WS | '(:' | 'with'
    shiftT(270);                    // 'with'
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    try_ExprSingle();
  }

  function parse_RenameExpr()
  {
    startNonterminal("RenameExpr");
    shift(218);                     // 'rename'
    lookahead1W(86);                // S^WS | '(:' | 'node'
    shift(191);                     // 'node'
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    parse_TargetExpr();
    lookahead1W(56);                // S^WS | '(:' | 'as'
    shift(79);                      // 'as'
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    parse_NewNameExpr();
    endNonterminal("RenameExpr");
  }

  function try_RenameExpr()
  {
    shiftT(218);                    // 'rename'
    lookahead1W(86);                // S^WS | '(:' | 'node'
    shiftT(191);                    // 'node'
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    try_TargetExpr();
    lookahead1W(56);                // S^WS | '(:' | 'as'
    shiftT(79);                     // 'as'
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    try_NewNameExpr();
  }

  function parse_SourceExpr()
  {
    startNonterminal("SourceExpr");
    parse_ExprSingle();
    endNonterminal("SourceExpr");
  }

  function try_SourceExpr()
  {
    try_ExprSingle();
  }

  function parse_TargetExpr()
  {
    startNonterminal("TargetExpr");
    parse_ExprSingle();
    endNonterminal("TargetExpr");
  }

  function try_TargetExpr()
  {
    try_ExprSingle();
  }

  function parse_NewNameExpr()
  {
    startNonterminal("NewNameExpr");
    parse_ExprSingle();
    endNonterminal("NewNameExpr");
  }

  function try_NewNameExpr()
  {
    try_ExprSingle();
  }

  function parse_TransformExpr()
  {
    startNonterminal("TransformExpr");
    shift(103);                     // 'copy'
    lookahead1W(45);                // S^WS | '$' | '(:'
    shift(31);                      // '$'
    lookahead1W(305);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    parse_VarName();
    lookahead1W(52);                // S^WS | '(:' | ':='
    shift(52);                      // ':='
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    parse_ExprSingle();
    for (;;)
    {
      lookahead1W(132);             // S^WS | '(:' | ',' | 'modify'
      if (l1 != 41)                 // ','
      {
        break;
      }
      shift(41);                    // ','
      lookahead1W(45);              // S^WS | '$' | '(:'
      shift(31);                    // '$'
      lookahead1W(305);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      parse_VarName();
      lookahead1W(52);              // S^WS | '(:' | ':='
      shift(52);                    // ':='
      lookahead1W(37);              // EPSILON | S^WS | '(:'
      parse_ExprSingle();
    }
    shift(181);                     // 'modify'
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    parse_ExprSingle();
    lookahead1W(94);                // S^WS | '(:' | 'return'
    shift(220);                     // 'return'
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    parse_ExprSingle();
    endNonterminal("TransformExpr");
  }

  function try_TransformExpr()
  {
    shiftT(103);                    // 'copy'
    lookahead1W(45);                // S^WS | '$' | '(:'
    shiftT(31);                     // '$'
    lookahead1W(305);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    try_VarName();
    lookahead1W(52);                // S^WS | '(:' | ':='
    shiftT(52);                     // ':='
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    try_ExprSingle();
    for (;;)
    {
      lookahead1W(132);             // S^WS | '(:' | ',' | 'modify'
      if (l1 != 41)                 // ','
      {
        break;
      }
      shiftT(41);                   // ','
      lookahead1W(45);              // S^WS | '$' | '(:'
      shiftT(31);                   // '$'
      lookahead1W(305);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      try_VarName();
      lookahead1W(52);              // S^WS | '(:' | ':='
      shiftT(52);                   // ':='
      lookahead1W(37);              // EPSILON | S^WS | '(:'
      try_ExprSingle();
    }
    shiftT(181);                    // 'modify'
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    try_ExprSingle();
    lookahead1W(94);                // S^WS | '(:' | 'return'
    shiftT(220);                    // 'return'
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    try_ExprSingle();
  }

  function parse_FTSelection()
  {
    startNonterminal("FTSelection");
    parse_FTOr();
    for (;;)
    {
      lookahead1W(256);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'modify' | 'ne' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'return' | 'same' | 'satisfies' |
                                    // 'stable' | 'start' | 'where' | 'window' | 'with' | 'without' | '|}' | '}'
      switch (l1)
      {
      case 81:                      // 'at'
        lookahead2W(182);           // S^WS | '(:' | 'end' | 'position' | 'start'
        break;
      default:
        lk = l1;
      }
      if (lk != 115                 // 'different'
       && lk != 117                 // 'distance'
       && lk != 127                 // 'entire'
       && lk != 202                 // 'ordered'
       && lk != 223                 // 'same'
       && lk != 269                 // 'window'
       && lk != 64593               // 'at' 'end'
       && lk != 121425)             // 'at' 'start'
      {
        break;
      }
      parse_FTPosFilter();
    }
    endNonterminal("FTSelection");
  }

  function try_FTSelection()
  {
    try_FTOr();
    for (;;)
    {
      lookahead1W(256);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'modify' | 'ne' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'return' | 'same' | 'satisfies' |
                                    // 'stable' | 'start' | 'where' | 'window' | 'with' | 'without' | '|}' | '}'
      switch (l1)
      {
      case 81:                      // 'at'
        lookahead2W(182);           // S^WS | '(:' | 'end' | 'position' | 'start'
        break;
      default:
        lk = l1;
      }
      if (lk != 115                 // 'different'
       && lk != 117                 // 'distance'
       && lk != 127                 // 'entire'
       && lk != 202                 // 'ordered'
       && lk != 223                 // 'same'
       && lk != 269                 // 'window'
       && lk != 64593               // 'at' 'end'
       && lk != 121425)             // 'at' 'start'
      {
        break;
      }
      try_FTPosFilter();
    }
  }

  function parse_FTWeight()
  {
    startNonterminal("FTWeight");
    shift(264);                     // 'weight'
    lookahead1W(113);               // S^WS | '(:' | '{'
    shift(276);                     // '{'
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    parse_Expr();
    lookahead1W(115);               // S^WS | '(:' | '}'
    shift(282);                     // '}'
    endNonterminal("FTWeight");
  }

  function try_FTWeight()
  {
    shiftT(264);                    // 'weight'
    lookahead1W(113);               // S^WS | '(:' | '{'
    shiftT(276);                    // '{'
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    try_Expr();
    lookahead1W(115);               // S^WS | '(:' | '}'
    shiftT(282);                    // '}'
  }

  function parse_FTOr()
  {
    startNonterminal("FTOr");
    parse_FTAnd();
    for (;;)
    {
      lookahead1W(257);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'modify' |
                                    // 'ne' | 'only' | 'or' | 'order' | 'ordered' | 'return' | 'same' | 'satisfies' |
                                    // 'stable' | 'start' | 'where' | 'window' | 'with' | 'without' | '|}' | '}'
      if (l1 != 144)                // 'ftor'
      {
        break;
      }
      shift(144);                   // 'ftor'
      lookahead1W(37);              // EPSILON | S^WS | '(:'
      parse_FTAnd();
    }
    endNonterminal("FTOr");
  }

  function try_FTOr()
  {
    try_FTAnd();
    for (;;)
    {
      lookahead1W(257);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'modify' |
                                    // 'ne' | 'only' | 'or' | 'order' | 'ordered' | 'return' | 'same' | 'satisfies' |
                                    // 'stable' | 'start' | 'where' | 'window' | 'with' | 'without' | '|}' | '}'
      if (l1 != 144)                // 'ftor'
      {
        break;
      }
      shiftT(144);                  // 'ftor'
      lookahead1W(37);              // EPSILON | S^WS | '(:'
      try_FTAnd();
    }
  }

  function parse_FTAnd()
  {
    startNonterminal("FTAnd");
    parse_FTMildNot();
    for (;;)
    {
      lookahead1W(259);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'ordered' | 'return' | 'same' |
                                    // 'satisfies' | 'stable' | 'start' | 'where' | 'window' | 'with' | 'without' |
                                    // '|}' | '}'
      if (l1 != 142)                // 'ftand'
      {
        break;
      }
      shift(142);                   // 'ftand'
      lookahead1W(37);              // EPSILON | S^WS | '(:'
      parse_FTMildNot();
    }
    endNonterminal("FTAnd");
  }

  function try_FTAnd()
  {
    try_FTMildNot();
    for (;;)
    {
      lookahead1W(259);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'ordered' | 'return' | 'same' |
                                    // 'satisfies' | 'stable' | 'start' | 'where' | 'window' | 'with' | 'without' |
                                    // '|}' | '}'
      if (l1 != 142)                // 'ftand'
      {
        break;
      }
      shiftT(142);                  // 'ftand'
      lookahead1W(37);              // EPSILON | S^WS | '(:'
      try_FTMildNot();
    }
  }

  function parse_FTMildNot()
  {
    startNonterminal("FTMildNot");
    parse_FTUnaryNot();
    for (;;)
    {
      lookahead1W(260);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' | 'ordered' | 'return' |
                                    // 'same' | 'satisfies' | 'stable' | 'start' | 'where' | 'window' | 'with' |
                                    // 'without' | '|}' | '}'
      if (l1 != 193)                // 'not'
      {
        break;
      }
      shift(193);                   // 'not'
      lookahead1W(77);              // S^WS | '(:' | 'in'
      shift(154);                   // 'in'
      lookahead1W(37);              // EPSILON | S^WS | '(:'
      parse_FTUnaryNot();
    }
    endNonterminal("FTMildNot");
  }

  function try_FTMildNot()
  {
    try_FTUnaryNot();
    for (;;)
    {
      lookahead1W(260);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' | 'ordered' | 'return' |
                                    // 'same' | 'satisfies' | 'stable' | 'start' | 'where' | 'window' | 'with' |
                                    // 'without' | '|}' | '}'
      if (l1 != 193)                // 'not'
      {
        break;
      }
      shiftT(193);                  // 'not'
      lookahead1W(77);              // S^WS | '(:' | 'in'
      shiftT(154);                  // 'in'
      lookahead1W(37);              // EPSILON | S^WS | '(:'
      try_FTUnaryNot();
    }
  }

  function parse_FTUnaryNot()
  {
    startNonterminal("FTUnaryNot");
    lookahead1W(196);               // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
    if (l1 == 143)                  // 'ftnot'
    {
      shift(143);                   // 'ftnot'
    }
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    parse_FTPrimaryWithOptions();
    endNonterminal("FTUnaryNot");
  }

  function try_FTUnaryNot()
  {
    lookahead1W(196);               // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
    if (l1 == 143)                  // 'ftnot'
    {
      shiftT(143);                  // 'ftnot'
    }
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    try_FTPrimaryWithOptions();
  }

  function parse_FTPrimaryWithOptions()
  {
    startNonterminal("FTPrimaryWithOptions");
    parse_FTPrimary();
    lookahead1W(263);               // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' | 'ordered' | 'return' |
                                    // 'same' | 'satisfies' | 'stable' | 'start' | 'using' | 'weight' | 'where' |
                                    // 'window' | 'with' | 'without' | '|}' | '}'
    if (l1 == 259)                  // 'using'
    {
      parse_FTMatchOptions();
    }
    lookahead1W(262);               // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' | 'ordered' | 'return' |
                                    // 'same' | 'satisfies' | 'stable' | 'start' | 'weight' | 'where' | 'window' |
                                    // 'with' | 'without' | '|}' | '}'
    if (l1 == 264)                  // 'weight'
    {
      parse_FTWeight();
    }
    endNonterminal("FTPrimaryWithOptions");
  }

  function try_FTPrimaryWithOptions()
  {
    try_FTPrimary();
    lookahead1W(263);               // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' | 'ordered' | 'return' |
                                    // 'same' | 'satisfies' | 'stable' | 'start' | 'using' | 'weight' | 'where' |
                                    // 'window' | 'with' | 'without' | '|}' | '}'
    if (l1 == 259)                  // 'using'
    {
      try_FTMatchOptions();
    }
    lookahead1W(262);               // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' | 'ordered' | 'return' |
                                    // 'same' | 'satisfies' | 'stable' | 'start' | 'weight' | 'where' | 'window' |
                                    // 'with' | 'without' | '|}' | '}'
    if (l1 == 264)                  // 'weight'
    {
      try_FTWeight();
    }
  }

  function parse_FTPrimary()
  {
    startNonterminal("FTPrimary");
    lookahead1W(187);               // StringLiteral | S^WS | '(' | '(#' | '(:' | '{'
    switch (l1)
    {
    case 34:                        // '('
      shift(34);                    // '('
      lookahead1W(37);              // EPSILON | S^WS | '(:'
      parse_FTSelection();
      lookahead1W(47);              // S^WS | '(:' | ')'
      shift(37);                    // ')'
      break;
    case 35:                        // '(#'
      parse_FTExtensionSelection();
      break;
    default:
      parse_FTWords();
      lookahead1W(265);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'occurs' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'using' | 'weight' |
                                    // 'where' | 'window' | 'with' | 'without' | '|}' | '}'
      if (l1 == 195)                // 'occurs'
      {
        parse_FTTimes();
      }
    }
    endNonterminal("FTPrimary");
  }

  function try_FTPrimary()
  {
    lookahead1W(187);               // StringLiteral | S^WS | '(' | '(#' | '(:' | '{'
    switch (l1)
    {
    case 34:                        // '('
      shiftT(34);                   // '('
      lookahead1W(37);              // EPSILON | S^WS | '(:'
      try_FTSelection();
      lookahead1W(47);              // S^WS | '(:' | ')'
      shiftT(37);                   // ')'
      break;
    case 35:                        // '(#'
      try_FTExtensionSelection();
      break;
    default:
      try_FTWords();
      lookahead1W(265);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'occurs' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'using' | 'weight' |
                                    // 'where' | 'window' | 'with' | 'without' | '|}' | '}'
      if (l1 == 195)                // 'occurs'
      {
        try_FTTimes();
      }
    }
  }

  function parse_FTWords()
  {
    startNonterminal("FTWords");
    parse_FTWordsValue();
    lookahead1W(272);               // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'all' | 'and' | 'any' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'occurs' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'phrase' | 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'using' |
                                    // 'weight' | 'where' | 'window' | 'with' | 'without' | '|}' | '}'
    if (l1 == 71                    // 'all'
     || l1 == 76                    // 'any'
     || l1 == 210)                  // 'phrase'
    {
      parse_FTAnyallOption();
    }
    endNonterminal("FTWords");
  }

  function try_FTWords()
  {
    try_FTWordsValue();
    lookahead1W(272);               // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'all' | 'and' | 'any' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'occurs' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'phrase' | 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'using' |
                                    // 'weight' | 'where' | 'window' | 'with' | 'without' | '|}' | '}'
    if (l1 == 71                    // 'all'
     || l1 == 76                    // 'any'
     || l1 == 210)                  // 'phrase'
    {
      try_FTAnyallOption();
    }
  }

  function parse_FTWordsValue()
  {
    startNonterminal("FTWordsValue");
    lookahead1(23);                 // StringLiteral | '{'
    switch (l1)
    {
    case 11:                        // StringLiteral
      shift(11);                    // StringLiteral
      break;
    default:
      shift(276);                   // '{'
      lookahead1W(37);              // EPSILON | S^WS | '(:'
      parse_Expr();
      lookahead1W(115);             // S^WS | '(:' | '}'
      shift(282);                   // '}'
    }
    endNonterminal("FTWordsValue");
  }

  function try_FTWordsValue()
  {
    lookahead1(23);                 // StringLiteral | '{'
    switch (l1)
    {
    case 11:                        // StringLiteral
      shiftT(11);                   // StringLiteral
      break;
    default:
      shiftT(276);                  // '{'
      lookahead1W(37);              // EPSILON | S^WS | '(:'
      try_Expr();
      lookahead1W(115);             // S^WS | '(:' | '}'
      shiftT(282);                  // '}'
    }
  }

  function parse_FTExtensionSelection()
  {
    startNonterminal("FTExtensionSelection");
    for (;;)
    {
      parse_Pragma();
      lookahead1W(128);             // S^WS | '(#' | '(:' | '{'
      if (l1 != 35)                 // '(#'
      {
        break;
      }
    }
    shift(276);                     // '{'
    lookahead1W(200);               // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{' | '}'
    if (l1 != 282)                  // '}'
    {
      parse_FTSelection();
    }
    lookahead1W(115);               // S^WS | '(:' | '}'
    shift(282);                     // '}'
    endNonterminal("FTExtensionSelection");
  }

  function try_FTExtensionSelection()
  {
    for (;;)
    {
      try_Pragma();
      lookahead1W(128);             // S^WS | '(#' | '(:' | '{'
      if (l1 != 35)                 // '(#'
      {
        break;
      }
    }
    shiftT(276);                    // '{'
    lookahead1W(200);               // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{' | '}'
    if (l1 != 282)                  // '}'
    {
      try_FTSelection();
    }
    lookahead1W(115);               // S^WS | '(:' | '}'
    shiftT(282);                    // '}'
  }

  function parse_FTAnyallOption()
  {
    startNonterminal("FTAnyallOption");
    switch (l1)
    {
    case 76:                        // 'any'
      shift(76);                    // 'any'
      lookahead1W(268);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'occurs' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'using' | 'weight' |
                                    // 'where' | 'window' | 'with' | 'without' | 'word' | '|}' | '}'
      if (l1 == 272)                // 'word'
      {
        shift(272);                 // 'word'
      }
      break;
    case 71:                        // 'all'
      shift(71);                    // 'all'
      lookahead1W(269);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'occurs' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'using' | 'weight' |
                                    // 'where' | 'window' | 'with' | 'without' | 'words' | '|}' | '}'
      if (l1 == 273)                // 'words'
      {
        shift(273);                 // 'words'
      }
      break;
    default:
      shift(210);                   // 'phrase'
    }
    endNonterminal("FTAnyallOption");
  }

  function try_FTAnyallOption()
  {
    switch (l1)
    {
    case 76:                        // 'any'
      shiftT(76);                   // 'any'
      lookahead1W(268);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'occurs' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'using' | 'weight' |
                                    // 'where' | 'window' | 'with' | 'without' | 'word' | '|}' | '}'
      if (l1 == 272)                // 'word'
      {
        shiftT(272);                // 'word'
      }
      break;
    case 71:                        // 'all'
      shiftT(71);                   // 'all'
      lookahead1W(269);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'occurs' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'using' | 'weight' |
                                    // 'where' | 'window' | 'with' | 'without' | 'words' | '|}' | '}'
      if (l1 == 273)                // 'words'
      {
        shiftT(273);                // 'words'
      }
      break;
    default:
      shiftT(210);                  // 'phrase'
    }
  }

  function parse_FTTimes()
  {
    startNonterminal("FTTimes");
    shift(195);                     // 'occurs'
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    parse_FTRange();
    lookahead1W(103);               // S^WS | '(:' | 'times'
    shift(247);                     // 'times'
    endNonterminal("FTTimes");
  }

  function try_FTTimes()
  {
    shiftT(195);                    // 'occurs'
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    try_FTRange();
    lookahead1W(103);               // S^WS | '(:' | 'times'
    shiftT(247);                    // 'times'
  }

  function parse_FTRange()
  {
    startNonterminal("FTRange");
    lookahead1(117);                // 'at' | 'exactly' | 'from'
    switch (l1)
    {
    case 130:                       // 'exactly'
      shift(130);                   // 'exactly'
      lookahead1W(37);              // EPSILON | S^WS | '(:'
      parse_AdditiveExpr();
      break;
    case 81:                        // 'at'
      shift(81);                    // 'at'
      lookahead1W(158);             // S^WS | '(:' | 'least' | 'most'
      switch (l1)
      {
      case 173:                     // 'least'
        shift(173);                 // 'least'
        lookahead1W(37);            // EPSILON | S^WS | '(:'
        parse_AdditiveExpr();
        break;
      default:
        shift(183);                 // 'most'
        lookahead1W(37);            // EPSILON | S^WS | '(:'
        parse_AdditiveExpr();
      }
      break;
    default:
      shift(140);                   // 'from'
      lookahead1W(37);              // EPSILON | S^WS | '(:'
      parse_AdditiveExpr();
      lookahead1W(104);             // S^WS | '(:' | 'to'
      shift(248);                   // 'to'
      lookahead1W(37);              // EPSILON | S^WS | '(:'
      parse_AdditiveExpr();
    }
    endNonterminal("FTRange");
  }

  function try_FTRange()
  {
    lookahead1(117);                // 'at' | 'exactly' | 'from'
    switch (l1)
    {
    case 130:                       // 'exactly'
      shiftT(130);                  // 'exactly'
      lookahead1W(37);              // EPSILON | S^WS | '(:'
      try_AdditiveExpr();
      break;
    case 81:                        // 'at'
      shiftT(81);                   // 'at'
      lookahead1W(158);             // S^WS | '(:' | 'least' | 'most'
      switch (l1)
      {
      case 173:                     // 'least'
        shiftT(173);                // 'least'
        lookahead1W(37);            // EPSILON | S^WS | '(:'
        try_AdditiveExpr();
        break;
      default:
        shiftT(183);                // 'most'
        lookahead1W(37);            // EPSILON | S^WS | '(:'
        try_AdditiveExpr();
      }
      break;
    default:
      shiftT(140);                  // 'from'
      lookahead1W(37);              // EPSILON | S^WS | '(:'
      try_AdditiveExpr();
      lookahead1W(104);             // S^WS | '(:' | 'to'
      shiftT(248);                  // 'to'
      lookahead1W(37);              // EPSILON | S^WS | '(:'
      try_AdditiveExpr();
    }
  }

  function parse_FTPosFilter()
  {
    startNonterminal("FTPosFilter");
    switch (l1)
    {
    case 202:                       // 'ordered'
      parse_FTOrder();
      break;
    case 269:                       // 'window'
      parse_FTWindow();
      break;
    case 117:                       // 'distance'
      parse_FTDistance();
      break;
    case 115:                       // 'different'
    case 223:                       // 'same'
      parse_FTScope();
      break;
    default:
      parse_FTContent();
    }
    endNonterminal("FTPosFilter");
  }

  function try_FTPosFilter()
  {
    switch (l1)
    {
    case 202:                       // 'ordered'
      try_FTOrder();
      break;
    case 269:                       // 'window'
      try_FTWindow();
      break;
    case 117:                       // 'distance'
      try_FTDistance();
      break;
    case 115:                       // 'different'
    case 223:                       // 'same'
      try_FTScope();
      break;
    default:
      try_FTContent();
    }
  }

  function parse_FTOrder()
  {
    startNonterminal("FTOrder");
    shift(202);                     // 'ordered'
    endNonterminal("FTOrder");
  }

  function try_FTOrder()
  {
    shiftT(202);                    // 'ordered'
  }

  function parse_FTWindow()
  {
    startNonterminal("FTWindow");
    shift(269);                     // 'window'
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    parse_AdditiveExpr();
    lookahead1W(185);               // S^WS | '(:' | 'paragraphs' | 'sentences' | 'words'
    parse_FTUnit();
    endNonterminal("FTWindow");
  }

  function try_FTWindow()
  {
    shiftT(269);                    // 'window'
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    try_AdditiveExpr();
    lookahead1W(185);               // S^WS | '(:' | 'paragraphs' | 'sentences' | 'words'
    try_FTUnit();
  }

  function parse_FTDistance()
  {
    startNonterminal("FTDistance");
    shift(117);                     // 'distance'
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    parse_FTRange();
    lookahead1W(185);               // S^WS | '(:' | 'paragraphs' | 'sentences' | 'words'
    parse_FTUnit();
    endNonterminal("FTDistance");
  }

  function try_FTDistance()
  {
    shiftT(117);                    // 'distance'
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    try_FTRange();
    lookahead1W(185);               // S^WS | '(:' | 'paragraphs' | 'sentences' | 'words'
    try_FTUnit();
  }

  function parse_FTUnit()
  {
    startNonterminal("FTUnit");
    lookahead1(118);                // 'paragraphs' | 'sentences' | 'words'
    switch (l1)
    {
    case 273:                       // 'words'
      shift(273);                   // 'words'
      break;
    case 232:                       // 'sentences'
      shift(232);                   // 'sentences'
      break;
    default:
      shift(205);                   // 'paragraphs'
    }
    endNonterminal("FTUnit");
  }

  function try_FTUnit()
  {
    lookahead1(118);                // 'paragraphs' | 'sentences' | 'words'
    switch (l1)
    {
    case 273:                       // 'words'
      shiftT(273);                  // 'words'
      break;
    case 232:                       // 'sentences'
      shiftT(232);                  // 'sentences'
      break;
    default:
      shiftT(205);                  // 'paragraphs'
    }
  }

  function parse_FTScope()
  {
    startNonterminal("FTScope");
    switch (l1)
    {
    case 223:                       // 'same'
      shift(223);                   // 'same'
      break;
    default:
      shift(115);                   // 'different'
    }
    lookahead1W(165);               // S^WS | '(:' | 'paragraph' | 'sentence'
    parse_FTBigUnit();
    endNonterminal("FTScope");
  }

  function try_FTScope()
  {
    switch (l1)
    {
    case 223:                       // 'same'
      shiftT(223);                  // 'same'
      break;
    default:
      shiftT(115);                  // 'different'
    }
    lookahead1W(165);               // S^WS | '(:' | 'paragraph' | 'sentence'
    try_FTBigUnit();
  }

  function parse_FTBigUnit()
  {
    startNonterminal("FTBigUnit");
    lookahead1(36);                 // 'paragraph' | 'sentence'
    switch (l1)
    {
    case 231:                       // 'sentence'
      shift(231);                   // 'sentence'
      break;
    default:
      shift(204);                   // 'paragraph'
    }
    endNonterminal("FTBigUnit");
  }

  function try_FTBigUnit()
  {
    lookahead1(36);                 // 'paragraph' | 'sentence'
    switch (l1)
    {
    case 231:                       // 'sentence'
      shiftT(231);                  // 'sentence'
      break;
    default:
      shiftT(204);                  // 'paragraph'
    }
  }

  function parse_FTContent()
  {
    startNonterminal("FTContent");
    switch (l1)
    {
    case 81:                        // 'at'
      shift(81);                    // 'at'
      lookahead1W(150);             // S^WS | '(:' | 'end' | 'start'
      switch (l1)
      {
      case 237:                     // 'start'
        shift(237);                 // 'start'
        break;
      default:
        shift(126);                 // 'end'
      }
      break;
    default:
      shift(127);                   // 'entire'
      lookahead1W(67);              // S^WS | '(:' | 'content'
      shift(100);                   // 'content'
    }
    endNonterminal("FTContent");
  }

  function try_FTContent()
  {
    switch (l1)
    {
    case 81:                        // 'at'
      shiftT(81);                   // 'at'
      lookahead1W(150);             // S^WS | '(:' | 'end' | 'start'
      switch (l1)
      {
      case 237:                     // 'start'
        shiftT(237);                // 'start'
        break;
      default:
        shiftT(126);                // 'end'
      }
      break;
    default:
      shiftT(127);                  // 'entire'
      lookahead1W(67);              // S^WS | '(:' | 'content'
      shiftT(100);                  // 'content'
    }
  }

  function parse_FTMatchOptions()
  {
    startNonterminal("FTMatchOptions");
    for (;;)
    {
      lookahead1W(106);             // S^WS | '(:' | 'using'
      shift(259);                   // 'using'
      lookahead1W(37);              // EPSILON | S^WS | '(:'
      parse_FTMatchOption();
      lookahead1W(263);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' | 'ordered' | 'return' |
                                    // 'same' | 'satisfies' | 'stable' | 'start' | 'using' | 'weight' | 'where' |
                                    // 'window' | 'with' | 'without' | '|}' | '}'
      if (l1 != 259)                // 'using'
      {
        break;
      }
    }
    endNonterminal("FTMatchOptions");
  }

  function try_FTMatchOptions()
  {
    for (;;)
    {
      lookahead1W(106);             // S^WS | '(:' | 'using'
      shiftT(259);                  // 'using'
      lookahead1W(37);              // EPSILON | S^WS | '(:'
      try_FTMatchOption();
      lookahead1W(263);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' | 'ordered' | 'return' |
                                    // 'same' | 'satisfies' | 'stable' | 'start' | 'using' | 'weight' | 'where' |
                                    // 'window' | 'with' | 'without' | '|}' | '}'
      if (l1 != 259)                // 'using'
      {
        break;
      }
    }
  }

  function parse_FTMatchOption()
  {
    startNonterminal("FTMatchOption");
    lookahead1(213);                // 'case' | 'diacritics' | 'language' | 'lowercase' | 'no' | 'option' | 'stemming' |
                                    // 'stop' | 'thesaurus' | 'uppercase' | 'wildcards'
    switch (l1)
    {
    case 188:                       // 'no'
      lookahead2W(195);             // S^WS | '(:' | 'stemming' | 'stop' | 'thesaurus' | 'wildcards'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 169:                       // 'language'
      parse_FTLanguageOption();
      break;
    case 268:                       // 'wildcards'
    case 137404:                    // 'no' 'wildcards'
      parse_FTWildCardOption();
      break;
    case 246:                       // 'thesaurus'
    case 126140:                    // 'no' 'thesaurus'
      parse_FTThesaurusOption();
      break;
    case 238:                       // 'stemming'
    case 122044:                    // 'no' 'stemming'
      parse_FTStemOption();
      break;
    case 114:                       // 'diacritics'
      parse_FTDiacriticsOption();
      break;
    case 239:                       // 'stop'
    case 122556:                    // 'no' 'stop'
      parse_FTStopWordOption();
      break;
    case 199:                       // 'option'
      parse_FTExtensionOption();
      break;
    default:
      parse_FTCaseOption();
    }
    endNonterminal("FTMatchOption");
  }

  function try_FTMatchOption()
  {
    lookahead1(213);                // 'case' | 'diacritics' | 'language' | 'lowercase' | 'no' | 'option' | 'stemming' |
                                    // 'stop' | 'thesaurus' | 'uppercase' | 'wildcards'
    switch (l1)
    {
    case 188:                       // 'no'
      lookahead2W(195);             // S^WS | '(:' | 'stemming' | 'stop' | 'thesaurus' | 'wildcards'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 169:                       // 'language'
      try_FTLanguageOption();
      break;
    case 268:                       // 'wildcards'
    case 137404:                    // 'no' 'wildcards'
      try_FTWildCardOption();
      break;
    case 246:                       // 'thesaurus'
    case 126140:                    // 'no' 'thesaurus'
      try_FTThesaurusOption();
      break;
    case 238:                       // 'stemming'
    case 122044:                    // 'no' 'stemming'
      try_FTStemOption();
      break;
    case 114:                       // 'diacritics'
      try_FTDiacriticsOption();
      break;
    case 239:                       // 'stop'
    case 122556:                    // 'no' 'stop'
      try_FTStopWordOption();
      break;
    case 199:                       // 'option'
      try_FTExtensionOption();
      break;
    default:
      try_FTCaseOption();
    }
  }

  function parse_FTCaseOption()
  {
    startNonterminal("FTCaseOption");
    switch (l1)
    {
    case 88:                        // 'case'
      shift(88);                    // 'case'
      lookahead1W(157);             // S^WS | '(:' | 'insensitive' | 'sensitive'
      switch (l1)
      {
      case 158:                     // 'insensitive'
        shift(158);                 // 'insensitive'
        break;
      default:
        shift(230);                 // 'sensitive'
      }
      break;
    case 177:                       // 'lowercase'
      shift(177);                   // 'lowercase'
      break;
    default:
      shift(258);                   // 'uppercase'
    }
    endNonterminal("FTCaseOption");
  }

  function try_FTCaseOption()
  {
    switch (l1)
    {
    case 88:                        // 'case'
      shiftT(88);                   // 'case'
      lookahead1W(157);             // S^WS | '(:' | 'insensitive' | 'sensitive'
      switch (l1)
      {
      case 158:                     // 'insensitive'
        shiftT(158);                // 'insensitive'
        break;
      default:
        shiftT(230);                // 'sensitive'
      }
      break;
    case 177:                       // 'lowercase'
      shiftT(177);                  // 'lowercase'
      break;
    default:
      shiftT(258);                  // 'uppercase'
    }
  }

  function parse_FTDiacriticsOption()
  {
    startNonterminal("FTDiacriticsOption");
    shift(114);                     // 'diacritics'
    lookahead1W(157);               // S^WS | '(:' | 'insensitive' | 'sensitive'
    switch (l1)
    {
    case 158:                       // 'insensitive'
      shift(158);                   // 'insensitive'
      break;
    default:
      shift(230);                   // 'sensitive'
    }
    endNonterminal("FTDiacriticsOption");
  }

  function try_FTDiacriticsOption()
  {
    shiftT(114);                    // 'diacritics'
    lookahead1W(157);               // S^WS | '(:' | 'insensitive' | 'sensitive'
    switch (l1)
    {
    case 158:                       // 'insensitive'
      shiftT(158);                  // 'insensitive'
      break;
    default:
      shiftT(230);                  // 'sensitive'
    }
  }

  function parse_FTStemOption()
  {
    startNonterminal("FTStemOption");
    switch (l1)
    {
    case 238:                       // 'stemming'
      shift(238);                   // 'stemming'
      break;
    default:
      shift(188);                   // 'no'
      lookahead1W(98);              // S^WS | '(:' | 'stemming'
      shift(238);                   // 'stemming'
    }
    endNonterminal("FTStemOption");
  }

  function try_FTStemOption()
  {
    switch (l1)
    {
    case 238:                       // 'stemming'
      shiftT(238);                  // 'stemming'
      break;
    default:
      shiftT(188);                  // 'no'
      lookahead1W(98);              // S^WS | '(:' | 'stemming'
      shiftT(238);                  // 'stemming'
    }
  }

  function parse_FTThesaurusOption()
  {
    startNonterminal("FTThesaurusOption");
    switch (l1)
    {
    case 246:                       // 'thesaurus'
      shift(246);                   // 'thesaurus'
      lookahead1W(174);             // S^WS | '(' | '(:' | 'at' | 'default'
      switch (l1)
      {
      case 81:                      // 'at'
        parse_FTThesaurusID();
        break;
      case 109:                     // 'default'
        shift(109);                 // 'default'
        break;
      default:
        shift(34);                  // '('
        lookahead1W(143);           // S^WS | '(:' | 'at' | 'default'
        switch (l1)
        {
        case 81:                    // 'at'
          parse_FTThesaurusID();
          break;
        default:
          shift(109);               // 'default'
        }
        for (;;)
        {
          lookahead1W(129);         // S^WS | '(:' | ')' | ','
          if (l1 != 41)             // ','
          {
            break;
          }
          shift(41);                // ','
          lookahead1W(37);          // EPSILON | S^WS | '(:'
          parse_FTThesaurusID();
        }
        shift(37);                  // ')'
      }
      break;
    default:
      shift(188);                   // 'no'
      lookahead1W(102);             // S^WS | '(:' | 'thesaurus'
      shift(246);                   // 'thesaurus'
    }
    endNonterminal("FTThesaurusOption");
  }

  function try_FTThesaurusOption()
  {
    switch (l1)
    {
    case 246:                       // 'thesaurus'
      shiftT(246);                  // 'thesaurus'
      lookahead1W(174);             // S^WS | '(' | '(:' | 'at' | 'default'
      switch (l1)
      {
      case 81:                      // 'at'
        try_FTThesaurusID();
        break;
      case 109:                     // 'default'
        shiftT(109);                // 'default'
        break;
      default:
        shiftT(34);                 // '('
        lookahead1W(143);           // S^WS | '(:' | 'at' | 'default'
        switch (l1)
        {
        case 81:                    // 'at'
          try_FTThesaurusID();
          break;
        default:
          shiftT(109);              // 'default'
        }
        for (;;)
        {
          lookahead1W(129);         // S^WS | '(:' | ')' | ','
          if (l1 != 41)             // ','
          {
            break;
          }
          shiftT(41);               // ','
          lookahead1W(37);          // EPSILON | S^WS | '(:'
          try_FTThesaurusID();
        }
        shiftT(37);                 // ')'
      }
      break;
    default:
      shiftT(188);                  // 'no'
      lookahead1W(102);             // S^WS | '(:' | 'thesaurus'
      shiftT(246);                  // 'thesaurus'
    }
  }

  function parse_FTThesaurusID()
  {
    startNonterminal("FTThesaurusID");
    lookahead1(13);                 // 'at'
    shift(81);                      // 'at'
    lookahead1W(38);                // URILiteral | S^WS | '(:'
    shift(7);                       // URILiteral
    lookahead1W(271);               // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' |
                                    // 'exactly' | 'for' | 'from' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'relationship' | 'return' | 'same' | 'satisfies' | 'stable' |
                                    // 'start' | 'using' | 'weight' | 'where' | 'window' | 'with' | 'without' | '|}' |
                                    // '}'
    if (l1 == 217)                  // 'relationship'
    {
      shift(217);                   // 'relationship'
      lookahead1W(40);              // StringLiteral | S^WS | '(:'
      shift(11);                    // StringLiteral
    }
    lookahead1W(266);               // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' |
                                    // 'exactly' | 'for' | 'from' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'using' |
                                    // 'weight' | 'where' | 'window' | 'with' | 'without' | '|}' | '}'
    switch (l1)
    {
    case 81:                        // 'at'
      lookahead2W(199);             // S^WS | '(:' | 'end' | 'least' | 'most' | 'position' | 'start'
      break;
    default:
      lk = l1;
    }
    if (lk == 130                   // 'exactly'
     || lk == 140                   // 'from'
     || lk == 88657                 // 'at' 'least'
     || lk == 93777)                // 'at' 'most'
    {
      parse_FTLiteralRange();
      lookahead1W(82);              // S^WS | '(:' | 'levels'
      shift(175);                   // 'levels'
    }
    endNonterminal("FTThesaurusID");
  }

  function try_FTThesaurusID()
  {
    lookahead1(13);                 // 'at'
    shiftT(81);                     // 'at'
    lookahead1W(38);                // URILiteral | S^WS | '(:'
    shiftT(7);                      // URILiteral
    lookahead1W(271);               // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' |
                                    // 'exactly' | 'for' | 'from' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'relationship' | 'return' | 'same' | 'satisfies' | 'stable' |
                                    // 'start' | 'using' | 'weight' | 'where' | 'window' | 'with' | 'without' | '|}' |
                                    // '}'
    if (l1 == 217)                  // 'relationship'
    {
      shiftT(217);                  // 'relationship'
      lookahead1W(40);              // StringLiteral | S^WS | '(:'
      shiftT(11);                   // StringLiteral
    }
    lookahead1W(266);               // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' |
                                    // 'exactly' | 'for' | 'from' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'using' |
                                    // 'weight' | 'where' | 'window' | 'with' | 'without' | '|}' | '}'
    switch (l1)
    {
    case 81:                        // 'at'
      lookahead2W(199);             // S^WS | '(:' | 'end' | 'least' | 'most' | 'position' | 'start'
      break;
    default:
      lk = l1;
    }
    if (lk == 130                   // 'exactly'
     || lk == 140                   // 'from'
     || lk == 88657                 // 'at' 'least'
     || lk == 93777)                // 'at' 'most'
    {
      try_FTLiteralRange();
      lookahead1W(82);              // S^WS | '(:' | 'levels'
      shiftT(175);                  // 'levels'
    }
  }

  function parse_FTLiteralRange()
  {
    startNonterminal("FTLiteralRange");
    switch (l1)
    {
    case 130:                       // 'exactly'
      shift(130);                   // 'exactly'
      lookahead1W(39);              // IntegerLiteral | S^WS | '(:'
      shift(8);                     // IntegerLiteral
      break;
    case 81:                        // 'at'
      shift(81);                    // 'at'
      lookahead1W(158);             // S^WS | '(:' | 'least' | 'most'
      switch (l1)
      {
      case 173:                     // 'least'
        shift(173);                 // 'least'
        lookahead1W(39);            // IntegerLiteral | S^WS | '(:'
        shift(8);                   // IntegerLiteral
        break;
      default:
        shift(183);                 // 'most'
        lookahead1W(39);            // IntegerLiteral | S^WS | '(:'
        shift(8);                   // IntegerLiteral
      }
      break;
    default:
      shift(140);                   // 'from'
      lookahead1W(39);              // IntegerLiteral | S^WS | '(:'
      shift(8);                     // IntegerLiteral
      lookahead1W(104);             // S^WS | '(:' | 'to'
      shift(248);                   // 'to'
      lookahead1W(39);              // IntegerLiteral | S^WS | '(:'
      shift(8);                     // IntegerLiteral
    }
    endNonterminal("FTLiteralRange");
  }

  function try_FTLiteralRange()
  {
    switch (l1)
    {
    case 130:                       // 'exactly'
      shiftT(130);                  // 'exactly'
      lookahead1W(39);              // IntegerLiteral | S^WS | '(:'
      shiftT(8);                    // IntegerLiteral
      break;
    case 81:                        // 'at'
      shiftT(81);                   // 'at'
      lookahead1W(158);             // S^WS | '(:' | 'least' | 'most'
      switch (l1)
      {
      case 173:                     // 'least'
        shiftT(173);                // 'least'
        lookahead1W(39);            // IntegerLiteral | S^WS | '(:'
        shiftT(8);                  // IntegerLiteral
        break;
      default:
        shiftT(183);                // 'most'
        lookahead1W(39);            // IntegerLiteral | S^WS | '(:'
        shiftT(8);                  // IntegerLiteral
      }
      break;
    default:
      shiftT(140);                  // 'from'
      lookahead1W(39);              // IntegerLiteral | S^WS | '(:'
      shiftT(8);                    // IntegerLiteral
      lookahead1W(104);             // S^WS | '(:' | 'to'
      shiftT(248);                  // 'to'
      lookahead1W(39);              // IntegerLiteral | S^WS | '(:'
      shiftT(8);                    // IntegerLiteral
    }
  }

  function parse_FTStopWordOption()
  {
    startNonterminal("FTStopWordOption");
    switch (l1)
    {
    case 239:                       // 'stop'
      shift(239);                   // 'stop'
      lookahead1W(112);             // S^WS | '(:' | 'words'
      shift(273);                   // 'words'
      lookahead1W(174);             // S^WS | '(' | '(:' | 'at' | 'default'
      switch (l1)
      {
      case 109:                     // 'default'
        shift(109);                 // 'default'
        for (;;)
        {
          lookahead1W(267);         // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' |
                                    // 'except' | 'for' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'union' |
                                    // 'using' | 'weight' | 'where' | 'window' | 'with' | 'without' | '|}' | '}'
          if (l1 != 131             // 'except'
           && l1 != 254)            // 'union'
          {
            break;
          }
          parse_FTStopWordsInclExcl();
        }
        break;
      default:
        parse_FTStopWords();
        for (;;)
        {
          lookahead1W(267);         // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' |
                                    // 'except' | 'for' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'union' |
                                    // 'using' | 'weight' | 'where' | 'window' | 'with' | 'without' | '|}' | '}'
          if (l1 != 131             // 'except'
           && l1 != 254)            // 'union'
          {
            break;
          }
          parse_FTStopWordsInclExcl();
        }
      }
      break;
    default:
      shift(188);                   // 'no'
      lookahead1W(99);              // S^WS | '(:' | 'stop'
      shift(239);                   // 'stop'
      lookahead1W(112);             // S^WS | '(:' | 'words'
      shift(273);                   // 'words'
    }
    endNonterminal("FTStopWordOption");
  }

  function try_FTStopWordOption()
  {
    switch (l1)
    {
    case 239:                       // 'stop'
      shiftT(239);                  // 'stop'
      lookahead1W(112);             // S^WS | '(:' | 'words'
      shiftT(273);                  // 'words'
      lookahead1W(174);             // S^WS | '(' | '(:' | 'at' | 'default'
      switch (l1)
      {
      case 109:                     // 'default'
        shiftT(109);                // 'default'
        for (;;)
        {
          lookahead1W(267);         // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' |
                                    // 'except' | 'for' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'union' |
                                    // 'using' | 'weight' | 'where' | 'window' | 'with' | 'without' | '|}' | '}'
          if (l1 != 131             // 'except'
           && l1 != 254)            // 'union'
          {
            break;
          }
          try_FTStopWordsInclExcl();
        }
        break;
      default:
        try_FTStopWords();
        for (;;)
        {
          lookahead1W(267);         // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' |
                                    // 'except' | 'for' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'union' |
                                    // 'using' | 'weight' | 'where' | 'window' | 'with' | 'without' | '|}' | '}'
          if (l1 != 131             // 'except'
           && l1 != 254)            // 'union'
          {
            break;
          }
          try_FTStopWordsInclExcl();
        }
      }
      break;
    default:
      shiftT(188);                  // 'no'
      lookahead1W(99);              // S^WS | '(:' | 'stop'
      shiftT(239);                  // 'stop'
      lookahead1W(112);             // S^WS | '(:' | 'words'
      shiftT(273);                  // 'words'
    }
  }

  function parse_FTStopWords()
  {
    startNonterminal("FTStopWords");
    lookahead1(31);                 // '(' | 'at'
    switch (l1)
    {
    case 81:                        // 'at'
      shift(81);                    // 'at'
      lookahead1W(38);              // URILiteral | S^WS | '(:'
      shift(7);                     // URILiteral
      break;
    default:
      shift(34);                    // '('
      lookahead1W(40);              // StringLiteral | S^WS | '(:'
      shift(11);                    // StringLiteral
      for (;;)
      {
        lookahead1W(129);           // S^WS | '(:' | ')' | ','
        if (l1 != 41)               // ','
        {
          break;
        }
        shift(41);                  // ','
        lookahead1W(40);            // StringLiteral | S^WS | '(:'
        shift(11);                  // StringLiteral
      }
      shift(37);                    // ')'
    }
    endNonterminal("FTStopWords");
  }

  function try_FTStopWords()
  {
    lookahead1(31);                 // '(' | 'at'
    switch (l1)
    {
    case 81:                        // 'at'
      shiftT(81);                   // 'at'
      lookahead1W(38);              // URILiteral | S^WS | '(:'
      shiftT(7);                    // URILiteral
      break;
    default:
      shiftT(34);                   // '('
      lookahead1W(40);              // StringLiteral | S^WS | '(:'
      shiftT(11);                   // StringLiteral
      for (;;)
      {
        lookahead1W(129);           // S^WS | '(:' | ')' | ','
        if (l1 != 41)               // ','
        {
          break;
        }
        shiftT(41);                 // ','
        lookahead1W(40);            // StringLiteral | S^WS | '(:'
        shiftT(11);                 // StringLiteral
      }
      shiftT(37);                   // ')'
    }
  }

  function parse_FTStopWordsInclExcl()
  {
    startNonterminal("FTStopWordsInclExcl");
    switch (l1)
    {
    case 254:                       // 'union'
      shift(254);                   // 'union'
      break;
    default:
      shift(131);                   // 'except'
    }
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    parse_FTStopWords();
    endNonterminal("FTStopWordsInclExcl");
  }

  function try_FTStopWordsInclExcl()
  {
    switch (l1)
    {
    case 254:                       // 'union'
      shiftT(254);                  // 'union'
      break;
    default:
      shiftT(131);                  // 'except'
    }
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    try_FTStopWords();
  }

  function parse_FTLanguageOption()
  {
    startNonterminal("FTLanguageOption");
    shift(169);                     // 'language'
    lookahead1W(40);                // StringLiteral | S^WS | '(:'
    shift(11);                      // StringLiteral
    endNonterminal("FTLanguageOption");
  }

  function try_FTLanguageOption()
  {
    shiftT(169);                    // 'language'
    lookahead1W(40);                // StringLiteral | S^WS | '(:'
    shiftT(11);                     // StringLiteral
  }

  function parse_FTWildCardOption()
  {
    startNonterminal("FTWildCardOption");
    switch (l1)
    {
    case 268:                       // 'wildcards'
      shift(268);                   // 'wildcards'
      break;
    default:
      shift(188);                   // 'no'
      lookahead1W(109);             // S^WS | '(:' | 'wildcards'
      shift(268);                   // 'wildcards'
    }
    endNonterminal("FTWildCardOption");
  }

  function try_FTWildCardOption()
  {
    switch (l1)
    {
    case 268:                       // 'wildcards'
      shiftT(268);                  // 'wildcards'
      break;
    default:
      shiftT(188);                  // 'no'
      lookahead1W(109);             // S^WS | '(:' | 'wildcards'
      shiftT(268);                  // 'wildcards'
    }
  }

  function parse_FTExtensionOption()
  {
    startNonterminal("FTExtensionOption");
    shift(199);                     // 'option'
    lookahead1W(305);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    parse_EQName();
    lookahead1W(40);                // StringLiteral | S^WS | '(:'
    shift(11);                      // StringLiteral
    endNonterminal("FTExtensionOption");
  }

  function try_FTExtensionOption()
  {
    shiftT(199);                    // 'option'
    lookahead1W(305);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    try_EQName();
    lookahead1W(40);                // StringLiteral | S^WS | '(:'
    shiftT(11);                     // StringLiteral
  }

  function parse_FTIgnoreOption()
  {
    startNonterminal("FTIgnoreOption");
    shift(271);                     // 'without'
    lookahead1W(67);                // S^WS | '(:' | 'content'
    shift(100);                     // 'content'
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    parse_UnionExpr();
    endNonterminal("FTIgnoreOption");
  }

  function try_FTIgnoreOption()
  {
    shiftT(271);                    // 'without'
    lookahead1W(67);                // S^WS | '(:' | 'content'
    shiftT(100);                    // 'content'
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    try_UnionExpr();
  }

  function parse_CollectionDecl()
  {
    startNonterminal("CollectionDecl");
    shift(95);                      // 'collection'
    lookahead1W(305);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    parse_EQName();
    lookahead1W(138);               // S^WS | '(:' | ';' | 'as'
    if (l1 == 79)                   // 'as'
    {
      parse_CollectionTypeDecl();
    }
    endNonterminal("CollectionDecl");
  }

  function parse_CollectionTypeDecl()
  {
    startNonterminal("CollectionTypeDecl");
    shift(79);                      // 'as'
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    parse_KindTest();
    lookahead1W(188);               // S^WS | '(:' | '*' | '+' | ';' | '?'
    if (l1 != 53)                   // ';'
    {
      parse_OccurrenceIndicator();
    }
    endNonterminal("CollectionTypeDecl");
  }

  function parse_IndexName()
  {
    startNonterminal("IndexName");
    parse_EQName();
    endNonterminal("IndexName");
  }

  function parse_IndexDomainExpr()
  {
    startNonterminal("IndexDomainExpr");
    parse_PathExpr();
    endNonterminal("IndexDomainExpr");
  }

  function parse_IndexKeySpec()
  {
    startNonterminal("IndexKeySpec");
    parse_IndexKeyExpr();
    lookahead1W(190);               // S^WS | '(:' | ',' | ';' | 'as' | 'collation'
    if (l1 == 79)                   // 'as'
    {
      parse_IndexKeyTypeDecl();
    }
    lookahead1W(178);               // S^WS | '(:' | ',' | ';' | 'collation'
    if (l1 == 94)                   // 'collation'
    {
      parse_IndexKeyCollation();
    }
    endNonterminal("IndexKeySpec");
  }

  function parse_IndexKeyExpr()
  {
    startNonterminal("IndexKeyExpr");
    parse_PathExpr();
    endNonterminal("IndexKeyExpr");
  }

  function parse_IndexKeyTypeDecl()
  {
    startNonterminal("IndexKeyTypeDecl");
    shift(79);                      // 'as'
    lookahead1W(305);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    parse_AtomicType();
    lookahead1W(204);               // S^WS | '(:' | '*' | '+' | ',' | ';' | '?' | 'collation'
    if (l1 == 39                    // '*'
     || l1 == 40                    // '+'
     || l1 == 64)                   // '?'
    {
      parse_OccurrenceIndicator();
    }
    endNonterminal("IndexKeyTypeDecl");
  }

  function parse_AtomicType()
  {
    startNonterminal("AtomicType");
    parse_EQName();
    endNonterminal("AtomicType");
  }

  function parse_IndexKeyCollation()
  {
    startNonterminal("IndexKeyCollation");
    shift(94);                      // 'collation'
    lookahead1W(38);                // URILiteral | S^WS | '(:'
    shift(7);                       // URILiteral
    endNonterminal("IndexKeyCollation");
  }

  function parse_IndexDecl()
  {
    startNonterminal("IndexDecl");
    shift(155);                     // 'index'
    lookahead1W(305);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    parse_IndexName();
    lookahead1W(89);                // S^WS | '(:' | 'on'
    shift(197);                     // 'on'
    lookahead1W(87);                // S^WS | '(:' | 'nodes'
    shift(192);                     // 'nodes'
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    parse_IndexDomainExpr();
    lookahead1W(59);                // S^WS | '(:' | 'by'
    shift(87);                      // 'by'
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    parse_IndexKeySpec();
    for (;;)
    {
      lookahead1W(131);             // S^WS | '(:' | ',' | ';'
      if (l1 != 41)                 // ','
      {
        break;
      }
      shift(41);                    // ','
      lookahead1W(37);              // EPSILON | S^WS | '(:'
      parse_IndexKeySpec();
    }
    endNonterminal("IndexDecl");
  }

  function parse_ICDecl()
  {
    startNonterminal("ICDecl");
    shift(161);                     // 'integrity'
    lookahead1W(65);                // S^WS | '(:' | 'constraint'
    shift(97);                      // 'constraint'
    lookahead1W(305);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    parse_EQName();
    lookahead1W(153);               // S^WS | '(:' | 'foreign' | 'on'
    switch (l1)
    {
    case 197:                       // 'on'
      parse_ICCollection();
      break;
    default:
      parse_ICForeignKey();
    }
    endNonterminal("ICDecl");
  }

  function parse_ICCollection()
  {
    startNonterminal("ICCollection");
    shift(197);                     // 'on'
    lookahead1W(64);                // S^WS | '(:' | 'collection'
    shift(95);                      // 'collection'
    lookahead1W(305);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    parse_EQName();
    lookahead1W(172);               // S^WS | '$' | '(:' | 'foreach' | 'node'
    switch (l1)
    {
    case 31:                        // '$'
      parse_ICCollSequence();
      break;
    case 191:                       // 'node'
      parse_ICCollSequenceUnique();
      break;
    default:
      parse_ICCollNode();
    }
    endNonterminal("ICCollection");
  }

  function parse_ICCollSequence()
  {
    startNonterminal("ICCollSequence");
    parse_VarRef();
    lookahead1W(62);                // S^WS | '(:' | 'check'
    shift(92);                      // 'check'
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    parse_ExprSingle();
    endNonterminal("ICCollSequence");
  }

  function parse_ICCollSequenceUnique()
  {
    startNonterminal("ICCollSequenceUnique");
    shift(191);                     // 'node'
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    parse_VarRef();
    lookahead1W(62);                // S^WS | '(:' | 'check'
    shift(92);                      // 'check'
    lookahead1W(105);               // S^WS | '(:' | 'unique'
    shift(255);                     // 'unique'
    lookahead1W(81);                // S^WS | '(:' | 'key'
    shift(168);                     // 'key'
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    parse_PathExpr();
    endNonterminal("ICCollSequenceUnique");
  }

  function parse_ICCollNode()
  {
    startNonterminal("ICCollNode");
    shift(138);                     // 'foreach'
    lookahead1W(86);                // S^WS | '(:' | 'node'
    shift(191);                     // 'node'
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    parse_VarRef();
    lookahead1W(62);                // S^WS | '(:' | 'check'
    shift(92);                      // 'check'
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    parse_ExprSingle();
    endNonterminal("ICCollNode");
  }

  function parse_ICForeignKey()
  {
    startNonterminal("ICForeignKey");
    shift(139);                     // 'foreign'
    lookahead1W(81);                // S^WS | '(:' | 'key'
    shift(168);                     // 'key'
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    parse_ICForeignKeySource();
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    parse_ICForeignKeyTarget();
    endNonterminal("ICForeignKey");
  }

  function parse_ICForeignKeySource()
  {
    startNonterminal("ICForeignKeySource");
    lookahead1(17);                 // 'from'
    shift(140);                     // 'from'
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    parse_ICForeignKeyValues();
    endNonterminal("ICForeignKeySource");
  }

  function parse_ICForeignKeyTarget()
  {
    startNonterminal("ICForeignKeyTarget");
    lookahead1(20);                 // 'to'
    shift(248);                     // 'to'
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    parse_ICForeignKeyValues();
    endNonterminal("ICForeignKeyTarget");
  }

  function parse_ICForeignKeyValues()
  {
    startNonterminal("ICForeignKeyValues");
    lookahead1(16);                 // 'collection'
    shift(95);                      // 'collection'
    lookahead1W(305);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    parse_EQName();
    lookahead1W(86);                // S^WS | '(:' | 'node'
    shift(191);                     // 'node'
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    parse_VarRef();
    lookahead1W(81);                // S^WS | '(:' | 'key'
    shift(168);                     // 'key'
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    parse_PathExpr();
    endNonterminal("ICForeignKeyValues");
  }

  function parse_Comment()
  {
    startNonterminal("Comment");
    shift(36);                      // '(:'
    for (;;)
    {
      lookahead1(116);              // CommentContents | '(:' | ':)'
      if (l1 == 50)                 // ':)'
      {
        break;
      }
      switch (l1)
      {
      case 24:                      // CommentContents
        shift(24);                  // CommentContents
        break;
      default:
        parse_Comment();
      }
    }
    shift(50);                      // ':)'
    endNonterminal("Comment");
  }

  function parse_Whitespace()
  {
    startNonterminal("Whitespace");
    lookahead1(28);                 // S^WS | '(:'
    switch (l1)
    {
    case 22:                        // S^WS
      shift(22);                    // S^WS
      break;
    default:
      parse_Comment();
    }
    endNonterminal("Whitespace");
    flushOutput();
  }

  function parse_EQName()
  {
    startNonterminal("EQName");
    lookahead1(301);                // EQName^Token | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    switch (l1)
    {
    case 82:                        // 'attribute'
      shift(82);                    // 'attribute'
      break;
    case 96:                        // 'comment'
      shift(96);                    // 'comment'
      break;
    case 120:                       // 'document-node'
      shift(120);                   // 'document-node'
      break;
    case 121:                       // 'element'
      shift(121);                   // 'element'
      break;
    case 124:                       // 'empty-sequence'
      shift(124);                   // 'empty-sequence'
      break;
    case 145:                       // 'function'
      shift(145);                   // 'function'
      break;
    case 152:                       // 'if'
      shift(152);                   // 'if'
      break;
    case 165:                       // 'item'
      shift(165);                   // 'item'
      break;
    case 185:                       // 'namespace-node'
      shift(185);                   // 'namespace-node'
      break;
    case 191:                       // 'node'
      shift(191);                   // 'node'
      break;
    case 216:                       // 'processing-instruction'
      shift(216);                   // 'processing-instruction'
      break;
    case 226:                       // 'schema-attribute'
      shift(226);                   // 'schema-attribute'
      break;
    case 227:                       // 'schema-element'
      shift(227);                   // 'schema-element'
      break;
    case 243:                       // 'switch'
      shift(243);                   // 'switch'
      break;
    case 244:                       // 'text'
      shift(244);                   // 'text'
      break;
    case 253:                       // 'typeswitch'
      shift(253);                   // 'typeswitch'
      break;
    default:
      parse_FunctionName();
    }
    endNonterminal("EQName");
  }

  function try_EQName()
  {
    lookahead1(301);                // EQName^Token | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    switch (l1)
    {
    case 82:                        // 'attribute'
      shiftT(82);                   // 'attribute'
      break;
    case 96:                        // 'comment'
      shiftT(96);                   // 'comment'
      break;
    case 120:                       // 'document-node'
      shiftT(120);                  // 'document-node'
      break;
    case 121:                       // 'element'
      shiftT(121);                  // 'element'
      break;
    case 124:                       // 'empty-sequence'
      shiftT(124);                  // 'empty-sequence'
      break;
    case 145:                       // 'function'
      shiftT(145);                  // 'function'
      break;
    case 152:                       // 'if'
      shiftT(152);                  // 'if'
      break;
    case 165:                       // 'item'
      shiftT(165);                  // 'item'
      break;
    case 185:                       // 'namespace-node'
      shiftT(185);                  // 'namespace-node'
      break;
    case 191:                       // 'node'
      shiftT(191);                  // 'node'
      break;
    case 216:                       // 'processing-instruction'
      shiftT(216);                  // 'processing-instruction'
      break;
    case 226:                       // 'schema-attribute'
      shiftT(226);                  // 'schema-attribute'
      break;
    case 227:                       // 'schema-element'
      shiftT(227);                  // 'schema-element'
      break;
    case 243:                       // 'switch'
      shiftT(243);                  // 'switch'
      break;
    case 244:                       // 'text'
      shiftT(244);                  // 'text'
      break;
    case 253:                       // 'typeswitch'
      shiftT(253);                  // 'typeswitch'
      break;
    default:
      try_FunctionName();
    }
  }

  function parse_FunctionName()
  {
    startNonterminal("FunctionName");
    lookahead1(300);                // EQName^Token | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'as' | 'ascending' | 'at' | 'base-uri' | 'before' | 'boundary-space' | 'break' |
                                    // 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'else' | 'empty' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'ne' | 'nodes' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery'
    switch (l1)
    {
    case 6:                         // EQName^Token
      shift(6);                     // EQName^Token
      break;
    case 70:                        // 'after'
      shift(70);                    // 'after'
      break;
    case 73:                        // 'ancestor'
      shift(73);                    // 'ancestor'
      break;
    case 74:                        // 'ancestor-or-self'
      shift(74);                    // 'ancestor-or-self'
      break;
    case 75:                        // 'and'
      shift(75);                    // 'and'
      break;
    case 79:                        // 'as'
      shift(79);                    // 'as'
      break;
    case 80:                        // 'ascending'
      shift(80);                    // 'ascending'
      break;
    case 84:                        // 'before'
      shift(84);                    // 'before'
      break;
    case 88:                        // 'case'
      shift(88);                    // 'case'
      break;
    case 89:                        // 'cast'
      shift(89);                    // 'cast'
      break;
    case 90:                        // 'castable'
      shift(90);                    // 'castable'
      break;
    case 93:                        // 'child'
      shift(93);                    // 'child'
      break;
    case 94:                        // 'collation'
      shift(94);                    // 'collation'
      break;
    case 103:                       // 'copy'
      shift(103);                   // 'copy'
      break;
    case 105:                       // 'count'
      shift(105);                   // 'count'
      break;
    case 108:                       // 'declare'
      shift(108);                   // 'declare'
      break;
    case 109:                       // 'default'
      shift(109);                   // 'default'
      break;
    case 110:                       // 'delete'
      shift(110);                   // 'delete'
      break;
    case 111:                       // 'descendant'
      shift(111);                   // 'descendant'
      break;
    case 112:                       // 'descendant-or-self'
      shift(112);                   // 'descendant-or-self'
      break;
    case 113:                       // 'descending'
      shift(113);                   // 'descending'
      break;
    case 118:                       // 'div'
      shift(118);                   // 'div'
      break;
    case 119:                       // 'document'
      shift(119);                   // 'document'
      break;
    case 122:                       // 'else'
      shift(122);                   // 'else'
      break;
    case 123:                       // 'empty'
      shift(123);                   // 'empty'
      break;
    case 126:                       // 'end'
      shift(126);                   // 'end'
      break;
    case 128:                       // 'eq'
      shift(128);                   // 'eq'
      break;
    case 129:                       // 'every'
      shift(129);                   // 'every'
      break;
    case 131:                       // 'except'
      shift(131);                   // 'except'
      break;
    case 134:                       // 'first'
      shift(134);                   // 'first'
      break;
    case 135:                       // 'following'
      shift(135);                   // 'following'
      break;
    case 136:                       // 'following-sibling'
      shift(136);                   // 'following-sibling'
      break;
    case 137:                       // 'for'
      shift(137);                   // 'for'
      break;
    case 146:                       // 'ge'
      shift(146);                   // 'ge'
      break;
    case 148:                       // 'group'
      shift(148);                   // 'group'
      break;
    case 150:                       // 'gt'
      shift(150);                   // 'gt'
      break;
    case 151:                       // 'idiv'
      shift(151);                   // 'idiv'
      break;
    case 153:                       // 'import'
      shift(153);                   // 'import'
      break;
    case 159:                       // 'insert'
      shift(159);                   // 'insert'
      break;
    case 160:                       // 'instance'
      shift(160);                   // 'instance'
      break;
    case 162:                       // 'intersect'
      shift(162);                   // 'intersect'
      break;
    case 163:                       // 'into'
      shift(163);                   // 'into'
      break;
    case 164:                       // 'is'
      shift(164);                   // 'is'
      break;
    case 170:                       // 'last'
      shift(170);                   // 'last'
      break;
    case 172:                       // 'le'
      shift(172);                   // 'le'
      break;
    case 174:                       // 'let'
      shift(174);                   // 'let'
      break;
    case 178:                       // 'lt'
      shift(178);                   // 'lt'
      break;
    case 180:                       // 'mod'
      shift(180);                   // 'mod'
      break;
    case 181:                       // 'modify'
      shift(181);                   // 'modify'
      break;
    case 182:                       // 'module'
      shift(182);                   // 'module'
      break;
    case 184:                       // 'namespace'
      shift(184);                   // 'namespace'
      break;
    case 186:                       // 'ne'
      shift(186);                   // 'ne'
      break;
    case 198:                       // 'only'
      shift(198);                   // 'only'
      break;
    case 200:                       // 'or'
      shift(200);                   // 'or'
      break;
    case 201:                       // 'order'
      shift(201);                   // 'order'
      break;
    case 202:                       // 'ordered'
      shift(202);                   // 'ordered'
      break;
    case 206:                       // 'parent'
      shift(206);                   // 'parent'
      break;
    case 212:                       // 'preceding'
      shift(212);                   // 'preceding'
      break;
    case 213:                       // 'preceding-sibling'
      shift(213);                   // 'preceding-sibling'
      break;
    case 218:                       // 'rename'
      shift(218);                   // 'rename'
      break;
    case 219:                       // 'replace'
      shift(219);                   // 'replace'
      break;
    case 220:                       // 'return'
      shift(220);                   // 'return'
      break;
    case 224:                       // 'satisfies'
      shift(224);                   // 'satisfies'
      break;
    case 229:                       // 'self'
      shift(229);                   // 'self'
      break;
    case 235:                       // 'some'
      shift(235);                   // 'some'
      break;
    case 236:                       // 'stable'
      shift(236);                   // 'stable'
      break;
    case 237:                       // 'start'
      shift(237);                   // 'start'
      break;
    case 248:                       // 'to'
      shift(248);                   // 'to'
      break;
    case 249:                       // 'treat'
      shift(249);                   // 'treat'
      break;
    case 250:                       // 'try'
      shift(250);                   // 'try'
      break;
    case 254:                       // 'union'
      shift(254);                   // 'union'
      break;
    case 256:                       // 'unordered'
      shift(256);                   // 'unordered'
      break;
    case 260:                       // 'validate'
      shift(260);                   // 'validate'
      break;
    case 266:                       // 'where'
      shift(266);                   // 'where'
      break;
    case 270:                       // 'with'
      shift(270);                   // 'with'
      break;
    case 274:                       // 'xquery'
      shift(274);                   // 'xquery'
      break;
    case 72:                        // 'allowing'
      shift(72);                    // 'allowing'
      break;
    case 81:                        // 'at'
      shift(81);                    // 'at'
      break;
    case 83:                        // 'base-uri'
      shift(83);                    // 'base-uri'
      break;
    case 85:                        // 'boundary-space'
      shift(85);                    // 'boundary-space'
      break;
    case 86:                        // 'break'
      shift(86);                    // 'break'
      break;
    case 91:                        // 'catch'
      shift(91);                    // 'catch'
      break;
    case 98:                        // 'construction'
      shift(98);                    // 'construction'
      break;
    case 101:                       // 'context'
      shift(101);                   // 'context'
      break;
    case 102:                       // 'continue'
      shift(102);                   // 'continue'
      break;
    case 104:                       // 'copy-namespaces'
      shift(104);                   // 'copy-namespaces'
      break;
    case 106:                       // 'decimal-format'
      shift(106);                   // 'decimal-format'
      break;
    case 125:                       // 'encoding'
      shift(125);                   // 'encoding'
      break;
    case 132:                       // 'exit'
      shift(132);                   // 'exit'
      break;
    case 133:                       // 'external'
      shift(133);                   // 'external'
      break;
    case 141:                       // 'ft-option'
      shift(141);                   // 'ft-option'
      break;
    case 154:                       // 'in'
      shift(154);                   // 'in'
      break;
    case 155:                       // 'index'
      shift(155);                   // 'index'
      break;
    case 161:                       // 'integrity'
      shift(161);                   // 'integrity'
      break;
    case 171:                       // 'lax'
      shift(171);                   // 'lax'
      break;
    case 192:                       // 'nodes'
      shift(192);                   // 'nodes'
      break;
    case 199:                       // 'option'
      shift(199);                   // 'option'
      break;
    case 203:                       // 'ordering'
      shift(203);                   // 'ordering'
      break;
    case 222:                       // 'revalidation'
      shift(222);                   // 'revalidation'
      break;
    case 225:                       // 'schema'
      shift(225);                   // 'schema'
      break;
    case 228:                       // 'score'
      shift(228);                   // 'score'
      break;
    case 234:                       // 'sliding'
      shift(234);                   // 'sliding'
      break;
    case 240:                       // 'strict'
      shift(240);                   // 'strict'
      break;
    case 251:                       // 'tumbling'
      shift(251);                   // 'tumbling'
      break;
    case 252:                       // 'type'
      shift(252);                   // 'type'
      break;
    case 257:                       // 'updating'
      shift(257);                   // 'updating'
      break;
    case 261:                       // 'value'
      shift(261);                   // 'value'
      break;
    case 262:                       // 'variable'
      shift(262);                   // 'variable'
      break;
    case 263:                       // 'version'
      shift(263);                   // 'version'
      break;
    case 267:                       // 'while'
      shift(267);                   // 'while'
      break;
    case 97:                        // 'constraint'
      shift(97);                    // 'constraint'
      break;
    case 176:                       // 'loop'
      shift(176);                   // 'loop'
      break;
    default:
      shift(221);                   // 'returning'
    }
    endNonterminal("FunctionName");
  }

  function try_FunctionName()
  {
    lookahead1(300);                // EQName^Token | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'as' | 'ascending' | 'at' | 'base-uri' | 'before' | 'boundary-space' | 'break' |
                                    // 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'else' | 'empty' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' |
                                    // 'mod' | 'modify' | 'module' | 'namespace' | 'ne' | 'nodes' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery'
    switch (l1)
    {
    case 6:                         // EQName^Token
      shiftT(6);                    // EQName^Token
      break;
    case 70:                        // 'after'
      shiftT(70);                   // 'after'
      break;
    case 73:                        // 'ancestor'
      shiftT(73);                   // 'ancestor'
      break;
    case 74:                        // 'ancestor-or-self'
      shiftT(74);                   // 'ancestor-or-self'
      break;
    case 75:                        // 'and'
      shiftT(75);                   // 'and'
      break;
    case 79:                        // 'as'
      shiftT(79);                   // 'as'
      break;
    case 80:                        // 'ascending'
      shiftT(80);                   // 'ascending'
      break;
    case 84:                        // 'before'
      shiftT(84);                   // 'before'
      break;
    case 88:                        // 'case'
      shiftT(88);                   // 'case'
      break;
    case 89:                        // 'cast'
      shiftT(89);                   // 'cast'
      break;
    case 90:                        // 'castable'
      shiftT(90);                   // 'castable'
      break;
    case 93:                        // 'child'
      shiftT(93);                   // 'child'
      break;
    case 94:                        // 'collation'
      shiftT(94);                   // 'collation'
      break;
    case 103:                       // 'copy'
      shiftT(103);                  // 'copy'
      break;
    case 105:                       // 'count'
      shiftT(105);                  // 'count'
      break;
    case 108:                       // 'declare'
      shiftT(108);                  // 'declare'
      break;
    case 109:                       // 'default'
      shiftT(109);                  // 'default'
      break;
    case 110:                       // 'delete'
      shiftT(110);                  // 'delete'
      break;
    case 111:                       // 'descendant'
      shiftT(111);                  // 'descendant'
      break;
    case 112:                       // 'descendant-or-self'
      shiftT(112);                  // 'descendant-or-self'
      break;
    case 113:                       // 'descending'
      shiftT(113);                  // 'descending'
      break;
    case 118:                       // 'div'
      shiftT(118);                  // 'div'
      break;
    case 119:                       // 'document'
      shiftT(119);                  // 'document'
      break;
    case 122:                       // 'else'
      shiftT(122);                  // 'else'
      break;
    case 123:                       // 'empty'
      shiftT(123);                  // 'empty'
      break;
    case 126:                       // 'end'
      shiftT(126);                  // 'end'
      break;
    case 128:                       // 'eq'
      shiftT(128);                  // 'eq'
      break;
    case 129:                       // 'every'
      shiftT(129);                  // 'every'
      break;
    case 131:                       // 'except'
      shiftT(131);                  // 'except'
      break;
    case 134:                       // 'first'
      shiftT(134);                  // 'first'
      break;
    case 135:                       // 'following'
      shiftT(135);                  // 'following'
      break;
    case 136:                       // 'following-sibling'
      shiftT(136);                  // 'following-sibling'
      break;
    case 137:                       // 'for'
      shiftT(137);                  // 'for'
      break;
    case 146:                       // 'ge'
      shiftT(146);                  // 'ge'
      break;
    case 148:                       // 'group'
      shiftT(148);                  // 'group'
      break;
    case 150:                       // 'gt'
      shiftT(150);                  // 'gt'
      break;
    case 151:                       // 'idiv'
      shiftT(151);                  // 'idiv'
      break;
    case 153:                       // 'import'
      shiftT(153);                  // 'import'
      break;
    case 159:                       // 'insert'
      shiftT(159);                  // 'insert'
      break;
    case 160:                       // 'instance'
      shiftT(160);                  // 'instance'
      break;
    case 162:                       // 'intersect'
      shiftT(162);                  // 'intersect'
      break;
    case 163:                       // 'into'
      shiftT(163);                  // 'into'
      break;
    case 164:                       // 'is'
      shiftT(164);                  // 'is'
      break;
    case 170:                       // 'last'
      shiftT(170);                  // 'last'
      break;
    case 172:                       // 'le'
      shiftT(172);                  // 'le'
      break;
    case 174:                       // 'let'
      shiftT(174);                  // 'let'
      break;
    case 178:                       // 'lt'
      shiftT(178);                  // 'lt'
      break;
    case 180:                       // 'mod'
      shiftT(180);                  // 'mod'
      break;
    case 181:                       // 'modify'
      shiftT(181);                  // 'modify'
      break;
    case 182:                       // 'module'
      shiftT(182);                  // 'module'
      break;
    case 184:                       // 'namespace'
      shiftT(184);                  // 'namespace'
      break;
    case 186:                       // 'ne'
      shiftT(186);                  // 'ne'
      break;
    case 198:                       // 'only'
      shiftT(198);                  // 'only'
      break;
    case 200:                       // 'or'
      shiftT(200);                  // 'or'
      break;
    case 201:                       // 'order'
      shiftT(201);                  // 'order'
      break;
    case 202:                       // 'ordered'
      shiftT(202);                  // 'ordered'
      break;
    case 206:                       // 'parent'
      shiftT(206);                  // 'parent'
      break;
    case 212:                       // 'preceding'
      shiftT(212);                  // 'preceding'
      break;
    case 213:                       // 'preceding-sibling'
      shiftT(213);                  // 'preceding-sibling'
      break;
    case 218:                       // 'rename'
      shiftT(218);                  // 'rename'
      break;
    case 219:                       // 'replace'
      shiftT(219);                  // 'replace'
      break;
    case 220:                       // 'return'
      shiftT(220);                  // 'return'
      break;
    case 224:                       // 'satisfies'
      shiftT(224);                  // 'satisfies'
      break;
    case 229:                       // 'self'
      shiftT(229);                  // 'self'
      break;
    case 235:                       // 'some'
      shiftT(235);                  // 'some'
      break;
    case 236:                       // 'stable'
      shiftT(236);                  // 'stable'
      break;
    case 237:                       // 'start'
      shiftT(237);                  // 'start'
      break;
    case 248:                       // 'to'
      shiftT(248);                  // 'to'
      break;
    case 249:                       // 'treat'
      shiftT(249);                  // 'treat'
      break;
    case 250:                       // 'try'
      shiftT(250);                  // 'try'
      break;
    case 254:                       // 'union'
      shiftT(254);                  // 'union'
      break;
    case 256:                       // 'unordered'
      shiftT(256);                  // 'unordered'
      break;
    case 260:                       // 'validate'
      shiftT(260);                  // 'validate'
      break;
    case 266:                       // 'where'
      shiftT(266);                  // 'where'
      break;
    case 270:                       // 'with'
      shiftT(270);                  // 'with'
      break;
    case 274:                       // 'xquery'
      shiftT(274);                  // 'xquery'
      break;
    case 72:                        // 'allowing'
      shiftT(72);                   // 'allowing'
      break;
    case 81:                        // 'at'
      shiftT(81);                   // 'at'
      break;
    case 83:                        // 'base-uri'
      shiftT(83);                   // 'base-uri'
      break;
    case 85:                        // 'boundary-space'
      shiftT(85);                   // 'boundary-space'
      break;
    case 86:                        // 'break'
      shiftT(86);                   // 'break'
      break;
    case 91:                        // 'catch'
      shiftT(91);                   // 'catch'
      break;
    case 98:                        // 'construction'
      shiftT(98);                   // 'construction'
      break;
    case 101:                       // 'context'
      shiftT(101);                  // 'context'
      break;
    case 102:                       // 'continue'
      shiftT(102);                  // 'continue'
      break;
    case 104:                       // 'copy-namespaces'
      shiftT(104);                  // 'copy-namespaces'
      break;
    case 106:                       // 'decimal-format'
      shiftT(106);                  // 'decimal-format'
      break;
    case 125:                       // 'encoding'
      shiftT(125);                  // 'encoding'
      break;
    case 132:                       // 'exit'
      shiftT(132);                  // 'exit'
      break;
    case 133:                       // 'external'
      shiftT(133);                  // 'external'
      break;
    case 141:                       // 'ft-option'
      shiftT(141);                  // 'ft-option'
      break;
    case 154:                       // 'in'
      shiftT(154);                  // 'in'
      break;
    case 155:                       // 'index'
      shiftT(155);                  // 'index'
      break;
    case 161:                       // 'integrity'
      shiftT(161);                  // 'integrity'
      break;
    case 171:                       // 'lax'
      shiftT(171);                  // 'lax'
      break;
    case 192:                       // 'nodes'
      shiftT(192);                  // 'nodes'
      break;
    case 199:                       // 'option'
      shiftT(199);                  // 'option'
      break;
    case 203:                       // 'ordering'
      shiftT(203);                  // 'ordering'
      break;
    case 222:                       // 'revalidation'
      shiftT(222);                  // 'revalidation'
      break;
    case 225:                       // 'schema'
      shiftT(225);                  // 'schema'
      break;
    case 228:                       // 'score'
      shiftT(228);                  // 'score'
      break;
    case 234:                       // 'sliding'
      shiftT(234);                  // 'sliding'
      break;
    case 240:                       // 'strict'
      shiftT(240);                  // 'strict'
      break;
    case 251:                       // 'tumbling'
      shiftT(251);                  // 'tumbling'
      break;
    case 252:                       // 'type'
      shiftT(252);                  // 'type'
      break;
    case 257:                       // 'updating'
      shiftT(257);                  // 'updating'
      break;
    case 261:                       // 'value'
      shiftT(261);                  // 'value'
      break;
    case 262:                       // 'variable'
      shiftT(262);                  // 'variable'
      break;
    case 263:                       // 'version'
      shiftT(263);                  // 'version'
      break;
    case 267:                       // 'while'
      shiftT(267);                  // 'while'
      break;
    case 97:                        // 'constraint'
      shiftT(97);                   // 'constraint'
      break;
    case 176:                       // 'loop'
      shiftT(176);                  // 'loop'
      break;
    default:
      shiftT(221);                  // 'returning'
    }
  }

  function parse_NCName()
  {
    startNonterminal("NCName");
    lookahead1(302);                // NCName^Token | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    switch (l1)
    {
    case 19:                        // NCName^Token
      shift(19);                    // NCName^Token
      break;
    case 70:                        // 'after'
      shift(70);                    // 'after'
      break;
    case 75:                        // 'and'
      shift(75);                    // 'and'
      break;
    case 79:                        // 'as'
      shift(79);                    // 'as'
      break;
    case 80:                        // 'ascending'
      shift(80);                    // 'ascending'
      break;
    case 84:                        // 'before'
      shift(84);                    // 'before'
      break;
    case 88:                        // 'case'
      shift(88);                    // 'case'
      break;
    case 89:                        // 'cast'
      shift(89);                    // 'cast'
      break;
    case 90:                        // 'castable'
      shift(90);                    // 'castable'
      break;
    case 94:                        // 'collation'
      shift(94);                    // 'collation'
      break;
    case 105:                       // 'count'
      shift(105);                   // 'count'
      break;
    case 109:                       // 'default'
      shift(109);                   // 'default'
      break;
    case 113:                       // 'descending'
      shift(113);                   // 'descending'
      break;
    case 118:                       // 'div'
      shift(118);                   // 'div'
      break;
    case 122:                       // 'else'
      shift(122);                   // 'else'
      break;
    case 123:                       // 'empty'
      shift(123);                   // 'empty'
      break;
    case 126:                       // 'end'
      shift(126);                   // 'end'
      break;
    case 128:                       // 'eq'
      shift(128);                   // 'eq'
      break;
    case 131:                       // 'except'
      shift(131);                   // 'except'
      break;
    case 137:                       // 'for'
      shift(137);                   // 'for'
      break;
    case 146:                       // 'ge'
      shift(146);                   // 'ge'
      break;
    case 148:                       // 'group'
      shift(148);                   // 'group'
      break;
    case 150:                       // 'gt'
      shift(150);                   // 'gt'
      break;
    case 151:                       // 'idiv'
      shift(151);                   // 'idiv'
      break;
    case 160:                       // 'instance'
      shift(160);                   // 'instance'
      break;
    case 162:                       // 'intersect'
      shift(162);                   // 'intersect'
      break;
    case 163:                       // 'into'
      shift(163);                   // 'into'
      break;
    case 164:                       // 'is'
      shift(164);                   // 'is'
      break;
    case 172:                       // 'le'
      shift(172);                   // 'le'
      break;
    case 174:                       // 'let'
      shift(174);                   // 'let'
      break;
    case 178:                       // 'lt'
      shift(178);                   // 'lt'
      break;
    case 180:                       // 'mod'
      shift(180);                   // 'mod'
      break;
    case 181:                       // 'modify'
      shift(181);                   // 'modify'
      break;
    case 186:                       // 'ne'
      shift(186);                   // 'ne'
      break;
    case 198:                       // 'only'
      shift(198);                   // 'only'
      break;
    case 200:                       // 'or'
      shift(200);                   // 'or'
      break;
    case 201:                       // 'order'
      shift(201);                   // 'order'
      break;
    case 220:                       // 'return'
      shift(220);                   // 'return'
      break;
    case 224:                       // 'satisfies'
      shift(224);                   // 'satisfies'
      break;
    case 236:                       // 'stable'
      shift(236);                   // 'stable'
      break;
    case 237:                       // 'start'
      shift(237);                   // 'start'
      break;
    case 248:                       // 'to'
      shift(248);                   // 'to'
      break;
    case 249:                       // 'treat'
      shift(249);                   // 'treat'
      break;
    case 254:                       // 'union'
      shift(254);                   // 'union'
      break;
    case 266:                       // 'where'
      shift(266);                   // 'where'
      break;
    case 270:                       // 'with'
      shift(270);                   // 'with'
      break;
    case 73:                        // 'ancestor'
      shift(73);                    // 'ancestor'
      break;
    case 74:                        // 'ancestor-or-self'
      shift(74);                    // 'ancestor-or-self'
      break;
    case 82:                        // 'attribute'
      shift(82);                    // 'attribute'
      break;
    case 93:                        // 'child'
      shift(93);                    // 'child'
      break;
    case 96:                        // 'comment'
      shift(96);                    // 'comment'
      break;
    case 103:                       // 'copy'
      shift(103);                   // 'copy'
      break;
    case 108:                       // 'declare'
      shift(108);                   // 'declare'
      break;
    case 110:                       // 'delete'
      shift(110);                   // 'delete'
      break;
    case 111:                       // 'descendant'
      shift(111);                   // 'descendant'
      break;
    case 112:                       // 'descendant-or-self'
      shift(112);                   // 'descendant-or-self'
      break;
    case 119:                       // 'document'
      shift(119);                   // 'document'
      break;
    case 120:                       // 'document-node'
      shift(120);                   // 'document-node'
      break;
    case 121:                       // 'element'
      shift(121);                   // 'element'
      break;
    case 124:                       // 'empty-sequence'
      shift(124);                   // 'empty-sequence'
      break;
    case 129:                       // 'every'
      shift(129);                   // 'every'
      break;
    case 134:                       // 'first'
      shift(134);                   // 'first'
      break;
    case 135:                       // 'following'
      shift(135);                   // 'following'
      break;
    case 136:                       // 'following-sibling'
      shift(136);                   // 'following-sibling'
      break;
    case 145:                       // 'function'
      shift(145);                   // 'function'
      break;
    case 152:                       // 'if'
      shift(152);                   // 'if'
      break;
    case 153:                       // 'import'
      shift(153);                   // 'import'
      break;
    case 159:                       // 'insert'
      shift(159);                   // 'insert'
      break;
    case 165:                       // 'item'
      shift(165);                   // 'item'
      break;
    case 170:                       // 'last'
      shift(170);                   // 'last'
      break;
    case 182:                       // 'module'
      shift(182);                   // 'module'
      break;
    case 184:                       // 'namespace'
      shift(184);                   // 'namespace'
      break;
    case 185:                       // 'namespace-node'
      shift(185);                   // 'namespace-node'
      break;
    case 191:                       // 'node'
      shift(191);                   // 'node'
      break;
    case 202:                       // 'ordered'
      shift(202);                   // 'ordered'
      break;
    case 206:                       // 'parent'
      shift(206);                   // 'parent'
      break;
    case 212:                       // 'preceding'
      shift(212);                   // 'preceding'
      break;
    case 213:                       // 'preceding-sibling'
      shift(213);                   // 'preceding-sibling'
      break;
    case 216:                       // 'processing-instruction'
      shift(216);                   // 'processing-instruction'
      break;
    case 218:                       // 'rename'
      shift(218);                   // 'rename'
      break;
    case 219:                       // 'replace'
      shift(219);                   // 'replace'
      break;
    case 226:                       // 'schema-attribute'
      shift(226);                   // 'schema-attribute'
      break;
    case 227:                       // 'schema-element'
      shift(227);                   // 'schema-element'
      break;
    case 229:                       // 'self'
      shift(229);                   // 'self'
      break;
    case 235:                       // 'some'
      shift(235);                   // 'some'
      break;
    case 243:                       // 'switch'
      shift(243);                   // 'switch'
      break;
    case 244:                       // 'text'
      shift(244);                   // 'text'
      break;
    case 250:                       // 'try'
      shift(250);                   // 'try'
      break;
    case 253:                       // 'typeswitch'
      shift(253);                   // 'typeswitch'
      break;
    case 256:                       // 'unordered'
      shift(256);                   // 'unordered'
      break;
    case 260:                       // 'validate'
      shift(260);                   // 'validate'
      break;
    case 262:                       // 'variable'
      shift(262);                   // 'variable'
      break;
    case 274:                       // 'xquery'
      shift(274);                   // 'xquery'
      break;
    case 72:                        // 'allowing'
      shift(72);                    // 'allowing'
      break;
    case 81:                        // 'at'
      shift(81);                    // 'at'
      break;
    case 83:                        // 'base-uri'
      shift(83);                    // 'base-uri'
      break;
    case 85:                        // 'boundary-space'
      shift(85);                    // 'boundary-space'
      break;
    case 86:                        // 'break'
      shift(86);                    // 'break'
      break;
    case 91:                        // 'catch'
      shift(91);                    // 'catch'
      break;
    case 98:                        // 'construction'
      shift(98);                    // 'construction'
      break;
    case 101:                       // 'context'
      shift(101);                   // 'context'
      break;
    case 102:                       // 'continue'
      shift(102);                   // 'continue'
      break;
    case 104:                       // 'copy-namespaces'
      shift(104);                   // 'copy-namespaces'
      break;
    case 106:                       // 'decimal-format'
      shift(106);                   // 'decimal-format'
      break;
    case 125:                       // 'encoding'
      shift(125);                   // 'encoding'
      break;
    case 132:                       // 'exit'
      shift(132);                   // 'exit'
      break;
    case 133:                       // 'external'
      shift(133);                   // 'external'
      break;
    case 141:                       // 'ft-option'
      shift(141);                   // 'ft-option'
      break;
    case 154:                       // 'in'
      shift(154);                   // 'in'
      break;
    case 155:                       // 'index'
      shift(155);                   // 'index'
      break;
    case 161:                       // 'integrity'
      shift(161);                   // 'integrity'
      break;
    case 171:                       // 'lax'
      shift(171);                   // 'lax'
      break;
    case 192:                       // 'nodes'
      shift(192);                   // 'nodes'
      break;
    case 199:                       // 'option'
      shift(199);                   // 'option'
      break;
    case 203:                       // 'ordering'
      shift(203);                   // 'ordering'
      break;
    case 222:                       // 'revalidation'
      shift(222);                   // 'revalidation'
      break;
    case 225:                       // 'schema'
      shift(225);                   // 'schema'
      break;
    case 228:                       // 'score'
      shift(228);                   // 'score'
      break;
    case 234:                       // 'sliding'
      shift(234);                   // 'sliding'
      break;
    case 240:                       // 'strict'
      shift(240);                   // 'strict'
      break;
    case 251:                       // 'tumbling'
      shift(251);                   // 'tumbling'
      break;
    case 252:                       // 'type'
      shift(252);                   // 'type'
      break;
    case 257:                       // 'updating'
      shift(257);                   // 'updating'
      break;
    case 261:                       // 'value'
      shift(261);                   // 'value'
      break;
    case 263:                       // 'version'
      shift(263);                   // 'version'
      break;
    case 267:                       // 'while'
      shift(267);                   // 'while'
      break;
    case 97:                        // 'constraint'
      shift(97);                    // 'constraint'
      break;
    case 176:                       // 'loop'
      shift(176);                   // 'loop'
      break;
    default:
      shift(221);                   // 'returning'
    }
    endNonterminal("NCName");
  }

  function try_NCName()
  {
    lookahead1(302);                // NCName^Token | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    switch (l1)
    {
    case 19:                        // NCName^Token
      shiftT(19);                   // NCName^Token
      break;
    case 70:                        // 'after'
      shiftT(70);                   // 'after'
      break;
    case 75:                        // 'and'
      shiftT(75);                   // 'and'
      break;
    case 79:                        // 'as'
      shiftT(79);                   // 'as'
      break;
    case 80:                        // 'ascending'
      shiftT(80);                   // 'ascending'
      break;
    case 84:                        // 'before'
      shiftT(84);                   // 'before'
      break;
    case 88:                        // 'case'
      shiftT(88);                   // 'case'
      break;
    case 89:                        // 'cast'
      shiftT(89);                   // 'cast'
      break;
    case 90:                        // 'castable'
      shiftT(90);                   // 'castable'
      break;
    case 94:                        // 'collation'
      shiftT(94);                   // 'collation'
      break;
    case 105:                       // 'count'
      shiftT(105);                  // 'count'
      break;
    case 109:                       // 'default'
      shiftT(109);                  // 'default'
      break;
    case 113:                       // 'descending'
      shiftT(113);                  // 'descending'
      break;
    case 118:                       // 'div'
      shiftT(118);                  // 'div'
      break;
    case 122:                       // 'else'
      shiftT(122);                  // 'else'
      break;
    case 123:                       // 'empty'
      shiftT(123);                  // 'empty'
      break;
    case 126:                       // 'end'
      shiftT(126);                  // 'end'
      break;
    case 128:                       // 'eq'
      shiftT(128);                  // 'eq'
      break;
    case 131:                       // 'except'
      shiftT(131);                  // 'except'
      break;
    case 137:                       // 'for'
      shiftT(137);                  // 'for'
      break;
    case 146:                       // 'ge'
      shiftT(146);                  // 'ge'
      break;
    case 148:                       // 'group'
      shiftT(148);                  // 'group'
      break;
    case 150:                       // 'gt'
      shiftT(150);                  // 'gt'
      break;
    case 151:                       // 'idiv'
      shiftT(151);                  // 'idiv'
      break;
    case 160:                       // 'instance'
      shiftT(160);                  // 'instance'
      break;
    case 162:                       // 'intersect'
      shiftT(162);                  // 'intersect'
      break;
    case 163:                       // 'into'
      shiftT(163);                  // 'into'
      break;
    case 164:                       // 'is'
      shiftT(164);                  // 'is'
      break;
    case 172:                       // 'le'
      shiftT(172);                  // 'le'
      break;
    case 174:                       // 'let'
      shiftT(174);                  // 'let'
      break;
    case 178:                       // 'lt'
      shiftT(178);                  // 'lt'
      break;
    case 180:                       // 'mod'
      shiftT(180);                  // 'mod'
      break;
    case 181:                       // 'modify'
      shiftT(181);                  // 'modify'
      break;
    case 186:                       // 'ne'
      shiftT(186);                  // 'ne'
      break;
    case 198:                       // 'only'
      shiftT(198);                  // 'only'
      break;
    case 200:                       // 'or'
      shiftT(200);                  // 'or'
      break;
    case 201:                       // 'order'
      shiftT(201);                  // 'order'
      break;
    case 220:                       // 'return'
      shiftT(220);                  // 'return'
      break;
    case 224:                       // 'satisfies'
      shiftT(224);                  // 'satisfies'
      break;
    case 236:                       // 'stable'
      shiftT(236);                  // 'stable'
      break;
    case 237:                       // 'start'
      shiftT(237);                  // 'start'
      break;
    case 248:                       // 'to'
      shiftT(248);                  // 'to'
      break;
    case 249:                       // 'treat'
      shiftT(249);                  // 'treat'
      break;
    case 254:                       // 'union'
      shiftT(254);                  // 'union'
      break;
    case 266:                       // 'where'
      shiftT(266);                  // 'where'
      break;
    case 270:                       // 'with'
      shiftT(270);                  // 'with'
      break;
    case 73:                        // 'ancestor'
      shiftT(73);                   // 'ancestor'
      break;
    case 74:                        // 'ancestor-or-self'
      shiftT(74);                   // 'ancestor-or-self'
      break;
    case 82:                        // 'attribute'
      shiftT(82);                   // 'attribute'
      break;
    case 93:                        // 'child'
      shiftT(93);                   // 'child'
      break;
    case 96:                        // 'comment'
      shiftT(96);                   // 'comment'
      break;
    case 103:                       // 'copy'
      shiftT(103);                  // 'copy'
      break;
    case 108:                       // 'declare'
      shiftT(108);                  // 'declare'
      break;
    case 110:                       // 'delete'
      shiftT(110);                  // 'delete'
      break;
    case 111:                       // 'descendant'
      shiftT(111);                  // 'descendant'
      break;
    case 112:                       // 'descendant-or-self'
      shiftT(112);                  // 'descendant-or-self'
      break;
    case 119:                       // 'document'
      shiftT(119);                  // 'document'
      break;
    case 120:                       // 'document-node'
      shiftT(120);                  // 'document-node'
      break;
    case 121:                       // 'element'
      shiftT(121);                  // 'element'
      break;
    case 124:                       // 'empty-sequence'
      shiftT(124);                  // 'empty-sequence'
      break;
    case 129:                       // 'every'
      shiftT(129);                  // 'every'
      break;
    case 134:                       // 'first'
      shiftT(134);                  // 'first'
      break;
    case 135:                       // 'following'
      shiftT(135);                  // 'following'
      break;
    case 136:                       // 'following-sibling'
      shiftT(136);                  // 'following-sibling'
      break;
    case 145:                       // 'function'
      shiftT(145);                  // 'function'
      break;
    case 152:                       // 'if'
      shiftT(152);                  // 'if'
      break;
    case 153:                       // 'import'
      shiftT(153);                  // 'import'
      break;
    case 159:                       // 'insert'
      shiftT(159);                  // 'insert'
      break;
    case 165:                       // 'item'
      shiftT(165);                  // 'item'
      break;
    case 170:                       // 'last'
      shiftT(170);                  // 'last'
      break;
    case 182:                       // 'module'
      shiftT(182);                  // 'module'
      break;
    case 184:                       // 'namespace'
      shiftT(184);                  // 'namespace'
      break;
    case 185:                       // 'namespace-node'
      shiftT(185);                  // 'namespace-node'
      break;
    case 191:                       // 'node'
      shiftT(191);                  // 'node'
      break;
    case 202:                       // 'ordered'
      shiftT(202);                  // 'ordered'
      break;
    case 206:                       // 'parent'
      shiftT(206);                  // 'parent'
      break;
    case 212:                       // 'preceding'
      shiftT(212);                  // 'preceding'
      break;
    case 213:                       // 'preceding-sibling'
      shiftT(213);                  // 'preceding-sibling'
      break;
    case 216:                       // 'processing-instruction'
      shiftT(216);                  // 'processing-instruction'
      break;
    case 218:                       // 'rename'
      shiftT(218);                  // 'rename'
      break;
    case 219:                       // 'replace'
      shiftT(219);                  // 'replace'
      break;
    case 226:                       // 'schema-attribute'
      shiftT(226);                  // 'schema-attribute'
      break;
    case 227:                       // 'schema-element'
      shiftT(227);                  // 'schema-element'
      break;
    case 229:                       // 'self'
      shiftT(229);                  // 'self'
      break;
    case 235:                       // 'some'
      shiftT(235);                  // 'some'
      break;
    case 243:                       // 'switch'
      shiftT(243);                  // 'switch'
      break;
    case 244:                       // 'text'
      shiftT(244);                  // 'text'
      break;
    case 250:                       // 'try'
      shiftT(250);                  // 'try'
      break;
    case 253:                       // 'typeswitch'
      shiftT(253);                  // 'typeswitch'
      break;
    case 256:                       // 'unordered'
      shiftT(256);                  // 'unordered'
      break;
    case 260:                       // 'validate'
      shiftT(260);                  // 'validate'
      break;
    case 262:                       // 'variable'
      shiftT(262);                  // 'variable'
      break;
    case 274:                       // 'xquery'
      shiftT(274);                  // 'xquery'
      break;
    case 72:                        // 'allowing'
      shiftT(72);                   // 'allowing'
      break;
    case 81:                        // 'at'
      shiftT(81);                   // 'at'
      break;
    case 83:                        // 'base-uri'
      shiftT(83);                   // 'base-uri'
      break;
    case 85:                        // 'boundary-space'
      shiftT(85);                   // 'boundary-space'
      break;
    case 86:                        // 'break'
      shiftT(86);                   // 'break'
      break;
    case 91:                        // 'catch'
      shiftT(91);                   // 'catch'
      break;
    case 98:                        // 'construction'
      shiftT(98);                   // 'construction'
      break;
    case 101:                       // 'context'
      shiftT(101);                  // 'context'
      break;
    case 102:                       // 'continue'
      shiftT(102);                  // 'continue'
      break;
    case 104:                       // 'copy-namespaces'
      shiftT(104);                  // 'copy-namespaces'
      break;
    case 106:                       // 'decimal-format'
      shiftT(106);                  // 'decimal-format'
      break;
    case 125:                       // 'encoding'
      shiftT(125);                  // 'encoding'
      break;
    case 132:                       // 'exit'
      shiftT(132);                  // 'exit'
      break;
    case 133:                       // 'external'
      shiftT(133);                  // 'external'
      break;
    case 141:                       // 'ft-option'
      shiftT(141);                  // 'ft-option'
      break;
    case 154:                       // 'in'
      shiftT(154);                  // 'in'
      break;
    case 155:                       // 'index'
      shiftT(155);                  // 'index'
      break;
    case 161:                       // 'integrity'
      shiftT(161);                  // 'integrity'
      break;
    case 171:                       // 'lax'
      shiftT(171);                  // 'lax'
      break;
    case 192:                       // 'nodes'
      shiftT(192);                  // 'nodes'
      break;
    case 199:                       // 'option'
      shiftT(199);                  // 'option'
      break;
    case 203:                       // 'ordering'
      shiftT(203);                  // 'ordering'
      break;
    case 222:                       // 'revalidation'
      shiftT(222);                  // 'revalidation'
      break;
    case 225:                       // 'schema'
      shiftT(225);                  // 'schema'
      break;
    case 228:                       // 'score'
      shiftT(228);                  // 'score'
      break;
    case 234:                       // 'sliding'
      shiftT(234);                  // 'sliding'
      break;
    case 240:                       // 'strict'
      shiftT(240);                  // 'strict'
      break;
    case 251:                       // 'tumbling'
      shiftT(251);                  // 'tumbling'
      break;
    case 252:                       // 'type'
      shiftT(252);                  // 'type'
      break;
    case 257:                       // 'updating'
      shiftT(257);                  // 'updating'
      break;
    case 261:                       // 'value'
      shiftT(261);                  // 'value'
      break;
    case 263:                       // 'version'
      shiftT(263);                  // 'version'
      break;
    case 267:                       // 'while'
      shiftT(267);                  // 'while'
      break;
    case 97:                        // 'constraint'
      shiftT(97);                   // 'constraint'
      break;
    case 176:                       // 'loop'
      shiftT(176);                  // 'loop'
      break;
    default:
      shiftT(221);                  // 'returning'
    }
  }

  function parse_MainModule()
  {
    startNonterminal("MainModule");
    parse_Prolog();
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    parse_Program();
    endNonterminal("MainModule");
  }

  function parse_Program()
  {
    startNonterminal("Program");
    parse_StatementsAndOptionalExpr();
    endNonterminal("Program");
  }

  function parse_Statements()
  {
    startNonterminal("Statements");
    for (;;)
    {
      lookahead1W(329);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | EOF | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' |
                                    // '..' | '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|' | '}'
      switch (l1)
      {
      case 34:                      // '('
        lookahead2W(324);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | ')' | '+' | '-' | '.' |
                                    // '..' | '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
        break;
      case 35:                      // '(#'
        lookahead2(304);            // EQName^Token | S | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
        break;
      case 46:                      // '/'
        lookahead2W(337);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | EOF | '!' | '!=' | '$' | '%' | '(' | '(:' | '*' | '+' |
                                    // ',' | '-' | '.' | '..' | ';' | '<' | '<!--' | '<<' | '<=' | '<?' | '=' | '>' |
                                    // '>=' | '>>' | '@' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'contains' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|' | '|' | '||' | '}'
        break;
      case 47:                      // '//'
        lookahead2W(319);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(:' | '.' | '..' | '<' | '<!--' |
                                    // '<?' | '@' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
        break;
      case 54:                      // '<'
        lookahead2(4);              // QName
        break;
      case 55:                      // '<!--'
        lookahead2(1);              // DirCommentContents
        break;
      case 59:                      // '<?'
        lookahead2(3);              // PITarget
        break;
      case 66:                      // '@'
        lookahead2W(307);           // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
        break;
      case 68:                      // '['
        lookahead2W(326);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | ']' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
        break;
      case 77:                      // 'append'
        lookahead2W(80);            // S^WS | '(:' | 'json'
        break;
      case 82:                      // 'attribute'
        lookahead2W(334);           // EQName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' |
                                    // '-' | '/' | '//' | '::' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'contains' | 'context' | 'continue' |
                                    // 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '|' | '||' | '}'
        break;
      case 121:                     // 'element'
        lookahead2W(332);           // EQName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' |
                                    // '-' | '/' | '//' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' |
                                    // 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'contains' | 'context' | 'continue' |
                                    // 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '|' | '||' | '}'
        break;
      case 132:                     // 'exit'
        lookahead2W(242);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' |
                                    // 'returning' | 'to' | 'treat' | 'union' | '|' | '||' | '}'
        break;
      case 137:                     // 'for'
        lookahead2W(246);           // S^WS | EOF | '!' | '!=' | '#' | '$' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'sliding' |
                                    // 'to' | 'treat' | 'tumbling' | 'union' | '|' | '||' | '}'
        break;
      case 174:                     // 'let'
        lookahead2W(244);           // S^WS | EOF | '!' | '!=' | '#' | '$' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'score' |
                                    // 'to' | 'treat' | 'union' | '|' | '||' | '}'
        break;
      case 218:                     // 'rename'
        lookahead2W(245);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'json' | 'le' | 'lt' | 'mod' | 'ne' | 'node' |
                                    // 'or' | 'to' | 'treat' | 'union' | '|' | '||' | '}'
        break;
      case 219:                     // 'replace'
        lookahead2W(248);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'json' | 'le' | 'lt' | 'mod' | 'ne' | 'node' |
                                    // 'or' | 'to' | 'treat' | 'union' | 'value' | '|' | '||' | '}'
        break;
      case 260:                     // 'validate'
        lookahead2W(249);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'lax' | 'le' | 'lt' | 'mod' | 'ne' | 'or' |
                                    // 'strict' | 'to' | 'treat' | 'type' | 'union' | '{' | '|' | '||' | '}'
        break;
      case 276:                     // '{'
        lookahead2W(328);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|' | '}'
        break;
      case 278:                     // '{|'
        lookahead2W(327);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|' | '|}'
        break;
      case 5:                       // Wildcard
      case 45:                      // '..'
        lookahead2W(226);           // S^WS | EOF | '!' | '!=' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' | ';' | '<' |
                                    // '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' | 'castable' |
                                    // 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' | 'treat' |
                                    // 'union' | '|' | '||' | '}'
        break;
      case 31:                      // '$'
      case 32:                      // '%'
        lookahead2W(305);           // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
        break;
      case 40:                      // '+'
      case 42:                      // '-'
        lookahead2W(321);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
        break;
      case 86:                      // 'break'
      case 102:                     // 'continue'
        lookahead2W(240);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'loop' | 'lt' | 'mod' | 'ne' | 'or' |
                                    // 'to' | 'treat' | 'union' | '|' | '||' | '}'
        break;
      case 110:                     // 'delete'
      case 159:                     // 'insert'
        lookahead2W(247);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'json' | 'le' | 'lt' | 'mod' | 'ne' | 'node' |
                                    // 'nodes' | 'or' | 'to' | 'treat' | 'union' | '|' | '||' | '}'
        break;
      case 124:                     // 'empty-sequence'
      case 165:                     // 'item'
        lookahead2W(231);           // S^WS | EOF | '!' | '!=' | '#' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' | ';' |
                                    // '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' | 'castable' |
                                    // 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' | 'treat' |
                                    // 'union' | '|' | '||' | '}'
        break;
      case 184:                     // 'namespace'
      case 216:                     // 'processing-instruction'
        lookahead2W(333);           // NCName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' |
                                    // '-' | '/' | '//' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' |
                                    // 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'contains' | 'context' | 'continue' |
                                    // 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '|' | '||' | '}'
        break;
      case 103:                     // 'copy'
      case 129:                     // 'every'
      case 235:                     // 'some'
      case 262:                     // 'variable'
        lookahead2W(237);           // S^WS | EOF | '!' | '!=' | '#' | '$' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' |
                                    // 'treat' | 'union' | '|' | '||' | '}'
        break;
      case 8:                       // IntegerLiteral
      case 9:                       // DecimalLiteral
      case 10:                      // DoubleLiteral
      case 11:                      // StringLiteral
      case 44:                      // '.'
        lookahead2W(232);           // S^WS | EOF | '!' | '!=' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' | ';' |
                                    // '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' | 'castable' |
                                    // 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' | 'treat' |
                                    // 'union' | '|' | '||' | '}'
        break;
      case 96:                      // 'comment'
      case 119:                     // 'document'
      case 202:                     // 'ordered'
      case 244:                     // 'text'
      case 250:                     // 'try'
      case 256:                     // 'unordered'
        lookahead2W(243);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' |
                                    // 'treat' | 'union' | '{' | '|' | '||' | '}'
        break;
      case 73:                      // 'ancestor'
      case 74:                      // 'ancestor-or-self'
      case 93:                      // 'child'
      case 111:                     // 'descendant'
      case 112:                     // 'descendant-or-self'
      case 135:                     // 'following'
      case 136:                     // 'following-sibling'
      case 206:                     // 'parent'
      case 212:                     // 'preceding'
      case 213:                     // 'preceding-sibling'
      case 229:                     // 'self'
        lookahead2W(238);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // '::' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' |
                                    // 'treat' | 'union' | '|' | '||' | '}'
        break;
      case 6:                       // EQName^Token
      case 70:                      // 'after'
      case 72:                      // 'allowing'
      case 75:                      // 'and'
      case 79:                      // 'as'
      case 80:                      // 'ascending'
      case 81:                      // 'at'
      case 83:                      // 'base-uri'
      case 84:                      // 'before'
      case 85:                      // 'boundary-space'
      case 88:                      // 'case'
      case 89:                      // 'cast'
      case 90:                      // 'castable'
      case 91:                      // 'catch'
      case 94:                      // 'collation'
      case 97:                      // 'constraint'
      case 98:                      // 'construction'
      case 101:                     // 'context'
      case 104:                     // 'copy-namespaces'
      case 105:                     // 'count'
      case 106:                     // 'decimal-format'
      case 108:                     // 'declare'
      case 109:                     // 'default'
      case 113:                     // 'descending'
      case 118:                     // 'div'
      case 120:                     // 'document-node'
      case 122:                     // 'else'
      case 123:                     // 'empty'
      case 125:                     // 'encoding'
      case 126:                     // 'end'
      case 128:                     // 'eq'
      case 131:                     // 'except'
      case 133:                     // 'external'
      case 134:                     // 'first'
      case 141:                     // 'ft-option'
      case 145:                     // 'function'
      case 146:                     // 'ge'
      case 148:                     // 'group'
      case 150:                     // 'gt'
      case 151:                     // 'idiv'
      case 152:                     // 'if'
      case 153:                     // 'import'
      case 154:                     // 'in'
      case 155:                     // 'index'
      case 160:                     // 'instance'
      case 161:                     // 'integrity'
      case 162:                     // 'intersect'
      case 163:                     // 'into'
      case 164:                     // 'is'
      case 170:                     // 'last'
      case 171:                     // 'lax'
      case 172:                     // 'le'
      case 176:                     // 'loop'
      case 178:                     // 'lt'
      case 180:                     // 'mod'
      case 181:                     // 'modify'
      case 182:                     // 'module'
      case 185:                     // 'namespace-node'
      case 186:                     // 'ne'
      case 191:                     // 'node'
      case 192:                     // 'nodes'
      case 198:                     // 'only'
      case 199:                     // 'option'
      case 200:                     // 'or'
      case 201:                     // 'order'
      case 203:                     // 'ordering'
      case 220:                     // 'return'
      case 221:                     // 'returning'
      case 222:                     // 'revalidation'
      case 224:                     // 'satisfies'
      case 225:                     // 'schema'
      case 226:                     // 'schema-attribute'
      case 227:                     // 'schema-element'
      case 228:                     // 'score'
      case 234:                     // 'sliding'
      case 236:                     // 'stable'
      case 237:                     // 'start'
      case 240:                     // 'strict'
      case 243:                     // 'switch'
      case 248:                     // 'to'
      case 249:                     // 'treat'
      case 251:                     // 'tumbling'
      case 252:                     // 'type'
      case 253:                     // 'typeswitch'
      case 254:                     // 'union'
      case 257:                     // 'updating'
      case 261:                     // 'value'
      case 263:                     // 'version'
      case 266:                     // 'where'
      case 267:                     // 'while'
      case 270:                     // 'with'
      case 274:                     // 'xquery'
        lookahead2W(235);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' |
                                    // 'treat' | 'union' | '|' | '||' | '}'
        break;
      default:
        lk = l1;
      }
      if (lk != 25                  // EOF
       && lk != 282                 // '}'
       && lk != 12805               // Wildcard EOF
       && lk != 12806               // EQName^Token EOF
       && lk != 12808               // IntegerLiteral EOF
       && lk != 12809               // DecimalLiteral EOF
       && lk != 12810               // DoubleLiteral EOF
       && lk != 12811               // StringLiteral EOF
       && lk != 12844               // '.' EOF
       && lk != 12845               // '..' EOF
       && lk != 12846               // '/' EOF
       && lk != 12870               // 'after' EOF
       && lk != 12872               // 'allowing' EOF
       && lk != 12873               // 'ancestor' EOF
       && lk != 12874               // 'ancestor-or-self' EOF
       && lk != 12875               // 'and' EOF
       && lk != 12879               // 'as' EOF
       && lk != 12880               // 'ascending' EOF
       && lk != 12881               // 'at' EOF
       && lk != 12882               // 'attribute' EOF
       && lk != 12883               // 'base-uri' EOF
       && lk != 12884               // 'before' EOF
       && lk != 12885               // 'boundary-space' EOF
       && lk != 12886               // 'break' EOF
       && lk != 12888               // 'case' EOF
       && lk != 12889               // 'cast' EOF
       && lk != 12890               // 'castable' EOF
       && lk != 12891               // 'catch' EOF
       && lk != 12893               // 'child' EOF
       && lk != 12894               // 'collation' EOF
       && lk != 12896               // 'comment' EOF
       && lk != 12897               // 'constraint' EOF
       && lk != 12898               // 'construction' EOF
       && lk != 12901               // 'context' EOF
       && lk != 12902               // 'continue' EOF
       && lk != 12903               // 'copy' EOF
       && lk != 12904               // 'copy-namespaces' EOF
       && lk != 12905               // 'count' EOF
       && lk != 12906               // 'decimal-format' EOF
       && lk != 12908               // 'declare' EOF
       && lk != 12909               // 'default' EOF
       && lk != 12910               // 'delete' EOF
       && lk != 12911               // 'descendant' EOF
       && lk != 12912               // 'descendant-or-self' EOF
       && lk != 12913               // 'descending' EOF
       && lk != 12918               // 'div' EOF
       && lk != 12919               // 'document' EOF
       && lk != 12920               // 'document-node' EOF
       && lk != 12921               // 'element' EOF
       && lk != 12922               // 'else' EOF
       && lk != 12923               // 'empty' EOF
       && lk != 12924               // 'empty-sequence' EOF
       && lk != 12925               // 'encoding' EOF
       && lk != 12926               // 'end' EOF
       && lk != 12928               // 'eq' EOF
       && lk != 12929               // 'every' EOF
       && lk != 12931               // 'except' EOF
       && lk != 12932               // 'exit' EOF
       && lk != 12933               // 'external' EOF
       && lk != 12934               // 'first' EOF
       && lk != 12935               // 'following' EOF
       && lk != 12936               // 'following-sibling' EOF
       && lk != 12937               // 'for' EOF
       && lk != 12941               // 'ft-option' EOF
       && lk != 12945               // 'function' EOF
       && lk != 12946               // 'ge' EOF
       && lk != 12948               // 'group' EOF
       && lk != 12950               // 'gt' EOF
       && lk != 12951               // 'idiv' EOF
       && lk != 12952               // 'if' EOF
       && lk != 12953               // 'import' EOF
       && lk != 12954               // 'in' EOF
       && lk != 12955               // 'index' EOF
       && lk != 12959               // 'insert' EOF
       && lk != 12960               // 'instance' EOF
       && lk != 12961               // 'integrity' EOF
       && lk != 12962               // 'intersect' EOF
       && lk != 12963               // 'into' EOF
       && lk != 12964               // 'is' EOF
       && lk != 12965               // 'item' EOF
       && lk != 12970               // 'last' EOF
       && lk != 12971               // 'lax' EOF
       && lk != 12972               // 'le' EOF
       && lk != 12974               // 'let' EOF
       && lk != 12976               // 'loop' EOF
       && lk != 12978               // 'lt' EOF
       && lk != 12980               // 'mod' EOF
       && lk != 12981               // 'modify' EOF
       && lk != 12982               // 'module' EOF
       && lk != 12984               // 'namespace' EOF
       && lk != 12985               // 'namespace-node' EOF
       && lk != 12986               // 'ne' EOF
       && lk != 12991               // 'node' EOF
       && lk != 12992               // 'nodes' EOF
       && lk != 12998               // 'only' EOF
       && lk != 12999               // 'option' EOF
       && lk != 13000               // 'or' EOF
       && lk != 13001               // 'order' EOF
       && lk != 13002               // 'ordered' EOF
       && lk != 13003               // 'ordering' EOF
       && lk != 13006               // 'parent' EOF
       && lk != 13012               // 'preceding' EOF
       && lk != 13013               // 'preceding-sibling' EOF
       && lk != 13016               // 'processing-instruction' EOF
       && lk != 13018               // 'rename' EOF
       && lk != 13019               // 'replace' EOF
       && lk != 13020               // 'return' EOF
       && lk != 13021               // 'returning' EOF
       && lk != 13022               // 'revalidation' EOF
       && lk != 13024               // 'satisfies' EOF
       && lk != 13025               // 'schema' EOF
       && lk != 13026               // 'schema-attribute' EOF
       && lk != 13027               // 'schema-element' EOF
       && lk != 13028               // 'score' EOF
       && lk != 13029               // 'self' EOF
       && lk != 13034               // 'sliding' EOF
       && lk != 13035               // 'some' EOF
       && lk != 13036               // 'stable' EOF
       && lk != 13037               // 'start' EOF
       && lk != 13040               // 'strict' EOF
       && lk != 13043               // 'switch' EOF
       && lk != 13044               // 'text' EOF
       && lk != 13048               // 'to' EOF
       && lk != 13049               // 'treat' EOF
       && lk != 13050               // 'try' EOF
       && lk != 13051               // 'tumbling' EOF
       && lk != 13052               // 'type' EOF
       && lk != 13053               // 'typeswitch' EOF
       && lk != 13054               // 'union' EOF
       && lk != 13056               // 'unordered' EOF
       && lk != 13057               // 'updating' EOF
       && lk != 13060               // 'validate' EOF
       && lk != 13061               // 'value' EOF
       && lk != 13062               // 'variable' EOF
       && lk != 13063               // 'version' EOF
       && lk != 13066               // 'where' EOF
       && lk != 13067               // 'while' EOF
       && lk != 13070               // 'with' EOF
       && lk != 13074               // 'xquery' EOF
       && lk != 16134               // 'variable' '$'
       && lk != 20997               // Wildcard ','
       && lk != 20998               // EQName^Token ','
       && lk != 21000               // IntegerLiteral ','
       && lk != 21001               // DecimalLiteral ','
       && lk != 21002               // DoubleLiteral ','
       && lk != 21003               // StringLiteral ','
       && lk != 21036               // '.' ','
       && lk != 21037               // '..' ','
       && lk != 21038               // '/' ','
       && lk != 21062               // 'after' ','
       && lk != 21064               // 'allowing' ','
       && lk != 21065               // 'ancestor' ','
       && lk != 21066               // 'ancestor-or-self' ','
       && lk != 21067               // 'and' ','
       && lk != 21071               // 'as' ','
       && lk != 21072               // 'ascending' ','
       && lk != 21073               // 'at' ','
       && lk != 21074               // 'attribute' ','
       && lk != 21075               // 'base-uri' ','
       && lk != 21076               // 'before' ','
       && lk != 21077               // 'boundary-space' ','
       && lk != 21078               // 'break' ','
       && lk != 21080               // 'case' ','
       && lk != 21081               // 'cast' ','
       && lk != 21082               // 'castable' ','
       && lk != 21083               // 'catch' ','
       && lk != 21085               // 'child' ','
       && lk != 21086               // 'collation' ','
       && lk != 21088               // 'comment' ','
       && lk != 21089               // 'constraint' ','
       && lk != 21090               // 'construction' ','
       && lk != 21093               // 'context' ','
       && lk != 21094               // 'continue' ','
       && lk != 21095               // 'copy' ','
       && lk != 21096               // 'copy-namespaces' ','
       && lk != 21097               // 'count' ','
       && lk != 21098               // 'decimal-format' ','
       && lk != 21100               // 'declare' ','
       && lk != 21101               // 'default' ','
       && lk != 21102               // 'delete' ','
       && lk != 21103               // 'descendant' ','
       && lk != 21104               // 'descendant-or-self' ','
       && lk != 21105               // 'descending' ','
       && lk != 21110               // 'div' ','
       && lk != 21111               // 'document' ','
       && lk != 21112               // 'document-node' ','
       && lk != 21113               // 'element' ','
       && lk != 21114               // 'else' ','
       && lk != 21115               // 'empty' ','
       && lk != 21116               // 'empty-sequence' ','
       && lk != 21117               // 'encoding' ','
       && lk != 21118               // 'end' ','
       && lk != 21120               // 'eq' ','
       && lk != 21121               // 'every' ','
       && lk != 21123               // 'except' ','
       && lk != 21124               // 'exit' ','
       && lk != 21125               // 'external' ','
       && lk != 21126               // 'first' ','
       && lk != 21127               // 'following' ','
       && lk != 21128               // 'following-sibling' ','
       && lk != 21129               // 'for' ','
       && lk != 21133               // 'ft-option' ','
       && lk != 21137               // 'function' ','
       && lk != 21138               // 'ge' ','
       && lk != 21140               // 'group' ','
       && lk != 21142               // 'gt' ','
       && lk != 21143               // 'idiv' ','
       && lk != 21144               // 'if' ','
       && lk != 21145               // 'import' ','
       && lk != 21146               // 'in' ','
       && lk != 21147               // 'index' ','
       && lk != 21151               // 'insert' ','
       && lk != 21152               // 'instance' ','
       && lk != 21153               // 'integrity' ','
       && lk != 21154               // 'intersect' ','
       && lk != 21155               // 'into' ','
       && lk != 21156               // 'is' ','
       && lk != 21157               // 'item' ','
       && lk != 21162               // 'last' ','
       && lk != 21163               // 'lax' ','
       && lk != 21164               // 'le' ','
       && lk != 21166               // 'let' ','
       && lk != 21168               // 'loop' ','
       && lk != 21170               // 'lt' ','
       && lk != 21172               // 'mod' ','
       && lk != 21173               // 'modify' ','
       && lk != 21174               // 'module' ','
       && lk != 21176               // 'namespace' ','
       && lk != 21177               // 'namespace-node' ','
       && lk != 21178               // 'ne' ','
       && lk != 21183               // 'node' ','
       && lk != 21184               // 'nodes' ','
       && lk != 21190               // 'only' ','
       && lk != 21191               // 'option' ','
       && lk != 21192               // 'or' ','
       && lk != 21193               // 'order' ','
       && lk != 21194               // 'ordered' ','
       && lk != 21195               // 'ordering' ','
       && lk != 21198               // 'parent' ','
       && lk != 21204               // 'preceding' ','
       && lk != 21205               // 'preceding-sibling' ','
       && lk != 21208               // 'processing-instruction' ','
       && lk != 21210               // 'rename' ','
       && lk != 21211               // 'replace' ','
       && lk != 21212               // 'return' ','
       && lk != 21213               // 'returning' ','
       && lk != 21214               // 'revalidation' ','
       && lk != 21216               // 'satisfies' ','
       && lk != 21217               // 'schema' ','
       && lk != 21218               // 'schema-attribute' ','
       && lk != 21219               // 'schema-element' ','
       && lk != 21220               // 'score' ','
       && lk != 21221               // 'self' ','
       && lk != 21226               // 'sliding' ','
       && lk != 21227               // 'some' ','
       && lk != 21228               // 'stable' ','
       && lk != 21229               // 'start' ','
       && lk != 21232               // 'strict' ','
       && lk != 21235               // 'switch' ','
       && lk != 21236               // 'text' ','
       && lk != 21240               // 'to' ','
       && lk != 21241               // 'treat' ','
       && lk != 21242               // 'try' ','
       && lk != 21243               // 'tumbling' ','
       && lk != 21244               // 'type' ','
       && lk != 21245               // 'typeswitch' ','
       && lk != 21246               // 'union' ','
       && lk != 21248               // 'unordered' ','
       && lk != 21249               // 'updating' ','
       && lk != 21252               // 'validate' ','
       && lk != 21253               // 'value' ','
       && lk != 21254               // 'variable' ','
       && lk != 21255               // 'version' ','
       && lk != 21258               // 'where' ','
       && lk != 21259               // 'while' ','
       && lk != 21262               // 'with' ','
       && lk != 21266               // 'xquery' ','
       && lk != 27141               // Wildcard ';'
       && lk != 27142               // EQName^Token ';'
       && lk != 27144               // IntegerLiteral ';'
       && lk != 27145               // DecimalLiteral ';'
       && lk != 27146               // DoubleLiteral ';'
       && lk != 27147               // StringLiteral ';'
       && lk != 27180               // '.' ';'
       && lk != 27181               // '..' ';'
       && lk != 27182               // '/' ';'
       && lk != 27206               // 'after' ';'
       && lk != 27208               // 'allowing' ';'
       && lk != 27209               // 'ancestor' ';'
       && lk != 27210               // 'ancestor-or-self' ';'
       && lk != 27211               // 'and' ';'
       && lk != 27215               // 'as' ';'
       && lk != 27216               // 'ascending' ';'
       && lk != 27217               // 'at' ';'
       && lk != 27218               // 'attribute' ';'
       && lk != 27219               // 'base-uri' ';'
       && lk != 27220               // 'before' ';'
       && lk != 27221               // 'boundary-space' ';'
       && lk != 27222               // 'break' ';'
       && lk != 27224               // 'case' ';'
       && lk != 27225               // 'cast' ';'
       && lk != 27226               // 'castable' ';'
       && lk != 27227               // 'catch' ';'
       && lk != 27229               // 'child' ';'
       && lk != 27230               // 'collation' ';'
       && lk != 27232               // 'comment' ';'
       && lk != 27233               // 'constraint' ';'
       && lk != 27234               // 'construction' ';'
       && lk != 27237               // 'context' ';'
       && lk != 27238               // 'continue' ';'
       && lk != 27239               // 'copy' ';'
       && lk != 27240               // 'copy-namespaces' ';'
       && lk != 27241               // 'count' ';'
       && lk != 27242               // 'decimal-format' ';'
       && lk != 27244               // 'declare' ';'
       && lk != 27245               // 'default' ';'
       && lk != 27246               // 'delete' ';'
       && lk != 27247               // 'descendant' ';'
       && lk != 27248               // 'descendant-or-self' ';'
       && lk != 27249               // 'descending' ';'
       && lk != 27254               // 'div' ';'
       && lk != 27255               // 'document' ';'
       && lk != 27256               // 'document-node' ';'
       && lk != 27257               // 'element' ';'
       && lk != 27258               // 'else' ';'
       && lk != 27259               // 'empty' ';'
       && lk != 27260               // 'empty-sequence' ';'
       && lk != 27261               // 'encoding' ';'
       && lk != 27262               // 'end' ';'
       && lk != 27264               // 'eq' ';'
       && lk != 27265               // 'every' ';'
       && lk != 27267               // 'except' ';'
       && lk != 27268               // 'exit' ';'
       && lk != 27269               // 'external' ';'
       && lk != 27270               // 'first' ';'
       && lk != 27271               // 'following' ';'
       && lk != 27272               // 'following-sibling' ';'
       && lk != 27273               // 'for' ';'
       && lk != 27277               // 'ft-option' ';'
       && lk != 27281               // 'function' ';'
       && lk != 27282               // 'ge' ';'
       && lk != 27284               // 'group' ';'
       && lk != 27286               // 'gt' ';'
       && lk != 27287               // 'idiv' ';'
       && lk != 27288               // 'if' ';'
       && lk != 27289               // 'import' ';'
       && lk != 27290               // 'in' ';'
       && lk != 27291               // 'index' ';'
       && lk != 27295               // 'insert' ';'
       && lk != 27296               // 'instance' ';'
       && lk != 27297               // 'integrity' ';'
       && lk != 27298               // 'intersect' ';'
       && lk != 27299               // 'into' ';'
       && lk != 27300               // 'is' ';'
       && lk != 27301               // 'item' ';'
       && lk != 27306               // 'last' ';'
       && lk != 27307               // 'lax' ';'
       && lk != 27308               // 'le' ';'
       && lk != 27310               // 'let' ';'
       && lk != 27312               // 'loop' ';'
       && lk != 27314               // 'lt' ';'
       && lk != 27316               // 'mod' ';'
       && lk != 27317               // 'modify' ';'
       && lk != 27318               // 'module' ';'
       && lk != 27320               // 'namespace' ';'
       && lk != 27321               // 'namespace-node' ';'
       && lk != 27322               // 'ne' ';'
       && lk != 27327               // 'node' ';'
       && lk != 27328               // 'nodes' ';'
       && lk != 27334               // 'only' ';'
       && lk != 27335               // 'option' ';'
       && lk != 27336               // 'or' ';'
       && lk != 27337               // 'order' ';'
       && lk != 27338               // 'ordered' ';'
       && lk != 27339               // 'ordering' ';'
       && lk != 27342               // 'parent' ';'
       && lk != 27348               // 'preceding' ';'
       && lk != 27349               // 'preceding-sibling' ';'
       && lk != 27352               // 'processing-instruction' ';'
       && lk != 27354               // 'rename' ';'
       && lk != 27355               // 'replace' ';'
       && lk != 27356               // 'return' ';'
       && lk != 27357               // 'returning' ';'
       && lk != 27358               // 'revalidation' ';'
       && lk != 27360               // 'satisfies' ';'
       && lk != 27361               // 'schema' ';'
       && lk != 27362               // 'schema-attribute' ';'
       && lk != 27363               // 'schema-element' ';'
       && lk != 27364               // 'score' ';'
       && lk != 27365               // 'self' ';'
       && lk != 27370               // 'sliding' ';'
       && lk != 27371               // 'some' ';'
       && lk != 27372               // 'stable' ';'
       && lk != 27373               // 'start' ';'
       && lk != 27376               // 'strict' ';'
       && lk != 27379               // 'switch' ';'
       && lk != 27380               // 'text' ';'
       && lk != 27384               // 'to' ';'
       && lk != 27385               // 'treat' ';'
       && lk != 27386               // 'try' ';'
       && lk != 27387               // 'tumbling' ';'
       && lk != 27388               // 'type' ';'
       && lk != 27389               // 'typeswitch' ';'
       && lk != 27390               // 'union' ';'
       && lk != 27392               // 'unordered' ';'
       && lk != 27393               // 'updating' ';'
       && lk != 27396               // 'validate' ';'
       && lk != 27397               // 'value' ';'
       && lk != 27398               // 'variable' ';'
       && lk != 27399               // 'version' ';'
       && lk != 27402               // 'where' ';'
       && lk != 27403               // 'while' ';'
       && lk != 27406               // 'with' ';'
       && lk != 27410               // 'xquery' ';'
       && lk != 90198               // 'break' 'loop'
       && lk != 90214               // 'continue' 'loop'
       && lk != 113284              // 'exit' 'returning'
       && lk != 144389              // Wildcard '}'
       && lk != 144390              // EQName^Token '}'
       && lk != 144392              // IntegerLiteral '}'
       && lk != 144393              // DecimalLiteral '}'
       && lk != 144394              // DoubleLiteral '}'
       && lk != 144395              // StringLiteral '}'
       && lk != 144428              // '.' '}'
       && lk != 144429              // '..' '}'
       && lk != 144430              // '/' '}'
       && lk != 144454              // 'after' '}'
       && lk != 144456              // 'allowing' '}'
       && lk != 144457              // 'ancestor' '}'
       && lk != 144458              // 'ancestor-or-self' '}'
       && lk != 144459              // 'and' '}'
       && lk != 144463              // 'as' '}'
       && lk != 144464              // 'ascending' '}'
       && lk != 144465              // 'at' '}'
       && lk != 144466              // 'attribute' '}'
       && lk != 144467              // 'base-uri' '}'
       && lk != 144468              // 'before' '}'
       && lk != 144469              // 'boundary-space' '}'
       && lk != 144470              // 'break' '}'
       && lk != 144472              // 'case' '}'
       && lk != 144473              // 'cast' '}'
       && lk != 144474              // 'castable' '}'
       && lk != 144475              // 'catch' '}'
       && lk != 144477              // 'child' '}'
       && lk != 144478              // 'collation' '}'
       && lk != 144480              // 'comment' '}'
       && lk != 144481              // 'constraint' '}'
       && lk != 144482              // 'construction' '}'
       && lk != 144485              // 'context' '}'
       && lk != 144486              // 'continue' '}'
       && lk != 144487              // 'copy' '}'
       && lk != 144488              // 'copy-namespaces' '}'
       && lk != 144489              // 'count' '}'
       && lk != 144490              // 'decimal-format' '}'
       && lk != 144492              // 'declare' '}'
       && lk != 144493              // 'default' '}'
       && lk != 144494              // 'delete' '}'
       && lk != 144495              // 'descendant' '}'
       && lk != 144496              // 'descendant-or-self' '}'
       && lk != 144497              // 'descending' '}'
       && lk != 144502              // 'div' '}'
       && lk != 144503              // 'document' '}'
       && lk != 144504              // 'document-node' '}'
       && lk != 144505              // 'element' '}'
       && lk != 144506              // 'else' '}'
       && lk != 144507              // 'empty' '}'
       && lk != 144508              // 'empty-sequence' '}'
       && lk != 144509              // 'encoding' '}'
       && lk != 144510              // 'end' '}'
       && lk != 144512              // 'eq' '}'
       && lk != 144513              // 'every' '}'
       && lk != 144515              // 'except' '}'
       && lk != 144516              // 'exit' '}'
       && lk != 144517              // 'external' '}'
       && lk != 144518              // 'first' '}'
       && lk != 144519              // 'following' '}'
       && lk != 144520              // 'following-sibling' '}'
       && lk != 144521              // 'for' '}'
       && lk != 144525              // 'ft-option' '}'
       && lk != 144529              // 'function' '}'
       && lk != 144530              // 'ge' '}'
       && lk != 144532              // 'group' '}'
       && lk != 144534              // 'gt' '}'
       && lk != 144535              // 'idiv' '}'
       && lk != 144536              // 'if' '}'
       && lk != 144537              // 'import' '}'
       && lk != 144538              // 'in' '}'
       && lk != 144539              // 'index' '}'
       && lk != 144543              // 'insert' '}'
       && lk != 144544              // 'instance' '}'
       && lk != 144545              // 'integrity' '}'
       && lk != 144546              // 'intersect' '}'
       && lk != 144547              // 'into' '}'
       && lk != 144548              // 'is' '}'
       && lk != 144549              // 'item' '}'
       && lk != 144554              // 'last' '}'
       && lk != 144555              // 'lax' '}'
       && lk != 144556              // 'le' '}'
       && lk != 144558              // 'let' '}'
       && lk != 144560              // 'loop' '}'
       && lk != 144562              // 'lt' '}'
       && lk != 144564              // 'mod' '}'
       && lk != 144565              // 'modify' '}'
       && lk != 144566              // 'module' '}'
       && lk != 144568              // 'namespace' '}'
       && lk != 144569              // 'namespace-node' '}'
       && lk != 144570              // 'ne' '}'
       && lk != 144575              // 'node' '}'
       && lk != 144576              // 'nodes' '}'
       && lk != 144582              // 'only' '}'
       && lk != 144583              // 'option' '}'
       && lk != 144584              // 'or' '}'
       && lk != 144585              // 'order' '}'
       && lk != 144586              // 'ordered' '}'
       && lk != 144587              // 'ordering' '}'
       && lk != 144590              // 'parent' '}'
       && lk != 144596              // 'preceding' '}'
       && lk != 144597              // 'preceding-sibling' '}'
       && lk != 144600              // 'processing-instruction' '}'
       && lk != 144602              // 'rename' '}'
       && lk != 144603              // 'replace' '}'
       && lk != 144604              // 'return' '}'
       && lk != 144605              // 'returning' '}'
       && lk != 144606              // 'revalidation' '}'
       && lk != 144608              // 'satisfies' '}'
       && lk != 144609              // 'schema' '}'
       && lk != 144610              // 'schema-attribute' '}'
       && lk != 144611              // 'schema-element' '}'
       && lk != 144612              // 'score' '}'
       && lk != 144613              // 'self' '}'
       && lk != 144618              // 'sliding' '}'
       && lk != 144619              // 'some' '}'
       && lk != 144620              // 'stable' '}'
       && lk != 144621              // 'start' '}'
       && lk != 144624              // 'strict' '}'
       && lk != 144627              // 'switch' '}'
       && lk != 144628              // 'text' '}'
       && lk != 144632              // 'to' '}'
       && lk != 144633              // 'treat' '}'
       && lk != 144634              // 'try' '}'
       && lk != 144635              // 'tumbling' '}'
       && lk != 144636              // 'type' '}'
       && lk != 144637              // 'typeswitch' '}'
       && lk != 144638              // 'union' '}'
       && lk != 144640              // 'unordered' '}'
       && lk != 144641              // 'updating' '}'
       && lk != 144644              // 'validate' '}'
       && lk != 144645              // 'value' '}'
       && lk != 144646              // 'variable' '}'
       && lk != 144647              // 'version' '}'
       && lk != 144650              // 'where' '}'
       && lk != 144651              // 'while' '}'
       && lk != 144654              // 'with' '}'
       && lk != 144658)             // 'xquery' '}'
      {
        lk = memoized(5, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2;
          try
          {
            try_Statement();
            lk = -1;
          }
          catch (p1A)
          {
            lk = -2;
          }
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(5, e0, lk);
        }
      }
      if (lk != -1
       && lk != 16134               // 'variable' '$'
       && lk != 27141               // Wildcard ';'
       && lk != 27142               // EQName^Token ';'
       && lk != 27144               // IntegerLiteral ';'
       && lk != 27145               // DecimalLiteral ';'
       && lk != 27146               // DoubleLiteral ';'
       && lk != 27147               // StringLiteral ';'
       && lk != 27180               // '.' ';'
       && lk != 27181               // '..' ';'
       && lk != 27182               // '/' ';'
       && lk != 27206               // 'after' ';'
       && lk != 27208               // 'allowing' ';'
       && lk != 27209               // 'ancestor' ';'
       && lk != 27210               // 'ancestor-or-self' ';'
       && lk != 27211               // 'and' ';'
       && lk != 27215               // 'as' ';'
       && lk != 27216               // 'ascending' ';'
       && lk != 27217               // 'at' ';'
       && lk != 27218               // 'attribute' ';'
       && lk != 27219               // 'base-uri' ';'
       && lk != 27220               // 'before' ';'
       && lk != 27221               // 'boundary-space' ';'
       && lk != 27222               // 'break' ';'
       && lk != 27224               // 'case' ';'
       && lk != 27225               // 'cast' ';'
       && lk != 27226               // 'castable' ';'
       && lk != 27227               // 'catch' ';'
       && lk != 27229               // 'child' ';'
       && lk != 27230               // 'collation' ';'
       && lk != 27232               // 'comment' ';'
       && lk != 27233               // 'constraint' ';'
       && lk != 27234               // 'construction' ';'
       && lk != 27237               // 'context' ';'
       && lk != 27238               // 'continue' ';'
       && lk != 27239               // 'copy' ';'
       && lk != 27240               // 'copy-namespaces' ';'
       && lk != 27241               // 'count' ';'
       && lk != 27242               // 'decimal-format' ';'
       && lk != 27244               // 'declare' ';'
       && lk != 27245               // 'default' ';'
       && lk != 27246               // 'delete' ';'
       && lk != 27247               // 'descendant' ';'
       && lk != 27248               // 'descendant-or-self' ';'
       && lk != 27249               // 'descending' ';'
       && lk != 27254               // 'div' ';'
       && lk != 27255               // 'document' ';'
       && lk != 27256               // 'document-node' ';'
       && lk != 27257               // 'element' ';'
       && lk != 27258               // 'else' ';'
       && lk != 27259               // 'empty' ';'
       && lk != 27260               // 'empty-sequence' ';'
       && lk != 27261               // 'encoding' ';'
       && lk != 27262               // 'end' ';'
       && lk != 27264               // 'eq' ';'
       && lk != 27265               // 'every' ';'
       && lk != 27267               // 'except' ';'
       && lk != 27268               // 'exit' ';'
       && lk != 27269               // 'external' ';'
       && lk != 27270               // 'first' ';'
       && lk != 27271               // 'following' ';'
       && lk != 27272               // 'following-sibling' ';'
       && lk != 27273               // 'for' ';'
       && lk != 27277               // 'ft-option' ';'
       && lk != 27281               // 'function' ';'
       && lk != 27282               // 'ge' ';'
       && lk != 27284               // 'group' ';'
       && lk != 27286               // 'gt' ';'
       && lk != 27287               // 'idiv' ';'
       && lk != 27288               // 'if' ';'
       && lk != 27289               // 'import' ';'
       && lk != 27290               // 'in' ';'
       && lk != 27291               // 'index' ';'
       && lk != 27295               // 'insert' ';'
       && lk != 27296               // 'instance' ';'
       && lk != 27297               // 'integrity' ';'
       && lk != 27298               // 'intersect' ';'
       && lk != 27299               // 'into' ';'
       && lk != 27300               // 'is' ';'
       && lk != 27301               // 'item' ';'
       && lk != 27306               // 'last' ';'
       && lk != 27307               // 'lax' ';'
       && lk != 27308               // 'le' ';'
       && lk != 27310               // 'let' ';'
       && lk != 27312               // 'loop' ';'
       && lk != 27314               // 'lt' ';'
       && lk != 27316               // 'mod' ';'
       && lk != 27317               // 'modify' ';'
       && lk != 27318               // 'module' ';'
       && lk != 27320               // 'namespace' ';'
       && lk != 27321               // 'namespace-node' ';'
       && lk != 27322               // 'ne' ';'
       && lk != 27327               // 'node' ';'
       && lk != 27328               // 'nodes' ';'
       && lk != 27334               // 'only' ';'
       && lk != 27335               // 'option' ';'
       && lk != 27336               // 'or' ';'
       && lk != 27337               // 'order' ';'
       && lk != 27338               // 'ordered' ';'
       && lk != 27339               // 'ordering' ';'
       && lk != 27342               // 'parent' ';'
       && lk != 27348               // 'preceding' ';'
       && lk != 27349               // 'preceding-sibling' ';'
       && lk != 27352               // 'processing-instruction' ';'
       && lk != 27354               // 'rename' ';'
       && lk != 27355               // 'replace' ';'
       && lk != 27356               // 'return' ';'
       && lk != 27357               // 'returning' ';'
       && lk != 27358               // 'revalidation' ';'
       && lk != 27360               // 'satisfies' ';'
       && lk != 27361               // 'schema' ';'
       && lk != 27362               // 'schema-attribute' ';'
       && lk != 27363               // 'schema-element' ';'
       && lk != 27364               // 'score' ';'
       && lk != 27365               // 'self' ';'
       && lk != 27370               // 'sliding' ';'
       && lk != 27371               // 'some' ';'
       && lk != 27372               // 'stable' ';'
       && lk != 27373               // 'start' ';'
       && lk != 27376               // 'strict' ';'
       && lk != 27379               // 'switch' ';'
       && lk != 27380               // 'text' ';'
       && lk != 27384               // 'to' ';'
       && lk != 27385               // 'treat' ';'
       && lk != 27386               // 'try' ';'
       && lk != 27387               // 'tumbling' ';'
       && lk != 27388               // 'type' ';'
       && lk != 27389               // 'typeswitch' ';'
       && lk != 27390               // 'union' ';'
       && lk != 27392               // 'unordered' ';'
       && lk != 27393               // 'updating' ';'
       && lk != 27396               // 'validate' ';'
       && lk != 27397               // 'value' ';'
       && lk != 27398               // 'variable' ';'
       && lk != 27399               // 'version' ';'
       && lk != 27402               // 'where' ';'
       && lk != 27403               // 'while' ';'
       && lk != 27406               // 'with' ';'
       && lk != 27410               // 'xquery' ';'
       && lk != 90198               // 'break' 'loop'
       && lk != 90214               // 'continue' 'loop'
       && lk != 113284)             // 'exit' 'returning'
      {
        break;
      }
      parse_Statement();
    }
    endNonterminal("Statements");
  }

  function try_Statements()
  {
    for (;;)
    {
      lookahead1W(329);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | EOF | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' |
                                    // '..' | '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|' | '}'
      switch (l1)
      {
      case 34:                      // '('
        lookahead2W(324);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | ')' | '+' | '-' | '.' |
                                    // '..' | '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
        break;
      case 35:                      // '(#'
        lookahead2(304);            // EQName^Token | S | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
        break;
      case 46:                      // '/'
        lookahead2W(337);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | EOF | '!' | '!=' | '$' | '%' | '(' | '(:' | '*' | '+' |
                                    // ',' | '-' | '.' | '..' | ';' | '<' | '<!--' | '<<' | '<=' | '<?' | '=' | '>' |
                                    // '>=' | '>>' | '@' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'contains' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|' | '|' | '||' | '}'
        break;
      case 47:                      // '//'
        lookahead2W(319);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(:' | '.' | '..' | '<' | '<!--' |
                                    // '<?' | '@' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
        break;
      case 54:                      // '<'
        lookahead2(4);              // QName
        break;
      case 55:                      // '<!--'
        lookahead2(1);              // DirCommentContents
        break;
      case 59:                      // '<?'
        lookahead2(3);              // PITarget
        break;
      case 66:                      // '@'
        lookahead2W(307);           // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
        break;
      case 68:                      // '['
        lookahead2W(326);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | ']' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
        break;
      case 77:                      // 'append'
        lookahead2W(80);            // S^WS | '(:' | 'json'
        break;
      case 82:                      // 'attribute'
        lookahead2W(334);           // EQName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' |
                                    // '-' | '/' | '//' | '::' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'contains' | 'context' | 'continue' |
                                    // 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '|' | '||' | '}'
        break;
      case 121:                     // 'element'
        lookahead2W(332);           // EQName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' |
                                    // '-' | '/' | '//' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' |
                                    // 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'contains' | 'context' | 'continue' |
                                    // 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '|' | '||' | '}'
        break;
      case 132:                     // 'exit'
        lookahead2W(242);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' |
                                    // 'returning' | 'to' | 'treat' | 'union' | '|' | '||' | '}'
        break;
      case 137:                     // 'for'
        lookahead2W(246);           // S^WS | EOF | '!' | '!=' | '#' | '$' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'sliding' |
                                    // 'to' | 'treat' | 'tumbling' | 'union' | '|' | '||' | '}'
        break;
      case 174:                     // 'let'
        lookahead2W(244);           // S^WS | EOF | '!' | '!=' | '#' | '$' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'score' |
                                    // 'to' | 'treat' | 'union' | '|' | '||' | '}'
        break;
      case 218:                     // 'rename'
        lookahead2W(245);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'json' | 'le' | 'lt' | 'mod' | 'ne' | 'node' |
                                    // 'or' | 'to' | 'treat' | 'union' | '|' | '||' | '}'
        break;
      case 219:                     // 'replace'
        lookahead2W(248);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'json' | 'le' | 'lt' | 'mod' | 'ne' | 'node' |
                                    // 'or' | 'to' | 'treat' | 'union' | 'value' | '|' | '||' | '}'
        break;
      case 260:                     // 'validate'
        lookahead2W(249);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'lax' | 'le' | 'lt' | 'mod' | 'ne' | 'or' |
                                    // 'strict' | 'to' | 'treat' | 'type' | 'union' | '{' | '|' | '||' | '}'
        break;
      case 276:                     // '{'
        lookahead2W(328);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|' | '}'
        break;
      case 278:                     // '{|'
        lookahead2W(327);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|' | '|}'
        break;
      case 5:                       // Wildcard
      case 45:                      // '..'
        lookahead2W(226);           // S^WS | EOF | '!' | '!=' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' | ';' | '<' |
                                    // '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' | 'castable' |
                                    // 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' | 'treat' |
                                    // 'union' | '|' | '||' | '}'
        break;
      case 31:                      // '$'
      case 32:                      // '%'
        lookahead2W(305);           // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
        break;
      case 40:                      // '+'
      case 42:                      // '-'
        lookahead2W(321);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
        break;
      case 86:                      // 'break'
      case 102:                     // 'continue'
        lookahead2W(240);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'loop' | 'lt' | 'mod' | 'ne' | 'or' |
                                    // 'to' | 'treat' | 'union' | '|' | '||' | '}'
        break;
      case 110:                     // 'delete'
      case 159:                     // 'insert'
        lookahead2W(247);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'json' | 'le' | 'lt' | 'mod' | 'ne' | 'node' |
                                    // 'nodes' | 'or' | 'to' | 'treat' | 'union' | '|' | '||' | '}'
        break;
      case 124:                     // 'empty-sequence'
      case 165:                     // 'item'
        lookahead2W(231);           // S^WS | EOF | '!' | '!=' | '#' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' | ';' |
                                    // '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' | 'castable' |
                                    // 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' | 'treat' |
                                    // 'union' | '|' | '||' | '}'
        break;
      case 184:                     // 'namespace'
      case 216:                     // 'processing-instruction'
        lookahead2W(333);           // NCName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' |
                                    // '-' | '/' | '//' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' |
                                    // 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'contains' | 'context' | 'continue' |
                                    // 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '|' | '||' | '}'
        break;
      case 103:                     // 'copy'
      case 129:                     // 'every'
      case 235:                     // 'some'
      case 262:                     // 'variable'
        lookahead2W(237);           // S^WS | EOF | '!' | '!=' | '#' | '$' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' |
                                    // 'treat' | 'union' | '|' | '||' | '}'
        break;
      case 8:                       // IntegerLiteral
      case 9:                       // DecimalLiteral
      case 10:                      // DoubleLiteral
      case 11:                      // StringLiteral
      case 44:                      // '.'
        lookahead2W(232);           // S^WS | EOF | '!' | '!=' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' | ';' |
                                    // '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' | 'castable' |
                                    // 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' | 'treat' |
                                    // 'union' | '|' | '||' | '}'
        break;
      case 96:                      // 'comment'
      case 119:                     // 'document'
      case 202:                     // 'ordered'
      case 244:                     // 'text'
      case 250:                     // 'try'
      case 256:                     // 'unordered'
        lookahead2W(243);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' |
                                    // 'treat' | 'union' | '{' | '|' | '||' | '}'
        break;
      case 73:                      // 'ancestor'
      case 74:                      // 'ancestor-or-self'
      case 93:                      // 'child'
      case 111:                     // 'descendant'
      case 112:                     // 'descendant-or-self'
      case 135:                     // 'following'
      case 136:                     // 'following-sibling'
      case 206:                     // 'parent'
      case 212:                     // 'preceding'
      case 213:                     // 'preceding-sibling'
      case 229:                     // 'self'
        lookahead2W(238);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // '::' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' |
                                    // 'treat' | 'union' | '|' | '||' | '}'
        break;
      case 6:                       // EQName^Token
      case 70:                      // 'after'
      case 72:                      // 'allowing'
      case 75:                      // 'and'
      case 79:                      // 'as'
      case 80:                      // 'ascending'
      case 81:                      // 'at'
      case 83:                      // 'base-uri'
      case 84:                      // 'before'
      case 85:                      // 'boundary-space'
      case 88:                      // 'case'
      case 89:                      // 'cast'
      case 90:                      // 'castable'
      case 91:                      // 'catch'
      case 94:                      // 'collation'
      case 97:                      // 'constraint'
      case 98:                      // 'construction'
      case 101:                     // 'context'
      case 104:                     // 'copy-namespaces'
      case 105:                     // 'count'
      case 106:                     // 'decimal-format'
      case 108:                     // 'declare'
      case 109:                     // 'default'
      case 113:                     // 'descending'
      case 118:                     // 'div'
      case 120:                     // 'document-node'
      case 122:                     // 'else'
      case 123:                     // 'empty'
      case 125:                     // 'encoding'
      case 126:                     // 'end'
      case 128:                     // 'eq'
      case 131:                     // 'except'
      case 133:                     // 'external'
      case 134:                     // 'first'
      case 141:                     // 'ft-option'
      case 145:                     // 'function'
      case 146:                     // 'ge'
      case 148:                     // 'group'
      case 150:                     // 'gt'
      case 151:                     // 'idiv'
      case 152:                     // 'if'
      case 153:                     // 'import'
      case 154:                     // 'in'
      case 155:                     // 'index'
      case 160:                     // 'instance'
      case 161:                     // 'integrity'
      case 162:                     // 'intersect'
      case 163:                     // 'into'
      case 164:                     // 'is'
      case 170:                     // 'last'
      case 171:                     // 'lax'
      case 172:                     // 'le'
      case 176:                     // 'loop'
      case 178:                     // 'lt'
      case 180:                     // 'mod'
      case 181:                     // 'modify'
      case 182:                     // 'module'
      case 185:                     // 'namespace-node'
      case 186:                     // 'ne'
      case 191:                     // 'node'
      case 192:                     // 'nodes'
      case 198:                     // 'only'
      case 199:                     // 'option'
      case 200:                     // 'or'
      case 201:                     // 'order'
      case 203:                     // 'ordering'
      case 220:                     // 'return'
      case 221:                     // 'returning'
      case 222:                     // 'revalidation'
      case 224:                     // 'satisfies'
      case 225:                     // 'schema'
      case 226:                     // 'schema-attribute'
      case 227:                     // 'schema-element'
      case 228:                     // 'score'
      case 234:                     // 'sliding'
      case 236:                     // 'stable'
      case 237:                     // 'start'
      case 240:                     // 'strict'
      case 243:                     // 'switch'
      case 248:                     // 'to'
      case 249:                     // 'treat'
      case 251:                     // 'tumbling'
      case 252:                     // 'type'
      case 253:                     // 'typeswitch'
      case 254:                     // 'union'
      case 257:                     // 'updating'
      case 261:                     // 'value'
      case 263:                     // 'version'
      case 266:                     // 'where'
      case 267:                     // 'while'
      case 270:                     // 'with'
      case 274:                     // 'xquery'
        lookahead2W(235);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' |
                                    // 'treat' | 'union' | '|' | '||' | '}'
        break;
      default:
        lk = l1;
      }
      if (lk != 25                  // EOF
       && lk != 282                 // '}'
       && lk != 12805               // Wildcard EOF
       && lk != 12806               // EQName^Token EOF
       && lk != 12808               // IntegerLiteral EOF
       && lk != 12809               // DecimalLiteral EOF
       && lk != 12810               // DoubleLiteral EOF
       && lk != 12811               // StringLiteral EOF
       && lk != 12844               // '.' EOF
       && lk != 12845               // '..' EOF
       && lk != 12846               // '/' EOF
       && lk != 12870               // 'after' EOF
       && lk != 12872               // 'allowing' EOF
       && lk != 12873               // 'ancestor' EOF
       && lk != 12874               // 'ancestor-or-self' EOF
       && lk != 12875               // 'and' EOF
       && lk != 12879               // 'as' EOF
       && lk != 12880               // 'ascending' EOF
       && lk != 12881               // 'at' EOF
       && lk != 12882               // 'attribute' EOF
       && lk != 12883               // 'base-uri' EOF
       && lk != 12884               // 'before' EOF
       && lk != 12885               // 'boundary-space' EOF
       && lk != 12886               // 'break' EOF
       && lk != 12888               // 'case' EOF
       && lk != 12889               // 'cast' EOF
       && lk != 12890               // 'castable' EOF
       && lk != 12891               // 'catch' EOF
       && lk != 12893               // 'child' EOF
       && lk != 12894               // 'collation' EOF
       && lk != 12896               // 'comment' EOF
       && lk != 12897               // 'constraint' EOF
       && lk != 12898               // 'construction' EOF
       && lk != 12901               // 'context' EOF
       && lk != 12902               // 'continue' EOF
       && lk != 12903               // 'copy' EOF
       && lk != 12904               // 'copy-namespaces' EOF
       && lk != 12905               // 'count' EOF
       && lk != 12906               // 'decimal-format' EOF
       && lk != 12908               // 'declare' EOF
       && lk != 12909               // 'default' EOF
       && lk != 12910               // 'delete' EOF
       && lk != 12911               // 'descendant' EOF
       && lk != 12912               // 'descendant-or-self' EOF
       && lk != 12913               // 'descending' EOF
       && lk != 12918               // 'div' EOF
       && lk != 12919               // 'document' EOF
       && lk != 12920               // 'document-node' EOF
       && lk != 12921               // 'element' EOF
       && lk != 12922               // 'else' EOF
       && lk != 12923               // 'empty' EOF
       && lk != 12924               // 'empty-sequence' EOF
       && lk != 12925               // 'encoding' EOF
       && lk != 12926               // 'end' EOF
       && lk != 12928               // 'eq' EOF
       && lk != 12929               // 'every' EOF
       && lk != 12931               // 'except' EOF
       && lk != 12932               // 'exit' EOF
       && lk != 12933               // 'external' EOF
       && lk != 12934               // 'first' EOF
       && lk != 12935               // 'following' EOF
       && lk != 12936               // 'following-sibling' EOF
       && lk != 12937               // 'for' EOF
       && lk != 12941               // 'ft-option' EOF
       && lk != 12945               // 'function' EOF
       && lk != 12946               // 'ge' EOF
       && lk != 12948               // 'group' EOF
       && lk != 12950               // 'gt' EOF
       && lk != 12951               // 'idiv' EOF
       && lk != 12952               // 'if' EOF
       && lk != 12953               // 'import' EOF
       && lk != 12954               // 'in' EOF
       && lk != 12955               // 'index' EOF
       && lk != 12959               // 'insert' EOF
       && lk != 12960               // 'instance' EOF
       && lk != 12961               // 'integrity' EOF
       && lk != 12962               // 'intersect' EOF
       && lk != 12963               // 'into' EOF
       && lk != 12964               // 'is' EOF
       && lk != 12965               // 'item' EOF
       && lk != 12970               // 'last' EOF
       && lk != 12971               // 'lax' EOF
       && lk != 12972               // 'le' EOF
       && lk != 12974               // 'let' EOF
       && lk != 12976               // 'loop' EOF
       && lk != 12978               // 'lt' EOF
       && lk != 12980               // 'mod' EOF
       && lk != 12981               // 'modify' EOF
       && lk != 12982               // 'module' EOF
       && lk != 12984               // 'namespace' EOF
       && lk != 12985               // 'namespace-node' EOF
       && lk != 12986               // 'ne' EOF
       && lk != 12991               // 'node' EOF
       && lk != 12992               // 'nodes' EOF
       && lk != 12998               // 'only' EOF
       && lk != 12999               // 'option' EOF
       && lk != 13000               // 'or' EOF
       && lk != 13001               // 'order' EOF
       && lk != 13002               // 'ordered' EOF
       && lk != 13003               // 'ordering' EOF
       && lk != 13006               // 'parent' EOF
       && lk != 13012               // 'preceding' EOF
       && lk != 13013               // 'preceding-sibling' EOF
       && lk != 13016               // 'processing-instruction' EOF
       && lk != 13018               // 'rename' EOF
       && lk != 13019               // 'replace' EOF
       && lk != 13020               // 'return' EOF
       && lk != 13021               // 'returning' EOF
       && lk != 13022               // 'revalidation' EOF
       && lk != 13024               // 'satisfies' EOF
       && lk != 13025               // 'schema' EOF
       && lk != 13026               // 'schema-attribute' EOF
       && lk != 13027               // 'schema-element' EOF
       && lk != 13028               // 'score' EOF
       && lk != 13029               // 'self' EOF
       && lk != 13034               // 'sliding' EOF
       && lk != 13035               // 'some' EOF
       && lk != 13036               // 'stable' EOF
       && lk != 13037               // 'start' EOF
       && lk != 13040               // 'strict' EOF
       && lk != 13043               // 'switch' EOF
       && lk != 13044               // 'text' EOF
       && lk != 13048               // 'to' EOF
       && lk != 13049               // 'treat' EOF
       && lk != 13050               // 'try' EOF
       && lk != 13051               // 'tumbling' EOF
       && lk != 13052               // 'type' EOF
       && lk != 13053               // 'typeswitch' EOF
       && lk != 13054               // 'union' EOF
       && lk != 13056               // 'unordered' EOF
       && lk != 13057               // 'updating' EOF
       && lk != 13060               // 'validate' EOF
       && lk != 13061               // 'value' EOF
       && lk != 13062               // 'variable' EOF
       && lk != 13063               // 'version' EOF
       && lk != 13066               // 'where' EOF
       && lk != 13067               // 'while' EOF
       && lk != 13070               // 'with' EOF
       && lk != 13074               // 'xquery' EOF
       && lk != 16134               // 'variable' '$'
       && lk != 20997               // Wildcard ','
       && lk != 20998               // EQName^Token ','
       && lk != 21000               // IntegerLiteral ','
       && lk != 21001               // DecimalLiteral ','
       && lk != 21002               // DoubleLiteral ','
       && lk != 21003               // StringLiteral ','
       && lk != 21036               // '.' ','
       && lk != 21037               // '..' ','
       && lk != 21038               // '/' ','
       && lk != 21062               // 'after' ','
       && lk != 21064               // 'allowing' ','
       && lk != 21065               // 'ancestor' ','
       && lk != 21066               // 'ancestor-or-self' ','
       && lk != 21067               // 'and' ','
       && lk != 21071               // 'as' ','
       && lk != 21072               // 'ascending' ','
       && lk != 21073               // 'at' ','
       && lk != 21074               // 'attribute' ','
       && lk != 21075               // 'base-uri' ','
       && lk != 21076               // 'before' ','
       && lk != 21077               // 'boundary-space' ','
       && lk != 21078               // 'break' ','
       && lk != 21080               // 'case' ','
       && lk != 21081               // 'cast' ','
       && lk != 21082               // 'castable' ','
       && lk != 21083               // 'catch' ','
       && lk != 21085               // 'child' ','
       && lk != 21086               // 'collation' ','
       && lk != 21088               // 'comment' ','
       && lk != 21089               // 'constraint' ','
       && lk != 21090               // 'construction' ','
       && lk != 21093               // 'context' ','
       && lk != 21094               // 'continue' ','
       && lk != 21095               // 'copy' ','
       && lk != 21096               // 'copy-namespaces' ','
       && lk != 21097               // 'count' ','
       && lk != 21098               // 'decimal-format' ','
       && lk != 21100               // 'declare' ','
       && lk != 21101               // 'default' ','
       && lk != 21102               // 'delete' ','
       && lk != 21103               // 'descendant' ','
       && lk != 21104               // 'descendant-or-self' ','
       && lk != 21105               // 'descending' ','
       && lk != 21110               // 'div' ','
       && lk != 21111               // 'document' ','
       && lk != 21112               // 'document-node' ','
       && lk != 21113               // 'element' ','
       && lk != 21114               // 'else' ','
       && lk != 21115               // 'empty' ','
       && lk != 21116               // 'empty-sequence' ','
       && lk != 21117               // 'encoding' ','
       && lk != 21118               // 'end' ','
       && lk != 21120               // 'eq' ','
       && lk != 21121               // 'every' ','
       && lk != 21123               // 'except' ','
       && lk != 21124               // 'exit' ','
       && lk != 21125               // 'external' ','
       && lk != 21126               // 'first' ','
       && lk != 21127               // 'following' ','
       && lk != 21128               // 'following-sibling' ','
       && lk != 21129               // 'for' ','
       && lk != 21133               // 'ft-option' ','
       && lk != 21137               // 'function' ','
       && lk != 21138               // 'ge' ','
       && lk != 21140               // 'group' ','
       && lk != 21142               // 'gt' ','
       && lk != 21143               // 'idiv' ','
       && lk != 21144               // 'if' ','
       && lk != 21145               // 'import' ','
       && lk != 21146               // 'in' ','
       && lk != 21147               // 'index' ','
       && lk != 21151               // 'insert' ','
       && lk != 21152               // 'instance' ','
       && lk != 21153               // 'integrity' ','
       && lk != 21154               // 'intersect' ','
       && lk != 21155               // 'into' ','
       && lk != 21156               // 'is' ','
       && lk != 21157               // 'item' ','
       && lk != 21162               // 'last' ','
       && lk != 21163               // 'lax' ','
       && lk != 21164               // 'le' ','
       && lk != 21166               // 'let' ','
       && lk != 21168               // 'loop' ','
       && lk != 21170               // 'lt' ','
       && lk != 21172               // 'mod' ','
       && lk != 21173               // 'modify' ','
       && lk != 21174               // 'module' ','
       && lk != 21176               // 'namespace' ','
       && lk != 21177               // 'namespace-node' ','
       && lk != 21178               // 'ne' ','
       && lk != 21183               // 'node' ','
       && lk != 21184               // 'nodes' ','
       && lk != 21190               // 'only' ','
       && lk != 21191               // 'option' ','
       && lk != 21192               // 'or' ','
       && lk != 21193               // 'order' ','
       && lk != 21194               // 'ordered' ','
       && lk != 21195               // 'ordering' ','
       && lk != 21198               // 'parent' ','
       && lk != 21204               // 'preceding' ','
       && lk != 21205               // 'preceding-sibling' ','
       && lk != 21208               // 'processing-instruction' ','
       && lk != 21210               // 'rename' ','
       && lk != 21211               // 'replace' ','
       && lk != 21212               // 'return' ','
       && lk != 21213               // 'returning' ','
       && lk != 21214               // 'revalidation' ','
       && lk != 21216               // 'satisfies' ','
       && lk != 21217               // 'schema' ','
       && lk != 21218               // 'schema-attribute' ','
       && lk != 21219               // 'schema-element' ','
       && lk != 21220               // 'score' ','
       && lk != 21221               // 'self' ','
       && lk != 21226               // 'sliding' ','
       && lk != 21227               // 'some' ','
       && lk != 21228               // 'stable' ','
       && lk != 21229               // 'start' ','
       && lk != 21232               // 'strict' ','
       && lk != 21235               // 'switch' ','
       && lk != 21236               // 'text' ','
       && lk != 21240               // 'to' ','
       && lk != 21241               // 'treat' ','
       && lk != 21242               // 'try' ','
       && lk != 21243               // 'tumbling' ','
       && lk != 21244               // 'type' ','
       && lk != 21245               // 'typeswitch' ','
       && lk != 21246               // 'union' ','
       && lk != 21248               // 'unordered' ','
       && lk != 21249               // 'updating' ','
       && lk != 21252               // 'validate' ','
       && lk != 21253               // 'value' ','
       && lk != 21254               // 'variable' ','
       && lk != 21255               // 'version' ','
       && lk != 21258               // 'where' ','
       && lk != 21259               // 'while' ','
       && lk != 21262               // 'with' ','
       && lk != 21266               // 'xquery' ','
       && lk != 27141               // Wildcard ';'
       && lk != 27142               // EQName^Token ';'
       && lk != 27144               // IntegerLiteral ';'
       && lk != 27145               // DecimalLiteral ';'
       && lk != 27146               // DoubleLiteral ';'
       && lk != 27147               // StringLiteral ';'
       && lk != 27180               // '.' ';'
       && lk != 27181               // '..' ';'
       && lk != 27182               // '/' ';'
       && lk != 27206               // 'after' ';'
       && lk != 27208               // 'allowing' ';'
       && lk != 27209               // 'ancestor' ';'
       && lk != 27210               // 'ancestor-or-self' ';'
       && lk != 27211               // 'and' ';'
       && lk != 27215               // 'as' ';'
       && lk != 27216               // 'ascending' ';'
       && lk != 27217               // 'at' ';'
       && lk != 27218               // 'attribute' ';'
       && lk != 27219               // 'base-uri' ';'
       && lk != 27220               // 'before' ';'
       && lk != 27221               // 'boundary-space' ';'
       && lk != 27222               // 'break' ';'
       && lk != 27224               // 'case' ';'
       && lk != 27225               // 'cast' ';'
       && lk != 27226               // 'castable' ';'
       && lk != 27227               // 'catch' ';'
       && lk != 27229               // 'child' ';'
       && lk != 27230               // 'collation' ';'
       && lk != 27232               // 'comment' ';'
       && lk != 27233               // 'constraint' ';'
       && lk != 27234               // 'construction' ';'
       && lk != 27237               // 'context' ';'
       && lk != 27238               // 'continue' ';'
       && lk != 27239               // 'copy' ';'
       && lk != 27240               // 'copy-namespaces' ';'
       && lk != 27241               // 'count' ';'
       && lk != 27242               // 'decimal-format' ';'
       && lk != 27244               // 'declare' ';'
       && lk != 27245               // 'default' ';'
       && lk != 27246               // 'delete' ';'
       && lk != 27247               // 'descendant' ';'
       && lk != 27248               // 'descendant-or-self' ';'
       && lk != 27249               // 'descending' ';'
       && lk != 27254               // 'div' ';'
       && lk != 27255               // 'document' ';'
       && lk != 27256               // 'document-node' ';'
       && lk != 27257               // 'element' ';'
       && lk != 27258               // 'else' ';'
       && lk != 27259               // 'empty' ';'
       && lk != 27260               // 'empty-sequence' ';'
       && lk != 27261               // 'encoding' ';'
       && lk != 27262               // 'end' ';'
       && lk != 27264               // 'eq' ';'
       && lk != 27265               // 'every' ';'
       && lk != 27267               // 'except' ';'
       && lk != 27268               // 'exit' ';'
       && lk != 27269               // 'external' ';'
       && lk != 27270               // 'first' ';'
       && lk != 27271               // 'following' ';'
       && lk != 27272               // 'following-sibling' ';'
       && lk != 27273               // 'for' ';'
       && lk != 27277               // 'ft-option' ';'
       && lk != 27281               // 'function' ';'
       && lk != 27282               // 'ge' ';'
       && lk != 27284               // 'group' ';'
       && lk != 27286               // 'gt' ';'
       && lk != 27287               // 'idiv' ';'
       && lk != 27288               // 'if' ';'
       && lk != 27289               // 'import' ';'
       && lk != 27290               // 'in' ';'
       && lk != 27291               // 'index' ';'
       && lk != 27295               // 'insert' ';'
       && lk != 27296               // 'instance' ';'
       && lk != 27297               // 'integrity' ';'
       && lk != 27298               // 'intersect' ';'
       && lk != 27299               // 'into' ';'
       && lk != 27300               // 'is' ';'
       && lk != 27301               // 'item' ';'
       && lk != 27306               // 'last' ';'
       && lk != 27307               // 'lax' ';'
       && lk != 27308               // 'le' ';'
       && lk != 27310               // 'let' ';'
       && lk != 27312               // 'loop' ';'
       && lk != 27314               // 'lt' ';'
       && lk != 27316               // 'mod' ';'
       && lk != 27317               // 'modify' ';'
       && lk != 27318               // 'module' ';'
       && lk != 27320               // 'namespace' ';'
       && lk != 27321               // 'namespace-node' ';'
       && lk != 27322               // 'ne' ';'
       && lk != 27327               // 'node' ';'
       && lk != 27328               // 'nodes' ';'
       && lk != 27334               // 'only' ';'
       && lk != 27335               // 'option' ';'
       && lk != 27336               // 'or' ';'
       && lk != 27337               // 'order' ';'
       && lk != 27338               // 'ordered' ';'
       && lk != 27339               // 'ordering' ';'
       && lk != 27342               // 'parent' ';'
       && lk != 27348               // 'preceding' ';'
       && lk != 27349               // 'preceding-sibling' ';'
       && lk != 27352               // 'processing-instruction' ';'
       && lk != 27354               // 'rename' ';'
       && lk != 27355               // 'replace' ';'
       && lk != 27356               // 'return' ';'
       && lk != 27357               // 'returning' ';'
       && lk != 27358               // 'revalidation' ';'
       && lk != 27360               // 'satisfies' ';'
       && lk != 27361               // 'schema' ';'
       && lk != 27362               // 'schema-attribute' ';'
       && lk != 27363               // 'schema-element' ';'
       && lk != 27364               // 'score' ';'
       && lk != 27365               // 'self' ';'
       && lk != 27370               // 'sliding' ';'
       && lk != 27371               // 'some' ';'
       && lk != 27372               // 'stable' ';'
       && lk != 27373               // 'start' ';'
       && lk != 27376               // 'strict' ';'
       && lk != 27379               // 'switch' ';'
       && lk != 27380               // 'text' ';'
       && lk != 27384               // 'to' ';'
       && lk != 27385               // 'treat' ';'
       && lk != 27386               // 'try' ';'
       && lk != 27387               // 'tumbling' ';'
       && lk != 27388               // 'type' ';'
       && lk != 27389               // 'typeswitch' ';'
       && lk != 27390               // 'union' ';'
       && lk != 27392               // 'unordered' ';'
       && lk != 27393               // 'updating' ';'
       && lk != 27396               // 'validate' ';'
       && lk != 27397               // 'value' ';'
       && lk != 27398               // 'variable' ';'
       && lk != 27399               // 'version' ';'
       && lk != 27402               // 'where' ';'
       && lk != 27403               // 'while' ';'
       && lk != 27406               // 'with' ';'
       && lk != 27410               // 'xquery' ';'
       && lk != 90198               // 'break' 'loop'
       && lk != 90214               // 'continue' 'loop'
       && lk != 113284              // 'exit' 'returning'
       && lk != 144389              // Wildcard '}'
       && lk != 144390              // EQName^Token '}'
       && lk != 144392              // IntegerLiteral '}'
       && lk != 144393              // DecimalLiteral '}'
       && lk != 144394              // DoubleLiteral '}'
       && lk != 144395              // StringLiteral '}'
       && lk != 144428              // '.' '}'
       && lk != 144429              // '..' '}'
       && lk != 144430              // '/' '}'
       && lk != 144454              // 'after' '}'
       && lk != 144456              // 'allowing' '}'
       && lk != 144457              // 'ancestor' '}'
       && lk != 144458              // 'ancestor-or-self' '}'
       && lk != 144459              // 'and' '}'
       && lk != 144463              // 'as' '}'
       && lk != 144464              // 'ascending' '}'
       && lk != 144465              // 'at' '}'
       && lk != 144466              // 'attribute' '}'
       && lk != 144467              // 'base-uri' '}'
       && lk != 144468              // 'before' '}'
       && lk != 144469              // 'boundary-space' '}'
       && lk != 144470              // 'break' '}'
       && lk != 144472              // 'case' '}'
       && lk != 144473              // 'cast' '}'
       && lk != 144474              // 'castable' '}'
       && lk != 144475              // 'catch' '}'
       && lk != 144477              // 'child' '}'
       && lk != 144478              // 'collation' '}'
       && lk != 144480              // 'comment' '}'
       && lk != 144481              // 'constraint' '}'
       && lk != 144482              // 'construction' '}'
       && lk != 144485              // 'context' '}'
       && lk != 144486              // 'continue' '}'
       && lk != 144487              // 'copy' '}'
       && lk != 144488              // 'copy-namespaces' '}'
       && lk != 144489              // 'count' '}'
       && lk != 144490              // 'decimal-format' '}'
       && lk != 144492              // 'declare' '}'
       && lk != 144493              // 'default' '}'
       && lk != 144494              // 'delete' '}'
       && lk != 144495              // 'descendant' '}'
       && lk != 144496              // 'descendant-or-self' '}'
       && lk != 144497              // 'descending' '}'
       && lk != 144502              // 'div' '}'
       && lk != 144503              // 'document' '}'
       && lk != 144504              // 'document-node' '}'
       && lk != 144505              // 'element' '}'
       && lk != 144506              // 'else' '}'
       && lk != 144507              // 'empty' '}'
       && lk != 144508              // 'empty-sequence' '}'
       && lk != 144509              // 'encoding' '}'
       && lk != 144510              // 'end' '}'
       && lk != 144512              // 'eq' '}'
       && lk != 144513              // 'every' '}'
       && lk != 144515              // 'except' '}'
       && lk != 144516              // 'exit' '}'
       && lk != 144517              // 'external' '}'
       && lk != 144518              // 'first' '}'
       && lk != 144519              // 'following' '}'
       && lk != 144520              // 'following-sibling' '}'
       && lk != 144521              // 'for' '}'
       && lk != 144525              // 'ft-option' '}'
       && lk != 144529              // 'function' '}'
       && lk != 144530              // 'ge' '}'
       && lk != 144532              // 'group' '}'
       && lk != 144534              // 'gt' '}'
       && lk != 144535              // 'idiv' '}'
       && lk != 144536              // 'if' '}'
       && lk != 144537              // 'import' '}'
       && lk != 144538              // 'in' '}'
       && lk != 144539              // 'index' '}'
       && lk != 144543              // 'insert' '}'
       && lk != 144544              // 'instance' '}'
       && lk != 144545              // 'integrity' '}'
       && lk != 144546              // 'intersect' '}'
       && lk != 144547              // 'into' '}'
       && lk != 144548              // 'is' '}'
       && lk != 144549              // 'item' '}'
       && lk != 144554              // 'last' '}'
       && lk != 144555              // 'lax' '}'
       && lk != 144556              // 'le' '}'
       && lk != 144558              // 'let' '}'
       && lk != 144560              // 'loop' '}'
       && lk != 144562              // 'lt' '}'
       && lk != 144564              // 'mod' '}'
       && lk != 144565              // 'modify' '}'
       && lk != 144566              // 'module' '}'
       && lk != 144568              // 'namespace' '}'
       && lk != 144569              // 'namespace-node' '}'
       && lk != 144570              // 'ne' '}'
       && lk != 144575              // 'node' '}'
       && lk != 144576              // 'nodes' '}'
       && lk != 144582              // 'only' '}'
       && lk != 144583              // 'option' '}'
       && lk != 144584              // 'or' '}'
       && lk != 144585              // 'order' '}'
       && lk != 144586              // 'ordered' '}'
       && lk != 144587              // 'ordering' '}'
       && lk != 144590              // 'parent' '}'
       && lk != 144596              // 'preceding' '}'
       && lk != 144597              // 'preceding-sibling' '}'
       && lk != 144600              // 'processing-instruction' '}'
       && lk != 144602              // 'rename' '}'
       && lk != 144603              // 'replace' '}'
       && lk != 144604              // 'return' '}'
       && lk != 144605              // 'returning' '}'
       && lk != 144606              // 'revalidation' '}'
       && lk != 144608              // 'satisfies' '}'
       && lk != 144609              // 'schema' '}'
       && lk != 144610              // 'schema-attribute' '}'
       && lk != 144611              // 'schema-element' '}'
       && lk != 144612              // 'score' '}'
       && lk != 144613              // 'self' '}'
       && lk != 144618              // 'sliding' '}'
       && lk != 144619              // 'some' '}'
       && lk != 144620              // 'stable' '}'
       && lk != 144621              // 'start' '}'
       && lk != 144624              // 'strict' '}'
       && lk != 144627              // 'switch' '}'
       && lk != 144628              // 'text' '}'
       && lk != 144632              // 'to' '}'
       && lk != 144633              // 'treat' '}'
       && lk != 144634              // 'try' '}'
       && lk != 144635              // 'tumbling' '}'
       && lk != 144636              // 'type' '}'
       && lk != 144637              // 'typeswitch' '}'
       && lk != 144638              // 'union' '}'
       && lk != 144640              // 'unordered' '}'
       && lk != 144641              // 'updating' '}'
       && lk != 144644              // 'validate' '}'
       && lk != 144645              // 'value' '}'
       && lk != 144646              // 'variable' '}'
       && lk != 144647              // 'version' '}'
       && lk != 144650              // 'where' '}'
       && lk != 144651              // 'while' '}'
       && lk != 144654              // 'with' '}'
       && lk != 144658)             // 'xquery' '}'
      {
        lk = memoized(5, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2;
          try
          {
            try_Statement();
            lk = -1;
          }
          catch (p1A)
          {
            lk = -2;
          }
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(5, e0, lk);
        }
      }
      if (lk != -1
       && lk != 16134               // 'variable' '$'
       && lk != 27141               // Wildcard ';'
       && lk != 27142               // EQName^Token ';'
       && lk != 27144               // IntegerLiteral ';'
       && lk != 27145               // DecimalLiteral ';'
       && lk != 27146               // DoubleLiteral ';'
       && lk != 27147               // StringLiteral ';'
       && lk != 27180               // '.' ';'
       && lk != 27181               // '..' ';'
       && lk != 27182               // '/' ';'
       && lk != 27206               // 'after' ';'
       && lk != 27208               // 'allowing' ';'
       && lk != 27209               // 'ancestor' ';'
       && lk != 27210               // 'ancestor-or-self' ';'
       && lk != 27211               // 'and' ';'
       && lk != 27215               // 'as' ';'
       && lk != 27216               // 'ascending' ';'
       && lk != 27217               // 'at' ';'
       && lk != 27218               // 'attribute' ';'
       && lk != 27219               // 'base-uri' ';'
       && lk != 27220               // 'before' ';'
       && lk != 27221               // 'boundary-space' ';'
       && lk != 27222               // 'break' ';'
       && lk != 27224               // 'case' ';'
       && lk != 27225               // 'cast' ';'
       && lk != 27226               // 'castable' ';'
       && lk != 27227               // 'catch' ';'
       && lk != 27229               // 'child' ';'
       && lk != 27230               // 'collation' ';'
       && lk != 27232               // 'comment' ';'
       && lk != 27233               // 'constraint' ';'
       && lk != 27234               // 'construction' ';'
       && lk != 27237               // 'context' ';'
       && lk != 27238               // 'continue' ';'
       && lk != 27239               // 'copy' ';'
       && lk != 27240               // 'copy-namespaces' ';'
       && lk != 27241               // 'count' ';'
       && lk != 27242               // 'decimal-format' ';'
       && lk != 27244               // 'declare' ';'
       && lk != 27245               // 'default' ';'
       && lk != 27246               // 'delete' ';'
       && lk != 27247               // 'descendant' ';'
       && lk != 27248               // 'descendant-or-self' ';'
       && lk != 27249               // 'descending' ';'
       && lk != 27254               // 'div' ';'
       && lk != 27255               // 'document' ';'
       && lk != 27256               // 'document-node' ';'
       && lk != 27257               // 'element' ';'
       && lk != 27258               // 'else' ';'
       && lk != 27259               // 'empty' ';'
       && lk != 27260               // 'empty-sequence' ';'
       && lk != 27261               // 'encoding' ';'
       && lk != 27262               // 'end' ';'
       && lk != 27264               // 'eq' ';'
       && lk != 27265               // 'every' ';'
       && lk != 27267               // 'except' ';'
       && lk != 27268               // 'exit' ';'
       && lk != 27269               // 'external' ';'
       && lk != 27270               // 'first' ';'
       && lk != 27271               // 'following' ';'
       && lk != 27272               // 'following-sibling' ';'
       && lk != 27273               // 'for' ';'
       && lk != 27277               // 'ft-option' ';'
       && lk != 27281               // 'function' ';'
       && lk != 27282               // 'ge' ';'
       && lk != 27284               // 'group' ';'
       && lk != 27286               // 'gt' ';'
       && lk != 27287               // 'idiv' ';'
       && lk != 27288               // 'if' ';'
       && lk != 27289               // 'import' ';'
       && lk != 27290               // 'in' ';'
       && lk != 27291               // 'index' ';'
       && lk != 27295               // 'insert' ';'
       && lk != 27296               // 'instance' ';'
       && lk != 27297               // 'integrity' ';'
       && lk != 27298               // 'intersect' ';'
       && lk != 27299               // 'into' ';'
       && lk != 27300               // 'is' ';'
       && lk != 27301               // 'item' ';'
       && lk != 27306               // 'last' ';'
       && lk != 27307               // 'lax' ';'
       && lk != 27308               // 'le' ';'
       && lk != 27310               // 'let' ';'
       && lk != 27312               // 'loop' ';'
       && lk != 27314               // 'lt' ';'
       && lk != 27316               // 'mod' ';'
       && lk != 27317               // 'modify' ';'
       && lk != 27318               // 'module' ';'
       && lk != 27320               // 'namespace' ';'
       && lk != 27321               // 'namespace-node' ';'
       && lk != 27322               // 'ne' ';'
       && lk != 27327               // 'node' ';'
       && lk != 27328               // 'nodes' ';'
       && lk != 27334               // 'only' ';'
       && lk != 27335               // 'option' ';'
       && lk != 27336               // 'or' ';'
       && lk != 27337               // 'order' ';'
       && lk != 27338               // 'ordered' ';'
       && lk != 27339               // 'ordering' ';'
       && lk != 27342               // 'parent' ';'
       && lk != 27348               // 'preceding' ';'
       && lk != 27349               // 'preceding-sibling' ';'
       && lk != 27352               // 'processing-instruction' ';'
       && lk != 27354               // 'rename' ';'
       && lk != 27355               // 'replace' ';'
       && lk != 27356               // 'return' ';'
       && lk != 27357               // 'returning' ';'
       && lk != 27358               // 'revalidation' ';'
       && lk != 27360               // 'satisfies' ';'
       && lk != 27361               // 'schema' ';'
       && lk != 27362               // 'schema-attribute' ';'
       && lk != 27363               // 'schema-element' ';'
       && lk != 27364               // 'score' ';'
       && lk != 27365               // 'self' ';'
       && lk != 27370               // 'sliding' ';'
       && lk != 27371               // 'some' ';'
       && lk != 27372               // 'stable' ';'
       && lk != 27373               // 'start' ';'
       && lk != 27376               // 'strict' ';'
       && lk != 27379               // 'switch' ';'
       && lk != 27380               // 'text' ';'
       && lk != 27384               // 'to' ';'
       && lk != 27385               // 'treat' ';'
       && lk != 27386               // 'try' ';'
       && lk != 27387               // 'tumbling' ';'
       && lk != 27388               // 'type' ';'
       && lk != 27389               // 'typeswitch' ';'
       && lk != 27390               // 'union' ';'
       && lk != 27392               // 'unordered' ';'
       && lk != 27393               // 'updating' ';'
       && lk != 27396               // 'validate' ';'
       && lk != 27397               // 'value' ';'
       && lk != 27398               // 'variable' ';'
       && lk != 27399               // 'version' ';'
       && lk != 27402               // 'where' ';'
       && lk != 27403               // 'while' ';'
       && lk != 27406               // 'with' ';'
       && lk != 27410               // 'xquery' ';'
       && lk != 90198               // 'break' 'loop'
       && lk != 90214               // 'continue' 'loop'
       && lk != 113284)             // 'exit' 'returning'
      {
        break;
      }
      try_Statement();
    }
  }

  function parse_StatementsAndExpr()
  {
    startNonterminal("StatementsAndExpr");
    parse_Statements();
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    parse_Expr();
    endNonterminal("StatementsAndExpr");
  }

  function try_StatementsAndExpr()
  {
    try_Statements();
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    try_Expr();
  }

  function parse_StatementsAndOptionalExpr()
  {
    startNonterminal("StatementsAndOptionalExpr");
    parse_Statements();
    lookahead1W(329);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | EOF | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' |
                                    // '..' | '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|' | '}'
    if (l1 != 25                    // EOF
     && l1 != 282)                  // '}'
    {
      parse_Expr();
    }
    endNonterminal("StatementsAndOptionalExpr");
  }

  function try_StatementsAndOptionalExpr()
  {
    try_Statements();
    lookahead1W(329);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | EOF | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' |
                                    // '..' | '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|' | '}'
    if (l1 != 25                    // EOF
     && l1 != 282)                  // '}'
    {
      try_Expr();
    }
  }

  function parse_Statement()
  {
    startNonterminal("Statement");
    lookahead1W(322);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    switch (l1)
    {
    case 132:                       // 'exit'
      lookahead2W(229);             // S^WS | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | '-' | '/' | '//' | ';' | '<' |
                                    // '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' | 'castable' |
                                    // 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'returning' | 'to' |
                                    // 'treat' | 'union' | '|' | '||'
      break;
    case 137:                       // 'for'
      lookahead2W(236);             // S^WS | '!' | '!=' | '#' | '$' | '(' | '(:' | '*' | '+' | '-' | '/' | '//' | ';' |
                                    // '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' | 'castable' |
                                    // 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'sliding' | 'to' |
                                    // 'treat' | 'tumbling' | 'union' | '|' | '||'
      break;
    case 174:                       // 'let'
      lookahead2W(233);             // S^WS | '!' | '!=' | '#' | '$' | '(' | '(:' | '*' | '+' | '-' | '/' | '//' | ';' |
                                    // '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' | 'castable' |
                                    // 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'score' | 'to' |
                                    // 'treat' | 'union' | '|' | '||'
      break;
    case 250:                       // 'try'
      lookahead2W(230);             // S^WS | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | '-' | '/' | '//' | ';' | '<' |
                                    // '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' | 'castable' |
                                    // 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' | 'treat' |
                                    // 'union' | '{' | '|' | '||'
      break;
    case 262:                       // 'variable'
      lookahead2W(227);             // S^WS | '!' | '!=' | '#' | '$' | '(' | '(:' | '*' | '+' | '-' | '/' | '//' | ';' |
                                    // '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' | 'castable' |
                                    // 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' | 'treat' |
                                    // 'union' | '|' | '||'
      break;
    case 276:                       // '{'
      lookahead2W(328);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|' | '}'
      break;
    case 31:                        // '$'
    case 32:                        // '%'
      lookahead2W(305);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      break;
    case 86:                        // 'break'
    case 102:                       // 'continue'
      lookahead2W(228);             // S^WS | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | '-' | '/' | '//' | ';' | '<' |
                                    // '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' | 'castable' |
                                    // 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'is' | 'le' | 'loop' | 'lt' | 'mod' | 'ne' | 'or' | 'to' |
                                    // 'treat' | 'union' | '|' | '||'
      break;
    case 152:                       // 'if'
    case 243:                       // 'switch'
    case 253:                       // 'typeswitch'
    case 267:                       // 'while'
      lookahead2W(225);             // S^WS | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | '-' | '/' | '//' | ';' | '<' |
                                    // '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' | 'castable' |
                                    // 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' | 'treat' |
                                    // 'union' | '|' | '||'
      break;
    default:
      lk = l1;
    }
    if (lk == 2836                  // '{' Wildcard
     || lk == 3103                  // '$' EQName^Token
     || lk == 3104                  // '%' EQName^Token
     || lk == 3348                  // '{' EQName^Token
     || lk == 4372                  // '{' IntegerLiteral
     || lk == 4884                  // '{' DecimalLiteral
     || lk == 5396                  // '{' DoubleLiteral
     || lk == 5908                  // '{' StringLiteral
     || lk == 16148                 // '{' '$'
     || lk == 16660                 // '{' '%'
     || lk == 17675                 // 'while' '('
     || lk == 17684                 // '{' '('
     || lk == 18196                 // '{' '(#'
     || lk == 20756                 // '{' '+'
     || lk == 21780                 // '{' '-'
     || lk == 22804                 // '{' '.'
     || lk == 23316                 // '{' '..'
     || lk == 23828                 // '{' '/'
     || lk == 24340                 // '{' '//'
     || lk == 27924                 // '{' '<'
     || lk == 28436                 // '{' '<!--'
     || lk == 30484                 // '{' '<?'
     || lk == 34068                 // '{' '@'
     || lk == 35092                 // '{' '['
     || lk == 35871                 // '$' 'after'
     || lk == 35872                 // '%' 'after'
     || lk == 36116                 // '{' 'after'
     || lk == 36895                 // '$' 'allowing'
     || lk == 36896                 // '%' 'allowing'
     || lk == 37140                 // '{' 'allowing'
     || lk == 37407                 // '$' 'ancestor'
     || lk == 37408                 // '%' 'ancestor'
     || lk == 37652                 // '{' 'ancestor'
     || lk == 37919                 // '$' 'ancestor-or-self'
     || lk == 37920                 // '%' 'ancestor-or-self'
     || lk == 38164                 // '{' 'ancestor-or-self'
     || lk == 38431                 // '$' 'and'
     || lk == 38432                 // '%' 'and'
     || lk == 38676                 // '{' 'and'
     || lk == 39700                 // '{' 'append'
     || lk == 40479                 // '$' 'as'
     || lk == 40480                 // '%' 'as'
     || lk == 40724                 // '{' 'as'
     || lk == 40991                 // '$' 'ascending'
     || lk == 40992                 // '%' 'ascending'
     || lk == 41236                 // '{' 'ascending'
     || lk == 41503                 // '$' 'at'
     || lk == 41504                 // '%' 'at'
     || lk == 41748                 // '{' 'at'
     || lk == 42015                 // '$' 'attribute'
     || lk == 42016                 // '%' 'attribute'
     || lk == 42260                 // '{' 'attribute'
     || lk == 42527                 // '$' 'base-uri'
     || lk == 42528                 // '%' 'base-uri'
     || lk == 42772                 // '{' 'base-uri'
     || lk == 43039                 // '$' 'before'
     || lk == 43040                 // '%' 'before'
     || lk == 43284                 // '{' 'before'
     || lk == 43551                 // '$' 'boundary-space'
     || lk == 43552                 // '%' 'boundary-space'
     || lk == 43796                 // '{' 'boundary-space'
     || lk == 44063                 // '$' 'break'
     || lk == 44064                 // '%' 'break'
     || lk == 44308                 // '{' 'break'
     || lk == 45087                 // '$' 'case'
     || lk == 45088                 // '%' 'case'
     || lk == 45332                 // '{' 'case'
     || lk == 45599                 // '$' 'cast'
     || lk == 45600                 // '%' 'cast'
     || lk == 45844                 // '{' 'cast'
     || lk == 46111                 // '$' 'castable'
     || lk == 46112                 // '%' 'castable'
     || lk == 46356                 // '{' 'castable'
     || lk == 46623                 // '$' 'catch'
     || lk == 46624                 // '%' 'catch'
     || lk == 46868                 // '{' 'catch'
     || lk == 47647                 // '$' 'child'
     || lk == 47648                 // '%' 'child'
     || lk == 47892                 // '{' 'child'
     || lk == 48159                 // '$' 'collation'
     || lk == 48160                 // '%' 'collation'
     || lk == 48404                 // '{' 'collation'
     || lk == 49183                 // '$' 'comment'
     || lk == 49184                 // '%' 'comment'
     || lk == 49428                 // '{' 'comment'
     || lk == 49695                 // '$' 'constraint'
     || lk == 49696                 // '%' 'constraint'
     || lk == 49940                 // '{' 'constraint'
     || lk == 50207                 // '$' 'construction'
     || lk == 50208                 // '%' 'construction'
     || lk == 50452                 // '{' 'construction'
     || lk == 51743                 // '$' 'context'
     || lk == 51744                 // '%' 'context'
     || lk == 51988                 // '{' 'context'
     || lk == 52255                 // '$' 'continue'
     || lk == 52256                 // '%' 'continue'
     || lk == 52500                 // '{' 'continue'
     || lk == 52767                 // '$' 'copy'
     || lk == 52768                 // '%' 'copy'
     || lk == 53012                 // '{' 'copy'
     || lk == 53279                 // '$' 'copy-namespaces'
     || lk == 53280                 // '%' 'copy-namespaces'
     || lk == 53524                 // '{' 'copy-namespaces'
     || lk == 53791                 // '$' 'count'
     || lk == 53792                 // '%' 'count'
     || lk == 54036                 // '{' 'count'
     || lk == 54303                 // '$' 'decimal-format'
     || lk == 54304                 // '%' 'decimal-format'
     || lk == 54548                 // '{' 'decimal-format'
     || lk == 55327                 // '$' 'declare'
     || lk == 55328                 // '%' 'declare'
     || lk == 55572                 // '{' 'declare'
     || lk == 55839                 // '$' 'default'
     || lk == 55840                 // '%' 'default'
     || lk == 56084                 // '{' 'default'
     || lk == 56351                 // '$' 'delete'
     || lk == 56352                 // '%' 'delete'
     || lk == 56596                 // '{' 'delete'
     || lk == 56863                 // '$' 'descendant'
     || lk == 56864                 // '%' 'descendant'
     || lk == 57108                 // '{' 'descendant'
     || lk == 57375                 // '$' 'descendant-or-self'
     || lk == 57376                 // '%' 'descendant-or-self'
     || lk == 57620                 // '{' 'descendant-or-self'
     || lk == 57887                 // '$' 'descending'
     || lk == 57888                 // '%' 'descending'
     || lk == 58132                 // '{' 'descending'
     || lk == 60447                 // '$' 'div'
     || lk == 60448                 // '%' 'div'
     || lk == 60692                 // '{' 'div'
     || lk == 60959                 // '$' 'document'
     || lk == 60960                 // '%' 'document'
     || lk == 61204                 // '{' 'document'
     || lk == 61471                 // '$' 'document-node'
     || lk == 61472                 // '%' 'document-node'
     || lk == 61716                 // '{' 'document-node'
     || lk == 61983                 // '$' 'element'
     || lk == 61984                 // '%' 'element'
     || lk == 62228                 // '{' 'element'
     || lk == 62495                 // '$' 'else'
     || lk == 62496                 // '%' 'else'
     || lk == 62740                 // '{' 'else'
     || lk == 63007                 // '$' 'empty'
     || lk == 63008                 // '%' 'empty'
     || lk == 63252                 // '{' 'empty'
     || lk == 63519                 // '$' 'empty-sequence'
     || lk == 63520                 // '%' 'empty-sequence'
     || lk == 63764                 // '{' 'empty-sequence'
     || lk == 64031                 // '$' 'encoding'
     || lk == 64032                 // '%' 'encoding'
     || lk == 64276                 // '{' 'encoding'
     || lk == 64543                 // '$' 'end'
     || lk == 64544                 // '%' 'end'
     || lk == 64788                 // '{' 'end'
     || lk == 65567                 // '$' 'eq'
     || lk == 65568                 // '%' 'eq'
     || lk == 65812                 // '{' 'eq'
     || lk == 66079                 // '$' 'every'
     || lk == 66080                 // '%' 'every'
     || lk == 66324                 // '{' 'every'
     || lk == 67103                 // '$' 'except'
     || lk == 67104                 // '%' 'except'
     || lk == 67348                 // '{' 'except'
     || lk == 67615                 // '$' 'exit'
     || lk == 67616                 // '%' 'exit'
     || lk == 67860                 // '{' 'exit'
     || lk == 68127                 // '$' 'external'
     || lk == 68128                 // '%' 'external'
     || lk == 68372                 // '{' 'external'
     || lk == 68639                 // '$' 'first'
     || lk == 68640                 // '%' 'first'
     || lk == 68884                 // '{' 'first'
     || lk == 69151                 // '$' 'following'
     || lk == 69152                 // '%' 'following'
     || lk == 69396                 // '{' 'following'
     || lk == 69663                 // '$' 'following-sibling'
     || lk == 69664                 // '%' 'following-sibling'
     || lk == 69908                 // '{' 'following-sibling'
     || lk == 70175                 // '$' 'for'
     || lk == 70176                 // '%' 'for'
     || lk == 70420                 // '{' 'for'
     || lk == 72223                 // '$' 'ft-option'
     || lk == 72224                 // '%' 'ft-option'
     || lk == 72468                 // '{' 'ft-option'
     || lk == 74271                 // '$' 'function'
     || lk == 74272                 // '%' 'function'
     || lk == 74516                 // '{' 'function'
     || lk == 74783                 // '$' 'ge'
     || lk == 74784                 // '%' 'ge'
     || lk == 75028                 // '{' 'ge'
     || lk == 75807                 // '$' 'group'
     || lk == 75808                 // '%' 'group'
     || lk == 76052                 // '{' 'group'
     || lk == 76831                 // '$' 'gt'
     || lk == 76832                 // '%' 'gt'
     || lk == 77076                 // '{' 'gt'
     || lk == 77343                 // '$' 'idiv'
     || lk == 77344                 // '%' 'idiv'
     || lk == 77588                 // '{' 'idiv'
     || lk == 77855                 // '$' 'if'
     || lk == 77856                 // '%' 'if'
     || lk == 78100                 // '{' 'if'
     || lk == 78367                 // '$' 'import'
     || lk == 78368                 // '%' 'import'
     || lk == 78612                 // '{' 'import'
     || lk == 78879                 // '$' 'in'
     || lk == 78880                 // '%' 'in'
     || lk == 79124                 // '{' 'in'
     || lk == 79391                 // '$' 'index'
     || lk == 79392                 // '%' 'index'
     || lk == 79636                 // '{' 'index'
     || lk == 81439                 // '$' 'insert'
     || lk == 81440                 // '%' 'insert'
     || lk == 81684                 // '{' 'insert'
     || lk == 81951                 // '$' 'instance'
     || lk == 81952                 // '%' 'instance'
     || lk == 82196                 // '{' 'instance'
     || lk == 82463                 // '$' 'integrity'
     || lk == 82464                 // '%' 'integrity'
     || lk == 82708                 // '{' 'integrity'
     || lk == 82975                 // '$' 'intersect'
     || lk == 82976                 // '%' 'intersect'
     || lk == 83220                 // '{' 'intersect'
     || lk == 83487                 // '$' 'into'
     || lk == 83488                 // '%' 'into'
     || lk == 83732                 // '{' 'into'
     || lk == 83999                 // '$' 'is'
     || lk == 84000                 // '%' 'is'
     || lk == 84244                 // '{' 'is'
     || lk == 84511                 // '$' 'item'
     || lk == 84512                 // '%' 'item'
     || lk == 84756                 // '{' 'item'
     || lk == 87071                 // '$' 'last'
     || lk == 87072                 // '%' 'last'
     || lk == 87316                 // '{' 'last'
     || lk == 87583                 // '$' 'lax'
     || lk == 87584                 // '%' 'lax'
     || lk == 87828                 // '{' 'lax'
     || lk == 88095                 // '$' 'le'
     || lk == 88096                 // '%' 'le'
     || lk == 88340                 // '{' 'le'
     || lk == 89119                 // '$' 'let'
     || lk == 89120                 // '%' 'let'
     || lk == 89364                 // '{' 'let'
     || lk == 90143                 // '$' 'loop'
     || lk == 90144                 // '%' 'loop'
     || lk == 90388                 // '{' 'loop'
     || lk == 91167                 // '$' 'lt'
     || lk == 91168                 // '%' 'lt'
     || lk == 91412                 // '{' 'lt'
     || lk == 92191                 // '$' 'mod'
     || lk == 92192                 // '%' 'mod'
     || lk == 92436                 // '{' 'mod'
     || lk == 92703                 // '$' 'modify'
     || lk == 92704                 // '%' 'modify'
     || lk == 92948                 // '{' 'modify'
     || lk == 93215                 // '$' 'module'
     || lk == 93216                 // '%' 'module'
     || lk == 93460                 // '{' 'module'
     || lk == 94239                 // '$' 'namespace'
     || lk == 94240                 // '%' 'namespace'
     || lk == 94484                 // '{' 'namespace'
     || lk == 94751                 // '$' 'namespace-node'
     || lk == 94752                 // '%' 'namespace-node'
     || lk == 94996                 // '{' 'namespace-node'
     || lk == 95263                 // '$' 'ne'
     || lk == 95264                 // '%' 'ne'
     || lk == 95508                 // '{' 'ne'
     || lk == 97823                 // '$' 'node'
     || lk == 97824                 // '%' 'node'
     || lk == 98068                 // '{' 'node'
     || lk == 98335                 // '$' 'nodes'
     || lk == 98336                 // '%' 'nodes'
     || lk == 98580                 // '{' 'nodes'
     || lk == 101407                // '$' 'only'
     || lk == 101408                // '%' 'only'
     || lk == 101652                // '{' 'only'
     || lk == 101919                // '$' 'option'
     || lk == 101920                // '%' 'option'
     || lk == 102164                // '{' 'option'
     || lk == 102431                // '$' 'or'
     || lk == 102432                // '%' 'or'
     || lk == 102676                // '{' 'or'
     || lk == 102943                // '$' 'order'
     || lk == 102944                // '%' 'order'
     || lk == 103188                // '{' 'order'
     || lk == 103455                // '$' 'ordered'
     || lk == 103456                // '%' 'ordered'
     || lk == 103700                // '{' 'ordered'
     || lk == 103967                // '$' 'ordering'
     || lk == 103968                // '%' 'ordering'
     || lk == 104212                // '{' 'ordering'
     || lk == 105503                // '$' 'parent'
     || lk == 105504                // '%' 'parent'
     || lk == 105748                // '{' 'parent'
     || lk == 108575                // '$' 'preceding'
     || lk == 108576                // '%' 'preceding'
     || lk == 108820                // '{' 'preceding'
     || lk == 109087                // '$' 'preceding-sibling'
     || lk == 109088                // '%' 'preceding-sibling'
     || lk == 109332                // '{' 'preceding-sibling'
     || lk == 110623                // '$' 'processing-instruction'
     || lk == 110624                // '%' 'processing-instruction'
     || lk == 110868                // '{' 'processing-instruction'
     || lk == 111647                // '$' 'rename'
     || lk == 111648                // '%' 'rename'
     || lk == 111892                // '{' 'rename'
     || lk == 112159                // '$' 'replace'
     || lk == 112160                // '%' 'replace'
     || lk == 112404                // '{' 'replace'
     || lk == 112671                // '$' 'return'
     || lk == 112672                // '%' 'return'
     || lk == 112916                // '{' 'return'
     || lk == 113183                // '$' 'returning'
     || lk == 113184                // '%' 'returning'
     || lk == 113428                // '{' 'returning'
     || lk == 113695                // '$' 'revalidation'
     || lk == 113696                // '%' 'revalidation'
     || lk == 113940                // '{' 'revalidation'
     || lk == 114719                // '$' 'satisfies'
     || lk == 114720                // '%' 'satisfies'
     || lk == 114964                // '{' 'satisfies'
     || lk == 115231                // '$' 'schema'
     || lk == 115232                // '%' 'schema'
     || lk == 115476                // '{' 'schema'
     || lk == 115743                // '$' 'schema-attribute'
     || lk == 115744                // '%' 'schema-attribute'
     || lk == 115988                // '{' 'schema-attribute'
     || lk == 116255                // '$' 'schema-element'
     || lk == 116256                // '%' 'schema-element'
     || lk == 116500                // '{' 'schema-element'
     || lk == 116767                // '$' 'score'
     || lk == 116768                // '%' 'score'
     || lk == 117012                // '{' 'score'
     || lk == 117279                // '$' 'self'
     || lk == 117280                // '%' 'self'
     || lk == 117524                // '{' 'self'
     || lk == 119839                // '$' 'sliding'
     || lk == 119840                // '%' 'sliding'
     || lk == 120084                // '{' 'sliding'
     || lk == 120351                // '$' 'some'
     || lk == 120352                // '%' 'some'
     || lk == 120596                // '{' 'some'
     || lk == 120863                // '$' 'stable'
     || lk == 120864                // '%' 'stable'
     || lk == 121108                // '{' 'stable'
     || lk == 121375                // '$' 'start'
     || lk == 121376                // '%' 'start'
     || lk == 121620                // '{' 'start'
     || lk == 122911                // '$' 'strict'
     || lk == 122912                // '%' 'strict'
     || lk == 123156                // '{' 'strict'
     || lk == 124447                // '$' 'switch'
     || lk == 124448                // '%' 'switch'
     || lk == 124692                // '{' 'switch'
     || lk == 124959                // '$' 'text'
     || lk == 124960                // '%' 'text'
     || lk == 125204                // '{' 'text'
     || lk == 127007                // '$' 'to'
     || lk == 127008                // '%' 'to'
     || lk == 127252                // '{' 'to'
     || lk == 127519                // '$' 'treat'
     || lk == 127520                // '%' 'treat'
     || lk == 127764                // '{' 'treat'
     || lk == 128031                // '$' 'try'
     || lk == 128032                // '%' 'try'
     || lk == 128276                // '{' 'try'
     || lk == 128543                // '$' 'tumbling'
     || lk == 128544                // '%' 'tumbling'
     || lk == 128788                // '{' 'tumbling'
     || lk == 129055                // '$' 'type'
     || lk == 129056                // '%' 'type'
     || lk == 129300                // '{' 'type'
     || lk == 129567                // '$' 'typeswitch'
     || lk == 129568                // '%' 'typeswitch'
     || lk == 129812                // '{' 'typeswitch'
     || lk == 130079                // '$' 'union'
     || lk == 130080                // '%' 'union'
     || lk == 130324                // '{' 'union'
     || lk == 131103                // '$' 'unordered'
     || lk == 131104                // '%' 'unordered'
     || lk == 131348                // '{' 'unordered'
     || lk == 131615                // '$' 'updating'
     || lk == 131616                // '%' 'updating'
     || lk == 131860                // '{' 'updating'
     || lk == 133151                // '$' 'validate'
     || lk == 133152                // '%' 'validate'
     || lk == 133396                // '{' 'validate'
     || lk == 133663                // '$' 'value'
     || lk == 133664                // '%' 'value'
     || lk == 133908                // '{' 'value'
     || lk == 134175                // '$' 'variable'
     || lk == 134176                // '%' 'variable'
     || lk == 134420                // '{' 'variable'
     || lk == 134687                // '$' 'version'
     || lk == 134688                // '%' 'version'
     || lk == 134932                // '{' 'version'
     || lk == 136223                // '$' 'where'
     || lk == 136224                // '%' 'where'
     || lk == 136468                // '{' 'where'
     || lk == 136735                // '$' 'while'
     || lk == 136736                // '%' 'while'
     || lk == 136980                // '{' 'while'
     || lk == 138271                // '$' 'with'
     || lk == 138272                // '%' 'with'
     || lk == 138516                // '{' 'with'
     || lk == 140319                // '$' 'xquery'
     || lk == 140320                // '%' 'xquery'
     || lk == 140564                // '{' 'xquery'
     || lk == 141588                // '{' '{'
     || lk == 142612                // '{' '{|'
     || lk == 144660)               // '{' '}'
    {
      lk = memoized(6, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_ApplyStatement();
          lk = -1;
        }
        catch (p1A)
        {
          try
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            try_AssignStatement();
            lk = -2;
          }
          catch (p2A)
          {
            try
            {
              b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
              b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
              b2 = b2A; e2 = e2A; end = e2A; }}
              try_BlockStatement();
              lk = -3;
            }
            catch (p3A)
            {
              try
              {
                b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
                b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
                b2 = b2A; e2 = e2A; end = e2A; }}
                try_VarDeclStatement();
                lk = -12;
              }
              catch (p12A)
              {
                lk = -13;
              }
            }
          }
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(6, e0, lk);
      }
    }
    switch (lk)
    {
    case -2:
      parse_AssignStatement();
      break;
    case -3:
      parse_BlockStatement();
      break;
    case 90198:                     // 'break' 'loop'
      parse_BreakStatement();
      break;
    case 90214:                     // 'continue' 'loop'
      parse_ContinueStatement();
      break;
    case 113284:                    // 'exit' 'returning'
      parse_ExitStatement();
      break;
    case 16009:                     // 'for' '$'
    case 16046:                     // 'let' '$'
    case 116910:                    // 'let' 'score'
    case 119945:                    // 'for' 'sliding'
    case 128649:                    // 'for' 'tumbling'
      parse_FLWORStatement();
      break;
    case 17560:                     // 'if' '('
      parse_IfStatement();
      break;
    case 17651:                     // 'switch' '('
      parse_SwitchStatement();
      break;
    case 141562:                    // 'try' '{'
      parse_TryCatchStatement();
      break;
    case 17661:                     // 'typeswitch' '('
      parse_TypeswitchStatement();
      break;
    case -12:
    case 16134:                     // 'variable' '$'
      parse_VarDeclStatement();
      break;
    case -13:
      parse_WhileStatement();
      break;
    default:
      parse_ApplyStatement();
    }
    endNonterminal("Statement");
  }

  function try_Statement()
  {
    lookahead1W(322);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    switch (l1)
    {
    case 132:                       // 'exit'
      lookahead2W(229);             // S^WS | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | '-' | '/' | '//' | ';' | '<' |
                                    // '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' | 'castable' |
                                    // 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'returning' | 'to' |
                                    // 'treat' | 'union' | '|' | '||'
      break;
    case 137:                       // 'for'
      lookahead2W(236);             // S^WS | '!' | '!=' | '#' | '$' | '(' | '(:' | '*' | '+' | '-' | '/' | '//' | ';' |
                                    // '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' | 'castable' |
                                    // 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'sliding' | 'to' |
                                    // 'treat' | 'tumbling' | 'union' | '|' | '||'
      break;
    case 174:                       // 'let'
      lookahead2W(233);             // S^WS | '!' | '!=' | '#' | '$' | '(' | '(:' | '*' | '+' | '-' | '/' | '//' | ';' |
                                    // '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' | 'castable' |
                                    // 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'score' | 'to' |
                                    // 'treat' | 'union' | '|' | '||'
      break;
    case 250:                       // 'try'
      lookahead2W(230);             // S^WS | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | '-' | '/' | '//' | ';' | '<' |
                                    // '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' | 'castable' |
                                    // 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' | 'treat' |
                                    // 'union' | '{' | '|' | '||'
      break;
    case 262:                       // 'variable'
      lookahead2W(227);             // S^WS | '!' | '!=' | '#' | '$' | '(' | '(:' | '*' | '+' | '-' | '/' | '//' | ';' |
                                    // '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' | 'castable' |
                                    // 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' | 'treat' |
                                    // 'union' | '|' | '||'
      break;
    case 276:                       // '{'
      lookahead2W(328);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|' | '}'
      break;
    case 31:                        // '$'
    case 32:                        // '%'
      lookahead2W(305);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      break;
    case 86:                        // 'break'
    case 102:                       // 'continue'
      lookahead2W(228);             // S^WS | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | '-' | '/' | '//' | ';' | '<' |
                                    // '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' | 'castable' |
                                    // 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'is' | 'le' | 'loop' | 'lt' | 'mod' | 'ne' | 'or' | 'to' |
                                    // 'treat' | 'union' | '|' | '||'
      break;
    case 152:                       // 'if'
    case 243:                       // 'switch'
    case 253:                       // 'typeswitch'
    case 267:                       // 'while'
      lookahead2W(225);             // S^WS | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | '-' | '/' | '//' | ';' | '<' |
                                    // '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' | 'castable' |
                                    // 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' | 'treat' |
                                    // 'union' | '|' | '||'
      break;
    default:
      lk = l1;
    }
    if (lk == 2836                  // '{' Wildcard
     || lk == 3103                  // '$' EQName^Token
     || lk == 3104                  // '%' EQName^Token
     || lk == 3348                  // '{' EQName^Token
     || lk == 4372                  // '{' IntegerLiteral
     || lk == 4884                  // '{' DecimalLiteral
     || lk == 5396                  // '{' DoubleLiteral
     || lk == 5908                  // '{' StringLiteral
     || lk == 16148                 // '{' '$'
     || lk == 16660                 // '{' '%'
     || lk == 17675                 // 'while' '('
     || lk == 17684                 // '{' '('
     || lk == 18196                 // '{' '(#'
     || lk == 20756                 // '{' '+'
     || lk == 21780                 // '{' '-'
     || lk == 22804                 // '{' '.'
     || lk == 23316                 // '{' '..'
     || lk == 23828                 // '{' '/'
     || lk == 24340                 // '{' '//'
     || lk == 27924                 // '{' '<'
     || lk == 28436                 // '{' '<!--'
     || lk == 30484                 // '{' '<?'
     || lk == 34068                 // '{' '@'
     || lk == 35092                 // '{' '['
     || lk == 35871                 // '$' 'after'
     || lk == 35872                 // '%' 'after'
     || lk == 36116                 // '{' 'after'
     || lk == 36895                 // '$' 'allowing'
     || lk == 36896                 // '%' 'allowing'
     || lk == 37140                 // '{' 'allowing'
     || lk == 37407                 // '$' 'ancestor'
     || lk == 37408                 // '%' 'ancestor'
     || lk == 37652                 // '{' 'ancestor'
     || lk == 37919                 // '$' 'ancestor-or-self'
     || lk == 37920                 // '%' 'ancestor-or-self'
     || lk == 38164                 // '{' 'ancestor-or-self'
     || lk == 38431                 // '$' 'and'
     || lk == 38432                 // '%' 'and'
     || lk == 38676                 // '{' 'and'
     || lk == 39700                 // '{' 'append'
     || lk == 40479                 // '$' 'as'
     || lk == 40480                 // '%' 'as'
     || lk == 40724                 // '{' 'as'
     || lk == 40991                 // '$' 'ascending'
     || lk == 40992                 // '%' 'ascending'
     || lk == 41236                 // '{' 'ascending'
     || lk == 41503                 // '$' 'at'
     || lk == 41504                 // '%' 'at'
     || lk == 41748                 // '{' 'at'
     || lk == 42015                 // '$' 'attribute'
     || lk == 42016                 // '%' 'attribute'
     || lk == 42260                 // '{' 'attribute'
     || lk == 42527                 // '$' 'base-uri'
     || lk == 42528                 // '%' 'base-uri'
     || lk == 42772                 // '{' 'base-uri'
     || lk == 43039                 // '$' 'before'
     || lk == 43040                 // '%' 'before'
     || lk == 43284                 // '{' 'before'
     || lk == 43551                 // '$' 'boundary-space'
     || lk == 43552                 // '%' 'boundary-space'
     || lk == 43796                 // '{' 'boundary-space'
     || lk == 44063                 // '$' 'break'
     || lk == 44064                 // '%' 'break'
     || lk == 44308                 // '{' 'break'
     || lk == 45087                 // '$' 'case'
     || lk == 45088                 // '%' 'case'
     || lk == 45332                 // '{' 'case'
     || lk == 45599                 // '$' 'cast'
     || lk == 45600                 // '%' 'cast'
     || lk == 45844                 // '{' 'cast'
     || lk == 46111                 // '$' 'castable'
     || lk == 46112                 // '%' 'castable'
     || lk == 46356                 // '{' 'castable'
     || lk == 46623                 // '$' 'catch'
     || lk == 46624                 // '%' 'catch'
     || lk == 46868                 // '{' 'catch'
     || lk == 47647                 // '$' 'child'
     || lk == 47648                 // '%' 'child'
     || lk == 47892                 // '{' 'child'
     || lk == 48159                 // '$' 'collation'
     || lk == 48160                 // '%' 'collation'
     || lk == 48404                 // '{' 'collation'
     || lk == 49183                 // '$' 'comment'
     || lk == 49184                 // '%' 'comment'
     || lk == 49428                 // '{' 'comment'
     || lk == 49695                 // '$' 'constraint'
     || lk == 49696                 // '%' 'constraint'
     || lk == 49940                 // '{' 'constraint'
     || lk == 50207                 // '$' 'construction'
     || lk == 50208                 // '%' 'construction'
     || lk == 50452                 // '{' 'construction'
     || lk == 51743                 // '$' 'context'
     || lk == 51744                 // '%' 'context'
     || lk == 51988                 // '{' 'context'
     || lk == 52255                 // '$' 'continue'
     || lk == 52256                 // '%' 'continue'
     || lk == 52500                 // '{' 'continue'
     || lk == 52767                 // '$' 'copy'
     || lk == 52768                 // '%' 'copy'
     || lk == 53012                 // '{' 'copy'
     || lk == 53279                 // '$' 'copy-namespaces'
     || lk == 53280                 // '%' 'copy-namespaces'
     || lk == 53524                 // '{' 'copy-namespaces'
     || lk == 53791                 // '$' 'count'
     || lk == 53792                 // '%' 'count'
     || lk == 54036                 // '{' 'count'
     || lk == 54303                 // '$' 'decimal-format'
     || lk == 54304                 // '%' 'decimal-format'
     || lk == 54548                 // '{' 'decimal-format'
     || lk == 55327                 // '$' 'declare'
     || lk == 55328                 // '%' 'declare'
     || lk == 55572                 // '{' 'declare'
     || lk == 55839                 // '$' 'default'
     || lk == 55840                 // '%' 'default'
     || lk == 56084                 // '{' 'default'
     || lk == 56351                 // '$' 'delete'
     || lk == 56352                 // '%' 'delete'
     || lk == 56596                 // '{' 'delete'
     || lk == 56863                 // '$' 'descendant'
     || lk == 56864                 // '%' 'descendant'
     || lk == 57108                 // '{' 'descendant'
     || lk == 57375                 // '$' 'descendant-or-self'
     || lk == 57376                 // '%' 'descendant-or-self'
     || lk == 57620                 // '{' 'descendant-or-self'
     || lk == 57887                 // '$' 'descending'
     || lk == 57888                 // '%' 'descending'
     || lk == 58132                 // '{' 'descending'
     || lk == 60447                 // '$' 'div'
     || lk == 60448                 // '%' 'div'
     || lk == 60692                 // '{' 'div'
     || lk == 60959                 // '$' 'document'
     || lk == 60960                 // '%' 'document'
     || lk == 61204                 // '{' 'document'
     || lk == 61471                 // '$' 'document-node'
     || lk == 61472                 // '%' 'document-node'
     || lk == 61716                 // '{' 'document-node'
     || lk == 61983                 // '$' 'element'
     || lk == 61984                 // '%' 'element'
     || lk == 62228                 // '{' 'element'
     || lk == 62495                 // '$' 'else'
     || lk == 62496                 // '%' 'else'
     || lk == 62740                 // '{' 'else'
     || lk == 63007                 // '$' 'empty'
     || lk == 63008                 // '%' 'empty'
     || lk == 63252                 // '{' 'empty'
     || lk == 63519                 // '$' 'empty-sequence'
     || lk == 63520                 // '%' 'empty-sequence'
     || lk == 63764                 // '{' 'empty-sequence'
     || lk == 64031                 // '$' 'encoding'
     || lk == 64032                 // '%' 'encoding'
     || lk == 64276                 // '{' 'encoding'
     || lk == 64543                 // '$' 'end'
     || lk == 64544                 // '%' 'end'
     || lk == 64788                 // '{' 'end'
     || lk == 65567                 // '$' 'eq'
     || lk == 65568                 // '%' 'eq'
     || lk == 65812                 // '{' 'eq'
     || lk == 66079                 // '$' 'every'
     || lk == 66080                 // '%' 'every'
     || lk == 66324                 // '{' 'every'
     || lk == 67103                 // '$' 'except'
     || lk == 67104                 // '%' 'except'
     || lk == 67348                 // '{' 'except'
     || lk == 67615                 // '$' 'exit'
     || lk == 67616                 // '%' 'exit'
     || lk == 67860                 // '{' 'exit'
     || lk == 68127                 // '$' 'external'
     || lk == 68128                 // '%' 'external'
     || lk == 68372                 // '{' 'external'
     || lk == 68639                 // '$' 'first'
     || lk == 68640                 // '%' 'first'
     || lk == 68884                 // '{' 'first'
     || lk == 69151                 // '$' 'following'
     || lk == 69152                 // '%' 'following'
     || lk == 69396                 // '{' 'following'
     || lk == 69663                 // '$' 'following-sibling'
     || lk == 69664                 // '%' 'following-sibling'
     || lk == 69908                 // '{' 'following-sibling'
     || lk == 70175                 // '$' 'for'
     || lk == 70176                 // '%' 'for'
     || lk == 70420                 // '{' 'for'
     || lk == 72223                 // '$' 'ft-option'
     || lk == 72224                 // '%' 'ft-option'
     || lk == 72468                 // '{' 'ft-option'
     || lk == 74271                 // '$' 'function'
     || lk == 74272                 // '%' 'function'
     || lk == 74516                 // '{' 'function'
     || lk == 74783                 // '$' 'ge'
     || lk == 74784                 // '%' 'ge'
     || lk == 75028                 // '{' 'ge'
     || lk == 75807                 // '$' 'group'
     || lk == 75808                 // '%' 'group'
     || lk == 76052                 // '{' 'group'
     || lk == 76831                 // '$' 'gt'
     || lk == 76832                 // '%' 'gt'
     || lk == 77076                 // '{' 'gt'
     || lk == 77343                 // '$' 'idiv'
     || lk == 77344                 // '%' 'idiv'
     || lk == 77588                 // '{' 'idiv'
     || lk == 77855                 // '$' 'if'
     || lk == 77856                 // '%' 'if'
     || lk == 78100                 // '{' 'if'
     || lk == 78367                 // '$' 'import'
     || lk == 78368                 // '%' 'import'
     || lk == 78612                 // '{' 'import'
     || lk == 78879                 // '$' 'in'
     || lk == 78880                 // '%' 'in'
     || lk == 79124                 // '{' 'in'
     || lk == 79391                 // '$' 'index'
     || lk == 79392                 // '%' 'index'
     || lk == 79636                 // '{' 'index'
     || lk == 81439                 // '$' 'insert'
     || lk == 81440                 // '%' 'insert'
     || lk == 81684                 // '{' 'insert'
     || lk == 81951                 // '$' 'instance'
     || lk == 81952                 // '%' 'instance'
     || lk == 82196                 // '{' 'instance'
     || lk == 82463                 // '$' 'integrity'
     || lk == 82464                 // '%' 'integrity'
     || lk == 82708                 // '{' 'integrity'
     || lk == 82975                 // '$' 'intersect'
     || lk == 82976                 // '%' 'intersect'
     || lk == 83220                 // '{' 'intersect'
     || lk == 83487                 // '$' 'into'
     || lk == 83488                 // '%' 'into'
     || lk == 83732                 // '{' 'into'
     || lk == 83999                 // '$' 'is'
     || lk == 84000                 // '%' 'is'
     || lk == 84244                 // '{' 'is'
     || lk == 84511                 // '$' 'item'
     || lk == 84512                 // '%' 'item'
     || lk == 84756                 // '{' 'item'
     || lk == 87071                 // '$' 'last'
     || lk == 87072                 // '%' 'last'
     || lk == 87316                 // '{' 'last'
     || lk == 87583                 // '$' 'lax'
     || lk == 87584                 // '%' 'lax'
     || lk == 87828                 // '{' 'lax'
     || lk == 88095                 // '$' 'le'
     || lk == 88096                 // '%' 'le'
     || lk == 88340                 // '{' 'le'
     || lk == 89119                 // '$' 'let'
     || lk == 89120                 // '%' 'let'
     || lk == 89364                 // '{' 'let'
     || lk == 90143                 // '$' 'loop'
     || lk == 90144                 // '%' 'loop'
     || lk == 90388                 // '{' 'loop'
     || lk == 91167                 // '$' 'lt'
     || lk == 91168                 // '%' 'lt'
     || lk == 91412                 // '{' 'lt'
     || lk == 92191                 // '$' 'mod'
     || lk == 92192                 // '%' 'mod'
     || lk == 92436                 // '{' 'mod'
     || lk == 92703                 // '$' 'modify'
     || lk == 92704                 // '%' 'modify'
     || lk == 92948                 // '{' 'modify'
     || lk == 93215                 // '$' 'module'
     || lk == 93216                 // '%' 'module'
     || lk == 93460                 // '{' 'module'
     || lk == 94239                 // '$' 'namespace'
     || lk == 94240                 // '%' 'namespace'
     || lk == 94484                 // '{' 'namespace'
     || lk == 94751                 // '$' 'namespace-node'
     || lk == 94752                 // '%' 'namespace-node'
     || lk == 94996                 // '{' 'namespace-node'
     || lk == 95263                 // '$' 'ne'
     || lk == 95264                 // '%' 'ne'
     || lk == 95508                 // '{' 'ne'
     || lk == 97823                 // '$' 'node'
     || lk == 97824                 // '%' 'node'
     || lk == 98068                 // '{' 'node'
     || lk == 98335                 // '$' 'nodes'
     || lk == 98336                 // '%' 'nodes'
     || lk == 98580                 // '{' 'nodes'
     || lk == 101407                // '$' 'only'
     || lk == 101408                // '%' 'only'
     || lk == 101652                // '{' 'only'
     || lk == 101919                // '$' 'option'
     || lk == 101920                // '%' 'option'
     || lk == 102164                // '{' 'option'
     || lk == 102431                // '$' 'or'
     || lk == 102432                // '%' 'or'
     || lk == 102676                // '{' 'or'
     || lk == 102943                // '$' 'order'
     || lk == 102944                // '%' 'order'
     || lk == 103188                // '{' 'order'
     || lk == 103455                // '$' 'ordered'
     || lk == 103456                // '%' 'ordered'
     || lk == 103700                // '{' 'ordered'
     || lk == 103967                // '$' 'ordering'
     || lk == 103968                // '%' 'ordering'
     || lk == 104212                // '{' 'ordering'
     || lk == 105503                // '$' 'parent'
     || lk == 105504                // '%' 'parent'
     || lk == 105748                // '{' 'parent'
     || lk == 108575                // '$' 'preceding'
     || lk == 108576                // '%' 'preceding'
     || lk == 108820                // '{' 'preceding'
     || lk == 109087                // '$' 'preceding-sibling'
     || lk == 109088                // '%' 'preceding-sibling'
     || lk == 109332                // '{' 'preceding-sibling'
     || lk == 110623                // '$' 'processing-instruction'
     || lk == 110624                // '%' 'processing-instruction'
     || lk == 110868                // '{' 'processing-instruction'
     || lk == 111647                // '$' 'rename'
     || lk == 111648                // '%' 'rename'
     || lk == 111892                // '{' 'rename'
     || lk == 112159                // '$' 'replace'
     || lk == 112160                // '%' 'replace'
     || lk == 112404                // '{' 'replace'
     || lk == 112671                // '$' 'return'
     || lk == 112672                // '%' 'return'
     || lk == 112916                // '{' 'return'
     || lk == 113183                // '$' 'returning'
     || lk == 113184                // '%' 'returning'
     || lk == 113428                // '{' 'returning'
     || lk == 113695                // '$' 'revalidation'
     || lk == 113696                // '%' 'revalidation'
     || lk == 113940                // '{' 'revalidation'
     || lk == 114719                // '$' 'satisfies'
     || lk == 114720                // '%' 'satisfies'
     || lk == 114964                // '{' 'satisfies'
     || lk == 115231                // '$' 'schema'
     || lk == 115232                // '%' 'schema'
     || lk == 115476                // '{' 'schema'
     || lk == 115743                // '$' 'schema-attribute'
     || lk == 115744                // '%' 'schema-attribute'
     || lk == 115988                // '{' 'schema-attribute'
     || lk == 116255                // '$' 'schema-element'
     || lk == 116256                // '%' 'schema-element'
     || lk == 116500                // '{' 'schema-element'
     || lk == 116767                // '$' 'score'
     || lk == 116768                // '%' 'score'
     || lk == 117012                // '{' 'score'
     || lk == 117279                // '$' 'self'
     || lk == 117280                // '%' 'self'
     || lk == 117524                // '{' 'self'
     || lk == 119839                // '$' 'sliding'
     || lk == 119840                // '%' 'sliding'
     || lk == 120084                // '{' 'sliding'
     || lk == 120351                // '$' 'some'
     || lk == 120352                // '%' 'some'
     || lk == 120596                // '{' 'some'
     || lk == 120863                // '$' 'stable'
     || lk == 120864                // '%' 'stable'
     || lk == 121108                // '{' 'stable'
     || lk == 121375                // '$' 'start'
     || lk == 121376                // '%' 'start'
     || lk == 121620                // '{' 'start'
     || lk == 122911                // '$' 'strict'
     || lk == 122912                // '%' 'strict'
     || lk == 123156                // '{' 'strict'
     || lk == 124447                // '$' 'switch'
     || lk == 124448                // '%' 'switch'
     || lk == 124692                // '{' 'switch'
     || lk == 124959                // '$' 'text'
     || lk == 124960                // '%' 'text'
     || lk == 125204                // '{' 'text'
     || lk == 127007                // '$' 'to'
     || lk == 127008                // '%' 'to'
     || lk == 127252                // '{' 'to'
     || lk == 127519                // '$' 'treat'
     || lk == 127520                // '%' 'treat'
     || lk == 127764                // '{' 'treat'
     || lk == 128031                // '$' 'try'
     || lk == 128032                // '%' 'try'
     || lk == 128276                // '{' 'try'
     || lk == 128543                // '$' 'tumbling'
     || lk == 128544                // '%' 'tumbling'
     || lk == 128788                // '{' 'tumbling'
     || lk == 129055                // '$' 'type'
     || lk == 129056                // '%' 'type'
     || lk == 129300                // '{' 'type'
     || lk == 129567                // '$' 'typeswitch'
     || lk == 129568                // '%' 'typeswitch'
     || lk == 129812                // '{' 'typeswitch'
     || lk == 130079                // '$' 'union'
     || lk == 130080                // '%' 'union'
     || lk == 130324                // '{' 'union'
     || lk == 131103                // '$' 'unordered'
     || lk == 131104                // '%' 'unordered'
     || lk == 131348                // '{' 'unordered'
     || lk == 131615                // '$' 'updating'
     || lk == 131616                // '%' 'updating'
     || lk == 131860                // '{' 'updating'
     || lk == 133151                // '$' 'validate'
     || lk == 133152                // '%' 'validate'
     || lk == 133396                // '{' 'validate'
     || lk == 133663                // '$' 'value'
     || lk == 133664                // '%' 'value'
     || lk == 133908                // '{' 'value'
     || lk == 134175                // '$' 'variable'
     || lk == 134176                // '%' 'variable'
     || lk == 134420                // '{' 'variable'
     || lk == 134687                // '$' 'version'
     || lk == 134688                // '%' 'version'
     || lk == 134932                // '{' 'version'
     || lk == 136223                // '$' 'where'
     || lk == 136224                // '%' 'where'
     || lk == 136468                // '{' 'where'
     || lk == 136735                // '$' 'while'
     || lk == 136736                // '%' 'while'
     || lk == 136980                // '{' 'while'
     || lk == 138271                // '$' 'with'
     || lk == 138272                // '%' 'with'
     || lk == 138516                // '{' 'with'
     || lk == 140319                // '$' 'xquery'
     || lk == 140320                // '%' 'xquery'
     || lk == 140564                // '{' 'xquery'
     || lk == 141588                // '{' '{'
     || lk == 142612                // '{' '{|'
     || lk == 144660)               // '{' '}'
    {
      lk = memoized(6, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_ApplyStatement();
          lk = -1;
        }
        catch (p1A)
        {
          try
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            try_AssignStatement();
            lk = -2;
          }
          catch (p2A)
          {
            try
            {
              b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
              b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
              b2 = b2A; e2 = e2A; end = e2A; }}
              try_BlockStatement();
              lk = -3;
            }
            catch (p3A)
            {
              try
              {
                b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
                b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
                b2 = b2A; e2 = e2A; end = e2A; }}
                try_VarDeclStatement();
                lk = -12;
              }
              catch (p12A)
              {
                lk = -13;
              }
            }
          }
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(6, e0, lk);
      }
    }
    switch (lk)
    {
    case -2:
      try_AssignStatement();
      break;
    case -3:
      try_BlockStatement();
      break;
    case 90198:                     // 'break' 'loop'
      try_BreakStatement();
      break;
    case 90214:                     // 'continue' 'loop'
      try_ContinueStatement();
      break;
    case 113284:                    // 'exit' 'returning'
      try_ExitStatement();
      break;
    case 16009:                     // 'for' '$'
    case 16046:                     // 'let' '$'
    case 116910:                    // 'let' 'score'
    case 119945:                    // 'for' 'sliding'
    case 128649:                    // 'for' 'tumbling'
      try_FLWORStatement();
      break;
    case 17560:                     // 'if' '('
      try_IfStatement();
      break;
    case 17651:                     // 'switch' '('
      try_SwitchStatement();
      break;
    case 141562:                    // 'try' '{'
      try_TryCatchStatement();
      break;
    case 17661:                     // 'typeswitch' '('
      try_TypeswitchStatement();
      break;
    case -12:
    case 16134:                     // 'variable' '$'
      try_VarDeclStatement();
      break;
    case -13:
      try_WhileStatement();
      break;
    default:
      try_ApplyStatement();
    }
  }

  function parse_ApplyStatement()
  {
    startNonterminal("ApplyStatement");
    parse_ExprSimple();
    lookahead1W(53);                // S^WS | '(:' | ';'
    shift(53);                      // ';'
    endNonterminal("ApplyStatement");
  }

  function try_ApplyStatement()
  {
    try_ExprSimple();
    lookahead1W(53);                // S^WS | '(:' | ';'
    shiftT(53);                     // ';'
  }

  function parse_AssignStatement()
  {
    startNonterminal("AssignStatement");
    shift(31);                      // '$'
    lookahead1W(305);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    parse_VarName();
    lookahead1W(52);                // S^WS | '(:' | ':='
    shift(52);                      // ':='
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    parse_ExprSingle();
    lookahead1W(53);                // S^WS | '(:' | ';'
    shift(53);                      // ';'
    endNonterminal("AssignStatement");
  }

  function try_AssignStatement()
  {
    shiftT(31);                     // '$'
    lookahead1W(305);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    try_VarName();
    lookahead1W(52);                // S^WS | '(:' | ':='
    shiftT(52);                     // ':='
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    try_ExprSingle();
    lookahead1W(53);                // S^WS | '(:' | ';'
    shiftT(53);                     // ';'
  }

  function parse_BlockStatement()
  {
    startNonterminal("BlockStatement");
    lookahead1(22);                 // '{'
    shift(276);                     // '{'
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    parse_Statements();
    lookahead1W(115);               // S^WS | '(:' | '}'
    shift(282);                     // '}'
    endNonterminal("BlockStatement");
  }

  function try_BlockStatement()
  {
    lookahead1(22);                 // '{'
    shiftT(276);                    // '{'
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    try_Statements();
    lookahead1W(115);               // S^WS | '(:' | '}'
    shiftT(282);                    // '}'
  }

  function parse_BreakStatement()
  {
    startNonterminal("BreakStatement");
    shift(86);                      // 'break'
    lookahead1W(83);                // S^WS | '(:' | 'loop'
    shift(176);                     // 'loop'
    lookahead1W(53);                // S^WS | '(:' | ';'
    shift(53);                      // ';'
    endNonterminal("BreakStatement");
  }

  function try_BreakStatement()
  {
    shiftT(86);                     // 'break'
    lookahead1W(83);                // S^WS | '(:' | 'loop'
    shiftT(176);                    // 'loop'
    lookahead1W(53);                // S^WS | '(:' | ';'
    shiftT(53);                     // ';'
  }

  function parse_ContinueStatement()
  {
    startNonterminal("ContinueStatement");
    shift(102);                     // 'continue'
    lookahead1W(83);                // S^WS | '(:' | 'loop'
    shift(176);                     // 'loop'
    lookahead1W(53);                // S^WS | '(:' | ';'
    shift(53);                      // ';'
    endNonterminal("ContinueStatement");
  }

  function try_ContinueStatement()
  {
    shiftT(102);                    // 'continue'
    lookahead1W(83);                // S^WS | '(:' | 'loop'
    shiftT(176);                    // 'loop'
    lookahead1W(53);                // S^WS | '(:' | ';'
    shiftT(53);                     // ';'
  }

  function parse_ExitStatement()
  {
    startNonterminal("ExitStatement");
    shift(132);                     // 'exit'
    lookahead1W(95);                // S^WS | '(:' | 'returning'
    shift(221);                     // 'returning'
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    parse_ExprSingle();
    lookahead1W(53);                // S^WS | '(:' | ';'
    shift(53);                      // ';'
    endNonterminal("ExitStatement");
  }

  function try_ExitStatement()
  {
    shiftT(132);                    // 'exit'
    lookahead1W(95);                // S^WS | '(:' | 'returning'
    shiftT(221);                    // 'returning'
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    try_ExprSingle();
    lookahead1W(53);                // S^WS | '(:' | ';'
    shiftT(53);                     // ';'
  }

  function parse_FLWORStatement()
  {
    startNonterminal("FLWORStatement");
    parse_InitialClause();
    for (;;)
    {
      lookahead1W(208);             // S^WS | '(:' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' | 'stable' |
                                    // 'where'
      if (l1 == 220)                // 'return'
      {
        break;
      }
      parse_IntermediateClause();
    }
    parse_ReturnStatement();
    endNonterminal("FLWORStatement");
  }

  function try_FLWORStatement()
  {
    try_InitialClause();
    for (;;)
    {
      lookahead1W(208);             // S^WS | '(:' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' | 'stable' |
                                    // 'where'
      if (l1 == 220)                // 'return'
      {
        break;
      }
      try_IntermediateClause();
    }
    try_ReturnStatement();
  }

  function parse_ReturnStatement()
  {
    startNonterminal("ReturnStatement");
    shift(220);                     // 'return'
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    parse_Statement();
    endNonterminal("ReturnStatement");
  }

  function try_ReturnStatement()
  {
    shiftT(220);                    // 'return'
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    try_Statement();
  }

  function parse_IfStatement()
  {
    startNonterminal("IfStatement");
    shift(152);                     // 'if'
    lookahead1W(46);                // S^WS | '(' | '(:'
    shift(34);                      // '('
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    parse_Expr();
    lookahead1W(47);                // S^WS | '(:' | ')'
    shift(37);                      // ')'
    lookahead1W(101);               // S^WS | '(:' | 'then'
    shift(245);                     // 'then'
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    parse_Statement();
    lookahead1W(73);                // S^WS | '(:' | 'else'
    shift(122);                     // 'else'
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    parse_Statement();
    endNonterminal("IfStatement");
  }

  function try_IfStatement()
  {
    shiftT(152);                    // 'if'
    lookahead1W(46);                // S^WS | '(' | '(:'
    shiftT(34);                     // '('
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    try_Expr();
    lookahead1W(47);                // S^WS | '(:' | ')'
    shiftT(37);                     // ')'
    lookahead1W(101);               // S^WS | '(:' | 'then'
    shiftT(245);                    // 'then'
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    try_Statement();
    lookahead1W(73);                // S^WS | '(:' | 'else'
    shiftT(122);                    // 'else'
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    try_Statement();
  }

  function parse_SwitchStatement()
  {
    startNonterminal("SwitchStatement");
    shift(243);                     // 'switch'
    lookahead1W(46);                // S^WS | '(' | '(:'
    shift(34);                      // '('
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    parse_Expr();
    lookahead1W(47);                // S^WS | '(:' | ')'
    shift(37);                      // ')'
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    for (;;)
    {
      lookahead1W(37);              // EPSILON | S^WS | '(:'
      parse_SwitchCaseStatement();
      lookahead1W(144);             // S^WS | '(:' | 'case' | 'default'
      if (l1 != 88)                 // 'case'
      {
        break;
      }
    }
    shift(109);                     // 'default'
    lookahead1W(94);                // S^WS | '(:' | 'return'
    shift(220);                     // 'return'
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    parse_Statement();
    endNonterminal("SwitchStatement");
  }

  function try_SwitchStatement()
  {
    shiftT(243);                    // 'switch'
    lookahead1W(46);                // S^WS | '(' | '(:'
    shiftT(34);                     // '('
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    try_Expr();
    lookahead1W(47);                // S^WS | '(:' | ')'
    shiftT(37);                     // ')'
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    for (;;)
    {
      lookahead1W(37);              // EPSILON | S^WS | '(:'
      try_SwitchCaseStatement();
      lookahead1W(144);             // S^WS | '(:' | 'case' | 'default'
      if (l1 != 88)                 // 'case'
      {
        break;
      }
    }
    shiftT(109);                    // 'default'
    lookahead1W(94);                // S^WS | '(:' | 'return'
    shiftT(220);                    // 'return'
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    try_Statement();
  }

  function parse_SwitchCaseStatement()
  {
    startNonterminal("SwitchCaseStatement");
    for (;;)
    {
      lookahead1W(60);              // S^WS | '(:' | 'case'
      shift(88);                    // 'case'
      lookahead1W(37);              // EPSILON | S^WS | '(:'
      parse_SwitchCaseOperand();
      lookahead1W(145);             // S^WS | '(:' | 'case' | 'return'
      if (l1 != 88)                 // 'case'
      {
        break;
      }
    }
    shift(220);                     // 'return'
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    parse_Statement();
    endNonterminal("SwitchCaseStatement");
  }

  function try_SwitchCaseStatement()
  {
    for (;;)
    {
      lookahead1W(60);              // S^WS | '(:' | 'case'
      shiftT(88);                   // 'case'
      lookahead1W(37);              // EPSILON | S^WS | '(:'
      try_SwitchCaseOperand();
      lookahead1W(145);             // S^WS | '(:' | 'case' | 'return'
      if (l1 != 88)                 // 'case'
      {
        break;
      }
    }
    shiftT(220);                    // 'return'
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    try_Statement();
  }

  function parse_TryCatchStatement()
  {
    startNonterminal("TryCatchStatement");
    shift(250);                     // 'try'
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    parse_BlockStatement();
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    for (;;)
    {
      lookahead1W(61);              // S^WS | '(:' | 'catch'
      shift(91);                    // 'catch'
      lookahead1W(37);              // EPSILON | S^WS | '(:'
      parse_CatchErrorList();
      lookahead1W(37);              // EPSILON | S^WS | '(:'
      parse_BlockStatement();
      lookahead1W(329);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | EOF | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' |
                                    // '..' | '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|' | '}'
      switch (l1)
      {
      case 91:                      // 'catch'
        lookahead2W(331);           // Wildcard | EQName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' |
                                    // '+' | ',' | '-' | '/' | '//' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' |
                                    // '>>' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'contains' |
                                    // 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '|' | '||' | '}'
        break;
      default:
        lk = l1;
      }
      if (lk == 38491               // 'catch' 'and'
       || lk == 45659               // 'catch' 'cast'
       || lk == 46171               // 'catch' 'castable'
       || lk == 60507               // 'catch' 'div'
       || lk == 65627               // 'catch' 'eq'
       || lk == 67163               // 'catch' 'except'
       || lk == 74843               // 'catch' 'ge'
       || lk == 76891               // 'catch' 'gt'
       || lk == 77403               // 'catch' 'idiv'
       || lk == 82011               // 'catch' 'instance'
       || lk == 83035               // 'catch' 'intersect'
       || lk == 84059               // 'catch' 'is'
       || lk == 88155               // 'catch' 'le'
       || lk == 91227               // 'catch' 'lt'
       || lk == 92251               // 'catch' 'mod'
       || lk == 95323               // 'catch' 'ne'
       || lk == 102491              // 'catch' 'or'
       || lk == 127067              // 'catch' 'to'
       || lk == 127579              // 'catch' 'treat'
       || lk == 130139)             // 'catch' 'union'
      {
        lk = memoized(7, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2;
          try
          {
            lookahead1W(61);        // S^WS | '(:' | 'catch'
            shiftT(91);             // 'catch'
            lookahead1W(37);        // EPSILON | S^WS | '(:'
            try_CatchErrorList();
            lookahead1W(37);        // EPSILON | S^WS | '(:'
            try_BlockStatement();
            lk = -1;
          }
          catch (p1A)
          {
            lk = -2;
          }
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(7, e0, lk);
        }
      }
      if (lk != -1
       && lk != 2651                // 'catch' Wildcard
       && lk != 3163                // 'catch' EQName^Token
       && lk != 35931               // 'catch' 'after'
       && lk != 36955               // 'catch' 'allowing'
       && lk != 37467               // 'catch' 'ancestor'
       && lk != 37979               // 'catch' 'ancestor-or-self'
       && lk != 40539               // 'catch' 'as'
       && lk != 41051               // 'catch' 'ascending'
       && lk != 41563               // 'catch' 'at'
       && lk != 42075               // 'catch' 'attribute'
       && lk != 42587               // 'catch' 'base-uri'
       && lk != 43099               // 'catch' 'before'
       && lk != 43611               // 'catch' 'boundary-space'
       && lk != 44123               // 'catch' 'break'
       && lk != 45147               // 'catch' 'case'
       && lk != 46683               // 'catch' 'catch'
       && lk != 47707               // 'catch' 'child'
       && lk != 48219               // 'catch' 'collation'
       && lk != 49243               // 'catch' 'comment'
       && lk != 49755               // 'catch' 'constraint'
       && lk != 50267               // 'catch' 'construction'
       && lk != 51803               // 'catch' 'context'
       && lk != 52315               // 'catch' 'continue'
       && lk != 52827               // 'catch' 'copy'
       && lk != 53339               // 'catch' 'copy-namespaces'
       && lk != 53851               // 'catch' 'count'
       && lk != 54363               // 'catch' 'decimal-format'
       && lk != 55387               // 'catch' 'declare'
       && lk != 55899               // 'catch' 'default'
       && lk != 56411               // 'catch' 'delete'
       && lk != 56923               // 'catch' 'descendant'
       && lk != 57435               // 'catch' 'descendant-or-self'
       && lk != 57947               // 'catch' 'descending'
       && lk != 61019               // 'catch' 'document'
       && lk != 61531               // 'catch' 'document-node'
       && lk != 62043               // 'catch' 'element'
       && lk != 62555               // 'catch' 'else'
       && lk != 63067               // 'catch' 'empty'
       && lk != 63579               // 'catch' 'empty-sequence'
       && lk != 64091               // 'catch' 'encoding'
       && lk != 64603               // 'catch' 'end'
       && lk != 66139               // 'catch' 'every'
       && lk != 67675               // 'catch' 'exit'
       && lk != 68187               // 'catch' 'external'
       && lk != 68699               // 'catch' 'first'
       && lk != 69211               // 'catch' 'following'
       && lk != 69723               // 'catch' 'following-sibling'
       && lk != 70235               // 'catch' 'for'
       && lk != 72283               // 'catch' 'ft-option'
       && lk != 74331               // 'catch' 'function'
       && lk != 75867               // 'catch' 'group'
       && lk != 77915               // 'catch' 'if'
       && lk != 78427               // 'catch' 'import'
       && lk != 78939               // 'catch' 'in'
       && lk != 79451               // 'catch' 'index'
       && lk != 81499               // 'catch' 'insert'
       && lk != 82523               // 'catch' 'integrity'
       && lk != 83547               // 'catch' 'into'
       && lk != 84571               // 'catch' 'item'
       && lk != 87131               // 'catch' 'last'
       && lk != 87643               // 'catch' 'lax'
       && lk != 89179               // 'catch' 'let'
       && lk != 90203               // 'catch' 'loop'
       && lk != 92763               // 'catch' 'modify'
       && lk != 93275               // 'catch' 'module'
       && lk != 94299               // 'catch' 'namespace'
       && lk != 94811               // 'catch' 'namespace-node'
       && lk != 97883               // 'catch' 'node'
       && lk != 98395               // 'catch' 'nodes'
       && lk != 101467              // 'catch' 'only'
       && lk != 101979              // 'catch' 'option'
       && lk != 103003              // 'catch' 'order'
       && lk != 103515              // 'catch' 'ordered'
       && lk != 104027              // 'catch' 'ordering'
       && lk != 105563              // 'catch' 'parent'
       && lk != 108635              // 'catch' 'preceding'
       && lk != 109147              // 'catch' 'preceding-sibling'
       && lk != 110683              // 'catch' 'processing-instruction'
       && lk != 111707              // 'catch' 'rename'
       && lk != 112219              // 'catch' 'replace'
       && lk != 112731              // 'catch' 'return'
       && lk != 113243              // 'catch' 'returning'
       && lk != 113755              // 'catch' 'revalidation'
       && lk != 114779              // 'catch' 'satisfies'
       && lk != 115291              // 'catch' 'schema'
       && lk != 115803              // 'catch' 'schema-attribute'
       && lk != 116315              // 'catch' 'schema-element'
       && lk != 116827              // 'catch' 'score'
       && lk != 117339              // 'catch' 'self'
       && lk != 119899              // 'catch' 'sliding'
       && lk != 120411              // 'catch' 'some'
       && lk != 120923              // 'catch' 'stable'
       && lk != 121435              // 'catch' 'start'
       && lk != 122971              // 'catch' 'strict'
       && lk != 124507              // 'catch' 'switch'
       && lk != 125019              // 'catch' 'text'
       && lk != 128091              // 'catch' 'try'
       && lk != 128603              // 'catch' 'tumbling'
       && lk != 129115              // 'catch' 'type'
       && lk != 129627              // 'catch' 'typeswitch'
       && lk != 131163              // 'catch' 'unordered'
       && lk != 131675              // 'catch' 'updating'
       && lk != 133211              // 'catch' 'validate'
       && lk != 133723              // 'catch' 'value'
       && lk != 134235              // 'catch' 'variable'
       && lk != 134747              // 'catch' 'version'
       && lk != 136283              // 'catch' 'where'
       && lk != 136795              // 'catch' 'while'
       && lk != 138331              // 'catch' 'with'
       && lk != 140379)             // 'catch' 'xquery'
      {
        break;
      }
    }
    endNonterminal("TryCatchStatement");
  }

  function try_TryCatchStatement()
  {
    shiftT(250);                    // 'try'
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    try_BlockStatement();
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    for (;;)
    {
      lookahead1W(61);              // S^WS | '(:' | 'catch'
      shiftT(91);                   // 'catch'
      lookahead1W(37);              // EPSILON | S^WS | '(:'
      try_CatchErrorList();
      lookahead1W(37);              // EPSILON | S^WS | '(:'
      try_BlockStatement();
      lookahead1W(329);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | EOF | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' |
                                    // '..' | '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|' | '}'
      switch (l1)
      {
      case 91:                      // 'catch'
        lookahead2W(331);           // Wildcard | EQName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' |
                                    // '+' | ',' | '-' | '/' | '//' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' |
                                    // '>>' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'contains' |
                                    // 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '|' | '||' | '}'
        break;
      default:
        lk = l1;
      }
      if (lk == 38491               // 'catch' 'and'
       || lk == 45659               // 'catch' 'cast'
       || lk == 46171               // 'catch' 'castable'
       || lk == 60507               // 'catch' 'div'
       || lk == 65627               // 'catch' 'eq'
       || lk == 67163               // 'catch' 'except'
       || lk == 74843               // 'catch' 'ge'
       || lk == 76891               // 'catch' 'gt'
       || lk == 77403               // 'catch' 'idiv'
       || lk == 82011               // 'catch' 'instance'
       || lk == 83035               // 'catch' 'intersect'
       || lk == 84059               // 'catch' 'is'
       || lk == 88155               // 'catch' 'le'
       || lk == 91227               // 'catch' 'lt'
       || lk == 92251               // 'catch' 'mod'
       || lk == 95323               // 'catch' 'ne'
       || lk == 102491              // 'catch' 'or'
       || lk == 127067              // 'catch' 'to'
       || lk == 127579              // 'catch' 'treat'
       || lk == 130139)             // 'catch' 'union'
      {
        lk = memoized(7, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2;
          try
          {
            lookahead1W(61);        // S^WS | '(:' | 'catch'
            shiftT(91);             // 'catch'
            lookahead1W(37);        // EPSILON | S^WS | '(:'
            try_CatchErrorList();
            lookahead1W(37);        // EPSILON | S^WS | '(:'
            try_BlockStatement();
            lk = -1;
          }
          catch (p1A)
          {
            lk = -2;
          }
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(7, e0, lk);
        }
      }
      if (lk != -1
       && lk != 2651                // 'catch' Wildcard
       && lk != 3163                // 'catch' EQName^Token
       && lk != 35931               // 'catch' 'after'
       && lk != 36955               // 'catch' 'allowing'
       && lk != 37467               // 'catch' 'ancestor'
       && lk != 37979               // 'catch' 'ancestor-or-self'
       && lk != 40539               // 'catch' 'as'
       && lk != 41051               // 'catch' 'ascending'
       && lk != 41563               // 'catch' 'at'
       && lk != 42075               // 'catch' 'attribute'
       && lk != 42587               // 'catch' 'base-uri'
       && lk != 43099               // 'catch' 'before'
       && lk != 43611               // 'catch' 'boundary-space'
       && lk != 44123               // 'catch' 'break'
       && lk != 45147               // 'catch' 'case'
       && lk != 46683               // 'catch' 'catch'
       && lk != 47707               // 'catch' 'child'
       && lk != 48219               // 'catch' 'collation'
       && lk != 49243               // 'catch' 'comment'
       && lk != 49755               // 'catch' 'constraint'
       && lk != 50267               // 'catch' 'construction'
       && lk != 51803               // 'catch' 'context'
       && lk != 52315               // 'catch' 'continue'
       && lk != 52827               // 'catch' 'copy'
       && lk != 53339               // 'catch' 'copy-namespaces'
       && lk != 53851               // 'catch' 'count'
       && lk != 54363               // 'catch' 'decimal-format'
       && lk != 55387               // 'catch' 'declare'
       && lk != 55899               // 'catch' 'default'
       && lk != 56411               // 'catch' 'delete'
       && lk != 56923               // 'catch' 'descendant'
       && lk != 57435               // 'catch' 'descendant-or-self'
       && lk != 57947               // 'catch' 'descending'
       && lk != 61019               // 'catch' 'document'
       && lk != 61531               // 'catch' 'document-node'
       && lk != 62043               // 'catch' 'element'
       && lk != 62555               // 'catch' 'else'
       && lk != 63067               // 'catch' 'empty'
       && lk != 63579               // 'catch' 'empty-sequence'
       && lk != 64091               // 'catch' 'encoding'
       && lk != 64603               // 'catch' 'end'
       && lk != 66139               // 'catch' 'every'
       && lk != 67675               // 'catch' 'exit'
       && lk != 68187               // 'catch' 'external'
       && lk != 68699               // 'catch' 'first'
       && lk != 69211               // 'catch' 'following'
       && lk != 69723               // 'catch' 'following-sibling'
       && lk != 70235               // 'catch' 'for'
       && lk != 72283               // 'catch' 'ft-option'
       && lk != 74331               // 'catch' 'function'
       && lk != 75867               // 'catch' 'group'
       && lk != 77915               // 'catch' 'if'
       && lk != 78427               // 'catch' 'import'
       && lk != 78939               // 'catch' 'in'
       && lk != 79451               // 'catch' 'index'
       && lk != 81499               // 'catch' 'insert'
       && lk != 82523               // 'catch' 'integrity'
       && lk != 83547               // 'catch' 'into'
       && lk != 84571               // 'catch' 'item'
       && lk != 87131               // 'catch' 'last'
       && lk != 87643               // 'catch' 'lax'
       && lk != 89179               // 'catch' 'let'
       && lk != 90203               // 'catch' 'loop'
       && lk != 92763               // 'catch' 'modify'
       && lk != 93275               // 'catch' 'module'
       && lk != 94299               // 'catch' 'namespace'
       && lk != 94811               // 'catch' 'namespace-node'
       && lk != 97883               // 'catch' 'node'
       && lk != 98395               // 'catch' 'nodes'
       && lk != 101467              // 'catch' 'only'
       && lk != 101979              // 'catch' 'option'
       && lk != 103003              // 'catch' 'order'
       && lk != 103515              // 'catch' 'ordered'
       && lk != 104027              // 'catch' 'ordering'
       && lk != 105563              // 'catch' 'parent'
       && lk != 108635              // 'catch' 'preceding'
       && lk != 109147              // 'catch' 'preceding-sibling'
       && lk != 110683              // 'catch' 'processing-instruction'
       && lk != 111707              // 'catch' 'rename'
       && lk != 112219              // 'catch' 'replace'
       && lk != 112731              // 'catch' 'return'
       && lk != 113243              // 'catch' 'returning'
       && lk != 113755              // 'catch' 'revalidation'
       && lk != 114779              // 'catch' 'satisfies'
       && lk != 115291              // 'catch' 'schema'
       && lk != 115803              // 'catch' 'schema-attribute'
       && lk != 116315              // 'catch' 'schema-element'
       && lk != 116827              // 'catch' 'score'
       && lk != 117339              // 'catch' 'self'
       && lk != 119899              // 'catch' 'sliding'
       && lk != 120411              // 'catch' 'some'
       && lk != 120923              // 'catch' 'stable'
       && lk != 121435              // 'catch' 'start'
       && lk != 122971              // 'catch' 'strict'
       && lk != 124507              // 'catch' 'switch'
       && lk != 125019              // 'catch' 'text'
       && lk != 128091              // 'catch' 'try'
       && lk != 128603              // 'catch' 'tumbling'
       && lk != 129115              // 'catch' 'type'
       && lk != 129627              // 'catch' 'typeswitch'
       && lk != 131163              // 'catch' 'unordered'
       && lk != 131675              // 'catch' 'updating'
       && lk != 133211              // 'catch' 'validate'
       && lk != 133723              // 'catch' 'value'
       && lk != 134235              // 'catch' 'variable'
       && lk != 134747              // 'catch' 'version'
       && lk != 136283              // 'catch' 'where'
       && lk != 136795              // 'catch' 'while'
       && lk != 138331              // 'catch' 'with'
       && lk != 140379)             // 'catch' 'xquery'
      {
        break;
      }
    }
  }

  function parse_TypeswitchStatement()
  {
    startNonterminal("TypeswitchStatement");
    shift(253);                     // 'typeswitch'
    lookahead1W(46);                // S^WS | '(' | '(:'
    shift(34);                      // '('
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    parse_Expr();
    lookahead1W(47);                // S^WS | '(:' | ')'
    shift(37);                      // ')'
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    for (;;)
    {
      lookahead1W(37);              // EPSILON | S^WS | '(:'
      parse_CaseStatement();
      lookahead1W(144);             // S^WS | '(:' | 'case' | 'default'
      if (l1 != 88)                 // 'case'
      {
        break;
      }
    }
    shift(109);                     // 'default'
    lookahead1W(125);               // S^WS | '$' | '(:' | 'return'
    if (l1 == 31)                   // '$'
    {
      shift(31);                    // '$'
      lookahead1W(305);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      parse_VarName();
    }
    lookahead1W(94);                // S^WS | '(:' | 'return'
    shift(220);                     // 'return'
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    parse_Statement();
    endNonterminal("TypeswitchStatement");
  }

  function try_TypeswitchStatement()
  {
    shiftT(253);                    // 'typeswitch'
    lookahead1W(46);                // S^WS | '(' | '(:'
    shiftT(34);                     // '('
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    try_Expr();
    lookahead1W(47);                // S^WS | '(:' | ')'
    shiftT(37);                     // ')'
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    for (;;)
    {
      lookahead1W(37);              // EPSILON | S^WS | '(:'
      try_CaseStatement();
      lookahead1W(144);             // S^WS | '(:' | 'case' | 'default'
      if (l1 != 88)                 // 'case'
      {
        break;
      }
    }
    shiftT(109);                    // 'default'
    lookahead1W(125);               // S^WS | '$' | '(:' | 'return'
    if (l1 == 31)                   // '$'
    {
      shiftT(31);                   // '$'
      lookahead1W(305);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      try_VarName();
    }
    lookahead1W(94);                // S^WS | '(:' | 'return'
    shiftT(220);                    // 'return'
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    try_Statement();
  }

  function parse_CaseStatement()
  {
    startNonterminal("CaseStatement");
    lookahead1(14);                 // 'case'
    shift(88);                      // 'case'
    lookahead1W(316);               // EQName^Token | S^WS | '$' | '%' | '(' | '(:' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
    if (l1 == 31)                   // '$'
    {
      shift(31);                    // '$'
      lookahead1W(305);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      parse_VarName();
      lookahead1W(56);              // S^WS | '(:' | 'as'
      shift(79);                    // 'as'
    }
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    parse_SequenceType();
    lookahead1W(94);                // S^WS | '(:' | 'return'
    shift(220);                     // 'return'
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    parse_Statement();
    endNonterminal("CaseStatement");
  }

  function try_CaseStatement()
  {
    lookahead1(14);                 // 'case'
    shiftT(88);                     // 'case'
    lookahead1W(316);               // EQName^Token | S^WS | '$' | '%' | '(' | '(:' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json-item' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
    if (l1 == 31)                   // '$'
    {
      shiftT(31);                   // '$'
      lookahead1W(305);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      try_VarName();
      lookahead1W(56);              // S^WS | '(:' | 'as'
      shiftT(79);                   // 'as'
    }
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    try_SequenceType();
    lookahead1W(94);                // S^WS | '(:' | 'return'
    shiftT(220);                    // 'return'
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    try_Statement();
  }

  function parse_VarDeclStatement()
  {
    startNonterminal("VarDeclStatement");
    for (;;)
    {
      lookahead1W(127);             // S^WS | '%' | '(:' | 'variable'
      if (l1 != 32)                 // '%'
      {
        break;
      }
      parse_Annotation();
    }
    shift(262);                     // 'variable'
    lookahead1W(45);                // S^WS | '$' | '(:'
    shift(31);                      // '$'
    lookahead1W(305);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    parse_VarName();
    lookahead1W(189);               // S^WS | '(:' | ',' | ':=' | ';' | 'as'
    if (l1 == 79)                   // 'as'
    {
      parse_TypeDeclaration();
    }
    lookahead1W(177);               // S^WS | '(:' | ',' | ':=' | ';'
    if (l1 == 52)                   // ':='
    {
      shift(52);                    // ':='
      lookahead1W(37);              // EPSILON | S^WS | '(:'
      parse_ExprSingle();
    }
    for (;;)
    {
      lookahead1W(131);             // S^WS | '(:' | ',' | ';'
      if (l1 != 41)                 // ','
      {
        break;
      }
      shift(41);                    // ','
      lookahead1W(45);              // S^WS | '$' | '(:'
      shift(31);                    // '$'
      lookahead1W(305);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      parse_VarName();
      lookahead1W(189);             // S^WS | '(:' | ',' | ':=' | ';' | 'as'
      if (l1 == 79)                 // 'as'
      {
        parse_TypeDeclaration();
      }
      lookahead1W(177);             // S^WS | '(:' | ',' | ':=' | ';'
      if (l1 == 52)                 // ':='
      {
        shift(52);                  // ':='
        lookahead1W(37);            // EPSILON | S^WS | '(:'
        parse_ExprSingle();
      }
    }
    shift(53);                      // ';'
    endNonterminal("VarDeclStatement");
  }

  function try_VarDeclStatement()
  {
    for (;;)
    {
      lookahead1W(127);             // S^WS | '%' | '(:' | 'variable'
      if (l1 != 32)                 // '%'
      {
        break;
      }
      try_Annotation();
    }
    shiftT(262);                    // 'variable'
    lookahead1W(45);                // S^WS | '$' | '(:'
    shiftT(31);                     // '$'
    lookahead1W(305);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    try_VarName();
    lookahead1W(189);               // S^WS | '(:' | ',' | ':=' | ';' | 'as'
    if (l1 == 79)                   // 'as'
    {
      try_TypeDeclaration();
    }
    lookahead1W(177);               // S^WS | '(:' | ',' | ':=' | ';'
    if (l1 == 52)                   // ':='
    {
      shiftT(52);                   // ':='
      lookahead1W(37);              // EPSILON | S^WS | '(:'
      try_ExprSingle();
    }
    for (;;)
    {
      lookahead1W(131);             // S^WS | '(:' | ',' | ';'
      if (l1 != 41)                 // ','
      {
        break;
      }
      shiftT(41);                   // ','
      lookahead1W(45);              // S^WS | '$' | '(:'
      shiftT(31);                   // '$'
      lookahead1W(305);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      try_VarName();
      lookahead1W(189);             // S^WS | '(:' | ',' | ':=' | ';' | 'as'
      if (l1 == 79)                 // 'as'
      {
        try_TypeDeclaration();
      }
      lookahead1W(177);             // S^WS | '(:' | ',' | ':=' | ';'
      if (l1 == 52)                 // ':='
      {
        shiftT(52);                 // ':='
        lookahead1W(37);            // EPSILON | S^WS | '(:'
        try_ExprSingle();
      }
    }
    shiftT(53);                     // ';'
  }

  function parse_WhileStatement()
  {
    startNonterminal("WhileStatement");
    shift(267);                     // 'while'
    lookahead1W(46);                // S^WS | '(' | '(:'
    shift(34);                      // '('
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    parse_Expr();
    lookahead1W(47);                // S^WS | '(:' | ')'
    shift(37);                      // ')'
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    parse_Statement();
    endNonterminal("WhileStatement");
  }

  function try_WhileStatement()
  {
    shiftT(267);                    // 'while'
    lookahead1W(46);                // S^WS | '(' | '(:'
    shiftT(34);                     // '('
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    try_Expr();
    lookahead1W(47);                // S^WS | '(:' | ')'
    shiftT(37);                     // ')'
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    try_Statement();
  }

  function parse_ExprSingle()
  {
    startNonterminal("ExprSingle");
    lookahead1W(322);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    switch (l1)
    {
    case 137:                       // 'for'
      lookahead2W(286);             // S^WS | EOF | '!' | '!=' | '#' | '$' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' |
                                    // '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                    // 'sliding' | 'stable' | 'start' | 'to' | 'treat' | 'tumbling' | 'union' |
                                    // 'where' | 'with' | '|' | '||' | '|}' | '}'
      break;
    case 174:                       // 'let'
      lookahead2W(283);             // S^WS | EOF | '!' | '!=' | '#' | '$' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' |
                                    // '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                    // 'score' | 'stable' | 'start' | 'to' | 'treat' | 'union' | 'where' | 'with' |
                                    // '|' | '||' | '|}' | '}'
      break;
    case 250:                       // 'try'
      lookahead2W(282);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                    // 'stable' | 'start' | 'to' | 'treat' | 'union' | 'where' | 'with' | '{' | '|' |
                                    // '||' | '|}' | '}'
      break;
    case 152:                       // 'if'
    case 243:                       // 'switch'
    case 253:                       // 'typeswitch'
      lookahead2W(280);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                    // 'stable' | 'start' | 'to' | 'treat' | 'union' | 'where' | 'with' | '|' | '||' |
                                    // '|}' | '}'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 16009:                     // 'for' '$'
    case 16046:                     // 'let' '$'
    case 116910:                    // 'let' 'score'
    case 119945:                    // 'for' 'sliding'
    case 128649:                    // 'for' 'tumbling'
      parse_FLWORExpr();
      break;
    case 17560:                     // 'if' '('
      parse_IfExpr();
      break;
    case 17651:                     // 'switch' '('
      parse_SwitchExpr();
      break;
    case 141562:                    // 'try' '{'
      parse_TryCatchExpr();
      break;
    case 17661:                     // 'typeswitch' '('
      parse_TypeswitchExpr();
      break;
    default:
      parse_ExprSimple();
    }
    endNonterminal("ExprSingle");
  }

  function try_ExprSingle()
  {
    lookahead1W(322);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    switch (l1)
    {
    case 137:                       // 'for'
      lookahead2W(286);             // S^WS | EOF | '!' | '!=' | '#' | '$' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' |
                                    // '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                    // 'sliding' | 'stable' | 'start' | 'to' | 'treat' | 'tumbling' | 'union' |
                                    // 'where' | 'with' | '|' | '||' | '|}' | '}'
      break;
    case 174:                       // 'let'
      lookahead2W(283);             // S^WS | EOF | '!' | '!=' | '#' | '$' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' |
                                    // '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                    // 'score' | 'stable' | 'start' | 'to' | 'treat' | 'union' | 'where' | 'with' |
                                    // '|' | '||' | '|}' | '}'
      break;
    case 250:                       // 'try'
      lookahead2W(282);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                    // 'stable' | 'start' | 'to' | 'treat' | 'union' | 'where' | 'with' | '{' | '|' |
                                    // '||' | '|}' | '}'
      break;
    case 152:                       // 'if'
    case 243:                       // 'switch'
    case 253:                       // 'typeswitch'
      lookahead2W(280);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                    // 'stable' | 'start' | 'to' | 'treat' | 'union' | 'where' | 'with' | '|' | '||' |
                                    // '|}' | '}'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 16009:                     // 'for' '$'
    case 16046:                     // 'let' '$'
    case 116910:                    // 'let' 'score'
    case 119945:                    // 'for' 'sliding'
    case 128649:                    // 'for' 'tumbling'
      try_FLWORExpr();
      break;
    case 17560:                     // 'if' '('
      try_IfExpr();
      break;
    case 17651:                     // 'switch' '('
      try_SwitchExpr();
      break;
    case 141562:                    // 'try' '{'
      try_TryCatchExpr();
      break;
    case 17661:                     // 'typeswitch' '('
      try_TypeswitchExpr();
      break;
    default:
      try_ExprSimple();
    }
  }

  function parse_ExprSimple()
  {
    startNonterminal("ExprSimple");
    lookahead1W(322);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    switch (l1)
    {
    case 218:                       // 'rename'
      lookahead2W(284);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'json' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'treat' | 'union' |
                                    // 'where' | 'with' | '|' | '||' | '|}' | '}'
      break;
    case 219:                       // 'replace'
      lookahead2W(288);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'json' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'treat' | 'union' |
                                    // 'value' | 'where' | 'with' | '|' | '||' | '|}' | '}'
      break;
    case 110:                       // 'delete'
    case 159:                       // 'insert'
      lookahead2W(287);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'json' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'node' | 'nodes' | 'only' | 'or' |
                                    // 'order' | 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | '|' | '||' | '|}' | '}'
      break;
    case 103:                       // 'copy'
    case 129:                       // 'every'
    case 235:                       // 'some'
      lookahead2W(281);             // S^WS | EOF | '!' | '!=' | '#' | '$' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' |
                                    // '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                    // 'stable' | 'start' | 'to' | 'treat' | 'union' | 'where' | 'with' | '|' | '||' |
                                    // '|}' | '}'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 16001:                     // 'every' '$'
    case 16107:                     // 'some' '$'
      parse_QuantifiedExpr();
      break;
    case 97951:                     // 'insert' 'node'
    case 98463:                     // 'insert' 'nodes'
      parse_InsertExpr();
      break;
    case 97902:                     // 'delete' 'node'
    case 98414:                     // 'delete' 'nodes'
      parse_DeleteExpr();
      break;
    case 98010:                     // 'rename' 'node'
      parse_RenameExpr();
      break;
    case 98011:                     // 'replace' 'node'
    case 133851:                    // 'replace' 'value'
      parse_ReplaceExpr();
      break;
    case 15975:                     // 'copy' '$'
      parse_TransformExpr();
      break;
    case 85102:                     // 'delete' 'json'
      parse_JSONDeleteExpr();
      break;
    case 85151:                     // 'insert' 'json'
      parse_JSONInsertExpr();
      break;
    case 85210:                     // 'rename' 'json'
      parse_JSONRenameExpr();
      break;
    case 85211:                     // 'replace' 'json'
      parse_JSONReplaceExpr();
      break;
    case 77:                        // 'append'
      parse_JSONAppendExpr();
      break;
    default:
      parse_OrExpr();
    }
    endNonterminal("ExprSimple");
  }

  function try_ExprSimple()
  {
    lookahead1W(322);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    switch (l1)
    {
    case 218:                       // 'rename'
      lookahead2W(284);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'json' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'treat' | 'union' |
                                    // 'where' | 'with' | '|' | '||' | '|}' | '}'
      break;
    case 219:                       // 'replace'
      lookahead2W(288);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'json' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'treat' | 'union' |
                                    // 'value' | 'where' | 'with' | '|' | '||' | '|}' | '}'
      break;
    case 110:                       // 'delete'
    case 159:                       // 'insert'
      lookahead2W(287);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'json' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'node' | 'nodes' | 'only' | 'or' |
                                    // 'order' | 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | '|' | '||' | '|}' | '}'
      break;
    case 103:                       // 'copy'
    case 129:                       // 'every'
    case 235:                       // 'some'
      lookahead2W(281);             // S^WS | EOF | '!' | '!=' | '#' | '$' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' |
                                    // '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                    // 'stable' | 'start' | 'to' | 'treat' | 'union' | 'where' | 'with' | '|' | '||' |
                                    // '|}' | '}'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 16001:                     // 'every' '$'
    case 16107:                     // 'some' '$'
      try_QuantifiedExpr();
      break;
    case 97951:                     // 'insert' 'node'
    case 98463:                     // 'insert' 'nodes'
      try_InsertExpr();
      break;
    case 97902:                     // 'delete' 'node'
    case 98414:                     // 'delete' 'nodes'
      try_DeleteExpr();
      break;
    case 98010:                     // 'rename' 'node'
      try_RenameExpr();
      break;
    case 98011:                     // 'replace' 'node'
    case 133851:                    // 'replace' 'value'
      try_ReplaceExpr();
      break;
    case 15975:                     // 'copy' '$'
      try_TransformExpr();
      break;
    case 85102:                     // 'delete' 'json'
      try_JSONDeleteExpr();
      break;
    case 85151:                     // 'insert' 'json'
      try_JSONInsertExpr();
      break;
    case 85210:                     // 'rename' 'json'
      try_JSONRenameExpr();
      break;
    case 85211:                     // 'replace' 'json'
      try_JSONReplaceExpr();
      break;
    case 77:                        // 'append'
      try_JSONAppendExpr();
      break;
    default:
      try_OrExpr();
    }
  }

  function parse_JSONDeleteExpr()
  {
    startNonterminal("JSONDeleteExpr");
    shift(110);                     // 'delete'
    lookahead1W(80);                // S^WS | '(:' | 'json'
    shift(166);                     // 'json'
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    parse_PostfixExpr();
    endNonterminal("JSONDeleteExpr");
  }

  function try_JSONDeleteExpr()
  {
    shiftT(110);                    // 'delete'
    lookahead1W(80);                // S^WS | '(:' | 'json'
    shiftT(166);                    // 'json'
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    try_PostfixExpr();
  }

  function parse_JSONInsertExpr()
  {
    startNonterminal("JSONInsertExpr");
    shift(159);                     // 'insert'
    lookahead1W(80);                // S^WS | '(:' | 'json'
    shift(166);                     // 'json'
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    parse_ExprSingle();
    lookahead1W(78);                // S^WS | '(:' | 'into'
    shift(163);                     // 'into'
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    parse_ExprSingle();
    lookahead1W(221);               // S^WS | EOF | '(:' | ')' | ',' | ':' | ';' | ']' | 'after' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'else' | 'empty' | 'end' | 'for' | 'group' | 'into' | 'let' | 'modify' | 'only' |
                                    // 'order' | 'return' | 'satisfies' | 'stable' | 'start' | 'where' | 'with' | '|}' |
                                    // '}'
    switch (l1)
    {
    case 81:                        // 'at'
      lookahead2W(93);              // S^WS | '(:' | 'position'
      break;
    default:
      lk = l1;
    }
    if (lk == 108113)               // 'at' 'position'
    {
      lk = memoized(8, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          shiftT(81);               // 'at'
          lookahead1W(93);          // S^WS | '(:' | 'position'
          shiftT(211);              // 'position'
          lookahead1W(37);          // EPSILON | S^WS | '(:'
          try_ExprSingle();
          lk = -1;
        }
        catch (p1A)
        {
          lk = -2;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(8, e0, lk);
      }
    }
    if (lk == -1)
    {
      shift(81);                    // 'at'
      lookahead1W(93);              // S^WS | '(:' | 'position'
      shift(211);                   // 'position'
      lookahead1W(37);              // EPSILON | S^WS | '(:'
      parse_ExprSingle();
    }
    endNonterminal("JSONInsertExpr");
  }

  function try_JSONInsertExpr()
  {
    shiftT(159);                    // 'insert'
    lookahead1W(80);                // S^WS | '(:' | 'json'
    shiftT(166);                    // 'json'
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    try_ExprSingle();
    lookahead1W(78);                // S^WS | '(:' | 'into'
    shiftT(163);                    // 'into'
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    try_ExprSingle();
    lookahead1W(221);               // S^WS | EOF | '(:' | ')' | ',' | ':' | ';' | ']' | 'after' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'else' | 'empty' | 'end' | 'for' | 'group' | 'into' | 'let' | 'modify' | 'only' |
                                    // 'order' | 'return' | 'satisfies' | 'stable' | 'start' | 'where' | 'with' | '|}' |
                                    // '}'
    switch (l1)
    {
    case 81:                        // 'at'
      lookahead2W(93);              // S^WS | '(:' | 'position'
      break;
    default:
      lk = l1;
    }
    if (lk == 108113)               // 'at' 'position'
    {
      lk = memoized(8, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          shiftT(81);               // 'at'
          lookahead1W(93);          // S^WS | '(:' | 'position'
          shiftT(211);              // 'position'
          lookahead1W(37);          // EPSILON | S^WS | '(:'
          try_ExprSingle();
          lk = -1;
        }
        catch (p1A)
        {
          lk = -2;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(8, e0, lk);
      }
    }
    if (lk == -1)
    {
      shiftT(81);                   // 'at'
      lookahead1W(93);              // S^WS | '(:' | 'position'
      shiftT(211);                  // 'position'
      lookahead1W(37);              // EPSILON | S^WS | '(:'
      try_ExprSingle();
    }
  }

  function parse_JSONRenameExpr()
  {
    startNonterminal("JSONRenameExpr");
    shift(218);                     // 'rename'
    lookahead1W(80);                // S^WS | '(:' | 'json'
    shift(166);                     // 'json'
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    parse_PostfixExpr();
    lookahead1W(56);                // S^WS | '(:' | 'as'
    shift(79);                      // 'as'
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    parse_ExprSingle();
    endNonterminal("JSONRenameExpr");
  }

  function try_JSONRenameExpr()
  {
    shiftT(218);                    // 'rename'
    lookahead1W(80);                // S^WS | '(:' | 'json'
    shiftT(166);                    // 'json'
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    try_PostfixExpr();
    lookahead1W(56);                // S^WS | '(:' | 'as'
    shiftT(79);                     // 'as'
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    try_ExprSingle();
  }

  function parse_JSONReplaceExpr()
  {
    startNonterminal("JSONReplaceExpr");
    shift(219);                     // 'replace'
    lookahead1W(80);                // S^WS | '(:' | 'json'
    shift(166);                     // 'json'
    lookahead1W(107);               // S^WS | '(:' | 'value'
    shift(261);                     // 'value'
    lookahead1W(88);                // S^WS | '(:' | 'of'
    shift(196);                     // 'of'
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    parse_PostfixExpr();
    lookahead1W(111);               // S^WS | '(:' | 'with'
    shift(270);                     // 'with'
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    parse_ExprSingle();
    endNonterminal("JSONReplaceExpr");
  }

  function try_JSONReplaceExpr()
  {
    shiftT(219);                    // 'replace'
    lookahead1W(80);                // S^WS | '(:' | 'json'
    shiftT(166);                    // 'json'
    lookahead1W(107);               // S^WS | '(:' | 'value'
    shiftT(261);                    // 'value'
    lookahead1W(88);                // S^WS | '(:' | 'of'
    shiftT(196);                    // 'of'
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    try_PostfixExpr();
    lookahead1W(111);               // S^WS | '(:' | 'with'
    shiftT(270);                    // 'with'
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    try_ExprSingle();
  }

  function parse_JSONAppendExpr()
  {
    startNonterminal("JSONAppendExpr");
    shift(77);                      // 'append'
    lookahead1W(80);                // S^WS | '(:' | 'json'
    shift(166);                     // 'json'
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    parse_ExprSingle();
    lookahead1W(78);                // S^WS | '(:' | 'into'
    shift(163);                     // 'into'
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    parse_ExprSingle();
    endNonterminal("JSONAppendExpr");
  }

  function try_JSONAppendExpr()
  {
    shiftT(77);                     // 'append'
    lookahead1W(80);                // S^WS | '(:' | 'json'
    shiftT(166);                    // 'json'
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    try_ExprSingle();
    lookahead1W(78);                // S^WS | '(:' | 'into'
    shiftT(163);                    // 'into'
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    try_ExprSingle();
  }

  function parse_CommonContent()
  {
    startNonterminal("CommonContent");
    switch (l1)
    {
    case 12:                        // PredefinedEntityRef
      shift(12);                    // PredefinedEntityRef
      break;
    case 23:                        // CharRef
      shift(23);                    // CharRef
      break;
    case 277:                       // '{{'
      shift(277);                   // '{{'
      break;
    case 283:                       // '}}'
      shift(283);                   // '}}'
      break;
    default:
      parse_BlockExpr();
    }
    endNonterminal("CommonContent");
  }

  function try_CommonContent()
  {
    switch (l1)
    {
    case 12:                        // PredefinedEntityRef
      shiftT(12);                   // PredefinedEntityRef
      break;
    case 23:                        // CharRef
      shiftT(23);                   // CharRef
      break;
    case 277:                       // '{{'
      shiftT(277);                  // '{{'
      break;
    case 283:                       // '}}'
      shiftT(283);                  // '}}'
      break;
    default:
      try_BlockExpr();
    }
  }

  function parse_ContentExpr()
  {
    startNonterminal("ContentExpr");
    parse_StatementsAndExpr();
    endNonterminal("ContentExpr");
  }

  function try_ContentExpr()
  {
    try_StatementsAndExpr();
  }

  function parse_CompDocConstructor()
  {
    startNonterminal("CompDocConstructor");
    shift(119);                     // 'document'
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    parse_BlockExpr();
    endNonterminal("CompDocConstructor");
  }

  function try_CompDocConstructor()
  {
    shiftT(119);                    // 'document'
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    try_BlockExpr();
  }

  function parse_CompAttrConstructor()
  {
    startNonterminal("CompAttrConstructor");
    shift(82);                      // 'attribute'
    lookahead1W(308);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    switch (l1)
    {
    case 276:                       // '{'
      shift(276);                   // '{'
      lookahead1W(37);              // EPSILON | S^WS | '(:'
      parse_Expr();
      lookahead1W(115);             // S^WS | '(:' | '}'
      shift(282);                   // '}'
      break;
    default:
      parse_EQName();
    }
    lookahead1W(113);               // S^WS | '(:' | '{'
    switch (l1)
    {
    case 276:                       // '{'
      lookahead2W(328);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|' | '}'
      break;
    default:
      lk = l1;
    }
    if (lk == 144660)               // '{' '}'
    {
      lk = memoized(9, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          shiftT(276);              // '{'
          lookahead1W(115);         // S^WS | '(:' | '}'
          shiftT(282);              // '}'
          lk = -1;
        }
        catch (p1A)
        {
          lk = -2;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(9, e0, lk);
      }
    }
    switch (lk)
    {
    case -1:
      shift(276);                   // '{'
      lookahead1W(115);             // S^WS | '(:' | '}'
      shift(282);                   // '}'
      break;
    default:
      parse_BlockExpr();
    }
    endNonterminal("CompAttrConstructor");
  }

  function try_CompAttrConstructor()
  {
    shiftT(82);                     // 'attribute'
    lookahead1W(308);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    switch (l1)
    {
    case 276:                       // '{'
      shiftT(276);                  // '{'
      lookahead1W(37);              // EPSILON | S^WS | '(:'
      try_Expr();
      lookahead1W(115);             // S^WS | '(:' | '}'
      shiftT(282);                  // '}'
      break;
    default:
      try_EQName();
    }
    lookahead1W(113);               // S^WS | '(:' | '{'
    switch (l1)
    {
    case 276:                       // '{'
      lookahead2W(328);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|' | '}'
      break;
    default:
      lk = l1;
    }
    if (lk == 144660)               // '{' '}'
    {
      lk = memoized(9, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          shiftT(276);              // '{'
          lookahead1W(115);         // S^WS | '(:' | '}'
          shiftT(282);              // '}'
          lk = -1;
        }
        catch (p1A)
        {
          lk = -2;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(9, e0, lk);
      }
    }
    switch (lk)
    {
    case -1:
      shiftT(276);                  // '{'
      lookahead1W(115);             // S^WS | '(:' | '}'
      shiftT(282);                  // '}'
      break;
    default:
      try_BlockExpr();
    }
  }

  function parse_CompPIConstructor()
  {
    startNonterminal("CompPIConstructor");
    shift(216);                     // 'processing-instruction'
    lookahead1W(309);               // NCName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    switch (l1)
    {
    case 276:                       // '{'
      shift(276);                   // '{'
      lookahead1W(37);              // EPSILON | S^WS | '(:'
      parse_Expr();
      lookahead1W(115);             // S^WS | '(:' | '}'
      shift(282);                   // '}'
      break;
    default:
      parse_NCName();
    }
    lookahead1W(113);               // S^WS | '(:' | '{'
    switch (l1)
    {
    case 276:                       // '{'
      lookahead2W(328);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|' | '}'
      break;
    default:
      lk = l1;
    }
    if (lk == 144660)               // '{' '}'
    {
      lk = memoized(10, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          shiftT(276);              // '{'
          lookahead1W(115);         // S^WS | '(:' | '}'
          shiftT(282);              // '}'
          lk = -1;
        }
        catch (p1A)
        {
          lk = -2;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(10, e0, lk);
      }
    }
    switch (lk)
    {
    case -1:
      shift(276);                   // '{'
      lookahead1W(115);             // S^WS | '(:' | '}'
      shift(282);                   // '}'
      break;
    default:
      parse_BlockExpr();
    }
    endNonterminal("CompPIConstructor");
  }

  function try_CompPIConstructor()
  {
    shiftT(216);                    // 'processing-instruction'
    lookahead1W(309);               // NCName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    switch (l1)
    {
    case 276:                       // '{'
      shiftT(276);                  // '{'
      lookahead1W(37);              // EPSILON | S^WS | '(:'
      try_Expr();
      lookahead1W(115);             // S^WS | '(:' | '}'
      shiftT(282);                  // '}'
      break;
    default:
      try_NCName();
    }
    lookahead1W(113);               // S^WS | '(:' | '{'
    switch (l1)
    {
    case 276:                       // '{'
      lookahead2W(328);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|' | '}'
      break;
    default:
      lk = l1;
    }
    if (lk == 144660)               // '{' '}'
    {
      lk = memoized(10, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          shiftT(276);              // '{'
          lookahead1W(115);         // S^WS | '(:' | '}'
          shiftT(282);              // '}'
          lk = -1;
        }
        catch (p1A)
        {
          lk = -2;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(10, e0, lk);
      }
    }
    switch (lk)
    {
    case -1:
      shiftT(276);                  // '{'
      lookahead1W(115);             // S^WS | '(:' | '}'
      shiftT(282);                  // '}'
      break;
    default:
      try_BlockExpr();
    }
  }

  function parse_CompCommentConstructor()
  {
    startNonterminal("CompCommentConstructor");
    shift(96);                      // 'comment'
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    parse_BlockExpr();
    endNonterminal("CompCommentConstructor");
  }

  function try_CompCommentConstructor()
  {
    shiftT(96);                     // 'comment'
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    try_BlockExpr();
  }

  function parse_CompTextConstructor()
  {
    startNonterminal("CompTextConstructor");
    shift(244);                     // 'text'
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    parse_BlockExpr();
    endNonterminal("CompTextConstructor");
  }

  function try_CompTextConstructor()
  {
    shiftT(244);                    // 'text'
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    try_BlockExpr();
  }

  function parse_PrimaryExpr()
  {
    startNonterminal("PrimaryExpr");
    lookahead1W(318);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(:' | '.' | '<' | '<!--' | '<?' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' |
                                    // 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    switch (l1)
    {
    case 184:                       // 'namespace'
      lookahead2W(314);             // NCName^Token | S^WS | '#' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
      break;
    case 216:                       // 'processing-instruction'
      lookahead2W(313);             // NCName^Token | S^WS | '#' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
      break;
    case 276:                       // '{'
      lookahead2W(328);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|' | '}'
      break;
    case 82:                        // 'attribute'
    case 121:                       // 'element'
      lookahead2W(310);             // EQName^Token | S^WS | '#' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
      break;
    case 96:                        // 'comment'
    case 244:                       // 'text'
      lookahead2W(123);             // S^WS | '#' | '(:' | '{'
      break;
    case 119:                       // 'document'
    case 202:                       // 'ordered'
    case 256:                       // 'unordered'
      lookahead2W(171);             // S^WS | '#' | '(' | '(:' | '{'
      break;
    case 6:                         // EQName^Token
    case 70:                        // 'after'
    case 72:                        // 'allowing'
    case 73:                        // 'ancestor'
    case 74:                        // 'ancestor-or-self'
    case 75:                        // 'and'
    case 79:                        // 'as'
    case 80:                        // 'ascending'
    case 81:                        // 'at'
    case 83:                        // 'base-uri'
    case 84:                        // 'before'
    case 85:                        // 'boundary-space'
    case 86:                        // 'break'
    case 88:                        // 'case'
    case 89:                        // 'cast'
    case 90:                        // 'castable'
    case 91:                        // 'catch'
    case 93:                        // 'child'
    case 94:                        // 'collation'
    case 97:                        // 'constraint'
    case 98:                        // 'construction'
    case 101:                       // 'context'
    case 102:                       // 'continue'
    case 103:                       // 'copy'
    case 104:                       // 'copy-namespaces'
    case 105:                       // 'count'
    case 106:                       // 'decimal-format'
    case 108:                       // 'declare'
    case 109:                       // 'default'
    case 110:                       // 'delete'
    case 111:                       // 'descendant'
    case 112:                       // 'descendant-or-self'
    case 113:                       // 'descending'
    case 118:                       // 'div'
    case 122:                       // 'else'
    case 123:                       // 'empty'
    case 125:                       // 'encoding'
    case 126:                       // 'end'
    case 128:                       // 'eq'
    case 129:                       // 'every'
    case 131:                       // 'except'
    case 132:                       // 'exit'
    case 133:                       // 'external'
    case 134:                       // 'first'
    case 135:                       // 'following'
    case 136:                       // 'following-sibling'
    case 137:                       // 'for'
    case 141:                       // 'ft-option'
    case 146:                       // 'ge'
    case 148:                       // 'group'
    case 150:                       // 'gt'
    case 151:                       // 'idiv'
    case 153:                       // 'import'
    case 154:                       // 'in'
    case 155:                       // 'index'
    case 159:                       // 'insert'
    case 160:                       // 'instance'
    case 161:                       // 'integrity'
    case 162:                       // 'intersect'
    case 163:                       // 'into'
    case 164:                       // 'is'
    case 170:                       // 'last'
    case 171:                       // 'lax'
    case 172:                       // 'le'
    case 174:                       // 'let'
    case 176:                       // 'loop'
    case 178:                       // 'lt'
    case 180:                       // 'mod'
    case 181:                       // 'modify'
    case 182:                       // 'module'
    case 186:                       // 'ne'
    case 192:                       // 'nodes'
    case 198:                       // 'only'
    case 199:                       // 'option'
    case 200:                       // 'or'
    case 201:                       // 'order'
    case 203:                       // 'ordering'
    case 206:                       // 'parent'
    case 212:                       // 'preceding'
    case 213:                       // 'preceding-sibling'
    case 218:                       // 'rename'
    case 219:                       // 'replace'
    case 220:                       // 'return'
    case 221:                       // 'returning'
    case 222:                       // 'revalidation'
    case 224:                       // 'satisfies'
    case 225:                       // 'schema'
    case 228:                       // 'score'
    case 229:                       // 'self'
    case 234:                       // 'sliding'
    case 235:                       // 'some'
    case 236:                       // 'stable'
    case 237:                       // 'start'
    case 240:                       // 'strict'
    case 248:                       // 'to'
    case 249:                       // 'treat'
    case 250:                       // 'try'
    case 251:                       // 'tumbling'
    case 252:                       // 'type'
    case 254:                       // 'union'
    case 257:                       // 'updating'
    case 260:                       // 'validate'
    case 261:                       // 'value'
    case 262:                       // 'variable'
    case 263:                       // 'version'
    case 266:                       // 'where'
    case 267:                       // 'while'
    case 270:                       // 'with'
    case 274:                       // 'xquery'
      lookahead2W(122);             // S^WS | '#' | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    if (lk == 2836                  // '{' Wildcard
     || lk == 3348                  // '{' EQName^Token
     || lk == 4372                  // '{' IntegerLiteral
     || lk == 4884                  // '{' DecimalLiteral
     || lk == 5396                  // '{' DoubleLiteral
     || lk == 5908                  // '{' StringLiteral
     || lk == 16148                 // '{' '$'
     || lk == 16660                 // '{' '%'
     || lk == 17684                 // '{' '('
     || lk == 18196                 // '{' '(#'
     || lk == 20756                 // '{' '+'
     || lk == 21780                 // '{' '-'
     || lk == 22804                 // '{' '.'
     || lk == 23316                 // '{' '..'
     || lk == 23828                 // '{' '/'
     || lk == 24340                 // '{' '//'
     || lk == 27924                 // '{' '<'
     || lk == 28436                 // '{' '<!--'
     || lk == 30484                 // '{' '<?'
     || lk == 34068                 // '{' '@'
     || lk == 35092                 // '{' '['
     || lk == 36116                 // '{' 'after'
     || lk == 37140                 // '{' 'allowing'
     || lk == 37652                 // '{' 'ancestor'
     || lk == 38164                 // '{' 'ancestor-or-self'
     || lk == 38676                 // '{' 'and'
     || lk == 39700                 // '{' 'append'
     || lk == 40724                 // '{' 'as'
     || lk == 41236                 // '{' 'ascending'
     || lk == 41748                 // '{' 'at'
     || lk == 42260                 // '{' 'attribute'
     || lk == 42772                 // '{' 'base-uri'
     || lk == 43284                 // '{' 'before'
     || lk == 43796                 // '{' 'boundary-space'
     || lk == 44308                 // '{' 'break'
     || lk == 45332                 // '{' 'case'
     || lk == 45844                 // '{' 'cast'
     || lk == 46356                 // '{' 'castable'
     || lk == 46868                 // '{' 'catch'
     || lk == 47892                 // '{' 'child'
     || lk == 48404                 // '{' 'collation'
     || lk == 49428                 // '{' 'comment'
     || lk == 49940                 // '{' 'constraint'
     || lk == 50452                 // '{' 'construction'
     || lk == 51988                 // '{' 'context'
     || lk == 52500                 // '{' 'continue'
     || lk == 53012                 // '{' 'copy'
     || lk == 53524                 // '{' 'copy-namespaces'
     || lk == 54036                 // '{' 'count'
     || lk == 54548                 // '{' 'decimal-format'
     || lk == 55572                 // '{' 'declare'
     || lk == 56084                 // '{' 'default'
     || lk == 56596                 // '{' 'delete'
     || lk == 57108                 // '{' 'descendant'
     || lk == 57620                 // '{' 'descendant-or-self'
     || lk == 58132                 // '{' 'descending'
     || lk == 60692                 // '{' 'div'
     || lk == 61204                 // '{' 'document'
     || lk == 61716                 // '{' 'document-node'
     || lk == 62228                 // '{' 'element'
     || lk == 62740                 // '{' 'else'
     || lk == 63252                 // '{' 'empty'
     || lk == 63764                 // '{' 'empty-sequence'
     || lk == 64276                 // '{' 'encoding'
     || lk == 64788                 // '{' 'end'
     || lk == 65812                 // '{' 'eq'
     || lk == 66324                 // '{' 'every'
     || lk == 67348                 // '{' 'except'
     || lk == 67860                 // '{' 'exit'
     || lk == 68372                 // '{' 'external'
     || lk == 68884                 // '{' 'first'
     || lk == 69396                 // '{' 'following'
     || lk == 69908                 // '{' 'following-sibling'
     || lk == 70420                 // '{' 'for'
     || lk == 72468                 // '{' 'ft-option'
     || lk == 74516                 // '{' 'function'
     || lk == 75028                 // '{' 'ge'
     || lk == 76052                 // '{' 'group'
     || lk == 77076                 // '{' 'gt'
     || lk == 77588                 // '{' 'idiv'
     || lk == 78100                 // '{' 'if'
     || lk == 78612                 // '{' 'import'
     || lk == 79124                 // '{' 'in'
     || lk == 79636                 // '{' 'index'
     || lk == 81684                 // '{' 'insert'
     || lk == 82196                 // '{' 'instance'
     || lk == 82708                 // '{' 'integrity'
     || lk == 83220                 // '{' 'intersect'
     || lk == 83732                 // '{' 'into'
     || lk == 84244                 // '{' 'is'
     || lk == 84756                 // '{' 'item'
     || lk == 87316                 // '{' 'last'
     || lk == 87828                 // '{' 'lax'
     || lk == 88340                 // '{' 'le'
     || lk == 89364                 // '{' 'let'
     || lk == 90388                 // '{' 'loop'
     || lk == 91412                 // '{' 'lt'
     || lk == 92436                 // '{' 'mod'
     || lk == 92948                 // '{' 'modify'
     || lk == 93460                 // '{' 'module'
     || lk == 94484                 // '{' 'namespace'
     || lk == 94996                 // '{' 'namespace-node'
     || lk == 95508                 // '{' 'ne'
     || lk == 98068                 // '{' 'node'
     || lk == 98580                 // '{' 'nodes'
     || lk == 101652                // '{' 'only'
     || lk == 102164                // '{' 'option'
     || lk == 102676                // '{' 'or'
     || lk == 103188                // '{' 'order'
     || lk == 103700                // '{' 'ordered'
     || lk == 104212                // '{' 'ordering'
     || lk == 105748                // '{' 'parent'
     || lk == 108820                // '{' 'preceding'
     || lk == 109332                // '{' 'preceding-sibling'
     || lk == 110868                // '{' 'processing-instruction'
     || lk == 111892                // '{' 'rename'
     || lk == 112404                // '{' 'replace'
     || lk == 112916                // '{' 'return'
     || lk == 113428                // '{' 'returning'
     || lk == 113940                // '{' 'revalidation'
     || lk == 114964                // '{' 'satisfies'
     || lk == 115476                // '{' 'schema'
     || lk == 115988                // '{' 'schema-attribute'
     || lk == 116500                // '{' 'schema-element'
     || lk == 117012                // '{' 'score'
     || lk == 117524                // '{' 'self'
     || lk == 120084                // '{' 'sliding'
     || lk == 120596                // '{' 'some'
     || lk == 121108                // '{' 'stable'
     || lk == 121620                // '{' 'start'
     || lk == 123156                // '{' 'strict'
     || lk == 124692                // '{' 'switch'
     || lk == 125204                // '{' 'text'
     || lk == 127252                // '{' 'to'
     || lk == 127764                // '{' 'treat'
     || lk == 128276                // '{' 'try'
     || lk == 128788                // '{' 'tumbling'
     || lk == 129300                // '{' 'type'
     || lk == 129812                // '{' 'typeswitch'
     || lk == 130324                // '{' 'union'
     || lk == 131348                // '{' 'unordered'
     || lk == 131860                // '{' 'updating'
     || lk == 133396                // '{' 'validate'
     || lk == 133908                // '{' 'value'
     || lk == 134420                // '{' 'variable'
     || lk == 134932                // '{' 'version'
     || lk == 136468                // '{' 'where'
     || lk == 136980                // '{' 'while'
     || lk == 138516                // '{' 'with'
     || lk == 140564                // '{' 'xquery'
     || lk == 141588                // '{' '{'
     || lk == 142612                // '{' '{|'
     || lk == 144660)               // '{' '}'
    {
      lk = memoized(11, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_BlockExpr();
          lk = -10;
        }
        catch (p10A)
        {
          lk = -11;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(11, e0, lk);
      }
    }
    switch (lk)
    {
    case 8:                         // IntegerLiteral
    case 9:                         // DecimalLiteral
    case 10:                        // DoubleLiteral
    case 11:                        // StringLiteral
      parse_Literal();
      break;
    case 31:                        // '$'
      parse_VarRef();
      break;
    case 34:                        // '('
      parse_ParenthesizedExpr();
      break;
    case 44:                        // '.'
      parse_ContextItemExpr();
      break;
    case 17414:                     // EQName^Token '('
    case 17478:                     // 'after' '('
    case 17480:                     // 'allowing' '('
    case 17481:                     // 'ancestor' '('
    case 17482:                     // 'ancestor-or-self' '('
    case 17483:                     // 'and' '('
    case 17487:                     // 'as' '('
    case 17488:                     // 'ascending' '('
    case 17489:                     // 'at' '('
    case 17491:                     // 'base-uri' '('
    case 17492:                     // 'before' '('
    case 17493:                     // 'boundary-space' '('
    case 17494:                     // 'break' '('
    case 17496:                     // 'case' '('
    case 17497:                     // 'cast' '('
    case 17498:                     // 'castable' '('
    case 17499:                     // 'catch' '('
    case 17501:                     // 'child' '('
    case 17502:                     // 'collation' '('
    case 17505:                     // 'constraint' '('
    case 17506:                     // 'construction' '('
    case 17509:                     // 'context' '('
    case 17510:                     // 'continue' '('
    case 17511:                     // 'copy' '('
    case 17512:                     // 'copy-namespaces' '('
    case 17513:                     // 'count' '('
    case 17514:                     // 'decimal-format' '('
    case 17516:                     // 'declare' '('
    case 17517:                     // 'default' '('
    case 17518:                     // 'delete' '('
    case 17519:                     // 'descendant' '('
    case 17520:                     // 'descendant-or-self' '('
    case 17521:                     // 'descending' '('
    case 17526:                     // 'div' '('
    case 17527:                     // 'document' '('
    case 17530:                     // 'else' '('
    case 17531:                     // 'empty' '('
    case 17533:                     // 'encoding' '('
    case 17534:                     // 'end' '('
    case 17536:                     // 'eq' '('
    case 17537:                     // 'every' '('
    case 17539:                     // 'except' '('
    case 17540:                     // 'exit' '('
    case 17541:                     // 'external' '('
    case 17542:                     // 'first' '('
    case 17543:                     // 'following' '('
    case 17544:                     // 'following-sibling' '('
    case 17545:                     // 'for' '('
    case 17549:                     // 'ft-option' '('
    case 17554:                     // 'ge' '('
    case 17556:                     // 'group' '('
    case 17558:                     // 'gt' '('
    case 17559:                     // 'idiv' '('
    case 17561:                     // 'import' '('
    case 17562:                     // 'in' '('
    case 17563:                     // 'index' '('
    case 17567:                     // 'insert' '('
    case 17568:                     // 'instance' '('
    case 17569:                     // 'integrity' '('
    case 17570:                     // 'intersect' '('
    case 17571:                     // 'into' '('
    case 17572:                     // 'is' '('
    case 17578:                     // 'last' '('
    case 17579:                     // 'lax' '('
    case 17580:                     // 'le' '('
    case 17582:                     // 'let' '('
    case 17584:                     // 'loop' '('
    case 17586:                     // 'lt' '('
    case 17588:                     // 'mod' '('
    case 17589:                     // 'modify' '('
    case 17590:                     // 'module' '('
    case 17592:                     // 'namespace' '('
    case 17594:                     // 'ne' '('
    case 17600:                     // 'nodes' '('
    case 17606:                     // 'only' '('
    case 17607:                     // 'option' '('
    case 17608:                     // 'or' '('
    case 17609:                     // 'order' '('
    case 17610:                     // 'ordered' '('
    case 17611:                     // 'ordering' '('
    case 17614:                     // 'parent' '('
    case 17620:                     // 'preceding' '('
    case 17621:                     // 'preceding-sibling' '('
    case 17626:                     // 'rename' '('
    case 17627:                     // 'replace' '('
    case 17628:                     // 'return' '('
    case 17629:                     // 'returning' '('
    case 17630:                     // 'revalidation' '('
    case 17632:                     // 'satisfies' '('
    case 17633:                     // 'schema' '('
    case 17636:                     // 'score' '('
    case 17637:                     // 'self' '('
    case 17642:                     // 'sliding' '('
    case 17643:                     // 'some' '('
    case 17644:                     // 'stable' '('
    case 17645:                     // 'start' '('
    case 17648:                     // 'strict' '('
    case 17656:                     // 'to' '('
    case 17657:                     // 'treat' '('
    case 17658:                     // 'try' '('
    case 17659:                     // 'tumbling' '('
    case 17660:                     // 'type' '('
    case 17662:                     // 'union' '('
    case 17664:                     // 'unordered' '('
    case 17665:                     // 'updating' '('
    case 17668:                     // 'validate' '('
    case 17669:                     // 'value' '('
    case 17670:                     // 'variable' '('
    case 17671:                     // 'version' '('
    case 17674:                     // 'where' '('
    case 17675:                     // 'while' '('
    case 17678:                     // 'with' '('
    case 17682:                     // 'xquery' '('
      parse_FunctionCall();
      break;
    case 141514:                    // 'ordered' '{'
      parse_OrderedExpr();
      break;
    case 141568:                    // 'unordered' '{'
      parse_UnorderedExpr();
      break;
    case 32:                        // '%'
    case 120:                       // 'document-node'
    case 124:                       // 'empty-sequence'
    case 145:                       // 'function'
    case 152:                       // 'if'
    case 165:                       // 'item'
    case 185:                       // 'namespace-node'
    case 191:                       // 'node'
    case 226:                       // 'schema-attribute'
    case 227:                       // 'schema-element'
    case 243:                       // 'switch'
    case 253:                       // 'typeswitch'
    case 14854:                     // EQName^Token '#'
    case 14918:                     // 'after' '#'
    case 14920:                     // 'allowing' '#'
    case 14921:                     // 'ancestor' '#'
    case 14922:                     // 'ancestor-or-self' '#'
    case 14923:                     // 'and' '#'
    case 14927:                     // 'as' '#'
    case 14928:                     // 'ascending' '#'
    case 14929:                     // 'at' '#'
    case 14930:                     // 'attribute' '#'
    case 14931:                     // 'base-uri' '#'
    case 14932:                     // 'before' '#'
    case 14933:                     // 'boundary-space' '#'
    case 14934:                     // 'break' '#'
    case 14936:                     // 'case' '#'
    case 14937:                     // 'cast' '#'
    case 14938:                     // 'castable' '#'
    case 14939:                     // 'catch' '#'
    case 14941:                     // 'child' '#'
    case 14942:                     // 'collation' '#'
    case 14944:                     // 'comment' '#'
    case 14945:                     // 'constraint' '#'
    case 14946:                     // 'construction' '#'
    case 14949:                     // 'context' '#'
    case 14950:                     // 'continue' '#'
    case 14951:                     // 'copy' '#'
    case 14952:                     // 'copy-namespaces' '#'
    case 14953:                     // 'count' '#'
    case 14954:                     // 'decimal-format' '#'
    case 14956:                     // 'declare' '#'
    case 14957:                     // 'default' '#'
    case 14958:                     // 'delete' '#'
    case 14959:                     // 'descendant' '#'
    case 14960:                     // 'descendant-or-self' '#'
    case 14961:                     // 'descending' '#'
    case 14966:                     // 'div' '#'
    case 14967:                     // 'document' '#'
    case 14969:                     // 'element' '#'
    case 14970:                     // 'else' '#'
    case 14971:                     // 'empty' '#'
    case 14973:                     // 'encoding' '#'
    case 14974:                     // 'end' '#'
    case 14976:                     // 'eq' '#'
    case 14977:                     // 'every' '#'
    case 14979:                     // 'except' '#'
    case 14980:                     // 'exit' '#'
    case 14981:                     // 'external' '#'
    case 14982:                     // 'first' '#'
    case 14983:                     // 'following' '#'
    case 14984:                     // 'following-sibling' '#'
    case 14985:                     // 'for' '#'
    case 14989:                     // 'ft-option' '#'
    case 14994:                     // 'ge' '#'
    case 14996:                     // 'group' '#'
    case 14998:                     // 'gt' '#'
    case 14999:                     // 'idiv' '#'
    case 15001:                     // 'import' '#'
    case 15002:                     // 'in' '#'
    case 15003:                     // 'index' '#'
    case 15007:                     // 'insert' '#'
    case 15008:                     // 'instance' '#'
    case 15009:                     // 'integrity' '#'
    case 15010:                     // 'intersect' '#'
    case 15011:                     // 'into' '#'
    case 15012:                     // 'is' '#'
    case 15018:                     // 'last' '#'
    case 15019:                     // 'lax' '#'
    case 15020:                     // 'le' '#'
    case 15022:                     // 'let' '#'
    case 15024:                     // 'loop' '#'
    case 15026:                     // 'lt' '#'
    case 15028:                     // 'mod' '#'
    case 15029:                     // 'modify' '#'
    case 15030:                     // 'module' '#'
    case 15032:                     // 'namespace' '#'
    case 15034:                     // 'ne' '#'
    case 15040:                     // 'nodes' '#'
    case 15046:                     // 'only' '#'
    case 15047:                     // 'option' '#'
    case 15048:                     // 'or' '#'
    case 15049:                     // 'order' '#'
    case 15050:                     // 'ordered' '#'
    case 15051:                     // 'ordering' '#'
    case 15054:                     // 'parent' '#'
    case 15060:                     // 'preceding' '#'
    case 15061:                     // 'preceding-sibling' '#'
    case 15064:                     // 'processing-instruction' '#'
    case 15066:                     // 'rename' '#'
    case 15067:                     // 'replace' '#'
    case 15068:                     // 'return' '#'
    case 15069:                     // 'returning' '#'
    case 15070:                     // 'revalidation' '#'
    case 15072:                     // 'satisfies' '#'
    case 15073:                     // 'schema' '#'
    case 15076:                     // 'score' '#'
    case 15077:                     // 'self' '#'
    case 15082:                     // 'sliding' '#'
    case 15083:                     // 'some' '#'
    case 15084:                     // 'stable' '#'
    case 15085:                     // 'start' '#'
    case 15088:                     // 'strict' '#'
    case 15092:                     // 'text' '#'
    case 15096:                     // 'to' '#'
    case 15097:                     // 'treat' '#'
    case 15098:                     // 'try' '#'
    case 15099:                     // 'tumbling' '#'
    case 15100:                     // 'type' '#'
    case 15102:                     // 'union' '#'
    case 15104:                     // 'unordered' '#'
    case 15105:                     // 'updating' '#'
    case 15108:                     // 'validate' '#'
    case 15109:                     // 'value' '#'
    case 15110:                     // 'variable' '#'
    case 15111:                     // 'version' '#'
    case 15114:                     // 'where' '#'
    case 15115:                     // 'while' '#'
    case 15118:                     // 'with' '#'
    case 15122:                     // 'xquery' '#'
      parse_FunctionItemExpr();
      break;
    case -10:
      parse_BlockExpr();
      break;
    case -11:
      parse_ObjectConstructor();
      break;
    case 68:                        // '['
      parse_ArrayConstructor();
      break;
    case 278:                       // '{|'
      parse_JSONSimpleObjectUnion();
      break;
    default:
      parse_Constructor();
    }
    endNonterminal("PrimaryExpr");
  }

  function try_PrimaryExpr()
  {
    lookahead1W(318);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(:' | '.' | '<' | '<!--' | '<?' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' |
                                    // 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    switch (l1)
    {
    case 184:                       // 'namespace'
      lookahead2W(314);             // NCName^Token | S^WS | '#' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
      break;
    case 216:                       // 'processing-instruction'
      lookahead2W(313);             // NCName^Token | S^WS | '#' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
      break;
    case 276:                       // '{'
      lookahead2W(328);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|' | '}'
      break;
    case 82:                        // 'attribute'
    case 121:                       // 'element'
      lookahead2W(310);             // EQName^Token | S^WS | '#' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
      break;
    case 96:                        // 'comment'
    case 244:                       // 'text'
      lookahead2W(123);             // S^WS | '#' | '(:' | '{'
      break;
    case 119:                       // 'document'
    case 202:                       // 'ordered'
    case 256:                       // 'unordered'
      lookahead2W(171);             // S^WS | '#' | '(' | '(:' | '{'
      break;
    case 6:                         // EQName^Token
    case 70:                        // 'after'
    case 72:                        // 'allowing'
    case 73:                        // 'ancestor'
    case 74:                        // 'ancestor-or-self'
    case 75:                        // 'and'
    case 79:                        // 'as'
    case 80:                        // 'ascending'
    case 81:                        // 'at'
    case 83:                        // 'base-uri'
    case 84:                        // 'before'
    case 85:                        // 'boundary-space'
    case 86:                        // 'break'
    case 88:                        // 'case'
    case 89:                        // 'cast'
    case 90:                        // 'castable'
    case 91:                        // 'catch'
    case 93:                        // 'child'
    case 94:                        // 'collation'
    case 97:                        // 'constraint'
    case 98:                        // 'construction'
    case 101:                       // 'context'
    case 102:                       // 'continue'
    case 103:                       // 'copy'
    case 104:                       // 'copy-namespaces'
    case 105:                       // 'count'
    case 106:                       // 'decimal-format'
    case 108:                       // 'declare'
    case 109:                       // 'default'
    case 110:                       // 'delete'
    case 111:                       // 'descendant'
    case 112:                       // 'descendant-or-self'
    case 113:                       // 'descending'
    case 118:                       // 'div'
    case 122:                       // 'else'
    case 123:                       // 'empty'
    case 125:                       // 'encoding'
    case 126:                       // 'end'
    case 128:                       // 'eq'
    case 129:                       // 'every'
    case 131:                       // 'except'
    case 132:                       // 'exit'
    case 133:                       // 'external'
    case 134:                       // 'first'
    case 135:                       // 'following'
    case 136:                       // 'following-sibling'
    case 137:                       // 'for'
    case 141:                       // 'ft-option'
    case 146:                       // 'ge'
    case 148:                       // 'group'
    case 150:                       // 'gt'
    case 151:                       // 'idiv'
    case 153:                       // 'import'
    case 154:                       // 'in'
    case 155:                       // 'index'
    case 159:                       // 'insert'
    case 160:                       // 'instance'
    case 161:                       // 'integrity'
    case 162:                       // 'intersect'
    case 163:                       // 'into'
    case 164:                       // 'is'
    case 170:                       // 'last'
    case 171:                       // 'lax'
    case 172:                       // 'le'
    case 174:                       // 'let'
    case 176:                       // 'loop'
    case 178:                       // 'lt'
    case 180:                       // 'mod'
    case 181:                       // 'modify'
    case 182:                       // 'module'
    case 186:                       // 'ne'
    case 192:                       // 'nodes'
    case 198:                       // 'only'
    case 199:                       // 'option'
    case 200:                       // 'or'
    case 201:                       // 'order'
    case 203:                       // 'ordering'
    case 206:                       // 'parent'
    case 212:                       // 'preceding'
    case 213:                       // 'preceding-sibling'
    case 218:                       // 'rename'
    case 219:                       // 'replace'
    case 220:                       // 'return'
    case 221:                       // 'returning'
    case 222:                       // 'revalidation'
    case 224:                       // 'satisfies'
    case 225:                       // 'schema'
    case 228:                       // 'score'
    case 229:                       // 'self'
    case 234:                       // 'sliding'
    case 235:                       // 'some'
    case 236:                       // 'stable'
    case 237:                       // 'start'
    case 240:                       // 'strict'
    case 248:                       // 'to'
    case 249:                       // 'treat'
    case 250:                       // 'try'
    case 251:                       // 'tumbling'
    case 252:                       // 'type'
    case 254:                       // 'union'
    case 257:                       // 'updating'
    case 260:                       // 'validate'
    case 261:                       // 'value'
    case 262:                       // 'variable'
    case 263:                       // 'version'
    case 266:                       // 'where'
    case 267:                       // 'while'
    case 270:                       // 'with'
    case 274:                       // 'xquery'
      lookahead2W(122);             // S^WS | '#' | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    if (lk == 2836                  // '{' Wildcard
     || lk == 3348                  // '{' EQName^Token
     || lk == 4372                  // '{' IntegerLiteral
     || lk == 4884                  // '{' DecimalLiteral
     || lk == 5396                  // '{' DoubleLiteral
     || lk == 5908                  // '{' StringLiteral
     || lk == 16148                 // '{' '$'
     || lk == 16660                 // '{' '%'
     || lk == 17684                 // '{' '('
     || lk == 18196                 // '{' '(#'
     || lk == 20756                 // '{' '+'
     || lk == 21780                 // '{' '-'
     || lk == 22804                 // '{' '.'
     || lk == 23316                 // '{' '..'
     || lk == 23828                 // '{' '/'
     || lk == 24340                 // '{' '//'
     || lk == 27924                 // '{' '<'
     || lk == 28436                 // '{' '<!--'
     || lk == 30484                 // '{' '<?'
     || lk == 34068                 // '{' '@'
     || lk == 35092                 // '{' '['
     || lk == 36116                 // '{' 'after'
     || lk == 37140                 // '{' 'allowing'
     || lk == 37652                 // '{' 'ancestor'
     || lk == 38164                 // '{' 'ancestor-or-self'
     || lk == 38676                 // '{' 'and'
     || lk == 39700                 // '{' 'append'
     || lk == 40724                 // '{' 'as'
     || lk == 41236                 // '{' 'ascending'
     || lk == 41748                 // '{' 'at'
     || lk == 42260                 // '{' 'attribute'
     || lk == 42772                 // '{' 'base-uri'
     || lk == 43284                 // '{' 'before'
     || lk == 43796                 // '{' 'boundary-space'
     || lk == 44308                 // '{' 'break'
     || lk == 45332                 // '{' 'case'
     || lk == 45844                 // '{' 'cast'
     || lk == 46356                 // '{' 'castable'
     || lk == 46868                 // '{' 'catch'
     || lk == 47892                 // '{' 'child'
     || lk == 48404                 // '{' 'collation'
     || lk == 49428                 // '{' 'comment'
     || lk == 49940                 // '{' 'constraint'
     || lk == 50452                 // '{' 'construction'
     || lk == 51988                 // '{' 'context'
     || lk == 52500                 // '{' 'continue'
     || lk == 53012                 // '{' 'copy'
     || lk == 53524                 // '{' 'copy-namespaces'
     || lk == 54036                 // '{' 'count'
     || lk == 54548                 // '{' 'decimal-format'
     || lk == 55572                 // '{' 'declare'
     || lk == 56084                 // '{' 'default'
     || lk == 56596                 // '{' 'delete'
     || lk == 57108                 // '{' 'descendant'
     || lk == 57620                 // '{' 'descendant-or-self'
     || lk == 58132                 // '{' 'descending'
     || lk == 60692                 // '{' 'div'
     || lk == 61204                 // '{' 'document'
     || lk == 61716                 // '{' 'document-node'
     || lk == 62228                 // '{' 'element'
     || lk == 62740                 // '{' 'else'
     || lk == 63252                 // '{' 'empty'
     || lk == 63764                 // '{' 'empty-sequence'
     || lk == 64276                 // '{' 'encoding'
     || lk == 64788                 // '{' 'end'
     || lk == 65812                 // '{' 'eq'
     || lk == 66324                 // '{' 'every'
     || lk == 67348                 // '{' 'except'
     || lk == 67860                 // '{' 'exit'
     || lk == 68372                 // '{' 'external'
     || lk == 68884                 // '{' 'first'
     || lk == 69396                 // '{' 'following'
     || lk == 69908                 // '{' 'following-sibling'
     || lk == 70420                 // '{' 'for'
     || lk == 72468                 // '{' 'ft-option'
     || lk == 74516                 // '{' 'function'
     || lk == 75028                 // '{' 'ge'
     || lk == 76052                 // '{' 'group'
     || lk == 77076                 // '{' 'gt'
     || lk == 77588                 // '{' 'idiv'
     || lk == 78100                 // '{' 'if'
     || lk == 78612                 // '{' 'import'
     || lk == 79124                 // '{' 'in'
     || lk == 79636                 // '{' 'index'
     || lk == 81684                 // '{' 'insert'
     || lk == 82196                 // '{' 'instance'
     || lk == 82708                 // '{' 'integrity'
     || lk == 83220                 // '{' 'intersect'
     || lk == 83732                 // '{' 'into'
     || lk == 84244                 // '{' 'is'
     || lk == 84756                 // '{' 'item'
     || lk == 87316                 // '{' 'last'
     || lk == 87828                 // '{' 'lax'
     || lk == 88340                 // '{' 'le'
     || lk == 89364                 // '{' 'let'
     || lk == 90388                 // '{' 'loop'
     || lk == 91412                 // '{' 'lt'
     || lk == 92436                 // '{' 'mod'
     || lk == 92948                 // '{' 'modify'
     || lk == 93460                 // '{' 'module'
     || lk == 94484                 // '{' 'namespace'
     || lk == 94996                 // '{' 'namespace-node'
     || lk == 95508                 // '{' 'ne'
     || lk == 98068                 // '{' 'node'
     || lk == 98580                 // '{' 'nodes'
     || lk == 101652                // '{' 'only'
     || lk == 102164                // '{' 'option'
     || lk == 102676                // '{' 'or'
     || lk == 103188                // '{' 'order'
     || lk == 103700                // '{' 'ordered'
     || lk == 104212                // '{' 'ordering'
     || lk == 105748                // '{' 'parent'
     || lk == 108820                // '{' 'preceding'
     || lk == 109332                // '{' 'preceding-sibling'
     || lk == 110868                // '{' 'processing-instruction'
     || lk == 111892                // '{' 'rename'
     || lk == 112404                // '{' 'replace'
     || lk == 112916                // '{' 'return'
     || lk == 113428                // '{' 'returning'
     || lk == 113940                // '{' 'revalidation'
     || lk == 114964                // '{' 'satisfies'
     || lk == 115476                // '{' 'schema'
     || lk == 115988                // '{' 'schema-attribute'
     || lk == 116500                // '{' 'schema-element'
     || lk == 117012                // '{' 'score'
     || lk == 117524                // '{' 'self'
     || lk == 120084                // '{' 'sliding'
     || lk == 120596                // '{' 'some'
     || lk == 121108                // '{' 'stable'
     || lk == 121620                // '{' 'start'
     || lk == 123156                // '{' 'strict'
     || lk == 124692                // '{' 'switch'
     || lk == 125204                // '{' 'text'
     || lk == 127252                // '{' 'to'
     || lk == 127764                // '{' 'treat'
     || lk == 128276                // '{' 'try'
     || lk == 128788                // '{' 'tumbling'
     || lk == 129300                // '{' 'type'
     || lk == 129812                // '{' 'typeswitch'
     || lk == 130324                // '{' 'union'
     || lk == 131348                // '{' 'unordered'
     || lk == 131860                // '{' 'updating'
     || lk == 133396                // '{' 'validate'
     || lk == 133908                // '{' 'value'
     || lk == 134420                // '{' 'variable'
     || lk == 134932                // '{' 'version'
     || lk == 136468                // '{' 'where'
     || lk == 136980                // '{' 'while'
     || lk == 138516                // '{' 'with'
     || lk == 140564                // '{' 'xquery'
     || lk == 141588                // '{' '{'
     || lk == 142612                // '{' '{|'
     || lk == 144660)               // '{' '}'
    {
      lk = memoized(11, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_BlockExpr();
          lk = -10;
        }
        catch (p10A)
        {
          lk = -11;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(11, e0, lk);
      }
    }
    switch (lk)
    {
    case 8:                         // IntegerLiteral
    case 9:                         // DecimalLiteral
    case 10:                        // DoubleLiteral
    case 11:                        // StringLiteral
      try_Literal();
      break;
    case 31:                        // '$'
      try_VarRef();
      break;
    case 34:                        // '('
      try_ParenthesizedExpr();
      break;
    case 44:                        // '.'
      try_ContextItemExpr();
      break;
    case 17414:                     // EQName^Token '('
    case 17478:                     // 'after' '('
    case 17480:                     // 'allowing' '('
    case 17481:                     // 'ancestor' '('
    case 17482:                     // 'ancestor-or-self' '('
    case 17483:                     // 'and' '('
    case 17487:                     // 'as' '('
    case 17488:                     // 'ascending' '('
    case 17489:                     // 'at' '('
    case 17491:                     // 'base-uri' '('
    case 17492:                     // 'before' '('
    case 17493:                     // 'boundary-space' '('
    case 17494:                     // 'break' '('
    case 17496:                     // 'case' '('
    case 17497:                     // 'cast' '('
    case 17498:                     // 'castable' '('
    case 17499:                     // 'catch' '('
    case 17501:                     // 'child' '('
    case 17502:                     // 'collation' '('
    case 17505:                     // 'constraint' '('
    case 17506:                     // 'construction' '('
    case 17509:                     // 'context' '('
    case 17510:                     // 'continue' '('
    case 17511:                     // 'copy' '('
    case 17512:                     // 'copy-namespaces' '('
    case 17513:                     // 'count' '('
    case 17514:                     // 'decimal-format' '('
    case 17516:                     // 'declare' '('
    case 17517:                     // 'default' '('
    case 17518:                     // 'delete' '('
    case 17519:                     // 'descendant' '('
    case 17520:                     // 'descendant-or-self' '('
    case 17521:                     // 'descending' '('
    case 17526:                     // 'div' '('
    case 17527:                     // 'document' '('
    case 17530:                     // 'else' '('
    case 17531:                     // 'empty' '('
    case 17533:                     // 'encoding' '('
    case 17534:                     // 'end' '('
    case 17536:                     // 'eq' '('
    case 17537:                     // 'every' '('
    case 17539:                     // 'except' '('
    case 17540:                     // 'exit' '('
    case 17541:                     // 'external' '('
    case 17542:                     // 'first' '('
    case 17543:                     // 'following' '('
    case 17544:                     // 'following-sibling' '('
    case 17545:                     // 'for' '('
    case 17549:                     // 'ft-option' '('
    case 17554:                     // 'ge' '('
    case 17556:                     // 'group' '('
    case 17558:                     // 'gt' '('
    case 17559:                     // 'idiv' '('
    case 17561:                     // 'import' '('
    case 17562:                     // 'in' '('
    case 17563:                     // 'index' '('
    case 17567:                     // 'insert' '('
    case 17568:                     // 'instance' '('
    case 17569:                     // 'integrity' '('
    case 17570:                     // 'intersect' '('
    case 17571:                     // 'into' '('
    case 17572:                     // 'is' '('
    case 17578:                     // 'last' '('
    case 17579:                     // 'lax' '('
    case 17580:                     // 'le' '('
    case 17582:                     // 'let' '('
    case 17584:                     // 'loop' '('
    case 17586:                     // 'lt' '('
    case 17588:                     // 'mod' '('
    case 17589:                     // 'modify' '('
    case 17590:                     // 'module' '('
    case 17592:                     // 'namespace' '('
    case 17594:                     // 'ne' '('
    case 17600:                     // 'nodes' '('
    case 17606:                     // 'only' '('
    case 17607:                     // 'option' '('
    case 17608:                     // 'or' '('
    case 17609:                     // 'order' '('
    case 17610:                     // 'ordered' '('
    case 17611:                     // 'ordering' '('
    case 17614:                     // 'parent' '('
    case 17620:                     // 'preceding' '('
    case 17621:                     // 'preceding-sibling' '('
    case 17626:                     // 'rename' '('
    case 17627:                     // 'replace' '('
    case 17628:                     // 'return' '('
    case 17629:                     // 'returning' '('
    case 17630:                     // 'revalidation' '('
    case 17632:                     // 'satisfies' '('
    case 17633:                     // 'schema' '('
    case 17636:                     // 'score' '('
    case 17637:                     // 'self' '('
    case 17642:                     // 'sliding' '('
    case 17643:                     // 'some' '('
    case 17644:                     // 'stable' '('
    case 17645:                     // 'start' '('
    case 17648:                     // 'strict' '('
    case 17656:                     // 'to' '('
    case 17657:                     // 'treat' '('
    case 17658:                     // 'try' '('
    case 17659:                     // 'tumbling' '('
    case 17660:                     // 'type' '('
    case 17662:                     // 'union' '('
    case 17664:                     // 'unordered' '('
    case 17665:                     // 'updating' '('
    case 17668:                     // 'validate' '('
    case 17669:                     // 'value' '('
    case 17670:                     // 'variable' '('
    case 17671:                     // 'version' '('
    case 17674:                     // 'where' '('
    case 17675:                     // 'while' '('
    case 17678:                     // 'with' '('
    case 17682:                     // 'xquery' '('
      try_FunctionCall();
      break;
    case 141514:                    // 'ordered' '{'
      try_OrderedExpr();
      break;
    case 141568:                    // 'unordered' '{'
      try_UnorderedExpr();
      break;
    case 32:                        // '%'
    case 120:                       // 'document-node'
    case 124:                       // 'empty-sequence'
    case 145:                       // 'function'
    case 152:                       // 'if'
    case 165:                       // 'item'
    case 185:                       // 'namespace-node'
    case 191:                       // 'node'
    case 226:                       // 'schema-attribute'
    case 227:                       // 'schema-element'
    case 243:                       // 'switch'
    case 253:                       // 'typeswitch'
    case 14854:                     // EQName^Token '#'
    case 14918:                     // 'after' '#'
    case 14920:                     // 'allowing' '#'
    case 14921:                     // 'ancestor' '#'
    case 14922:                     // 'ancestor-or-self' '#'
    case 14923:                     // 'and' '#'
    case 14927:                     // 'as' '#'
    case 14928:                     // 'ascending' '#'
    case 14929:                     // 'at' '#'
    case 14930:                     // 'attribute' '#'
    case 14931:                     // 'base-uri' '#'
    case 14932:                     // 'before' '#'
    case 14933:                     // 'boundary-space' '#'
    case 14934:                     // 'break' '#'
    case 14936:                     // 'case' '#'
    case 14937:                     // 'cast' '#'
    case 14938:                     // 'castable' '#'
    case 14939:                     // 'catch' '#'
    case 14941:                     // 'child' '#'
    case 14942:                     // 'collation' '#'
    case 14944:                     // 'comment' '#'
    case 14945:                     // 'constraint' '#'
    case 14946:                     // 'construction' '#'
    case 14949:                     // 'context' '#'
    case 14950:                     // 'continue' '#'
    case 14951:                     // 'copy' '#'
    case 14952:                     // 'copy-namespaces' '#'
    case 14953:                     // 'count' '#'
    case 14954:                     // 'decimal-format' '#'
    case 14956:                     // 'declare' '#'
    case 14957:                     // 'default' '#'
    case 14958:                     // 'delete' '#'
    case 14959:                     // 'descendant' '#'
    case 14960:                     // 'descendant-or-self' '#'
    case 14961:                     // 'descending' '#'
    case 14966:                     // 'div' '#'
    case 14967:                     // 'document' '#'
    case 14969:                     // 'element' '#'
    case 14970:                     // 'else' '#'
    case 14971:                     // 'empty' '#'
    case 14973:                     // 'encoding' '#'
    case 14974:                     // 'end' '#'
    case 14976:                     // 'eq' '#'
    case 14977:                     // 'every' '#'
    case 14979:                     // 'except' '#'
    case 14980:                     // 'exit' '#'
    case 14981:                     // 'external' '#'
    case 14982:                     // 'first' '#'
    case 14983:                     // 'following' '#'
    case 14984:                     // 'following-sibling' '#'
    case 14985:                     // 'for' '#'
    case 14989:                     // 'ft-option' '#'
    case 14994:                     // 'ge' '#'
    case 14996:                     // 'group' '#'
    case 14998:                     // 'gt' '#'
    case 14999:                     // 'idiv' '#'
    case 15001:                     // 'import' '#'
    case 15002:                     // 'in' '#'
    case 15003:                     // 'index' '#'
    case 15007:                     // 'insert' '#'
    case 15008:                     // 'instance' '#'
    case 15009:                     // 'integrity' '#'
    case 15010:                     // 'intersect' '#'
    case 15011:                     // 'into' '#'
    case 15012:                     // 'is' '#'
    case 15018:                     // 'last' '#'
    case 15019:                     // 'lax' '#'
    case 15020:                     // 'le' '#'
    case 15022:                     // 'let' '#'
    case 15024:                     // 'loop' '#'
    case 15026:                     // 'lt' '#'
    case 15028:                     // 'mod' '#'
    case 15029:                     // 'modify' '#'
    case 15030:                     // 'module' '#'
    case 15032:                     // 'namespace' '#'
    case 15034:                     // 'ne' '#'
    case 15040:                     // 'nodes' '#'
    case 15046:                     // 'only' '#'
    case 15047:                     // 'option' '#'
    case 15048:                     // 'or' '#'
    case 15049:                     // 'order' '#'
    case 15050:                     // 'ordered' '#'
    case 15051:                     // 'ordering' '#'
    case 15054:                     // 'parent' '#'
    case 15060:                     // 'preceding' '#'
    case 15061:                     // 'preceding-sibling' '#'
    case 15064:                     // 'processing-instruction' '#'
    case 15066:                     // 'rename' '#'
    case 15067:                     // 'replace' '#'
    case 15068:                     // 'return' '#'
    case 15069:                     // 'returning' '#'
    case 15070:                     // 'revalidation' '#'
    case 15072:                     // 'satisfies' '#'
    case 15073:                     // 'schema' '#'
    case 15076:                     // 'score' '#'
    case 15077:                     // 'self' '#'
    case 15082:                     // 'sliding' '#'
    case 15083:                     // 'some' '#'
    case 15084:                     // 'stable' '#'
    case 15085:                     // 'start' '#'
    case 15088:                     // 'strict' '#'
    case 15092:                     // 'text' '#'
    case 15096:                     // 'to' '#'
    case 15097:                     // 'treat' '#'
    case 15098:                     // 'try' '#'
    case 15099:                     // 'tumbling' '#'
    case 15100:                     // 'type' '#'
    case 15102:                     // 'union' '#'
    case 15104:                     // 'unordered' '#'
    case 15105:                     // 'updating' '#'
    case 15108:                     // 'validate' '#'
    case 15109:                     // 'value' '#'
    case 15110:                     // 'variable' '#'
    case 15111:                     // 'version' '#'
    case 15114:                     // 'where' '#'
    case 15115:                     // 'while' '#'
    case 15118:                     // 'with' '#'
    case 15122:                     // 'xquery' '#'
      try_FunctionItemExpr();
      break;
    case -10:
      try_BlockExpr();
      break;
    case -11:
      try_ObjectConstructor();
      break;
    case 68:                        // '['
      try_ArrayConstructor();
      break;
    case 278:                       // '{|'
      try_JSONSimpleObjectUnion();
      break;
    default:
      try_Constructor();
    }
  }

  function parse_JSONSimpleObjectUnion()
  {
    startNonterminal("JSONSimpleObjectUnion");
    shift(278);                     // '{|'
    lookahead1W(327);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|' | '|}'
    if (l1 != 281)                  // '|}'
    {
      parse_Expr();
    }
    lookahead1W(114);               // S^WS | '(:' | '|}'
    shift(281);                     // '|}'
    endNonterminal("JSONSimpleObjectUnion");
  }

  function try_JSONSimpleObjectUnion()
  {
    shiftT(278);                    // '{|'
    lookahead1W(327);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|' | '|}'
    if (l1 != 281)                  // '|}'
    {
      try_Expr();
    }
    lookahead1W(114);               // S^WS | '(:' | '|}'
    shiftT(281);                    // '|}'
  }

  function parse_ObjectConstructor()
  {
    startNonterminal("ObjectConstructor");
    shift(276);                     // '{'
    lookahead1W(328);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|' | '}'
    if (l1 != 282)                  // '}'
    {
      parse_PairConstructor();
      for (;;)
      {
        lookahead1W(134);           // S^WS | '(:' | ',' | '}'
        if (l1 != 41)               // ','
        {
          break;
        }
        shift(41);                  // ','
        lookahead1W(37);            // EPSILON | S^WS | '(:'
        parse_PairConstructor();
      }
    }
    lookahead1W(115);               // S^WS | '(:' | '}'
    shift(282);                     // '}'
    endNonterminal("ObjectConstructor");
  }

  function try_ObjectConstructor()
  {
    shiftT(276);                    // '{'
    lookahead1W(328);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|' | '}'
    if (l1 != 282)                  // '}'
    {
      try_PairConstructor();
      for (;;)
      {
        lookahead1W(134);           // S^WS | '(:' | ',' | '}'
        if (l1 != 41)               // ','
        {
          break;
        }
        shiftT(41);                 // ','
        lookahead1W(37);            // EPSILON | S^WS | '(:'
        try_PairConstructor();
      }
    }
    lookahead1W(115);               // S^WS | '(:' | '}'
    shiftT(282);                    // '}'
  }

  function parse_PairConstructor()
  {
    startNonterminal("PairConstructor");
    parse_ExprSingle();
    lookahead1W(50);                // S^WS | '(:' | ':'
    shift(49);                      // ':'
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    parse_ExprSingle();
    endNonterminal("PairConstructor");
  }

  function try_PairConstructor()
  {
    try_ExprSingle();
    lookahead1W(50);                // S^WS | '(:' | ':'
    shiftT(49);                     // ':'
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    try_ExprSingle();
  }

  function parse_ArrayConstructor()
  {
    startNonterminal("ArrayConstructor");
    shift(68);                      // '['
    lookahead1W(326);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | ']' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    if (l1 != 69)                   // ']'
    {
      parse_Expr();
    }
    lookahead1W(55);                // S^WS | '(:' | ']'
    shift(69);                      // ']'
    endNonterminal("ArrayConstructor");
  }

  function try_ArrayConstructor()
  {
    shiftT(68);                     // '['
    lookahead1W(326);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | ']' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'last' |
                                    // 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '{|'
    if (l1 != 69)                   // ']'
    {
      try_Expr();
    }
    lookahead1W(55);                // S^WS | '(:' | ']'
    shiftT(69);                     // ']'
  }

  function parse_BlockExpr()
  {
    startNonterminal("BlockExpr");
    lookahead1(22);                 // '{'
    shift(276);                     // '{'
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    parse_StatementsAndOptionalExpr();
    lookahead1W(115);               // S^WS | '(:' | '}'
    shift(282);                     // '}'
    endNonterminal("BlockExpr");
  }

  function try_BlockExpr()
  {
    lookahead1(22);                 // '{'
    shiftT(276);                    // '{'
    lookahead1W(37);                // EPSILON | S^WS | '(:'
    try_StatementsAndOptionalExpr();
    lookahead1W(115);               // S^WS | '(:' | '}'
    shiftT(282);                    // '}'
  }

  function parse_FunctionDecl()
  {
    startNonterminal("FunctionDecl");
    shift(145);                     // 'function'
    lookahead1W(305);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    parse_EQName();
    lookahead1W(46);                // S^WS | '(' | '(:'
    shift(34);                      // '('
    lookahead1W(124);               // S^WS | '$' | '(:' | ')'
    if (l1 == 31)                   // '$'
    {
      parse_ParamList();
    }
    lookahead1W(47);                // S^WS | '(:' | ')'
    shift(37);                      // ')'
    lookahead1W(180);               // S^WS | '(:' | 'as' | 'external' | '{'
    if (l1 == 79)                   // 'as'
    {
      shift(79);                    // 'as'
      lookahead1W(37);              // EPSILON | S^WS | '(:'
      parse_SequenceType();
    }
    lookahead1W(151);               // S^WS | '(:' | 'external' | '{'
    switch (l1)
    {
    case 276:                       // '{'
      shift(276);                   // '{'
      lookahead1W(37);              // EPSILON | S^WS | '(:'
      parse_StatementsAndOptionalExpr();
      lookahead1W(115);             // S^WS | '(:' | '}'
      shift(282);                   // '}'
      break;
    default:
      shift(133);                   // 'external'
    }
    endNonterminal("FunctionDecl");
  }

  var lk, b0, e0;
  var l1, b1, e1;
  var l2, b2, e2;
  var bx, ex, sx, lx, tx;
  var memo;
  var delayedTag;

  var ast = null;
  var ptr = null;
 
  this.getAST = function() {
    return ast;
  }

  function createNode(name){
    return { name: name, children: [], getParent: null };
  }

  function pushNode(name){
    var node = createNode(name);
    node.begin = b1;
    if(ast === null) {
      ast = node;
      ptr = node;
    } else {
      node.getParent = ptr;
      ptr.children.push(node);
      ptr = ptr.children[ptr.children.length - 1];
    }
  }
  
  function popNode(){
    ptr.end = e1;
    if(ptr.getParent !== null) {
      ptr = ptr.getParent;
      for(var i in ptr.children) {
        delete ptr.children[i].getParent;
      }
    } else {
      delete ptr.getParent;
    }
  }
  
  function text(begin, end) {
    ptr.children.push({name: "TEXT", pos: { begin: begin, end: end }, value: input.substring(begin, end) });
  }

  function startNonterminal(tag)
  {
    if (delayedTag != null) pushNode(delayedTag);
    delayedTag = tag;
  }

  function endNonterminal(tag)
  {
    if (delayedTag != null)
      pushNode(tag);
    popNode();
    delayedTag = null;
  }

  function characters(input, b, e)
  {
    if (b < e)
    {
      if (delayedTag != null) pushNode(delayedTag);
      text(b, e);
      delayedTag = null;
    }
  };

/*
  function startNonterminal(tag)
  {
    if (delayedTag != null) writeOutput("<" + delayedTag + ">");
    delayedTag = tag;
  }

  function endNonterminal(tag)
  {
    if (delayedTag != null)
      writeOutput("<" + tag + "/>");
    else
      writeOutput("</" + tag + ">");
    delayedTag = null;
  }

  function characters(input, b, e)
  {
    if (b < e)
    {
      if (delayedTag != null) writeOutput("<" + delayedTag + ">");
      writeOutput(input.substring(b, e)
          .replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;"));
      delayedTag = null;
    }
  }
*/
  function terminal(tag, input, b, e)
  {
    if (tag.charAt(0) == '\'') tag = "TOKEN";
    startNonterminal(tag);
    characters(input, b, e);
    endNonterminal(tag);
  }

  function memoize(i, e, v)
  {
    memo[(e << 4) + i] = v;
  }

  function memoized(i, e)
  {
    var v = memo[(e << 4) + i];
    return typeof WScript != "undefined" ? v : 0;
  }

  function error(b, e, s, l, t)
  {
    if (e > ex)
    {
      bx = b;
      ex = e;
      sx = s;
      lx = l;
      tx = t;
    }
    flushOutput();
    throw new ParseException(bx, ex, sx, lx, tx);
  }

  function shift(t)
  {
    if (l1 == t)
    {
      if (e0 != b1)
      {
        characters(input, e0, b1);
      }
      terminal(TOKEN[l1], input, b1, e1 > size ? size : e1);
      b0 = b1; e0 = e1; l1 = l2; if (l1 != 0) {
      b1 = b2; e1 = e2; l2 = 0; }
    }
    else
    {
      error(b1, e1, 0, l1, t);
    }
  }

  function shiftT(t)
  {
    if (l1 == t)
    {
      b0 = b1; e0 = e1; l1 = l2; if (l1 != 0) {
      b1 = b2; e1 = e2; l2 = 0; }
    }
    else
    {
      error(b1, e1, 0, l1, t);
    }
  }

  function skip(code)
  {
    var b0W = b0; var e0W = e0; var l1W = l1;
    var b1W = b1; var e1W = e1;

    l1 = code; b1 = begin; e1 = end;
    l2 = 0;

    parse_Whitespace();

    b0 = b0W; e0 = e0W; l1 = l1W; if (l1 != 0) {
    b1 = b1W; e1 = e1W; }
  }

  function matchW(set)
  {
    var code;
    for (;;)
    {
      code = match(set);
      if (code != 22)               // S^WS
      {
        if (code != 36)             // '(:'
        {
          break;
        }
        skip(code);
      }
    }
    return code;
  }

  function lookahead1W(set)
  {
    if (l1 == 0)
    {
      l1 = matchW(set);
      b1 = begin;
      e1 = end;
    }
  }

  function lookahead2W(set)
  {
    if (l2 == 0)
    {
      l2 = matchW(set);
      b2 = begin;
      e2 = end;
    }
    lk = (l2 << 9) | l1;
  }

  function lookahead1(set)
  {
    if (l1 == 0)
    {
      l1 = match(set);
      b1 = begin;
      e1 = end;
    }
  }

  function lookahead2(set)
  {
    if (l2 == 0)
    {
      l2 = match(set);
      b2 = begin;
      e2 = end;
    }
    lk = (l2 << 9) | l1;
  }

  var input;
  var size;
  var begin;
  var end;
  var state;

  function match(tokenset)
  {
    var nonbmp = false;
    begin = end;
    var current = end;
    var result = INITIAL[tokenset];

    for (var code = result & 4095; code != 0; )
    {
      var charclass;
      var c0 = current < size ? input.charCodeAt(current) : 0;
      ++current;
      if (c0 < 0x80)
      {
        charclass = MAP0[c0];
      }
      else if (c0 < 0xd800)
      {
        var c1 = c0 >> 4;
        var c2 = c1 >> 5;
        charclass = MAP1[(c0 & 15) + MAP1[(c1 & 31) + MAP1[c2]]];
      }
      else
      {
        if (c0 < 0xdc00)
        {
          var c1 = current < size ? input.charCodeAt(current) : 0;
          if (c1 >= 0xdc00 && c1 < 0xe000)
          {
            ++current;
            c0 = ((c0 & 0x3ff) << 10) + (c1 & 0x3ff) + 0x10000;
            nonbmp = true;
          }
        }
        var lo = 0, hi = 5;
        for (var m = 3; ; m = (hi + lo) >> 1)
        {
          if (MAP2[m] > c0) hi = m - 1;
          else if (MAP2[6 + m] < c0) lo = m + 1;
          else {charclass = MAP2[12 + m]; break;}
          if (lo > hi) {charclass = 0; break;}
        }
      }

      state = code;
      var i0 = (charclass << 12) + code - 1;
      code = TRANSITION[(i0 & 15) + TRANSITION[i0 >> 4]];

      if (code > 4095)
      {
        result = code;
        code &= 4095;
        end = current;
      }
    }

    result >>= 12;
    if (result == 0)
    {
      end = current - 1;
      var c1 = end < size ? input.charCodeAt(end) : 0;
      if (c1 >= 0xdc00 && c1 < 0xe000) --end;
      error(begin, end, state, -1, -1);
    }

    if (nonbmp)
    {
      for (var i = result >> 9; i > 0; --i)
      {
        --end;
        var c1 = end < size ? input.charCodeAt(end) : 0;
        if (c1 >= 0xdc00 && c1 < 0xe000) --end;
      }
    }
    else
    {
      end -= result >> 9;
    }

    return (result & 511) - 1;
  }

  var writeOutput = typeof out      != "undefined" ? function(content) {out.print(content);}
                  : typeof WScript  != "undefined" ? function(content) {WScript.StdOut.write(content);}
                  : typeof document != "undefined" ? function(content)
                                                     {
                                                       document.write
                                                       (content.replace(/&/g, "&amp;")
                                                               .replace(/</g, "&lt;")
                                                               .replace(/>/g, "&gt;"));
                                                     }
                  :                                  function(content) {};
  var flushOutput = typeof out != "undefined" ? function() {out.flush();} : function() {}

  this.writeOutput = function(content) {writeOutput(content);}
  this.flushOutput = function() {flushOutput();}

  function getExpectedTokenSet(s)
  {
    var set = new Array;
    if (s > 0)
    {
      for (var i = 0; i < 284; i += 32)
      {
        var j = i;
        for (var f = ec(i >>> 5, s); f != 0; f >>>= 1, ++j)
        {
          if ((f & 1) != 0)
          {
            set[set.length] = TOKEN[j];
          }
        }
      }
    }
    return set;
  }

  function ec(t, s)
  {
    var i0 = t * 3220 + s - 1;
    var i1 = i0 >> 2;
    var i2 = i1 >> 2;
    var i3 = i2 >> 4;
    return EXPECTED[(i0 & 3) + EXPECTED[(i1 & 3) + EXPECTED[(i2 & 15) + EXPECTED[i3]]]];
  }

  var MAP0 =
  [
    /*   0 */ 70, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3,
    /*  35 */ 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 18, 19, 20, 21, 22,
    /*  63 */ 23, 24, 25, 26, 27, 28, 29, 26, 30, 30, 30, 30, 30, 31, 32, 33, 30, 30, 34, 30, 30, 35, 30, 30, 30, 36,
    /*  89 */ 30, 30, 37, 38, 39, 38, 30, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57,
    /* 115 */ 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 38, 38
  ];

  var MAP1 =
  [
    /*   0 */ 108, 124, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 156, 181, 181, 181, 181,
    /*  21 */ 181, 214, 215, 213, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
    /*  42 */ 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
    /*  63 */ 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
    /*  84 */ 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
    /* 105 */ 214, 214, 214, 247, 261, 277, 293, 309, 355, 371, 387, 423, 423, 423, 415, 339, 331, 339, 331, 339, 339,
    /* 126 */ 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 440, 440, 440, 440, 440, 440, 440,
    /* 147 */ 324, 339, 339, 339, 339, 339, 339, 339, 339, 401, 423, 423, 424, 422, 423, 423, 339, 339, 339, 339, 339,
    /* 168 */ 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 423, 423, 423, 423, 423, 423, 423, 423,
    /* 189 */ 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423,
    /* 210 */ 423, 423, 423, 338, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339,
    /* 231 */ 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 423, 70, 0, 0, 0, 0, 0, 0, 0,
    /* 255 */ 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,
    /* 289 */ 13, 14, 15, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29,
    /* 315 */ 26, 30, 30, 30, 30, 30, 31, 32, 33, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 38, 30, 30,
    /* 341 */ 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 34, 30, 30, 35, 30, 30, 30, 36, 30, 30, 37,
    /* 367 */ 38, 39, 38, 30, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,
    /* 393 */ 61, 62, 63, 64, 65, 66, 67, 68, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 30, 30, 38, 38, 38, 38,
    /* 419 */ 38, 38, 38, 69, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 69, 69, 69, 69, 69, 69,
    /* 445 */ 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69
  ];

  var MAP2 =
  [
    /*  0 */ 57344, 63744, 64976, 65008, 65536, 983040, 63743, 64975, 65007, 65533, 983039, 1114111, 38, 30, 38, 30, 30,
    /* 17 */ 38
  ];

  var INITIAL =
  [
    /*   0 */ 1, 12290, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28,
    /*  28 */ 29, 30, 31, 32, 33, 34, 35, 36, 37, 4125, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
    /*  54 */ 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79,
    /*  80 */ 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104,
    /* 105 */ 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125,
    /* 126 */ 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146,
    /* 147 */ 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167,
    /* 168 */ 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
    /* 189 */ 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209,
    /* 210 */ 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230,
    /* 231 */ 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
    /* 252 */ 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272,
    /* 273 */ 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293,
    /* 294 */ 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314,
    /* 315 */ 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335,
    /* 336 */ 336, 337, 338, 339
  ];

  var TRANSITION =
  [
    /*     0 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*    15 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*    30 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*    45 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*    60 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*    75 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*    90 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*   105 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*   120 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*   135 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*   150 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*   165 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*   180 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*   195 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*   210 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*   225 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*   240 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*   255 */ 18347, 28369, 45352, 28353, 18206, 18206, 18206, 18206, 18176, 18206, 18206, 18206, 18206, 18185, 18201,
    /*   270 */ 18206, 18206, 18206, 18206, 18211, 18206, 18206, 28366, 30719, 30785, 18347, 18347, 22160, 27057, 18347,
    /*   285 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*   300 */ 18347, 18347, 18347, 18347, 30340, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 25772, 18347, 18347,
    /*   315 */ 18347, 18347, 18347, 18347, 18347, 26457, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*   330 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*   345 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*   360 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*   375 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*   390 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*   405 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*   420 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 41652, 18347,
    /*   435 */ 18347, 18347, 18347, 41653, 18347, 18347, 18347, 32690, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*   450 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*   465 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*   480 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*   495 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*   510 */ 18347, 18347, 28369, 18347, 18347, 18347, 18347, 18347, 18347, 26731, 18347, 18347, 18347, 18347, 18867,
    /*   525 */ 18227, 18273, 18245, 18257, 18267, 18289, 18347, 41747, 18324, 21044, 30785, 18347, 18347, 22160, 27057,
    /*   540 */ 18347, 18347, 18347, 18346, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 40773,
    /*   555 */ 40772, 18347, 18347, 18347, 18347, 30340, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 25772, 18347,
    /*   570 */ 18347, 18347, 18347, 18347, 18347, 18347, 26457, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*   585 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*   600 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*   615 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*   630 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*   645 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*   660 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*   675 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 41652,
    /*   690 */ 18347, 18347, 18347, 18347, 41653, 18347, 18347, 18347, 32690, 18347, 18347, 18347, 18347, 18347, 18347,
    /*   705 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*   720 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*   735 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*   750 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*   765 */ 18347, 18347, 18347, 28369, 36993, 27996, 18347, 18347, 18347, 18347, 18364, 18347, 18347, 18890, 30792,
    /*   780 */ 18388, 18227, 18347, 18347, 18347, 18347, 18347, 28005, 18428, 18454, 18642, 28034, 18347, 18347, 22160,
    /*   795 */ 27057, 18347, 23170, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*   810 */ 18347, 18347, 24931, 18889, 18347, 18347, 30340, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 25772,
    /*   825 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 26457, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*   840 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*   855 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*   870 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*   885 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*   900 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*   915 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*   930 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*   945 */ 41652, 18347, 18347, 18347, 18347, 41653, 18347, 18347, 18347, 32690, 18347, 18347, 18347, 18347, 18347,
    /*   960 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*   975 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*   990 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  1005 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  1020 */ 18347, 18347, 18347, 18347, 18476, 18372, 42163, 18347, 18347, 18347, 18347, 18498, 18347, 18347, 42164,
    /*  1035 */ 18347, 18867, 18227, 18542, 18550, 18566, 30729, 18587, 31540, 38540, 18631, 21044, 30785, 18347, 18347,
    /*  1050 */ 22160, 18665, 18347, 23045, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  1065 */ 18347, 18347, 18347, 29639, 32420, 18347, 18347, 30340, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  1080 */ 25772, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 26457, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  1095 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 19491, 18347, 18347, 18347, 18347, 18347,
    /*  1110 */ 18347, 18347, 18347, 18347, 37320, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  1125 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  1140 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  1155 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  1170 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  1185 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  1200 */ 18347, 41652, 18347, 18347, 18347, 18347, 41653, 18347, 18347, 18347, 32690, 18347, 18347, 18347, 18347,
    /*  1215 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  1230 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  1245 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  1260 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  1275 */ 18347, 18347, 18347, 18347, 18347, 18699, 28372, 28374, 18347, 18347, 18347, 18347, 18722, 18347, 18347,
    /*  1290 */ 44822, 18347, 18764, 18227, 18790, 18827, 18347, 46546, 18347, 43477, 18849, 18883, 21044, 30785, 18347,
    /*  1305 */ 18347, 22160, 27057, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  1320 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 30340, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  1335 */ 18347, 25772, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 26457, 18347, 18347, 18347, 18347, 18347,
    /*  1350 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  1365 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  1380 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  1395 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  1410 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  1425 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  1440 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  1455 */ 18347, 18347, 41652, 18347, 18347, 18347, 18347, 41653, 18347, 18347, 18347, 32690, 18347, 18347, 18347,
    /*  1470 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  1485 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  1500 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  1515 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  1530 */ 18347, 18347, 18347, 18347, 18347, 18347, 28369, 18347, 18347, 18347, 18347, 18347, 18347, 30855, 18347,
    /*  1545 */ 18347, 18347, 18347, 36857, 18906, 18347, 21758, 21764, 18347, 18347, 28408, 18925, 18951, 21044, 30785,
    /*  1560 */ 18347, 18347, 22160, 27057, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  1575 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 30340, 18347, 18347, 18347, 18347, 18347,
    /*  1590 */ 18347, 18347, 25772, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 26457, 18347, 18347, 18347, 18347,
    /*  1605 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  1620 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  1635 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  1650 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  1665 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  1680 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  1695 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  1710 */ 18347, 18347, 18347, 41652, 18347, 18347, 18347, 18347, 41653, 18347, 18347, 18347, 32690, 18347, 18347,
    /*  1725 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  1740 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  1755 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  1770 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  1785 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 28369, 18347, 18347, 18347, 18347, 18347, 18347, 26731,
    /*  1800 */ 18347, 18347, 18347, 18347, 24481, 18973, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18991, 27307,
    /*  1815 */ 44234, 18347, 18347, 22160, 27057, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  1830 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 30340, 18347, 18347, 18347, 18347,
    /*  1845 */ 18347, 18347, 18347, 33609, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 31485, 18347, 18347, 18347,
    /*  1860 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  1875 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  1890 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  1905 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  1920 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  1935 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  1950 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  1965 */ 18347, 18347, 18347, 18347, 41652, 18347, 18347, 18347, 18347, 41653, 18347, 18347, 18347, 32690, 18347,
    /*  1980 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  1995 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  2010 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  2025 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  2040 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 28369, 25405, 36984, 18347, 18347, 18347, 18347,
    /*  2055 */ 19013, 18347, 18347, 21055, 28041, 19037, 18227, 18347, 18347, 18347, 18347, 18347, 19146, 19063, 19097,
    /*  2070 */ 24473, 46778, 18347, 18347, 22160, 27057, 18347, 18347, 19119, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  2085 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 21051, 18347, 18347, 30340, 18347, 18347, 18347,
    /*  2100 */ 18347, 18347, 18347, 18347, 25772, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 26457, 18347, 18347,
    /*  2115 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  2130 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  2145 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  2160 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  2175 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  2190 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  2205 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  2220 */ 18347, 18347, 18347, 18347, 18347, 41652, 18347, 18347, 18347, 18347, 41653, 18347, 18347, 18347, 32690,
    /*  2235 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  2250 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  2265 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  2280 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  2295 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 19137, 36720, 42205, 19224, 19224, 19224,
    /*  2310 */ 19224, 19162, 19224, 19224, 19246, 19192, 19178, 19219, 19273, 19280, 19240, 19262, 19296, 19203, 19323,
    /*  2325 */ 19336, 21044, 30785, 18347, 18347, 19365, 19363, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  2340 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 19367, 18347, 18347,
    /*  2355 */ 18347, 18347, 18347, 18347, 18347, 25772, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 26457, 18347,
    /*  2370 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  2385 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  2400 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  2415 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  2430 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  2445 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  2460 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  2475 */ 18347, 18347, 18347, 18347, 18347, 18347, 41652, 18347, 18347, 18347, 18347, 41653, 18347, 18347, 18347,
    /*  2490 */ 32690, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  2505 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  2520 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  2535 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  2550 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 28369, 18347, 18909, 18347, 18347,
    /*  2565 */ 18347, 18347, 19383, 19454, 18347, 20832, 18347, 43283, 19407, 18347, 39643, 19419, 19440, 19424, 19307,
    /*  2580 */ 19391, 19473, 21044, 30785, 18347, 18347, 22160, 19507, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  2595 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 42378, 18347,
    /*  2610 */ 18347, 18347, 18347, 18347, 18347, 18347, 25772, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 26457,
    /*  2625 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  2640 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  2655 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  2670 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  2685 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  2700 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  2715 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  2730 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 41652, 18347, 18347, 18347, 18347, 41653, 18347, 18347,
    /*  2745 */ 18347, 32690, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  2760 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  2775 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  2790 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  2805 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 28369, 18347, 47740, 18347,
    /*  2820 */ 18347, 18347, 18347, 26731, 18347, 18347, 18347, 45068, 42116, 18227, 19594, 19601, 19525, 19594, 19555,
    /*  2835 */ 19567, 19583, 19617, 21044, 30785, 18347, 18347, 22160, 27057, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  2850 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 30340,
    /*  2865 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 25772, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  2880 */ 18300, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  2895 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  2910 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  2925 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  2940 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  2955 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  2970 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  2985 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 41652, 18347, 18347, 18347, 18347, 41653, 18347,
    /*  3000 */ 18347, 18347, 32690, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  3015 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  3030 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  3045 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  3060 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 28369, 18347, 18347,
    /*  3075 */ 18347, 18347, 18347, 18347, 26731, 18347, 18347, 18347, 28877, 42360, 18227, 19639, 19660, 19694, 19639,
    /*  3090 */ 19644, 18347, 19639, 19751, 21044, 30785, 18347, 18347, 22160, 27057, 18347, 18347, 18347, 18347, 18347,
    /*  3105 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  3120 */ 30340, 19773, 18347, 18347, 18347, 18347, 18347, 18347, 25772, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  3135 */ 18347, 26457, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  3150 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  3165 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  3180 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  3195 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  3210 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  3225 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  3240 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 41652, 18347, 18347, 18347, 18347, 41653,
    /*  3255 */ 18347, 18347, 18347, 32690, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  3270 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  3285 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  3300 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  3315 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 28369, 18347,
    /*  3330 */ 18347, 19793, 18347, 18347, 18347, 26731, 19851, 18347, 21232, 19855, 43725, 19810, 19841, 19820, 19820,
    /*  3345 */ 19820, 19825, 18347, 44021, 19871, 21044, 30785, 18347, 18347, 22160, 27057, 18347, 18347, 18347, 18347,
    /*  3360 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  3375 */ 18347, 30340, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 25772, 18347, 18347, 18347, 18347, 18347,
    /*  3390 */ 18347, 18347, 26457, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  3405 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  3420 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  3435 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  3450 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  3465 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  3480 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  3495 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 41652, 18347, 18347, 18347, 18347,
    /*  3510 */ 41653, 18347, 18347, 18347, 32690, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  3525 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  3540 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  3555 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  3570 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 19893,
    /*  3585 */ 18347, 18347, 18347, 18347, 18347, 18347, 26731, 18347, 18347, 18347, 18347, 18867, 18227, 19919, 19940,
    /*  3600 */ 19967, 19919, 19924, 18347, 19919, 20004, 21044, 30785, 18347, 18347, 22160, 27057, 18347, 18347, 18347,
    /*  3615 */ 18347, 18347, 18347, 18347, 18347, 18347, 47433, 40714, 40105, 20080, 25548, 37780, 37562, 20059, 27545,
    /*  3630 */ 43701, 18347, 30340, 19773, 18347, 18347, 31169, 18347, 18347, 18347, 24850, 36066, 40714, 40714, 40107,
    /*  3645 */ 20080, 20079, 20080, 20316, 26153, 20253, 20253, 37553, 39413, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  3660 */ 18347, 46493, 34732, 18347, 32611, 40714, 40714, 40714, 40714, 41199, 20080, 20080, 20080, 20080, 28182,
    /*  3675 */ 20253, 20253, 20253, 20253, 25550, 20116, 30092, 18347, 36957, 18347, 18347, 18347, 18347, 18347, 20097,
    /*  3690 */ 33709, 33388, 40714, 40714, 40714, 36611, 32826, 20080, 20080, 20080, 31736, 23403, 20253, 20253, 20253,
    /*  3705 */ 20114, 30090, 18347, 18347, 18347, 18347, 39805, 18347, 40713, 40714, 40714, 22467, 20080, 20132, 20080,
    /*  3720 */ 20236, 20253, 44708, 20253, 24360, 24091, 18347, 18347, 21843, 18347, 47436, 40714, 40714, 38952, 20080,
    /*  3735 */ 39338, 38961, 20253, 35474, 38970, 30321, 18347, 18347, 20153, 41582, 40714, 40106, 38775, 20080, 34016,
    /*  3750 */ 20253, 38970, 40420, 39465, 37811, 20177, 20194, 20230, 28462, 20252, 45107, 25396, 45399, 43554, 36481,
    /*  3765 */ 20270, 26801, 20305, 20340, 40160, 35106, 39071, 43413, 25569, 26349, 25463, 23410, 24746, 20356, 20377,
    /*  3780 */ 44084, 32536, 40675, 32070, 42926, 42938, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  3795 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  3810 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  3825 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  3840 */ 28369, 18347, 18347, 18347, 18347, 18347, 18347, 20405, 18347, 18347, 18347, 46785, 18867, 18227, 18347,
    /*  3855 */ 18347, 18347, 18347, 18347, 24277, 20429, 20455, 21044, 30785, 18347, 18347, 22160, 20488, 18347, 18347,
    /*  3870 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 47433, 40714, 40105, 20080, 25548, 33434, 37562, 20059,
    /*  3885 */ 18347, 18347, 18347, 30340, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 24850, 40714, 40714, 40714,
    /*  3900 */ 40107, 20080, 20080, 20080, 20316, 20253, 20253, 20253, 44629, 39413, 18347, 18347, 18347, 18347, 18347,
    /*  3915 */ 18347, 18347, 18347, 18347, 18347, 32611, 40714, 40714, 40714, 40714, 41199, 20080, 20080, 20080, 20080,
    /*  3930 */ 28182, 20253, 20253, 20253, 20253, 25550, 20116, 30092, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  3945 */ 18347, 47435, 40714, 40714, 40714, 40714, 40109, 20080, 20080, 20080, 20080, 20208, 20253, 20253, 20253,
    /*  3960 */ 20253, 25608, 30090, 18347, 18347, 18347, 18347, 18347, 18347, 40713, 40714, 40714, 41198, 20080, 20080,
    /*  3975 */ 20080, 20236, 20253, 20253, 20253, 24360, 24091, 18347, 18347, 18347, 18347, 47436, 40714, 40714, 40108,
    /*  3990 */ 20080, 20080, 38961, 20253, 20253, 38970, 30092, 18347, 18347, 18347, 26348, 40714, 40106, 20080, 20080,
    /*  4005 */ 25504, 20253, 38970, 30092, 18347, 47431, 40714, 40107, 20080, 29410, 20253, 45107, 41652, 40713, 28179,
    /*  4020 */ 29410, 32738, 46274, 40106, 25465, 23410, 46277, 40109, 29408, 25569, 26349, 25463, 23410, 26347, 25463,
    /*  4035 */ 23411, 44084, 32536, 40675, 32070, 42926, 42938, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  4050 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  4065 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  4080 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  4095 */ 18347, 28369, 18347, 20519, 18347, 18347, 18347, 18347, 20511, 18347, 18347, 18347, 18347, 18867, 18227,
    /*  4110 */ 18405, 18412, 20535, 18398, 20556, 27059, 18405, 20600, 21044, 30785, 18347, 18347, 22160, 27057, 18347,
    /*  4125 */ 18347, 18347, 20624, 45901, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  4140 */ 18347, 18347, 18347, 18347, 30340, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 25772, 18347, 18347,
    /*  4155 */ 18347, 18347, 18347, 18347, 18347, 26457, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  4170 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  4185 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  4200 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  4215 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  4230 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  4245 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  4260 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 41652, 18347,
    /*  4275 */ 18347, 18347, 18347, 41653, 18347, 18347, 18347, 32690, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  4290 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  4305 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  4320 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  4335 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  4350 */ 18347, 18347, 28369, 18347, 18509, 18347, 18347, 18347, 18347, 20641, 18347, 18347, 18347, 36337, 18867,
    /*  4365 */ 18227, 18347, 18347, 18347, 18347, 18347, 23093, 20665, 20708, 21044, 36199, 18347, 18347, 22160, 20733,
    /*  4380 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 47433, 40714, 40105, 20080, 25548, 43421,
    /*  4395 */ 37562, 20059, 18347, 18347, 18347, 30340, 20756, 18347, 20413, 18347, 18347, 18347, 18347, 24850, 40714,
    /*  4410 */ 40714, 40714, 40107, 20080, 20080, 20080, 20316, 20253, 20253, 20253, 44629, 23599, 20776, 20829, 18347,
    /*  4425 */ 18347, 18598, 18347, 20649, 18347, 18347, 18347, 32611, 40714, 40714, 40714, 40714, 41199, 20080, 20080,
    /*  4440 */ 20080, 20080, 28182, 20253, 20253, 20253, 20253, 25550, 20116, 33512, 20993, 20850, 18347, 18347, 18347,
    /*  4455 */ 38331, 18347, 18347, 41575, 40714, 40714, 40714, 40714, 40109, 20080, 20080, 20080, 20080, 41515, 20253,
    /*  4470 */ 20253, 20253, 20253, 25608, 35881, 20848, 18347, 18347, 18347, 18347, 27969, 40713, 40714, 40714, 41198,
    /*  4485 */ 20080, 20080, 20080, 33456, 20253, 20253, 20253, 24360, 24091, 18347, 18347, 18347, 18347, 40798, 40714,
    /*  4500 */ 40714, 40108, 20080, 20080, 39936, 20253, 20253, 38970, 30092, 18347, 18347, 18347, 26348, 40714, 40106,
    /*  4515 */ 20080, 20080, 25504, 20253, 38970, 30092, 18347, 47431, 40714, 40107, 20080, 29410, 20253, 45107, 41652,
    /*  4530 */ 40713, 28179, 29410, 32738, 46274, 40106, 25465, 23410, 46277, 40109, 29408, 25569, 26349, 25463, 23410,
    /*  4545 */ 26347, 25463, 23411, 44084, 32536, 40675, 32070, 42926, 42938, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  4560 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  4575 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  4590 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  4605 */ 18347, 18347, 18347, 28369, 18347, 18347, 20867, 18347, 18347, 18347, 20887, 24903, 18347, 18347, 20907,
    /*  4620 */ 18867, 20942, 25945, 42336, 20954, 20959, 20975, 18347, 27118, 21009, 30896, 27873, 18347, 18347, 19456,
    /*  4635 */ 21034, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 25636, 21380, 23841, 18347, 21071,
    /*  4650 */ 26664, 21130, 28840, 18347, 18347, 18347, 19457, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 23835,
    /*  4665 */ 21380, 21380, 21380, 23843, 18347, 18347, 18347, 26656, 21189, 21189, 21189, 21121, 28835, 18347, 18347,
    /*  4680 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 25639, 21380, 21380, 21380, 21380, 21382, 18347,
    /*  4695 */ 18347, 18347, 18347, 25285, 21189, 21189, 21189, 21189, 21073, 21091, 28841, 18347, 18347, 18347, 18347,
    /*  4710 */ 18347, 18347, 18347, 18347, 25638, 21380, 21380, 21380, 21380, 23845, 18347, 18347, 18347, 18347, 21325,
    /*  4725 */ 21189, 21189, 21189, 21189, 21089, 28839, 18347, 18347, 18347, 18347, 18347, 18347, 21379, 21380, 21380,
    /*  4740 */ 21381, 18347, 18347, 18347, 18347, 21189, 21189, 21189, 21107, 21164, 18347, 18347, 18347, 18347, 25639,
    /*  4755 */ 21380, 21380, 23844, 18347, 18347, 38733, 21189, 21189, 21154, 28841, 18347, 18347, 18347, 21349, 21380,
    /*  4770 */ 23842, 18347, 18347, 21188, 21189, 21154, 28841, 18347, 25634, 21380, 23843, 18347, 21326, 21189, 21205,
    /*  4785 */ 41652, 21379, 21229, 21326, 21248, 46014, 23842, 38732, 21275, 46017, 23845, 21324, 21292, 21350, 38730,
    /*  4800 */ 21275, 21348, 38730, 21276, 21318, 21342, 21138, 21366, 21398, 21410, 18347, 18347, 18347, 18347, 18347,
    /*  4815 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  4830 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  4845 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  4860 */ 18347, 18347, 18347, 18347, 28369, 18347, 18347, 21430, 18347, 18347, 18347, 26731, 21451, 18347, 18347,
    /*  4875 */ 21461, 42467, 21477, 21489, 21489, 21489, 21489, 21494, 18347, 46092, 21510, 21044, 30785, 18347, 18347,
    /*  4890 */ 22160, 27057, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  4905 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 30340, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  4920 */ 25772, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 26457, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  4935 */ 18347, 18347, 18347, 18347, 18347, 42443, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  4950 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 20439, 18649, 21532, 18347,
    /*  4965 */ 18347, 18347, 21552, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  4980 */ 18347, 18347, 18347, 18347, 18347, 18347, 20675, 21573, 18347, 18347, 18347, 18347, 40507, 18347, 18347,
    /*  4995 */ 18347, 18347, 18347, 18347, 18347, 19623, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  5010 */ 25770, 18347, 18347, 18347, 18347, 18347, 26457, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  5025 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  5040 */ 18347, 41652, 18347, 18347, 18347, 18347, 41653, 18347, 18347, 18347, 32690, 18347, 18347, 18347, 18347,
    /*  5055 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  5070 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  5085 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  5100 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  5115 */ 18347, 18347, 18347, 18347, 18347, 28369, 18347, 18347, 18347, 18347, 18347, 18347, 26731, 18347, 18347,
    /*  5130 */ 18347, 18347, 18347, 21592, 21620, 21620, 21620, 21620, 21625, 25305, 21610, 21641, 21044, 30785, 18347,
    /*  5145 */ 18347, 22160, 27057, 18347, 18347, 18347, 18347, 26772, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  5160 */ 18347, 18347, 18347, 26771, 18347, 18347, 18347, 18347, 30340, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  5175 */ 18347, 25772, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 26457, 18347, 18347, 18347, 18347, 18347,
    /*  5190 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  5205 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  5220 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  5235 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  5250 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  5265 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  5280 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  5295 */ 18347, 18347, 41652, 18347, 18347, 18347, 18347, 41653, 18347, 18347, 18347, 32690, 18347, 18347, 18347,
    /*  5310 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  5325 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  5340 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  5355 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  5370 */ 18347, 18347, 18347, 18347, 18347, 18347, 21663, 41095, 18347, 41099, 18347, 18347, 18347, 26731, 18347,
    /*  5385 */ 18347, 18347, 18347, 18867, 18227, 21697, 21697, 21697, 21697, 21702, 18347, 40232, 21718, 21044, 32776,
    /*  5400 */ 18347, 18347, 22160, 27057, 18347, 18347, 18347, 18347, 24600, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  5415 */ 18347, 18347, 18347, 18347, 29930, 18347, 18347, 18347, 18347, 30340, 18347, 18347, 18347, 18347, 18347,
    /*  5430 */ 18347, 18347, 25772, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 26457, 18347, 18347, 18347, 18347,
    /*  5445 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  5460 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  5475 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  5490 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  5505 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  5520 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  5535 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  5550 */ 18347, 18347, 18347, 41652, 18347, 18347, 18347, 18347, 41653, 18347, 18347, 18347, 32690, 18347, 18347,
    /*  5565 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  5580 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  5595 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  5610 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  5625 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 21740, 41318, 21793, 18347, 18347, 18347, 18347, 21785,
    /*  5640 */ 18347, 18347, 18347, 18347, 18867, 18227, 21809, 21809, 21809, 21809, 21814, 18347, 23559, 21830, 22143,
    /*  5655 */ 30785, 18347, 18347, 22160, 27057, 18347, 18347, 18347, 18347, 32983, 18347, 18347, 18347, 18347, 18347,
    /*  5670 */ 18347, 18347, 18347, 18347, 18347, 18347, 33241, 18347, 18347, 18347, 30340, 18347, 18347, 18347, 18347,
    /*  5685 */ 18347, 18347, 18347, 25772, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 26457, 18347, 18347, 18347,
    /*  5700 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  5715 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  5730 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  5745 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  5760 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  5775 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  5790 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  5805 */ 18347, 18347, 18347, 18347, 41652, 18347, 18347, 18347, 18347, 41653, 18347, 18347, 18347, 41872, 18347,
    /*  5820 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  5835 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  5850 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  5865 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  5880 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 21859, 21557, 18347, 18347, 18347, 18347, 18347,
    /*  5895 */ 26731, 21918, 18347, 18347, 18330, 42733, 18227, 18347, 18347, 18347, 21915, 21888, 18347, 21910, 21936,
    /*  5910 */ 21044, 30785, 18347, 18347, 22160, 27057, 18347, 18347, 18347, 21958, 18347, 18347, 18347, 18347, 18347,
    /*  5925 */ 18347, 18347, 18347, 18347, 18347, 33581, 33580, 18347, 18347, 18347, 18347, 30340, 18347, 18347, 18347,
    /*  5940 */ 18347, 18347, 18347, 18347, 25772, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 26457, 18347, 18347,
    /*  5955 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  5970 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  5985 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  6000 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  6015 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  6030 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  6045 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  6060 */ 18347, 18347, 18347, 18347, 18347, 41652, 18347, 18347, 18347, 18347, 41653, 18347, 18347, 18347, 32690,
    /*  6075 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  6090 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  6105 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  6120 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  6135 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 28369, 18347, 18347, 18347, 18347, 18347,
    /*  6150 */ 18347, 26731, 18347, 18347, 18347, 18347, 18867, 18227, 18347, 18347, 18347, 18347, 18347, 21576, 21975,
    /*  6165 */ 22001, 21044, 30785, 18347, 18347, 22160, 27057, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  6180 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 30340, 18347, 18347,
    /*  6195 */ 18347, 18347, 18347, 18347, 18347, 25772, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 26457, 18347,
    /*  6210 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  6225 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  6240 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  6255 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  6270 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  6285 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  6300 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  6315 */ 18347, 18347, 18347, 18347, 18347, 18347, 41652, 18347, 18347, 18347, 18347, 41653, 18347, 18347, 18347,
    /*  6330 */ 32690, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  6345 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  6360 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  6375 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  6390 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 22023, 18347, 18347, 18347, 18347,
    /*  6405 */ 18347, 18347, 22044, 18347, 18347, 18347, 18347, 18867, 18227, 18347, 18347, 18347, 18347, 25484, 25598,
    /*  6420 */ 26326, 28228, 21044, 30785, 18347, 18347, 22160, 27057, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  6435 */ 18347, 18347, 47433, 40714, 40105, 20080, 25548, 37780, 37562, 22069, 18347, 18347, 18347, 30340, 18347,
    /*  6450 */ 18347, 18347, 18347, 18347, 18347, 18347, 43314, 40714, 40714, 40714, 40107, 20080, 20080, 20080, 33426,
    /*  6465 */ 20253, 20253, 20253, 44629, 39413, 18347, 18347, 18347, 18347, 18347, 18347, 38326, 18347, 18347, 18347,
    /*  6480 */ 32611, 40714, 40714, 40714, 40714, 41199, 20080, 20080, 20080, 20080, 28182, 20253, 20253, 20253, 20253,
    /*  6495 */ 25550, 20116, 24033, 22353, 20850, 18347, 18347, 18347, 38331, 18347, 18347, 47435, 40714, 40714, 40714,
    /*  6510 */ 40714, 40109, 20080, 20080, 20080, 20080, 20208, 20253, 20253, 20253, 20253, 25608, 35881, 20848, 18347,
    /*  6525 */ 18347, 28625, 18347, 47275, 40713, 40714, 40714, 41198, 20080, 20080, 20080, 23988, 20253, 20253, 20253,
    /*  6540 */ 24360, 24091, 18347, 18347, 18347, 18347, 40798, 40714, 40714, 40108, 20080, 20080, 39936, 20253, 20253,
    /*  6555 */ 38970, 30092, 18347, 46983, 18347, 26348, 40714, 40106, 20080, 20080, 25504, 20253, 38970, 30092, 18347,
    /*  6570 */ 47431, 40714, 40107, 20080, 29410, 20253, 45107, 41652, 40713, 28179, 29410, 32738, 46274, 40106, 25465,
    /*  6585 */ 23410, 46277, 40109, 29408, 25569, 26349, 25463, 23410, 26347, 25463, 23411, 44084, 32536, 40675, 32070,
    /*  6600 */ 42926, 42938, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  6615 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  6630 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  6645 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 22023, 18347, 18347, 18347,
    /*  6660 */ 18347, 18347, 18347, 22044, 18347, 18347, 18347, 18347, 18867, 18227, 18347, 18347, 18347, 18347, 25484,
    /*  6675 */ 25598, 26326, 28228, 21044, 30785, 18347, 18347, 22160, 27057, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  6690 */ 18347, 18347, 18347, 47433, 40714, 40105, 20080, 25548, 37780, 37562, 22069, 18347, 18347, 18347, 30340,
    /*  6705 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 43314, 40714, 40714, 40714, 40107, 20080, 20080, 20080,
    /*  6720 */ 33426, 20253, 20253, 20253, 44629, 39413, 18347, 18347, 18347, 18347, 18347, 18347, 38326, 18347, 18347,
    /*  6735 */ 18347, 32611, 40714, 40714, 40714, 40714, 41199, 20080, 20080, 20080, 20080, 28182, 20253, 20253, 20253,
    /*  6750 */ 20253, 25550, 20116, 24033, 22353, 20850, 18347, 18347, 18347, 38331, 18347, 18347, 47435, 40714, 40714,
    /*  6765 */ 40714, 40714, 40109, 20080, 20080, 20080, 20080, 20208, 20253, 20253, 20253, 20253, 25608, 35881, 20848,
    /*  6780 */ 18347, 18347, 18347, 18347, 47275, 40713, 40714, 40714, 41198, 20080, 20080, 20080, 23988, 20253, 20253,
    /*  6795 */ 20253, 24360, 24091, 18347, 18347, 18347, 18347, 40798, 40714, 40714, 40108, 20080, 20080, 39936, 20253,
    /*  6810 */ 20253, 38970, 30092, 18347, 18347, 18347, 26348, 40714, 40106, 20080, 20080, 25504, 20253, 38970, 30092,
    /*  6825 */ 18347, 47431, 40714, 40107, 20080, 29410, 20253, 45107, 41652, 40713, 28179, 29410, 32738, 46274, 40106,
    /*  6840 */ 25465, 23410, 46277, 40109, 29408, 25569, 26349, 25463, 23410, 26347, 25463, 23411, 44084, 32536, 40675,
    /*  6855 */ 32070, 42926, 42938, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  6870 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  6885 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  6900 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 22023, 18347, 18347,
    /*  6915 */ 18347, 18347, 18347, 18347, 22044, 18347, 18347, 18347, 18347, 18867, 18227, 18347, 18347, 18347, 18347,
    /*  6930 */ 25484, 25598, 26326, 28228, 21044, 30785, 18347, 18347, 22160, 27057, 18347, 18347, 18347, 18347, 18347,
    /*  6945 */ 18347, 18347, 18347, 18347, 47433, 40714, 40105, 20080, 25548, 37780, 37562, 22069, 18347, 18347, 18347,
    /*  6960 */ 30340, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 43314, 40714, 40714, 40714, 40107, 20080, 20080,
    /*  6975 */ 20080, 33426, 20253, 20253, 20253, 44629, 39413, 18347, 18347, 18347, 18347, 18347, 18347, 38326, 45637,
    /*  6990 */ 18347, 18347, 32611, 40714, 40714, 40714, 40714, 41199, 20080, 20080, 20080, 20080, 28182, 20253, 20253,
    /*  7005 */ 20253, 20253, 25550, 20116, 24033, 22353, 20850, 18347, 18347, 18347, 38331, 18347, 18347, 47435, 40714,
    /*  7020 */ 40714, 40714, 40714, 40109, 20080, 20080, 20080, 20080, 20208, 20253, 20253, 20253, 20253, 25608, 35881,
    /*  7035 */ 20848, 18347, 18347, 18347, 18347, 47275, 40713, 40714, 40714, 41198, 20080, 20080, 20080, 23988, 20253,
    /*  7050 */ 20253, 20253, 24360, 24091, 18347, 18347, 18347, 18347, 40798, 40714, 40714, 40108, 20080, 20080, 39936,
    /*  7065 */ 20253, 20253, 38970, 30092, 18347, 18347, 18347, 26348, 40714, 40106, 20080, 20080, 25504, 20253, 38970,
    /*  7080 */ 30092, 18347, 47431, 40714, 40107, 20080, 29410, 20253, 45107, 41652, 40713, 28179, 29410, 32738, 46274,
    /*  7095 */ 40106, 25465, 23410, 46277, 40109, 29408, 25569, 26349, 25463, 23410, 26347, 25463, 23411, 44084, 32536,
    /*  7110 */ 40675, 32070, 42926, 42938, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  7125 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  7140 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  7155 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 22023, 18347,
    /*  7170 */ 18347, 18347, 18347, 18347, 18347, 22044, 18347, 18347, 18347, 18347, 18867, 18227, 18347, 18347, 18347,
    /*  7185 */ 18347, 25484, 25598, 26326, 28228, 21044, 30785, 18347, 18347, 22160, 27057, 18347, 18347, 18347, 18347,
    /*  7200 */ 18347, 18347, 18347, 18347, 18347, 47433, 40714, 40105, 20080, 25548, 37780, 37562, 22069, 18347, 18347,
    /*  7215 */ 18347, 30340, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 43314, 40714, 40714, 40714, 40107, 20080,
    /*  7230 */ 20080, 20080, 33426, 20253, 20253, 20253, 44629, 39413, 18347, 18347, 18347, 18347, 18347, 18347, 38326,
    /*  7245 */ 18347, 18347, 18347, 32611, 40714, 40714, 40714, 40714, 41199, 20080, 20080, 20080, 20080, 28182, 20253,
    /*  7260 */ 20253, 20253, 20253, 25550, 20116, 24033, 22353, 20850, 18347, 18347, 18347, 38331, 22090, 18347, 47435,
    /*  7275 */ 40714, 40714, 40714, 40714, 40109, 20080, 20080, 20080, 20080, 20208, 20253, 20253, 20253, 20253, 25608,
    /*  7290 */ 35881, 20848, 18347, 18347, 18347, 18347, 47275, 40713, 40714, 40714, 41198, 20080, 20080, 20080, 23988,
    /*  7305 */ 20253, 20253, 20253, 24360, 24091, 18347, 18347, 18347, 18347, 40798, 40714, 40714, 40108, 20080, 20080,
    /*  7320 */ 39936, 20253, 20253, 38970, 30092, 18347, 18347, 18347, 26348, 40714, 40106, 20080, 20080, 25504, 20253,
    /*  7335 */ 38970, 30092, 18347, 47431, 40714, 40107, 20080, 29410, 20253, 45107, 41652, 40713, 28179, 29410, 32738,
    /*  7350 */ 46274, 40106, 25465, 23410, 46277, 40109, 29408, 25569, 26349, 25463, 23410, 26347, 25463, 23411, 44084,
    /*  7365 */ 32536, 40675, 32070, 42926, 42938, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  7380 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  7395 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  7410 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 22023,
    /*  7425 */ 18347, 18347, 18347, 18347, 18347, 18347, 22044, 18347, 18347, 18347, 18347, 18867, 18227, 18347, 18347,
    /*  7440 */ 18347, 18347, 25484, 25598, 26326, 28228, 21044, 30785, 18347, 18347, 22160, 22110, 18347, 18347, 18347,
    /*  7455 */ 18347, 18347, 18347, 18347, 18347, 18347, 47433, 40714, 40105, 20080, 25548, 37780, 37562, 22069, 18347,
    /*  7470 */ 18347, 18347, 30340, 22114, 18347, 18347, 18347, 18347, 18347, 18347, 43314, 40714, 40714, 40714, 40107,
    /*  7485 */ 20080, 20080, 20080, 33426, 20253, 20253, 20253, 44629, 39413, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  7500 */ 38326, 18347, 18347, 18347, 32611, 40714, 40714, 40714, 40714, 41199, 20080, 20080, 20080, 20080, 28182,
    /*  7515 */ 20253, 20253, 20253, 20253, 25550, 20116, 24033, 22353, 20850, 18347, 18347, 18347, 38331, 18347, 18347,
    /*  7530 */ 47435, 40714, 40714, 40714, 40714, 40109, 20080, 20080, 20080, 20080, 20208, 20253, 20253, 20253, 20253,
    /*  7545 */ 25608, 35881, 20848, 18347, 18347, 18347, 18347, 47275, 40713, 40714, 40714, 41198, 20080, 20080, 20080,
    /*  7560 */ 23988, 20253, 20253, 20253, 24360, 24091, 18347, 18347, 18347, 18347, 40798, 40714, 40714, 40108, 20080,
    /*  7575 */ 20080, 39936, 20253, 20253, 38970, 30092, 18347, 18347, 18347, 26348, 40714, 40106, 20080, 20080, 25504,
    /*  7590 */ 20253, 38970, 30092, 18347, 47431, 40714, 40107, 20080, 29410, 20253, 45107, 41652, 40713, 28179, 29410,
    /*  7605 */ 32738, 46274, 40106, 25465, 23410, 46277, 40109, 29408, 25569, 26349, 25463, 23410, 26347, 25463, 23411,
    /*  7620 */ 44084, 32536, 40675, 32070, 42926, 42938, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  7635 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  7650 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  7665 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  7680 */ 22023, 18347, 18347, 18347, 18347, 18347, 18347, 22044, 18347, 18347, 18347, 18347, 18867, 18227, 18347,
    /*  7695 */ 18347, 18347, 18347, 25484, 25598, 26326, 28228, 21044, 30785, 18347, 18347, 22160, 27057, 18347, 18347,
    /*  7710 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 47433, 40714, 40105, 20080, 25548, 37780, 37562, 22069,
    /*  7725 */ 18347, 18347, 18347, 30340, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 43314, 40714, 40714, 40714,
    /*  7740 */ 40107, 20080, 20080, 20080, 33426, 20253, 20253, 20253, 44629, 39413, 18347, 18347, 18347, 18347, 18347,
    /*  7755 */ 18347, 18347, 18347, 18347, 18347, 32611, 40714, 40714, 40714, 40714, 41199, 20080, 20080, 20080, 20080,
    /*  7770 */ 28182, 20253, 20253, 20253, 20253, 25550, 20116, 30092, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  7785 */ 18347, 47435, 40714, 40714, 40714, 40714, 40109, 20080, 20080, 20080, 20080, 20208, 20253, 20253, 20253,
    /*  7800 */ 20253, 25608, 30090, 18347, 18347, 18347, 18347, 18347, 18347, 40713, 40714, 40714, 41198, 20080, 20080,
    /*  7815 */ 20080, 20236, 20253, 20253, 20253, 24360, 24091, 18347, 18347, 18347, 18347, 47436, 40714, 40714, 40108,
    /*  7830 */ 20080, 20080, 38961, 20253, 20253, 38970, 30092, 18347, 18347, 18347, 26348, 40714, 40106, 20080, 20080,
    /*  7845 */ 25504, 20253, 38970, 30092, 18347, 47431, 40714, 40107, 20080, 29410, 20253, 45107, 41652, 40713, 28179,
    /*  7860 */ 29410, 32738, 46274, 40106, 25465, 23410, 46277, 40109, 29408, 25569, 26349, 25463, 23410, 26347, 25463,
    /*  7875 */ 23411, 44084, 32536, 40675, 32070, 42926, 42938, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  7890 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  7905 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  7920 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  7935 */ 18347, 22023, 18347, 18347, 18347, 18347, 18347, 18347, 22044, 18347, 18347, 18347, 18347, 18867, 18227,
    /*  7950 */ 18347, 18347, 18347, 18347, 25484, 25598, 26326, 28228, 21044, 30785, 18347, 18347, 22160, 27057, 18347,
    /*  7965 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 47433, 40714, 40105, 20080, 25548, 37780, 37562,
    /*  7980 */ 27800, 18347, 18347, 18347, 30340, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 43314, 40714, 40714,
    /*  7995 */ 40714, 40107, 20080, 20080, 20080, 33426, 20253, 20253, 20253, 44629, 39413, 18347, 18347, 18347, 18347,
    /*  8010 */ 18347, 18347, 18347, 18347, 18347, 18347, 32611, 40714, 40714, 40714, 40714, 41199, 20080, 20080, 20080,
    /*  8025 */ 20080, 28182, 20253, 20253, 20253, 20253, 25550, 20116, 30092, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  8040 */ 18347, 18347, 47435, 40714, 40714, 40714, 40714, 40109, 20080, 20080, 20080, 20080, 20208, 20253, 20253,
    /*  8055 */ 20253, 20253, 25608, 30090, 18347, 18347, 18347, 18347, 18347, 18347, 40713, 40714, 40714, 41198, 20080,
    /*  8070 */ 20080, 20080, 20236, 20253, 20253, 20253, 24360, 24091, 18347, 18347, 18347, 18347, 47436, 40714, 40714,
    /*  8085 */ 40108, 20080, 20080, 38961, 20253, 20253, 38970, 30092, 18347, 18347, 18347, 26348, 40714, 40106, 20080,
    /*  8100 */ 20080, 25504, 20253, 38970, 30092, 18347, 47431, 40714, 40107, 20080, 29410, 20253, 45107, 41652, 40713,
    /*  8115 */ 28179, 29410, 32738, 46274, 40106, 25465, 23410, 46277, 40109, 29408, 25569, 26349, 25463, 23410, 26347,
    /*  8130 */ 25463, 23411, 44084, 32536, 40675, 32070, 42926, 42938, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  8145 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  8160 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  8175 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  8190 */ 18347, 18347, 22023, 18347, 18347, 18347, 18347, 18347, 18347, 22044, 18347, 18347, 18347, 18347, 18867,
    /*  8205 */ 18227, 18347, 18347, 18347, 18347, 25484, 25598, 26326, 22986, 21044, 30785, 18347, 18347, 22160, 27057,
    /*  8220 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 47433, 40714, 40105, 20080, 25548, 37780,
    /*  8235 */ 37562, 22069, 18347, 18347, 18347, 30340, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 43314, 40714,
    /*  8250 */ 40714, 40714, 40107, 20080, 20080, 20080, 33426, 20253, 20253, 20253, 44629, 39413, 18347, 18347, 18347,
    /*  8265 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 32611, 40714, 40714, 40714, 40714, 41199, 20080, 20080,
    /*  8280 */ 20080, 20080, 28182, 20253, 20253, 20253, 20253, 25550, 20116, 30092, 18347, 18347, 18347, 18347, 18347,
    /*  8295 */ 18347, 18347, 18347, 47435, 40714, 40714, 40714, 40714, 40109, 20080, 20080, 20080, 20080, 20208, 20253,
    /*  8310 */ 20253, 20253, 20253, 25608, 30090, 18347, 18347, 18347, 18347, 18347, 18347, 40713, 40714, 40714, 41198,
    /*  8325 */ 20080, 20080, 20080, 20236, 20253, 20253, 20253, 24360, 24091, 18347, 18347, 18347, 18347, 47436, 40714,
    /*  8340 */ 40714, 40108, 20080, 20080, 38961, 20253, 20253, 38970, 30092, 18347, 18347, 18347, 26348, 40714, 40106,
    /*  8355 */ 20080, 20080, 25504, 20253, 38970, 30092, 18347, 47431, 40714, 40107, 20080, 29410, 20253, 45107, 41652,
    /*  8370 */ 40713, 28179, 29410, 32738, 46274, 40106, 25465, 23410, 46277, 40109, 29408, 25569, 26349, 25463, 23410,
    /*  8385 */ 26347, 25463, 23411, 44084, 32536, 40675, 32070, 42926, 42938, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  8400 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  8415 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  8430 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  8445 */ 18347, 18347, 18347, 22023, 18347, 18347, 18347, 18347, 18347, 18347, 22044, 18347, 18347, 18347, 18347,
    /*  8460 */ 18867, 22133, 18347, 18347, 18347, 18347, 25484, 25598, 26326, 28228, 21044, 30785, 18347, 18347, 22160,
    /*  8475 */ 27057, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 47433, 40714, 40105, 20080, 25548,
    /*  8490 */ 37780, 37562, 22069, 18347, 18347, 18347, 30340, 18347, 18347, 18347, 18347, 22159, 18347, 18347, 43314,
    /*  8505 */ 40714, 40714, 40714, 40107, 20080, 20080, 20080, 33426, 20253, 20253, 20253, 44629, 39413, 18347, 18347,
    /*  8520 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 32611, 40714, 40714, 40714, 40714, 41199, 20080,
    /*  8535 */ 20080, 20080, 20080, 28182, 20253, 20253, 20253, 20253, 25550, 20116, 30092, 18347, 18347, 18347, 18347,
    /*  8550 */ 18347, 18347, 18347, 18347, 47435, 40714, 40714, 40714, 40714, 40109, 20080, 20080, 20080, 20080, 20208,
    /*  8565 */ 20253, 20253, 20253, 20253, 25608, 30090, 18347, 18347, 18347, 18347, 18347, 18347, 40713, 40714, 40714,
    /*  8580 */ 41198, 20080, 20080, 20080, 20236, 20253, 20253, 20253, 24360, 24091, 18347, 18347, 18347, 18347, 47436,
    /*  8595 */ 40714, 40714, 40108, 20080, 20080, 38961, 20253, 20253, 38970, 30092, 18347, 18347, 18347, 26348, 40714,
    /*  8610 */ 40106, 20080, 20080, 25504, 20253, 38970, 30092, 18347, 47431, 40714, 40107, 20080, 29410, 20253, 45107,
    /*  8625 */ 41652, 40713, 28179, 29410, 32738, 46274, 40106, 25465, 23410, 46277, 40109, 29408, 25569, 26349, 25463,
    /*  8640 */ 23410, 26347, 25463, 23411, 44084, 32536, 40675, 32070, 42926, 42938, 18347, 18347, 18347, 18347, 18347,
    /*  8655 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  8670 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  8685 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  8700 */ 18347, 18347, 18347, 18347, 22023, 18347, 18347, 18347, 18347, 18347, 18347, 22044, 18347, 18347, 18347,
    /*  8715 */ 18347, 18867, 18227, 18347, 18347, 18347, 18347, 46672, 22176, 22190, 22206, 21044, 30785, 18347, 18347,
    /*  8730 */ 22160, 27057, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 47433, 40714, 40105, 20080,
    /*  8745 */ 25548, 37780, 37562, 22069, 18347, 18347, 18347, 30340, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  8760 */ 43314, 40714, 40714, 40714, 40107, 20080, 20080, 20080, 33426, 20253, 20253, 20253, 44629, 39413, 18347,
    /*  8775 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 32611, 40714, 40714, 40714, 40714, 41199,
    /*  8790 */ 20080, 20080, 20080, 20080, 28182, 20253, 20253, 20253, 20253, 25550, 20116, 30092, 18347, 18347, 18347,
    /*  8805 */ 18347, 18347, 18347, 18347, 18347, 47435, 40714, 40714, 40714, 40714, 40109, 20080, 20080, 20080, 20080,
    /*  8820 */ 20208, 20253, 20253, 20253, 20253, 25608, 30090, 18347, 18347, 18347, 18347, 18347, 18347, 40713, 40714,
    /*  8835 */ 40714, 41198, 20080, 20080, 20080, 20236, 20253, 20253, 20253, 24360, 24091, 18347, 18347, 18347, 18347,
    /*  8850 */ 47436, 40714, 40714, 40108, 20080, 20080, 38961, 20253, 20253, 38970, 30092, 18347, 18347, 18347, 26348,
    /*  8865 */ 40714, 40106, 20080, 20080, 25504, 20253, 38970, 30092, 18347, 47431, 40714, 40107, 20080, 29410, 20253,
    /*  8880 */ 45107, 41652, 40713, 28179, 29410, 32738, 46274, 40106, 25465, 23410, 46277, 40109, 29408, 25569, 26349,
    /*  8895 */ 25463, 23410, 26347, 25463, 23411, 44084, 32536, 40675, 32070, 42926, 42938, 18347, 18347, 18347, 18347,
    /*  8910 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  8925 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  8940 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  8955 */ 18347, 18347, 18347, 18347, 18347, 22023, 18347, 18347, 18347, 18347, 18347, 18347, 22044, 18347, 18347,
    /*  8970 */ 18347, 18347, 18867, 18227, 18347, 18347, 18347, 18347, 25484, 25598, 26326, 28228, 21044, 30785, 18347,
    /*  8985 */ 18347, 22160, 27057, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 47433, 40714, 40105,
    /*  9000 */ 20080, 25548, 37780, 37562, 22069, 18347, 18347, 18347, 30340, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  9015 */ 18347, 43314, 40714, 40714, 40714, 40107, 20080, 20080, 20080, 33426, 20253, 20253, 20253, 44629, 39413,
    /*  9030 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 32611, 40714, 40714, 40714, 40714,
    /*  9045 */ 41199, 20080, 20080, 20080, 20080, 28182, 20253, 20253, 20253, 20253, 25550, 20116, 30092, 18347, 18347,
    /*  9060 */ 18347, 18347, 18347, 18347, 18347, 18347, 47435, 40714, 40714, 40714, 40714, 40109, 20080, 20080, 20080,
    /*  9075 */ 20080, 20208, 20253, 20253, 20253, 20253, 25608, 30090, 18347, 18347, 18347, 18347, 18347, 18347, 40713,
    /*  9090 */ 40714, 40714, 41198, 20080, 20080, 20080, 20236, 20253, 20253, 20253, 24360, 24091, 18347, 18347, 18347,
    /*  9105 */ 22231, 47436, 40714, 40714, 40108, 20080, 20080, 38961, 20253, 20253, 38970, 30092, 18347, 18347, 18347,
    /*  9120 */ 26348, 40714, 40106, 20080, 20080, 25504, 20253, 38970, 30092, 18347, 47431, 40714, 40107, 20080, 29410,
    /*  9135 */ 20253, 45107, 41652, 40713, 28179, 29410, 32738, 46274, 40106, 25465, 23410, 46277, 40109, 29408, 25569,
    /*  9150 */ 26349, 25463, 23410, 26347, 25463, 23411, 44084, 32536, 40675, 32070, 42926, 42938, 18347, 18347, 18347,
    /*  9165 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  9180 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  9195 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  9210 */ 18347, 18347, 18347, 18347, 18347, 18347, 22248, 18347, 18347, 18347, 18347, 18347, 18347, 22044, 18347,
    /*  9225 */ 18347, 18347, 18347, 18867, 18227, 18347, 18347, 18347, 18347, 25484, 25598, 26326, 28228, 21044, 30785,
    /*  9240 */ 18347, 18347, 22160, 27057, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 47433, 40714,
    /*  9255 */ 40105, 20080, 25548, 37780, 37562, 22069, 18347, 18347, 18347, 30340, 18347, 18347, 18347, 18347, 18347,
    /*  9270 */ 18347, 18347, 43314, 40714, 40714, 40714, 40107, 20080, 20080, 20080, 33426, 20253, 20253, 20253, 44629,
    /*  9285 */ 39413, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 32611, 40714, 40714, 40714,
    /*  9300 */ 40714, 41199, 20080, 20080, 20080, 20080, 28182, 20253, 20253, 20253, 20253, 25550, 20116, 30092, 18347,
    /*  9315 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 47435, 40714, 40714, 40714, 40714, 40109, 20080, 20080,
    /*  9330 */ 20080, 20080, 20208, 20253, 20253, 20253, 20253, 25608, 30090, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  9345 */ 40713, 40714, 40714, 41198, 20080, 20080, 20080, 20236, 20253, 20253, 20253, 24360, 24091, 18347, 18347,
    /*  9360 */ 18347, 18347, 47436, 40714, 40714, 40108, 20080, 20080, 38961, 20253, 20253, 38970, 30092, 18347, 18347,
    /*  9375 */ 18347, 26348, 40714, 40106, 20080, 20080, 25504, 20253, 38970, 30092, 18347, 47431, 40714, 40107, 20080,
    /*  9390 */ 29410, 20253, 45107, 41652, 40713, 28179, 29410, 32738, 46274, 40106, 25465, 23410, 46277, 40109, 29408,
    /*  9405 */ 25569, 26349, 25463, 23410, 26347, 25463, 23411, 44084, 32536, 40675, 32070, 42926, 42938, 18347, 18347,
    /*  9420 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  9435 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  9450 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  9465 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 28369, 18347, 18347, 18347, 18347, 18347, 18347, 26731,
    /*  9480 */ 18347, 18347, 18347, 18347, 18867, 18227, 22269, 22276, 22292, 18438, 22313, 34103, 22269, 22347, 21044,
    /*  9495 */ 30785, 18347, 18347, 22160, 27057, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  9510 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 30340, 18347, 18347, 18347, 27099,
    /*  9525 */ 18347, 18347, 18347, 25772, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 26457, 18347, 18347, 18347,
    /*  9540 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  9555 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  9570 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  9585 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  9600 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  9615 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  9630 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 41619, 18347, 18347, 18347,
    /*  9645 */ 18347, 18347, 18347, 18347, 41652, 18347, 18347, 18347, 18347, 41653, 18347, 18347, 18347, 32690, 18347,
    /*  9660 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  9675 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  9690 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  9705 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  9720 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 28369, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  9735 */ 26731, 18347, 18347, 18347, 18347, 18867, 18227, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18991,
    /*  9750 */ 21044, 30785, 18347, 18347, 22160, 27057, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  9765 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 30340, 18347, 18347, 18347,
    /*  9780 */ 18347, 18347, 18347, 18347, 25772, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 26457, 18347, 18347,
    /*  9795 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  9810 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  9825 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  9840 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  9855 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  9870 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  9885 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  9900 */ 18347, 18347, 18347, 18347, 18347, 41652, 18347, 18347, 18347, 18347, 41653, 18347, 18347, 18347, 32690,
    /*  9915 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  9930 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  9945 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  9960 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /*  9975 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 28369, 18347, 18347, 19671, 18347, 18347,
    /*  9990 */ 18347, 26731, 18347, 18347, 18347, 18347, 44957, 22369, 18347, 22821, 22381, 22402, 22386, 18347, 33759,
    /* 10005 */ 33772, 21044, 30785, 18347, 18347, 22160, 27057, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /* 10020 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 30340, 18347, 18347,
    /* 10035 */ 18347, 18347, 18347, 18347, 18347, 25772, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 26457, 18347,
    /* 10050 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /* 10065 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /* 10080 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /* 10095 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /* 10110 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /* 10125 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /* 10140 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /* 10155 */ 18347, 18347, 18347, 18347, 18347, 18347, 20692, 18347, 18347, 18347, 18347, 25265, 18347, 18347, 18347,
    /* 10170 */ 25268, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /* 10185 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /* 10200 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /* 10215 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /* 10230 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 22418, 18348, 18347, 20464, 18347,
    /* 10245 */ 18347, 18347, 22483, 20717, 18347, 24783, 22508, 22431, 22524, 22567, 22574, 22551, 22539, 22590, 22602,
    /* 10260 */ 22618, 22634, 21044, 22650, 18347, 22673, 34740, 22693, 22733, 22752, 22657, 22788, 22837, 37582, 22853,
    /* 10275 */ 22888, 18347, 22923, 22939, 22955, 37191, 28213, 22971, 23011, 23027, 24535, 18347, 18347, 30359, 18347,
    /* 10290 */ 23043, 18347, 23061, 42753, 18347, 23089, 23109, 40714, 40714, 23131, 40107, 20080, 20080, 35057, 33426,
    /* 10305 */ 20253, 20253, 36126, 38281, 39413, 42809, 18347, 23149, 23166, 43183, 23186, 38326, 23205, 18347, 23222,
    /* 10320 */ 23241, 23266, 40714, 36030, 23302, 41199, 31638, 23327, 20080, 23344, 23366, 41678, 23427, 20253, 23445,
    /* 10335 */ 23468, 31197, 24033, 22353, 23513, 18526, 22772, 45921, 38331, 18347, 23538, 47435, 23575, 32232, 43784,
    /* 10350 */ 24965, 40109, 23615, 35421, 37912, 30066, 23807, 23643, 34411, 31792, 33903, 28502, 35881, 23669, 34987,
    /* 10365 */ 18347, 23698, 23734, 47275, 41050, 40714, 43792, 23755, 23793, 20080, 35440, 42663, 47255, 20253, 46167,
    /* 10380 */ 45779, 32645, 23823, 30886, 21536, 23861, 40798, 23882, 23917, 34359, 23934, 23982, 39936, 24004, 37222,
    /* 10395 */ 39945, 24063, 32415, 22094, 18347, 32543, 28744, 44264, 47112, 41249, 29363, 38034, 24081, 30092, 18347,
    /* 10410 */ 47431, 40714, 40107, 20080, 29410, 20253, 45107, 41652, 40713, 28179, 29410, 32738, 46274, 40106, 25465,
    /* 10425 */ 23452, 36512, 33640, 41711, 30709, 24113, 24135, 23410, 24151, 25463, 20324, 44084, 32536, 40675, 32070,
    /* 10440 */ 42926, 42938, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /* 10455 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /* 10470 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /* 10485 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 22023, 18347, 18347, 27315,
    /* 10500 */ 18347, 18347, 18347, 22044, 18347, 18347, 18347, 21594, 39596, 24171, 18347, 40427, 24183, 24188, 24204,
    /* 10515 */ 24216, 24232, 24248, 21044, 30785, 18347, 18347, 22160, 27057, 18347, 18347, 18347, 18347, 18347, 18347,
    /* 10530 */ 18347, 18347, 18347, 47433, 40714, 40105, 20080, 25548, 41686, 37562, 22069, 18347, 18347, 18347, 30340,
    /* 10545 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 43314, 40714, 40714, 40714, 40107, 20080, 20080, 20080,
    /* 10560 */ 33426, 20253, 20253, 20253, 44629, 39413, 18347, 18347, 18347, 18347, 18347, 47806, 38326, 24273, 35266,
    /* 10575 */ 18347, 32611, 40714, 40714, 40714, 24293, 41199, 20080, 20080, 20080, 40129, 24314, 20253, 20253, 20253,
    /* 10590 */ 26247, 24357, 20116, 24033, 22353, 20850, 18347, 18347, 18347, 38331, 18347, 18347, 47435, 40714, 40714,
    /* 10605 */ 40714, 40714, 40109, 20080, 20080, 20080, 20080, 20208, 20253, 20253, 20253, 20253, 25608, 35881, 20848,
    /* 10620 */ 18347, 24376, 35653, 40525, 47275, 44739, 40714, 40714, 24395, 24416, 20080, 20080, 42588, 24439, 20253,
    /* 10635 */ 20253, 42635, 24091, 18347, 18347, 18347, 18347, 40798, 40714, 40714, 40108, 20080, 20080, 39936, 20253,
    /* 10650 */ 20253, 38970, 30092, 18347, 18347, 18347, 26348, 40714, 40106, 20080, 20080, 25504, 20253, 38970, 30092,
    /* 10665 */ 18347, 47431, 40714, 40107, 20080, 29410, 20253, 45107, 41652, 40713, 28179, 29410, 32738, 46274, 40106,
    /* 10680 */ 25465, 23410, 46277, 40109, 29408, 23653, 29389, 33839, 24463, 26347, 25463, 23411, 44084, 32536, 40675,
    /* 10695 */ 32070, 42926, 42938, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /* 10710 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /* 10725 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /* 10740 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 24497, 24513, 18347,
    /* 10755 */ 41877, 24530, 18347, 18347, 22044, 19794, 24551, 18347, 24568, 26703, 24616, 24647, 24654, 24631, 24670,
    /* 10770 */ 24685, 24697, 24713, 24729, 22441, 30785, 18347, 23150, 22160, 27057, 18347, 24762, 24514, 18347, 18347,
    /* 10785 */ 18347, 18347, 18347, 24780, 22450, 26210, 27588, 20137, 25548, 24799, 25536, 24872, 18347, 29817, 18347,
    /* 10800 */ 30340, 26488, 18347, 18347, 39685, 24893, 24928, 21213, 24947, 24981, 40714, 23133, 24400, 27714, 20080,
    /* 10815 */ 20080, 28979, 25006, 20253, 20253, 44629, 25245, 18347, 29825, 18347, 18347, 25034, 18347, 38326, 32865,
    /* 10830 */ 34950, 18347, 32611, 25058, 40714, 31988, 40714, 45097, 27686, 25086, 20080, 25102, 28182, 41991, 25120,
    /* 10845 */ 25140, 25157, 25550, 20116, 24033, 22353, 20850, 18347, 23713, 39208, 38331, 18347, 18347, 47435, 40714,
    /* 10860 */ 40714, 40714, 25176, 35049, 20080, 20080, 20080, 25193, 20208, 20253, 20253, 20253, 25214, 25233, 31820,
    /* 10875 */ 20848, 18347, 18347, 25284, 25301, 47275, 40713, 40714, 27582, 41198, 20080, 20080, 28925, 23988, 20253,
    /* 10890 */ 20253, 46472, 24360, 30683, 18347, 20920, 18347, 18347, 25321, 47021, 40714, 40108, 20080, 25345, 39936,
    /* 10905 */ 20253, 25364, 28471, 25383, 25421, 29560, 40486, 31080, 32022, 33415, 25438, 25459, 42016, 23966, 38970,
    /* 10920 */ 30092, 18347, 25481, 40714, 40390, 20080, 25500, 39431, 45107, 41652, 40713, 28179, 29410, 32738, 46274,
    /* 10935 */ 40106, 25465, 23410, 46277, 40109, 29408, 30505, 45036, 25521, 25566, 26347, 25463, 23411, 44084, 32536,
    /* 10950 */ 40675, 25616, 25585, 42938, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /* 10965 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /* 10980 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /* 10995 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 22023, 18347,
    /* 11010 */ 18347, 18347, 19719, 18347, 18347, 22044, 19509, 25632, 44241, 18347, 37364, 25655, 25671, 25678, 25694,
    /* 11025 */ 25710, 25715, 25731, 25745, 25761, 21044, 30785, 18347, 18347, 22160, 27057, 18347, 18347, 18347, 18347,
    /* 11040 */ 18347, 19732, 19726, 18347, 19735, 24738, 29166, 40291, 25788, 24826, 37780, 37562, 25809, 18347, 38336,
    /* 11055 */ 28598, 30340, 35582, 44395, 41008, 18347, 22117, 35969, 18774, 25836, 27617, 25861, 27410, 38195, 29910,
    /* 11070 */ 25886, 23328, 45231, 45192, 25902, 25160, 44629, 39413, 18347, 18347, 18347, 31921, 25942, 44801, 38326,
    /* 11085 */ 18347, 18347, 18347, 25961, 40714, 40714, 30913, 40714, 41199, 20080, 20080, 20080, 44992, 28182, 20253,
    /* 11100 */ 20253, 20253, 31318, 25550, 28699, 25985, 22353, 26027, 18347, 34329, 29683, 38331, 18347, 18347, 26050,
    /* 11115 */ 26073, 26094, 40714, 43351, 26305, 26112, 26132, 20080, 29267, 29875, 26151, 26169, 20253, 36402, 25608,
    /* 11130 */ 35881, 20848, 18347, 18347, 18347, 30395, 47275, 26186, 40714, 26206, 41198, 26226, 20080, 40335, 23988,
    /* 11145 */ 26244, 20253, 45682, 43440, 24091, 39846, 18347, 26263, 46249, 40798, 23893, 26280, 40108, 32713, 33826,
    /* 11160 */ 39936, 44506, 30657, 38970, 30092, 44925, 18347, 18347, 26348, 40714, 40106, 20080, 20080, 25504, 20253,
    /* 11175 */ 38970, 30092, 19483, 47431, 40714, 26303, 20080, 26321, 32346, 45107, 41652, 40713, 28179, 29410, 46231,
    /* 11190 */ 46274, 40106, 25465, 23410, 26342, 26365, 20361, 28671, 34687, 39405, 26413, 26347, 25463, 23411, 44084,
    /* 11205 */ 32536, 40675, 32070, 42926, 42938, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /* 11220 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /* 11235 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /* 11250 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 22023,
    /* 11265 */ 18347, 18347, 18347, 35890, 18347, 18347, 26439, 19021, 26481, 20098, 26504, 28608, 26526, 26542, 26557,
    /* 11280 */ 26572, 26588, 26603, 26615, 26631, 26647, 21985, 19981, 44656, 26680, 26719, 26751, 20016, 31162, 18347,
    /* 11295 */ 19678, 26767, 26788, 26825, 47463, 30514, 26841, 26857, 30480, 26873, 30573, 26911, 26926, 27007, 29675,
    /* 11310 */ 27028, 26264, 27044, 22114, 27075, 27092, 27115, 18347, 37295, 18347, 27134, 43750, 30827, 27196, 27212,
    /* 11325 */ 27235, 29260, 27285, 27331, 27355, 27382, 38215, 27398, 27297, 20472, 38566, 27433, 42194, 26991, 27449,
    /* 11340 */ 27465, 44403, 27481, 27521, 20791, 27568, 27604, 27633, 27662, 36363, 27678, 27702, 27730, 35761, 27746,
    /* 11355 */ 27762, 27787, 27821, 27921, 27837, 27907, 27950, 27985, 28021, 28057, 28074, 18347, 45328, 28100, 28116,
    /* 11370 */ 47435, 42995, 40714, 27148, 38293, 28174, 28198, 28262, 34391, 46738, 28279, 28301, 20253, 43107, 37735,
    /* 11385 */ 23483, 28340, 20848, 18833, 34829, 28390, 18347, 19951, 30821, 28424, 28487, 36604, 28530, 28551, 28570,
    /* 11400 */ 28586, 46466, 28641, 28661, 28687, 44207, 18347, 18347, 18347, 18347, 28715, 37434, 28739, 40108, 29224,
    /* 11415 */ 28760, 39936, 26389, 28787, 38970, 28316, 20584, 28821, 28857, 28893, 42549, 28941, 28968, 28995, 29011,
    /* 11430 */ 29060, 29076, 29092, 21259, 29127, 29153, 29188, 29248, 39107, 28798, 29283, 29305, 40713, 29340, 29359,
    /* 11445 */ 37701, 29379, 45220, 29405, 29426, 46277, 41440, 38208, 40556, 38710, 29442, 29463, 29499, 29540, 29576,
    /* 11460 */ 44084, 41549, 29609, 32070, 42926, 42938, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /* 11475 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /* 11490 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /* 11505 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /* 11520 */ 22023, 29637, 29713, 18347, 22074, 18347, 18347, 29655, 18347, 29666, 22297, 18347, 29699, 29731, 18347,
    /* 11535 */ 18706, 29762, 29741, 29746, 29778, 29792, 29808, 21044, 30785, 18347, 20986, 22160, 27057, 18347, 29845,
    /* 11550 */ 18347, 18347, 29841, 18347, 18347, 18347, 19342, 19347, 40714, 29861, 29905, 35869, 24447, 37562, 22069,
    /* 11565 */ 18347, 20608, 18347, 30340, 20606, 18347, 29926, 18347, 39673, 46186, 18347, 29946, 29984, 40714, 40714,
    /* 11580 */ 40107, 30002, 20080, 20080, 28771, 30025, 20253, 20253, 44629, 39413, 18347, 18347, 18347, 18347, 18347,
    /* 11595 */ 18347, 38326, 18347, 18347, 35499, 32611, 40714, 40714, 46803, 40714, 41199, 20080, 20080, 20080, 45153,
    /* 11610 */ 28182, 20253, 20253, 20253, 38408, 25550, 20116, 24033, 22353, 20850, 18347, 45710, 18347, 38331, 18347,
    /* 11625 */ 18347, 47435, 40714, 26096, 40714, 40714, 40109, 20080, 20080, 30046, 20080, 20208, 20253, 31847, 20253,
    /* 11640 */ 20253, 25608, 35881, 20848, 18347, 29478, 18347, 18347, 47275, 40713, 40714, 44564, 41198, 20080, 20080,
    /* 11655 */ 45439, 23988, 20253, 20253, 33996, 24360, 24091, 18347, 18347, 18347, 18347, 40798, 40714, 40714, 40108,
    /* 11670 */ 20080, 20080, 39936, 20253, 20253, 38970, 30092, 18347, 18347, 18347, 26348, 40714, 40106, 20080, 20080,
    /* 11685 */ 25504, 20253, 38970, 29289, 18347, 47431, 37140, 40107, 30063, 35799, 20253, 45107, 41652, 40713, 28179,
    /* 11700 */ 29410, 32738, 46274, 40106, 25465, 23410, 46277, 40109, 29408, 25569, 26349, 25463, 23410, 26347, 25463,
    /* 11715 */ 23411, 44084, 38941, 30082, 41340, 30110, 42938, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /* 11730 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /* 11745 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /* 11760 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /* 11775 */ 18347, 22023, 18347, 18347, 18347, 18347, 18347, 18347, 22044, 18347, 27552, 18347, 18347, 34247, 30139,
    /* 11790 */ 30155, 30162, 30178, 30183, 30188, 30204, 30218, 30234, 21044, 30785, 18347, 18347, 22160, 27057, 18347,
    /* 11805 */ 24065, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 47433, 40714, 40105, 20080, 25548, 37780, 37562,
    /* 11820 */ 30259, 24877, 18347, 18347, 30340, 18347, 18347, 18347, 18347, 30275, 18347, 18347, 43314, 40714, 40714,
    /* 11835 */ 40714, 40107, 20080, 20080, 20080, 33426, 20253, 20253, 20253, 44629, 39413, 18347, 18347, 18347, 18347,
    /* 11850 */ 18347, 18347, 18347, 35525, 18347, 32963, 42684, 40714, 40714, 40714, 40714, 41199, 20080, 20080, 20080,
    /* 11865 */ 20080, 25348, 20253, 20253, 20253, 20253, 25550, 20116, 30092, 36452, 18347, 18347, 30294, 18347, 37871,
    /* 11880 */ 18347, 37867, 47435, 40714, 46718, 40714, 40714, 40109, 20080, 30047, 20080, 20080, 20208, 20253, 31020,
    /* 11895 */ 20253, 20253, 37826, 30319, 18347, 18347, 35507, 18347, 18347, 18347, 40713, 40714, 40714, 41198, 20080,
    /* 11910 */ 20080, 20080, 20236, 20253, 20253, 20253, 24360, 24091, 18347, 18347, 30337, 30356, 47436, 40714, 39902,
    /* 11925 */ 40108, 20080, 47292, 38961, 20253, 32048, 38970, 30092, 30375, 30411, 34603, 30445, 30465, 30530, 28535,
    /* 11940 */ 30558, 30628, 30646, 30673, 24097, 18347, 23682, 47774, 41804, 44590, 41984, 30699, 45107, 47351, 27505,
    /* 11955 */ 27219, 30745, 30774, 46274, 40106, 25465, 23410, 46277, 40109, 29408, 25569, 26349, 25463, 23410, 26347,
    /* 11970 */ 25463, 23411, 44084, 32536, 40675, 30808, 42926, 42938, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /* 11985 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /* 12000 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /* 12015 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /* 12030 */ 18347, 18347, 22023, 18347, 18347, 18347, 18347, 18347, 18347, 22044, 18347, 18347, 18347, 18347, 18867,
    /* 12045 */ 18227, 18347, 18347, 18347, 18347, 25484, 25598, 26326, 28228, 21044, 45577, 18347, 18347, 30843, 27057,
    /* 12060 */ 18347, 18347, 21299, 18347, 21302, 18347, 35924, 30871, 24257, 47433, 30912, 30929, 20081, 26888, 33482,
    /* 12075 */ 30945, 30975, 29106, 18347, 31511, 30340, 18347, 45940, 18347, 21172, 18347, 18347, 18347, 43314, 40714,
    /* 12090 */ 45729, 40714, 29958, 20080, 20080, 30996, 33426, 20253, 20253, 31017, 44629, 39413, 18347, 18347, 18347,
    /* 12105 */ 18347, 31036, 18347, 18347, 18347, 18347, 22324, 32611, 40714, 40714, 40714, 33797, 41199, 20080, 20080,
    /* 12120 */ 20080, 20080, 34312, 20253, 20253, 20253, 20253, 40614, 20116, 31054, 18347, 18347, 18347, 18347, 18347,
    /* 12135 */ 18347, 18347, 18347, 31073, 31096, 40714, 40714, 40714, 40109, 31116, 20080, 20080, 20080, 20208, 31135,
    /* 12150 */ 20253, 20253, 20253, 25608, 24838, 18347, 18347, 18347, 18347, 18347, 18347, 40713, 40714, 40714, 26190,
    /* 12165 */ 20080, 20080, 20080, 31152, 20253, 20253, 20253, 31185, 24091, 18347, 18347, 31213, 18347, 47436, 40714,
    /* 12180 */ 40714, 40108, 20080, 20080, 38961, 20253, 20253, 38970, 30092, 18347, 18347, 18347, 26348, 40714, 40106,
    /* 12195 */ 20080, 20080, 25504, 20253, 38970, 43955, 31234, 47431, 40714, 40107, 20080, 29410, 20253, 31253, 41652,
    /* 12210 */ 31277, 31294, 31313, 45566, 46274, 40106, 25465, 23410, 46277, 40109, 29408, 25569, 26349, 25463, 23410,
    /* 12225 */ 26347, 25463, 23411, 44084, 32536, 40675, 32070, 42926, 42938, 18347, 18347, 18347, 18347, 18347, 18347,
    /* 12240 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /* 12255 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /* 12270 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /* 12285 */ 18347, 18347, 18347, 22023, 18347, 31334, 18347, 37384, 18347, 18347, 22044, 37340, 18957, 18347, 42407,
    /* 12300 */ 39730, 31353, 31369, 31376, 31392, 31408, 31423, 31435, 31451, 31467, 21044, 30785, 18347, 18347, 44870,
    /* 12315 */ 27057, 31509, 18347, 18347, 31527, 34613, 31589, 39046, 31574, 31829, 23739, 31606, 31626, 31661, 30495,
    /* 12330 */ 35207, 24019, 31677, 18347, 18347, 18347, 37713, 18347, 33247, 18347, 18347, 18347, 31698, 38319, 46859,
    /* 12345 */ 44747, 20178, 33276, 23276, 31722, 31764, 30542, 31784, 31808, 31845, 31863, 31892, 39413, 38573, 31590,
    /* 12360 */ 46512, 31920, 25042, 29324, 31937, 18347, 31955, 20043, 32611, 42060, 25177, 31976, 32011, 41199, 28263,
    /* 12375 */ 20080, 24423, 32303, 33314, 20253, 32047, 20214, 43682, 43925, 32064, 30092, 18347, 18347, 18347, 18347,
    /* 12390 */ 32086, 20063, 18347, 18347, 47435, 42052, 40714, 47002, 43533, 40653, 45474, 20080, 20080, 32102, 32490,
    /* 12405 */ 44308, 20253, 33921, 44781, 28439, 29023, 18347, 32152, 32178, 18803, 32194, 37033, 32210, 32228, 32248,
    /* 12420 */ 44065, 20080, 32264, 32291, 32319, 32345, 27269, 36579, 32362, 32378, 32400, 31261, 31706, 47655, 21681,
    /* 12435 */ 23115, 32436, 23311, 32460, 32476, 32524, 32559, 32575, 32635, 33691, 18347, 18571, 25926, 20389, 40714,
    /* 12450 */ 24990, 32661, 28918, 32893, 40210, 38970, 33576, 22866, 34644, 40714, 40107, 20080, 29410, 20253, 45047,
    /* 12465 */ 32686, 45851, 32706, 32729, 32754, 46302, 40106, 25465, 23410, 32802, 32818, 32842, 32858, 26349, 25463,
    /* 12480 */ 23410, 26347, 25463, 23411, 32881, 32909, 40675, 32070, 32932, 42938, 18347, 18347, 18347, 18347, 18347,
    /* 12495 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /* 12510 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /* 12525 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /* 12540 */ 18347, 18347, 18347, 18347, 22023, 18347, 18347, 18347, 20625, 18347, 18347, 22044, 18347, 18347, 18347,
    /* 12555 */ 18347, 18867, 18227, 18347, 42496, 18347, 27805, 25484, 30123, 26326, 28228, 21044, 30785, 18347, 18347,
    /* 12570 */ 22160, 27057, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 47433, 40714, 40105, 20080,
    /* 12585 */ 25548, 37780, 37562, 22069, 18347, 18347, 18347, 30340, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /* 12600 */ 43314, 40714, 40714, 40714, 40107, 20080, 20080, 20080, 33426, 20253, 20253, 20253, 38437, 39413, 18347,
    /* 12615 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 32611, 40714, 40714, 40714, 40714, 41199,
    /* 12630 */ 20080, 20080, 20080, 20080, 28182, 20253, 20253, 20253, 20253, 25550, 20116, 30092, 18347, 18347, 18347,
    /* 12645 */ 18347, 18347, 18347, 18347, 18347, 47435, 40714, 40714, 40714, 40714, 40109, 20080, 20080, 20080, 20080,
    /* 12660 */ 20208, 20253, 20253, 20253, 20253, 25608, 30090, 18347, 18347, 18347, 18347, 18347, 18347, 40713, 40714,
    /* 12675 */ 40714, 41198, 20080, 20080, 20080, 20236, 20253, 20253, 20253, 24360, 24091, 18347, 18347, 18347, 18347,
    /* 12690 */ 47436, 40714, 40714, 40108, 20080, 20080, 38961, 20253, 20253, 38970, 30092, 18347, 18347, 18347, 26348,
    /* 12705 */ 40714, 40106, 20080, 20080, 25504, 20253, 38970, 30092, 18347, 47431, 40714, 40107, 20080, 29410, 20253,
    /* 12720 */ 45107, 41652, 40713, 28179, 29410, 32738, 46274, 40106, 25465, 23410, 46277, 40109, 29408, 25569, 26349,
    /* 12735 */ 25463, 23410, 26347, 25463, 23411, 44084, 32536, 40675, 32070, 42926, 42938, 18347, 18347, 18347, 18347,
    /* 12750 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /* 12765 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /* 12780 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /* 12795 */ 18347, 18347, 18347, 18347, 18347, 22023, 18347, 18347, 18347, 18347, 32962, 18347, 22044, 18347, 18347,
    /* 12810 */ 18347, 18347, 18867, 18227, 18347, 18347, 18347, 18347, 25484, 25598, 26326, 28228, 21044, 30785, 18347,
    /* 12825 */ 18347, 22160, 27057, 18347, 32979, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 47433, 40714, 40105,
    /* 12840 */ 20080, 25548, 37780, 37562, 22069, 18347, 18347, 18347, 30340, 18347, 18347, 18347, 18347, 18347, 18347,
    /* 12855 */ 18347, 43314, 40714, 40714, 40714, 40107, 20080, 20080, 20080, 33426, 20253, 20253, 20253, 44629, 39413,
    /* 12870 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 32611, 40714, 40714, 40714, 40714,
    /* 12885 */ 41199, 20080, 20080, 20080, 20080, 28182, 20253, 20253, 20253, 20253, 25550, 20116, 30092, 18347, 31550,
    /* 12900 */ 18347, 18347, 18347, 18347, 18347, 18347, 47435, 32999, 40714, 40714, 40714, 40109, 33017, 20080, 20080,
    /* 12915 */ 20080, 23497, 20253, 20253, 20253, 20253, 25608, 30090, 18347, 18347, 18347, 18347, 18347, 18347, 40713,
    /* 12930 */ 40714, 40714, 41198, 20080, 20080, 20080, 20236, 20253, 20253, 20253, 24360, 24091, 18347, 18347, 18347,
    /* 12945 */ 18347, 47436, 40714, 40714, 40108, 20080, 20080, 38961, 20253, 20253, 38970, 30092, 18347, 18347, 18347,
    /* 12960 */ 26348, 40714, 40106, 20080, 20080, 25504, 20253, 38970, 30092, 18347, 47431, 40714, 40107, 20080, 29410,
    /* 12975 */ 20253, 45107, 41652, 40713, 28179, 29410, 32738, 46274, 40106, 25465, 23410, 46277, 40109, 29408, 25569,
    /* 12990 */ 26349, 25463, 23410, 26347, 25463, 23411, 44084, 32536, 40675, 32070, 42926, 42938, 18347, 18347, 18347,
    /* 13005 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /* 13020 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /* 13035 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /* 13050 */ 18347, 18347, 18347, 18347, 18347, 18347, 22023, 18347, 33067, 18347, 18347, 33034, 18347, 22044, 18347,
    /* 13065 */ 27891, 18347, 20036, 33053, 33085, 33101, 33117, 33144, 33149, 33128, 33165, 33179, 33195, 21044, 30785,
    /* 13080 */ 28237, 18347, 22160, 27057, 21920, 22492, 18347, 18347, 33540, 18347, 33540, 33544, 33228, 25999, 33263,
    /* 13095 */ 26011, 33302, 37499, 33330, 24329, 33346, 24877, 33362, 18347, 30303, 32136, 18347, 36887, 19757, 18347,
    /* 13110 */ 35589, 27533, 33380, 33404, 25070, 35116, 39868, 39759, 28554, 33450, 33472, 33498, 30030, 33561, 27934,
    /* 13125 */ 33597, 18347, 22331, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 42684, 33631, 43821, 32444,
    /* 13140 */ 46129, 41199, 31645, 29343, 20080, 33656, 37648, 44714, 33676, 20253, 33725, 33730, 20116, 26986, 18347,
    /* 13155 */ 18347, 33746, 18347, 36929, 38493, 18347, 18347, 47435, 40714, 31278, 38130, 33794, 40109, 20080, 20080,
    /* 13170 */ 33813, 33875, 20208, 20253, 25505, 37228, 33898, 25608, 30090, 20760, 40250, 18347, 18347, 18347, 18347,
    /* 13185 */ 32619, 40714, 40714, 41198, 33018, 20080, 20080, 20236, 20253, 33919, 20253, 24360, 24091, 40954, 41644,
    /* 13200 */ 18347, 21872, 43510, 33937, 47058, 41821, 44112, 20080, 33958, 47318, 20253, 37259, 30092, 34501, 18347,
    /* 13215 */ 31558, 26348, 33974, 40106, 46056, 20080, 25504, 33993, 38970, 30092, 40962, 47431, 40714, 32031, 20080,
    /* 13230 */ 34012, 37931, 45107, 41652, 40713, 28179, 29410, 32738, 46274, 40106, 25465, 23410, 46277, 40109, 29408,
    /* 13245 */ 25569, 26349, 25463, 23410, 26809, 27248, 34032, 18748, 32536, 40675, 34048, 42926, 42938, 18347, 18347,
    /* 13260 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /* 13275 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /* 13290 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /* 13305 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 22023, 34083, 18347, 18347, 18347, 34082, 18347, 22044,
    /* 13320 */ 34099, 31057, 18347, 18347, 20026, 34119, 34147, 34163, 34131, 34179, 34184, 34200, 34214, 34230, 21044,
    /* 13335 */ 30785, 18516, 18347, 22160, 27057, 18347, 18347, 18347, 18347, 18521, 18347, 18521, 18525, 34263, 34269,
    /* 13350 */ 34285, 29512, 34307, 30600, 37780, 37562, 22069, 18347, 18347, 29319, 36641, 18347, 29483, 44663, 43232,
    /* 13365 */ 18347, 18347, 34328, 43314, 40714, 36061, 34345, 34381, 44343, 25443, 43852, 33426, 34407, 28805, 45555,
    /* 13380 */ 30758, 34427, 34481, 34497, 34517, 34768, 18347, 18347, 18347, 38599, 18347, 18347, 32611, 40714, 40714,
    /* 13395 */ 40714, 40714, 34540, 25793, 34566, 37839, 20080, 28182, 28645, 43627, 42627, 20253, 25550, 20116, 30092,
    /* 13410 */ 18347, 41602, 26735, 18347, 19777, 37010, 34588, 18347, 28150, 43827, 40714, 36257, 35369, 20805, 37670,
    /* 13425 */ 20080, 40342, 20080, 38402, 26397, 20253, 46927, 20253, 25608, 30090, 18347, 18347, 18347, 18347, 18347,
    /* 13440 */ 18347, 40713, 40714, 40714, 41198, 20080, 20080, 20080, 20236, 20253, 20253, 20253, 24360, 24091, 18347,
    /* 13455 */ 18347, 18347, 18347, 47436, 40714, 40714, 40108, 20080, 20080, 38961, 20253, 20253, 38970, 45113, 18347,
    /* 13470 */ 18347, 18347, 26057, 40714, 40106, 27173, 20080, 41841, 20253, 38970, 30092, 18347, 47431, 40714, 40107,
    /* 13485 */ 20080, 29410, 20253, 34636, 41652, 40713, 28179, 29410, 32738, 34660, 40087, 44119, 39969, 34663, 25845,
    /* 13500 */ 29447, 25569, 26349, 25463, 23410, 26347, 25463, 23411, 44084, 34679, 40675, 32070, 42926, 42938, 18347,
    /* 13515 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /* 13530 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /* 13545 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /* 13560 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 22023, 18347, 34703, 18347, 18347, 42782, 18347,
    /* 13575 */ 34723, 18347, 22028, 34756, 20684, 34790, 34822, 34845, 34871, 34895, 34879, 34855, 34911, 34925, 34941,
    /* 13590 */ 32786, 30785, 33615, 18859, 28084, 36654, 34966, 18347, 35003, 22215, 24047, 35022, 22802, 35073, 35091,
    /* 13605 */ 22705, 35132, 22717, 35183, 38086, 35223, 37562, 22069, 26034, 35239, 18347, 21724, 35261, 35282, 30429,
    /* 13620 */ 19877, 33703, 35310, 35346, 43314, 35368, 42861, 39285, 35385, 44986, 35419, 35437, 33426, 35456, 20253,
    /* 13635 */ 35472, 31876, 35490, 18347, 34239, 18675, 22907, 18347, 18347, 18347, 35523, 18347, 26465, 47723, 24957,
    /* 13650 */ 40714, 40714, 40714, 41199, 35541, 20080, 20080, 20080, 28182, 41485, 20253, 20253, 20253, 23429, 20116,
    /* 13665 */ 30092, 22767, 18347, 18347, 18347, 41905, 18347, 44540, 35572, 35352, 40714, 40714, 42856, 35605, 25870,
    /* 13680 */ 20080, 20080, 39313, 41957, 35197, 20253, 20253, 35625, 43592, 45810, 31748, 42789, 35646, 35669, 43961,
    /* 13695 */ 22872, 35709, 25969, 35731, 35777, 27851, 20813, 35815, 35854, 20236, 37758, 35906, 35940, 24360, 23769,
    /* 13710 */ 47536, 35956, 35985, 44385, 36020, 23250, 36046, 36082, 41072, 37460, 36116, 44314, 23958, 36149, 30092,
    /* 13725 */ 36188, 18347, 34774, 36223, 36245, 27646, 31119, 36292, 44777, 36316, 38970, 32589, 22677, 35245, 36353,
    /* 13740 */ 43153, 36379, 38810, 36418, 36443, 40016, 25329, 34365, 37998, 32738, 41039, 35788, 36476, 36497, 35037,
    /* 13755 */ 36548, 36564, 36627, 28158, 37846, 45242, 26347, 25463, 23411, 44084, 30612, 36670, 32070, 42926, 36696,
    /* 13770 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /* 13785 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /* 13800 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /* 13815 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 22023, 18347, 18347, 18347, 18347, 24912,
    /* 13830 */ 18347, 22044, 18347, 46956, 36716, 18347, 18683, 36736, 36771, 36778, 36794, 36750, 36755, 36810, 36824,
    /* 13845 */ 36840, 36873, 36908, 36924, 36945, 31337, 46767, 36973, 37009, 33526, 37026, 37049, 23073, 37065, 19708,
    /* 13860 */ 37094, 37110, 37126, 37162, 37178, 32117, 37207, 37244, 37285, 37318, 18347, 37336, 34806, 18347, 20161,
    /* 13875 */ 34800, 37356, 37380, 18347, 37400, 43314, 30449, 37420, 40081, 42578, 20080, 37450, 37484, 33426, 20253,
    /* 13890 */ 37524, 37540, 40371, 39413, 18347, 18347, 41741, 18347, 43259, 18347, 43218, 18347, 44933, 37578, 37598,
    /* 13905 */ 23918, 31904, 40714, 45863, 32212, 37642, 45754, 37664, 20080, 37686, 37729, 27339, 37751, 20253, 37774,
    /* 13920 */ 20116, 36680, 37796, 37862, 20577, 24594, 18347, 18347, 18347, 18615, 47435, 40714, 36269, 37887, 40714,
    /* 13935 */ 40109, 20080, 47104, 37906, 20080, 20208, 20253, 43044, 37928, 20253, 25608, 30090, 18347, 18347, 39588,
    /* 13950 */ 37947, 18347, 45617, 42692, 40714, 40714, 37967, 20080, 20080, 20080, 36300, 20253, 20253, 20253, 41296,
    /* 13965 */ 24091, 20891, 43503, 18347, 18347, 43987, 40714, 40714, 37987, 20080, 38014, 32670, 20253, 38032, 38970,
    /* 13980 */ 32384, 18347, 18347, 18347, 32916, 38050, 40106, 38071, 20080, 33850, 38102, 38970, 35921, 18347, 47431,
    /* 13995 */ 40714, 40107, 20080, 29410, 20253, 34550, 41652, 38123, 38146, 43581, 36427, 38180, 38231, 38268, 38309,
    /* 14010 */ 38352, 38388, 38424, 38465, 26349, 25463, 23410, 26347, 25463, 23411, 44084, 42985, 23286, 32070, 41165,
    /* 14025 */ 42938, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /* 14040 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /* 14055 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /* 14070 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 22023, 18347, 38488, 18347, 18347,
    /* 14085 */ 37404, 18347, 38509, 18347, 18347, 38534, 28141, 38556, 38589, 18347, 18347, 38633, 38622, 38649, 38661,
    /* 14100 */ 38677, 38693, 21044, 30785, 18347, 18308, 22160, 27057, 18347, 18347, 38726, 21752, 18347, 18347, 19103,
    /* 14115 */ 31237, 18347, 47433, 31995, 40105, 38783, 24341, 38749, 37562, 22069, 18347, 32329, 18347, 30340, 18347,
    /* 14130 */ 18347, 29621, 33069, 18347, 18347, 28402, 43314, 37626, 38055, 37613, 38765, 38799, 38826, 38848, 33426,
    /* 14145 */ 38885, 38910, 38929, 36592, 39413, 38986, 39002, 45298, 21674, 18347, 18347, 39022, 18347, 18347, 18347,
    /* 14160 */ 32611, 40714, 33001, 40714, 40714, 41199, 20080, 20080, 36100, 20080, 28182, 20253, 20253, 45528, 20253,
    /* 14175 */ 25550, 20116, 30959, 31960, 41600, 39043, 18347, 45375, 36004, 33778, 44015, 38702, 40714, 39062, 40714,
    /* 14190 */ 40714, 40109, 20080, 39096, 20080, 20080, 38862, 20253, 39123, 20253, 20253, 25608, 30090, 18347, 39148,
    /* 14205 */ 18347, 47192, 18347, 42942, 40713, 42693, 40714, 34291, 20080, 20080, 39166, 23350, 20253, 20253, 39186,
    /* 14220 */ 24360, 24091, 18347, 18347, 18347, 18347, 47436, 40714, 40714, 40108, 20080, 20080, 38961, 20253, 20253,
    /* 14235 */ 38970, 36330, 42504, 18347, 18347, 26348, 40714, 40106, 20080, 20080, 25504, 20253, 27771, 39206, 18347,
    /* 14250 */ 47431, 40714, 40107, 20080, 29410, 20253, 45107, 41652, 40713, 28179, 29410, 33859, 46435, 37971, 44349,
    /* 14265 */ 23410, 35684, 40109, 29408, 25569, 26349, 25463, 23410, 26347, 25463, 23411, 44084, 32536, 40675, 32070,
    /* 14280 */ 42926, 42938, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /* 14295 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /* 14310 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /* 14325 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 22023, 18347, 18347, 18347,
    /* 14340 */ 18347, 18347, 18347, 22044, 18347, 18347, 18347, 18347, 18867, 18227, 18347, 18347, 18347, 18347, 25484,
    /* 14355 */ 25598, 26326, 28228, 21044, 30785, 18347, 18347, 22160, 27057, 18347, 24764, 18347, 18347, 18347, 39227,
    /* 14370 */ 39224, 39243, 39260, 39266, 39282, 39301, 39336, 39354, 35838, 37562, 39379, 23718, 18347, 18347, 30340,
    /* 14385 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 43314, 40714, 40714, 40714, 40107, 20080, 20080, 20080,
    /* 14400 */ 33426, 20253, 20253, 20253, 44629, 39413, 18347, 18347, 18347, 36892, 18347, 18347, 18347, 18347, 18347,
    /* 14415 */ 18347, 47765, 40714, 40714, 40714, 40714, 41199, 20080, 20080, 20080, 20080, 26135, 20253, 20253, 20253,
    /* 14430 */ 20253, 25550, 20116, 30092, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 47435, 40714, 40714,
    /* 14445 */ 40714, 40714, 40109, 20080, 20080, 20080, 20080, 20208, 20253, 20253, 20253, 20253, 25608, 30090, 18347,
    /* 14460 */ 18347, 18347, 18347, 18347, 18347, 40713, 40714, 40714, 41198, 20080, 20080, 20080, 20236, 20253, 20253,
    /* 14475 */ 20253, 24360, 24091, 18347, 18347, 18347, 18347, 47436, 40714, 40714, 40108, 20080, 20080, 38961, 20253,
    /* 14490 */ 20253, 38970, 30092, 18347, 18347, 18347, 26348, 40714, 40106, 20080, 20080, 25504, 20253, 38970, 30092,
    /* 14505 */ 18347, 47431, 40714, 39395, 47165, 29410, 39429, 45107, 41652, 40713, 28179, 29410, 32738, 46274, 40106,
    /* 14520 */ 25465, 23410, 46277, 40109, 29408, 25569, 26349, 25463, 23410, 26347, 25463, 23411, 44084, 32536, 40675,
    /* 14535 */ 32070, 42926, 42938, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /* 14550 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /* 14565 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /* 14580 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 22023, 18347, 18347,
    /* 14595 */ 18347, 18347, 30278, 18347, 39447, 18347, 28624, 28618, 18347, 23777, 39481, 44535, 39512, 39524, 39491,
    /* 14610 */ 39496, 39540, 39554, 39570, 39612, 39636, 18347, 20740, 22160, 27057, 24582, 27964, 23522, 28246, 20289,
    /* 14625 */ 18935, 39719, 39659, 39707, 23866, 35147, 27417, 39746, 35556, 26956, 26941, 39775, 39796, 18347, 18347,
    /* 14640 */ 39006, 39829, 19988, 39845, 18347, 31476, 18347, 37302, 39862, 43358, 26287, 39884, 40107, 25104, 20080,
    /* 14655 */ 39927, 39961, 25124, 30630, 40453, 39985, 40001, 33204, 18347, 18347, 18347, 18347, 22007, 18347, 46086,
    /* 14670 */ 31218, 21435, 32611, 40714, 40051, 46036, 40068, 40103, 40125, 29232, 20080, 41448, 40145, 40206, 26895,
    /* 14685 */ 20253, 47325, 44618, 20116, 30092, 40226, 18347, 19047, 39150, 36849, 40248, 26695, 38518, 40266, 40714,
    /* 14700 */ 42535, 40282, 35609, 35693, 20080, 40307, 40323, 20080, 40358, 20253, 40406, 40443, 25141, 25608, 25018,
    /* 14715 */ 39579, 39244, 18347, 42329, 36460, 30390, 35330, 24856, 40714, 41198, 30009, 38016, 20080, 20236, 28285,
    /* 14730 */ 26170, 20253, 24360, 40469, 40485, 40502, 40523, 18347, 38472, 40714, 36229, 24119, 20080, 20080, 40541,
    /* 14745 */ 20253, 20253, 40584, 32132, 18347, 18347, 18347, 29588, 40714, 47212, 20080, 20080, 40610, 20253, 39132,
    /* 14760 */ 29555, 18347, 47431, 40714, 40107, 20080, 29410, 20253, 45107, 41652, 40713, 28179, 29410, 37508, 47413,
    /* 14775 */ 40630, 35403, 36172, 46277, 40109, 29408, 40694, 40646, 40669, 40691, 40710, 25463, 23411, 44084, 43078,
    /* 14790 */ 40731, 45599, 42926, 42938, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /* 14805 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /* 14820 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /* 14835 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 22023, 40747,
    /* 14850 */ 39460, 18347, 18347, 18347, 40769, 40789, 46667, 25820, 41413, 37078, 40822, 40838, 40753, 40854, 40869,
    /* 14865 */ 40885, 40901, 40913, 40929, 40945, 21044, 32765, 22232, 18347, 22995, 27057, 18347, 34440, 18347, 24552,
    /* 14880 */ 40978, 41004, 20567, 18347, 41024, 34453, 41798, 34465, 41066, 42973, 41273, 37562, 41088, 29715, 21516,
    /* 14895 */ 21647, 30340, 31939, 41115, 18347, 18347, 21894, 41370, 28058, 41136, 41181, 41197, 40715, 45419, 41215,
    /* 14910 */ 41241, 20080, 28952, 41265, 41289, 20253, 44629, 39413, 31682, 21942, 18347, 34620, 46878, 41312, 18347,
    /* 14925 */ 18347, 18347, 33364, 32611, 42890, 38367, 40714, 34066, 41199, 33660, 39170, 20080, 20080, 45482, 25217,
    /* 14940 */ 25367, 20253, 20253, 43599, 41334, 30092, 18347, 18347, 23553, 41356, 18347, 39027, 41400, 18347, 18735,
    /* 14955 */ 40714, 40714, 41429, 40714, 41464, 20080, 20080, 41501, 35395, 35829, 20253, 20253, 41537, 44499, 43388,
    /* 14970 */ 41565, 41598, 41618, 26510, 20871, 18347, 41635, 40713, 24298, 40714, 43320, 20080, 47229, 36092, 20236,
    /* 14985 */ 20253, 20253, 41669, 24360, 40594, 18347, 21414, 46110, 18811, 28324, 40714, 40714, 41702, 45657, 33882,
    /* 15000 */ 38155, 39190, 38252, 38970, 30092, 18347, 35998, 41727, 26348, 40714, 40106, 20080, 20080, 25504, 20253,
    /* 15015 */ 38164, 30092, 41763, 41784, 40714, 41820, 20080, 41837, 38107, 41857, 41893, 41927, 41949, 41475, 39363,
    /* 15030 */ 46274, 41973, 42007, 42032, 46277, 40109, 29408, 25569, 42076, 26116, 36133, 44042, 27180, 45023, 42092,
    /* 15045 */ 32536, 40675, 32070, 42926, 42938, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /* 15060 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /* 15075 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /* 15090 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 22023,
    /* 15105 */ 40029, 18347, 18347, 18347, 18347, 42108, 22044, 18347, 18347, 22053, 18347, 42132, 42158, 42235, 42247,
    /* 15120 */ 42180, 42221, 42263, 42275, 42291, 42307, 42352, 30785, 43188, 18347, 42376, 27057, 33037, 42394, 39813,
    /* 15135 */ 18347, 42319, 42423, 42459, 42483, 28130, 42520, 42565, 42604, 42651, 44295, 42709, 24814, 42725, 42749,
    /* 15150 */ 31038, 30243, 27012, 30420, 18347, 42769, 42805, 45252, 41384, 42825, 42841, 23901, 42877, 37146, 42896,
    /* 15165 */ 42912, 42958, 43011, 43031, 43066, 43094, 43123, 43141, 39413, 43169, 43204, 43255, 19073, 22814, 43275,
    /* 15180 */ 18347, 18347, 40988, 43299, 35322, 43336, 43374, 40714, 40714, 41151, 41225, 28451, 43404, 26228, 28182,
    /* 15195 */ 43657, 44181, 44172, 20254, 43437, 43456, 46576, 18347, 43239, 34524, 46965, 43472, 43493, 46583, 47516,
    /* 15210 */ 27496, 38449, 35161, 45130, 43526, 43549, 45822, 29214, 20080, 43570, 38245, 43615, 43649, 20253, 43673,
    /* 15225 */ 25608, 30090, 42142, 18347, 39780, 43698, 18347, 43717, 43741, 43774, 43808, 41198, 43843, 29201, 43868,
    /* 15240 */ 43890, 43916, 46828, 32501, 43941, 44375, 43977, 18347, 18460, 44003, 44037, 44058, 26078, 44081, 44100,
    /* 15255 */ 20080, 44135, 44160, 20253, 44197, 30092, 18229, 44223, 18347, 26348, 44257, 44280, 39320, 44330, 32946,
    /* 15270 */ 46918, 44365, 29889, 47039, 18482, 44419, 35742, 44435, 44451, 44486, 44522, 46638, 44556, 44580, 44606,
    /* 15285 */ 44645, 46274, 40106, 25465, 23410, 46277, 40109, 29408, 25569, 26349, 25463, 32508, 29137, 44679, 47137,
    /* 15300 */ 44695, 44730, 40675, 32070, 44763, 42938, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /* 15315 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /* 15330 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /* 15345 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /* 15360 */ 22023, 18347, 18347, 18347, 18347, 18347, 31493, 22044, 18347, 18347, 44797, 18347, 33212, 44817, 44838,
    /* 15375 */ 44859, 19539, 44838, 44843, 44886, 44900, 44916, 21044, 30785, 18347, 18347, 22160, 44949, 23206, 18347,
    /* 15390 */ 18347, 18347, 18347, 35006, 18347, 37951, 18347, 47433, 33977, 23587, 44973, 23393, 45008, 23381, 45063,
    /* 15405 */ 25422, 18347, 18347, 30340, 18347, 18347, 30980, 27076, 18347, 29111, 18347, 45084, 45129, 40714, 38372,
    /* 15420 */ 40107, 45146, 20080, 20080, 45169, 45185, 20253, 20253, 45208, 28514, 45268, 45291, 18347, 45314, 18347,
    /* 15435 */ 18347, 18347, 45344, 45368, 18347, 45391, 31100, 33286, 45870, 36276, 45415, 20080, 45435, 45455, 45498,
    /* 15450 */ 29524, 20253, 45521, 45544, 44463, 44144, 45593, 30092, 18347, 33545, 18347, 45615, 18347, 18347, 42435,
    /* 15465 */ 18347, 38606, 31610, 40714, 40714, 40714, 40109, 43015, 20080, 20080, 20080, 36393, 41521, 20253, 20253,
    /* 15480 */ 20253, 25608, 30090, 28872, 20926, 18347, 18347, 18347, 45633, 34061, 40714, 40714, 41198, 45653, 20080,
    /* 15495 */ 20080, 20236, 45673, 20253, 20253, 24360, 24091, 45706, 18347, 43900, 18347, 47436, 45726, 40052, 36532,
    /* 15510 */ 45745, 20080, 39080, 45770, 20253, 38894, 30092, 46538, 18347, 18347, 26348, 40714, 40106, 20080, 20080,
    /* 15525 */ 25504, 20253, 38970, 30092, 18347, 47431, 40714, 40107, 20080, 29410, 20253, 45107, 41652, 40806, 47079,
    /* 15540 */ 32275, 32738, 46274, 40106, 25465, 23410, 46277, 40109, 29408, 25569, 26349, 25463, 23410, 45795, 43874,
    /* 15555 */ 27366, 44084, 32536, 29968, 45838, 42926, 42938, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /* 15570 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /* 15585 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /* 15600 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /* 15615 */ 18347, 22023, 18347, 18347, 18347, 18347, 18347, 18997, 45886, 18347, 45917, 45937, 18347, 39620, 45956,
    /* 15630 */ 30094, 21018, 45896, 20851, 41120, 45975, 45989, 46005, 21044, 30785, 18347, 18347, 22160, 27057, 18347,
    /* 15645 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 47433, 46033, 27161, 46052, 23949, 37780, 37562,
    /* 15660 */ 22069, 18347, 18347, 46072, 30340, 18347, 18347, 18347, 18347, 18347, 46108, 18347, 43314, 46126, 29593,
    /* 15675 */ 40714, 40107, 35752, 20080, 46145, 33426, 46909, 20253, 46165, 44629, 39413, 18347, 18347, 18347, 18347,
    /* 15690 */ 18347, 18347, 46183, 18347, 18975, 18347, 32611, 40714, 39893, 40714, 40714, 41199, 20080, 20080, 46202,
    /* 15705 */ 20080, 28182, 20253, 20253, 46222, 20253, 25550, 20116, 30092, 18347, 18347, 18347, 18347, 18347, 18347,
    /* 15720 */ 18347, 18347, 47435, 40714, 40714, 40714, 40714, 40109, 20080, 20080, 20080, 20080, 20208, 20253, 20253,
    /* 15735 */ 20253, 20253, 25608, 30090, 18347, 18347, 18347, 18347, 18347, 18347, 40713, 40714, 40714, 41198, 20080,
    /* 15750 */ 20080, 20080, 20236, 20253, 20253, 20253, 24360, 37269, 18347, 18347, 18347, 18347, 47436, 40714, 40714,
    /* 15765 */ 40108, 20080, 20080, 38961, 20253, 20253, 38970, 30092, 18347, 46247, 18347, 26348, 40714, 40106, 20080,
    /* 15780 */ 20080, 25504, 20253, 38970, 30092, 18347, 47431, 40714, 40107, 20080, 29410, 20253, 27862, 46265, 40713,
    /* 15795 */ 28179, 29410, 32738, 46274, 40106, 25465, 23410, 46277, 40109, 29408, 25569, 26349, 25463, 23410, 26347,
    /* 15810 */ 25463, 23411, 44084, 32536, 40675, 32070, 42926, 42938, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /* 15825 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /* 15840 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /* 15855 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /* 15870 */ 18347, 18347, 22023, 18347, 18347, 18347, 18347, 18347, 22253, 46293, 18347, 21959, 18347, 27882, 46318,
    /* 15885 */ 46334, 18347, 20495, 46350, 46366, 46382, 46394, 46410, 46426, 21044, 30785, 18347, 18347, 22160, 27057,
    /* 15900 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 47433, 40714, 29172, 25198, 25548, 46451,
    /* 15915 */ 30588, 46488, 18347, 18347, 18347, 30340, 18347, 18347, 18347, 45959, 18347, 18347, 18347, 43314, 40714,
    /* 15930 */ 40714, 40714, 40107, 20080, 20080, 20080, 33426, 20253, 20253, 20253, 44629, 39413, 18347, 18347, 18347,
    /* 15945 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 32611, 40714, 40714, 40714, 40714, 41199, 20080, 20080,
    /* 15960 */ 20080, 20080, 28182, 20253, 20253, 20253, 20253, 25550, 20116, 30092, 18347, 18347, 18347, 18347, 18347,
    /* 15975 */ 46509, 18347, 18347, 41911, 40714, 40714, 40714, 40714, 39911, 20080, 20080, 20080, 20080, 36163, 20253,
    /* 15990 */ 20253, 20253, 20253, 25608, 30090, 18347, 34707, 18347, 18347, 18347, 18347, 40713, 40383, 40714, 29986,
    /* 16005 */ 20080, 37468, 20080, 46528, 20253, 38869, 20253, 46562, 24091, 18347, 18347, 18347, 18347, 47436, 40714,
    /* 16020 */ 40714, 40108, 20080, 20080, 38961, 20253, 20253, 38970, 30092, 18347, 18347, 18347, 26348, 40714, 40106,
    /* 16035 */ 20080, 20080, 25504, 20253, 38970, 30092, 18347, 47431, 40714, 40107, 20080, 29410, 20253, 45107, 41652,
    /* 16050 */ 40713, 28179, 29410, 32738, 46274, 40106, 25465, 23410, 46277, 40109, 29408, 25569, 26349, 25463, 23410,
    /* 16065 */ 26347, 25463, 23411, 44084, 32536, 40675, 32070, 42926, 42938, 18347, 18347, 18347, 18347, 18347, 18347,
    /* 16080 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /* 16095 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /* 16110 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /* 16125 */ 18347, 18347, 18347, 22248, 18347, 18347, 18347, 18347, 18347, 18347, 22044, 18347, 18347, 18347, 18347,
    /* 16140 */ 18867, 18227, 18347, 18347, 18347, 18347, 41768, 46599, 46613, 46629, 21044, 30785, 18347, 18347, 22160,
    /* 16155 */ 46654, 18347, 18347, 18347, 18347, 18347, 46699, 18347, 18347, 46688, 32162, 46715, 28906, 46734, 26380,
    /* 16170 */ 37780, 37562, 22069, 18347, 18347, 18347, 46754, 18347, 40568, 36207, 18347, 18347, 18347, 18347, 43314,
    /* 16185 */ 40714, 46801, 40714, 43758, 20080, 45465, 34572, 33426, 20253, 46819, 45690, 44629, 23627, 46844, 46875,
    /* 16200 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 32611, 40714, 40714, 40714, 40714, 41199, 20080,
    /* 16215 */ 20080, 20080, 20080, 28182, 20253, 20253, 20253, 20253, 25550, 20116, 30092, 18347, 18347, 18347, 18347,
    /* 16230 */ 18347, 20281, 18347, 18347, 42042, 40714, 41933, 40714, 40714, 40109, 20080, 46149, 20080, 20080, 42618,
    /* 16245 */ 20253, 43633, 20253, 20253, 25608, 30090, 39691, 18347, 18347, 18347, 18347, 18347, 28723, 40714, 40714,
    /* 16260 */ 41198, 38832, 20080, 20080, 20236, 35630, 20253, 20253, 24360, 24091, 18347, 18347, 18347, 18347, 47436,
    /* 16275 */ 40714, 40714, 40108, 20080, 20080, 38961, 20253, 20253, 38970, 30092, 18347, 18347, 18347, 26348, 40714,
    /* 16290 */ 40106, 20080, 20080, 25504, 20253, 38970, 30092, 18347, 47431, 40714, 40107, 20080, 29410, 20253, 45107,
    /* 16305 */ 41652, 40713, 28179, 29410, 32738, 46274, 40106, 25465, 23410, 46277, 40109, 29408, 25569, 26349, 25463,
    /* 16320 */ 23410, 26347, 25463, 23411, 44084, 32536, 40675, 32070, 42926, 42938, 18347, 18347, 18347, 18347, 18347,
    /* 16335 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /* 16350 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /* 16365 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /* 16380 */ 18347, 18347, 18347, 18347, 22023, 18347, 18347, 18347, 18347, 18347, 18347, 22044, 18347, 18347, 18347,
    /* 16395 */ 18347, 18867, 18227, 18347, 18347, 18347, 18347, 25484, 25598, 26326, 28228, 21044, 29034, 18347, 18347,
    /* 16410 */ 22160, 27057, 18347, 18605, 18347, 18347, 18347, 18347, 18611, 18347, 18347, 29044, 37890, 33942, 31768,
    /* 16425 */ 25548, 46894, 26971, 46943, 18347, 18347, 46981, 30340, 18347, 18347, 18347, 18347, 18347, 18347, 20540,
    /* 16440 */ 43314, 40714, 40714, 46999, 40107, 20080, 20080, 31001, 33426, 20253, 20253, 44470, 44629, 39413, 18347,
    /* 16455 */ 35075, 18347, 18347, 22736, 18347, 18347, 18347, 18347, 18347, 32611, 36525, 40714, 47018, 40714, 41199,
    /* 16470 */ 31297, 20080, 46206, 20080, 28182, 43125, 20253, 38913, 20253, 25550, 20116, 30092, 18347, 18347, 47037,
    /* 16485 */ 18347, 18347, 18347, 18347, 18347, 47435, 40714, 47055, 40714, 40714, 47074, 20080, 47095, 20080, 20080,
    /* 16500 */ 20208, 31136, 47128, 20253, 20253, 47153, 30090, 18347, 18347, 47188, 18347, 18347, 18347, 40713, 24155,
    /* 16515 */ 40714, 47208, 20080, 20080, 47228, 45505, 20253, 20253, 47245, 43050, 24091, 18347, 47271, 18347, 18347,
    /* 16530 */ 47436, 40714, 40714, 40108, 20080, 20080, 38961, 20253, 20253, 38970, 25916, 18347, 18347, 34979, 22459,
    /* 16545 */ 40714, 40106, 47291, 20080, 27259, 20253, 38970, 30092, 45275, 47431, 35167, 40107, 47172, 29410, 47308,
    /* 16560 */ 45107, 41652, 40713, 28179, 29410, 32738, 46274, 40106, 25465, 23410, 46277, 40109, 29408, 25569, 26349,
    /* 16575 */ 25463, 23410, 26347, 25463, 23411, 44084, 32536, 40675, 32070, 42926, 42938, 18347, 18347, 18347, 18347,
    /* 16590 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /* 16605 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /* 16620 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /* 16635 */ 18347, 18347, 18347, 18347, 18347, 22023, 18347, 18347, 18347, 18347, 18347, 18347, 22044, 18347, 18347,
    /* 16650 */ 18347, 18347, 18867, 47341, 18347, 18347, 18347, 18347, 25484, 25598, 26326, 28228, 21044, 30785, 18347,
    /* 16665 */ 18347, 22160, 27057, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 47433, 40714, 40105,
    /* 16680 */ 20080, 25548, 37780, 37562, 22069, 18347, 18347, 18347, 30340, 18347, 18347, 18347, 18347, 18347, 18347,
    /* 16695 */ 18347, 43314, 40714, 40714, 40714, 40107, 20080, 20080, 20080, 33426, 20253, 20253, 20253, 44629, 39413,
    /* 16710 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 32611, 40714, 40714, 40714, 40714,
    /* 16725 */ 41199, 20080, 20080, 20080, 20080, 28182, 20253, 20253, 20253, 20253, 25550, 20116, 30092, 18347, 18347,
    /* 16740 */ 18347, 18347, 18347, 18347, 18347, 18347, 47435, 40714, 40714, 40714, 40714, 40109, 20080, 20080, 20080,
    /* 16755 */ 20080, 20208, 20253, 20253, 20253, 20253, 25608, 30090, 18347, 18347, 18347, 18347, 18347, 18347, 40713,
    /* 16770 */ 40714, 40714, 41198, 20080, 20080, 20080, 20236, 20253, 20253, 20253, 24360, 24091, 18347, 18347, 18347,
    /* 16785 */ 18347, 47436, 40714, 40714, 40108, 20080, 20080, 38961, 20253, 20253, 38970, 30092, 18347, 18347, 18347,
    /* 16800 */ 26348, 40714, 40106, 20080, 20080, 25504, 20253, 38970, 30092, 18347, 47431, 40714, 40107, 20080, 29410,
    /* 16815 */ 20253, 45107, 41652, 40713, 28179, 29410, 32738, 46274, 40106, 25465, 23410, 46277, 40109, 29408, 25569,
    /* 16830 */ 26349, 25463, 23410, 26347, 25463, 23411, 44084, 32536, 40675, 32070, 42926, 42938, 18347, 18347, 18347,
    /* 16845 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /* 16860 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /* 16875 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /* 16890 */ 18347, 18347, 18347, 18347, 18347, 18347, 28369, 22899, 18347, 18347, 18347, 18347, 18347, 47367, 35286,
    /* 16905 */ 35293, 47635, 47379, 47403, 47429, 35294, 47387, 18347, 35290, 47452, 47479, 47492, 47508, 21044, 30785,
    /* 16920 */ 18347, 18347, 22160, 27057, 18347, 19121, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 40505, 18347,
    /* 16935 */ 18347, 18347, 26461, 18347, 18347, 18347, 18347, 18347, 18347, 30340, 18347, 18347, 18347, 18347, 18347,
    /* 16950 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /* 16965 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /* 16980 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /* 16995 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /* 17010 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /* 17025 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /* 17040 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /* 17055 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /* 17070 */ 18347, 18347, 18347, 41652, 18347, 18347, 18347, 18347, 41653, 18347, 18347, 18347, 32690, 18347, 18347,
    /* 17085 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /* 17100 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /* 17115 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /* 17130 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /* 17145 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 28369, 18347, 18347, 18347, 18347, 18347, 18347, 47532,
    /* 17160 */ 18347, 18347, 25256, 18347, 19081, 47552, 47583, 47590, 47567, 47606, 47611, 18347, 26423, 47627, 21044,
    /* 17175 */ 30785, 18347, 18347, 22160, 27057, 18347, 18347, 18347, 18347, 18347, 40035, 23189, 18347, 18347, 18347,
    /* 17190 */ 18347, 18347, 18347, 18347, 36700, 18347, 18347, 18347, 18347, 18347, 30340, 18347, 18347, 18347, 18347,
    /* 17205 */ 18347, 18347, 18347, 25772, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 26457, 18347, 18347, 18347,
    /* 17220 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /* 17235 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /* 17250 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /* 17265 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /* 17280 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /* 17295 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /* 17310 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /* 17325 */ 18347, 18347, 18347, 18347, 41652, 18347, 18347, 18347, 18347, 41653, 18347, 18347, 18347, 32690, 18347,
    /* 17340 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /* 17355 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /* 17370 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /* 17385 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /* 17400 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 28369, 18347, 18347, 18347, 18347, 18347, 18347,
    /* 17415 */ 47651, 32602, 18347, 18347, 18347, 19903, 47671, 47699, 40179, 40185, 47683, 40190, 18347, 40170, 47714,
    /* 17430 */ 21044, 30785, 18347, 18347, 24379, 27057, 18347, 18347, 47739, 18347, 18347, 18347, 23225, 18347, 18347,
    /* 17445 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 30340, 18347, 18347, 18347,
    /* 17460 */ 18347, 18347, 18347, 18347, 42675, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 26448, 18347, 18347,
    /* 17475 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /* 17490 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /* 17505 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /* 17520 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /* 17535 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /* 17550 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /* 17565 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /* 17580 */ 18347, 18347, 18347, 18347, 18347, 41652, 18347, 18347, 18347, 18347, 41653, 18347, 18347, 18347, 32690,
    /* 17595 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /* 17610 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /* 17625 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /* 17640 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /* 17655 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 28369, 18347, 18347, 18347, 18347, 18347,
    /* 17670 */ 18347, 26731, 18347, 18347, 18347, 18347, 18867, 18227, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /* 17685 */ 47756, 21044, 30785, 18347, 18347, 22160, 27057, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /* 17700 */ 18347, 47433, 40714, 40105, 20080, 25548, 37780, 37562, 20059, 18347, 18347, 18347, 30340, 18347, 18347,
    /* 17715 */ 18347, 18347, 18347, 18347, 18347, 24850, 40714, 40714, 40714, 40107, 20080, 20080, 20080, 20316, 20253,
    /* 17730 */ 20253, 20253, 44629, 39413, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 32611,
    /* 17745 */ 40714, 40714, 40714, 40714, 41199, 20080, 20080, 20080, 20080, 28182, 20253, 20253, 20253, 20253, 25550,
    /* 17760 */ 20116, 30092, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 47435, 40714, 40714, 40714, 40714,
    /* 17775 */ 40109, 20080, 20080, 20080, 20080, 20208, 20253, 20253, 20253, 20253, 25608, 30090, 18347, 18347, 18347,
    /* 17790 */ 18347, 18347, 18347, 40713, 40714, 40714, 41198, 20080, 20080, 20080, 20236, 20253, 20253, 20253, 24360,
    /* 17805 */ 24091, 18347, 18347, 18347, 18347, 47436, 40714, 40714, 40108, 20080, 20080, 38961, 20253, 20253, 38970,
    /* 17820 */ 30092, 18347, 18347, 18347, 26348, 40714, 40106, 20080, 20080, 25504, 20253, 38970, 30092, 18347, 47431,
    /* 17835 */ 40714, 40107, 20080, 29410, 20253, 45107, 41652, 40713, 28179, 29410, 32738, 46274, 40106, 25465, 23410,
    /* 17850 */ 46277, 40109, 29408, 25569, 26349, 25463, 23410, 26347, 25463, 23411, 44084, 32536, 40675, 32070, 42926,
    /* 17865 */ 42938, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /* 17880 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /* 17895 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /* 17910 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 35715, 18347, 18347,
    /* 17925 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 35715, 21769, 47790, 47832, 47832, 47832, 47837, 18347,
    /* 17940 */ 47822, 47803, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /* 17955 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /* 17970 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /* 17985 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /* 18000 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /* 18015 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /* 18030 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /* 18045 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /* 18060 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /* 18075 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /* 18090 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /* 18105 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /* 18120 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /* 18135 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /* 18150 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347,
    /* 18165 */ 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 18347, 94570, 94570, 94570, 432,
    /* 18180 */ 0, 0, 94570, 0, 90473, 94570, 94570, 94570, 94570, 94570, 94570, 94570, 94570, 69632, 73728, 94570,
    /* 18196 */ 94570, 94570, 94570, 94570, 94570, 0, 65536, 94570, 94570, 0, 94570, 94570, 94570, 94570, 94570, 94570,
    /* 18212 */ 94570, 94570, 94570, 94570, 94570, 94570, 94570, 94570, 94570, 94570, 0, 0, 0, 0, 90473, 0, 65536, 0, 0,
    /* 18231 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 606208, 111115, 111115, 111115, 111115, 111115, 111115, 111115,
    /* 18252 */ 111115, 111115, 523, 111115, 523, 523, 523, 523, 523, 111115, 523, 523, 523, 523, 523, 523, 523, 523,
    /* 18270 */ 523, 523, 523, 111115, 111115, 111115, 111115, 111115, 111115, 111115, 111115, 111115, 111115, 111115,
    /* 18284 */ 111115, 111115, 111115, 111115, 111115, 111115, 523, 111115, 111115, 111115, 523, 111115, 111115,
    /* 18297 */ 111115, 111115, 111115, 0, 0, 0, 0, 0, 0, 24576, 1032, 0, 0, 0, 0, 0, 0, 0, 0, 760, 0, 0, 0, 0, 0, 0, 0,
    /* 18324 */ 111115, 111115, 111115, 1, 12290, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 266240, 0, 0, 0, 0, 842, 0, 0, 0,
    /* 18350 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 350, 0, 0, 0, 432, 0, 0, 374, 359, 0, 0, 0, 0, 0, 0, 0, 0, 346,
    /* 18381 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 359, 0, 0, 0, 359, 119262, 73728, 0, 0, 0, 0, 0, 0, 0, 193036, 193036,
    /* 18407 */ 193036, 193036, 193036, 193036, 193036, 193036, 193036, 193036, 193036, 193036, 193036, 193036, 193036,
    /* 18420 */ 193036, 0, 193036, 0, 0, 0, 0, 0, 359, 359, 359, 359, 359, 359, 359, 359, 359, 359, 0, 0, 0, 0, 0, 0, 0,
    /* 18445 */ 282624, 282624, 282624, 282624, 282624, 0, 282624, 282624, 282624, 359, 0, 359, 1, 12290, 3, 0, 0, 0, 0,
    /* 18464 */ 0, 0, 0, 0, 0, 0, 0, 397312, 0, 0, 0, 0, 2105684, 12290, 3, 0, 0, 346, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    /* 18493 */ 667648, 475136, 0, 29277, 29277, 0, 0, 0, 432, 0, 0, 0, 0, 0, 122880, 122880, 0, 0, 0, 0, 0, 0, 37240,
    /* 18516 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 748, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1995, 122880, 0, 122880,
    /* 18545 */ 122880, 122880, 122880, 122880, 0, 122880, 122880, 122880, 122880, 122880, 122880, 122880, 122880,
    /* 18558 */ 122880, 0, 122880, 0, 0, 0, 0, 0, 0, 0, 0, 0, 122880, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2718, 0, 0,
    /* 18586 */ 2721, 0, 0, 122880, 0, 0, 0, 122880, 0, 122880, 122880, 122880, 0, 0, 0, 0, 0, 0, 46247, 0, 0, 0, 0, 0,
    /* 18610 */ 0, 0, 0, 0, 822, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2052, 0, 0, 0, 0, 122880, 0, 2105684, 12290, 3, 0,
    /* 18638 */ 0, 0, 0, 147456, 0, 0, 0, 0, 0, 0, 49870, 360, 0, 0, 0, 0, 0, 0, 0, 0, 374, 0, 0, 0, 374, 0, 375, 432,
    /* 18666 */ 432, 0, 0, 0, 0, 0, 0, 0, 147456, 0, 0, 0, 0, 0, 0, 0, 684032, 0, 0, 0, 0, 0, 0, 0, 0, 69632, 73728, 0,
    /* 18694 */ 0, 0, 0, 411, 410, 1, 12290, 3, 0, 0, 0, 131072, 0, 0, 0, 0, 0, 0, 0, 0, 0, 366, 440, 366, 366, 366,
    /* 18720 */ 366, 366, 0, 0, 0, 432, 0, 0, 0, 0, 0, 0, 0, 131072, 131072, 0, 0, 0, 0, 0, 2059, 0, 0, 0, 0, 29277,
    /* 18746 */ 29277, 30739, 29277, 29277, 29277, 29277, 29277, 29277, 85089, 82557, 82557, 82557, 82557, 82557, 82557,
    /* 18761 */ 31847, 29331, 29331, 0, 0, 0, 0, 131072, 0, 0, 0, 69632, 73728, 0, 0, 0, 0, 0, 0, 0, 742570, 0, 0, 0, 0,
    /* 18786 */ 311296, 0, 0, 0, 0, 0, 131072, 0, 0, 0, 0, 0, 131072, 0, 0, 131072, 131072, 0, 0, 0, 0, 0, 2312, 0,
    /* 18810 */ 2314, 0, 0, 0, 0, 0, 0, 0, 0, 2551, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 131072, 0, 131072, 0, 0, 0, 0, 0, 0,
    /* 18839 */ 0, 0, 0, 0, 0, 1048576, 0, 0, 0, 0, 131072, 131072, 131072, 131072, 131072, 131072, 131072, 131072,
    /* 18857 */ 131072, 131072, 0, 0, 0, 0, 0, 0, 0, 811008, 0, 0, 0, 0, 0, 0, 0, 0, 69632, 73728, 0, 0, 0, 0, 0, 0,
    /* 18883 */ 131072, 0, 131072, 1, 12290, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 374, 0, 0, 0, 0, 0, 0, 0, 65536, 135168,
    /* 18909 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 155648, 0, 135168, 135168, 135168, 135168, 135168, 135168,
    /* 18931 */ 135168, 135168, 135168, 135168, 0, 0, 0, 0, 0, 0, 0, 823296, 871, 0, 0, 0, 0, 871, 0, 0, 135168, 0,
    /* 18953 */ 135168, 1, 12290, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 397, 368, 455, 0, 0, 0, 0, 479, 0, 0, 0, 0, 0, 0, 0,
    /* 18982 */ 0, 0, 0, 0, 0, 0, 0, 0, 622592, 0, 0, 0, 1, 12290, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 425, 0, 0, 0, 0, 0,
    /* 19013 */ 0, 0, 0, 432, 0, 0, 375, 360, 0, 0, 0, 0, 0, 0, 0, 0, 445, 0, 0, 446, 0, 0, 0, 0, 0, 0, 0, 360, 0, 0, 0,
    /* 19044 */ 360, 69632, 139746, 0, 0, 0, 0, 0, 0, 0, 827392, 1988, 0, 1990, 1991, 0, 0, 0, 0, 360, 360, 360, 360,
    /* 19067 */ 360, 360, 360, 360, 360, 360, 0, 0, 0, 0, 0, 0, 0, 1003520, 0, 0, 0, 0, 0, 0, 0, 0, 69632, 73728, 431,
    /* 19092 */ 0, 0, 0, 0, 0, 360, 0, 360, 1, 12290, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 760, 830, 0, 0, 0, 0, 0, 61440,
    /* 19121 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1138688, 1, 12290, 3, 0, 0, 0, 0, 143360, 347, 0, 0, 0, 0,
    /* 19150 */ 0, 0, 0, 360, 0, 0, 0, 0, 0, 360, 360, 360, 363, 363, 363, 433, 0, 0, 363, 0, 0, 143723, 363, 363, 363,
    /* 19175 */ 363, 363, 442, 363, 363, 363, 143802, 363, 363, 363, 143802, 69632, 73728, 363, 363, 363, 143723, 363,
    /* 19193 */ 363, 363, 363, 363, 363, 363, 363, 363, 363, 143802, 363, 363, 363, 363, 363, 363, 363, 363, 363,
    /* 19212 */ 143723, 143723, 143723, 143723, 143723, 143723, 143723, 0, 65536, 363, 363, 0, 363, 363, 363, 363, 363,
    /* 19229 */ 363, 363, 363, 363, 363, 363, 363, 363, 363, 363, 363, 363, 363, 363, 363, 143723, 363, 363, 363, 363,
    /* 19249 */ 363, 363, 363, 363, 363, 363, 363, 143723, 363, 363, 143723, 363, 363, 363, 363, 363, 363, 363, 363,
    /* 19268 */ 363, 143723, 143723, 143723, 143723, 143723, 363, 143723, 143723, 143723, 143723, 363, 143723, 143723,
    /* 19282 */ 143723, 143723, 143723, 143723, 143723, 143723, 143723, 363, 143723, 363, 363, 363, 363, 363, 363, 363,
    /* 19298 */ 363, 143723, 363, 143723, 143723, 143723, 143723, 143723, 143723, 0, 0, 0, 0, 0, 0, 155648, 155648, 0,
    /* 19316 */ 0, 0, 0, 155648, 0, 0, 0, 143802, 143802, 143802, 143802, 143802, 143802, 143802, 143802, 143802,
    /* 19332 */ 143802, 143723, 143723, 143723, 143723, 143723, 143723, 1, 12290, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 819,
    /* 19353 */ 0, 0, 0, 0, 0, 0, 29277, 29277, 29575, 29277, 2200334, 432, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    /* 19380 */ 2200334, 432, 0, 0, 0, 0, 432, 0, 0, 0, 0, 0, 0, 0, 155648, 0, 0, 0, 0, 0, 155648, 0, 0, 0, 0, 155648,
    /* 19406 */ 155648, 0, 65536, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 155648, 155648, 155648, 155648, 0, 155648, 155648,
    /* 19426 */ 155648, 155648, 155648, 155648, 155648, 155648, 155648, 155648, 155648, 0, 0, 0, 0, 0, 155648, 155648,
    /* 19442 */ 155648, 155648, 155648, 155648, 155648, 155648, 155648, 155648, 155648, 155648, 155648, 155648, 155648,
    /* 19455 */ 155648, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2200335, 0, 0, 155648, 155648, 0, 12290, 3, 0, 0,
    /* 19481 */ 0, 126976, 0, 0, 0, 0, 0, 0, 0, 1052672, 0, 0, 0, 0, 0, 0, 0, 0, 1703, 0, 0, 0, 0, 0, 0, 0, 432, 208896,
    /* 19509 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 391, 391, 0, 0, 0, 0, 159744, 0, 0, 159744, 0, 0, 0, 0, 0,
    /* 19538 */ 159744, 0, 0, 0, 0, 556, 0, 424, 0, 424, 424, 583, 424, 424, 538, 424, 424, 159744, 163840, 159744,
    /* 19558 */ 159744, 159744, 163840, 159744, 159744, 159744, 159744, 159744, 0, 0, 0, 25234, 0, 0, 0, 159744, 0, 0,
    /* 19576 */ 0, 0, 0, 0, 0, 25234, 25234, 25234, 25234, 25234, 25234, 25234, 25234, 25234, 25234, 25234, 25234,
    /* 19593 */ 25234, 159744, 159744, 159744, 159744, 159744, 159744, 159744, 159744, 159744, 159744, 159744, 159744,
    /* 19606 */ 159744, 159744, 159744, 159744, 0, 159744, 0, 0, 0, 0, 0, 25234, 159744, 25234, 1, 12290, 3, 0, 0, 0, 0,
    /* 19627 */ 0, 0, 0, 0, 0, 0, 1032, 0, 0, 0, 1032, 0, 167936, 167936, 167936, 167936, 167936, 167936, 167936,
    /* 19646 */ 167936, 167936, 167936, 167936, 167936, 167936, 167936, 167936, 167936, 0, 0, 0, 0, 0, 167936, 167936,
    /* 19662 */ 167936, 167936, 167936, 167936, 167936, 167936, 167936, 0, 167936, 0, 0, 0, 0, 0, 0, 286720, 0, 0, 0, 0,
    /* 19682 */ 0, 0, 0, 0, 0, 850, 0, 0, 0, 856, 857, 0, 0, 167936, 0, 0, 167936, 0, 0, 167936, 0, 0, 0, 0, 0, 167936,
    /* 19708 */ 0, 0, 0, 0, 723, 0, 1019904, 781, 723, 885, 886, 0, 0, 0, 0, 0, 390, 391, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    /* 19735 */ 868, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 868, 868, 0, 167936, 167936, 167936, 1, 12290, 3, 0, 0, 0, 0,
    /* 19761 */ 0, 0, 0, 0, 0, 0, 1116, 0, 0, 0, 0, 1146, 0, 0, 0, 1191, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2018, 0,
    /* 19792 */ 0, 172032, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 351, 0, 65536, 0, 172032, 0, 172032, 0, 0,
    /* 19818 */ 172032, 0, 172032, 172032, 172032, 172032, 172032, 172032, 172032, 172032, 172032, 172032, 172032,
    /* 19831 */ 172032, 172032, 172032, 172032, 172032, 0, 0, 0, 0, 0, 0, 172032, 0, 0, 0, 0, 172032, 172032, 0, 172032,
    /* 19851 */ 172032, 0, 172032, 172032, 172032, 172032, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 172032, 172032, 0, 0, 172032,
    /* 19872 */ 172032, 172032, 1, 12290, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1150, 0, 1247, 0, 0, 0, 1, 341, 3, 0, 0, 0,
    /* 19899 */ 0, 0, 0, 348, 0, 0, 0, 0, 0, 0, 0, 1159168, 481, 481, 1159168, 0, 0, 0, 0, 0, 176128, 176128, 176128,
    /* 19922 */ 176128, 176128, 176128, 176128, 176128, 176128, 176128, 176128, 176128, 176128, 176128, 176128, 176128,
    /* 19935 */ 0, 0, 0, 0, 0, 176128, 176128, 176128, 176128, 176128, 176128, 176128, 176128, 176128, 0, 176128, 0, 0,
    /* 19953 */ 0, 0, 0, 0, 524288, 0, 0, 0, 864256, 0, 2344, 0, 0, 0, 0, 176128, 0, 0, 176128, 0, 0, 176128, 0, 0, 0,
    /* 19978 */ 0, 0, 176128, 0, 0, 0, 0, 730, 374, 375, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1212, 0, 0, 1215, 0, 0, 0, 176128,
    /* 20005 */ 176128, 176128, 1, 0, 3, 78167, 78167, 86361, 0, 0, 710, 0, 0, 0, 0, 0, 802, 0, 804, 0, 806, 0, 0, 0, 0,
    /* 20030 */ 0, 0, 457, 0, 69632, 73728, 0, 0, 0, 0, 0, 0, 467, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1696, 0, 0, 0, 0, 0, 0,
    /* 20059 */ 29331, 29331, 29331, 78167, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2026, 0, 0, 83327, 82557, 82557,
    /* 20082 */ 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82947,
    /* 20097 */ 2044, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 392, 29277, 30924, 29277, 29277, 29331, 29331, 29277,
    /* 20121 */ 82557, 29277, 29277, 29277, 29277, 82557, 82557, 82557, 82557, 29331, 29331, 82557, 82557, 82557, 82557,
    /* 20136 */ 84333, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82933, 82557, 82557,
    /* 20151 */ 82557, 82557, 0, 0, 0, 2724, 0, 0, 0, 2727, 0, 0, 0, 0, 0, 0, 0, 0, 1211, 0, 0, 0, 0, 0, 0, 0, 31523,
    /* 20178 */ 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277,
    /* 20193 */ 30016, 29277, 29277, 29277, 31533, 29277, 29277, 29277, 29277, 29277, 29277, 84788, 82557, 82557, 84789,
    /* 20208 */ 82557, 82557, 0, 0, 0, 0, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 30575,
    /* 20225 */ 29331, 29331, 29331, 30579, 29331, 82557, 82557, 82557, 82557, 82557, 84796, 82557, 82557, 82557, 82557,
    /* 20240 */ 82557, 82557, 82557, 82557, 82557, 82557, 0, 0, 0, 0, 0, 0, 31566, 29331, 29331, 29331, 29331, 29331,
    /* 20258 */ 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 30595, 31636, 31637, 29331,
    /* 20273 */ 29331, 29331, 29331, 29331, 29277, 29277, 82557, 29331, 0, 0, 0, 0, 0, 0, 638976, 0, 0, 0, 0, 0, 0, 0,
    /* 20295 */ 0, 0, 824057, 0, 0, 0, 0, 0, 0, 0, 29277, 31663, 29277, 29277, 29277, 29277, 29277, 29277, 31670, 29277,
    /* 20315 */ 29277, 82557, 82557, 82557, 82557, 82557, 0, 0, 1032, 29331, 29331, 29331, 29331, 29331, 29331, 29331,
    /* 20331 */ 29331, 29277, 0, 0, 0, 0, 3161, 0, 29277, 84926, 82557, 82557, 82557, 82557, 82557, 84932, 82557, 82557,
    /* 20349 */ 82557, 29331, 29331, 29331, 29331, 29331, 31693, 82557, 82557, 82557, 82557, 85065, 82557, 82557, 82557,
    /* 20364 */ 82557, 82557, 82557, 82557, 29331, 29331, 29331, 29331, 29331, 29331, 31746, 29331, 29331, 31824, 29331,
    /* 20379 */ 29331, 29331, 29331, 29331, 29331, 29331, 29277, 0, 0, 0, 0, 0, 0, 29277, 29277, 29277, 344669, 29277,
    /* 20397 */ 29277, 29277, 31411, 29277, 29277, 29277, 29277, 31416, 0, 0, 0, 432, 0, 0, 0, 438, 0, 0, 0, 0, 0, 0, 0,
    /* 20420 */ 0, 1225, 0, 0, 0, 0, 0, 0, 0, 185007, 185007, 185007, 185007, 185007, 185007, 185007, 185007, 185007,
    /* 20438 */ 185007, 0, 0, 0, 0, 0, 0, 359, 0, 0, 0, 359, 0, 360, 0, 0, 0, 185007, 0, 185007, 1, 12290, 3, 78167,
    /* 20462 */ 78167, 86361, 0, 0, 0, 0, 0, 0, 0, 379, 0, 0, 0, 0, 0, 0, 0, 0, 1572, 0, 0, 0, 0, 0, 0, 0, 432, 432, 0,
    /* 20491 */ 0, 0, 0, 41747, 0, 0, 0, 0, 0, 0, 0, 0, 0, 519, 0, 519, 558, 519, 519, 564, 0, 0, 0, 432, 0, 0, 0, 0,
    /* 20519 */ 365, 0, 0, 0, 0, 0, 0, 0, 0, 365, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 193036, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    /* 20551 */ 0, 315392, 0, 0, 0, 193036, 0, 193036, 193036, 193036, 0, 193036, 193036, 193036, 193036, 193036, 0, 0,
    /* 20569 */ 0, 0, 0, 0, 675840, 0, 0, 675840, 0, 0, 0, 0, 0, 0, 1987, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2708, 0, 1077248,
    /* 20596 */ 2709, 0, 0, 0, 0, 193036, 0, 1, 12290, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1153, 0, 0, 0, 0, 0, 0, 0,
    /* 20624 */ 233472, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 400, 0, 0, 0, 432, 0, 0, 0, 37303, 0, 0, 0, 0, 0,
    /* 20654 */ 0, 0, 0, 1225, 1653, 0, 0, 0, 0, 0, 0, 37303, 37303, 37303, 37303, 37303, 37303, 37303, 37303, 37303,
    /* 20674 */ 37303, 0, 0, 0, 0, 0, 0, 359, 0, 360, 0, 0, 0, 0, 0, 0, 0, 458, 0, 0, 0, 0, 0, 0, 0, 0, 2920, 0, 0, 0,
    /* 20704 */ 0, 0, 0, 0, 37303, 0, 37303, 1, 12290, 3, 78167, 78167, 86361, 0, 0, 0, 0, 0, 0, 0, 379, 0, 379, 350, 0,
    /* 20729 */ 379, 379, 350, 0, 432, 432, 0, 0, 0, 41747, 37303, 0, 0, 0, 0, 0, 0, 0, 0, 0, 761, 762, 0, 0, 0, 0, 0,
    /* 20756 */ 0, 0, 41747, 46247, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2281, 0, 0, 0, 0, 0, 1565, 0, 0, 0, 0, 0, 0,
    /* 20786 */ 0, 0, 0, 0, 1578, 0, 0, 0, 0, 1688, 364544, 364544, 29960, 0, 30379, 29277, 30381, 30382, 30383, 29277,
    /* 20806 */ 29277, 29277, 29277, 29277, 30797, 29277, 29277, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557,
    /* 20821 */ 84322, 82557, 82557, 84325, 84326, 82557, 82557, 82557, 0, 0, 1584, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    /* 20844 */ 0, 0, 155648, 155648, 1969, 0, 1971, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 425, 0, 204800, 377,
    /* 20870 */ 378, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2319, 0, 0, 0, 0, 0, 434, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    /* 20902 */ 0, 0, 2515, 0, 0, 378, 0, 378, 0, 0, 0, 0, 0, 0, 0, 0, 0, 378, 0, 0, 0, 0, 0, 2522, 0, 0, 0, 0, 0, 0, 0,
    /* 20933 */ 0, 0, 0, 2290, 0, 0, 0, 0, 0, 0, 65536, 0, 0, 0, 0, 0, 0, 0, 0, 378, 0, 204800, 204800, 204800, 204800,
    /* 20958 */ 0, 204800, 204800, 204800, 204800, 204800, 204800, 204800, 204800, 204800, 204800, 204800, 204800,
    /* 20971 */ 204800, 204800, 204800, 204800, 204800, 205178, 204800, 204800, 205177, 205178, 204800, 205177, 205177,
    /* 20984 */ 204800, 204800, 0, 0, 0, 0, 0, 0, 806912, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1578, 1969, 0, 0, 0, 0, 1584, 0,
    /* 21010 */ 205177, 204800, 1, 12290, 3, 0, 0, 709, 0, 0, 0, 0, 0, 0, 0, 425, 0, 0, 441, 0, 0, 0, 0, 0, 151552,
    /* 21035 */ 2200335, 0, 0, 0, 0, 0, 0, 0, 151552, 0, 0, 0, 0, 0, 0, 359, 360, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    /* 21064 */ 375, 0, 0, 0, 0, 0, 0, 0, 1030, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031,
    /* 21085 */ 1031, 1031, 901, 901, 901, 901, 901, 901, 1031, 1031, 901, 0, 901, 901, 901, 901, 0, 0, 0, 0, 1031,
    /* 21106 */ 1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 901, 901, 901, 1031, 1031, 1031,
    /* 21124 */ 901, 901, 901, 901, 0, 1031, 1031, 901, 0, 901, 901, 901, 901, 901, 0, 0, 0, 0, 0, 0, 1031, 1031, 1031,
    /* 21147 */ 1031, 1031, 1031, 0, 0, 0, 0, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 901, 901, 1031, 901, 0, 901,
    /* 21167 */ 901, 0, 0, 1031, 1031, 0, 0, 0, 0, 0, 0, 0, 0, 1243, 0, 0, 0, 0, 0, 0, 0, 0, 1031, 1031, 1031, 1031,
    /* 21193 */ 1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 901, 901, 901, 901, 0, 0, 1031,
    /* 21212 */ 1031, 0, 0, 0, 0, 0, 0, 0, 0, 1281, 0, 0, 0, 0, 0, 0, 0, 901, 901, 901, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    /* 21243 */ 0, 0, 0, 172032, 0, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 901, 901, 0, 1031, 0, 0, 0, 0, 0, 0,
    /* 21265 */ 946176, 0, 0, 0, 339968, 0, 2838, 0, 0, 0, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 901, 0,
    /* 21286 */ 0, 0, 0, 0, 0, 901, 1031, 1031, 1031, 1031, 1031, 1031, 901, 0, 0, 0, 0, 0, 0, 0, 0, 0, 835, 0, 0, 0, 0,
    /* 21313 */ 0, 0, 0, 0, 0, 901, 901, 901, 901, 901, 901, 0, 0, 0, 0, 0, 0, 0, 1031, 1031, 1031, 1031, 1031, 1031,
    /* 21337 */ 1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 901, 0, 0, 0, 0, 0, 901, 901, 901, 901, 901, 901,
    /* 21358 */ 901, 901, 901, 901, 901, 901, 901, 0, 901, 901, 901, 901, 0, 0, 0, 0, 1031, 1031, 1031, 1031, 0, 0, 901,
    /* 21381 */ 901, 901, 901, 901, 901, 901, 901, 901, 901, 901, 901, 901, 901, 901, 901, 0, 0, 0, 0, 1031, 1031, 0,
    /* 21403 */ 901, 0, 1031, 0, 901, 0, 1031, 0, 901, 0, 1031, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2528, 0, 0, 0, 0,
    /* 21432 */ 0, 0, 221184, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 593920, 0, 0, 0, 0, 0, 221184, 0, 0, 0, 221184, 0, 0,
    /* 21460 */ 221184, 221184, 221184, 0, 0, 0, 0, 0, 0, 0, 0, 0, 221184, 221184, 221184, 0, 0, 0, 65536, 0, 0, 0, 0,
    /* 21483 */ 0, 0, 0, 221184, 0, 0, 221184, 221184, 221184, 221184, 221184, 221184, 221184, 221184, 221184, 221184,
    /* 21499 */ 221184, 221184, 221184, 221184, 221184, 221184, 0, 0, 0, 0, 0, 221184, 221184, 221184, 1, 12290, 3, 0,
    /* 21517 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 1155, 0, 0, 0, 0, 0, 0, 0, 0, 375, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    /* 21549 */ 2540, 0, 0, 0, 0, 0, 0, 98304, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 349, 0, 0, 0, 0, 374, 0, 375, 0, 0, 0,
    /* 21579 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 274432, 274432, 0, 225777, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    /* 21608 */ 471, 0, 225965, 225965, 225965, 225965, 225965, 225965, 225965, 225965, 225965, 225965, 225805, 225805,
    /* 21622 */ 225805, 225805, 225805, 225805, 225805, 225805, 225805, 225805, 225805, 225805, 225805, 225805, 225805,
    /* 21635 */ 225805, 0, 0, 0, 0, 0, 225982, 225805, 225982, 1, 12290, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1169, 0, 0, 0,
    /* 21661 */ 0, 0, 1, 12290, 3, 0, 0, 0, 0, 0, 0, 0, 249856, 0, 0, 0, 0, 0, 0, 983040, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    /* 21690 */ 29277, 29277, 31238, 29277, 29277, 29277, 31242, 249856, 249856, 249856, 249856, 249856, 249856, 249856,
    /* 21704 */ 249856, 249856, 249856, 249856, 249856, 249856, 249856, 249856, 249856, 0, 0, 0, 0, 0, 249856, 249856,
    /* 21720 */ 249856, 1, 12290, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1185, 0, 0, 432, 432, 0, 1, 12290, 3, 0, 0, 0, 0, 0,
    /* 21748 */ 0, 0, 0, 253952, 0, 0, 0, 0, 0, 847, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 135168, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    /* 21779 */ 0, 0, 106496, 106496, 106496, 106496, 0, 0, 0, 432, 0, 0, 0, 0, 253952, 0, 0, 0, 0, 0, 0, 0, 0, 253952,
    /* 21803 */ 0, 0, 0, 0, 0, 0, 254478, 254478, 254478, 254478, 254478, 254478, 254478, 254478, 254478, 254478,
    /* 21819 */ 254478, 254478, 254478, 254478, 254478, 254478, 0, 0, 0, 0, 0, 254478, 254478, 254478, 1, 12290, 0, 0,
    /* 21837 */ 0, 0, 0, 0, 0, 270336, 0, 0, 0, 0, 0, 2533, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2542, 1, 12290, 2113878, 0, 0, 0,
    /* 21865 */ 0, 0, 0, 0, 0, 0, 349, 0, 0, 0, 0, 0, 2548, 0, 0, 0, 0, 2553, 0, 0, 0, 0, 2557, 0, 266240, 0, 0, 0,
    /* 21893 */ 266240, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1259, 1259, 0, 1114, 0, 1261, 0, 0, 0, 0, 266240, 0, 0, 0, 0,
    /* 21919 */ 266240, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 811, 0, 0, 0, 0, 1, 12290, 2113878, 0, 0, 0, 0, 0, 0,
    /* 21948 */ 0, 0, 0, 0, 1594, 1595, 0, 0, 0, 0, 245760, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 426, 274432,
    /* 21976 */ 274432, 274432, 274432, 274432, 274432, 274432, 274432, 274432, 274432, 0, 0, 0, 0, 0, 0, 359, 360, 0,
    /* 21994 */ 0, 0, 0, 0, 0, 724, 0, 274432, 0, 274432, 1, 12290, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1641, 0, 0, 0, 0,
    /* 22022 */ 0, 1, 12290, 3, 78167, 86361, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 369, 0, 0, 0, 458, 0, 0, 0, 432, 0, 0, 0,
    /* 22051 */ 0, 86361, 0, 0, 0, 0, 0, 0, 0, 464, 0, 0, 0, 0, 464, 0, 0, 0, 29331, 29331, 29331, 78167, 87129, 0, 0,
    /* 22076 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 396, 0, 0, 0, 0, 0, 0, 0, 2032, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2719,
    /* 22108 */ 0, 0, 432, 432, 0, 0, 0, 0, 788, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 311296, 0, 0, 65536, 0, 0, 0,
    /* 22138 */ 0, 0, 0, 0, 505, 0, 0, 0, 0, 0, 0, 359, 360, 0, 0, 0, 0, 200704, 0, 0, 0, 278528, 0, 0, 0, 0, 0, 0, 0,
    /* 22167 */ 0, 0, 0, 0, 0, 0, 0, 0, 432, 29278, 82557, 29332, 29278, 82557, 29278, 29278, 82557, 82557, 82557,
    /* 22186 */ 29278, 29278, 29278, 29278, 29332, 29332, 29332, 29332, 29332, 29332, 29332, 29332, 29332, 29332, 29332,
    /* 22201 */ 29278, 82557, 29278, 29278, 82557, 29332, 29278, 29332, 1, 12290, 3, 78167, 78167, 86361, 0, 0, 0, 0, 0,
    /* 22220 */ 0, 0, 797, 0, 0, 0, 853, 0, 0, 0, 0, 2543, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 753, 1, 12290,
    /* 22250 */ 3, 78168, 86361, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 426, 427, 428, 429, 430, 282624, 282624, 282624,
    /* 22272 */ 282624, 282624, 282624, 282624, 282624, 282624, 282624, 282624, 282624, 282624, 282624, 282624, 282624,
    /* 22285 */ 0, 282624, 0, 0, 0, 0, 0, 0, 0, 0, 0, 282624, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 465, 0, 0, 0, 0, 282624,
    /* 22314 */ 0, 282624, 282624, 282624, 0, 282624, 282624, 282624, 282624, 282624, 0, 0, 0, 0, 0, 0, 1111709, 0, 0,
    /* 22333 */ 0, 0, 0, 0, 0, 0, 0, 1593, 0, 0, 0, 0, 0, 0, 282624, 282624, 282624, 1, 12290, 3, 0, 0, 0, 0, 0, 0, 0,
    /* 22360 */ 0, 0, 0, 1969, 0, 0, 0, 0, 0, 0, 65536, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 286720, 286720, 286720, 286720, 0,
    /* 22386 */ 286720, 286720, 286720, 286720, 286720, 286720, 286720, 286720, 286720, 286720, 286720, 0, 0, 0, 0, 0,
    /* 22402 */ 286720, 286720, 286720, 286720, 286720, 286720, 286720, 286720, 286720, 286720, 286720, 286720, 286720,
    /* 22415 */ 286720, 286720, 286720, 1, 12290, 3, 78167, 86361, 0, 0, 0, 0, 0, 0, 0, 0, 350, 0, 0, 0, 350, 477, 0, 0,
    /* 22439 */ 69632, 73728, 0, 0, 0, 0, 0, 0, 359, 360, 0, 0, 0, 722, 0, 0, 0, 0, 0, 722, 0, 0, 0, 29277, 29277,
    /* 22464 */ 29277, 29277, 31409, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 31060, 29277, 29277, 29277,
    /* 22479 */ 29277, 29277, 29277, 82557, 0, 0, 0, 432, 350, 0, 0, 0, 86361, 0, 0, 0, 0, 0, 0, 0, 821, 0, 0, 0, 0,
    /* 22504 */ 821, 0, 827, 0, 0, 0, 379, 379, 350, 0, 0, 0, 0, 0, 0, 0, 379, 379, 470, 472, 491, 65536, 0, 0, 0, 0, 0,
    /* 22531 */ 0, 0, 0, 379, 512, 514, 514, 514, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522,
    /* 22553 */ 522, 522, 527, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 587, 527, 527, 527, 527, 527, 527, 527,
    /* 22574 */ 527, 527, 527, 527, 527, 527, 527, 527, 527, 522, 527, 522, 522, 522, 522, 522, 522, 598, 522, 522, 522,
    /* 22595 */ 598, 522, 522, 522, 522, 522, 29279, 29299, 82558, 29333, 29299, 82558, 29299, 29299, 82558, 82558,
    /* 22611 */ 82558, 29353, 29353, 29353, 29299, 29333, 29333, 29333, 29360, 29360, 29360, 29360, 29360, 29360, 29360,
    /* 22626 */ 29360, 29360, 29333, 29299, 82558, 29299, 29299, 82558, 29333, 29299, 29333, 1, 12290, 3, 78167, 78167,
    /* 22642 */ 86361, 0, 0, 0, 0, 0, 711, 712, 0, 0, 0, 729, 0, 374, 375, 0, 0, 0, 0, 735, 0, 0, 0, 0, 0, 0, 0, 0, 839,
    /* 22671 */ 0, 0, 0, 0, 0, 757, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2839, 0, 0, 432, 432, 0, 785, 0, 0, 0, 0,
    /* 22701 */ 790, 0, 0, 792, 0, 0, 0, 0, 0, 863, 749, 635776, 0, 0, 0, 0, 29277, 29277, 29577, 29277, 29277, 29591,
    /* 22723 */ 29277, 635808, 29277, 29277, 29277, 29277, 82557, 82893, 82557, 82557, 0, 0, 799, 0, 0, 0, 0, 0, 0, 0,
    /* 22743 */ 0, 0, 0, 0, 0, 0, 0, 815104, 0, 0, 0, 815, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 826, 0, 0, 0, 0, 1964, 0, 0,
    /* 22774 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 2003, 0, 0, 0, 0, 0, 0, 0, 845, 0, 0, 0, 0, 849, 0, 0, 0, 0, 855, 0, 0, 0, 0,
    /* 22806 */ 749, 0, 751, 0, 0, 875, 0, 872, 0, 0, 0, 0, 0, 1626, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 286720, 0, 286720,
    /* 22833 */ 286720, 286720, 286720, 286720, 0, 0, 711, 0, 0, 792, 0, 862, 0, 0, 0, 0, 0, 0, 0, 864, 0, 0, 815, 0, 0,
    /* 22858 */ 0, 0, 0, 864, 0, 0, 0, 711, 0, 0, 0, 0, 0, 2835, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2332, 0, 0, 2335, 0, 0,
    /* 22888 */ 0, 0, 881, 0, 0, 792, 0, 0, 0, 0, 864, 0, 0, 0, 0, 0, 0, 1134592, 1134592, 0, 0, 0, 0, 0, 0, 0, 0,
    /* 22915 */ 1007616, 0, 0, 0, 1619, 0, 1089536, 0, 897, 898, 792, 0, 792, 0, 0, 0, 792, 815, 792, 0, 29277, 29277,
    /* 22937 */ 29277, 29579, 29583, 29277, 29277, 29277, 29277, 29277, 29601, 29277, 29605, 29277, 29610, 29277, 29613,
    /* 22952 */ 29277, 29277, 29624, 29277, 29277, 29277, 29583, 29277, 29277, 29277, 29277, 29636, 29610, 29613, 29277,
    /* 22967 */ 82557, 82557, 82896, 82900, 29743, 29331, 29746, 29331, 29331, 29759, 29331, 29331, 29277, 29277, 29277,
    /* 22982 */ 29613, 0, 0, 0, 29331, 29277, 29331, 1, 12290, 3, 78167, 78532, 86361, 0, 0, 0, 0, 0, 0, 0, 775, 0, 0,
    /* 23005 */ 0, 0, 0, 0, 0, 432, 29714, 29583, 82900, 29579, 29773, 29613, 29277, 29277, 82896, 83025, 82932, 82557,
    /* 23023 */ 82557, 0, 29710, 29781, 29746, 29331, 29331, 78167, 87129, 0, 0, 0, 0, 0, 0, 1119, 0, 0, 1121, 1125, 0,
    /* 23044 */ 1204, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 825, 0, 0, 1236, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1246, 0, 0,
    /* 23075 */ 0, 0, 0, 870, 0, 0, 1019904, 0, 0, 756, 0, 1019904, 0, 873, 0, 0, 0, 1278, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    /* 23103 */ 0, 0, 0, 37303, 37303, 37303, 0, 0, 0, 1260, 29960, 902, 29277, 29277, 29277, 29277, 29277, 29277,
    /* 23121 */ 29277, 29277, 29277, 29277, 29277, 31252, 31253, 29277, 31255, 29277, 29277, 30018, 29277, 29277, 29277,
    /* 23136 */ 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 30035, 29277, 1600, 0, 0,
    /* 23152 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 767, 0, 0, 0, 1613, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 57344,
    /* 23184 */ 0, 0, 0, 0, 1636, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1150976, 0, 1657, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    /* 23215 */ 0, 0, 0, 0, 0, 0, 812, 0, 0, 1689, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1155072, 0, 0, 0, 1701,
    /* 23244 */ 1702, 0, 0, 0, 29960, 1704, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 31249, 31250, 29277,
    /* 23261 */ 29277, 29277, 29277, 29277, 29277, 30386, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 30397,
    /* 23276 */ 29277, 29277, 29277, 29277, 29277, 29277, 29277, 30044, 29277, 29277, 82557, 82557, 82557, 82557, 82557,
    /* 23291 */ 82557, 29331, 29331, 29331, 29331, 29331, 29331, 0, 0, 3198, 0, 29277, 29277, 29277, 30434, 29277,
    /* 23307 */ 29277, 29277, 29277, 30438, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 31275, 82557, 82557,
    /* 23322 */ 84526, 82557, 82557, 82557, 82557, 83725, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557,
    /* 23337 */ 82557, 82557, 82557, 82557, 82557, 82557, 83366, 82557, 82557, 83754, 82557, 82557, 83757, 82557, 82557,
    /* 23352 */ 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 0, 0, 2191, 0, 0, 0, 83766, 82557, 82557, 82557,
    /* 23370 */ 82557, 83771, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 26030, 1860, 29331, 29277, 82557, 29277,
    /* 23385 */ 29277, 29277, 29620, 29277, 82557, 82557, 82557, 82941, 82557, 0, 29331, 29331, 29331, 29331, 29331,
    /* 23400 */ 29331, 29331, 29728, 29331, 29331, 29331, 29331, 29331, 29331, 30878, 29331, 29331, 29331, 29331, 29331,
    /* 23415 */ 29331, 29331, 29331, 29331, 29277, 0, 0, 0, 0, 0, 0, 29277, 29331, 30555, 29331, 29331, 29331, 29331,
    /* 23433 */ 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29277, 30610, 29331, 29331, 29331,
    /* 23448 */ 30584, 29331, 29331, 30587, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29277, 3032,
    /* 23463 */ 0, 3033, 0, 0, 0, 29331, 30596, 29331, 29331, 29331, 29331, 30601, 29331, 29331, 29331, 29331, 29331,
    /* 23480 */ 29331, 29331, 30609, 29277, 29277, 29277, 29277, 29331, 30876, 30747, 84059, 29277, 30932, 29277, 29277,
    /* 23495 */ 82557, 84182, 82557, 82557, 0, 0, 0, 0, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 357011,
    /* 23512 */ 29331, 1971, 0, 0, 0, 0, 0, 0, 0, 1975, 0, 0, 0, 0, 0, 0, 0, 833, 0, 0, 0, 0, 0, 0, 840, 0, 0, 0, 0,
    /* 23541 */ 2047, 2048, 0, 2050, 0, 0, 0, 2048, 0, 0, 0, 2054, 0, 0, 0, 0, 1986, 790528, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    /* 23568 */ 0, 254478, 254478, 254478, 254478, 254478, 254478, 29277, 29277, 30744, 29277, 29277, 30745, 29277,
    /* 23582 */ 29277, 29277, 29277, 29277, 30751, 29277, 29277, 29277, 29277, 29277, 29277, 29634, 29277, 29277, 29277,
    /* 23597 */ 29277, 29620, 82557, 82557, 82557, 82557, 29331, 29331, 29331, 29331, 87129, 0, 0, 0, 0, 0, 0, 1559,
    /* 23615 */ 82557, 84055, 82557, 82557, 84056, 82557, 82557, 82557, 82557, 82557, 82557, 84063, 82557, 82557, 82557,
    /* 23630 */ 82557, 29331, 29331, 29331, 29331, 87129, 0, 0, 0, 0, 0, 0, 1560, 29331, 29331, 30873, 29331, 29331,
    /* 23648 */ 29331, 29331, 29331, 29331, 30880, 29331, 29331, 29331, 29331, 29331, 29331, 29277, 0, 0, 0, 0, 0, 0, 0,
    /* 23667 */ 3089, 0, 1969, 0, 1971, 0, 0, 2273, 0, 0, 0, 0, 0, 0, 2280, 0, 0, 0, 0, 0, 2845, 0, 0, 0, 331776, 0, 0,
    /* 23694 */ 0, 0, 29277, 332381, 0, 2310, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2320, 0, 0, 0, 0, 1997, 0, 0, 0, 0, 0,
    /* 23723 */ 0, 0, 0, 0, 0, 0, 1138, 1142, 0, 0, 0, 0, 2323, 0, 0, 2326, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 773, 29277,
    /* 23752 */ 29277, 29277, 29277, 31053, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277,
    /* 23767 */ 928088, 29277, 29277, 82557, 29277, 31166, 82557, 84416, 29331, 31170, 0, 0, 0, 0, 0, 0, 0, 0, 69632,
    /* 23786 */ 73728, 0, 0, 0, 0, 415, 413, 82557, 82557, 82557, 82557, 82557, 84319, 82557, 82557, 82557, 82557,
    /* 23803 */ 82557, 82557, 82557, 84327, 82557, 82557, 0, 0, 0, 0, 29331, 29331, 29331, 29331, 29331, 29331, 29331,
    /* 23820 */ 29331, 29331, 30872, 0, 0, 2508, 0, 0, 0, 2510, 0, 0, 0, 0, 2513, 0, 0, 0, 0, 0, 902, 901, 901, 901,
    /* 23844 */ 901, 901, 901, 901, 901, 901, 901, 901, 901, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2546, 2547, 0, 0, 0, 0, 0,
    /* 23871 */ 0, 0, 0, 0, 0, 0, 871, 29277, 29277, 29277, 29582, 31243, 29277, 29277, 31246, 29277, 29277, 29277,
    /* 23889 */ 29277, 29277, 29277, 31251, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 31248, 29277, 29277, 29277,
    /* 23904 */ 29277, 29277, 29277, 29277, 29277, 29988, 29277, 29277, 29277, 29277, 29277, 29277, 29997, 31257, 29277,
    /* 23919 */ 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 30402,
    /* 23934 */ 82557, 82557, 84532, 82557, 82557, 84535, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 84541,
    /* 23949 */ 82557, 0, 29331, 29331, 29331, 29331, 29331, 29331, 29723, 29331, 29331, 29331, 29331, 29331, 29331,
    /* 23964 */ 29331, 31339, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 31478, 31479, 29331, 29331, 29331,
    /* 23979 */ 29331, 29331, 29331, 82557, 82557, 82557, 82557, 82557, 84548, 82557, 82557, 82557, 82557, 82557, 82557,
    /* 23994 */ 82557, 82557, 82557, 82557, 0, 2440, 0, 0, 0, 0, 29331, 29331, 31322, 29331, 29331, 31325, 29331, 29331,
    /* 24012 */ 29331, 29331, 29331, 29331, 29331, 29331, 31331, 29331, 29277, 82557, 29277, 29277, 29277, 29775, 29627,
    /* 24027 */ 82557, 82557, 82557, 83027, 82948, 0, 29331, 29331, 0, 0, 0, 0, 0, 1959, 0, 0, 0, 0, 0, 1961, 0, 0, 0,
    /* 24050 */ 0, 749, 0, 0, 0, 797, 863, 0, 0, 0, 0, 863, 0, 31361, 29331, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    /* 24079 */ 827, 0, 31485, 29331, 29331, 29331, 29331, 29331, 29331, 29277, 29277, 29331, 29277, 82557, 29277,
    /* 24094 */ 29277, 82557, 82557, 29331, 29331, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 909312, 0, 3091, 0, 29277, 29277,
    /* 24117 */ 29277, 31768, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 82557, 82557, 82557, 82557,
    /* 24132 */ 84528, 84529, 82557, 82557, 82557, 85028, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557,
    /* 24147 */ 29331, 29331, 29331, 31792, 0, 3133, 0, 3135, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277,
    /* 24163 */ 29277, 29277, 29277, 29277, 29277, 746077, 29277, 29277, 0, 65536, 0, 0, 0, 0, 485, 0, 0, 0, 0, 0, 471,
    /* 24184 */ 471, 471, 471, 485, 471, 471, 471, 471, 471, 471, 471, 471, 471, 471, 471, 471, 596, 471, 471, 471, 596,
    /* 24205 */ 471, 596, 596, 596, 471, 596, 596, 596, 596, 471, 29280, 29280, 82559, 29334, 29280, 82559, 29280,
    /* 24222 */ 29280, 82559, 82559, 82559, 29280, 29280, 29280, 29280, 29334, 29334, 29334, 29334, 29334, 29334, 29334,
    /* 24237 */ 29334, 29334, 29334, 29334, 29334, 29334, 29280, 82559, 29280, 29364, 82617, 29334, 29364, 29375, 1,
    /* 24252 */ 12290, 3, 78167, 78167, 86361, 0, 0, 0, 0, 0, 0, 0, 835, 835, 0, 0, 894, 0, 0, 0, 0, 0, 0, 0, 1660, 0,
    /* 24278 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 184758, 185007, 185007, 29277, 30431, 29277, 29277, 30435, 29277,
    /* 24299 */ 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 31040, 29277, 29277, 29277,
    /* 24314 */ 82557, 83767, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 26030, 0,
    /* 24329 */ 29331, 29277, 82557, 29277, 29277, 29616, 29277, 29277, 82557, 82557, 82935, 82557, 82557, 0, 29331,
    /* 24344 */ 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29741, 29331, 29331,
    /* 24359 */ 30597, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29277, 29277, 29277,
    /* 24374 */ 29331, 29331, 0, 0, 2296, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1155072, 432, 29277, 31054, 29277,
    /* 24398 */ 29277, 31056, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 82557, 82557, 83297,
    /* 24413 */ 83298, 82557, 82557, 82557, 82557, 84317, 82557, 82557, 82557, 84320, 82557, 82557, 82557, 82557, 82557,
    /* 24428 */ 82557, 82557, 82557, 82557, 83745, 82557, 82557, 82557, 83749, 82557, 82557, 29331, 29331, 29331, 31117,
    /* 24443 */ 29331, 29331, 29331, 31120, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29575, 29277, 29277,
    /* 24458 */ 29277, 0, 0, 0, 29705, 29331, 29331, 29331, 31795, 29331, 31797, 29331, 31799, 29331, 29277, 0, 0, 0, 0,
    /* 24477 */ 0, 0, 359, 49873, 0, 0, 0, 0, 0, 0, 0, 0, 479, 479, 0, 0, 0, 0, 0, 0, 1, 12290, 3, 78167, 86361, 0, 0,
    /* 24504 */ 0, 0, 0, 0, 0, 0, 0, 351, 352, 353, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 841, 385, 386, 387,
    /* 24533 */ 388, 389, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1136, 1140, 0, 0, 0, 351, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    /* 24564 */ 0, 0, 0, 858, 0, 384, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 384, 0, 0, 0, 0, 801, 0, 0, 0, 0, 0, 0, 808, 0,
    /* 24595 */ 0, 0, 0, 0, 1998, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 114688, 0, 241664, 258048, 0, 0, 492, 65536, 498, 487,
    /* 24620 */ 351, 503, 486, 487, 503, 0, 503, 503, 515, 520, 515, 515, 557, 515, 515, 571, 515, 515, 557, 515, 515,
    /* 24641 */ 515, 515, 515, 557, 515, 515, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528,
    /* 24662 */ 528, 515, 553, 557, 515, 557, 557, 515, 557, 557, 557, 593, 593, 594, 594, 594, 594, 594, 594, 594, 594,
    /* 24683 */ 594, 594, 594, 557, 594, 594, 594, 557, 594, 594, 594, 594, 594, 29281, 29300, 82560, 29335, 29300,
    /* 24701 */ 82560, 29300, 29300, 82560, 82560, 82560, 29300, 29300, 29300, 29300, 29335, 29335, 29335, 29335, 29335,
    /* 24716 */ 29335, 29335, 29335, 29335, 29335, 29335, 29335, 29361, 29362, 82611, 29362, 29362, 82611, 29361, 29362,
    /* 24731 */ 29361, 1, 12290, 3, 78167, 78167, 86361, 0, 0, 0, 0, 0, 0, 0, 868, 0, 0, 0, 0, 29277, 29277, 29277,
    /* 24753 */ 29277, 31810, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 0, 814, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    /* 24775 */ 0, 0, 0, 828, 0, 0, 0, 889, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 350, 379, 0, 29331, 29331, 29747,
    /* 24802 */ 29331, 29331, 29331, 29331, 29331, 29277, 29277, 29277, 29639, 0, 0, 0, 29331, 29277, 82557, 29277,
    /* 24818 */ 29277, 29618, 29277, 29277, 82557, 82557, 82937, 82557, 82557, 0, 29331, 29331, 29331, 29331, 29331,
    /* 24833 */ 29331, 29331, 29331, 29331, 29730, 29331, 29331, 29331, 29331, 0, 0, 0, 0, 0, 0, 0, 2267, 0, 0, 0, 0, 0,
    /* 24855 */ 902, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 31039, 29277, 29277,
    /* 24870 */ 29277, 29277, 29747, 29331, 29331, 78167, 87129, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1137, 1141, 0, 0, 0,
    /* 24893 */ 0, 1250, 0, 0, 0, 0, 0, 0, 0, 1258, 0, 0, 0, 0, 0, 0, 378, 378, 378, 0, 0, 0, 0, 0, 0, 0, 407, 408, 409,
    /* 24922 */ 410, 411, 0, 0, 0, 0, 0, 0, 1263, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 359, 0, 0, 0, 0, 1263, 0,
    /* 24951 */ 29960, 902, 29277, 29277, 29964, 29965, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 30394, 29277,
    /* 24966 */ 29277, 29277, 29277, 29277, 29277, 29277, 29277, 30786, 29277, 29277, 29277, 29277, 29277, 29277, 29277,
    /* 24981 */ 29277, 29977, 29277, 29981, 29277, 29277, 29984, 29277, 29986, 29277, 29277, 29277, 29277, 29277, 29277,
    /* 24996 */ 29277, 29277, 31431, 29277, 29277, 82557, 82557, 82557, 82557, 344701, 29331, 29331, 29331, 29331,
    /* 25010 */ 30145, 29331, 30149, 29331, 29331, 30153, 29331, 30155, 29331, 29331, 29331, 29331, 0, 0, 0, 0, 0, 0, 0,
    /* 25029 */ 0, 0, 2269, 2270, 0, 0, 0, 0, 1624, 0, 0, 0, 1627, 0, 0, 0, 0, 0, 0, 0, 0, 1628, 1629, 1630, 0, 0, 0, 0,
    /* 25057 */ 0, 29277, 29277, 30388, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 30399, 29277, 29277,
    /* 25072 */ 29277, 29277, 29277, 29277, 30003, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 30015, 29277, 82557,
    /* 25087 */ 82557, 83727, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 83738,
    /* 25102 */ 83752, 83753, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557,
    /* 25117 */ 82557, 83325, 565885, 29331, 29331, 29331, 30557, 29331, 29331, 29331, 29331, 29331, 29331, 29331,
    /* 25131 */ 29331, 29331, 29331, 29331, 29331, 30158, 565907, 29331, 29331, 30568, 29331, 29331, 29331, 29331,
    /* 25145 */ 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 30923, 29331, 30582, 30583,
    /* 25160 */ 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 30199, 29331,
    /* 25175 */ 29331, 30781, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277,
    /* 25190 */ 29277, 29277, 30415, 82557, 82557, 82557, 84097, 84098, 82557, 82557, 82557, 82557, 82557, 82557, 82557,
    /* 25205 */ 82557, 82557, 82557, 82557, 82938, 82557, 82557, 82557, 82557, 29331, 30914, 30915, 29331, 29331, 29331,
    /* 25220 */ 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 30549, 29331, 29331, 29277, 29277,
    /* 25235 */ 30925, 30926, 29331, 29331, 29277, 82557, 29277, 29277, 29277, 29277, 82557, 82557, 82557, 82557, 29331,
    /* 25250 */ 29331, 29331, 29331, 87129, 0, 1555, 0, 0, 0, 0, 0, 0, 1146880, 0, 1146880, 0, 0, 0, 0, 0, 0, 0, 2981,
    /* 25273 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2309, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1031, 0, 0, 2324,
    /* 25304 */ 2325, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 225965, 225965, 225965, 0, 2559, 0, 0, 0, 2562, 0, 2344, 0,
    /* 25330 */ 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 31606, 29277, 29277, 29277,
    /* 25345 */ 82557, 82557, 84545, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557,
    /* 25360 */ 82557, 26030, 1861, 29331, 29331, 29331, 31335, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331,
    /* 25375 */ 29331, 29331, 29331, 29331, 29331, 30565, 29331, 29331, 29331, 31362, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    /* 25395 */ 2698, 0, 0, 0, 0, 0, 2917, 0, 0, 2841, 0, 0, 0, 0, 0, 0, 0, 360, 0, 0, 0, 0, 0, 139264, 0, 0, 2702, 0,
    /* 25423 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1144, 82557, 82557, 82557, 82557, 84689, 82557, 82557, 82557,
    /* 25446 */ 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 83339, 82557, 82557, 82557, 82557, 82557, 82557,
    /* 25461 */ 84699, 84700, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 29331,
    /* 25476 */ 29331, 29331, 29331, 29331, 29331, 2842, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 29277, 29277, 82557,
    /* 25498 */ 29331, 29277, 82557, 82557, 82557, 84805, 82557, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331,
    /* 25513 */ 29331, 29331, 29331, 29331, 29331, 29331, 29331, 30899, 85026, 85027, 82557, 82557, 82557, 85030, 82557,
    /* 25528 */ 82557, 82557, 82557, 82557, 82557, 29331, 31790, 31791, 29331, 29277, 82557, 29277, 29277, 29639, 29277,
    /* 25543 */ 29277, 82557, 82557, 82933, 82557, 82557, 0, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331,
    /* 25558 */ 29331, 29331, 29331, 29331, 29331, 29331, 29277, 29277, 29331, 29331, 31794, 29331, 29331, 29331, 29331,
    /* 25573 */ 29331, 29331, 29277, 0, 0, 0, 0, 0, 0, 0, 0, 0, 82557, 85127, 29331, 31880, 0, 29277, 82557, 29331, 0,
    /* 25594 */ 29277, 82557, 29331, 0, 29277, 82557, 29331, 29277, 82557, 29277, 29277, 82557, 82557, 82557, 29277,
    /* 25609 */ 29277, 29277, 29277, 29331, 29331, 29277, 82557, 29277, 29277, 29277, 29277, 82557, 82557, 82557, 82557,
    /* 25624 */ 29331, 29331, 29331, 29331, 3205, 0, 29277, 31878, 0, 447, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    /* 25648 */ 901, 901, 901, 901, 901, 901, 901, 493, 65536, 0, 0, 499, 0, 447, 0, 0, 506, 0, 513, 516, 516, 516, 516,
    /* 25671 */ 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 516, 529, 516, 516, 516,
    /* 25692 */ 516, 560, 560, 516, 560, 560, 572, 560, 560, 576, 560, 560, 560, 560, 560, 576, 560, 560, 576, 576, 576,
    /* 25713 */ 576, 576, 576, 576, 576, 576, 576, 576, 576, 576, 576, 576, 576, 29282, 29301, 82561, 29336, 29301,
    /* 25731 */ 29301, 82561, 29336, 29301, 82561, 29301, 29301, 82561, 82561, 82561, 29301, 29301, 29301, 29301, 29336,
    /* 25746 */ 29336, 29336, 29336, 29336, 29336, 29336, 29336, 29336, 29336, 29336, 29301, 82561, 29301, 29301, 82561,
    /* 25761 */ 29336, 29301, 29336, 1, 12290, 3, 78167, 78167, 86361, 0, 0, 0, 0, 0, 0, 0, 902, 0, 0, 0, 0, 0, 0, 0, 0,
    /* 25786 */ 0, 0, 82557, 82557, 82557, 82557, 82916, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557,
    /* 25802 */ 82557, 82557, 83718, 82557, 82557, 82557, 82557, 29331, 29331, 29331, 78167, 87129, 0, 0, 0, 0, 0, 1118,
    /* 25820 */ 0, 0, 0, 0, 0, 356, 0, 0, 0, 0, 364, 0, 456, 0, 416, 0, 0, 0, 0, 0, 29960, 902, 29277, 29277, 311901,
    /* 25845 */ 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 82557, 82557, 82557, 82557, 84979, 82557, 82557,
    /* 25860 */ 82557, 29277, 29277, 29277, 742704, 29277, 30002, 29277, 29277, 30005, 29277, 29277, 29277, 29277,
    /* 25874 */ 29277, 29277, 29277, 29277, 82557, 82557, 82557, 84050, 82557, 82557, 82557, 82557, 82557, 82557, 82557,
    /* 25889 */ 82557, 82557, 83332, 82557, 82557, 82557, 82557, 742794, 82557, 83340, 82557, 82557, 83343, 29331,
    /* 25903 */ 29331, 29331, 30165, 29331, 29331, 29331, 29331, 742875, 29331, 30173, 29331, 29331, 30176, 29331,
    /* 25917 */ 29331, 0, 0, 0, 0, 0, 0, 0, 2695, 0, 0, 0, 0, 0, 0, 2726, 0, 0, 0, 0, 2731, 0, 0, 0, 0, 1622, 0, 1623,
    /* 25945 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 377, 0, 0, 0, 1118208, 0, 0, 0, 0, 0, 29960, 0, 29277, 29277,
    /* 25972 */ 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 31027, 31028, 29277, 29277, 29277, 29331, 30628,
    /* 25987 */ 0, 0, 0, 0, 0, 1959, 0, 0, 0, 0, 0, 1961, 0, 0, 0, 0, 811, 821, 747, 0, 0, 0, 0, 0, 29277, 29277, 29576,
    /* 26014 */ 29277, 29277, 29632, 29277, 29277, 29277, 29277, 29616, 29277, 82557, 82892, 82557, 82557, 1971, 0, 0,
    /* 26030 */ 0, 0, 0, 1974, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1134, 0, 0, 0, 0, 0, 0, 0, 585728, 0, 0, 0, 0, 0, 0, 0, 0,
    /* 26060 */ 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 31413, 29277, 29277, 30743, 29277,
    /* 26075 */ 29277, 29277, 385629, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277,
    /* 26089 */ 29277, 31266, 29277, 29277, 29277, 29277, 30756, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277,
    /* 26104 */ 29277, 29277, 29277, 29277, 29277, 29277, 30766, 29277, 82557, 82557, 82557, 385661, 82557, 82557,
    /* 26118 */ 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 31789, 29331, 29331, 29331, 82557,
    /* 26133 */ 82557, 84070, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557,
    /* 26148 */ 26030, 1862, 29331, 29331, 385683, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331,
    /* 26163 */ 29331, 29331, 29331, 29331, 30160, 29331, 30887, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331,
    /* 26178 */ 29331, 29331, 29331, 29331, 29331, 29331, 29331, 31140, 0, 29277, 29277, 31020, 29277, 29277, 29277,
    /* 26193 */ 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 1000029, 29277, 82557, 29277,
    /* 26207 */ 29277, 29277, 31044, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277,
    /* 26222 */ 29614, 29277, 29277, 29277, 82557, 84316, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557,
    /* 26237 */ 82557, 82557, 82557, 82557, 82557, 83765, 1004157, 29331, 29331, 31116, 29331, 29331, 29331, 29331,
    /* 26251 */ 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 30592, 29331, 29331, 831488, 0, 0, 0, 0,
    /* 26268 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1174, 29277, 832093, 29277, 29277, 29277, 29277, 31261, 29277, 29277,
    /* 26289 */ 29277, 29277, 29277, 29277, 29277, 29277, 29277, 30006, 29277, 29277, 29277, 29277, 29277, 29277, 29277,
    /* 26304 */ 1053277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 82557, 82557, 82557, 82557, 82557,
    /* 26318 */ 82557, 82557, 84054, 82557, 82557, 82557, 82557, 1053309, 29331, 29331, 29331, 29331, 29331, 29331,
    /* 26332 */ 29331, 29331, 29331, 29331, 29331, 29277, 82557, 29277, 29277, 82557, 3036, 0, 0, 0, 2841, 0, 0, 0, 0,
    /* 26351 */ 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 82557, 29277,
    /* 26366 */ 29277, 31722, 29277, 29277, 29277, 29277, 29277, 82557, 82557, 82557, 82557, 82557, 82557, 84981, 82557,
    /* 26381 */ 0, 29331, 29331, 29331, 29331, 29331, 29331, 29724, 29331, 29331, 29331, 29331, 29331, 29331, 29331,
    /* 26396 */ 447123, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 30879, 29331, 29331, 29331, 29331,
    /* 26410 */ 30884, 29331, 29331, 29331, 29331, 29331, 29331, 31796, 29331, 29331, 29331, 29331, 29277, 0, 0, 0, 0,
    /* 26427 */ 0, 0, 431, 0, 0, 0, 1147419, 1147419, 1147419, 1147419, 1147439, 1147439, 0, 0, 0, 432, 435, 0, 0, 0,
    /* 26447 */ 86361, 0, 0, 0, 0, 0, 0, 0, 1031, 0, 0, 0, 0, 0, 0, 0, 0, 1032, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    /* 26478 */ 1698, 0, 0, 0, 0, 392, 446, 395, 395, 445, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1197, 1152, 0, 0, 0, 0, 0, 0, 0,
    /* 26506 */ 445, 445, 0, 395, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2303, 0, 0, 0, 0, 0, 392, 65536, 0, 0, 0, 0, 0, 395,
    /* 26534 */ 394, 0, 0, 394, 517, 517, 517, 517, 530, 530, 530, 530, 530, 530, 530, 530, 530, 530, 530, 530, 530,
    /* 26555 */ 530, 543, 530, 530, 530, 530, 530, 530, 530, 530, 530, 549, 530, 549, 549, 549, 549, 561, 549, 561, 561,
    /* 26576 */ 530, 561, 561, 549, 561, 580, 582, 561, 561, 549, 580, 561, 589, 589, 589, 589, 589, 589, 589, 589, 589,
    /* 26597 */ 589, 589, 589, 589, 589, 589, 589, 599, 589, 589, 589, 599, 589, 589, 589, 589, 589, 29283, 29302,
    /* 26616 */ 82562, 29337, 29302, 82562, 29302, 29302, 82562, 82562, 82562, 29302, 29302, 29302, 29302, 29337, 29337,
    /* 26631 */ 29337, 29337, 29337, 29337, 29337, 29337, 29337, 29337, 29337, 29337, 29337, 29302, 82562, 29302, 29302,
    /* 26646 */ 82562, 29337, 29302, 29337, 1, 12290, 3, 78167, 78167, 86361, 0, 0, 0, 0, 0, 0, 0, 1032, 1031, 1031,
    /* 26666 */ 1031, 1031, 1031, 1031, 1031, 1031, 901, 901, 901, 901, 0, 0, 0, 1031, 754, 755, 0, 0, 0, 0, 0, 0, 0, 0,
    /* 26690 */ 0, 0, 764, 765, 766, 0, 0, 0, 0, 2033, 0, 2035, 2036, 0, 0, 0, 0, 0, 0, 0, 0, 69632, 73728, 0, 384, 353,
    /* 26716 */ 353, 486, 487, 0, 0, 770, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 432, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    /* 26747 */ 0, 1993, 1994, 0, 432, 432, 0, 0, 786, 0, 788, 0, 0, 0, 0, 0, 0, 0, 795, 796, 859, 0, 0, 860, 0, 0, 0,
    /* 26774 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 237568, 0, 0, 0, 0, 0, 602112, 0, 708608, 0, 765952, 0, 0, 0, 0, 708608,
    /* 26800 */ 765952, 0, 0, 0, 0, 0, 2979, 0, 2841, 0, 0, 0, 0, 29277, 29277, 29277, 29277, 29277, 31811, 31812,
    /* 26820 */ 29277, 29277, 29277, 29277, 29277, 765952, 765952, 708608, 0, 0, 602112, 0, 709332, 0, 0, 0, 0, 0, 0, 0,
    /* 26840 */ 860, 0, 0, 0, 820, 0, 0, 0, 0, 786, 709332, 786, 0, 29277, 29277, 29277, 29580, 29277, 29586, 29277,
    /* 26860 */ 29277, 602717, 29277, 709538, 29277, 766557, 29277, 29277, 29612, 29615, 29277, 29277, 29625, 82903,
    /* 26874 */ 82557, 82557, 602749, 82557, 709609, 82557, 766589, 82557, 82557, 82931, 82934, 82939, 82557, 82946,
    /* 26888 */ 82557, 0, 29331, 29331, 29331, 29331, 29715, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331,
    /* 26903 */ 29331, 30562, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29745, 29748, 29753, 29331, 29760, 29331,
    /* 26918 */ 29331, 29277, 29277, 29277, 29615, 0, 0, 0, 29331, 29277, 82557, 29580, 29277, 29774, 29641, 29277,
    /* 26934 */ 82897, 82557, 83026, 82939, 82557, 0, 29711, 29331, 29277, 82557, 29582, 29638, 29277, 29619, 29277,
    /* 26949 */ 82899, 82930, 82557, 82940, 82557, 0, 29713, 29744, 29331, 29331, 29754, 29331, 29331, 29331, 29331,
    /* 26964 */ 29764, 29277, 824233, 29277, 0, 0, 0, 29331, 29277, 82557, 361053, 29277, 29277, 29642, 29277, 361085,
    /* 26980 */ 82557, 82557, 82942, 82557, 0, 361107, 29331, 29331, 0, 0, 1958, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1631,
    /* 27003 */ 0, 0, 0, 0, 29782, 29753, 29331, 78167, 87129, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1186, 0, 432, 432, 0,
    /* 27028 */ 1145, 0, 0, 0, 0, 0, 0, 0, 0, 1154, 0, 0, 0, 0, 0, 1159, 0, 0, 1177, 1178, 0, 0, 0, 0, 1183, 0, 0, 0, 0,
    /* 27057 */ 432, 432, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 193036, 1203, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    /* 27088 */ 0, 0, 0, 1234, 0, 1219, 0, 0, 0, 0, 1174, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1245, 0, 0, 0, 0, 0, 0, 0, 0, 1237,
    /* 27118 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 377, 204800, 204800, 0, 0, 0, 0, 29960, 902, 29277, 29277, 29277,
    /* 27143 */ 29277, 29277, 29277, 29277, 29969, 29277, 29277, 29277, 29277, 29277, 30772, 29277, 29277, 29277, 29277,
    /* 27158 */ 29277, 29277, 938589, 29277, 29277, 29277, 29277, 29277, 29592, 29277, 29277, 29277, 29277, 29277,
    /* 27172 */ 29277, 82557, 82557, 82557, 82557, 82557, 82557, 84690, 82557, 82557, 82557, 82557, 82557, 82557, 82557,
    /* 27187 */ 82557, 82557, 85068, 82557, 82557, 29331, 29331, 29331, 29331, 29277, 29277, 30020, 29277, 29277, 29277,
    /* 27202 */ 29277, 29277, 29277, 30029, 29277, 29277, 29277, 29277, 29277, 30036, 29277, 29277, 30039, 29277, 29277,
    /* 27217 */ 30007, 29277, 29277, 29277, 29277, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 467581, 82557,
    /* 27231 */ 82557, 82557, 82557, 82557, 82557, 82557, 83303, 82557, 82557, 82557, 82557, 82557, 82557, 83317, 82557,
    /* 27246 */ 82557, 83321, 82557, 82557, 82557, 82557, 82557, 82557, 85066, 82557, 85067, 82557, 82557, 82557, 29331,
    /* 27261 */ 29331, 29331, 29331, 29331, 31465, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 31134,
    /* 27276 */ 29331, 29331, 29331, 29331, 31138, 29331, 29331, 29331, 29331, 82557, 83345, 82557, 82557, 82557, 82557,
    /* 27291 */ 82557, 82557, 82557, 82557, 82557, 83361, 82557, 82557, 82557, 82557, 29331, 29331, 29331, 29331, 87129,
    /* 27306 */ 364544, 0, 0, 0, 0, 0, 0, 719, 720, 0, 0, 0, 0, 0, 0, 0, 0, 380, 381, 382, 0, 0, 0, 0, 0, 82557, 82557,
    /* 27333 */ 83370, 82557, 82557, 26030, 29960, 1032, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 30561,
    /* 27348 */ 29331, 29331, 29331, 29331, 29331, 29331, 30567, 30136, 29331, 29331, 29331, 29331, 29331, 29331, 30150,
    /* 27363 */ 29331, 29331, 30154, 29331, 29331, 29331, 29331, 29331, 29331, 31828, 29331, 29277, 0, 0, 0, 0, 0, 0,
    /* 27381 */ 29277, 29331, 29331, 29331, 29331, 30168, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331,
    /* 27396 */ 29331, 30178, 30203, 29331, 29331, 29277, 29277, 29277, 29277, 0, 29331, 29331, 29277, 82557, 29277,
    /* 27411 */ 29277, 29277, 29277, 29277, 29277, 30025, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277,
    /* 27426 */ 29638, 29277, 29619, 82557, 82557, 82899, 82557, 0, 0, 503808, 0, 0, 0, 0, 0, 1604, 0, 1605, 786432,
    /* 27445 */ 1606, 0, 1608, 1609, 0, 1635, 0, 0, 1638, 0, 0, 0, 788038, 1640, 0, 0, 0, 0, 1645, 1646, 0, 0, 0, 1649,
    /* 27469 */ 0, 0, 1036288, 0, 0, 1653, 0, 0, 0, 0, 1655, 1656, 1672, 0, 0, 0, 0, 0, 0, 0, 0, 1682, 0, 0, 0, 0, 1686,
    /* 27496 */ 0, 0, 0, 0, 2058, 0, 0, 0, 2064, 0, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 467549, 29277,
    /* 27515 */ 29277, 29277, 29277, 29277, 29277, 31609, 0, 1688, 0, 0, 0, 1692, 0, 0, 0, 0, 1697, 917504, 0, 0, 0, 0,
    /* 27537 */ 0, 1116, 0, 0, 0, 0, 1283, 294912, 0, 0, 0, 0, 0, 1130, 1131, 0, 0, 0, 0, 0, 0, 0, 0, 0, 453, 0, 0, 0,
    /* 27565 */ 0, 0, 0, 29277, 365149, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 30398, 29277, 29277,
    /* 27581 */ 504413, 29277, 29277, 29277, 29277, 29277, 31045, 29277, 29277, 29277, 29277, 29277, 29277, 29277,
    /* 27595 */ 29277, 29277, 29277, 29639, 29277, 82557, 82557, 82557, 82557, 29277, 30404, 29277, 30405, 29277, 29277,
    /* 27610 */ 29277, 29277, 29277, 29277, 30411, 30412, 30414, 29277, 29277, 29277, 29277, 29277, 29277, 520797,
    /* 27624 */ 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29995, 30417, 30418, 29277, 29277, 30420, 30421,
    /* 27639 */ 29277, 29277, 29277, 29277, 29277, 29277, 30428, 29277, 29277, 29277, 29277, 29277, 29277, 598621,
    /* 27653 */ 29277, 29277, 29277, 29277, 82557, 82557, 84684, 82557, 82557, 967261, 29277, 29277, 29277, 29277,
    /* 27667 */ 1036893, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 30445, 83707, 83708, 82557,
    /* 27681 */ 83710, 82557, 82557, 82557, 365181, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 83715,
    /* 27695 */ 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 83726, 82557, 82557, 82557, 504445, 82557,
    /* 27709 */ 82557, 82557, 83733, 82557, 83734, 82557, 82557, 82557, 82557, 82557, 82557, 83312, 82557, 83316, 82557,
    /* 27724 */ 82557, 83320, 82557, 83322, 82557, 82557, 82557, 82557, 82557, 83741, 83742, 83744, 82557, 82557, 82557,
    /* 27739 */ 82557, 83747, 788260, 82557, 82557, 83750, 83751, 82557, 82557, 1038136, 82557, 82557, 82557, 82557,
    /* 27753 */ 82557, 82557, 82557, 82557, 82557, 83778, 26030, 0, 30535, 29331, 30537, 30538, 29331, 30540, 29331,
    /* 27768 */ 29331, 29331, 365203, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29277, 29277, 29331, 29277,
    /* 27782 */ 82557, 31491, 29277, 84741, 82557, 29331, 29331, 30556, 29331, 29331, 29331, 504467, 29331, 29331,
    /* 27796 */ 29331, 30563, 29331, 30564, 29331, 29331, 29331, 343, 87129, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 400, 0, 0,
    /* 27819 */ 400, 400, 29331, 29331, 29331, 29331, 30571, 30572, 30574, 29331, 29331, 29331, 29331, 30577, 788338,
    /* 27834 */ 29331, 29331, 30580, 29331, 29331, 29331, 1038214, 29331, 29331, 29331, 29331, 29331, 29331, 29331,
    /* 27848 */ 29331, 29331, 30608, 29277, 29277, 29277, 29277, 29277, 31057, 29277, 31059, 29277, 29277, 29277, 29277,
    /* 27863 */ 29277, 29277, 29277, 82557, 82557, 29331, 29331, 0, 0, 2908, 0, 0, 0, 0, 0, 374, 375, 0, 212992, 0, 0,
    /* 27884 */ 0, 0, 0, 0, 0, 426, 430, 0, 0, 0, 0, 0, 0, 0, 451, 0, 454, 0, 0, 0, 454, 0, 0, 30611, 29277, 30613,
    /* 27910 */ 29331, 29277, 82557, 30421, 29277, 30619, 29277, 83751, 82557, 83871, 82557, 30581, 29331, 29331, 29331,
    /* 27925 */ 29331, 29331, 29331, 29331, 30589, 29331, 29331, 29331, 967315, 29331, 29331, 29331, 29277, 29277,
    /* 27939 */ 29277, 29277, 0, 29331, 30140, 29973, 83307, 29277, 30015, 29277, 29277, 30627, 29331, 0, 1957, 0, 0, 0,
    /* 27957 */ 1959, 0, 0, 0, 0, 0, 1961, 0, 0, 0, 0, 818, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2060, 2344, 0, 0, 0, 0, 0,
    /* 27987 */ 937984, 0, 0, 0, 1966, 0, 1968, 0, 1969, 0, 0, 0, 0, 0, 374, 0, 359, 118784, 0, 0, 0, 0, 0, 0, 0, 359,
    /* 28013 */ 0, 0, 0, 0, 0, 359, 359, 359, 1971, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1978, 1979, 0, 0, 0, 0, 0, 33499, 375,
    /* 28041 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 360, 360, 0, 0, 0, 0, 0, 1983, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    /* 28073 */ 1265, 0, 0, 0, 1073152, 0, 0, 0, 0, 0, 2001, 0, 0, 0, 0, 0, 0, 774, 0, 0, 0, 0, 0, 0, 0, 0, 432, 0,
    /* 28101 */ 2030, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2041, 0, 2043, 0, 0, 2046, 0, 0, 0, 0, 0, 0, 0, 1979, 0, 0, 2053,
    /* 28130 */ 0, 0, 0, 0, 884, 0, 0, 0, 0, 0, 335872, 0, 0, 0, 0, 0, 412, 0, 469, 436, 0, 0, 0, 0, 0, 0, 0, 2062, 0,
    /* 28159 */ 0, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 31774, 29277, 31776, 82557,
    /* 28174 */ 30792, 29277, 29277, 29277, 30796, 29277, 29277, 29277, 82557, 82557, 82557, 82557, 82557, 82557, 82557,
    /* 28189 */ 82557, 82557, 82557, 82557, 82557, 82557, 26030, 0, 29331, 82557, 82557, 82557, 82557, 82557, 84057,
    /* 28204 */ 82557, 84059, 82557, 82557, 82557, 82557, 82557, 82557, 84066, 82557, 0, 29331, 29331, 29331, 29710,
    /* 28219 */ 29714, 29331, 29331, 29331, 29331, 29331, 29734, 29331, 29738, 29331, 29277, 29331, 1, 12290, 3, 78167,
    /* 28235 */ 78167, 86361, 0, 0, 0, 0, 0, 0, 0, 746, 747, 0, 0, 0, 0, 0, 0, 0, 761, 0, 0, 852, 0, 0, 0, 0, 0, 84068,
    /* 28263 */ 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557,
    /* 28278 */ 83723, 1098365, 82557, 0, 0, 0, 0, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331,
    /* 28295 */ 31123, 29331, 29331, 29331, 29331, 31128, 29331, 29331, 29331, 30874, 29331, 30876, 29331, 29331, 29331,
    /* 28310 */ 29331, 29331, 29331, 30883, 29331, 30885, 29331, 29331, 0, 0, 2693, 880640, 0, 950272, 0, 0, 0, 0, 0, 0,
    /* 28330 */ 0, 0, 2064, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29331, 30936, 29331, 29331, 0, 749568,
    /* 28346 */ 1959, 0, 1961, 0, 0, 0, 2268, 0, 0, 0, 0, 0, 94570, 94570, 94570, 90473, 90473, 94570, 94570, 94570,
    /* 28366 */ 94570, 94570, 94570, 1, 12290, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 131072, 0, 0, 0, 0, 0, 0, 0,
    /* 28394 */ 348160, 0, 0, 0, 970752, 0, 0, 2317, 0, 0, 0, 0, 0, 1151, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 135168, 135168,
    /* 28420 */ 135168, 135168, 135168, 135168, 455261, 29277, 31033, 29277, 29277, 29277, 29277, 29277, 29277, 29277,
    /* 28434 */ 29277, 29277, 29277, 29277, 750173, 29277, 29277, 29277, 29277, 29331, 30877, 30748, 84060, 29277,
    /* 28448 */ 29277, 29277, 29277, 82557, 82557, 82557, 82557, 82557, 82557, 83730, 82557, 82557, 82557, 545405,
    /* 28462 */ 82557, 82557, 82557, 82557, 82557, 31558, 29331, 29331, 31559, 29331, 29331, 29331, 29331, 29331, 29331,
    /* 28477 */ 29331, 29277, 29277, 29331, 29277, 82557, 29277, 31358, 82557, 84608, 29277, 31042, 29277, 29277,
    /* 28491 */ 897629, 29277, 29277, 29277, 29277, 29277, 29277, 971357, 29277, 29277, 31051, 29277, 29277, 29277,
    /* 28505 */ 29277, 29331, 30928, 30929, 84178, 29277, 29277, 29277, 29277, 82557, 82557, 82557, 82557, 29331, 29331,
    /* 28520 */ 29331, 29331, 87129, 0, 0, 0, 0, 1557, 0, 0, 82557, 82557, 82557, 82557, 348797, 82557, 82557, 82557,
    /* 28538 */ 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 516733, 82557, 82557, 82557, 82557, 455293,
    /* 28552 */ 82557, 84331, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557,
    /* 28567 */ 83341, 82557, 82557, 82557, 750205, 82557, 82557, 84343, 82557, 82557, 82557, 897661, 82557, 82557,
    /* 28581 */ 82557, 82557, 82557, 82557, 971389, 82557, 82557, 82557, 82557, 84355, 82557, 82557, 82557, 82557,
    /* 28595 */ 82557, 0, 2440, 0, 0, 0, 0, 0, 1164, 1165, 0, 1167, 1168, 0, 0, 0, 0, 0, 0, 395, 0, 69632, 73728, 0, 0,
    /* 28620 */ 0, 0, 0, 0, 413, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2321, 29331, 455315, 29331, 31131, 29331,
    /* 28646 */ 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 30548, 29331, 29331, 29331,
    /* 28661 */ 29331, 29331, 750227, 29331, 29331, 31143, 29331, 29331, 29331, 897683, 29331, 29331, 29331, 29331,
    /* 28675 */ 29331, 29331, 29277, 0, 0, 0, 0, 0, 3087, 0, 0, 0, 971411, 29331, 29331, 29331, 29331, 31155, 29331,
    /* 28694 */ 29331, 29331, 29331, 29331, 29277, 29277, 29277, 29331, 29331, 29277, 82557, 29277, 29277, 29277, 30620,
    /* 28709 */ 82557, 82557, 82557, 83872, 29331, 29331, 0, 0, 2560, 0, 2561, 0, 0, 2344, 0, 29277, 29277, 29277,
    /* 28727 */ 29277, 29277, 29277, 29277, 29277, 29277, 31026, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277,
    /* 28742 */ 29277, 901725, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277,
    /* 28756 */ 31424, 29277, 29277, 29277, 82557, 82557, 82557, 82557, 84547, 82557, 82557, 82557, 82557, 82557,
    /* 28770 */ 901757, 82557, 82557, 82557, 82557, 82557, 26030, 29960, 1032, 29331, 29331, 29331, 29331, 29331, 29331,
    /* 28785 */ 30134, 29331, 29331, 29331, 29331, 29331, 31337, 29331, 29331, 29331, 29331, 29331, 901779, 29331,
    /* 28799 */ 29331, 29331, 29331, 29331, 29331, 760657, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331,
    /* 28813 */ 29331, 30172, 29331, 29331, 29331, 29331, 29331, 29331, 0, 0, 2712, 0, 2713, 0, 0, 0, 0, 0, 0, 0, 0,
    /* 28834 */ 2713, 0, 0, 0, 0, 1031, 1031, 1031, 1031, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 696320, 0, 0, 0, 0,
    /* 28862 */ 0, 0, 0, 0, 0, 0, 0, 372736, 0, 659456, 0, 0, 0, 0, 2272, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 167936, 0, 0,
    /* 28891 */ 0, 0, 0, 483328, 0, 29277, 29277, 29277, 29277, 29277, 373341, 29277, 29277, 29277, 422493, 29277,
    /* 28907 */ 29277, 29277, 29277, 29277, 29593, 29277, 29277, 29277, 29277, 29277, 29277, 82557, 82557, 82557, 82557,
    /* 28922 */ 82557, 82557, 84702, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 84347, 82557, 82557,
    /* 28937 */ 82557, 82557, 82557, 82557, 29277, 1069661, 1077853, 29277, 29277, 31429, 29277, 29277, 29277, 31433,
    /* 28951 */ 29277, 82557, 82557, 82557, 82557, 82557, 26030, 29960, 1032, 29331, 29331, 29331, 29331, 29331, 30133,
    /* 28966 */ 29331, 29331, 82557, 373373, 82557, 82557, 82557, 422525, 82557, 82557, 82557, 82557, 84695, 82557,
    /* 28980 */ 82557, 82557, 82557, 82557, 26030, 29960, 1032, 29331, 29331, 30130, 30131, 29331, 29331, 29331, 29331,
    /* 28995 */ 660093, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 84705, 84707, 82557, 82557, 84709,
    /* 29009 */ 82557, 1069693, 1077885, 29331, 29331, 29331, 29331, 29331, 29331, 373395, 29331, 29331, 29331, 422547,
    /* 29023 */ 29331, 29331, 29331, 29331, 0, 0, 0, 0, 0, 0, 2266, 0, 0, 0, 0, 0, 374, 375, 0, 0, 0, 0, 0, 0, 360448,
    /* 29048 */ 0, 0, 0, 0, 0, 0, 0, 822, 29277, 29277, 29277, 29277, 31474, 29331, 29331, 29331, 29331, 29331, 660115,
    /* 29067 */ 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 31484, 31486, 29331, 29331, 31488, 29331,
    /* 29081 */ 1069715, 1077907, 31489, 29277, 29331, 29277, 82557, 29277, 31492, 82557, 84742, 29331, 31496, 0, 0, 0,
    /* 29097 */ 0, 0, 0, 0, 0, 2831, 0, 0, 757760, 0, 0, 0, 0, 1129, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1234, 0, 0, 0, 0,
    /* 29127 */ 0, 729088, 1060864, 0, 0, 0, 0, 856064, 0, 0, 0, 0, 0, 0, 29277, 29277, 29277, 438877, 29277, 29277,
    /* 29147 */ 29277, 29277, 29277, 29277, 29277, 934493, 29277, 29277, 29277, 29277, 31526, 29277, 29277, 29277,
    /* 29161 */ 29277, 29277, 29277, 29277, 758365, 29277, 29277, 29277, 29277, 29277, 29598, 29277, 29277, 29277,
    /* 29175 */ 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29640, 29277, 82557, 82557, 82557, 82557, 29277, 29277,
    /* 29190 */ 340573, 29277, 29277, 760623, 29277, 29277, 29277, 29277, 82557, 82557, 340605, 82557, 82557, 82557,
    /* 29204 */ 82557, 82557, 82557, 541309, 82557, 82557, 84337, 82557, 631421, 655997, 82557, 82557, 82557, 82557,
    /* 29218 */ 82557, 82557, 553597, 82557, 82557, 84075, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 447101,
    /* 29232 */ 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 83732, 82557, 82557, 82557, 82557, 82557, 82557,
    /* 29247 */ 82557, 82557, 84792, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 760639, 82557,
    /* 29261 */ 82557, 82557, 82557, 82557, 82557, 83335, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557,
    /* 29276 */ 84101, 82557, 84103, 82557, 82557, 82557, 82557, 29277, 31576, 29277, 29277, 82557, 82557, 29331, 29331,
    /* 29291 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 2832, 0, 0, 0, 0, 0, 0, 0, 2915, 0, 0, 0, 0, 2841, 0, 2921, 0, 0, 2923, 0, 0,
    /* 29321 */ 0, 0, 1163, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1642, 0, 0, 0, 0, 29277, 31611, 29277, 82557, 82557, 82557,
    /* 29346 */ 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 83736, 82557, 82557, 82557, 82557,
    /* 29361 */ 82557, 84874, 82557, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331,
    /* 29376 */ 29331, 31471, 29331, 0, 651264, 0, 0, 0, 0, 0, 2841, 0, 2983, 0, 0, 29277, 29277, 29277, 29277, 29277,
    /* 29396 */ 31770, 31771, 29277, 29277, 29277, 29277, 31775, 29277, 82557, 82557, 82557, 84928, 82557, 82557, 82557,
    /* 29411 */ 82557, 82557, 82557, 82557, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331,
    /* 29426 */ 29331, 31695, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29277, 0, 0, 0, 0, 0, 3035, 82557, 82557,
    /* 29444 */ 82557, 82557, 496253, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 29331, 29331, 29331, 29331,
    /* 29458 */ 31744, 29331, 29331, 29331, 29331, 29331, 496275, 29331, 29331, 29331, 29331, 29331, 29331, 29331,
    /* 29472 */ 29277, 352256, 3130, 0, 0, 761856, 0, 0, 0, 0, 2297, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1214, 0, 0, 0, 0,
    /* 29499 */ 0, 0, 0, 0, 31808, 352861, 31809, 29277, 29277, 29277, 29277, 512605, 762461, 29277, 29277, 29277,
    /* 29515 */ 29277, 29277, 29633, 29277, 29599, 29277, 29277, 29277, 29277, 82557, 82557, 82557, 82557, 82557, 82557,
    /* 29530 */ 83773, 82557, 82557, 82557, 82557, 82557, 82557, 26030, 0, 29331, 85063, 352893, 85064, 82557, 82557,
    /* 29545 */ 512637, 82557, 762493, 82557, 82557, 82557, 82557, 31822, 352915, 31823, 29331, 29331, 0, 0, 2827, 0, 0,
    /* 29562 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 2717, 0, 0, 0, 0, 29331, 512659, 29331, 762515, 29331, 29331, 29331, 29331,
    /* 29584 */ 31829, 0, 0, 0, 0, 0, 0, 29277, 305839, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277,
    /* 29602 */ 29277, 29277, 30011, 29277, 29277, 29277, 29277, 82557, 85109, 82557, 82557, 82557, 930429, 29331,
    /* 29616 */ 31865, 29331, 29331, 29331, 930451, 0, 0, 0, 0, 0, 1223, 0, 0, 0, 1228, 0, 0, 0, 0, 1151, 0, 0, 354, 0,
    /* 29640 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1120, 1124, 0, 0, 0, 432, 354, 0, 0, 0, 86361, 0, 0, 0, 0, 440,
    /* 29669 */ 0, 0, 0, 0, 450, 452, 0, 0, 0, 0, 0, 0, 0, 1132, 0, 0, 0, 0, 0, 0, 0, 0, 2014, 0, 0, 0, 0, 0, 0, 0, 0,
    /* 29700 */ 0, 0, 476, 0, 0, 0, 476, 69632, 73728, 0, 0, 440, 440, 0, 366, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    /* 29729 */ 1143, 0, 0, 65536, 440, 366, 0, 366, 396, 366, 366, 0, 366, 366, 366, 366, 366, 366, 366, 366, 366, 366,
    /* 29751 */ 366, 366, 366, 366, 366, 366, 29284, 29303, 82563, 29338, 29303, 565, 366, 569, 569, 573, 569, 569, 366,
    /* 29770 */ 569, 581, 569, 569, 569, 366, 581, 569, 29303, 82563, 29338, 29303, 82563, 29303, 29303, 82563, 82563,
    /* 29787 */ 82563, 29303, 29303, 29303, 29303, 29338, 29338, 29338, 29338, 29338, 29338, 29338, 29338, 29338, 29338,
    /* 29802 */ 29338, 29303, 82563, 29303, 29303, 82563, 29338, 29303, 29338, 1, 12290, 3, 78167, 78167, 86361, 0, 0,
    /* 29819 */ 0, 0, 0, 0, 0, 1152, 0, 0, 0, 0, 0, 0, 0, 0, 1592, 0, 0, 0, 0, 0, 0, 0, 0, 819, 0, 0, 0, 0, 0, 0, 0,
    /* 29850 */ 819, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 29277, 29277, 29575, 29277, 29277, 29277, 29277, 627293, 29277,
    /* 29870 */ 29277, 29277, 29277, 82557, 82891, 82557, 82557, 0, 0, 0, 0, 29331, 29331, 29331, 29331, 29331, 29331,
    /* 29887 */ 29331, 30871, 29331, 29331, 0, 0, 0, 0, 0, 0, 0, 2830, 0, 0, 0, 0, 0, 2833, 82557, 82557, 82557, 82557,
    /* 29909 */ 627325, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 520829, 82557,
    /* 29923 */ 82557, 82557, 82557, 0, 0, 0, 1221, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 241664, 0, 0, 0, 0, 0, 0,
    /* 29950 */ 29960, 902, 29277, 29277, 29277, 29277, 29277, 29967, 29277, 29277, 29277, 29277, 29277, 29277, 30043,
    /* 29965 */ 29277, 29277, 29277, 82557, 82557, 82557, 82557, 82557, 82557, 29331, 29331, 29331, 29331, 29331, 29331,
    /* 29980 */ 3197, 0, 0, 0, 29277, 29978, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277,
    /* 29996 */ 29277, 29277, 29277, 29277, 31065, 82557, 83301, 82557, 82557, 82557, 82557, 82557, 83313, 82557, 82557,
    /* 30011 */ 82557, 82557, 82557, 82557, 82557, 82557, 82557, 84323, 82557, 82557, 82557, 82557, 84328, 82557, 29331,
    /* 30026 */ 29331, 29331, 29331, 30146, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331,
    /* 30041 */ 30174, 29331, 29331, 29331, 29331, 84081, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557,
    /* 30056 */ 82557, 82557, 82557, 82557, 82557, 82557, 84079, 82557, 82557, 84793, 82557, 82557, 82557, 82557, 82557,
    /* 30071 */ 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 84104, 82557, 82557, 307837, 82557, 82557,
    /* 30085 */ 82557, 82557, 82557, 307859, 29331, 29331, 29331, 29331, 29331, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    /* 30107 */ 0, 448, 0, 463485, 82557, 463507, 29331, 0, 29277, 82557, 29331, 0, 29277, 82557, 29331, 0, 29277,
    /* 30124 */ 82557, 29331, 29277, 82557, 29277, 29277, 82557, 82557, 82557, 29354, 29354, 29354, 29277, 29331, 29331,
    /* 30139 */ 0, 65536, 0, 488, 0, 488, 0, 488, 488, 507, 488, 488, 488, 488, 488, 488, 531, 531, 531, 531, 531, 531,
    /* 30161 */ 531, 531, 531, 531, 531, 531, 531, 531, 531, 531, 550, 531, 550, 550, 550, 550, 550, 550, 550, 550, 550,
    /* 30182 */ 531, 550, 550, 550, 550, 550, 550, 550, 550, 550, 550, 550, 550, 550, 550, 550, 550, 29285, 29285,
    /* 30201 */ 82564, 29339, 29285, 29285, 82564, 29339, 29285, 82564, 29285, 29285, 82564, 82564, 82564, 29285, 29285,
    /* 30216 */ 29285, 29285, 29339, 29339, 29339, 29339, 29339, 29339, 29339, 29339, 29339, 29339, 29339, 29285, 82564,
    /* 30231 */ 29285, 29285, 82564, 29339, 29285, 29339, 1, 12290, 3, 78167, 78167, 86361, 0, 0, 0, 0, 0, 0, 0, 1166,
    /* 30251 */ 0, 0, 0, 1170, 1171, 0, 0, 0, 29331, 29331, 29331, 78167, 87129, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1122, 1126,
    /* 30275 */ 0, 0, 1251, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 413, 414, 415, 0, 0, 1064960, 0, 0, 0, 0, 0, 2000, 0,
    /* 30304 */ 0, 0, 0, 0, 0, 0, 1182, 0, 1184, 0, 0, 0, 432, 432, 0, 30935, 29331, 29331, 29331, 0, 0, 0, 0, 0, 0, 0,
    /* 30330 */ 0, 0, 0, 0, 0, 2700, 0, 0, 0, 962560, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 432, 432, 0, 0, 0, 2545, 0,
    /* 30360 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 432, 432, 1188, 0, 835584, 0, 0, 0, 978944, 0, 0, 0, 0, 0, 0, 0, 0,
    /* 30389 */ 516096, 0, 0, 0, 0, 2341, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2333, 2334, 0, 0, 0, 0, 0, 0, 1032192, 0, 0,
    /* 30417 */ 299008, 0, 1056768, 0, 0, 0, 0, 0, 0, 0, 1195, 1196, 0, 0, 0, 0, 0, 0, 0, 1224, 0, 0, 0, 0, 0, 0, 1148,
    /* 30444 */ 0, 0, 0, 0, 299613, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277,
    /* 30461 */ 29992, 29277, 29277, 29277, 29277, 516701, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 836189,
    /* 30475 */ 29277, 29277, 29277, 29277, 1032797, 29277, 29277, 29277, 29277, 29586, 29277, 29277, 29277, 766557,
    /* 30489 */ 29277, 29615, 29641, 82557, 82557, 82897, 82557, 0, 29331, 29331, 29331, 29331, 29331, 29718, 29331,
    /* 30504 */ 29725, 29331, 29331, 29331, 29331, 29331, 29331, 29277, 3083, 3084, 0, 0, 0, 0, 0, 0, 0, 887, 887, 891,
    /* 30524 */ 0, 0, 0, 0, 0, 0, 1057373, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 299645,
    /* 30542 */ 82557, 82557, 82557, 82557, 82557, 82557, 83355, 82557, 82557, 83359, 82557, 82557, 82557, 82557, 83364,
    /* 30557 */ 82557, 82557, 82557, 82557, 82557, 836221, 82557, 82557, 82557, 82557, 82557, 82557, 1032829, 82557,
    /* 30571 */ 82557, 1057405, 82557, 0, 29331, 29331, 29331, 29711, 29331, 29717, 29331, 29331, 602771, 29331, 709671,
    /* 30586 */ 29331, 766611, 29331, 29277, 82557, 29277, 29277, 29640, 29277, 29277, 82557, 82557, 82938, 82557,
    /* 30600 */ 82557, 0, 29331, 29331, 29331, 29331, 29331, 29331, 29721, 29331, 29331, 29731, 29331, 29331, 29331,
    /* 30615 */ 29331, 29277, 0, 0, 0, 0, 0, 29277, 29277, 31858, 31859, 29277, 29277, 82557, 299667, 29331, 29331,
    /* 30632 */ 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 30177, 29331, 29331,
    /* 30647 */ 516755, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 836243, 29331, 29331, 29331, 29331,
    /* 30661 */ 29331, 29331, 832147, 29331, 29331, 29331, 29331, 29331, 31343, 29331, 29331, 29331, 29331, 1032851,
    /* 30675 */ 29331, 29331, 1057427, 29331, 29331, 29277, 29277, 29331, 29277, 82557, 29277, 29277, 82557, 82557,
    /* 30689 */ 29331, 29331, 0, 0, 0, 0, 0, 0, 2504, 0, 29331, 29331, 559952, 29331, 29331, 29331, 29331, 875346,
    /* 30707 */ 29331, 909971, 29331, 29331, 29331, 29331, 29331, 29331, 29277, 0, 0, 3085, 0, 0, 0, 0, 0, 0, 359, 360,
    /* 30727 */ 90473, 94570, 0, 0, 0, 0, 0, 0, 0, 122880, 122880, 122880, 122880, 122880, 0, 122880, 122880, 122880,
    /* 30745 */ 84871, 82557, 82557, 82557, 82557, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 467603, 29331,
    /* 30759 */ 29331, 29331, 29277, 29277, 29277, 29277, 0, 29331, 30141, 30034, 83308, 29277, 29277, 30217, 29277,
    /* 30774 */ 29331, 29331, 31638, 29331, 29331, 29331, 29331, 29277, 29277, 82557, 29331, 0, 0, 0, 0, 0, 374, 375, 0,
    /* 30793 */ 0, 0, 0, 0, 0, 0, 0, 0, 359, 359, 0, 0, 0, 0, 0, 29277, 561757, 877149, 29277, 82557, 561789, 877181,
    /* 30815 */ 82557, 29331, 561811, 877203, 29331, 0, 0, 29277, 29277, 29277, 29277, 348765, 29277, 29277, 29277,
    /* 30830 */ 29277, 29277, 29277, 29277, 29277, 29277, 29277, 30007, 29277, 29277, 29277, 29277, 29277, 0, 0, 0, 771,
    /* 30847 */ 772, 0, 0, 0, 0, 777, 0, 0, 0, 0, 0, 432, 0, 0, 0, 0, 0, 0, 0, 0, 0, 135168, 135168, 0, 0, 0, 0, 835, 0,
    /* 30876 */ 0, 0, 835, 0, 0, 0, 0, 0, 0, 835, 0, 0, 0, 0, 2521, 0, 0, 0, 0, 2526, 0, 0, 0, 0, 0, 0, 359, 360, 0, 0,
    /* 30906 */ 151552, 0, 0, 0, 0, 0, 29584, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277,
    /* 30923 */ 29277, 29277, 29277, 29277, 29277, 30430, 29626, 29277, 29277, 29584, 29277, 29277, 29277, 29277, 29277,
    /* 30938 */ 29277, 29277, 29277, 82557, 82557, 82557, 82901, 29715, 29584, 82901, 29277, 29277, 29277, 29277, 29626,
    /* 30953 */ 82557, 82557, 82557, 82557, 82947, 0, 29331, 29331, 0, 0, 0, 0, 0, 0, 1563, 0, 0, 0, 0, 0, 1569, 0,
    /* 30975 */ 29331, 29331, 29761, 78167, 87129, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1230, 0, 0, 0, 1234, 82557, 82557,
    /* 30998 */ 82557, 82557, 83352, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557,
    /* 31012 */ 1028733, 82557, 82557, 82557, 82557, 29331, 29331, 30185, 29331, 29331, 29331, 29331, 29331, 29331,
    /* 31026 */ 29331, 29331, 29331, 29331, 29331, 29331, 29331, 30896, 29331, 29331, 0, 1110016, 0, 0, 0, 0, 0, 0, 0,
    /* 31045 */ 0, 0, 0, 0, 0, 0, 0, 1158, 0, 29331, 29331, 376832, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 457, 355, 0,
    /* 31073 */ 0, 0, 2056, 0, 0, 0, 0, 0, 0, 0, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 31412, 29277,
    /* 31093 */ 29277, 29277, 29277, 29277, 29277, 29277, 377437, 29277, 29277, 29277, 29277, 29277, 29277, 29277,
    /* 31107 */ 29277, 29277, 29277, 29277, 29277, 30400, 29277, 29277, 29277, 82557, 82557, 377469, 82557, 82557,
    /* 31121 */ 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 84696, 82557, 598653,
    /* 31135 */ 377491, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331,
    /* 31149 */ 29331, 29331, 510118, 82557, 1000061, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 0, 0, 0,
    /* 31165 */ 0, 0, 0, 820, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1244, 0, 0, 0, 0, 0, 0, 29331, 29331, 1000083, 29331, 29331,
    /* 31190 */ 29331, 29331, 29331, 29331, 29331, 29331, 29277, 29277, 29277, 29331, 29331, 29277, 82557, 30617, 29277,
    /* 31205 */ 29277, 29277, 83869, 82557, 82557, 82557, 30625, 29331, 0, 0, 0, 0, 569344, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    /* 31227 */ 0, 0, 1558, 0, 0, 0, 0, 0, 0, 2834, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 760, 0, 0, 29277, 29277,
    /* 31255 */ 31577, 29277, 84826, 82557, 31579, 29331, 0, 0, 0, 0, 0, 0, 0, 0, 2525, 0, 0, 0, 0, 0, 2529, 2530, 2924,
    /* 31278 */ 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277,
    /* 31293 */ 30767, 29277, 29277, 1040989, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557,
    /* 31307 */ 82557, 82557, 82557, 427785, 82557, 82557, 82557, 82557, 82557, 82557, 1041021, 29331, 29331, 29331,
    /* 31321 */ 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 30591, 29331, 29331, 29331, 29331, 0, 0, 368, 0,
    /* 31338 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 781, 0, 432, 0, 65536, 483, 0, 0, 0, 0, 0, 0, 508, 0, 0, 398, 398,
    /* 31367 */ 398, 398, 532, 532, 532, 532, 532, 532, 532, 532, 532, 532, 532, 532, 532, 532, 532, 532, 551, 554, 551,
    /* 31388 */ 551, 551, 551, 551, 551, 551, 551, 551, 554, 551, 551, 577, 551, 551, 551, 551, 551, 577, 551, 551, 590,
    /* 31409 */ 591, 591, 591, 591, 591, 591, 591, 591, 591, 591, 591, 591, 591, 591, 591, 600, 591, 591, 591, 600, 591,
    /* 31430 */ 591, 591, 591, 591, 29286, 29304, 82565, 29340, 29304, 82565, 29304, 29304, 82565, 82565, 82565, 29304,
    /* 31446 */ 29304, 29304, 29304, 29340, 29340, 29340, 29340, 29340, 29340, 29340, 29340, 29340, 29340, 29340, 29340,
    /* 31461 */ 29340, 29304, 82565, 29304, 29304, 82565, 29340, 29304, 29340, 1, 12290, 3, 78167, 78167, 86361, 0, 0,
    /* 31478 */ 0, 0, 0, 0, 0, 1256, 1257, 0, 0, 0, 0, 0, 0, 0, 1455, 0, 0, 0, 0, 0, 0, 0, 0, 423, 424, 0, 0, 0, 0, 0,
    /* 31508 */ 0, 0, 798, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1173, 0, 0, 0, 844, 0, 0, 0, 0, 0, 0, 851, 0, 0,
    /* 31539 */ 854, 0, 0, 0, 0, 0, 122880, 0, 0, 122880, 122880, 0, 0, 0, 0, 0, 0, 0, 380928, 0, 0, 0, 0, 0, 0, 0, 0,
    /* 31566 */ 2728, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 882, 0, 0, 773, 780, 0, 0, 0, 866, 0, 0, 882, 866, 0, 0, 0, 0, 0, 0,
    /* 31596 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 1599, 29277, 29587, 29277, 29594, 29277, 29277, 29277, 29277, 29277, 29277,
    /* 31616 */ 29277, 29277, 29277, 29277, 29277, 29277, 30752, 29277, 29277, 29277, 29627, 29277, 29277, 29277, 29587,
    /* 31631 */ 29277, 29594, 29277, 29277, 29277, 29277, 29277, 82557, 82557, 82557, 82557, 82557, 82557, 83713, 82557,
    /* 31646 */ 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 83716, 83717, 82557, 82557, 82557, 82557, 83724,
    /* 31661 */ 82904, 82557, 82911, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557,
    /* 31676 */ 82948, 29331, 29783, 29762, 78167, 87129, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1575, 0, 0, 0, 0, 0, 0, 0,
    /* 31701 */ 1264, 0, 0, 0, 1268, 0, 0, 0, 0, 0, 0, 0, 0, 2536, 0, 0, 0, 0, 0, 0, 0, 82557, 82557, 82557, 82557,
    /* 31726 */ 83306, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 83323, 82557, 82557, 0, 0, 0, 0, 29331,
    /* 31743 */ 29331, 29331, 29331, 29331, 30869, 29331, 29331, 29331, 29331, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2271,
    /* 31764 */ 82557, 82557, 82557, 83330, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557,
    /* 31779 */ 82557, 82942, 82557, 82557, 82557, 82557, 82557, 83371, 82557, 82557, 26030, 29960, 1032, 29331, 29331,
    /* 31794 */ 29331, 29331, 29331, 29331, 29331, 29331, 30907, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331,
    /* 31809 */ 29331, 30139, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 30156, 29331, 29331, 29331, 29331,
    /* 31824 */ 2265, 0, 1959, 0, 1961, 0, 0, 0, 0, 0, 0, 0, 882, 882, 0, 0, 0, 0, 0, 0, 773, 29331, 30163, 29331,
    /* 31848 */ 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 30898, 29331,
    /* 31863 */ 29331, 29331, 29331, 29331, 30188, 29331, 29331, 30192, 29331, 29331, 29331, 29331, 30197, 29331, 29331,
    /* 31878 */ 29331, 29277, 29277, 29277, 29277, 0, 29331, 30212, 30213, 83462, 29277, 30216, 29277, 29277, 30204,
    /* 31893 */ 29331, 29331, 29277, 29277, 29277, 29277, 0, 29331, 29331, 29277, 82557, 29277, 29277, 29277, 29277,
    /* 31908 */ 29277, 29277, 30408, 29277, 29277, 30410, 29277, 29277, 672349, 29277, 29277, 29277, 1610, 0, 0, 0, 0,
    /* 31925 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1621, 0, 1647, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1201, 0, 0,
    /* 31956 */ 1673, 1674, 0, 1676, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1582, 0, 0, 0, 0, 29277, 29277, 29277, 30419,
    /* 31980 */ 29277, 29277, 29277, 29277, 29277, 29277, 29277, 30427, 29277, 29277, 29277, 29277, 29277, 29277, 30422,
    /* 31995 */ 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29608, 29277, 29277, 29277, 29277, 29623,
    /* 32010 */ 29277, 29277, 29277, 30433, 29277, 29277, 29277, 29277, 29277, 29277, 30439, 30441, 29277, 29277, 29277,
    /* 32025 */ 29277, 29277, 29277, 29277, 31420, 31421, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 31538,
    /* 32040 */ 29277, 82557, 82557, 82557, 82557, 82557, 82557, 30553, 29331, 29331, 29331, 29331, 29331, 29331, 29331,
    /* 32055 */ 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 963219, 29277, 30433, 29331, 29331, 29277,
    /* 32069 */ 82557, 29277, 29277, 29277, 29277, 82557, 82557, 82557, 82557, 29331, 29331, 29331, 29331, 0, 0, 29277,
    /* 32085 */ 29277, 2008, 0, 2009, 0, 0, 0, 2012, 0, 0, 0, 2015, 0, 0, 0, 0, 2020, 84095, 82557, 82557, 82557, 82557,
    /* 32107 */ 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 84105, 82557, 0, 29331, 29331, 29331,
    /* 32122 */ 29712, 29716, 29719, 29331, 29726, 29331, 29331, 29736, 29737, 29739, 29331, 29331, 0, 2692, 0, 0, 0, 0,
    /* 32140 */ 0, 0, 0, 0, 0, 0, 0, 0, 1199, 0, 0, 0, 0, 0, 0, 2285, 2286, 0, 0, 2288, 0, 2289, 0, 0, 0, 0, 0, 0, 899,
    /* 32169 */ 0, 0, 0, 0, 0, 29277, 29277, 29277, 29277, 0, 2295, 0, 0, 0, 0, 2299, 0, 0, 0, 0, 0, 0, 0, 0, 2308,
    /* 32194 */ 2322, 0, 0, 0, 0, 2327, 2328, 0, 0, 2331, 0, 0, 0, 0, 0, 2337, 0, 31018, 29277, 29277, 29277, 29277,
    /* 32216 */ 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 82557, 83706, 29277, 29277, 29277,
    /* 32231 */ 31034, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 30763, 29277,
    /* 32246 */ 29277, 29277, 29277, 31043, 29277, 29277, 29277, 29277, 29277, 31047, 29277, 29277, 29277, 29277, 29277,
    /* 32261 */ 31050, 29277, 31052, 82557, 82557, 82557, 82557, 82557, 84334, 82557, 82557, 82557, 82557, 84338, 82557,
    /* 32276 */ 82557, 82557, 82557, 82557, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 31634, 29331,
    /* 32291 */ 82557, 82557, 82557, 82557, 84344, 82557, 82557, 82557, 82557, 82557, 82557, 84349, 82557, 82557, 82557,
    /* 32306 */ 82557, 82557, 82557, 83758, 82557, 82557, 82557, 82557, 82557, 82557, 83764, 82557, 82557, 82557, 82557,
    /* 32321 */ 84353, 82557, 82557, 84356, 82557, 82557, 82557, 82557, 0, 0, 0, 0, 0, 0, 1151, 0, 0, 0, 0, 1156, 0, 0,
    /* 32343 */ 0, 0, 31114, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331,
    /* 32359 */ 29331, 29331, 1053331, 29331, 29331, 29331, 31153, 29331, 29331, 31156, 29331, 29331, 29331, 29331,
    /* 32373 */ 31160, 29277, 29277, 29331, 31162, 31163, 84412, 29277, 29277, 82557, 82557, 29331, 29331, 0, 0, 0, 0,
    /* 32390 */ 0, 0, 0, 0, 2696, 0, 0, 0, 0, 2701, 0, 2507, 0, 0, 0, 0, 0, 0, 0, 0, 2512, 0, 0, 0, 2516, 0, 0, 0, 0,
    /* 32419 */ 2704, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1135, 1139, 0, 0, 0, 29277, 29277, 29277, 31259, 29277, 31260,
    /* 32442 */ 29277, 31262, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 30424, 29277, 29277, 29277, 29277,
    /* 32457 */ 29277, 29277, 29277, 84531, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557,
    /* 32472 */ 82557, 82557, 82557, 84542, 84543, 82557, 82557, 84546, 82557, 82557, 82557, 82557, 84550, 82557, 82557,
    /* 32487 */ 84552, 82557, 84554, 82557, 82557, 0, 0, 0, 0, 29331, 29331, 29331, 29331, 30868, 29331, 29331, 29331,
    /* 32504 */ 29331, 29331, 29331, 848531, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 31801, 0, 0,
    /* 32520 */ 438272, 933888, 0, 0, 82557, 84557, 82557, 82557, 82557, 82557, 82557, 0, 0, 29331, 29331, 31316, 29331,
    /* 32537 */ 29331, 29331, 29331, 29277, 0, 0, 0, 0, 0, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277,
    /* 32554 */ 29277, 29277, 29277, 29277, 31415, 31321, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331,
    /* 32569 */ 29331, 29331, 29331, 29331, 29331, 31332, 31333, 29331, 29331, 31336, 29331, 29331, 29331, 29331, 31340,
    /* 32584 */ 29331, 29331, 31342, 29331, 31344, 29331, 29331, 0, 0, 0, 0, 0, 389120, 2829, 0, 0, 0, 581632, 0, 0, 0,
    /* 32605 */ 0, 0, 1159168, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 29960, 0, 29277, 29277, 29277, 29277, 29277, 29277, 29277,
    /* 32627 */ 29277, 29277, 29277, 29277, 29277, 29277, 29277, 31031, 29331, 31347, 29331, 29331, 29331, 29331, 29331,
    /* 32642 */ 29277, 29277, 29331, 29277, 82557, 29277, 29277, 82557, 82557, 29331, 29331, 0, 0, 0, 0, 0, 2503, 0, 0,
    /* 32661 */ 82557, 82557, 82557, 84688, 82557, 82557, 82557, 82557, 84693, 82557, 82557, 82557, 82557, 82557, 82557,
    /* 32676 */ 82557, 0, 0, 29331, 31315, 29331, 29331, 29331, 29331, 29331, 2913, 0, 0, 0, 0, 0, 0, 0, 2841, 0, 0, 0,
    /* 32698 */ 0, 0, 0, 0, 0, 0, 0, 0, 29277, 29277, 29277, 82557, 82557, 82557, 84862, 82557, 82557, 82557, 82557,
    /* 32717 */ 82557, 82557, 82557, 82557, 82557, 84537, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 84872, 82557,
    /* 32732 */ 82557, 82557, 29331, 29331, 29331, 31629, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29277, 29277,
    /* 32747 */ 82557, 29331, 0, 0, 0, 0, 0, 29331, 29331, 29331, 31639, 29331, 29331, 29331, 29277, 29277, 82557,
    /* 32764 */ 29331, 0, 0, 0, 0, 0, 374, 375, 0, 0, 0, 327680, 0, 0, 0, 0, 0, 374, 375, 0, 0, 217088, 0, 0, 0, 0, 0,
    /* 32791 */ 0, 359, 360, 0, 0, 0, 0, 0, 0, 0, 725, 0, 0, 3038, 3039, 2841, 0, 0, 0, 0, 29277, 29277, 29277, 29277,
    /* 32815 */ 29277, 29277, 31720, 31721, 29277, 29277, 29277, 29277, 31725, 31726, 29277, 82557, 82557, 82557, 82557,
    /* 32830 */ 82557, 82557, 82557, 82557, 84061, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 84983, 82557, 84985,
    /* 32845 */ 84986, 82557, 84987, 82557, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 31748, 29331, 31750,
    /* 32860 */ 31751, 29331, 31752, 29331, 31754, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1666, 0, 0, 0, 1669, 0, 0, 29277, 29277,
    /* 32883 */ 31837, 31838, 29277, 29277, 82557, 82557, 82557, 85091, 85092, 82557, 82557, 29331, 29331, 29331, 29331,
    /* 32898 */ 344723, 29331, 29331, 29331, 31467, 29331, 29331, 29331, 29331, 31472, 29331, 31849, 31850, 29331,
    /* 32912 */ 29331, 29277, 0, 0, 0, 0, 0, 29277, 29277, 29277, 29277, 29277, 29277, 31410, 29277, 29277, 29277,
    /* 32929 */ 29277, 29277, 29277, 82557, 82557, 29331, 29331, 0, 29277, 82557, 29331, 3213, 31886, 85135, 31888, 0,
    /* 32945 */ 29277, 82557, 29331, 29331, 29331, 31464, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331,
    /* 32960 */ 29331, 494321, 401, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1699, 0, 0, 0, 816, 0, 0, 0, 0, 0, 0,
    /* 32989 */ 0, 0, 0, 0, 0, 0, 0, 262144, 0, 0, 29277, 356957, 29277, 29277, 29277, 29277, 29277, 29277, 29277,
    /* 33008 */ 29277, 29277, 29277, 29277, 29277, 29277, 29277, 725597, 29277, 356989, 82557, 82557, 82557, 82557,
    /* 33022 */ 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 84329, 0, 402, 403, 0, 0,
    /* 33039 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 810, 0, 0, 0, 467, 0, 0, 0, 0, 454, 0, 69632, 73728, 0, 0, 0, 0, 0,
    /* 33068 */ 367, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1249, 0, 0, 65536, 0, 367, 500, 367, 0, 367, 367, 0, 367,
    /* 33096 */ 367, 367, 367, 367, 367, 533, 533, 533, 540, 533, 533, 533, 533, 533, 533, 533, 533, 533, 533, 533, 540,
    /* 33117 */ 533, 533, 533, 533, 533, 533, 533, 533, 547, 552, 533, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552,
    /* 33138 */ 602, 29287, 29287, 82566, 29341, 29287, 552, 552, 552, 552, 533, 552, 552, 552, 552, 552, 552, 552, 552,
    /* 33157 */ 552, 552, 552, 552, 552, 552, 552, 552, 29287, 82566, 29341, 29287, 82566, 29287, 29287, 82566, 82566,
    /* 33174 */ 82566, 29287, 29287, 29287, 29287, 29341, 29341, 29341, 29341, 29341, 29341, 29341, 29341, 29341, 29341,
    /* 33189 */ 29341, 29287, 82566, 29287, 29287, 82566, 29341, 29287, 29341, 1, 12290, 3, 78167, 78167, 86361, 0, 0,
    /* 33206 */ 0, 0, 0, 0, 0, 1571, 0, 0, 0, 0, 0, 0, 0, 0, 69632, 73728, 0, 0, 484, 484, 0, 0, 0, 0, 0, 747, 0, 747,
    /* 33234 */ 0, 0, 0, 0, 892, 0, 747, 0, 0, 0, 0, 0, 180224, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1213, 0, 0, 0, 0, 1217,
    /* 33263 */ 29277, 29277, 29589, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29616, 29277, 29277,
    /* 33278 */ 29277, 29277, 29277, 30023, 29277, 29277, 29277, 30030, 29277, 29277, 29277, 29277, 29277, 29277, 29277,
    /* 33293 */ 30409, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 30416, 82557, 82906, 82557, 82557, 82557, 82557,
    /* 33308 */ 82557, 82557, 82557, 82557, 82557, 82935, 82557, 82557, 82557, 82557, 82557, 82557, 83772, 83774, 82557,
    /* 33323 */ 82557, 82557, 82557, 82557, 26030, 0, 29331, 29331, 29331, 29749, 29331, 29331, 29331, 29331, 29331,
    /* 33338 */ 29576, 29277, 29277, 29616, 0, 0, 0, 29706, 29749, 29331, 29331, 343, 87129, 0, 0, 0, 1116, 0, 0, 0, 0,
    /* 33359 */ 0, 1122, 1126, 0, 1146, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1595, 0, 0, 0, 0, 0, 29960, 902,
    /* 33386 */ 29277, 29963, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 30749, 29277, 29277, 29277, 29277,
    /* 33401 */ 29277, 29277, 29277, 29973, 29979, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29990, 29277,
    /* 33416 */ 29277, 29277, 29277, 29277, 29277, 29277, 31430, 29277, 29277, 29277, 82557, 82557, 82557, 82557, 82557,
    /* 33431 */ 26030, 29960, 1032, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29277, 29277, 29277, 29277,
    /* 33446 */ 0, 0, 188416, 29331, 82557, 82557, 82557, 82557, 82557, 83354, 82557, 82557, 82557, 82557, 82557, 82557,
    /* 33462 */ 82557, 82557, 82557, 82557, 2187, 2440, 0, 0, 0, 0, 83367, 82557, 82557, 82557, 82557, 26030, 29960,
    /* 33479 */ 1032, 29331, 30129, 29331, 29331, 29331, 29331, 29331, 29331, 29761, 29331, 29277, 29277, 29277, 29277,
    /* 33494 */ 0, 0, 0, 29331, 29331, 29331, 29331, 30140, 30147, 29331, 29331, 29331, 29331, 29331, 29331, 29331,
    /* 33510 */ 29331, 30159, 29331, 29331, 0, 0, 0, 0, 1559, 1959, 0, 0, 0, 0, 1565, 1961, 0, 0, 0, 0, 736, 831, 832,
    /* 33533 */ 0, 0, 0, 0, 837, 838, 758, 0, 0, 0, 0, 747, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1982, 29331,
    /* 33562 */ 29331, 29331, 30187, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 30200, 29331,
    /* 33577 */ 29331, 0, 2826, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 245760, 0, 0, 0, 82557, 83354, 82557, 82557,
    /* 33601 */ 29331, 30187, 29331, 29331, 87129, 0, 0, 1556, 0, 0, 0, 0, 0, 1289, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 749,
    /* 33626 */ 0, 634880, 751, 0, 0, 29277, 29277, 29277, 30389, 30390, 29277, 29277, 29277, 30396, 29277, 29277,
    /* 33642 */ 29277, 29277, 29277, 29277, 29277, 29277, 82557, 84977, 82557, 84978, 82557, 82557, 82557, 82557, 82557,
    /* 33657 */ 82557, 82557, 83755, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557,
    /* 33672 */ 83719, 82557, 82557, 82557, 30554, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331,
    /* 33687 */ 29331, 29331, 29331, 30566, 29331, 29331, 2691, 0, 0, 0, 0, 0, 344064, 0, 0, 2697, 0, 0, 0, 0, 0, 1254,
    /* 33709 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 29277, 29277, 29277, 29277, 30741, 29277, 29331, 29331, 29331, 29331,
    /* 33729 */ 30585, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 30607, 29331, 29331,
    /* 33744 */ 29277, 29277, 0, 0, 0, 1985, 0, 0, 0, 0, 0, 0, 0, 0, 1992, 0, 0, 0, 0, 0, 286720, 0, 0, 0, 0, 0, 0, 0,
    /* 33772 */ 0, 286720, 286720, 1, 12290, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2038, 0, 0, 0, 0, 0, 29277, 29277, 30782,
    /* 33797 */ 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277,
    /* 33811 */ 1110621, 29277, 82557, 84082, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557,
    /* 33825 */ 84092, 82557, 82557, 82557, 82557, 82557, 82557, 832125, 82557, 82557, 82557, 82557, 82557, 84553,
    /* 33839 */ 82557, 82557, 82557, 82557, 82557, 82557, 85031, 82557, 85033, 82557, 85035, 82557, 29331, 29331, 29331,
    /* 33854 */ 29331, 29331, 29331, 29331, 31466, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29277, 29277, 82557,
    /* 33869 */ 29331, 0, 2971, 0, 2973, 0, 82557, 84096, 82557, 82557, 82557, 82557, 84099, 82557, 82557, 82557, 82557,
    /* 33886 */ 82557, 82557, 82557, 82557, 82557, 84551, 82557, 82557, 82557, 82557, 82557, 82557, 29331, 29331, 29331,
    /* 33901 */ 29331, 30916, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 30921, 29331,
    /* 33916 */ 29331, 29331, 29331, 31129, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331,
    /* 33931 */ 29331, 29331, 29331, 29331, 30912, 29331, 29277, 29277, 29277, 29277, 31247, 29277, 29277, 29277, 29277,
    /* 33946 */ 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29642, 82557, 82557, 82557, 82557, 82557, 82557, 82557,
    /* 33961 */ 82557, 82557, 84561, 82557, 0, 0, 29331, 29331, 29331, 29331, 29331, 29331, 31320, 29277, 29277, 549469,
    /* 33977 */ 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29620, 29277,
    /* 33992 */ 29277, 29331, 29331, 549523, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331,
    /* 34006 */ 29331, 29331, 29331, 31150, 29331, 29331, 82557, 82557, 84804, 82557, 82557, 29331, 29331, 29331, 29331,
    /* 34021 */ 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 31470, 29331, 29331, 29331, 29331, 31825, 29331,
    /* 34036 */ 31826, 29331, 29331, 29331, 29277, 0, 0, 0, 0, 0, 0, 31835, 31871, 29277, 29277, 29277, 85121, 82557,
    /* 34054 */ 82557, 82557, 31875, 29331, 29331, 29331, 0, 0, 29277, 29277, 29277, 31021, 29277, 29277, 29277, 29277,
    /* 34070 */ 29277, 29277, 29277, 29277, 29277, 29277, 29277, 30442, 29277, 29277, 29277, 29277, 0, 0, 0, 355, 0, 0,
    /* 34088 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 443, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 282624, 282624,
    /* 34118 */ 282624, 0, 65536, 0, 0, 0, 0, 0, 0, 0, 509, 0, 0, 443, 443, 443, 443, 534, 443, 443, 578, 443, 443, 443,
    /* 34142 */ 443, 443, 578, 443, 443, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534,
    /* 34163 */ 544, 534, 534, 534, 534, 534, 534, 534, 534, 443, 534, 443, 443, 443, 443, 443, 578, 578, 578, 578, 578,
    /* 34184 */ 578, 578, 578, 578, 578, 578, 578, 578, 578, 578, 578, 29288, 29288, 82567, 29342, 29288, 29288, 82567,
    /* 34202 */ 29342, 29288, 82567, 29288, 29288, 82567, 82567, 82567, 29288, 29288, 29288, 29288, 29342, 29342, 29342,
    /* 34217 */ 29342, 29342, 29342, 29342, 29342, 29342, 29342, 29342, 29288, 82567, 29288, 29288, 82567, 29342, 29288,
    /* 34232 */ 29342, 1, 12290, 3, 78167, 78532, 86361, 0, 0, 0, 0, 0, 0, 0, 1591, 0, 0, 0, 0, 0, 0, 0, 0, 69632,
    /* 34256 */ 73728, 0, 0, 0, 0, 0, 488, 0, 0, 0, 748, 0, 748, 0, 0, 0, 0, 0, 0, 748, 0, 0, 0, 0, 0, 29277, 29277,
    /* 34283 */ 29277, 29277, 29277, 29277, 29590, 29277, 29277, 29599, 29277, 29277, 29277, 29277, 29277, 29277, 29277,
    /* 34298 */ 29277, 29277, 29277, 31062, 29277, 29277, 29277, 29277, 82557, 82557, 82907, 82557, 82557, 82917, 82557,
    /* 34313 */ 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 1110653, 82557, 26030, 0, 29331,
    /* 34328 */ 1276, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2007, 30017, 29277, 29277, 30021, 29277, 29277,
    /* 34351 */ 29277, 29277, 29277, 29277, 29277, 29277, 29277, 30034, 29277, 29277, 29277, 29277, 29277, 31272, 29277,
    /* 34366 */ 29277, 29277, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 84866, 82557, 82557, 82557, 82557,
    /* 34381 */ 29277, 29277, 29277, 30040, 29277, 29277, 29277, 29277, 29277, 29277, 82557, 82557, 82557, 82557, 82557,
    /* 34396 */ 82557, 82557, 84087, 84088, 82557, 82557, 82557, 82557, 82557, 82557, 938621, 29331, 29331, 29331,
    /* 34410 */ 30141, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 30895, 29331,
    /* 34425 */ 29331, 29331, 82557, 82557, 83469, 82557, 29331, 29331, 30225, 29331, 87129, 0, 0, 0, 577536, 0, 0, 0,
    /* 34443 */ 0, 0, 327680, 0, 0, 0, 0, 0, 0, 327680, 0, 0, 0, 0, 0, 328538, 0, 675840, 0, 0, 0, 0, 29277, 29277,
    /* 34467 */ 328586, 29277, 29277, 29277, 29277, 676445, 29277, 29277, 29277, 29277, 82557, 328654, 82557, 82557,
    /* 34481 */ 1561, 0, 0, 0, 1567, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1580, 0, 0, 0, 1586, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    /* 34512 */ 0, 0, 548864, 0, 0, 0, 1601, 0, 0, 0, 0, 679936, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1989, 0, 0, 0, 0, 0, 0,
    /* 34540 */ 29277, 30447, 29277, 30449, 29277, 29277, 680541, 29277, 29277, 29277, 29277, 29277, 29277, 29277,
    /* 34554 */ 82557, 82557, 29331, 29331, 0, 0, 0, 0, 0, 0, 0, 2912, 82557, 82557, 82557, 82557, 83729, 82557, 82557,
    /* 34573 */ 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 83360, 82557, 82557, 82557, 82557, 82557,
    /* 34588 */ 0, 0, 2031, 0, 0, 0, 0, 0, 2037, 0, 0, 0, 0, 0, 2042, 0, 0, 0, 0, 2725, 0, 0, 0, 0, 2729, 0, 0, 0, 0, 0,
    /* 34618 */ 0, 780, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1616, 0, 0, 0, 0, 0, 0, 688733, 29277, 29277, 29277, 82557, 82557,
    /* 34642 */ 29331, 29331, 0, 0, 0, 0, 0, 0, 0, 0, 2847, 0, 0, 0, 0, 0, 29277, 29277, 0, 0, 2976, 0, 0, 0, 0, 2841,
    /* 34668 */ 0, 0, 0, 0, 29277, 29277, 29277, 29277, 31718, 29277, 29277, 29331, 29331, 29331, 29331, 995933, 0, 0,
    /* 34686 */ 0, 0, 0, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 31773, 29277, 29277, 29277,
    /* 34702 */ 82557, 0, 0, 369, 370, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1105920, 0, 0, 0, 0, 0, 432, 0, 0, 404, 0,
    /* 34731 */ 86361, 0, 0, 0, 0, 0, 0, 0, 1679, 0, 0, 0, 0, 0, 0, 0, 0, 776, 0, 0, 0, 0, 0, 0, 432, 370, 459, 405, 0,
    /* 34760 */ 0, 0, 0, 0, 0, 404, 0, 405, 0, 0, 0, 0, 0, 1615, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2730, 0, 0, 0, 0, 0, 458,
    /* 34791 */ 0, 0, 0, 458, 0, 0, 0, 69632, 73728, 0, 0, 0, 0, 0, 0, 1175, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 432,
    /* 34820 */ 432, 0, 494, 65536, 0, 0, 501, 0, 404, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2302, 0, 0, 2305, 2306, 0, 0, 535,
    /* 34846 */ 535, 535, 535, 535, 535, 535, 535, 535, 541, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
    /* 34866 */ 29289, 29305, 82568, 29343, 29305, 535, 535, 535, 535, 545, 535, 546, 545, 535, 535, 535, 535, 535, 535,
    /* 34885 */ 535, 535, 535, 535, 535, 545, 535, 535, 546, 545, 535, 535, 535, 570, 541, 570, 570, 535, 570, 570, 570,
    /* 34906 */ 570, 570, 535, 570, 570, 29305, 82568, 29343, 29305, 82568, 29305, 29305, 82568, 82568, 82568, 29305,
    /* 34922 */ 29305, 29305, 29305, 29343, 29343, 29343, 29343, 29343, 29343, 29343, 29343, 29343, 29343, 29343, 29305,
    /* 34937 */ 82568, 29305, 29305, 82568, 29343, 29305, 29343, 1, 12290, 3, 78167, 78167, 86361, 0, 0, 0, 0, 0, 0, 0,
    /* 34957 */ 1680, 0, 0, 1683, 0, 0, 0, 0, 0, 797, 0, 0, 0, 0, 0, 803, 0, 0, 0, 0, 0, 809, 0, 0, 0, 0, 0, 643072, 0,
    /* 34986 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 925696, 0, 0, 0, 2291, 0, 0, 0, 0, 0, 829, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    /* 35017 */ 0, 0, 812, 0, 0, 0, 0, 0, 869, 0, 0, 0, 0, 0, 872, 0, 0, 0, 0, 794, 0, 0, 0, 0, 2841, 0, 0, 0, 0, 29277,
    /* 35047 */ 29277, 406109, 29277, 29277, 29277, 29277, 29277, 29277, 30798, 29277, 82557, 82557, 82557, 82557,
    /* 35061 */ 82557, 82557, 82557, 82557, 83357, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 879, 797, 0, 0, 0,
    /* 35078 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1598, 0, 751, 0, 797, 879, 0, 879, 872, 0, 0, 0, 893, 0, 749, 895, 896,
    /* 35106 */ 0, 0, 0, 0, 2841, 0, 0, 0, 0, 31715, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 30026, 29277,
    /* 35125 */ 29277, 29277, 29277, 29277, 29973, 29277, 29277, 29277, 29277, 29591, 29277, 29277, 635808, 29277,
    /* 35139 */ 29277, 29277, 29607, 29277, 29277, 29277, 29277, 29622, 29277, 29277, 29277, 29277, 29597, 29277, 29277,
    /* 35154 */ 29277, 29277, 824233, 29611, 29277, 29277, 29619, 29277, 29277, 29277, 29277, 29277, 553565, 29277,
    /* 35168 */ 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 664157, 29277, 29277, 29277, 29277,
    /* 35182 */ 29277, 82557, 82908, 82557, 82557, 635878, 82557, 82557, 82557, 82926, 82557, 82557, 82557, 82557,
    /* 35196 */ 82943, 82557, 82557, 0, 0, 0, 0, 29331, 29331, 29331, 30867, 29331, 29331, 29331, 29331, 29331, 29331,
    /* 35213 */ 29762, 29331, 29277, 29277, 29277, 29277, 0, 0, 0, 29331, 29331, 29331, 29331, 29331, 29757, 29331,
    /* 35229 */ 29331, 29331, 29577, 29277, 29607, 29277, 0, 0, 0, 29707, 0, 0, 1147, 1148, 1149, 1150, 0, 0, 0, 0, 0,
    /* 35250 */ 0, 0, 0, 0, 0, 2848, 0, 0, 0, 29277, 29277, 0, 1190, 0, 0, 1192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1660,
    /* 35278 */ 0, 0, 0, 0, 0, 0, 0, 1206, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1134592, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    /* 35310 */ 1262, 0, 0, 0, 0, 0, 0, 0, 0, 1269, 0, 1262, 0, 0, 0, 0, 0, 1684, 370324, 29960, 0, 29277, 29277, 29277,
    /* 35334 */ 29277, 29277, 29277, 29277, 29277, 31025, 29277, 29277, 29277, 29277, 31030, 29277, 0, 1185, 0, 0, 0,
    /* 35351 */ 1279, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 29277, 29277, 29277, 30740, 29277, 29277, 29974, 29277, 29277,
    /* 35371 */ 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 30791, 29277,
    /* 35386 */ 30038, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 82557, 82557, 82557, 82557, 82557, 82557,
    /* 35401 */ 82557, 84100, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 84934, 82557, 31688, 29331, 29331,
    /* 35416 */ 29331, 31692, 29331, 82557, 83328, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557,
    /* 35431 */ 82557, 82557, 82557, 82557, 84078, 82557, 82557, 82557, 83347, 82557, 82557, 82557, 82557, 82557, 82557,
    /* 35446 */ 82557, 82557, 82557, 82557, 82557, 82557, 82557, 928127, 82557, 82557, 29331, 29331, 29331, 30142,
    /* 35460 */ 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 30161, 30180, 29331, 29331,
    /* 35475 */ 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 31345, 29331,
    /* 35490 */ 82557, 83468, 82557, 82557, 29331, 30224, 29331, 29331, 87129, 0, 0, 0, 0, 0, 0, 0, 1694, 0, 0, 0, 0, 0,
    /* 35512 */ 0, 0, 0, 2301, 0, 0, 0, 0, 0, 0, 0, 0, 1658, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1670, 0, 82557,
    /* 35542 */ 82557, 82557, 82557, 82557, 83712, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 83722, 82557,
    /* 35557 */ 0, 29331, 29331, 29331, 29713, 29331, 29331, 29331, 29331, 29729, 29331, 29331, 29331, 29331, 824366, 0,
    /* 35573 */ 2045, 0, 0, 0, 0, 0, 0, 0, 1044480, 0, 0, 0, 0, 0, 0, 1194, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1116, 0, 1146, 0,
    /* 35602 */ 0, 0, 0, 29277, 29277, 29277, 1045085, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277,
    /* 35618 */ 29277, 29277, 29277, 30788, 29277, 29277, 29277, 29331, 29331, 29331, 29331, 30903, 29331, 29331, 29331,
    /* 35633 */ 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 31124, 29331, 29331, 29331, 29331, 0, 0, 819200,
    /* 35649 */ 0, 0, 905216, 2287, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2315, 0, 0, 0, 0, 0, 0, 2294, 0, 0, 0, 0, 2298, 0, 0, 0,
    /* 35678 */ 0, 0, 0, 0, 0, 2307, 0, 0, 0, 0, 2841, 0, 3041, 0, 892928, 29277, 29277, 29277, 29277, 29277, 29277,
    /* 35699 */ 29277, 29277, 291453, 82557, 82557, 82557, 82557, 82557, 84053, 82557, 0, 2338, 0, 0, 0, 2342, 0, 0, 0,
    /* 35718 */ 0, 0, 0, 0, 0, 0, 0, 106496, 0, 0, 0, 0, 0, 29277, 31032, 29277, 29277, 29277, 31035, 29277, 29277,
    /* 35739 */ 29277, 29277, 31038, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 31537, 29277, 29277, 82557, 82557,
    /* 35754 */ 82557, 82557, 82557, 82557, 82557, 488061, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557,
    /* 35768 */ 83759, 82557, 82557, 82557, 967293, 82557, 82557, 82557, 82557, 819805, 29277, 29277, 29277, 29277,
    /* 35782 */ 29277, 907590, 29277, 29277, 29277, 31049, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 31669,
    /* 35796 */ 29277, 29277, 29277, 82557, 82557, 82557, 82557, 82557, 29331, 29331, 29331, 29331, 29331, 29331, 29331,
    /* 35811 */ 29331, 31563, 29331, 29331, 82557, 84330, 82557, 84332, 82557, 82557, 82557, 84335, 82557, 82557, 82557,
    /* 35826 */ 82557, 82557, 84339, 82557, 82557, 0, 0, 0, 0, 29331, 29331, 30866, 29331, 29331, 29331, 29331, 29331,
    /* 35843 */ 29331, 29331, 29763, 29277, 29277, 29277, 29277, 0, 0, 0, 29331, 82557, 82557, 82557, 819837, 82557,
    /* 35859 */ 82557, 82557, 82557, 82557, 82557, 907644, 82557, 82557, 82557, 84352, 82557, 0, 29331, 29331, 29705,
    /* 35874 */ 29331, 29331, 29331, 29331, 29331, 29331, 627347, 29331, 29331, 29331, 29331, 0, 0, 1959, 0, 1961, 0, 0,
    /* 35892 */ 0, 0, 0, 0, 0, 392, 393, 394, 395, 0, 0, 0, 0, 0, 29331, 29331, 31130, 29331, 31132, 29331, 29331,
    /* 35913 */ 29331, 31135, 29331, 29331, 29331, 29331, 29331, 31139, 29331, 29331, 2825, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    /* 35933 */ 0, 0, 0, 0, 835, 0, 0, 29331, 29331, 29331, 29331, 819859, 29331, 29331, 29331, 29331, 29331, 29331,
    /* 35951 */ 907692, 29331, 29331, 29331, 31152, 2518, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2527, 1081344, 573440, 0, 0, 0, 0,
    /* 35973 */ 0, 741376, 0, 0, 742494, 0, 1231, 0, 0, 0, 520192, 1275, 0, 0, 0, 2532, 0, 0, 0, 2535, 0, 2537, 0, 0,
    /* 35997 */ 2539, 0, 0, 0, 0, 0, 884736, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 610304, 0, 0, 0, 0, 0, 2558, 0, 0, 0, 0, 0,
    /* 36026 */ 0, 0, 0, 31236, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 30423, 29277, 29277, 30426, 29277,
    /* 36042 */ 29277, 29277, 29277, 29277, 29277, 29277, 31258, 29277, 29277, 29277, 29277, 29277, 29277, 31263, 29277,
    /* 36057 */ 31265, 29277, 29277, 1081949, 29277, 29277, 29277, 29277, 30001, 29277, 29277, 29277, 29277, 29277,
    /* 36071 */ 29277, 29277, 29277, 29277, 29277, 29277, 29991, 29277, 29277, 29277, 29277, 29277, 31269, 29277, 29277,
    /* 36086 */ 29277, 29277, 29277, 29277, 29277, 84524, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 84346, 82557,
    /* 36101 */ 82557, 82557, 82557, 82557, 82557, 82557, 82557, 725629, 82557, 82557, 82557, 82557, 82557, 82557,
    /* 36115 */ 82557, 84556, 82557, 82557, 84559, 82557, 82557, 1081981, 0, 0, 31314, 29331, 29331, 29331, 29331,
    /* 36130 */ 29331, 29331, 30190, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29277, 0, 0, 0, 0,
    /* 36147 */ 0, 3131, 31346, 29331, 29331, 31349, 29331, 29331, 1082003, 29277, 29277, 31354, 31355, 84604, 29277,
    /* 36162 */ 29277, 82557, 82557, 0, 0, 0, 0, 29331, 30865, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331,
    /* 36179 */ 31701, 29331, 29277, 0, 0, 0, 0, 0, 0, 0, 0, 868352, 2703, 0, 0, 0, 0, 0, 0, 598016, 0, 0, 0, 0, 0, 374,
    /* 36205 */ 375, 37240, 0, 0, 0, 0, 0, 0, 0, 0, 1226, 0, 0, 0, 0, 0, 0, 0, 2733, 0, 2734, 29277, 29277, 31408,
    /* 36229 */ 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 31264, 29277, 29277, 29277, 29277,
    /* 36244 */ 29277, 29277, 29277, 29277, 31417, 29277, 29277, 29277, 29277, 29277, 29277, 31422, 31423, 29277, 29277,
    /* 36259 */ 29277, 29277, 29277, 29277, 30773, 29277, 29277, 29277, 29277, 30778, 29277, 29277, 29277, 29277, 29277,
    /* 36274 */ 29277, 30759, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 30440, 29277, 29277, 29277,
    /* 36289 */ 29277, 29277, 29277, 82557, 82557, 82557, 82557, 82557, 84701, 82557, 84703, 82557, 82557, 82557, 82557,
    /* 36304 */ 82557, 82557, 82557, 82557, 84359, 82557, 0, 0, 0, 2441, 0, 1861, 29331, 29331, 29331, 31475, 29331,
    /* 36321 */ 598675, 29331, 29331, 29331, 29331, 29331, 31480, 29331, 31482, 29331, 29331, 0, 0, 0, 0, 2694, 0, 0, 0,
    /* 36340 */ 0, 0, 0, 0, 0, 0, 37303, 0, 0, 0, 0, 0, 0, 29277, 389725, 31524, 29277, 29277, 29277, 31528, 31529,
    /* 36361 */ 29277, 582237, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 30452, 788178, 29277, 30454, 29277,
    /* 36375 */ 29277, 1038072, 83705, 82557, 82557, 82557, 82557, 84794, 84795, 82557, 82557, 82557, 582269, 82557,
    /* 36389 */ 82557, 82557, 82557, 84801, 82557, 82557, 0, 0, 0, 2192, 29331, 29331, 29331, 29331, 29331, 29331,
    /* 36405 */ 29331, 29331, 29331, 29331, 30918, 29331, 30920, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331,
    /* 36420 */ 29331, 582291, 29331, 29331, 29331, 29331, 31571, 29331, 29331, 29331, 29331, 29331, 29331, 29331,
    /* 36434 */ 29277, 29277, 82557, 29331, 0, 0, 2972, 0, 0, 29277, 29277, 29277, 29277, 82557, 82557, 29331, 29331,
    /* 36451 */ 393216, 0, 0, 0, 0, 0, 0, 0, 1967, 0, 0, 0, 0, 0, 0, 0, 0, 2330, 0, 0, 0, 0, 0, 0, 0, 82557, 82557,
    /* 36478 */ 82557, 82557, 84930, 82557, 82557, 82557, 82557, 82557, 29331, 29331, 29331, 29331, 29331, 29331, 29331,
    /* 36493 */ 29331, 29331, 29331, 31635, 29331, 29331, 29331, 31697, 29331, 29331, 29331, 29331, 29331, 29277, 0,
    /* 36508 */ 405504, 0, 0, 913408, 0, 0, 0, 0, 2841, 3040, 0, 3042, 0, 29277, 31716, 29277, 31717, 29277, 29277,
    /* 36527 */ 29277, 29277, 29277, 29277, 427705, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277,
    /* 36541 */ 82557, 82557, 82557, 84527, 82557, 82557, 82557, 29277, 914013, 29277, 31723, 29277, 29277, 29277,
    /* 36555 */ 29277, 82557, 82557, 406141, 82557, 82557, 82557, 82557, 84982, 82557, 82557, 82557, 82557, 914045,
    /* 36569 */ 82557, 82557, 29331, 29331, 406163, 29331, 29331, 29331, 29331, 31747, 29331, 29331, 29331, 29331,
    /* 36583 */ 29331, 31144, 29331, 29331, 29331, 29331, 29331, 29331, 31149, 29331, 29331, 29331, 29277, 29277, 29277,
    /* 36598 */ 29277, 0, 30211, 30143, 29975, 83310, 29277, 29277, 29277, 29277, 29277, 29277, 31058, 29277, 29277,
    /* 36613 */ 29277, 29277, 29277, 29277, 29277, 29277, 82557, 82557, 82557, 82557, 82557, 84052, 82557, 82557, 29331,
    /* 36628 */ 29331, 29331, 914067, 29331, 29331, 29277, 0, 0, 0, 3086, 0, 0, 3088, 0, 0, 0, 0, 1179, 0, 0, 0, 0, 0,
    /* 36651 */ 0, 0, 0, 432, 432, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 794, 0, 0, 82557, 82557, 85110, 85111, 82557, 82557,
    /* 36676 */ 29331, 29331, 31866, 31867, 29331, 29331, 0, 0, 0, 0, 0, 0, 0, 1960, 0, 1122, 0, 0, 0, 1962, 888832,
    /* 36697 */ 889437, 889469, 889491, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1142784, 0, 0, 0, 0, 0, 460, 0, 0, 0, 0,
    /* 36724 */ 0, 0, 0, 0, 0, 0, 0, 0, 363, 0, 0, 143360, 0, 65536, 409, 410, 409, 410, 411, 504, 410, 0, 410, 410,
    /* 36748 */ 504, 504, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 29290, 29290,
    /* 36768 */ 82569, 29344, 29290, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536,
    /* 36787 */ 521, 555, 521, 521, 521, 521, 562, 562, 521, 562, 562, 574, 562, 562, 521, 579, 562, 562, 579, 579, 521,
    /* 36808 */ 562, 579, 29290, 82569, 29344, 29290, 82569, 29290, 29290, 82569, 82569, 82569, 29355, 29355, 29355,
    /* 36823 */ 29290, 29344, 29344, 29344, 29344, 29344, 29344, 29344, 29344, 29344, 29344, 29344, 29290, 82569, 29290,
    /* 36838 */ 29290, 82569, 29344, 29290, 29344, 1, 12290, 3, 78167, 78167, 86361, 0, 0, 0, 0, 0, 0, 0, 2013, 0, 0, 0,
    /* 36860 */ 0, 0, 0, 0, 0, 69632, 73728, 0, 0, 135168, 135168, 0, 0, 713, 0, 715, 0, 1019904, 0, 359, 360, 0, 0, 0,
    /* 36884 */ 0, 0, 723, 0, 0, 0, 0, 1222, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1618, 0, 0, 0, 0, 726, 727, 0, 0, 0, 374,
    /* 36914 */ 375, 0, 0, 0, 0, 0, 736, 0, 0, 738, 739, 740, 741, 742, 743, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2016, 0,
    /* 36942 */ 0, 0, 0, 0, 0, 756, 0, 758, 759, 0, 0, 0, 0, 0, 763, 0, 0, 0, 0, 0, 1973, 0, 0, 0, 0, 0, 0, 0, 1980, 0,
    /* 36972 */ 0, 0, 0, 0, 800, 0, 0, 0, 0, 805, 0, 807, 0, 0, 0, 0, 0, 375, 0, 360, 139264, 0, 0, 0, 0, 0, 0, 0, 359,
    /* 37001 */ 0, 0, 0, 0, 0, 118784, 0, 0, 813, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2028, 0, 843, 0, 846,
    /* 37030 */ 774144, 0, 848, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2343, 0, 0, 0, 0, 0, 0, 0, 0, 848, 0, 0, 0, 0, 848, 0, 0, 0,
    /* 37060 */ 0, 0, 0, 0, 865, 758, 807, 0, 1019904, 0, 0, 0, 0, 874, 0, 0, 0, 876, 0, 0, 0, 0, 364, 356, 468, 0, 437,
    /* 37087 */ 0, 0, 0, 0, 0, 0, 364, 0, 888, 0, 0, 723, 0, 0, 890, 781, 0, 0, 0, 0, 0, 0, 1019904, 876, 876, 0, 0, 0,
    /* 37115 */ 0, 0, 0, 0, 0, 0, 1019904, 29277, 29277, 29277, 29581, 29585, 29588, 29277, 29595, 29277, 29277, 29603,
    /* 37133 */ 29604, 29606, 29277, 29277, 29277, 29617, 1020509, 29277, 29277, 29277, 29277, 29277, 31527, 29277,
    /* 37147 */ 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 30031, 29277, 30033, 29277, 29277, 29277,
    /* 37162 */ 29277, 29277, 29277, 29630, 29631, 29277, 29595, 29277, 29637, 29277, 29617, 1020509, 82557, 82557,
    /* 37176 */ 82898, 82902, 82905, 82557, 82912, 82557, 82557, 82922, 82923, 82925, 82557, 82557, 82557, 82936,
    /* 37190 */ 1020541, 82557, 82557, 82557, 82557, 82557, 82920, 82557, 82924, 82557, 82929, 82557, 82932, 82557,
    /* 37204 */ 82557, 82945, 82557, 29331, 29331, 29750, 1020563, 29331, 29331, 29331, 29331, 29277, 29277, 29277,
    /* 37218 */ 29617, 0, 0, 0, 29331, 29331, 29331, 29331, 29331, 31338, 29331, 29331, 29331, 29331, 29331, 29331,
    /* 37234 */ 29331, 29331, 29331, 29331, 30909, 29331, 29331, 29331, 29331, 30913, 29770, 29771, 83020, 29581, 29277,
    /* 37249 */ 29617, 1020509, 29776, 82898, 82557, 82936, 1020541, 83028, 0, 29712, 29331, 29331, 29331, 29331, 29331,
    /* 37264 */ 31351, 29331, 29277, 29277, 29331, 29277, 82557, 29277, 29277, 82557, 82557, 29331, 29331, 0, 0, 0, 0,
    /* 37281 */ 2502, 0, 0, 0, 29750, 1020563, 29784, 78167, 87129, 0, 0, 0, 0, 1117, 0, 0, 0, 0, 0, 0, 1267, 0, 0, 0,
    /* 37305 */ 0, 0, 0, 0, 0, 0, 1282, 0, 0, 0, 1284, 0, 0, 0, 1128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1859, 0,
    /* 37336 */ 1160, 0, 0, 1162, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 397, 0, 0, 0, 1235, 0, 0, 0, 0, 0, 0, 1242, 0, 0,
    /* 37366 */ 0, 0, 0, 0, 0, 0, 69632, 73728, 0, 0, 0, 0, 447, 0, 0, 0, 0, 1252, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    /* 37396 */ 397, 398, 399, 0, 0, 0, 1277, 1277, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 412, 0, 0, 0, 29277, 29277,
    /* 37422 */ 29999, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 30014, 29277, 29277, 29277,
    /* 37437 */ 29277, 29277, 447069, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 31256, 82557,
    /* 37451 */ 82557, 83329, 82557, 82557, 82557, 82557, 82557, 82557, 83337, 82557, 82557, 82557, 82557, 82557, 82557,
    /* 37466 */ 82557, 84549, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 84336, 82557, 82557, 82557, 82557,
    /* 37481 */ 82557, 82557, 82557, 82557, 83346, 82557, 82557, 83353, 82557, 82557, 82557, 82557, 82557, 82557, 82557,
    /* 37496 */ 82557, 82557, 83365, 82557, 0, 29331, 29331, 29706, 29331, 29331, 29331, 29720, 29331, 29331, 29331,
    /* 37511 */ 29331, 29331, 29331, 29331, 29277, 29277, 82557, 29331, 0, 0, 0, 0, 2974, 30162, 29331, 29331, 29331,
    /* 37528 */ 29331, 29331, 29331, 30170, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 30179, 29331, 29331, 30186,
    /* 37543 */ 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 30198, 29331, 29331, 29331, 29277, 29277,
    /* 37558 */ 29277, 29277, 1244, 29331, 29331, 29277, 82557, 29277, 29277, 29277, 29277, 29277, 82557, 82557, 82557,
    /* 37573 */ 82557, 82557, 0, 29331, 29331, 0, 0, 0, 1690, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 757, 0, 0, 0, 0, 0, 0,
    /* 37601 */ 0, 671744, 0, 0, 29960, 0, 29277, 30380, 29277, 29277, 29277, 30384, 29277, 29277, 29277, 29277, 30022,
    /* 37618 */ 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29975, 29277, 29277, 29277, 29277, 29983, 29277,
    /* 37633 */ 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29994, 29277, 82557, 82557, 82557, 82557, 83711, 82557,
    /* 37648 */ 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 83777, 82557, 82557, 26030, 1861,
    /* 37663 */ 29331, 82557, 82557, 83740, 82557, 82557, 672381, 82557, 82557, 82557, 82557, 82557, 82557, 82557,
    /* 37677 */ 82557, 82557, 82557, 84062, 82557, 82557, 82557, 82557, 84067, 82557, 82557, 82557, 83769, 82557, 82557,
    /* 37692 */ 82557, 82557, 82557, 82557, 82557, 82557, 82557, 26030, 0, 29331, 29331, 29331, 29331, 29331, 31641,
    /* 37707 */ 29331, 29277, 29277, 82557, 29331, 782336, 0, 0, 0, 0, 0, 1180, 1181, 0, 0, 0, 0, 0, 0, 432, 432, 0,
    /* 37729 */ 30536, 29331, 29331, 29331, 29331, 30541, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331,
    /* 37744 */ 29331, 1073811, 29331, 29331, 1094291, 1098387, 29331, 29331, 29331, 29331, 30570, 29331, 29331, 672403,
    /* 37758 */ 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 31122, 29331, 29331, 31125, 31126, 29331,
    /* 37773 */ 29331, 29331, 29331, 29331, 29331, 30599, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331,
    /* 37788 */ 29277, 29277, 29277, 29277, 0, 0, 0, 29331, 0, 1126, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1970, 0, 1137, 0, 0,
    /* 37813 */ 0, 0, 2844, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31522, 29277, 29277, 29277, 29277, 29331, 29331, 29277, 82557,
    /* 37834 */ 30931, 29277, 29277, 29277, 84181, 82557, 82557, 82557, 82557, 82557, 82557, 680573, 82557, 82557,
    /* 37848 */ 82557, 82557, 82557, 82557, 82557, 82557, 82557, 85034, 82557, 85036, 29331, 29331, 29331, 29331, 0, 0,
    /* 37864 */ 1972, 0, 1141, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2023, 0, 0, 0, 0, 0, 0, 0, 0, 29277, 29277, 30769,
    /* 37890 */ 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29621, 29277,
    /* 37905 */ 29277, 82557, 82557, 82557, 82557, 84084, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557,
    /* 37920 */ 82557, 82557, 84090, 82557, 82557, 82557, 82557, 82557, 29331, 29331, 30901, 29331, 29331, 29331, 29331,
    /* 37935 */ 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 31574, 29331, 29331, 0, 0, 0, 2311, 0, 0,
    /* 37953 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 789, 0, 0, 0, 29277, 29277, 31055, 29277, 29277, 29277, 29277, 29277,
    /* 37975 */ 29277, 29277, 29277, 29277, 29277, 29277, 29277, 82557, 84922, 82557, 84924, 82557, 29277, 29277, 29277,
    /* 37990 */ 29277, 31271, 29277, 29277, 29277, 29277, 82557, 84525, 82557, 82557, 82557, 82557, 82557, 29331, 29331,
    /* 38005 */ 29331, 29331, 29331, 29331, 29331, 29331, 31633, 29331, 29331, 82557, 84544, 82557, 82557, 82557, 82557,
    /* 38020 */ 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 84340, 82557, 29331, 31334, 29331,
    /* 38035 */ 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 31483, 29331,
    /* 38050 */ 29277, 29277, 29277, 29277, 31418, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277,
    /* 38065 */ 29277, 30009, 29277, 29277, 29277, 29277, 82557, 82557, 84687, 82557, 82557, 82557, 82557, 82557, 82557,
    /* 38080 */ 82557, 82557, 82557, 82557, 82557, 84697, 82557, 0, 29331, 29331, 29707, 29331, 29331, 29331, 29722,
    /* 38095 */ 29331, 29331, 635940, 29331, 29331, 29331, 29740, 29331, 29331, 29331, 29331, 31476, 29331, 29331,
    /* 38109 */ 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 922259, 29331, 29331, 29331, 29331, 0,
    /* 38124 */ 31597, 29277, 29277, 29277, 29277, 31601, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277,
    /* 38139 */ 30776, 29277, 29277, 29277, 29277, 30780, 29277, 29277, 29277, 29277, 84860, 82557, 82557, 82557, 82557,
    /* 38154 */ 84864, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 0, 2191, 29331, 29331, 29331, 29331, 29331,
    /* 38169 */ 29331, 29331, 29277, 29277, 410259, 410205, 410237, 29277, 29277, 82557, 82557, 2975, 0, 0, 2977, 0, 0,
    /* 38186 */ 0, 2841, 0, 0, 0, 0, 29277, 29277, 31660, 29277, 29277, 29277, 29277, 30041, 29277, 29277, 29277, 29277,
    /* 38204 */ 29277, 82557, 82557, 311933, 82557, 82557, 82557, 82557, 82557, 82557, 84988, 29331, 29331, 29331,
    /* 38218 */ 29331, 29331, 29331, 29331, 29331, 29331, 30194, 29331, 29331, 29331, 29331, 29331, 29331, 29277, 29277,
    /* 38233 */ 29277, 29277, 31666, 31667, 29277, 29277, 29277, 29277, 29277, 82557, 82557, 84923, 82557, 82557, 0, 0,
    /* 38249 */ 2191, 0, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 31341, 29331, 29331,
    /* 38264 */ 29331, 29331, 29331, 29331, 82557, 84927, 82557, 82557, 82557, 82557, 82557, 84933, 82557, 82557, 29331,
    /* 38279 */ 29331, 31690, 29331, 29331, 29331, 29277, 29277, 29277, 30018, 0, 29331, 29331, 29277, 82557, 29277,
    /* 38294 */ 29277, 29277, 29277, 29277, 29277, 29277, 1073757, 29277, 29277, 1094237, 1098333, 29277, 29277, 30790,
    /* 38308 */ 29277, 31694, 29331, 29331, 29331, 29331, 29331, 31700, 29331, 29331, 29277, 0, 0, 0, 0, 0, 0, 1280, 0,
    /* 38327 */ 0, 0, 0, 0, 0, 0, 0, 0, 1653, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 520192, 0, 0, 0, 0, 3037, 0, 0, 2841,
    /* 38357 */ 0, 0, 0, 0, 29277, 29277, 29277, 29277, 29277, 31719, 29277, 29277, 29277, 29277, 30406, 29277, 29277,
    /* 38374 */ 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 30032, 29277, 29976, 29277, 29277, 29277,
    /* 38389 */ 29277, 29277, 29277, 31724, 29277, 29277, 29277, 82557, 82557, 82557, 82557, 82557, 84980, 82557, 82557,
    /* 38404 */ 0, 2189, 0, 0, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 942739, 29331,
    /* 38420 */ 29331, 29331, 29331, 29331, 82557, 84984, 82557, 82557, 82557, 82557, 82557, 29331, 29331, 29331, 29331,
    /* 38435 */ 29331, 31745, 29331, 29331, 29331, 29277, 29277, 30209, 29277, 0, 29331, 29331, 29277, 82557, 29277,
    /* 38450 */ 29277, 29277, 29277, 29277, 29277, 30746, 29277, 29277, 434781, 29277, 29277, 29277, 30753, 29277,
    /* 38464 */ 29277, 31749, 29331, 29331, 29331, 29331, 29331, 29277, 0, 0, 0, 0, 0, 0, 0, 0, 0, 29277, 29277, 29277,
    /* 38484 */ 31239, 31240, 29277, 29277, 0, 0, 0, 371, 372, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2025, 0, 0, 0, 0, 0, 0,
    /* 38511 */ 0, 432, 0, 436, 0, 0, 86361, 0, 0, 0, 0, 0, 0, 0, 2051, 0, 0, 0, 2051, 0, 0, 0, 2055, 371, 0, 0, 0, 372,
    /* 38539 */ 371, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 122880, 122880, 122880, 122880, 122880, 122880, 469, 0, 0, 0, 469, 0,
    /* 38562 */ 412, 0, 69632, 73728, 0, 0, 0, 0, 0, 0, 1590, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1573, 0, 0, 0, 0, 0, 0, 495,
    /* 38590 */ 65536, 0, 0, 0, 0, 0, 0, 0, 510, 0, 0, 0, 0, 0, 0, 1663, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2065, 29277, 29277,
    /* 38618 */ 29277, 29277, 29277, 29277, 436, 436, 436, 436, 436, 436, 436, 0, 0, 0, 0, 0, 436, 0, 0, 0, 0, 0, 436,
    /* 38641 */ 0, 0, 0, 0, 0, 436, 0, 588, 436, 436, 436, 436, 436, 436, 436, 436, 436, 436, 436, 29291, 29306, 82570,
    /* 38663 */ 29345, 29306, 82570, 29306, 29306, 82570, 82570, 82570, 29306, 29306, 29306, 29306, 29345, 29345, 29345,
    /* 38678 */ 29345, 29345, 29345, 29345, 29345, 29345, 29345, 29345, 29345, 29345, 29306, 82570, 29306, 29365, 82618,
    /* 38693 */ 29345, 29365, 29376, 1, 12290, 3, 78167, 78167, 86361, 0, 0, 0, 0, 0, 0, 0, 2063, 0, 0, 29277, 29277,
    /* 38714 */ 29277, 29277, 29277, 29277, 29277, 496221, 29277, 29277, 29277, 29277, 29277, 82557, 0, 0, 0, 830, 0, 0,
    /* 38732 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 29331, 29331, 29331, 29331,
    /* 38753 */ 29758, 29331, 29331, 29331, 29277, 29277, 29608, 29277, 0, 0, 0, 29769, 30037, 29277, 29277, 29277,
    /* 38769 */ 29277, 29277, 29277, 29277, 29277, 30046, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 84691, 82557,
    /* 38784 */ 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82927, 82557, 82557, 82557, 82557, 82944, 82557, 82557,
    /* 38799 */ 82557, 82557, 82557, 82557, 82557, 83310, 82557, 82557, 82557, 82557, 83319, 82557, 82557, 82557, 82557,
    /* 38814 */ 82557, 29331, 29331, 29331, 29331, 389779, 31560, 29331, 29331, 29331, 31564, 31565, 82557, 82557,
    /* 38828 */ 82557, 82557, 83331, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 84324,
    /* 38843 */ 82557, 82557, 82557, 82557, 82557, 82557, 82557, 83348, 82557, 82557, 82557, 82557, 82557, 82557, 82557,
    /* 38858 */ 82557, 82557, 82557, 83363, 82557, 82557, 0, 2190, 0, 0, 29331, 29331, 29331, 29331, 29331, 29331,
    /* 38874 */ 29331, 29331, 29331, 29331, 31136, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 30143,
    /* 38889 */ 29331, 29331, 29331, 29331, 30152, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29277, 31353, 29331,
    /* 38904 */ 29277, 82557, 29277, 29277, 82557, 82557, 29331, 29331, 30164, 29331, 29331, 29331, 29331, 29331, 29331,
    /* 38919 */ 29331, 29331, 29331, 29331, 29331, 29331, 29331, 815763, 29331, 29331, 30181, 29331, 29331, 29331,
    /* 38933 */ 29331, 29331, 29331, 29331, 29331, 29331, 29331, 30196, 29331, 29331, 29331, 29331, 29277, 0, 0, 0, 0,
    /* 38950 */ 0, 307805, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 31274, 29277, 82557, 82557, 82557, 82557,
    /* 38965 */ 82557, 82557, 82557, 0, 0, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29277, 29277, 29331, 29277,
    /* 38981 */ 82557, 29277, 29277, 82557, 82557, 1562, 0, 0, 0, 1568, 0, 0, 0, 0, 0, 1574, 0, 0, 0, 0, 1581, 0, 0, 0,
    /* 39005 */ 1587, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1187, 432, 432, 0, 958464, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1229, 0,
    /* 39034 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1984, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 877, 0, 878, 29277, 29277,
    /* 39064 */ 29277, 30757, 29277, 29277, 29277, 30760, 610909, 29277, 29277, 29277, 29277, 29277, 29277, 29277,
    /* 39078 */ 29277, 84976, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 0, 0, 29331, 29331, 29331, 31317, 29331,
    /* 39094 */ 29331, 29331, 82557, 82557, 82557, 82557, 84071, 82557, 82557, 82557, 84074, 82557, 610941, 82557,
    /* 39108 */ 82557, 82557, 82557, 82557, 29331, 29331, 340627, 29331, 29331, 29331, 29331, 31562, 29331, 29331,
    /* 39122 */ 29331, 29331, 29331, 30888, 29331, 29331, 29331, 30891, 29331, 610963, 29331, 29331, 29331, 29331,
    /* 39136 */ 29331, 29331, 29331, 29277, 31490, 29331, 29277, 82557, 29277, 29277, 82557, 82557, 0, 2284, 0, 0, 0, 0,
    /* 39154 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2006, 0, 82557, 82557, 84342, 82557, 82557, 82557, 82557, 82557, 82557,
    /* 39175 */ 82557, 82557, 82557, 82557, 82557, 82557, 82557, 83735, 82557, 82557, 82557, 29331, 29331, 29331, 31142,
    /* 39190 */ 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 31329, 29331, 29331,
    /* 39205 */ 29331, 31495, 29331, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2019, 0, 0, 0, 0, 0, 528384, 0, 0, 0, 0,
    /* 39233 */ 0, 0, 0, 0, 0, 0, 0, 0, 528384, 0, 528384, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2293, 0, 0, 0,
    /* 39263 */ 528384, 0, 528384, 0, 0, 0, 0, 0, 0, 528384, 0, 0, 0, 0, 0, 29277, 29277, 29277, 29277, 29277, 29277,
    /* 39284 */ 528989, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277,
    /* 39298 */ 29974, 29277, 29277, 29277, 29628, 29277, 29277, 29277, 528989, 29277, 29277, 29277, 29277, 29277,
    /* 39312 */ 29277, 82557, 82557, 82557, 82557, 82557, 82557, 84086, 82557, 82557, 82557, 82557, 82557, 82557, 82557,
    /* 39327 */ 82557, 82557, 494294, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 529021, 82557, 82557, 82557,
    /* 39341 */ 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 84555, 82557, 82949, 0,
    /* 39356 */ 29331, 29331, 29331, 29331, 29331, 29331, 529043, 29331, 29331, 29331, 29331, 29331, 29331, 29331,
    /* 39370 */ 29277, 844381, 844413, 844435, 0, 0, 0, 0, 0, 29331, 29331, 29331, 78167, 87129, 0, 0, 0, 0, 0, 0, 0, 0,
    /* 39392 */ 0, 1123, 1127, 29277, 29277, 29277, 29277, 31534, 29277, 29277, 29277, 29277, 29277, 82557, 82557,
    /* 39407 */ 82557, 82557, 82557, 82557, 82557, 85032, 82557, 82557, 82557, 82557, 29331, 29331, 29331, 29331, 87129,
    /* 39422 */ 0, 0, 0, 0, 0, 0, 0, 29331, 31567, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331,
    /* 39441 */ 29331, 29331, 29331, 29331, 31575, 29331, 0, 0, 0, 432, 0, 0, 0, 0, 86361, 0, 0, 0, 413, 0, 0, 0, 0,
    /* 39464 */ 373, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2837, 0, 0, 0, 0, 0, 65536, 0, 413, 0, 413, 415, 413, 413, 0, 413,
    /* 39492 */ 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 413, 29292, 29292, 82571, 29346,
    /* 39511 */ 29292, 0, 414, 0, 0, 0, 0, 0, 0, 0, 413, 0, 413, 413, 413, 413, 413, 415, 413, 413, 413, 413, 413, 413,
    /* 39535 */ 413, 413, 413, 586, 413, 29292, 82571, 29346, 29292, 82571, 29292, 29292, 82571, 82571, 82571, 29292,
    /* 39551 */ 29292, 29292, 29292, 29346, 29346, 29346, 29346, 29346, 29346, 29346, 29346, 29346, 29346, 29346, 29292,
    /* 39566 */ 82571, 29292, 29292, 82571, 29346, 29292, 29346, 1, 12290, 3, 78167, 78167, 86361, 0, 0, 0, 0, 0, 0, 0,
    /* 39586 */ 2275, 2276, 0, 0, 0, 0, 0, 0, 0, 2300, 0, 0, 0, 0, 0, 0, 0, 0, 69632, 73728, 0, 0, 0, 0, 485, 0, 0, 714,
    /* 39614 */ 0, 0, 0, 717, 359, 360, 0, 0, 0, 0, 0, 0, 0, 0, 69632, 73728, 0, 0, 441, 441, 0, 0, 0, 0, 728, 0, 0,
    /* 39641 */ 374, 375, 0, 0, 0, 0, 0, 0, 0, 0, 0, 155648, 0, 155648, 155648, 155648, 155648, 155648, 0, 824176, 0, 0,
    /* 39663 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 824058, 0, 0, 0, 0, 1253, 0, 0, 0, 0, 0, 0, 1153, 0, 0, 0, 0, 0, 1240, 0, 0,
    /* 39693 */ 0, 0, 0, 0, 0, 0, 0, 0, 2278, 0, 0, 0, 0, 0, 0, 0, 824176, 0, 714, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 871, 0,
    /* 39724 */ 833, 0, 0, 0, 0, 823296, 0, 0, 0, 0, 0, 397, 0, 0, 69632, 73728, 0, 0, 483, 483, 0, 0, 82557, 82557,
    /* 39748 */ 82557, 82915, 82557, 82557, 82557, 82557, 824304, 82930, 82557, 82557, 82940, 82557, 82557, 82557,
    /* 39762 */ 82557, 82557, 83307, 83314, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 83326, 29331, 29754,
    /* 39777 */ 29331, 78167, 87129, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2304, 0, 0, 0, 0, 0, 0, 565248, 0, 0, 0, 0, 0,
    /* 39804 */ 1133, 0, 0, 0, 0, 0, 0, 0, 2329, 0, 0, 0, 0, 0, 0, 0, 0, 834, 0, 836, 0, 0, 0, 0, 0, 1189, 0, 0, 0, 0,
    /* 39834 */ 1193, 0, 0, 0, 0, 0, 1198, 0, 1200, 0, 1202, 1218, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2517, 0,
    /* 39863 */ 0, 0, 1218, 29960, 902, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 82557,
    /* 39879 */ 83296, 82557, 82557, 82557, 82557, 29277, 30019, 29277, 29277, 29277, 29277, 29277, 30027, 30028, 29277,
    /* 39894 */ 29277, 29277, 29277, 29277, 29277, 29277, 29277, 623197, 29277, 29277, 29277, 29277, 29277, 29277,
    /* 39908 */ 29277, 29277, 963165, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 82557, 84048, 82557,
    /* 39922 */ 82557, 82557, 82557, 82557, 82557, 83344, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 83358, 82557,
    /* 39937 */ 82557, 82557, 82557, 82557, 82557, 82557, 2440, 0, 29331, 29331, 29331, 29331, 29331, 29331, 29331,
    /* 39952 */ 29277, 29277, 29331, 29277, 82557, 31357, 29277, 84607, 82557, 83368, 83369, 82557, 82557, 82557, 26030,
    /* 39967 */ 29960, 1032, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 31702, 29277, 0, 0, 0, 3034, 0, 0,
    /* 39985 */ 29331, 29331, 29331, 30207, 29277, 29277, 30210, 0, 29331, 29331, 29277, 82557, 30215, 29277, 29277,
    /* 40000 */ 30218, 83467, 82557, 82557, 83470, 30223, 29331, 29331, 30226, 87129, 0, 0, 0, 0, 0, 1558, 0, 0, 0, 0,
    /* 40020 */ 2916, 0, 0, 0, 2841, 0, 0, 0, 737280, 0, 0, 0, 0, 357, 358, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1150976, 0, 0,
    /* 40048 */ 0, 0, 0, 30403, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277,
    /* 40064 */ 29277, 29277, 29277, 31268, 29277, 30432, 29277, 29277, 29277, 29277, 29277, 30437, 29277, 29277, 29277,
    /* 40079 */ 29277, 30443, 29277, 29277, 29277, 29277, 29277, 30024, 29277, 29277, 29277, 29277, 29277, 29277, 29277,
    /* 40094 */ 29277, 29277, 29277, 31672, 82557, 82557, 82557, 82557, 82557, 30446, 29277, 29277, 29277, 29277, 29277,
    /* 40109 */ 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 82557, 82557, 82557, 82557, 82557, 82557, 82557,
    /* 40124 */ 82557, 82557, 82557, 83709, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557,
    /* 40139 */ 82557, 82557, 83762, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 83770, 82557, 82557, 82557, 82557,
    /* 40154 */ 83776, 82557, 82557, 82557, 26030, 0, 29331, 29331, 29331, 29331, 29331, 31699, 29331, 29331, 29331,
    /* 40169 */ 31703, 0, 0, 0, 0, 0, 0, 0, 1159168, 1159168, 0, 1159168, 1159168, 1159168, 1159168, 1159168, 1159168,
    /* 40186 */ 1159168, 1159168, 1159168, 0, 1159168, 1159168, 1159168, 1159168, 1159168, 1159168, 1159168, 1159168,
    /* 40198 */ 1159168, 1159168, 1159168, 0, 0, 0, 0, 0, 29331, 29331, 29331, 30539, 29331, 29331, 29331, 29331, 29331,
    /* 40215 */ 29331, 29331, 29331, 29331, 29331, 29331, 29331, 31481, 29331, 29331, 29331, 0, 0, 0, 1963, 0, 1965, 0,
    /* 40233 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 249856, 249856, 249856, 249856, 249856, 249856, 290816, 2021, 0, 0, 0, 0, 0,
    /* 40255 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 2292, 0, 829405, 0, 0, 2057, 0, 0, 0, 0, 0, 0, 291421, 29277, 29277, 29277,
    /* 40280 */ 29277, 30742, 29277, 29277, 29277, 829490, 29277, 29277, 29277, 29277, 30775, 29277, 29277, 29277,
    /* 40294 */ 29277, 29277, 29277, 29277, 29598, 29277, 29277, 29277, 29277, 82557, 82557, 82557, 82557, 82557, 82557,
    /* 40309 */ 82557, 82557, 82557, 84072, 82557, 82557, 82557, 82557, 82557, 84076, 82557, 84077, 82557, 84080, 82557,
    /* 40324 */ 82557, 82557, 82557, 82557, 829557, 82557, 82557, 82557, 82557, 82557, 84091, 82557, 82557, 82557,
    /* 40338 */ 82557, 82557, 82557, 84345, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 84089, 82557,
    /* 40353 */ 82557, 82557, 82557, 84094, 82557, 82557, 84106, 0, 0, 0, 0, 291475, 29331, 29331, 29331, 29331, 29331,
    /* 40370 */ 30870, 29331, 29331, 29331, 29277, 30208, 29277, 29277, 0, 29331, 29331, 29277, 82557, 29277, 29277,
    /* 40385 */ 29277, 29277, 29277, 29277, 31036, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 31539,
    /* 40400 */ 82557, 82557, 82557, 82557, 82557, 82557, 29331, 29331, 29331, 30889, 29331, 29331, 29331, 29331, 29331,
    /* 40415 */ 30893, 29331, 30894, 29331, 30897, 29331, 29331, 0, 0, 0, 0, 2828, 0, 0, 0, 0, 0, 0, 0, 0, 0, 471, 0,
    /* 40438 */ 471, 471, 471, 471, 471, 29331, 29331, 29331, 829622, 29331, 29331, 29331, 29331, 29331, 30908, 29331,
    /* 40454 */ 29331, 29331, 29331, 29331, 29331, 30191, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 30201, 30202,
    /* 40469 */ 29277, 82557, 31165, 29277, 84415, 82557, 31169, 29331, 0, 0, 0, 0, 0, 0, 0, 2505, 2506, 0, 0, 0, 0, 0,
    /* 40491 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2732, 0, 2519, 2520, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 902, 0, 0, 0,
    /* 40522 */ 902, 0, 2531, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2336, 0, 82557, 82557, 84558, 82557, 82557,
    /* 40546 */ 82557, 82557, 0, 0, 29331, 29331, 29331, 29331, 31318, 31319, 29331, 29331, 29331, 29331, 29331, 31753,
    /* 40562 */ 29277, 0, 0, 0, 0, 495616, 0, 0, 0, 0, 0, 1208, 0, 0, 0, 0, 0, 0, 0, 0, 704512, 0, 29331, 29331, 31348,
    /* 40587 */ 29331, 29331, 29331, 29331, 29277, 29277, 29331, 29277, 82557, 29277, 29277, 82557, 82557, 29331, 29331,
    /* 40602 */ 0, 0, 0, 2501, 0, 0, 0, 0, 82557, 29331, 305894, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331,
    /* 40621 */ 29331, 29331, 29331, 29331, 29331, 1110675, 29331, 29277, 29277, 31662, 29277, 29277, 29277, 29277,
    /* 40635 */ 29277, 29277, 29277, 29277, 31671, 29277, 84921, 82557, 82557, 82557, 84925, 0, 3092, 29277, 29277,
    /* 40650 */ 29277, 29277, 31769, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 82557, 82557, 82557, 82557,
    /* 40665 */ 84051, 82557, 82557, 82557, 82557, 82557, 82557, 85029, 82557, 82557, 82557, 82557, 82557, 82557, 82557,
    /* 40680 */ 82557, 29331, 29331, 29331, 29331, 29331, 29331, 0, 0, 0, 0, 31793, 29331, 29331, 29331, 29331, 29331,
    /* 40697 */ 29331, 29331, 29331, 29277, 0, 0, 0, 0, 0, 0, 0, 0, 3090, 0, 0, 3134, 0, 29277, 29277, 29277, 29277,
    /* 40718 */ 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29982, 82557, 82557,
    /* 40733 */ 82557, 82557, 85112, 82557, 29331, 29331, 29331, 29331, 31868, 29331, 0, 442368, 0, 851968, 0, 0, 0,
    /* 40750 */ 356, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 364, 0, 0, 463, 0, 0, 0, 0, 416, 417, 418, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    /* 40781 */ 0, 0, 0, 0, 1096, 0, 0, 0, 0, 0, 0, 432, 0, 437, 0, 0, 86361, 0, 0, 0, 0, 0, 0, 0, 2344, 0, 29277,
    /* 40808 */ 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 31607, 29277, 29277, 0,
    /* 40823 */ 473, 475, 0, 0, 364, 356, 0, 69632, 73728, 0, 0, 0, 0, 0, 489, 496, 65536, 0, 489, 475, 489, 0, 489,
    /* 40846 */ 489, 0, 489, 489, 518, 518, 518, 518, 416, 0, 0, 364, 0, 463, 0, 0, 473, 518, 0, 518, 518, 518, 518,
    /* 40869 */ 563, 566, 563, 563, 0, 563, 563, 566, 563, 563, 563, 563, 563, 566, 563, 563, 566, 566, 566, 566, 566,
    /* 40890 */ 566, 566, 518, 518, 518, 595, 518, 566, 597, 518, 518, 566, 601, 566, 566, 566, 601, 566, 566, 566, 566,
    /* 40911 */ 603, 29293, 29307, 82572, 29347, 29307, 82572, 29307, 29307, 82572, 82572, 82572, 29356, 29356, 29356,
    /* 40926 */ 29307, 29347, 29347, 29347, 29347, 29347, 29347, 29347, 29347, 29347, 29347, 29347, 29347, 29347, 29307,
    /* 40941 */ 82572, 29307, 29366, 82619, 29347, 29366, 29377, 1, 12290, 3, 78167, 78167, 86361, 0, 0, 0, 0, 0, 0, 0,
    /* 40961 */ 2511, 0, 0, 0, 0, 0, 0, 0, 0, 2836, 0, 0, 0, 0, 0, 0, 0, 0, 328538, 0, 0, 0, 0, 0, 0, 0, 328538, 0, 0,
    /* 40990 */ 0, 0, 0, 0, 1678, 0, 0, 0, 0, 0, 370324, 1685, 0, 0, 0, 0, 0, 675840, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    /* 41019 */ 0, 1231, 1233, 0, 0, 675840, 0, 0, 0, 0, 0, 775, 0, 0, 0, 328538, 0, 0, 675840, 675840, 0, 0, 0, 0,
    /* 41043 */ 2978, 0, 0, 2841, 0, 0, 0, 0, 29277, 29277, 29277, 29277, 29277, 31022, 29277, 29277, 29277, 29277,
    /* 41061 */ 29277, 29277, 31029, 29277, 29277, 82557, 82557, 82557, 82557, 676477, 82557, 82557, 82557, 82557,
    /* 41075 */ 82557, 82557, 82557, 82557, 82557, 82557, 82557, 84538, 82557, 82557, 84540, 82557, 82557, 29331, 29331,
    /* 41090 */ 29331, 78167, 87129, 0, 1114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 249856, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    /* 41117 */ 1205, 0, 1207, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 29296, 29296, 82575, 29350, 29296, 1286, 1287, 0, 0,
    /* 41140 */ 29960, 902, 29277, 29277, 29277, 29277, 29966, 29277, 29277, 29277, 29970, 29277, 29277, 29277, 29277,
    /* 41155 */ 30450, 29277, 29277, 29277, 29277, 29277, 29277, 30455, 1004125, 29277, 82557, 82557, 29331, 29331, 0,
    /* 41170 */ 29277, 82557, 29331, 0, 29277, 82557, 29331, 3217, 31890, 85139, 31892, 29277, 29980, 29277, 29277,
    /* 41185 */ 29982, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29996, 29998, 29277, 29277,
    /* 41200 */ 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 82557, 82557,
    /* 41215 */ 82557, 82557, 82557, 83304, 82557, 82557, 83315, 82557, 82557, 83318, 82557, 82557, 82557, 82557, 82557,
    /* 41230 */ 82557, 82557, 370434, 82557, 82557, 82557, 82557, 83720, 82557, 82557, 82557, 82557, 82557, 82557,
    /* 41244 */ 82557, 82557, 83333, 82557, 83336, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 84704, 82557,
    /* 41259 */ 84706, 82557, 82557, 82557, 82557, 82557, 29331, 30137, 29331, 29331, 30148, 29331, 29331, 30151, 29331,
    /* 41274 */ 29331, 29331, 29331, 29331, 29331, 29331, 29331, 328586, 29765, 29277, 29277, 0, 0, 0, 328716, 29331,
    /* 41290 */ 29331, 29331, 30166, 29331, 30169, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331,
    /* 41305 */ 31159, 29331, 29277, 29277, 29277, 29331, 29331, 0, 0, 0, 1637, 0, 1639, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    /* 41328 */ 253952, 0, 0, 0, 0, 0, 29277, 29277, 29331, 30549, 30391, 83719, 29277, 29277, 29277, 29277, 82557,
    /* 41345 */ 82557, 82557, 82557, 29331, 29331, 29331, 29331, 0, 0, 463453, 29277, 1015808, 0, 0, 0, 0, 0, 1122304,
    /* 41363 */ 0, 0, 0, 0, 0, 0, 2005, 0, 0, 0, 0, 1265, 0, 0, 0, 0, 0, 1265, 0, 0, 1273, 0, 0, 0, 0, 1266, 0, 0, 0, 0,
    /* 41393 */ 0, 1270, 0, 1271, 0, 1274, 0, 2029, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2040, 0, 0, 0, 0, 373, 462, 0, 463,
    /* 41421 */ 0, 0, 0, 0, 463, 0, 0, 466, 30768, 791133, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277,
    /* 41439 */ 30777, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 31727, 82557, 82557, 82557, 82557, 82557, 82557,
    /* 41454 */ 82557, 82557, 83760, 82557, 82557, 82557, 83763, 82557, 82557, 82557, 29277, 29277, 29277, 30795, 29277,
    /* 41469 */ 29277, 29277, 30799, 82557, 82557, 84049, 82557, 82557, 82557, 82557, 82557, 29331, 31628, 29331, 29331,
    /* 41484 */ 31630, 29331, 29331, 29331, 29331, 29331, 29331, 30542, 29331, 29331, 29331, 29331, 29331, 29331, 29331,
    /* 41499 */ 29331, 30552, 82557, 82557, 84083, 791165, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557,
    /* 41513 */ 82557, 84093, 82557, 82557, 2187, 0, 0, 0, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331,
    /* 41529 */ 29331, 29331, 30881, 29331, 29331, 29331, 29331, 29331, 30900, 791187, 29331, 29331, 29331, 29331,
    /* 41543 */ 29331, 29331, 29331, 29331, 29331, 30910, 29331, 29331, 29331, 29331, 29277, 0, 929792, 0, 0, 0, 29277,
    /* 41560 */ 31857, 29277, 29277, 29277, 930397, 29331, 29331, 1016467, 1122963, 0, 0, 0, 1563, 0, 1569, 0, 0, 0, 0,
    /* 41579 */ 0, 0, 2060, 0, 0, 0, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 31414,
    /* 41597 */ 29277, 0, 1582, 0, 1588, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1981, 0, 720896, 0, 0, 0, 0, 0, 0, 0,
    /* 41626 */ 0, 0, 0, 0, 0, 0, 0, 0, 2841, 0, 0, 2339, 0, 0, 0, 0, 0, 802816, 0, 0, 0, 0, 0, 0, 0, 2524, 0, 0, 0, 0,
    /* 41656 */ 0, 0, 0, 0, 2841, 0, 0, 0, 0, 0, 0, 0, 0, 31141, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 31146,
    /* 41678 */ 29331, 29331, 29331, 29331, 29331, 29331, 29331, 30543, 29331, 29331, 29331, 29331, 29331, 29331, 29331,
    /* 41693 */ 29331, 29277, 29277, 29766, 29277, 0, 0, 0, 29331, 29277, 29277, 29277, 31270, 29277, 29277, 31273,
    /* 41709 */ 29277, 29277, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 29331, 31742, 29331, 31743, 29331, 29331,
    /* 41724 */ 29331, 29331, 29331, 0, 2722, 2723, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 409600, 0, 0, 0, 0, 1603, 671744, 0,
    /* 41748 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 111115, 111115, 111115, 111115, 111115, 111115, 1011712, 1101824, 0, 954368,
    /* 41767 */ 921600, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 29298, 29298, 82577, 29352, 29298, 0, 0, 0, 2843, 0, 0, 2846,
    /* 41791 */ 0, 0, 0, 0, 0, 0, 2849, 29277, 29277, 29277, 29277, 29277, 676445, 29277, 29277, 29277, 29277, 29277,
    /* 41809 */ 29277, 29277, 29277, 29277, 29277, 82557, 332413, 82557, 82557, 82557, 82557, 922205, 29277, 29277,
    /* 41823 */ 29277, 29277, 29277, 29277, 29277, 29277, 29277, 82557, 82557, 82557, 82557, 82557, 82557, 84530,
    /* 41837 */ 922237, 82557, 82557, 82557, 82557, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331,
    /* 41851 */ 29331, 29331, 31469, 29331, 29331, 29331, 29277, 29277, 29277, 954973, 82557, 955005, 29331, 955027, 0,
    /* 41866 */ 0, 0, 2909, 0, 0, 2911, 0, 0, 0, 0, 20480, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 351, 352, 383, 384, 353, 0,
    /* 41894 */ 843776, 0, 0, 0, 0, 0, 0, 2841, 471040, 0, 2922, 0, 0, 0, 0, 0, 2011, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    /* 41921 */ 29277, 30738, 29277, 29277, 29277, 29277, 0, 29277, 31598, 29277, 29277, 31600, 29277, 29277, 29277,
    /* 41936 */ 29277, 29277, 29277, 29277, 29277, 29277, 29277, 639581, 29277, 29277, 29277, 29277, 29277, 29277,
    /* 41950 */ 29277, 29277, 82557, 84861, 82557, 82557, 84863, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557,
    /* 41965 */ 1045117, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 29277, 29277, 31664, 31665, 29277, 29277,
    /* 41979 */ 29277, 29277, 29277, 29277, 29277, 82557, 82557, 82557, 82557, 82557, 29331, 332435, 29331, 29331,
    /* 41993 */ 29331, 29331, 29331, 29331, 29331, 29331, 29331, 30545, 29331, 29331, 29331, 29331, 29331, 29331, 82557,
    /* 42008 */ 82557, 82557, 84929, 82557, 84931, 82557, 82557, 82557, 82557, 29331, 29331, 29331, 29331, 29331, 29331,
    /* 42023 */ 29331, 29331, 29331, 31468, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 31696, 29331, 31698, 29331,
    /* 42038 */ 29331, 29331, 29331, 29277, 0, 0, 0, 0, 0, 0, 2061, 0, 0, 0, 29277, 29277, 29277, 29277, 29277, 29277,
    /* 42058 */ 29277, 30748, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 30395, 29277, 29277, 29277, 29277,
    /* 42073 */ 29277, 29277, 29277, 0, 0, 31765, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277,
    /* 42089 */ 29277, 29277, 85025, 430685, 31836, 29277, 29277, 29277, 29277, 82557, 430717, 85090, 82557, 82557,
    /* 42103 */ 82557, 82557, 29331, 430739, 31848, 0, 0, 0, 419, 420, 421, 422, 357, 0, 0, 0, 0, 0, 0, 0, 0, 69632,
    /* 42125 */ 73728, 0, 163840, 0, 0, 0, 0, 0, 474, 421, 0, 0, 0, 0, 0, 69632, 73728, 0, 0, 0, 0, 0, 0, 2274, 0, 0, 0,
    /* 42152 */ 0, 0, 0, 0, 0, 2283, 419, 65536, 0, 0, 421, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 122880, 0, 0, 0, 0, 0, 0,
    /* 42181 */ 567, 0, 0, 537, 0, 0, 567, 0, 0, 0, 0, 0, 567, 0, 0, 0, 0, 1614, 0, 0, 0, 0, 0, 1617, 0, 0, 0, 0, 0,
    /* 42210 */ 363, 363, 363, 0, 0, 363, 363, 363, 143723, 363, 363, 567, 567, 592, 592, 592, 592, 592, 537, 537, 537,
    /* 42231 */ 537, 537, 592, 542, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 542, 537, 537, 537, 537, 537,
    /* 42252 */ 542, 537, 537, 548, 0, 537, 0, 0, 0, 357, 0, 592, 567, 592, 592, 592, 567, 592, 592, 592, 592, 604,
    /* 42274 */ 29294, 29308, 82573, 29348, 29308, 82573, 29308, 29308, 82573, 82573, 82573, 29308, 29308, 29308, 29308,
    /* 42289 */ 29348, 29348, 29348, 29348, 29348, 29348, 29348, 29348, 29348, 29348, 29348, 29348, 29348, 29308, 82573,
    /* 42304 */ 29308, 29367, 82620, 29348, 29367, 29378, 1, 12290, 3, 78167, 78167, 86361, 0, 0, 0, 0, 335872, 0, 0, 0,
    /* 42324 */ 861, 0, 0, 0, 335872, 0, 0, 0, 0, 0, 0, 2313, 0, 0, 0, 0, 0, 0, 0, 0, 0, 204800, 0, 204800, 204800,
    /* 42349 */ 204800, 204800, 204800, 0, 0, 0, 716, 0, 0, 359, 360, 0, 0, 0, 0, 0, 0, 0, 0, 69632, 73728, 0, 167936,
    /* 42372 */ 0, 0, 0, 0, 768, 769, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 432, 0, 0, 0, 0, 0, 817, 0, 0, 0, 335872,
    /* 42402 */ 817, 0, 823, 824, 335872, 0, 0, 0, 0, 397, 0, 0, 0, 0, 0, 0, 0, 0, 0, 398, 397, 0, 0, 618496, 0, 733184,
    /* 42428 */ 0, 0, 0, 0, 0, 0, 733184, 0, 0, 0, 0, 0, 2034, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 98304, 0, 0, 0, 53248, 0,
    /* 42457 */ 0, 0, 0, 0, 733184, 0, 0, 618496, 0, 733184, 0, 0, 0, 0, 0, 0, 0, 0, 69632, 73728, 0, 221184, 0, 0, 0,
    /* 42482 */ 0, 0, 0, 861, 0, 883, 861, 0, 0, 884, 0, 0, 0, 750, 0, 0, 0, 0, 400, 0, 400, 400, 0, 0, 0, 0, 0, 0, 0,
    /* 42511 */ 0, 2707, 0, 0, 0, 0, 0, 0, 0, 0, 0, 861, 0, 861, 335872, 0, 0, 861, 733184, 900, 0, 29277, 29277,
    /* 42534 */ 336477, 29277, 29277, 29277, 29277, 30758, 29277, 29277, 29277, 29277, 30761, 29277, 30762, 29277,
    /* 42548 */ 30765, 29277, 29277, 29277, 29277, 29277, 660061, 29277, 29277, 29277, 29277, 29277, 29277, 29277,
    /* 42562 */ 31425, 29277, 31426, 29277, 29277, 29277, 29596, 619101, 29277, 733789, 29277, 29277, 29277, 29277,
    /* 42576 */ 29277, 29618, 29277, 29277, 29277, 29277, 29277, 30042, 30014, 29277, 29277, 29277, 82557, 82557, 82557,
    /* 42591 */ 82557, 82557, 82557, 82557, 84358, 82557, 82557, 0, 2440, 0, 0, 0, 0, 29277, 29277, 336829, 29277,
    /* 42608 */ 29277, 29277, 29596, 29635, 29277, 29277, 29618, 29277, 82557, 336847, 82557, 82557, 2188, 0, 0, 0,
    /* 42624 */ 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 680595, 29331, 29331, 29331,
    /* 42638 */ 29331, 29331, 29331, 29331, 29331, 31158, 29331, 29331, 29277, 29277, 29277, 29331, 29331, 82557, 82557,
    /* 42653 */ 82913, 619133, 82919, 733821, 82557, 82557, 82557, 82557, 82557, 82937, 82557, 82557, 82557, 82557,
    /* 42667 */ 82557, 82557, 84357, 82557, 82557, 82557, 0, 2440, 0, 0, 0, 0, 0, 901, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    /* 42691 */ 29960, 1705, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277,
    /* 42706 */ 29277, 29277, 31041, 29331, 29331, 29751, 29331, 29331, 29331, 29331, 29331, 336829, 29277, 29277,
    /* 42720 */ 29767, 0, 0, 0, 336909, 29751, 29331, 29331, 78167, 87129, 0, 0, 1115, 0, 0, 0, 0, 0, 0, 0, 0, 69632,
    /* 42742 */ 73728, 0, 266240, 0, 0, 0, 0, 0, 0, 0, 716800, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1260, 0, 0, 0, 0, 0,
    /* 42771 */ 1220, 0, 0, 0, 0, 0, 0, 0, 1229, 0, 1232, 0, 0, 0, 0, 404, 405, 406, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2277, 0,
    /* 42800 */ 2279, 0, 0, 2282, 0, 0, 0, 0, 1238, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1576, 0, 0, 0, 1195, 1271, 0, 0,
    /* 42829 */ 794624, 0, 0, 0, 0, 0, 1170, 0, 0, 0, 1285, 1285, 0, 0, 1196, 0, 29960, 902, 29962, 29277, 29277, 29277,
    /* 42851 */ 29277, 29277, 29277, 29277, 29971, 29277, 29277, 29277, 29277, 30771, 29277, 29277, 29277, 29277, 29277,
    /* 42866 */ 29277, 29277, 29277, 29277, 29277, 29277, 30008, 29277, 29277, 29277, 29277, 29277, 717405, 29277,
    /* 42880 */ 29277, 29277, 29277, 29277, 30004, 29277, 29277, 29277, 30010, 30012, 29277, 29277, 29277, 29277, 29277,
    /* 42895 */ 30391, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 83295, 82557, 82557, 82557,
    /* 42910 */ 83299, 82557, 82557, 82557, 82557, 83305, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557,
    /* 42925 */ 83324, 82557, 82557, 29331, 29331, 0, 29277, 82557, 29331, 0, 29277, 82557, 29331, 0, 29277, 82557,
    /* 42941 */ 29331, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2064, 0, 0, 82557, 82557, 82557, 82557, 82557, 83334,
    /* 42964 */ 82557, 82557, 717437, 82557, 82557, 82557, 82557, 82557, 83342, 82557, 0, 29331, 29331, 328716, 29331,
    /* 42979 */ 29331, 29331, 29331, 29331, 29331, 676499, 29331, 29331, 29331, 29331, 29277, 0, 0, 3182, 0, 3184,
    /* 42995 */ 29277, 29277, 29277, 29277, 29277, 29277, 29277, 30747, 29277, 29277, 29277, 29277, 29277, 29277, 30754,
    /* 43010 */ 29277, 82557, 82557, 83349, 83351, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557,
    /* 43025 */ 82557, 82557, 84064, 82557, 82557, 82557, 82557, 82557, 82557, 83372, 82557, 26030, 29960, 1032, 30128,
    /* 43040 */ 29331, 29331, 29331, 30132, 29331, 29331, 29331, 29331, 29331, 30890, 29331, 29331, 29331, 29331, 29331,
    /* 43055 */ 29331, 29331, 29331, 29331, 29331, 1127059, 29277, 29277, 29277, 29331, 29331, 29331, 30138, 29331,
    /* 43069 */ 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 30157, 29331, 29331, 29331, 29331, 29277, 3181,
    /* 43084 */ 0, 0, 0, 0, 29277, 29277, 29277, 29277, 31860, 29277, 29331, 29331, 29331, 30167, 29331, 29331, 717459,
    /* 43101 */ 29331, 29331, 29331, 29331, 29331, 30175, 29331, 29331, 29331, 29331, 29331, 30904, 30905, 29331, 29331,
    /* 43116 */ 29331, 29331, 29331, 29331, 938643, 29331, 29331, 30182, 30184, 29331, 29331, 29331, 29331, 29331,
    /* 43130 */ 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 427863, 29331, 29331, 30205, 29331,
    /* 43144 */ 29277, 29277, 29277, 29277, 0, 29331, 29331, 29277, 82557, 29277, 29277, 29277, 29277, 29277, 29277,
    /* 43159 */ 31536, 29277, 29277, 29277, 82557, 82557, 82557, 82557, 389757, 84790, 0, 1563, 0, 0, 0, 1569, 0, 0, 0,
    /* 43178 */ 0, 0, 0, 0, 1577, 0, 0, 0, 0, 1625, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 750, 0, 0, 752, 0, 1582, 0, 0, 0,
    /* 43208 */ 1588, 0, 0, 0, 0, 0, 0, 0, 1596, 1597, 0, 0, 0, 0, 1650, 1651, 0, 1652, 0, 0, 0, 1654, 0, 827, 0, 0, 0,
    /* 43235 */ 0, 1239, 0, 1241, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1976, 1977, 0, 0, 0, 0, 0, 0, 0, 0, 1602, 0, 0, 0, 0, 0, 0,
    /* 43265 */ 0, 0, 0, 0, 0, 0, 1632, 0, 0, 0, 700416, 0, 0, 0, 0, 0, 753664, 770048, 0, 0, 0, 0, 0, 0, 0, 0, 69632,
    /* 43292 */ 73728, 155648, 0, 0, 0, 0, 0, 1687, 0, 0, 0, 1691, 0, 0, 0, 1695, 0, 0, 0, 0, 0, 1691, 0, 0, 0, 0,
    /* 43318 */ 29960, 902, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 31063, 29277,
    /* 43333 */ 29277, 29277, 82557, 29277, 370355, 29277, 29277, 29277, 30392, 29277, 29277, 29277, 29277, 29277,
    /* 43347 */ 29277, 29277, 29277, 30401, 29277, 29277, 29277, 29277, 30783, 29277, 30785, 29277, 29277, 29277, 29277,
    /* 43362 */ 29277, 29277, 29277, 29277, 29277, 29989, 565853, 29277, 29277, 29277, 29277, 29277, 29277, 29277,
    /* 43376 */ 545373, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 30413, 29277, 701021, 29277, 29277,
    /* 43390 */ 29277, 29277, 29331, 29331, 29277, 82557, 29277, 29277, 1016413, 1122909, 82557, 82557, 1016445,
    /* 43403 */ 1122941, 82557, 82557, 82557, 82557, 83743, 82557, 82557, 701053, 82557, 82557, 82557, 82557, 82557,
    /* 43417 */ 82557, 82557, 82557, 31741, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29277, 29277, 29277,
    /* 43432 */ 29277, 0, 0, 41747, 29331, 1004179, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331,
    /* 43447 */ 29331, 29331, 29331, 29331, 29277, 29277, 29277, 320147, 29331, 29277, 29277, 29331, 30614, 30615,
    /* 43461 */ 83864, 29277, 30618, 29277, 29277, 82557, 83870, 82557, 82557, 29331, 30626, 0, 552960, 0, 2010, 712704,
    /* 43477 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 131072, 0, 131072, 131072, 131072, 0, 0, 0, 589824, 0, 0, 0, 0, 2024,
    /* 43502 */ 434176, 0, 0, 0, 0, 0, 0, 2523, 0, 0, 0, 0, 0, 0, 0, 0, 0, 29277, 29277, 29277, 29277, 29277, 31241,
    /* 43525 */ 29277, 29277, 1024605, 29277, 29277, 29277, 30784, 29277, 29277, 29277, 29277, 29277, 29277, 29277,
    /* 43539 */ 29277, 29277, 29277, 30787, 29277, 29277, 29277, 30789, 29277, 29277, 29277, 29277, 30794, 29277, 29277,
    /* 43554 */ 29277, 29277, 29277, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 84868, 84869,
    /* 43569 */ 84870, 82557, 82557, 975485, 82557, 82557, 1024637, 82557, 82557, 82557, 82557, 84102, 82557, 82557,
    /* 43583 */ 82557, 82557, 82557, 31627, 29331, 29331, 29331, 29331, 31631, 29331, 29331, 29331, 29331, 29331, 29331,
    /* 43598 */ 1045139, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 30605, 29331, 29331, 29331,
    /* 43612 */ 29331, 29277, 29277, 29331, 29331, 29331, 29331, 30875, 29331, 29331, 434835, 29331, 29331, 29331,
    /* 43626 */ 30882, 29331, 29331, 29331, 29331, 29331, 30559, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331,
    /* 43641 */ 29331, 29331, 639635, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 553619, 29331,
    /* 43655 */ 29331, 30892, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 370512, 29331, 29331, 29331,
    /* 43669 */ 29331, 30550, 29331, 29331, 975507, 29331, 29331, 1024659, 29331, 29331, 29331, 29331, 30919, 29331,
    /* 43683 */ 29331, 29331, 29331, 29331, 29331, 29331, 30588, 29331, 29331, 29331, 29331, 29331, 29331, 30594, 29331,
    /* 43698 */ 0, 0, 987136, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1157, 0, 0, 540672, 0, 0, 0, 0, 0, 0, 1085440, 0,
    /* 43726 */ 0, 0, 0, 0, 0, 0, 0, 69632, 73728, 172032, 172032, 0, 0, 0, 0, 0, 29277, 31019, 29277, 29277, 29277,
    /* 43747 */ 29277, 29277, 31024, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29985, 29277, 29277, 29277, 29277,
    /* 43762 */ 29277, 29277, 29277, 29277, 30045, 29277, 82557, 82557, 82557, 82557, 82557, 82557, 29277, 29277, 29277,
    /* 43777 */ 29277, 541277, 29277, 29277, 31037, 631389, 655965, 29277, 29277, 29277, 29277, 29277, 29277, 29277,
    /* 43791 */ 30774, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 926301, 29277, 29277, 29277,
    /* 43805 */ 29277, 29277, 29277, 29277, 29277, 848477, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277,
    /* 43819 */ 29277, 987741, 29277, 29277, 29277, 29277, 29277, 30407, 29277, 29277, 29277, 29277, 29277, 29277,
    /* 43833 */ 29277, 29277, 29277, 29277, 30750, 29277, 29277, 29277, 29277, 30755, 84315, 82557, 82557, 82557, 82557,
    /* 43848 */ 82557, 82557, 84321, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 83356, 82557, 82557, 82557,
    /* 43863 */ 82557, 83362, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 848509, 82557, 82557, 82557,
    /* 43877 */ 82557, 82557, 82557, 82557, 82557, 82557, 82557, 85069, 82557, 29331, 29331, 29331, 29331, 987773,
    /* 43891 */ 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 0, 0, 0, 0, 0, 0, 2534, 0, 0, 0, 2538, 0,
    /* 43912 */ 0, 0, 0, 0, 29331, 31115, 29331, 29331, 29331, 29331, 29331, 29331, 31121, 29331, 29331, 29331, 29331,
    /* 43929 */ 29331, 29331, 29331, 30602, 30604, 29331, 29331, 29331, 29331, 29331, 29277, 29277, 29331, 987795,
    /* 43943 */ 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29277, 799325, 31161, 29331, 29331, 0, 0,
    /* 43959 */ 0, 839680, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2316, 0, 0, 0, 0, 0, 0, 0, 0, 0, 413696, 417792, 0, 0, 450560,
    /* 43986 */ 499712, 0, 0, 0, 0, 0, 0, 2563, 0, 0, 29277, 31237, 29277, 29277, 29277, 29277, 29277, 0, 2544, 0, 0, 0,
    /* 44008 */ 0, 0, 2550, 0, 0, 0, 860160, 0, 0, 0, 0, 0, 2049, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 172032, 172032, 172032,
    /* 44034 */ 172032, 172032, 172032, 0, 0, 0, 1114112, 0, 0, 0, 0, 0, 29277, 29277, 29277, 29277, 29277, 29277,
    /* 44052 */ 29277, 29277, 29277, 31813, 29277, 29277, 29277, 418397, 29277, 29277, 29277, 29277, 451165, 29277,
    /* 44066 */ 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 31061, 29277, 29277, 29277, 29277, 29277, 84314,
    /* 44081 */ 397917, 29277, 500317, 29277, 29277, 29277, 29277, 29277, 29277, 82557, 82557, 82557, 82557, 82557,
    /* 44095 */ 82557, 82557, 29331, 29331, 29331, 82557, 397949, 82557, 418429, 82557, 82557, 82557, 82557, 451197,
    /* 44109 */ 82557, 82557, 500349, 82557, 82557, 82557, 82557, 82557, 82557, 84536, 82557, 82557, 82557, 82557,
    /* 44123 */ 82557, 82557, 82557, 82557, 82557, 84935, 29331, 29331, 29331, 29331, 29331, 29331, 82557, 82557, 82557,
    /* 44138 */ 82557, 84560, 82557, 82557, 0, 0, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 30603, 29331, 29331,
    /* 44154 */ 29331, 29331, 29331, 29331, 29277, 29277, 29331, 397971, 29331, 418451, 29331, 29331, 29331, 29331,
    /* 44168 */ 451219, 29331, 29331, 500371, 29331, 29331, 29331, 29331, 29331, 30573, 29331, 29331, 701075, 29331,
    /* 44182 */ 29331, 29331, 29331, 29331, 29331, 29331, 30560, 29331, 29331, 29331, 545427, 29331, 29331, 29331,
    /* 44196 */ 29331, 29331, 29331, 29331, 29331, 31350, 29331, 29331, 31352, 29277, 29331, 29277, 82557, 29277, 29277,
    /* 44211 */ 82557, 82557, 29331, 29331, 0, 0, 2500, 0, 0, 0, 0, 0, 2710, 0, 0, 0, 0, 0, 0, 2714, 0, 2715, 2716, 0,
    /* 44235 */ 0, 0, 0, 0, 732, 733, 0, 0, 0, 0, 0, 0, 0, 0, 0, 391, 0, 0, 0, 391, 0, 0, 492125, 29277, 29277, 29277,
    /* 44261 */ 29277, 29277, 31419, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 31432, 29277, 82557,
    /* 44276 */ 82557, 82557, 82557, 82557, 29277, 29277, 29277, 31427, 494276, 29277, 29277, 29277, 29277, 29277,
    /* 44290 */ 31434, 82557, 82557, 82557, 84685, 82557, 0, 29331, 29331, 336909, 29331, 29331, 29331, 29331, 29727,
    /* 44305 */ 619155, 29733, 733843, 29331, 29331, 29331, 29331, 29331, 30877, 29331, 29331, 29331, 29331, 29331,
    /* 44319 */ 29331, 29331, 29331, 29331, 29331, 31328, 29331, 29331, 31330, 29331, 29331, 82557, 84698, 82557, 82557,
    /* 44334 */ 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 84708, 82557, 82557, 82557, 82557, 82557, 83308,
    /* 44349 */ 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 29331, 31689, 29331, 31691, 29331,
    /* 44364 */ 29331, 29331, 29331, 31487, 29331, 29331, 29331, 29331, 29277, 29277, 29331, 29277, 82557, 29277, 29277,
    /* 44379 */ 82557, 82557, 29331, 29331, 2499, 647168, 0, 0, 0, 0, 0, 0, 2549, 0, 0, 2552, 0, 0, 0, 0, 0, 0, 1209,
    /* 44402 */ 1210, 0, 0, 0, 0, 0, 0, 0, 0, 1665, 0, 1667, 0, 0, 0, 0, 1671, 29277, 29277, 29277, 31525, 29277, 29277,
    /* 44425 */ 29277, 29277, 29277, 29277, 29277, 668253, 29277, 29277, 29277, 31532, 84791, 82557, 82557, 82557,
    /* 44439 */ 82557, 82557, 82557, 82557, 82557, 82557, 668285, 82557, 82557, 82557, 82557, 84802, 82557, 84803,
    /* 44453 */ 82557, 82557, 82557, 29331, 29331, 29331, 29331, 29331, 29331, 31561, 29331, 29331, 29331, 29331, 29331,
    /* 44468 */ 30586, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 1028755, 29331, 29331,
    /* 44482 */ 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 668307, 29331, 29331, 29331, 29331,
    /* 44496 */ 31572, 29331, 31573, 29331, 29331, 29331, 29331, 29331, 30917, 29331, 29331, 29331, 29331, 29331, 29331,
    /* 44511 */ 29331, 29331, 29331, 29331, 31327, 29331, 29331, 29331, 29331, 29331, 29331, 29277, 29277, 29277, 29277,
    /* 44526 */ 82557, 82557, 29331, 29331, 0, 778240, 0, 0, 401408, 0, 0, 0, 0, 414, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    /* 44551 */ 2039, 0, 0, 0, 0, 0, 29277, 29277, 402013, 29277, 29277, 29277, 461682, 29277, 29277, 29277, 29277,
    /* 44568 */ 29277, 29277, 29277, 29277, 31048, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 31610, 29277, 29277,
    /* 44583 */ 82557, 82557, 402045, 82557, 82557, 82557, 461697, 82557, 82557, 82557, 82557, 82557, 82557, 82557,
    /* 44597 */ 559934, 82557, 82557, 82557, 82557, 875328, 82557, 909949, 82557, 82557, 82557, 84873, 82557, 82557,
    /* 44611 */ 29331, 29331, 402067, 29331, 29331, 29331, 461712, 29331, 29331, 29331, 29331, 29331, 30600, 29331,
    /* 44625 */ 29331, 29331, 29331, 30606, 29331, 29331, 29331, 29277, 29277, 29277, 29277, 0, 29331, 29331, 29277,
    /* 44640 */ 82557, 29277, 29277, 29277, 29277, 29331, 29331, 29331, 29331, 31640, 29331, 29331, 29277, 29277, 82557,
    /* 44655 */ 29331, 0, 0, 0, 0, 0, 744, 745, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1227, 0, 0, 0, 0, 0, 0, 82557, 82557, 82557,
    /* 44682 */ 438909, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 934525, 29331, 29331, 29331, 438931, 29277,
    /* 44696 */ 29277, 29277, 29277, 31839, 31840, 82557, 82557, 82557, 82557, 82557, 85093, 85094, 29331, 29331, 29331,
    /* 44711 */ 29331, 29331, 31133, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 30546, 30547,
    /* 44726 */ 29331, 29331, 29331, 29331, 29331, 29331, 31851, 31852, 29277, 0, 0, 0, 3183, 0, 29277, 29277, 29277,
    /* 44743 */ 29277, 29277, 29277, 31023, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29987, 29277, 29277,
    /* 44758 */ 29277, 29277, 29993, 29277, 29277, 82557, 82557, 29331, 29331, 3209, 31882, 85131, 31884, 0, 29277,
    /* 44773 */ 82557, 29331, 0, 29277, 82557, 29331, 29331, 31463, 29331, 29331, 29331, 29331, 29331, 29331, 29331,
    /* 44788 */ 29331, 29331, 29331, 29331, 29331, 30922, 29331, 29331, 29331, 0, 0, 0, 461, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    /* 44810 */ 0, 0, 0, 1643, 0, 0, 0, 0, 65536, 484, 0, 502, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 131072, 131072, 0, 0, 0,
    /* 44838 */ 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 29295, 29295, 82574,
    /* 44857 */ 29349, 29295, 538, 538, 538, 538, 538, 538, 538, 538, 538, 0, 556, 0, 0, 0, 0, 0, 773, 0, 0, 0, 0, 778,
    /* 44881 */ 779, 780, 0, 0, 432, 29295, 82574, 29349, 29295, 82574, 29295, 29295, 82574, 82574, 82574, 29295, 29295,
    /* 44898 */ 29295, 29295, 29349, 29349, 29349, 29349, 29349, 29349, 29349, 29349, 29349, 29349, 29349, 29295, 82574,
    /* 44913 */ 29295, 29295, 82574, 29349, 29295, 29349, 1, 12290, 3, 78167, 78167, 86361, 0, 0, 0, 0, 0, 0, 0, 2706,
    /* 44933 */ 0, 0, 0, 0, 0, 0, 0, 0, 1681, 0, 0, 0, 0, 0, 0, 0, 432, 432, 0, 0, 0, 0, 0, 789, 0, 0, 0, 0, 0, 0, 0, 0,
    /* 44965 */ 69632, 73728, 286720, 0, 0, 0, 0, 0, 82557, 82557, 82914, 82557, 82557, 82557, 82557, 82557, 82557,
    /* 44982 */ 82557, 82557, 82557, 82941, 82557, 82557, 82557, 82557, 82557, 83309, 82557, 82557, 82557, 82557, 82557,
    /* 44997 */ 82557, 82557, 82557, 82557, 82557, 83761, 82557, 82557, 82557, 82557, 82557, 29331, 29331, 29331, 29755,
    /* 45012 */ 29331, 29331, 29331, 29331, 29277, 29277, 29277, 29277, 0, 0, 0, 29331, 29331, 29331, 29331, 29331,
    /* 45028 */ 31827, 29331, 29331, 29277, 430080, 0, 0, 0, 0, 0, 29277, 31766, 31767, 29277, 29277, 29277, 29277,
    /* 45045 */ 29277, 31772, 29277, 29277, 29277, 29277, 82557, 82557, 29331, 29331, 0, 0, 0, 0, 0, 2910, 0, 0, 29331,
    /* 45064 */ 29755, 29331, 78167, 87129, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 163840, 0, 0, 0, 0, 0, 0, 0, 0, 29960, 902,
    /* 45090 */ 29277, 29277, 29277, 29277, 29277, 29277, 29968, 29277, 29277, 29277, 29277, 29277, 30451, 29277, 29277,
    /* 45105 */ 29277, 30453, 29277, 29277, 29277, 29277, 82557, 82557, 29331, 29331, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    /* 45126 */ 2699, 0, 0, 29976, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277,
    /* 45142 */ 29277, 29277, 29277, 975453, 82557, 83302, 82557, 82557, 82557, 83311, 82557, 82557, 82557, 82557,
    /* 45156 */ 82557, 82557, 82557, 82557, 82557, 82557, 942717, 82557, 82557, 82557, 82557, 82557, 82557, 82557,
    /* 45170 */ 82557, 82557, 82557, 83373, 26030, 29960, 1032, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 30135,
    /* 45185 */ 29331, 29331, 29331, 30144, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331,
    /* 45200 */ 29331, 520851, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 30206, 29277, 29277, 29277,
    /* 45214 */ 29277, 0, 29331, 30144, 29976, 83311, 29277, 29277, 29277, 29277, 29277, 29277, 31668, 29277, 29277,
    /* 45229 */ 29277, 29277, 82557, 82557, 82557, 82557, 82557, 26030, 29960, 1032, 29331, 29331, 311955, 29331, 29331,
    /* 45244 */ 29331, 29331, 29331, 29331, 31798, 29331, 31800, 29277, 0, 0, 0, 0, 0, 0, 1255, 0, 0, 0, 0, 0, 0, 1115,
    /* 45266 */ 0, 0, 0, 0, 1564, 0, 0, 0, 1570, 0, 0, 0, 0, 0, 0, 0, 0, 0, 663552, 0, 0, 0, 0, 0, 0, 0, 1583, 0, 0, 0,
    /* 45296 */ 1589, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 724992, 0, 0, 0, 0, 0, 0, 0, 1611, 1612, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    /* 45326 */ 0, 1620, 0, 0, 0, 0, 1653, 0, 0, 0, 0, 0, 0, 0, 1093632, 0, 2027, 0, 0, 0, 1659, 0, 0, 0, 0, 1664, 0, 0,
    /* 45354 */ 0, 0, 0, 0, 0, 0, 90473, 90473, 90473, 90473, 94570, 0, 0, 0, 0, 0, 0, 1675, 0, 1677, 0, 0, 0, 0, 0, 0,
    /* 45380 */ 0, 0, 0, 0, 991232, 0, 0, 0, 0, 0, 0, 1700, 0, 0, 0, 0, 0, 0, 29960, 0, 29277, 29277, 29277, 29277,
    /* 45404 */ 29277, 29277, 29277, 29277, 31603, 31604, 29277, 29277, 29277, 31608, 29277, 29277, 29277, 30448, 29277,
    /* 45419 */ 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 82557, 82557, 82557, 82557, 82557,
    /* 45434 */ 83300, 82557, 82557, 82557, 83728, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557,
    /* 45449 */ 82557, 82557, 84350, 82557, 82557, 82557, 83739, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557,
    /* 45464 */ 83746, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 705149, 82557, 82557, 82557, 82557, 82557,
    /* 45478 */ 82557, 82557, 82557, 84060, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 83775, 82557, 82557,
    /* 45493 */ 82557, 82557, 26030, 0, 29331, 82557, 82557, 82557, 82557, 83756, 82557, 82557, 82557, 82557, 82557,
    /* 45508 */ 82557, 82557, 82557, 82557, 82557, 82557, 1127037, 0, 0, 0, 0, 0, 0, 29331, 29331, 29331, 29331, 30558,
    /* 45526 */ 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 725651, 29331, 29331,
    /* 45540 */ 29331, 29331, 29331, 29331, 29331, 30569, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 30576,
    /* 45555 */ 29331, 29331, 29331, 29331, 29331, 30189, 29331, 29331, 29331, 29331, 30195, 29331, 29331, 29331, 29331,
    /* 45570 */ 29331, 29331, 1041043, 29277, 29277, 82557, 29331, 0, 0, 0, 0, 0, 374, 375, 0, 0, 0, 0, 0, 0, 0, 737, 0,
    /* 45593 */ 29277, 30612, 29331, 29331, 29277, 82557, 29277, 29277, 29277, 29277, 82557, 82557, 82557, 82557, 29331,
    /* 45608 */ 29331, 29331, 29331, 0, 614400, 29277, 29277, 0, 1996, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2345,
    /* 45632 */ 0, 0, 0, 0, 2340, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1668, 0, 0, 0, 82557, 82557, 82557, 84318, 82557,
    /* 45658 */ 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 84539, 82557, 82557, 82557,
    /* 45673 */ 29331, 29331, 29331, 29331, 31118, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331,
    /* 45688 */ 29331, 31145, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 30193, 29331, 29331, 29331, 29331,
    /* 45703 */ 29331, 29331, 29331, 0, 0, 0, 2509, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2004, 0, 0, 0, 31244, 29277,
    /* 45728 */ 31245, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 30013,
    /* 45743 */ 29277, 29277, 82557, 82557, 84533, 82557, 84534, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557,
    /* 45758 */ 82557, 82557, 82557, 83731, 82557, 82557, 82557, 82557, 82557, 82557, 83737, 82557, 29331, 29331, 31323,
    /* 45773 */ 29331, 31324, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 31157, 29331,
    /* 45788 */ 29331, 29331, 29277, 29277, 29277, 29331, 29331, 3132, 0, 0, 0, 29277, 29277, 29277, 29277, 29277,
    /* 45804 */ 29277, 29277, 29277, 29277, 29277, 31814, 29277, 29277, 29277, 29277, 30927, 29331, 29277, 82557, 29277,
    /* 45819 */ 29277, 29277, 29277, 82557, 82557, 82557, 82557, 82557, 82557, 84058, 82557, 82557, 434813, 82557,
    /* 45833 */ 82557, 82557, 84065, 82557, 82557, 29277, 29277, 29277, 31872, 82557, 82557, 82557, 85122, 29331, 29331,
    /* 45848 */ 29331, 31876, 0, 0, 29277, 29277, 29277, 31599, 29277, 29277, 29277, 29277, 29277, 29277, 31605, 29277,
    /* 45864 */ 29277, 29277, 29277, 29277, 29277, 30436, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277,
    /* 45879 */ 30425, 29277, 29277, 29277, 29277, 29277, 29277, 0, 0, 0, 432, 0, 0, 0, 0, 86361, 0, 0, 0, 0, 0, 441, 0,
    /* 45902 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 196608, 0, 0, 0, 0, 0, 0, 0, 448, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    /* 45933 */ 2017, 0, 0, 0, 0, 0, 425, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1216, 0, 0, 0, 65536, 441, 0, 0, 0, 0,
    /* 45963 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 1248, 0, 0, 29296, 82575, 29350, 29296, 82575, 29296, 29296, 82575, 82575,
    /* 45984 */ 82575, 29296, 29296, 29296, 29296, 29350, 29350, 29350, 29350, 29350, 29350, 29350, 29350, 29350, 29350,
    /* 45999 */ 29350, 29296, 82575, 29296, 29296, 82575, 29350, 29296, 29350, 1, 12290, 3, 78167, 78167, 86361, 0, 0,
    /* 46016 */ 0, 0, 0, 0, 0, 2841, 0, 0, 0, 0, 901, 901, 901, 901, 901, 901, 901, 29277, 29277, 29592, 29277, 29277,
    /* 46038 */ 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 30429, 29277, 29277, 82557,
    /* 46053 */ 82909, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557,
    /* 46068 */ 549501, 82557, 82557, 82557, 0, 0, 1161, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1172, 0, 0, 0, 0, 1661, 1662, 0,
    /* 46093 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 221184, 221184, 221184, 221184, 221184, 221184, 0, 487424, 0, 0, 0, 0, 0, 0,
    /* 46116 */ 0, 0, 0, 0, 0, 0, 0, 0, 2541, 0, 29277, 29277, 488029, 29277, 29277, 29277, 29277, 29277, 29277, 29277,
    /* 46136 */ 29277, 29277, 29277, 29277, 29277, 29277, 30444, 29277, 29277, 82557, 82557, 83350, 82557, 82557, 82557,
    /* 46151 */ 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 639613, 82557, 82557, 82557,
    /* 46165 */ 30183, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331,
    /* 46180 */ 29331, 928175, 29331, 0, 0, 1648, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1272, 0, 0, 82557, 623229,
    /* 46204 */ 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557,
    /* 46218 */ 815741, 82557, 82557, 82557, 29331, 29331, 623251, 29331, 29331, 29331, 29331, 29331, 29331, 29331,
    /* 46232 */ 29331, 29331, 29331, 29331, 29331, 29331, 31642, 29277, 82557, 29331, 0, 0, 0, 0, 0, 0, 2711, 0, 0, 0,
    /* 46252 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2556, 0, 0, 0, 2914, 0, 0, 0, 0, 0, 2841, 0, 0, 0, 0, 0, 0, 0, 2841, 0,
    /* 46283 */ 0, 0, 0, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 0, 0, 0, 432, 0, 430, 0, 0, 86361, 0, 0, 0, 0,
    /* 46306 */ 0, 0, 0, 2841, 0, 0, 0, 2985, 29277, 29277, 29277, 29277, 426, 0, 427, 0, 426, 0, 0, 0, 69632, 73728, 0,
    /* 46329 */ 0, 0, 0, 0, 490, 0, 65536, 0, 490, 427, 490, 0, 490, 490, 0, 490, 490, 519, 519, 519, 519, 564, 568,
    /* 46352 */ 564, 564, 0, 575, 575, 568, 575, 575, 575, 584, 585, 568, 575, 575, 568, 568, 568, 568, 568, 568, 568,
    /* 46373 */ 519, 519, 519, 519, 519, 568, 519, 519, 519, 568, 568, 568, 568, 568, 568, 568, 568, 568, 568, 568,
    /* 46393 */ 29297, 29297, 82576, 29351, 29297, 82576, 29297, 29297, 82576, 82576, 82576, 29297, 29297, 29297, 29297,
    /* 46408 */ 29351, 29351, 29351, 29351, 29351, 29351, 29351, 29351, 29351, 29351, 29351, 29351, 29351, 29297, 82576,
    /* 46423 */ 29297, 29368, 82621, 29351, 29368, 29379, 1, 12290, 3, 78167, 78167, 86361, 0, 0, 0, 0, 0, 0, 0, 2841,
    /* 46443 */ 2982, 0, 2984, 0, 29277, 31659, 29277, 31661, 29331, 29331, 29752, 29331, 29331, 29331, 29331, 29331,
    /* 46459 */ 29277, 29277, 29277, 29640, 0, 0, 0, 29331, 29331, 29331, 29331, 29331, 348819, 29331, 29331, 29331,
    /* 46475 */ 29331, 29331, 29331, 29331, 29331, 29331, 29331, 31147, 29331, 29331, 29331, 29331, 29331, 29752, 29331,
    /* 46490 */ 29331, 78167, 87129, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 229376, 0, 0, 0, 0, 0, 0, 2022, 0, 0, 0, 0, 0, 0,
    /* 46518 */ 0, 0, 0, 0, 0, 0, 0, 1607, 0, 0, 82557, 82557, 82557, 84354, 82557, 82557, 82557, 82557, 82557, 82557,
    /* 46538 */ 0, 0, 0, 0, 0, 0, 2705, 0, 0, 0, 0, 0, 0, 0, 0, 0, 131072, 0, 131072, 0, 0, 131072, 0, 0, 29331, 29331,
    /* 46564 */ 29331, 29331, 31154, 29331, 29331, 29331, 29331, 29331, 29331, 29277, 29277, 29277, 29331, 29331, 0, 0,
    /* 46580 */ 0, 974848, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 479232, 0, 0, 0, 0, 0, 0, 29298, 82577, 29352, 29298, 82577,
    /* 46604 */ 29298, 29298, 82577, 82577, 82577, 29298, 29298, 29298, 29298, 29352, 29352, 29352, 29352, 29352, 29352,
    /* 46619 */ 29352, 29352, 29352, 29352, 29352, 29298, 82577, 29298, 29298, 82577, 29352, 29298, 29352, 1, 12290, 3,
    /* 46635 */ 78167, 78167, 86361, 0, 0, 0, 0, 0, 0, 0, 2919, 2841, 0, 0, 0, 0, 0, 1130496, 0, 432, 432, 784, 0, 0, 0,
    /* 46660 */ 0, 0, 0, 0, 0, 0, 793, 0, 0, 0, 0, 444, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 29278, 29278, 82557, 29332,
    /* 46687 */ 29278, 0, 0, 0, 784, 0, 867, 0, 0, 0, 0, 0, 0, 867, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 867, 0, 29277,
    /* 46716 */ 29277, 29593, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277,
    /* 46731 */ 30764, 29277, 29277, 82557, 82910, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557,
    /* 46746 */ 82557, 82557, 82557, 82557, 1073789, 82557, 82557, 1094269, 0, 1176, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    /* 46767 */ 432, 432, 0, 0, 0, 0, 0, 0, 0, 0, 791, 0, 0, 0, 0, 0, 374, 33502, 0, 0, 0, 0, 0, 0, 0, 0, 0, 438, 0, 0,
    /* 46797 */ 0, 0, 0, 0, 705117, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277,
    /* 46814 */ 29277, 29277, 29277, 942685, 29277, 29331, 29331, 29331, 29331, 29331, 705171, 29331, 29331, 29331,
    /* 46828 */ 29331, 29331, 29331, 29331, 29331, 29331, 29331, 541331, 29331, 29331, 31137, 29331, 631443, 656019,
    /* 46842 */ 29331, 29331, 0, 0, 0, 1566, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1579, 0, 0, 0, 0, 29960, 902, 29277, 29277,
    /* 46867 */ 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29972, 0, 0, 1585, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    /* 46890 */ 0, 1633, 0, 1634, 29331, 29331, 29331, 29756, 29331, 29331, 29331, 29331, 29277, 29277, 29277, 29277, 0,
    /* 46907 */ 0, 0, 29331, 29331, 29331, 29331, 29331, 488083, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331,
    /* 46923 */ 29331, 29331, 31477, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 30906, 29331, 29331, 29331,
    /* 46938 */ 29331, 30911, 29331, 29331, 29331, 29331, 29756, 29331, 78167, 87129, 0, 0, 0, 0, 0, 0, 0, 1028096, 0,
    /* 46957 */ 0, 0, 0, 449, 0, 0, 0, 408, 0, 0, 0, 0, 0, 0, 0, 1999, 0, 0, 2002, 0, 0, 0, 0, 0, 0, 692224, 0, 0, 0, 0,
    /* 46987 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2720, 0, 29277, 29277, 1028701, 29277, 29277, 29277, 29277, 29277, 29277,
    /* 47008 */ 29277, 29277, 29277, 29277, 29277, 29277, 29277, 30779, 29277, 29277, 29277, 29277, 815709, 29277,
    /* 47022 */ 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 31254, 29277, 29277,
    /* 47037 */ 0, 507904, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2840, 0, 508509, 29277, 533085, 29277, 29277,
    /* 47060 */ 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 29277, 31267, 29277, 29277, 29277,
    /* 47075 */ 510025, 29277, 29277, 29277, 29277, 29277, 29277, 82557, 82557, 82557, 82557, 82557, 82557, 82557,
    /* 47089 */ 82557, 82557, 84867, 82557, 82557, 82557, 82557, 510053, 82557, 533117, 82557, 82557, 82557, 82557,
    /* 47103 */ 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 84073, 82557, 82557, 82557, 82557, 82557, 82557,
    /* 47118 */ 82557, 82557, 84692, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 29331, 533139, 29331, 29331,
    /* 47132 */ 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 934547, 29277, 0,
    /* 47147 */ 3158, 3159, 3160, 0, 3162, 29277, 324189, 29277, 29277, 29277, 29331, 29331, 29277, 82557, 29277, 29277,
    /* 47163 */ 29277, 29277, 82557, 82557, 82557, 82557, 82557, 82557, 84797, 82557, 82557, 82557, 82557, 82557, 82557,
    /* 47178 */ 82557, 82557, 82557, 664189, 82557, 82557, 82557, 82557, 82557, 82557, 0, 0, 0, 745472, 0, 0, 0, 0, 0,
    /* 47197 */ 0, 0, 0, 0, 0, 0, 0, 2318, 0, 0, 0, 29277, 29277, 29277, 1127005, 29277, 29277, 29277, 29277, 29277,
    /* 47217 */ 29277, 29277, 29277, 29277, 29277, 29277, 82557, 305867, 82557, 82557, 82557, 746109, 82557, 82557,
    /* 47231 */ 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 84341, 29331,
    /* 47246 */ 746131, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331,
    /* 47260 */ 29331, 31119, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 31127, 29331, 0, 0, 0, 536576, 0, 0, 0,
    /* 47278 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 2344, 0, 0, 0, 84686, 82557, 82557, 82557, 82557, 82557, 82557, 82557, 82557,
    /* 47300 */ 82557, 82557, 82557, 82557, 82557, 82557, 82557, 963197, 29331, 29331, 29331, 29331, 664211, 29331,
    /* 47314 */ 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 29331, 31326, 29331, 29331, 29331, 29331,
    /* 47329 */ 29331, 29331, 29331, 29331, 29331, 30590, 29331, 29331, 29331, 30593, 29331, 29331, 0, 65536, 0, 0, 0,
    /* 47346 */ 0, 0, 0, 0, 511, 0, 0, 0, 0, 0, 0, 2918, 0, 2841, 0, 0, 0, 0, 0, 0, 466944, 1134592, 0, 0, 432, 0, 0, 0,
    /* 47374 */ 0, 0, 0, 1134592, 0, 0, 0, 0, 1134592, 0, 0, 0, 0, 0, 0, 1134592, 0, 0, 0, 0, 0, 1134592, 0, 0, 0, 0, 0,
    /* 47401 */ 0, 0, 0, 1134592, 0, 1134592, 0, 0, 0, 1134592, 1135072, 1135072, 0, 0, 0, 0, 0, 0, 2980, 2841, 0, 0, 0,
    /* 47424 */ 0, 31658, 29277, 29277, 29277, 0, 1135072, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 29277, 29277,
    /* 47447 */ 29277, 29277, 29277, 29277, 29277, 0, 1134592, 0, 0, 0, 1134592, 0, 0, 0, 1134592, 1134592, 0, 0, 0, 0,
    /* 47467 */ 0, 786, 0, 0, 0, 765952, 0, 795, 0, 0, 887, 860, 0, 0, 0, 1134592, 1134592, 1134592, 0, 0, 1134592,
    /* 47488 */ 1134592, 0, 0, 0, 1135278, 1135278, 1135278, 1135278, 1135278, 1135278, 1135278, 1135278, 1135278,
    /* 47501 */ 1135278, 0, 1134592, 1134592, 1134592, 1134592, 1134592, 1135278, 1134592, 1135278, 1, 12290, 3, 0, 0,
    /* 47516 */ 0, 0, 0, 0, 0, 0, 0, 0, 1024000, 0, 0, 0, 0, 0, 0, 0, 0, 431, 0, 432, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    /* 47547 */ 0, 2514, 0, 0, 0, 0, 65536, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 431, 431, 431, 431, 559, 431, 431, 1147419,
    /* 47572 */ 431, 431, 559, 431, 431, 431, 431, 431, 1147439, 431, 431, 1147419, 1147419, 1147419, 1147419, 1147419,
    /* 47588 */ 1147419, 1147419, 1147419, 1147419, 1147419, 1147419, 1147419, 1147419, 1147419, 1147419, 1147419, 431,
    /* 47600 */ 1147419, 431, 431, 559, 559, 431, 1147439, 1147439, 1147439, 1147439, 1147439, 1147439, 1147439,
    /* 47613 */ 1147439, 1147439, 1147439, 1147439, 1147439, 1147439, 1147439, 1147439, 1147439, 0, 0, 0, 0, 0, 1147419,
    /* 47628 */ 1147439, 1147439, 1, 12290, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1134592, 0, 1134592, 0, 0, 0, 0, 0, 0, 0,
    /* 47653 */ 1159168, 432, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2554, 2555, 0, 0, 0, 481, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    /* 47682 */ 0, 1159168, 1159168, 1159168, 1159168, 1159168, 1159168, 1159168, 1159168, 1159168, 1159168, 1159168,
    /* 47694 */ 1159168, 1159168, 1159168, 1159168, 1159168, 0, 1159168, 0, 0, 0, 0, 1159168, 1159168, 0, 0, 1159168, 0,
    /* 47711 */ 1159168, 1159168, 0, 1159168, 1159168, 1159168, 1, 12290, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 29960, 0,
    /* 47732 */ 29277, 29277, 29277, 29277, 29277, 29277, 30385, 1163264, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    /* 47755 */ 159744, 0, 0, 0, 1, 12290, 3, 78167, 78167, 86361, 0, 0, 0, 0, 0, 0, 0, 29960, 1706, 29277, 29277,
    /* 47776 */ 29277, 29277, 29277, 29277, 29277, 29277, 559914, 29277, 29277, 29277, 29277, 875307, 909917, 29277, 0,
    /* 47791 */ 106496, 0, 0, 0, 0, 106496, 106496, 0, 106496, 106496, 0, 106496, 106496, 106496, 106496, 0, 0, 0, 0, 0,
    /* 47811 */ 0, 0, 0, 0, 0, 0, 0, 0, 1644, 0, 0, 0, 0, 106496, 0, 0, 0, 0, 0, 106496, 0, 106496, 106496, 106496,
    /* 47835 */ 106496, 106496, 106496, 106496, 106496, 106496, 106496, 106496, 106496, 106496, 106496, 106496, 106496,
    /* 47848 */ 0, 0, 0, 0, 0
  ];

  var EXPECTED =
  [
    /*    0 */ 114, 130, 146, 176, 205, 235, 251, 189, 267, 791, 297, 313, 329, 345, 361, 1715, 382, 372, 379, 379, 379,
    /*   21 */ 379, 379, 379, 379, 760, 398, 414, 430, 1517, 806, 746, 446, 464, 480, 496, 512, 528, 544, 560, 576, 592,
    /*   42 */ 622, 652, 1504, 1428, 668, 684, 1687, 700, 716, 732, 776, 1672, 836, 852, 1052, 1223, 882, 1442, 898,
    /*   61 */ 914, 930, 946, 962, 978, 994, 1037, 1068, 1084, 1114, 1144, 1128, 1160, 1176, 1192, 1208, 1239, 1255,
    /*   79 */ 821, 1271, 1301, 1317, 1333, 1008, 1021, 1349, 1365, 1381, 1397, 1489, 1413, 1458, 160, 1474, 1533, 219,
    /*   97 */ 1549, 1098, 1565, 1581, 1609, 1593, 1625, 1641, 606, 281, 1657, 636, 1285, 866, 1703, 379, 460, 1731,
    /*  115 */ 3043, 3923, 1747, 1747, 1747, 1747, 1737, 1747, 1747, 1749, 1744, 1741, 1753, 1757, 1761, 1768, 1764,
    /*  132 */ 1772, 1776, 1780, 1784, 3920, 2180, 2270, 2270, 3049, 1795, 2270, 1891, 1802, 1807, 3359, 2270, 2270,
    /*  149 */ 2270, 2270, 3451, 1976, 3844, 1812, 1926, 1817, 1821, 1825, 1829, 2270, 2270, 2270, 2270, 3183, 4001,
    /*  166 */ 4006, 2270, 2270, 2270, 4015, 2270, 2270, 2270, 2270, 4019, 3585, 1833, 2270, 2340, 4011, 2270, 2270,
    /*  183 */ 2270, 1966, 1976, 1976, 1976, 1968, 1812, 1812, 1812, 1812, 1876, 1927, 1927, 1927, 1927, 1841, 1900,
    /*  200 */ 1906, 2270, 2270, 3288, 2270, 1925, 1927, 1927, 1927, 1838, 1847, 1885, 1867, 2270, 2270, 4082, 2270,
    /*  217 */ 3146, 1862, 2270, 2270, 2270, 2270, 4088, 3270, 2270, 2270, 3983, 2270, 2270, 2270, 3977, 2089, 4104,
    /*  234 */ 1808, 3842, 1976, 1976, 1976, 1976, 1967, 1812, 1812, 1812, 1812, 1813, 1927, 1927, 1927, 1927, 1928,
    /*  251 */ 1873, 1882, 1902, 1889, 2270, 2270, 2270, 4034, 3828, 2270, 1895, 1976, 1976, 1976, 1976, 3845, 3841,
    /*  268 */ 1976, 1976, 1976, 1977, 1812, 1812, 1812, 1911, 1927, 1927, 1927, 1878, 1916, 2270, 2270, 2270, 2270,
    /*  285 */ 4375, 2270, 2270, 2270, 2270, 4386, 2498, 2491, 2270, 2270, 2270, 4390, 3843, 1976, 1978, 1812, 1812,
    /*  302 */ 1948, 1927, 1938, 1942, 3288, 3446, 1976, 1968, 1812, 1947, 1927, 1996, 1863, 1975, 1952, 1947, 1957,
    /*  319 */ 1964, 1978, 1911, 1934, 1973, 3845, 1932, 1982, 1896, 1953, 1934, 1966, 1953, 1989, 1969, 1993, 1912,
    /*  336 */ 1843, 2002, 2005, 1907, 2009, 2013, 2016, 2016, 2016, 2021, 2025, 2016, 2017, 2029, 2033, 2037, 2041,
    /*  353 */ 2045, 2049, 2053, 2057, 3501, 2061, 2065, 3327, 2728, 2270, 2270, 2270, 2472, 2270, 2270, 2270, 2585,
    /*  370 */ 2287, 2069, 2270, 2270, 2270, 2270, 2270, 2270, 3017, 2270, 2270, 2270, 2270, 2270, 2270, 2270, 2270,
    /*  387 */ 2270, 2270, 2270, 2270, 2270, 2270, 2270, 2270, 3018, 2270, 2270, 2107, 2109, 2113, 2117, 2121, 2125,
    /*  404 */ 2129, 2133, 2911, 2270, 2142, 2270, 2270, 2270, 2270, 3937, 2975, 4447, 2149, 2153, 2270, 2159, 2168,
    /*  421 */ 2173, 2961, 2384, 3524, 3025, 2270, 2177, 2187, 2926, 4243, 2270, 2270, 2270, 2270, 3621, 4058, 2191,
    /*  438 */ 1853, 2197, 2201, 2208, 2270, 2270, 3658, 2204, 2270, 4094, 2280, 2270, 2270, 2270, 3511, 2284, 2270,
    /*  455 */ 2270, 2270, 2612, 2070, 2536, 2270, 2270, 2270, 3900, 3491, 4095, 2291, 3757, 3568, 2270, 2271, 3424,
    /*  472 */ 2270, 2270, 2270, 3668, 3568, 2270, 2270, 3137, 2999, 2270, 3651, 2297, 4161, 2302, 2270, 4059, 4301,
    /*  489 */ 2270, 2270, 4301, 2270, 2270, 1918, 2308, 2737, 4095, 2313, 2317, 4058, 2322, 2270, 4299, 3568, 2270,
    /*  506 */ 1998, 2270, 2297, 2335, 4445, 2344, 4458, 3001, 2270, 2351, 3875, 2371, 3874, 2270, 4312, 2369, 2373,
    /*  523 */ 3936, 2357, 2362, 2370, 2374, 3934, 2372, 2369, 2367, 2368, 2369, 2932, 4293, 2378, 2270, 2270, 2270,
    /*  540 */ 2270, 2270, 2270, 4288, 2382, 2270, 2270, 2270, 2388, 2392, 3606, 3024, 2397, 2401, 2404, 2407, 2411,
    /*  557 */ 2414, 2417, 2419, 2423, 2270, 2270, 4288, 2382, 2270, 2270, 3440, 2270, 2270, 2427, 2431, 2435, 3471,
    /*  574 */ 2439, 2443, 2447, 2451, 1943, 2455, 2270, 2459, 2866, 2270, 2270, 2164, 2504, 2270, 2270, 3441, 2270,
    /*  591 */ 2843, 2465, 3615, 2469, 2476, 2700, 2482, 2270, 2861, 2270, 2487, 2270, 2270, 1943, 2496, 2270, 2270,
    /*  608 */ 2270, 4419, 4371, 1855, 2270, 2597, 3316, 3609, 4342, 2270, 2270, 2270, 3160, 2270, 4234, 2270, 2270,
    /*  625 */ 2502, 2270, 2270, 2087, 2270, 3056, 2552, 4380, 2508, 2270, 2517, 2270, 2270, 3153, 4361, 3244, 2270,
    /*  642 */ 4154, 4414, 2650, 4197, 3699, 2270, 2270, 3249, 4418, 2270, 2636, 2524, 4176, 2529, 2270, 2270, 2270,
    /*  659 */ 2938, 2534, 2270, 2270, 4410, 2540, 2270, 2270, 2546, 2610, 2827, 2635, 2270, 2270, 2750, 2616, 2270,
    /*  676 */ 4166, 2164, 2621, 3472, 3745, 2081, 3353, 2627, 2617, 2233, 2633, 2270, 2233, 2633, 2270, 4443, 3603,
    /*  693 */ 3471, 2640, 3350, 2644, 2270, 2648, 2660, 2697, 1869, 3097, 2704, 4036, 3237, 2709, 2225, 2705, 2211,
    /*  710 */ 2713, 2689, 4075, 2717, 2721, 3910, 3612, 1850, 2725, 2732, 2270, 2270, 3650, 2736, 2270, 3089, 2270,
    /*  727 */ 2270, 2741, 2623, 2754, 2931, 2758, 2762, 2766, 2770, 2772, 2776, 2780, 2784, 2787, 2787, 2791, 2797,
    /*  744 */ 2270, 3089, 2270, 2270, 3498, 3322, 2270, 3195, 3568, 2270, 2270, 3637, 4094, 4160, 2270, 2276, 2270,
    /*  761 */ 2270, 2270, 2911, 3243, 2238, 2085, 2270, 2270, 3002, 3660, 2093, 2270, 2921, 2099, 2103, 2801, 3776,
    /*  778 */ 2808, 2813, 2815, 2270, 2820, 2824, 2331, 2831, 2835, 2841, 2847, 2853, 3276, 2270, 1807, 3842, 1976,
    /*  795 */ 1976, 1922, 1812, 1812, 1932, 1927, 1927, 1938, 1942, 2270, 3327, 2270, 2242, 2530, 2252, 2270, 2270,
    /*  812 */ 2270, 2272, 2261, 2286, 2270, 2270, 2270, 2265, 2269, 2270, 2477, 3490, 3944, 2270, 2270, 3739, 2270,
    /*  829 */ 2270, 2270, 3495, 2318, 3505, 2270, 3509, 2270, 2491, 3217, 2888, 2270, 2270, 2138, 3216, 2270, 2270,
    /*  846 */ 3590, 2087, 2270, 2929, 2270, 2894, 2898, 3631, 2952, 2905, 4475, 2270, 2270, 2918, 2270, 2270, 2490,
    /*  863 */ 2270, 2890, 2925, 2270, 2270, 3528, 2270, 2270, 3528, 2270, 2747, 1857, 4182, 2270, 3569, 4457, 2270,
    /*  880 */ 4335, 4451, 4109, 2309, 2744, 2945, 3785, 2979, 2270, 2984, 2270, 2489, 2270, 2996, 2270, 2270, 2270,
    /*  897 */ 2914, 2270, 4109, 2461, 3568, 3858, 2270, 3010, 3393, 4452, 2270, 2270, 3015, 2270, 2927, 3023, 4312,
    /*  914 */ 3891, 2270, 4200, 2270, 3029, 2270, 3035, 2793, 2792, 3651, 2270, 3040, 4108, 3048, 4108, 2884, 2270,
    /*  931 */ 4073, 2270, 3047, 4107, 3048, 3053, 4107, 3060, 3064, 4070, 3075, 3083, 2270, 2270, 4399, 3087, 2270,
    /*  948 */ 2270, 3094, 2270, 3070, 3036, 2855, 3101, 4138, 4173, 3105, 3109, 3113, 3117, 3121, 3125, 3130, 3129,
    /*  965 */ 3134, 4399, 3144, 2270, 3150, 2270, 2882, 2900, 3067, 2347, 3157, 4474, 3164, 3168, 4047, 2338, 3172,
    /*  982 */ 3405, 2353, 3486, 2352, 3176, 2270, 3418, 3742, 2270, 3180, 2270, 2883, 2901, 3068, 1859, 3187, 3517,
    /*  999 */ 2542, 3194, 2270, 3199, 2270, 4468, 2270, 3563, 2926, 2270, 2270, 3548, 3574, 3954, 4009, 3594, 3778,
    /* 1016 */ 3666, 1791, 2270, 2257, 3069, 2270, 3865, 3619, 3625, 3708, 3011, 3629, 3917, 2270, 3635, 3222, 3557,
    /* 1033 */ 3568, 2270, 3641, 3647, 2964, 2270, 1984, 2270, 4436, 2270, 3674, 2270, 2492, 3206, 2270, 2651, 3210,
    /* 1050 */ 3600, 2182, 2270, 2872, 2936, 2270, 2270, 2270, 2270, 3417, 2270, 3138, 3230, 2942, 2950, 2815, 2136,
    /* 1067 */ 1802, 3569, 3221, 2270, 4467, 2270, 2270, 3885, 2270, 2270, 2270, 2270, 3851, 2926, 2270, 4334, 3966,
    /* 1084 */ 2662, 2270, 2987, 2270, 3227, 2649, 3234, 3308, 2270, 2270, 2270, 3255, 2270, 2145, 2270, 2270, 4215,
    /* 1101 */ 4136, 2270, 4142, 2270, 3456, 3900, 2578, 4151, 2270, 4096, 4158, 4324, 2270, 3261, 2270, 2270, 2270,
    /* 1118 */ 2270, 3268, 2270, 3971, 3787, 3568, 3274, 3036, 2346, 3280, 3541, 2270, 3532, 2155, 2270, 3251, 2270,
    /* 1135 */ 2270, 3251, 3830, 3312, 3320, 2293, 3951, 3326, 3530, 3249, 3287, 2075, 2270, 2270, 3292, 2270, 2270,
    /* 1152 */ 2270, 3299, 3829, 3223, 3049, 2270, 3139, 3305, 2144, 2270, 2559, 2270, 3250, 3830, 3312, 3079, 3331,
    /* 1169 */ 2164, 2095, 2679, 2270, 3534, 2228, 3263, 4474, 1861, 1861, 3341, 2652, 2655, 2652, 2656, 3264, 2652,
    /* 1186 */ 3264, 2653, 2654, 2655, 2652, 1861, 3347, 2656, 2270, 2270, 2270, 2270, 2270, 2270, 2270, 2954, 2270,
    /* 1203 */ 2270, 2363, 3357, 2169, 4465, 4401, 2804, 4209, 4202, 3363, 3367, 3371, 3375, 3379, 3383, 3387, 3399,
    /* 1220 */ 3390, 2270, 2606, 2270, 2958, 2270, 2270, 3394, 2270, 2968, 2270, 2270, 2270, 2270, 2972, 2270, 2270,
    /* 1237 */ 2270, 3471, 2393, 3403, 4110, 3294, 3409, 2270, 3071, 3413, 3422, 2244, 3428, 3435, 3445, 2270, 3450,
    /* 1254 */ 3455, 3460, 3770, 3465, 3469, 2953, 3510, 2483, 3478, 2928, 3295, 3031, 3049, 1834, 2270, 2594, 3484,
    /* 1271 */ 3752, 2927, 3515, 3521, 2270, 2218, 2270, 3538, 2270, 2270, 2478, 3943, 2270, 3547, 2270, 2270, 4423,
    /* 1288 */ 2270, 2270, 2270, 4430, 2270, 2270, 4440, 4147, 3315, 2678, 2270, 3526, 2270, 3553, 2270, 2270, 2270,
    /* 1305 */ 2270, 3702, 2270, 4314, 3561, 2605, 2270, 2525, 3567, 2930, 3019, 1797, 1790, 3643, 2270, 2270, 4042,
    /* 1322 */ 3556, 3684, 2270, 2270, 3570, 3574, 2270, 2270, 2270, 4053, 3943, 4084, 3597, 3964, 2513, 4111, 4091,
    /* 1339 */ 2217, 3579, 3584, 2270, 3549, 2270, 3683, 2270, 2587, 3589, 3655, 1798, 3264, 3664, 2270, 3672, 2541,
    /* 1356 */ 3678, 2837, 2990, 3682, 1787, 3257, 3688, 3692, 3256, 3580, 3696, 2992, 1733, 3257, 2214, 3706, 3715,
    /* 1373 */ 2676, 3078, 3712, 3725, 3721, 3729, 3718, 3733, 3736, 4109, 3749, 1890, 2270, 2270, 2980, 3761, 3055,
    /* 1390 */ 4099, 3767, 3782, 3791, 3795, 3799, 3802, 3806, 3810, 3814, 3817, 3823, 3819, 4109, 3827, 1890, 2270,
    /* 1407 */ 2248, 3834, 3839, 4392, 3849, 3855, 3860, 3908, 3840, 3914, 3927, 2183, 4122, 2328, 2358, 2270, 2270,
    /* 1424 */ 4128, 4245, 3932, 2270, 3569, 2573, 2270, 2270, 2270, 2577, 2270, 2582, 2270, 3473, 3898, 2591, 2604,
    /* 1441 */ 4426, 2270, 2270, 3480, 3136, 3006, 2944, 2816, 2270, 4247, 2270, 3438, 4246, 3016, 2270, 4246, 3016,
    /* 1458 */ 3941, 2270, 2270, 4002, 3948, 3958, 3961, 3970, 2270, 2270, 3975, 3981, 3987, 3991, 3995, 2325, 3575,
    /* 1475 */ 4023, 4027, 1985, 2270, 2561, 4145, 4031, 3993, 2270, 4040, 2270, 2270, 2270, 2520, 2270, 3864, 3869,
    /* 1492 */ 3343, 3873, 3879, 3883, 3997, 3889, 3895, 4356, 2255, 3904, 3090, 3971, 2270, 3415, 2270, 2550, 4378,
    /* 1509 */ 2556, 2270, 2565, 2270, 2270, 2849, 2270, 2569, 2270, 2270, 2270, 2222, 2270, 2270, 4236, 2232, 2237,
    /* 1526 */ 2877, 4245, 2270, 2270, 2270, 3301, 3474, 4046, 2270, 2270, 2629, 4051, 2270, 2270, 2270, 3190, 4057,
    /* 1543 */ 4063, 3830, 2270, 4067, 4116, 4079, 4115, 4382, 2270, 2270, 2270, 4120, 4126, 2270, 3763, 2270, 2270,
    /* 1560 */ 3763, 3900, 4334, 4132, 2193, 3202, 4165, 4208, 4343, 3245, 2535, 4170, 4153, 2162, 2511, 3334, 2270,
    /* 1577 */ 3248, 2163, 4180, 2161, 3247, 3337, 3246, 3247, 4186, 4194, 4206, 4213, 2270, 2270, 2270, 3755, 2270,
    /* 1594 */ 2270, 2270, 2270, 1960, 3543, 4096, 1803, 4292, 3283, 4297, 3070, 2304, 4305, 4309, 2270, 4367, 4219,
    /* 1611 */ 4223, 4227, 4231, 4240, 4251, 4255, 4259, 4263, 4267, 4271, 4275, 4279, 4283, 4287, 3395, 4318, 2946,
    /* 1628 */ 4355, 4433, 4350, 4323, 2270, 2270, 2270, 4328, 4332, 4097, 4100, 4083, 4188, 3835, 4340, 2270, 2270,
    /* 1645 */ 2270, 4347, 2270, 2270, 2270, 3249, 4354, 2270, 2270, 3461, 4360, 4365, 4396, 3140, 4207, 4190, 4108,
    /* 1662 */ 2270, 2270, 2270, 4405, 2270, 2270, 2270, 2270, 4336, 4409, 2270, 3928, 2859, 2169, 2270, 2298, 3773,
    /* 1679 */ 3777, 2809, 2865, 2870, 2908, 2876, 2881, 3213, 2270, 2666, 2270, 4443, 2600, 2670, 3431, 2674, 2695,
    /* 1696 */ 2699, 2683, 2270, 2599, 3240, 2687, 2693, 2270, 4456, 2270, 4462, 4472, 2270, 2246, 2270, 4098, 3569,
    /* 1713 */ 2270, 4319, 2270, 2270, 2270, 2270, 2074, 2079, 2270, 2270, 2270, 2270, 2270, 2270, 2270, 3030, 2270,
    /* 1730 */ 2270, 4479, 4487, 5036, 5036, 4512, 4645, 4564, 5496, 4530, 4533, 4535, 4545, 4539, 4534, 4534, 4552,
    /* 1747 */ 4534, 4534, 4534, 4534, 4542, 4533, 4549, 4563, 4534, 4568, 4572, 4575, 4584, 4600, 4601, 4599, 4591,
    /* 1764 */ 4594, 4588, 4598, 4578, 4594, 4593, 4594, 4594, 4605, 4605, 4580, 4739, 4609, 4622, 4626, 4612, 4616,
    /* 1781 */ 4614, 4618, 4630, 4634, 4798, 4644, 5036, 4511, 6360, 5036, 4517, 5036, 5036, 5789, 6374, 4674, 5036,
    /* 1798 */ 5036, 4666, 5036, 4516, 5073, 5036, 5036, 5036, 4511, 6120, 5036, 5036, 5036, 4640, 5848, 5848, 5848,
    /* 1815 */ 5848, 4699, 4708, 4708, 6224, 6585, 4732, 6224, 5848, 5841, 4709, 6768, 5036, 5227, 5035, 5036, 6286,
    /* 1832 */ 4713, 6602, 5036, 5036, 5036, 4677, 5852, 6225, 4731, 6224, 4731, 6224, 5848, 4708, 6222, 5848, 4708,
    /* 1849 */ 6768, 5032, 5476, 5036, 5478, 5210, 5036, 5036, 5038, 5036, 5044, 5036, 5789, 5036, 5036, 5036, 6120,
    /* 1866 */ 5036, 6288, 4713, 5036, 5036, 4669, 5712, 4729, 4733, 5846, 5850, 4708, 4708, 4708, 5852, 4729, 4701,
    /* 1883 */ 5226, 4721, 4721, 5228, 5036, 6286, 6288, 4714, 5036, 5036, 5036, 4681, 5036, 6222, 6224, 6224, 5845,
    /* 1900 */ 4708, 5226, 5229, 5036, 6287, 6288, 6288, 5036, 5036, 5036, 4752, 5848, 5848, 5850, 4708, 5036, 4733,
    /* 1917 */ 5850, 5036, 5036, 4703, 5036, 6224, 6224, 5847, 5848, 4699, 4708, 4708, 4708, 4708, 5843, 5848, 5849,
    /* 1934 */ 4708, 4708, 5854, 5036, 4708, 5852, 4737, 5846, 4701, 5036, 5036, 5036, 4760, 5848, 5851, 4708, 4708,
    /* 1951 */ 4708, 5845, 5848, 5848, 5848, 4708, 4708, 5852, 4744, 5036, 4646, 6782, 5928, 5036, 6117, 5036, 6224,
    /* 1968 */ 6224, 6224, 5846, 5848, 5851, 5036, 6120, 6223, 6224, 6224, 6224, 6224, 5845, 5848, 4708, 5853, 5036,
    /* 1985 */ 5036, 4714, 5036, 5036, 4708, 4708, 5855, 5856, 4708, 5855, 6222, 6224, 5850, 5036, 5036, 4703, 5413,
    /* 2002 */ 5850, 4743, 4743, 4743, 5036, 5045, 4748, 4795, 4759, 4765, 4772, 4778, 4843, 4849, 4766, 4766, 4766,
    /* 2019 */ 4766, 4851, 4766, 4774, 6118, 4782, 4817, 4788, 4829, 4846, 4786, 4792, 4766, 4768, 4808, 4767, 4767,
    /* 2036 */ 6982, 4814, 4826, 4833, 4840, 4855, 4862, 4864, 4859, 4868, 4870, 4870, 4918, 4924, 4874, 4920, 4924,
    /* 2053 */ 4922, 4878, 4879, 4886, 4885, 4883, 4890, 4893, 4906, 4911, 4910, 4915, 4928, 4932, 5036, 6406, 5213,
    /* 2070 */ 5036, 5036, 5036, 4803, 4971, 5036, 5036, 5036, 4940, 4980, 5036, 5034, 5036, 5068, 4649, 4997, 5913,
    /* 2087 */ 5036, 5036, 4754, 5036, 5224, 5484, 5720, 5015, 6375, 5036, 4941, 5036, 5037, 5022, 5070, 5026, 4822,
    /* 2104 */ 5893, 4801, 5054, 5152, 5083, 5090, 5090, 5090, 5090, 5093, 5098, 5098, 5097, 5098, 5099, 5086, 5103,
    /* 2121 */ 5108, 5107, 5112, 5112, 5114, 5118, 5118, 5118, 5120, 5124, 5127, 5136, 5130, 5132, 5140, 5036, 4648,
    /* 2138 */ 5036, 5036, 5571, 5575, 4684, 5149, 5036, 5036, 4939, 5036, 5036, 4649, 5476, 5160, 6266, 5167, 5330,
    /* 2155 */ 5036, 5036, 4941, 5036, 5475, 5162, 5036, 5036, 4950, 5036, 5036, 5036, 6703, 5473, 5036, 5036, 5036,
    /* 2172 */ 4972, 5057, 5036, 5174, 5189, 5201, 6665, 5206, 5036, 4658, 5036, 5036, 4653, 5036, 5036, 5627, 5625,
    /* 2189 */ 5036, 5386, 4703, 6230, 4649, 5036, 4652, 5036, 4704, 5036, 5036, 4802, 4715, 5221, 5277, 6246, 5256,
    /* 2206 */ 5183, 5284, 5233, 5184, 4645, 5036, 4664, 5032, 5036, 4666, 5030, 5036, 4666, 5036, 5036, 4677, 5254,
    /* 2223 */ 5258, 5185, 5036, 4668, 4558, 5036, 4714, 5036, 6016, 5266, 5036, 5036, 5036, 4983, 5387, 5036, 5036,
    /* 2240 */ 5036, 4993, 5478, 6801, 5036, 5036, 5039, 5036, 5036, 5036, 5041, 5647, 6247, 5234, 5281, 4645, 6042,
    /* 2257 */ 5036, 5036, 6534, 5283, 5036, 6246, 6250, 5649, 5036, 5856, 6249, 5235, 5282, 5036, 5036, 5036, 5036,
    /* 2274 */ 4482, 5036, 6246, 6765, 5237, 5284, 6248, 5258, 5238, 4645, 6250, 5236, 5283, 5036, 5036, 5036, 5028,
    /* 2291 */ 5036, 6662, 5036, 5036, 5041, 5788, 5223, 5036, 5036, 5036, 5045, 6763, 5294, 5036, 5036, 5041, 6913,
    /* 2308 */ 5288, 5036, 5036, 5036, 5046, 5477, 6664, 5484, 5298, 5262, 5036, 5036, 5036, 5047, 5484, 6250, 5261,
    /* 2325 */ 5036, 4804, 5036, 5703, 5036, 5036, 5040, 6412, 5787, 4938, 5478, 6908, 5289, 5036, 4820, 5036, 5036,
    /* 2342 */ 5771, 5036, 6908, 5312, 5036, 5036, 5042, 5036, 5036, 5528, 5036, 5036, 5036, 5079, 6070, 5529, 5036,
    /* 2359 */ 5036, 5036, 5163, 6541, 5036, 5036, 5036, 5191, 5529, 5036, 5036, 6542, 5036, 5036, 5480, 5531, 5036,
    /* 2376 */ 5036, 4511, 5481, 5036, 5483, 5481, 6709, 5431, 5036, 5036, 5063, 5036, 5036, 6071, 6795, 5321, 5268,
    /* 2393 */ 5036, 5036, 5036, 5192, 6231, 5036, 6931, 5325, 6776, 5334, 5338, 5350, 5350, 5352, 5350, 5356, 5341,
    /* 2410 */ 5344, 5360, 5346, 5362, 5366, 5366, 5366, 5366, 5367, 5371, 5371, 5371, 5371, 5371, 5373, 5375, 5376,
    /* 2427 */ 5419, 5037, 6375, 4493, 6441, 5380, 5036, 5722, 5391, 5036, 4646, 6116, 6041, 5398, 5406, 4510, 5036,
    /* 2444 */ 6388, 5581, 4483, 4509, 5036, 6041, 5405, 6039, 5036, 5036, 5410, 5423, 5036, 4760, 5423, 4761, 5424,
    /* 2461 */ 5036, 5036, 5068, 5900, 5384, 4492, 6440, 5435, 5036, 6049, 5451, 5036, 4947, 5036, 4955, 5460, 5036,
    /* 2478 */ 5036, 5036, 5245, 5249, 5493, 5036, 5036, 5036, 5270, 5512, 5502, 5036, 5036, 5069, 5036, 5036, 5036,
    /* 2495 */ 5530, 5514, 5504, 5036, 5036, 5069, 5069, 5036, 6703, 6707, 5429, 4645, 5036, 5523, 5527, 6103, 5036,
    /* 2512 */ 4951, 5036, 5036, 6697, 6149, 5537, 5542, 5548, 5036, 4957, 6670, 6639, 5586, 5036, 5036, 5036, 5271,
    /* 2529 */ 6309, 5036, 5036, 5036, 5276, 6308, 4754, 5036, 5036, 5036, 5288, 5569, 5036, 5036, 5036, 5425, 5036,
    /* 2546 */ 5036, 6704, 6708, 5579, 5036, 6442, 5382, 5036, 5224, 5435, 4649, 6048, 5525, 5036, 4959, 5036, 5036,
    /* 2563 */ 5920, 4502, 5050, 6302, 5543, 6423, 6298, 6302, 5552, 5593, 6300, 6742, 5554, 4754, 5603, 5036, 5036,
    /* 2580 */ 5036, 5441, 5041, 6706, 6710, 5036, 4965, 5036, 5036, 4715, 6329, 5035, 5036, 5607, 5036, 4966, 4803,
    /* 2597 */ 5044, 5483, 5036, 5036, 6791, 5036, 5036, 5526, 5036, 5036, 5036, 5454, 5036, 5463, 5659, 5036, 5036,
    /* 2614 */ 5074, 4973, 5622, 5036, 5036, 5036, 5464, 6707, 6711, 5036, 5036, 5078, 6664, 6304, 5632, 5036, 5036,
    /* 2631 */ 5170, 6671, 6740, 6306, 4753, 5036, 5036, 5036, 5463, 5036, 5713, 5222, 5032, 5036, 6703, 5653, 5632,
    /* 2648 */ 5658, 5036, 5036, 5041, 5036, 5036, 6712, 5036, 5036, 5788, 5036, 5036, 6739, 5670, 5036, 5036, 5284,
    /* 2665 */ 5036, 5036, 6737, 5654, 4753, 5036, 5712, 5036, 5225, 5675, 5036, 5036, 5712, 5028, 5036, 5036, 5036,
    /* 2682 */ 6903, 5036, 6703, 5675, 5018, 5674, 5070, 5018, 5036, 5442, 4559, 6790, 5676, 5659, 5036, 5041, 5674,
    /* 2699 */ 5017, 5036, 5036, 5036, 5468, 5684, 5036, 4669, 4559, 5036, 5034, 5045, 5444, 5683, 5444, 5684, 5036,
    /* 2716 */ 5443, 5442, 5446, 5036, 5442, 5688, 5036, 5442, 5688, 5476, 5036, 5034, 5479, 5036, 5036, 6767, 5479,
    /* 2733 */ 5479, 5477, 6660, 5700, 5036, 5036, 5036, 5485, 5036, 5711, 5036, 5069, 5077, 5887, 5036, 4974, 5856,
    /* 2750 */ 5036, 4983, 6740, 5552, 5068, 6520, 5877, 4645, 4695, 6664, 5036, 5818, 5028, 5718, 5036, 5726, 6000,
    /* 2767 */ 5728, 6003, 6005, 5732, 5732, 5732, 5732, 5735, 5738, 5742, 5749, 5745, 5751, 5757, 5757, 5757, 5757,
    /* 2784 */ 5755, 5755, 5758, 5762, 5762, 5762, 5762, 5763, 5036, 5036, 5036, 5486, 5036, 4976, 5036, 5036, 5611,
    /* 2801 */ 5046, 5067, 5036, 5078, 5036, 4555, 6154, 5483, 5036, 5028, 5036, 5580, 5931, 5399, 5036, 5036, 5315,
    /* 2818 */ 5036, 5036, 5767, 5036, 5036, 5777, 5036, 5775, 5781, 5036, 4984, 6741, 5553, 5804, 5794, 5036, 5802,
    /* 2835 */ 5036, 6089, 5036, 5036, 5416, 5713, 6127, 5808, 5036, 5036, 5418, 5036, 5036, 5814, 5036, 5036, 5462,
    /* 2852 */ 5585, 5822, 5817, 5036, 5036, 5480, 6367, 6441, 4754, 5036, 5036, 5500, 5586, 6768, 5036, 5036, 5036,
    /* 2869 */ 5519, 4511, 5659, 5036, 5036, 5507, 6317, 4902, 5036, 5036, 5036, 5524, 6048, 5036, 5036, 5036, 5529,
    /* 2886 */ 5036, 5484, 5827, 5833, 5036, 5036, 5508, 6318, 5045, 5067, 5075, 5856, 5839, 4645, 5036, 5481, 4972,
    /* 2903 */ 5598, 5036, 4511, 5659, 5036, 5696, 5036, 5931, 5036, 4988, 4803, 5036, 4646, 6919, 4693, 5508, 5868,
    /* 2920 */ 5565, 5036, 5006, 5013, 5070, 5564, 4803, 5036, 5036, 5036, 4973, 5036, 5036, 5480, 5036, 5481, 5828,
    /* 2937 */ 5599, 5036, 5036, 5558, 5542, 5875, 6232, 5036, 5483, 5036, 5036, 5036, 5635, 5028, 5931, 5400, 5036,
    /* 2954 */ 5036, 5036, 5587, 6439, 5506, 6317, 5871, 5036, 5009, 5066, 5036, 4654, 6095, 6056, 5041, 6316, 5881,
    /* 2971 */ 5599, 6916, 6318, 5871, 5036, 5027, 5036, 5895, 4649, 5036, 5036, 5036, 5646, 5036, 6918, 4693, 5036,
    /* 2988 */ 5028, 6375, 5036, 5030, 6712, 5036, 5289, 4666, 5036, 6314, 6319, 4803, 6713, 5289, 5036, 5036, 5036,
    /* 3005 */ 5070, 5045, 5068, 5077, 5887, 5002, 4973, 5036, 5036, 5662, 5002, 6956, 5036, 5036, 5036, 5660, 5036,
    /* 3022 */ 5036, 5036, 6232, 5036, 5036, 5036, 5197, 6516, 5036, 5036, 5036, 5662, 5036, 6231, 5036, 4511, 5036,
    /* 3039 */ 5036, 6232, 5036, 5530, 5036, 5032, 4497, 4506, 5531, 5484, 5036, 5036, 5036, 5712, 5529, 5036, 5486,
    /* 3056 */ 5036, 5036, 5036, 6442, 5485, 5036, 5036, 5530, 5485, 5036, 5486, 5036, 5033, 5036, 5036, 5036, 5713,
    /* 3073 */ 5036, 4755, 5485, 5036, 5487, 5529, 4666, 5036, 5036, 5043, 5486, 5486, 5486, 5530, 5036, 5906, 5036,
    /* 3090 */ 5036, 5664, 6664, 6119, 6315, 6083, 5000, 5036, 5035, 4668, 5445, 5910, 5915, 5036, 5714, 4637, 5919,
    /* 3107 */ 5925, 5937, 5941, 5951, 5950, 5945, 5951, 5949, 5955, 5959, 5967, 5967, 5963, 5967, 5965, 5971, 5977,
    /* 3124 */ 5972, 5973, 5977, 5977, 5979, 5986, 5987, 5987, 5987, 5983, 5987, 5988, 5036, 5036, 5665, 5036, 5036,
    /* 3141 */ 5036, 5044, 5483, 5072, 5284, 5036, 5036, 5770, 6438, 6315, 5992, 4803, 5036, 5037, 6061, 6960, 4490,
    /* 3158 */ 5202, 5659, 5036, 5037, 6159, 6525, 5036, 6121, 5997, 6802, 6009, 6020, 5810, 6030, 6036, 5036, 6376,
    /* 3175 */ 6046, 6078, 5036, 5036, 4717, 6314, 6082, 5000, 5036, 5037, 6632, 6637, 5394, 5036, 6715, 5036, 5037,
    /* 3192 */ 6669, 6675, 5783, 5036, 5036, 5036, 5902, 4654, 6096, 6375, 5036, 5037, 6754, 6759, 5036, 6794, 5596,
    /* 3209 */ 4803, 5392, 5036, 6715, 5036, 5041, 5574, 5829, 5036, 5036, 5036, 5573, 6107, 6375, 5036, 5036, 5036,
    /* 3226 */ 6015, 5531, 5036, 4973, 5036, 5045, 5068, 5076, 5036, 6712, 5393, 5036, 5045, 6793, 6375, 5680, 5067,
    /* 3243 */ 5041, 5067, 5036, 5036, 5036, 4949, 5036, 5036, 5036, 4957, 4961, 5036, 6113, 6375, 5036, 5036, 6358,
    /* 3260 */ 5036, 4982, 6141, 5036, 5036, 5790, 5036, 5036, 6113, 4942, 5036, 5036, 5798, 5036, 5036, 6125, 5036,
    /* 3277 */ 5036, 5823, 5036, 6712, 5393, 6713, 5036, 5047, 5036, 6714, 6131, 5036, 5036, 5036, 6117, 4958, 6141,
    /* 3294 */ 5036, 5036, 5855, 5036, 5302, 4957, 6140, 5036, 5036, 5856, 6259, 5790, 5392, 5036, 6716, 5036, 5215,
    /* 3311 */ 5049, 5036, 6071, 4645, 5036, 5048, 5036, 6716, 5036, 5036, 6375, 5036, 5036, 5890, 5036, 5215, 5036,
    /* 3328 */ 5036, 5036, 6118, 6712, 5069, 6715, 5045, 4481, 4646, 5045, 4481, 4648, 5048, 5036, 6712, 5036, 6230,
    /* 3345 */ 5036, 6937, 6712, 5036, 5788, 5036, 5067, 4648, 5300, 5036, 5036, 5618, 6145, 6149, 5036, 5036, 5931,
    /* 3362 */ 5036, 5036, 6023, 6134, 6136, 6026, 6163, 6172, 6171, 6172, 6172, 6170, 4661, 6176, 6166, 6180, 6184,
    /* 3379 */ 6191, 6194, 6198, 6199, 6165, 6187, 6198, 6198, 6203, 6211, 6211, 6211, 6215, 6216, 5036, 5068, 5036,
    /* 3396 */ 5036, 5036, 5634, 6207, 6210, 6211, 6211, 6146, 6150, 5036, 5036, 6053, 6065, 5302, 5036, 5036, 5663,
    /* 3413 */ 5036, 6220, 5036, 5036, 6071, 5036, 5036, 5036, 5588, 6229, 5036, 5036, 5484, 6250, 5260, 5489, 5036,
    /* 3430 */ 6236, 5036, 5068, 6716, 6703, 5043, 6244, 5707, 5036, 5070, 5036, 5036, 5613, 5036, 5036, 6276, 5036,
    /* 3447 */ 5036, 5036, 6222, 5308, 5036, 5036, 5036, 6224, 6254, 5036, 5036, 5037, 6422, 6263, 5036, 5036, 5036,
    /* 3464 */ 6240, 6925, 5036, 5036, 6271, 6270, 6413, 5036, 5036, 6072, 5036, 5036, 5036, 5224, 6147, 5284, 5036,
    /* 3481 */ 5036, 6073, 5036, 6275, 5224, 5036, 5036, 6077, 5036, 6280, 5036, 5036, 5036, 6259, 5244, 6594, 6265,
    /* 3498 */ 5036, 5072, 5665, 5036, 4766, 4810, 4836, 5036, 6695, 6695, 6695, 5587, 6439, 5036, 5036, 5036, 6246,
    /* 3515 */ 5036, 5857, 5036, 5036, 6087, 6012, 5304, 5036, 5661, 5036, 5196, 5036, 5036, 4957, 6979, 5036, 5036,
    /* 3532 */ 4958, 6375, 5036, 5036, 4960, 5036, 4967, 5036, 6292, 5036, 5216, 5036, 5036, 5855, 4715, 5384, 5036,
    /* 3549 */ 5036, 5036, 6328, 6333, 5037, 5247, 6331, 6335, 5036, 5036, 5036, 6348, 6693, 6693, 5036, 5036, 6093,
    /* 3566 */ 6097, 6148, 4645, 5036, 5036, 5036, 5037, 5248, 6332, 4645, 5036, 5036, 6652, 4518, 5036, 5036, 5036,
    /* 3583 */ 6359, 6323, 5036, 5036, 5036, 6373, 6333, 5036, 5036, 5036, 6439, 5036, 6344, 5036, 4973, 4973, 4973,
    /* 3600 */ 5036, 5217, 6101, 5036, 5041, 6792, 5036, 4972, 5666, 5036, 4896, 5036, 5484, 5479, 6628, 5036, 4935,
    /* 3617 */ 5036, 5440, 6339, 4645, 5036, 5036, 6256, 5487, 5036, 6366, 4973, 5455, 5036, 6375, 5036, 5028, 5036,
    /* 3634 */ 5931, 6621, 4645, 5036, 5036, 6258, 5036, 6620, 6350, 5036, 5036, 6313, 6324, 5036, 6366, 4973, 4976,
    /* 3651 */ 5036, 5036, 5036, 5484, 5036, 6015, 5665, 5036, 5242, 5036, 5036, 5039, 5028, 5036, 6354, 5036, 5713,
    /* 3668 */ 5036, 5036, 6249, 5259, 5036, 6349, 5036, 5036, 6315, 5993, 6350, 5036, 5665, 6366, 5413, 5712, 5036,
    /* 3685 */ 5036, 5036, 6375, 6364, 5036, 4645, 4666, 4690, 5036, 4511, 4645, 5036, 6231, 5713, 5028, 5484, 5036,
    /* 3702 */ 5036, 5246, 6330, 6334, 5531, 6375, 5036, 5036, 6343, 4645, 4514, 5036, 5036, 4514, 5036, 5036, 4513,
    /* 3719 */ 4515, 4512, 4512, 5036, 4513, 4666, 5713, 5029, 4511, 6375, 5030, 4513, 4511, 6375, 4512, 5385, 6371,
    /* 3736 */ 6383, 6383, 6383, 5036, 5246, 6596, 5036, 5071, 6016, 5036, 5037, 6375, 5224, 6386, 5036, 6118, 5036,
    /* 3753 */ 5272, 6149, 5036, 5180, 5036, 5036, 6763, 5259, 6380, 4803, 5036, 5036, 6395, 6423, 4972, 6118, 6392,
    /* 3770 */ 5036, 5306, 6264, 5036, 5070, 5078, 6749, 4687, 5036, 5036, 5483, 5661, 6402, 5036, 6405, 5036, 5316,
    /* 3787 */ 5036, 5036, 5589, 6071, 6410, 5487, 6117, 6417, 6427, 5036, 4974, 6435, 6447, 6448, 6469, 6459, 6455,
    /* 3804 */ 6459, 6452, 6457, 6463, 6471, 6467, 6465, 6477, 6475, 6481, 6483, 6489, 6487, 6493, 6495, 6503, 6503,
    /* 3821 */ 6507, 6508, 6503, 6499, 6502, 6503, 6386, 6117, 5036, 5036, 5036, 4715, 5036, 4501, 5036, 5036, 5036,
    /* 3838 */ 6531, 5487, 5037, 5036, 5036, 5856, 6224, 6224, 6224, 5848, 5848, 5036, 6529, 5036, 5036, 6430, 6108,
    /* 3855 */ 5036, 6439, 4650, 5036, 5317, 5036, 5036, 5644, 5648, 6938, 5036, 5036, 5036, 6533, 5036, 6906, 6538,
    /* 3872 */ 6066, 6546, 5036, 5036, 5036, 6541, 5036, 6231, 5036, 4943, 6944, 6554, 6564, 5036, 5036, 6431, 6109,
    /* 3889 */ 5036, 6718, 5036, 5036, 6518, 5036, 5036, 6717, 6583, 5036, 5382, 5036, 4482, 6761, 5486, 5144, 5143,
    /* 3906 */ 5036, 5145, 4502, 5036, 5036, 5486, 5035, 5694, 5036, 6512, 5609, 5479, 5036, 5789, 5036, 5226, 6115,
    /* 3923 */ 5036, 4522, 4526, 4533, 6589, 5036, 5036, 4976, 5036, 5835, 6618, 5036, 5036, 6540, 5036, 5036, 5036,
    /* 3940 */ 5156, 6573, 6577, 6334, 5036, 5036, 5036, 6284, 6575, 6579, 4645, 5036, 5394, 6714, 5036, 5048, 5665,
    /* 3957 */ 6366, 5060, 5036, 6625, 6625, 5036, 5665, 5036, 5455, 5036, 5036, 6116, 5036, 6117, 5036, 4717, 5036,
    /* 3974 */ 5036, 5646, 4500, 5036, 5036, 6549, 6722, 5486, 5038, 5036, 5036, 6550, 6723, 5858, 5067, 6558, 5328,
    /* 3991 */ 5447, 5036, 5036, 4974, 5036, 4651, 5036, 5036, 6568, 5036, 6613, 5036, 5036, 5036, 6571, 5036, 5796,
    /* 4008 */ 6618, 5036, 5456, 5036, 5036, 6119, 5036, 5169, 6633, 4725, 6648, 5037, 6643, 4724, 6647, 5484, 6627,
    /* 4025 */ 6627, 5663, 4972, 5036, 5036, 6118, 5857, 6512, 6658, 5036, 5471, 5036, 5036, 4670, 5018, 5036, 5705,
    /* 4042 */ 5036, 5036, 6592, 5250, 5797, 5036, 5036, 5036, 6663, 6677, 4645, 5036, 5036, 6592, 6330, 5283, 5036,
    /* 4059 */ 5036, 5222, 5036, 5036, 5036, 6681, 6681, 6681, 5036, 5921, 5036, 5487, 5036, 5531, 5487, 5036, 5036,
    /* 4076 */ 5484, 5483, 5034, 5036, 6439, 4651, 5036, 5481, 5036, 5036, 5046, 5036, 5036, 6688, 6701, 5036, 5483,
    /* 4093 */ 5660, 5036, 5224, 5036, 5036, 5036, 5040, 5036, 5036, 5036, 5043, 6761, 5036, 4716, 5036, 5485, 5036,
    /* 4110 */ 5036, 5036, 5664, 5036, 5036, 5486, 5040, 5856, 6556, 6658, 5037, 6514, 5036, 5036, 6600, 5036, 4650,
    /* 4127 */ 4754, 5036, 5036, 6606, 6610, 4639, 5486, 5040, 6727, 5036, 6731, 5036, 5036, 6654, 5036, 5036, 6420,
    /* 4144 */ 4754, 5036, 5486, 5039, 5036, 5043, 5036, 6748, 4649, 5046, 5036, 5036, 5036, 6691, 5045, 6755, 5036,
    /* 4161 */ 5036, 6661, 5036, 5036, 6761, 5036, 5036, 4646, 5642, 6773, 5036, 5036, 4647, 4991, 5933, 5036, 5037,
    /* 4178 */ 5538, 5552, 4480, 4647, 5046, 5036, 6715, 5036, 4949, 4948, 5036, 5036, 6716, 5036, 5036, 5031, 5047,
    /* 4195 */ 5036, 5048, 5045, 5036, 6713, 5036, 5488, 4973, 5036, 5663, 6683, 6295, 5036, 5045, 5036, 5036, 5036,
    /* 4212 */ 6684, 5047, 5045, 5036, 5036, 6734, 5036, 5883, 5069, 5400, 6256, 5036, 6663, 5036, 5401, 4715, 5400,
    /* 4229 */ 5036, 6440, 5864, 5661, 5177, 5036, 5518, 5036, 5036, 5071, 5036, 5399, 6440, 6787, 5036, 5524, 6614,
    /* 4246 */ 5036, 5036, 5036, 5002, 4973, 5561, 6443, 6799, 6806, 6810, 6814, 6398, 6839, 6825, 6818, 6824, 6820,
    /* 4263 */ 6829, 6832, 6836, 6843, 6846, 6850, 6856, 6854, 6870, 6871, 6860, 6864, 6868, 6868, 6875, 6885, 6886,
    /* 4280 */ 6883, 6883, 6878, 6879, 6890, 6893, 6896, 6900, 5036, 5036, 5036, 6705, 6702, 5036, 5482, 5036, 5036,
    /* 4297 */ 5036, 6964, 5036, 5036, 6763, 5293, 4645, 5036, 5896, 5628, 5036, 4899, 5036, 5690, 6923, 5036, 5531,
    /* 4314 */ 5036, 5036, 5048, 6693, 6929, 5036, 5036, 5036, 6714, 5533, 5036, 5036, 5036, 6753, 5036, 6314, 6783,
    /* 4331 */ 5070, 5036, 5858, 4715, 5036, 5036, 5036, 6059, 6522, 6942, 5485, 5478, 5036, 5036, 5036, 6754, 5036,
    /* 4348 */ 6239, 6949, 5036, 5532, 5036, 6935, 6948, 4482, 5036, 5036, 5036, 6718, 6950, 5036, 5036, 5067, 5067,
    /* 4365 */ 5067, 5067, 5036, 5036, 6780, 6743, 6744, 5036, 5855, 4717, 5036, 6158, 6524, 4482, 5436, 5036, 5068,
    /* 4382 */ 4648, 5036, 4650, 5036, 5036, 6157, 6523, 6951, 6314, 6955, 5856, 5036, 6512, 6560, 4714, 5036, 5040,
    /* 4399 */ 5036, 5588, 5036, 5036, 5659, 5855, 5036, 6060, 6523, 4482, 6962, 5036, 5036, 5036, 6769, 5857, 4715,
    /* 4416 */ 5036, 5039, 6968, 5036, 5036, 5036, 6781, 5036, 6974, 6970, 5036, 5617, 6741, 5544, 5036, 6059, 6969,
    /* 4433 */ 5036, 5636, 5036, 5589, 5036, 5036, 6016, 4975, 5856, 4715, 5036, 5640, 5036, 5036, 5223, 5036, 4802,
    /* 4450 */ 6231, 5855, 5036, 5036, 5036, 6919, 5037, 6975, 5036, 5036, 5036, 6909, 4976, 5037, 5036, 5036, 5659,
    /* 4467 */ 5036, 5036, 6032, 4803, 5036, 5046, 5036, 6716, 5036, 5036, 5036, 5862, 2, 4, 8, 262144, 0, 0, 0,
    /* 4486 */ -872415232, 1048576, 1073741824, 0x80000000, 0, -2113929216, 0, 0, 32, 262144, 0, 1075838976, 2097152,
    /* 4499 */ 2097152, 2097152, 4194304, 8388608, 0x80000000, 0, 0, 4194304, 268435456, 0x80000000, 0, -872415232, 0,
    /* 4512 */ 0, 0, 2097152, 16777216, 0, 0, 32768, 65536, 131072, 0, 0, 4194432, 4194560, 4196352, 270532608, 2097152,
    /* 4528 */ 37748736, 541065216, 3145728, 541065216, 541065216, -2143289344, 4194304, 4194304, 4194304, 4194304,
    /* 4538 */ 4196352, 276901888, 8540160, 37748736, 4194304, 4194432, 541065216, -2143289344, 4194304, 4194304,
    /* 4548 */ 4196352, 0, 8425488, 4194304, 4194304, 4198144, 4196352, 4194304, 1, 0, 1024, 65536, 16777216, 268435456,
    /* 4562 */ 0, 0, 4194304, 4194304, 4194304, 16777216, 37748736, 37748736, 37748736, 37748736, 742391808, 239075328,
    /* 4574 */ -1405091840, 742391808, 742391808, 775946240, 239075328, -1371537408, 775946240, 775946240, 775946240,
    /* 4583 */ 64, -1405091840, 775946240, 775946240, -1405091840, 171966464, 171966464, 239075328, 775946240,
    /* 4592 */ 171966464, 775946240, 171966464, 171966464, 171966464, 171966464, -1371537408, 775946240, -1371537408,
    /* 4601 */ 775946240, 775946240, 775946240, -1371537408, 239075328, 171966464, 775946240, 239075328, 4194368,
    /* 4610 */ 4718592, 4194400, 4194368, -2143285440, -2143285408, -2143285408, -2143285408, -2143285408, -2109730976,
    /* 4619 */ -2143285408, 775946336, 775946304, 4718592, 541065280, 4194368, 4720640, 541589504, 541589504, 4194368,
    /* 4629 */ -2143289280, 776470528, 775946304, 775946304, 776470528, -1908404384, 775946304, -1908404384, 2, 2, 0,
    /* 4640 */ 16384, 4194304, 0, 0, 1048576, 1073741824, 0, 0, 0, 8, 0, 0, 0, 12, 0, 0, 0, 15, 0, 128, 128, 256, 256,
    /* 4663 */ 257, 256, 1024, 0, 16777216, 0, 0, 4, 256, 1024, 65536, 0, 1536, 1792, 0, 0, 32768, 196608, 0, 8192,
    /* 4683 */ 8392704, 0, 0, 32768, 524288, 0, 1073741824, 0, 0, 32768, 33554432, 0x80000000, 0, 0, 32, 32, 524288, 32,
    /* 4701 */ 96, 96, 0, 0, 0x80000000, 0, 1073741824, 96, 96, 96, 96, 262144, 128, 128, 0, 0, 0, 128, 0, 0, 2048,
    /* 4722 */ 2048, 2048, 2048, 12288, 65536, 524288, 1048576, 64, 64, 96, 96, 64, 524288, 64, 64, 64, 96, 64, 524288,
    /* 4741 */ 96, 2097216, 0, 64, 524288, 96, 0, 8, 2048, 268435456, 536870912, 0, 268435456, 536870912, 0, 0, 0, 576,
    /* 4759 */ 536936448, 0, 0, 0, 999, 29619200, 0, 16, 16, 16, 16, 28, 2097552, 2, 536936448, 16, 16, 16, 262160, 16,
    /* 4779 */ 20, 48, 80, 536936448, 20, 16, 48, 16, 20, 560, 48, 2097680, 528, 3146256, 2097680, 1048592, 16, 2, 0, 4,
    /* 4799 */ 8, 262144, 262144, 0, 0x80000000, 0, 0, 0, 12288, 3146256, 2097680, 16, 16, 112, 48, 17, 21, 16, 16, 17,
    /* 4819 */ 17, 24, 3145728, 0, 0, 32, 1073741825, 0, 163577856, 17, 528, 528, 3145744, 1048592, 0, 528, 16, 16, 20,
    /* 4838 */ 21, 21, 528, 2097168, 1049104, 528, 131088, 524304, 1048592, 2097168, 2097168, 2097168, 268435472, 16,
    /* 4852 */ 16, 20, 16, 2228784, 2228784, 2228784, 2228784, -161430188, -161429676, -161429676, -161430188,
    /* 4863 */ -161429680, -161430188, -161430188, -161429680, -161429676, -161429676, -160905388, -161429676,
    /* 4871 */ -161429676, -161429676, -161429676, -161349072, -161347792, -161349072, -161349072, -161347728,
    /* 4879 */ -161347728, -161347728, -161347728, -161298572, -161298576, -160299088, -161298576, -161298572,
    /* 4887 */ -161298572, -161298572, -161298572, -160774288, -160299084, -161298572, -160774284, -161298572,
    /* 4895 */ -161298572, 0, 0, 49152, 0, 0, 58624, 0, 0, 65536, 81920, 53, 146804757, 146812949, 146862101, 146863389,
    /* 4911 */ 146863389, 146863389, 146863389, 146863421, 146863389, 146863421, -161429740, -161429676, -161349072,
    /* 4920 */ -161429675, -161349072, -161349072, -161347728, -161349072, -161349072, -161349072, -161349072,
    /* 4928 */ -161429676, -160905388, -161298572, -161298572, -18860267, -160774284, -18729163, 0, 0, 131072, 139264,
    /* 4939 */ 0, 0, 0, 50331648, 0, 0, 0, 58720256, 16, 262144, 0, 0, 4, 8, 0, 0, 0, 24, 0, 0, 1, 2, 4, 50331648, 0, 0,
    /* 4965 */ 159383552, 0, 0, 0, 1536, 0x80000000, 142606336, 0, 8192, 0, 0, 0, 4096, 0, 0, 0, 243269632, 0, 0, 1, 6,
    /* 4986 */ 32, 64, 2, 131072, 16777216, 134217728, 2048, 0, 0, 32, 32768, 524288, 2097152, 8388608, 16777216,
    /* 5001 */ 0x80000000, 0, 0, 32, 384, 0, 131072, 32768, 0, 0, 233280, 7864320, 0, 1073741824, 32768, 32768, 131072,
    /* 5018 */ 16777216, 268435456, 0, 0, 32768, 1073774592, 1081408, 131328, 131072, 164096, 0, 0, 0, 32768, 0, 0, 0,
    /* 5035 */ 2048, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 4, 0, 0, 0, 6, 96, 16777216, 1073741824, 2621440, 0, 0, 235712,
    /* 5060 */ 0, 0, 339968, 0, 0, 495424, 1862270976, 0, 0, 0, 131072, 0, 0, 0, 16384, 0, 0, 0, 32, 0, 0, 0, 63,
    /* 5083 */ 1091797088, 1226014816, 1091797088, 1091799136, 1091799136, 1091799136, 1158908000, 100665360, 100665360,
    /* 5092 */ 100665360, 100665360, 1091799136, -2046818288, 1091799136, -2044196848, 1091799136, 1091799136,
    /* 5100 */ 1091799136, 1091799136, 1091803360, 1158908001, 1192462432, 1192462432, 1192462448, 1200851040,
    /* 5108 */ 1192462448, 1192462448, 1192462448, 1192462448, 1200851056, 1091799393, 1200851056, 1200851056,
    /* 5116 */ 1192462448, 1870368576, 1870630720, 1870630720, 1870630720, 1870630720, 1870647104, 1870647104,
    /* 5124 */ 1870647104, 1870630736, 1870630740, 1870630740, 1870638932, 1870638932, 1870638932, 1870638933,
    /* 5132 */ 1870630736, 1870630736, 1879019376, 1879019376, 1870638933, 1870638964, 1870638932, 1870638932,
    /* 5140 */ 1870630740, 1879019376, 1879019380, 0, 0, 605503, 1066401792, 0, 0, 2097152, 8388608, 268435456,
    /* 5152 */ 1073741824, 8, 1073774592, 1073807360, 0, 32832, 1048576, 131328, 0, 229440, 1090519040, 0, 0, 0, 77824,
    /* 5167 */ 0, 231488, 0, 0, 1, 14, 16, 1157627904, 1191182336, 0, 9437184, 0, 1048576, 0, 0, 1048576, 1048576,
    /* 5184 */ 2097152, 4194304, 251658240, 536870912, 1073741824, 0, 231744, 0, 0, 1, 16, 32, 0, 495424, 7864320,
    /* 5199 */ 1862270976, 0, 511808, 0, 0, 0, 131584, 1862270976, 1862270976, 1862270976, 16252928, 0, 150994944, 2048,
    /* 5213 */ 100663296, -1073741824, 0, 0, 1, 4, 0, 0, 6144, 0, 0, 0, 262144, 0, 0, 2048, 2048, 2048, 0, 0, 3584,
    /* 5234 */ 65536, 524288, 1048576, 2097152, 4194304, 67108864, 134217728, 536870912, 262144, 1073741824, 0, 0, 1,
    /* 5247 */ 64, 128, 3584, 16384, 3145728, 67108864, 134217728, 64, 256, 3584, 65536, 262144, 524288, 1048576,
    /* 5261 */ 2097152, 67108864, 1073741824, 0, 0, 8192, 1073741824, 1073741824, 1073741824, 0, 0, 1, 128, 512, 2048,
    /* 5276 */ 0, 83886080, 117440512, 0, 0, 4194304, 117440512, 134217728, 536870912, 1073741824, 0, 0, 524288,
    /* 5289 */ 2097152, 1073741824, 0, 0, 262144, 524288, 2097152, 67108864, 1073741824, 1536, 65536, 524288, 2097152,
    /* 5302 */ 0, 0, 1, 1024, 0, 0, 1, 4032, 3162112, 2080374784, 262144, 2097152, 1073741824, 0, 0, 2097152, 268435456,
    /* 5319 */ 0, 0, 0, 9216, 33554432, 536870912, 50331649, 0, 32, 512, 65536, 0, 0, 2048, 100663296, 134218240,
    /* 5335 */ 1050624, 512, 134349312, 1275208192, 1275208192, 1275208192, 1275208192, 1275208200, 1275208200,
    /* 5344 */ -869654016, 1275208200, -869654016, -869654016, -869654016, -869654016, 4194312, 4194312, 4194312,
    /* 5353 */ 4194312, 541065224, 4194312, 4194312, 1275208192, 4194344, 1275208200, 4203820, -869654016, -869654016,
    /* 5363 */ 1279402504, -869654016, -869654016, 1279402504, 1279402504, 1279402504, 1279402504, 1824782310,
    /* 5371 */ 2143549415, 2143549415, 2143549415, 2143549415, 2143549423, 2143549423, 2143549423, 2143549423, 0, 0,
    /* 5381 */ 1050624, 0, 0, 1, 16777216, 0, 0, 16777216, 134217728, 0x80000000, 1275068416, 0, 0, 512, 131072, 0, 0,
    /* 5398 */ 40, 0, 0, 0, 1048576, 0, 0, 520, 520, 0, 0, 2760704, 998, 12841984, 1811939328, 0, 0, 2097152,
    /* 5416 */ 1073741824, 8192, 0, 0, 260, 512, 0, 29619200, 2113929216, 0, 0, 0, 3145728, 8192, 33554432, 67108864,
    /* 5432 */ 134217728, 1073741824, 0, 0, 2048, 1048576, 0, 0, 8, 4194304, 0, 0, 256, 1024, 65536, 0, 0, 268435456, 0,
    /* 5451 */ 0, 2621440, -1073741824, 0, 0, 4194304, 4096, 0, 0, 0, 300, 0, 0, 1, 25165824, 33554432, 268435456, 998,
    /* 5469 */ 259072, 4194304, 8388608, 4096, 0, 0, -2046820352, 0, 0, 0, 65536, 0, 0, 0, 1024, 0, 0, 0, 256, 0, 0, 0,
    /* 5491 */ 384, 0, 67108864, 134217728, 1610612736, 0, 0, 4194432, 3840, 0, 999, 25165824, 100663296, 402653184,
    /* 5505 */ 1610612736, 0, 0, 2, 8, 16, 32, 0, 999, 259072, 4194304, 25165824, 100663296, 0, 1007, 1007, 1007, 0, 40,
    /* 5524 */ 0, 0, 524288, 2097152, 0x80000000, 0, 0, 2097152, 0, 0, 0, 150528, 0, 0, 102, 384, 512, 5120, 5120, 8192,
    /* 5544 */ 16384, 229376, 8388608, 536870912, 8388608, 67108864, 134217728, 536870912, 8192, 16384, 229376,
    /* 5555 */ 25165824, 33554432, 402653184, 1, 102, 384, 512, 1048576, 4096, 1048576, 8388608, 33554432, 134217728,
    /* 5568 */ 0x80000000, 110, 110, 0, 0, 2, 56, 64, 896, 8192, 131072, 33554432, 134217728, 0, 0, 0, 4333568,
    /* 5585 */ 33554432, 402653184, 0, 0, 0, 4194304, 0, 0, 33554432, 402653184, 536870912, 0, 0, 8388608, 134217728,
    /* 5600 */ 0x80000000, 0, 0, 0, 104, 104, 104, 0, 131072, 0, 8, 0, 512, 0, 536870912, 9216, 0, 0, 6, 32, 64, 256,
    /* 5622 */ 33554432, 268435456, 536870912, 0, 0, 16252928, 0, 0, 0, 148480, 8388608, 536870912, 0, 0, 3, 240, 19456,
    /* 5639 */ 262144, 0, 8, 8, 8, 0, 0, 2, 16384, 32768, 1048576, 2097152, 4194304, 117440512, 64, 256, 1024, 229376,
    /* 5657 */ 25165824, 25165824, 268435456, 0, 0, 0, 8388608, 0, 0, 0, 8192, 0, 33554432, 229376, 25165824, 268435456,
    /* 5673 */ 536870912, 4, 256, 1024, 98304, 131072, 16777216, 0, 262144, 2048, 0, 0, 16777216, 268435456, 0, 65536,
    /* 5689 */ 268435456, 0, 0, 8, 124160, 256, 65536, 0, 0, 8, 8388608, 0, 512, 536870912, 0, 0, 33554432, 1073741824,
    /* 5707 */ 0, 0, 1864, 0, 4100, 0, 0, 0, 16777216, 0, 0x80000000, 0, 67108864, 0, 32768, 131072, 0, 512, 139264,
    /* 5726 */ 134348800, 134348800, 0, 1049088, 8192, 1049088, 12845065, 12845065, 12845065, 12845065, 5505537,
    /* 5737 */ 147193865, 5505537, 5505537, 5505537, 5505537, 5571073, 5505537, 5587457, 5587457, 5591557, 5587465,
    /* 5748 */ 5587457, 147202057, 5587457, 5587457, 13894145, 5591557, 5587457, 13894153, 81003049, 13894153, 13894153,
    /* 5759 */ 13894153, 13894153, -1898699781, -1881791493, -1881791493, -1881791493, -1881791493, 0, 0, 9, 4456448,
    /* 5770 */ 8388608, 8388608, 4096, 4096, 4096, 1, 5505024, 0, 0, 9, 0, 0, 142606336, 0, 0, 12, 13, 82432, 0, 0, 0,
    /* 5791 */ 33554432, 0, 0, 86528, 9, 0, 0, 14, 524288, 536870912, 0, 9, 8388608, 8388608, 0, 0, 5, 5505024,
    /* 5809 */ -1904214016, 0, 0, 24, 282624, 0, 59, 140224, -1887436800, 0, 0, 0, 67108864, 0, 59, 140224, 5505024,
    /* 5826 */ -1887436800, 8192, 131072, 1048576, 8388608, 33554432, -2013265920, 33554432, -2013265920, 0, 0, 30,
    /* 5838 */ 524288, 0, 2048, 524288, 0, 96, 96, 64, 64, 64, 524288, 524288, 524288, 524288, 96, 96, 96, 64, 0, 0, 0,
    /* 5859 */ 64, 0, 0, 65536, 16384, 0, 0, 32, 1, 64, 384, 8192, 1048576, 33554432, 134217728, 0x80000000, 0, 64,
    /* 5877 */ 2048, 524288, 67108864, 536870912, 8192, 131072, 1048576, 33554432, 67108864, 0, 2048, 524288,
    /* 5889 */ 1073741824, 0, 0, 134217728, 0x80000000, 0x80000000, 2621440, 0, 0, 0, 58368, 0, 32, 0, 524288, 2097152,
    /* 5905 */ 268435456, 0, 16384, 536870912, 1073741824, 0, 8396800, 4194304, 134217728, 268435456, 1073741824,
    /* 5916 */ 0x80000000, 0x80000000, 0, -2113929216, 0, 2, 16384, 4194304, 0x80000000, 268567040, 16384, 16777216,
    /* 5928 */ 16384, 131072, 33554432, 0, 0, 134217728, 0, 8396800, 0, 16384, 524288, 16384, 16384, 2113544, 2113544,
    /* 5943 */ 2113544, 2113544, 68423701, 85200917, 68423701, 68423701, 72618005, 68423701, 68423701, 68423701,
    /* 5953 */ 68423701, 68489237, -2079059883, 68423701, -2079059883, -2079059883, 68425749, 69488664, 68423703,
    /* 5962 */ 69488664, 85200919, 69488664, 69488664, 70537240, 69488664, 69488664, 69488664, 69488664, 70537244,
    /* 5972 */ 70537245, 70537245, 70537245, -2076946339, -2076946339, 70537245, 70537245, 70537245, 70537245, 70539293,
    /* 5982 */ 91577375, -2022351809, -2022351809, -2022351681, -2022351681, -2022351809, -2022351809, -2022351809,
    /* 5990 */ -2022351809, 0, 256, 32768, 65536, 16777216, 0x80000000, 266240, 1048576, 67108864, 0, 0, 134348800,
    /* 6003 */ 1049088, 270532608, 1049088, 1049088, 1049088, 1049088, 83886080, 0, 0, 5242880, 0, 7, 0, 0, 536870912,
    /* 6018 */ 1073741824, 0, -2080374784, -2080374784, 268288, 0, 0, 1073743872, 268435968, 229376, 268435968,
    /* 6029 */ 268435968, 0, 23, 0, 0, 32, 50331648, 0, 28, 29, 0, 0, 1275068416, 0, 0, 0, 867391, 0, 284672, 0, 0, 40,
    /* 6051 */ 0, 520, 0, 31, 351232, 7340032, 50331648, 0x80000000, 0, 1, 2, 16, 32, 64, 83886080, 0, 0, 0, 318767104,
    /* 6070 */ -2030043136, 0, 0, 0, 536870912, 0, 0, 63, 351232, 7340032, -2030043136, 0, 64, 256, 32768, 65536,
    /* 6086 */ 4194304, 5, 1048576, 0, 0, 41, 75497472, 0, 15, 32, 3072, 16384, 65536, 7340032, 50331648, 0, 6, 0, 0,
    /* 6105 */ 44, 0, 14, 1024, 65536, 6291456, 50331648, 0x80000000, 1, 6, 2097152, 4194304, 0, 0, 0, 16, 0, 0, 0, 21,
    /* 6125 */ 32768, 16777216, 0, 0, 59, 9152, 4, 2097152, 4194304, 16777216, 0, 128, 268435968, 1073743872, 268436032,
    /* 6140 */ 4, 2097152, 4194304, 50331648, 0, 32, 128, 512, 2048, 524288, 268435456, 536870912, 1073741824, 0, 4096,
    /* 6155 */ 4194304, 268435456, 0, 1, 2, 48, 64, 128, 268436032, 268436032, 268436288, 268436288, 268436288,
    /* 6168 */ 268436288, -1879046336, 256, 536871168, 256, 256, 256, 256, 256, 268436288, 384, 268436288, -1879046336,
    /* 6181 */ 268444480, -1879046336, -1879046334, 1073744256, -1879046334, -1879046334, 268444480, 268436288,
    /* 6189 */ 268436289, 268436288, -1879046326, -1879046334, -1879046334, -1879046326, 268444480, -1845491902,
    /* 6197 */ -1878784182, 268444480, 268444480, 268444480, 268444480, 268436288, 268444480, 268444480, 268444480,
    /* 6206 */ 2083540929, 2100318145, 2100318145, 2100318149, 2100318149, 2100318145, 2100318145, 2100318145,
    /* 6214 */ 2100318145, 2100318145, 2100318145, 2100326337, 2100326337, 0, 0, 229376, 0, 0, 64, 64, 64, 64, 0, 832,
    /* 6230 */ 0, 0, 0, 1073741824, 0, 0, 0, 1856, 0x80000000, 0, 1, 2, 112, 128, 0, 2432, 0, 0, 64, 256, 1536, 65536,
    /* 6252 */ 262144, 524288, 1, 19939328, 0, 0, 64, 1048576, 256, 0, 0, 4032, 19939328, 2080374784, 0, 0, 0,
    /* 6269 */ 1224736768, 0, 19947520, 0, 0, 0, 8, 0, 301989888, 0, 262144, 3584, 16384, 3145728, 2080374784, 1,
    /* 6285 */ 19922944, 0, 0, 128, 128, 128, 128, 8, 0, 33554432, 262144, 0, 4, 0, 1, 6, 96, 256, 512, 1024, 4096,
    /* 6306 */ 8192, 229376, 25165824, 33554432, 67108864, 402653184, 536870912, 1536, 0, 0, 8, 32, 64, 384, 8192,
    /* 6321 */ 131072, 33554432, 8, 33554432, 262144, 0, 0, 128, 3072, 16384, 3145728, 16777216, 67108864, 134217728,
    /* 6335 */ 805306368, 1073741824, 0, 0, 3145728, 16777216, 134217728, 536870912, 0, 2048, 524288, 536870912,
    /* 6347 */ 1073741824, 2048, 3145728, 16777216, 536870912, 1073741824, 0, 0, 3145728, 536870912, 1073741824, 0,
    /* 6359 */ 2097152, 16777216, 1073741824, 0, 0, 8192, 8192, 8192, 0, 8192, 0, 536870912, 0, 16777216, 0, 16777216,
    /* 6375 */ 16777216, 0, 0, 0, 29, 2097152, 4194304, 8388608, 16777216, 16777216, 16777216, 16777216, 67108864, 0, 0,
    /* 6390 */ 300, 4203520, 64, 0, 2, 0, 1, 12, 1024, 524288, 1024, 1024, 128, 131072, 0, 134218752, 0, 0, 8, 2048, 16,
    /* 6411 */ 8192, 66048, 0, 0, 0, 19947520, 0, 268500992, 4243456, 0, 1, 12, 134217728, 536870912, 0, 0, 0, 16, 8192,
    /* 6430 */ 0, 1, 14, 32, 1024, 1048588, 0, 0, 4096, 4096, 0, 0, 0, 512, 0, 0, 68157440, 4243456, 4096, 0, 4096,
    /* 6451 */ 4096, 1124073474, 1124073472, 1124073472, 1124073488, 1124073472, 1124073472, 1258292224, 1124073472,
    /* 6460 */ 1124073472, 1124073472, 1124073472, 1392574464, 12289, 1124073472, 12289, 12289, 25178369, 12289, 12289,
    /* 6471 */ 12289, 12289, 16789505, 12289, 12289, 1098920193, 12289, 12289, 1073754113, 12289, 1098920193,
    /* 6482 */ 1098920193, 1132474625, 1132474625, 1132474625, 1124085761, 1132474625, 1258304513, 1124085761,
    /* 6490 */ 1124085761, 1124085777, 1124085761, 1132474625, 1098920209, 1132474625, 1132474625, 1400975617,
    /* 6498 */ 1593916467, 2132360255, 2132360255, 2132622399, 2132622399, 2132360255, 2132360255, 2132360255,
    /* 6506 */ 2132360255, 2132360255, 2132360255, 2140749119, 2140749119, 0, 0, 131072, 1024, 134217728, 0, 0, 384,
    /* 6519 */ 8192, 0, 0, 32, 64, 128, 1024, 2048, 16384, 262144, 65536, 268435456, 49152, 0, 0, 0, 1024, 2048,
    /* 6537 */ 3145728, 0, 184549376, 0, 0, 1024, 2097152, 0, 0, 0, 12545, 25165824, 0, 1, 14, 1024, 4096, 13313, 0, 0,
    /* 6557 */ 0, 1024, 134217728, 0, 8, 0, 66048, 12561, 0, 78081, 327155712, 80947, 520093696, 1073741824, 0, 1, 30,
    /* 6574 */ 32, 1024, 2048, 77824, 524288, 1048576, 100663296, 134217728, 805306368, 1058013184, 1073741824, 0, 0,
    /* 6587 */ 1536, 96, 0, 268435456, 49152, 0, 1, 128, 3584, 16384, 19922944, 2080374784, 0, 12288, 0, 0, 0, 1536,
    /* 6605 */ 1024, 1, 18, 32, 1024, 2048, 77824, 100663296, 134217728, 268435456, 1073741824, 0, 0, 1048576,
    /* 6619 */ 805306368, 0, 0, 2048, 3145728, 536870912, 0, 288, 8388608, 0, 0, 256, 65536, 2, 16, 32, 1024, 2048,
    /* 6637 */ 2048, 12288, 65536, 33554432, 134217728, 1073741824, 14, 16, 32, 1024, 1048576, 33554432, 134217728,
    /* 6650 */ 805306368, 1073741824, 0, 327680, 0, 0, 2048, 134217728, 0, 8, 65536, 0, 65536, 0, 67108864, 0, 0, 0,
    /* 6668 */ 503616, 14, 16, 1024, 4096, 8192, 65536, 8192, 65536, 524288, 33554432, 134217728, 536870912, 0, 256,
    /* 6683 */ 8388608, 0, 524288, 0, 8388608, 1, 2, 1024, 4096, 8192, 0, 0, 24576, 0, 0, 0, 128, 2048, 65536,
    /* 6702 */ 134217728, 0, 0, 2, 4, 16, 32, 256, 1024, 8192, 33554432, 0, 0, 0, 524288, 0, 0, 0, 605247, 1058013184,
    /* 6722 */ 4096, 65536, 524288, 134217728, 536870912, 0, 64, 0, 134217728, 0, 12, 536870912, 0, 1, 134217728, 0, 2,
    /* 6739 */ 4, 64, 256, 1024, 4096, 8192, 16384, 131072, 0, 1, 0, 64, 0, 2048, 1, 4, 8, 536870912, 0, 0, 0, 262144,
    /* 6761 */ 0, 256, 0, 256, 1536, 65536, 524288, 1048576, 0, 0, 0, 110, 4, 8, 536870912, 262144, 512, 9476,
    /* 6779 */ 1073742336, 0, 8, 32, 512, 4096, 8192, 16384, 131072, 0, 1048576, 0, 2, 4, 256, 1024, 0, 0, 8192, 8192,
    /* 6799 */ 137363456, 137363456, 100663296, 0, 0, 0, 331776, 66, 66, 0, 1024, 0, 137363456, 66, 1024, 4100, 1024, 0,
    /* 6817 */ 1024, 25165824, 26214400, 92274688, 92274688, 25165952, 92274688, 25165824, 25165824, 92274688, 25165824,
    /* 6828 */ 25165824, 25165824, 92274688, 93323264, 92274688, 92274688, 92274688, 92274720, 93323264, 100680704,
    /* 6838 */ 25165890, 100680704, 100680704, 100680704, 100680704, 100713472, 117457920, 117457920, 100721664,
    /* 6847 */ 117588992, 100721664, 100721664, 25165890, 100721920, 100721928, 117588992, 100853000, 125977600,
    /* 6856 */ 100721928, 100721928, 100721928, 100787464, 125846528, 126895104, 125846528, 125846528, 125977600,
    /* 6865 */ 125846528, 125846528, 125846560, 125977600, 127026176, 125977600, 125977600, 125977600, 125977600,
    /* 6874 */ 125846528, 125977600, 127026176, 127026176, 281843, 5524723, 5524723, 5524723, 5524723, 1330419, 1330419,
    /* 6885 */ 281843, 281843, 281843, 281843, 1330419, 5524723, 5524723, 39079155, 72633587, 5524723, 92556531,
    /* 6896 */ 93605107, 93605107, 127290611, 127290611, 97799411, 127290611, 131484915, 0, 2, 4, 50331648, 1073741824,
    /* 6908 */ 0, 0, 1024, 65536, 262144, 0, 50176, 50331648, 0, 2, 8, 32, 384, 8192, 131072, 189696, 0, 0, 0, 4036, 0,
    /* 6929 */ 19456, 262144, 0, 0, 9476, 512, 150528, 0, 0, 0, 12289, 0, 0, 0, 57344, 0, 0, 12305, 0, 112, 128, 3072,
    /* 6951 */ 16384, 262144, 0, 0, 4096, 8192, 131072, 0, 0, 128, 1024, 2048, 262144, 0, 0, 17408, 0, 16, 64, 128,
    /* 6971 */ 262144, 0, 0, 1, 2, 16, 64, 0, 16, 64, 128, 0, 2, 560, 2098064
  ];

  var TOKEN =
  [
    "EPSILON",
    "PragmaContents",
    "DirCommentContents",
    "DirPIContents",
    "CDataSection",
    "Wildcard",
    "EQName",
    "URILiteral",
    "IntegerLiteral",
    "DecimalLiteral",
    "DoubleLiteral",
    "StringLiteral",
    "PredefinedEntityRef",
    "'\"\"'",
    "EscapeApos",
    "ElementContentChar",
    "QuotAttrContentChar",
    "AposAttrContentChar",
    "PITarget",
    "NCName",
    "QName",
    "S",
    "S",
    "CharRef",
    "CommentContents",
    "EOF",
    "'!'",
    "'!='",
    "'\"'",
    "'#'",
    "'#)'",
    "'$'",
    "'%'",
    "''''",
    "'('",
    "'(#'",
    "'(:'",
    "')'",
    "'*'",
    "'*'",
    "'+'",
    "','",
    "'-'",
    "'-->'",
    "'.'",
    "'..'",
    "'/'",
    "'//'",
    "'/>'",
    "':'",
    "':)'",
    "'::'",
    "':='",
    "';'",
    "'<'",
    "'<!--'",
    "'</'",
    "'<<'",
    "'<='",
    "'<?'",
    "'='",
    "'>'",
    "'>='",
    "'>>'",
    "'?'",
    "'?>'",
    "'@'",
    "'NaN'",
    "'['",
    "']'",
    "'after'",
    "'all'",
    "'allowing'",
    "'ancestor'",
    "'ancestor-or-self'",
    "'and'",
    "'any'",
    "'append'",
    "'array'",
    "'as'",
    "'ascending'",
    "'at'",
    "'attribute'",
    "'base-uri'",
    "'before'",
    "'boundary-space'",
    "'break'",
    "'by'",
    "'case'",
    "'cast'",
    "'castable'",
    "'catch'",
    "'check'",
    "'child'",
    "'collation'",
    "'collection'",
    "'comment'",
    "'constraint'",
    "'construction'",
    "'contains'",
    "'content'",
    "'context'",
    "'continue'",
    "'copy'",
    "'copy-namespaces'",
    "'count'",
    "'decimal-format'",
    "'decimal-separator'",
    "'declare'",
    "'default'",
    "'delete'",
    "'descendant'",
    "'descendant-or-self'",
    "'descending'",
    "'diacritics'",
    "'different'",
    "'digit'",
    "'distance'",
    "'div'",
    "'document'",
    "'document-node'",
    "'element'",
    "'else'",
    "'empty'",
    "'empty-sequence'",
    "'encoding'",
    "'end'",
    "'entire'",
    "'eq'",
    "'every'",
    "'exactly'",
    "'except'",
    "'exit'",
    "'external'",
    "'first'",
    "'following'",
    "'following-sibling'",
    "'for'",
    "'foreach'",
    "'foreign'",
    "'from'",
    "'ft-option'",
    "'ftand'",
    "'ftnot'",
    "'ftor'",
    "'function'",
    "'ge'",
    "'greatest'",
    "'group'",
    "'grouping-separator'",
    "'gt'",
    "'idiv'",
    "'if'",
    "'import'",
    "'in'",
    "'index'",
    "'infinity'",
    "'inherit'",
    "'insensitive'",
    "'insert'",
    "'instance'",
    "'integrity'",
    "'intersect'",
    "'into'",
    "'is'",
    "'item'",
    "'json'",
    "'json-item'",
    "'key'",
    "'language'",
    "'last'",
    "'lax'",
    "'le'",
    "'least'",
    "'let'",
    "'levels'",
    "'loop'",
    "'lowercase'",
    "'lt'",
    "'minus-sign'",
    "'mod'",
    "'modify'",
    "'module'",
    "'most'",
    "'namespace'",
    "'namespace-node'",
    "'ne'",
    "'next'",
    "'no'",
    "'no-inherit'",
    "'no-preserve'",
    "'node'",
    "'nodes'",
    "'not'",
    "'object'",
    "'occurs'",
    "'of'",
    "'on'",
    "'only'",
    "'option'",
    "'or'",
    "'order'",
    "'ordered'",
    "'ordering'",
    "'paragraph'",
    "'paragraphs'",
    "'parent'",
    "'pattern-separator'",
    "'per-mille'",
    "'percent'",
    "'phrase'",
    "'position'",
    "'preceding'",
    "'preceding-sibling'",
    "'preserve'",
    "'previous'",
    "'processing-instruction'",
    "'relationship'",
    "'rename'",
    "'replace'",
    "'return'",
    "'returning'",
    "'revalidation'",
    "'same'",
    "'satisfies'",
    "'schema'",
    "'schema-attribute'",
    "'schema-element'",
    "'score'",
    "'self'",
    "'sensitive'",
    "'sentence'",
    "'sentences'",
    "'skip'",
    "'sliding'",
    "'some'",
    "'stable'",
    "'start'",
    "'stemming'",
    "'stop'",
    "'strict'",
    "'strip'",
    "'structured-item'",
    "'switch'",
    "'text'",
    "'then'",
    "'thesaurus'",
    "'times'",
    "'to'",
    "'treat'",
    "'try'",
    "'tumbling'",
    "'type'",
    "'typeswitch'",
    "'union'",
    "'unique'",
    "'unordered'",
    "'updating'",
    "'uppercase'",
    "'using'",
    "'validate'",
    "'value'",
    "'variable'",
    "'version'",
    "'weight'",
    "'when'",
    "'where'",
    "'while'",
    "'wildcards'",
    "'window'",
    "'with'",
    "'without'",
    "'word'",
    "'words'",
    "'xquery'",
    "'zero-digit'",
    "'{'",
    "'{{'",
    "'{|'",
    "'|'",
    "'||'",
    "'|}'",
    "'}'",
    "'}}'"
  ];
}
});
// End
