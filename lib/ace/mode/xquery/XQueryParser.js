// This file was generated on Fri Jul 12, 2013 09:43 (UTC+01) by REx v5.25 which is Copyright (c) 1979-2013 by Gunther Rademacher <grd@gmx.net>
// REx command line: XQueryParser.ebnf -ll 2 -backtrack -tree -javascript -a xqlint

                                                            // line 2 "XQueryParser.ebnf"
                                                            /* ***** BEGIN LICENSE BLOCK *****
                                                             * Distributed under the BSD license:
                                                             *
                                                             * Copyright (c) 2010, Ajax.org B.V.
                                                             * All rights reserved.
                                                             *
                                                             * Redistribution and use in source and binary forms, with or without
                                                             * modification, are permitted provided that the following conditions are met:
                                                             *     * Redistributions of source code must retain the above copyright
                                                             *       notice, this list of conditions and the following disclaimer.
                                                             *     * Redistributions in binary form must reproduce the above copyright
                                                             *       notice, this list of conditions and the following disclaimer in the
                                                             *       documentation and/or other materials provided with the distribution.
                                                             *     * Neither the name of Ajax.org B.V. nor the
                                                             *       names of its contributors may be used to endorse or promote products
                                                             *       derived from this software without specific prior written permission.
                                                             *
                                                             * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
                                                             * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
                                                             * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
                                                             * DISCLAIMED. IN NO EVENT SHALL AJAX.ORG B.V. BE LIABLE FOR ANY
                                                             * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
                                                             * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
                                                             * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
                                                             * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
                                                             * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
                                                             * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
                                                             *
                                                             * ***** END LICENSE BLOCK ***** */

                                                            define(function(require, exports, module){
                                                            var XQueryParser = exports.XQueryParser = function XQueryParser(string, parsingEventHandler)
                                                            {
                                                              init(string, parsingEventHandler);
                                                            // line 40 "XQueryParser.js"
  var self = this;

  this.ParseException = function(b, e, s, o, x)
  {
    var
      begin = b,
      end = e,
      state = s,
      offending = o,
      expected = x;

    this.getBegin = function() {return begin;};
    this.getEnd = function() {return end;};
    this.getState = function() {return state;};
    this.getExpected = function() {return expected;};
    this.getOffending = function() {return offending;};

    this.getMessage = function()
    {
      return offending < 0 ? "lexical analysis failed" : "syntax error";
    };
  };

  function init(string, parsingEventHandler)
  {
    eventHandler = parsingEventHandler;
    input = string;
    size = string.length;
    reset(0, 0, 0);
  }

  this.getInput = function()
  {
    return input;
  };

  function reset(l, b, e)
  {
            b0 = b; e0 = b;
    l1 = l; b1 = b; e1 = e;
    l2 = 0;
    end = e;
    ex = -1;
    memo = {};
    eventHandler.reset(input);
  }

  this.getOffendingToken = function(e)
  {
    var o = e.getOffending();
    return o >= 0 ? XQueryParser.TOKEN[o] : null;
  };

  this.getExpectedTokenSet = function(e)
  {
    var expected;
    if (e.getExpected() < 0)
    {
      expected = XQueryParser.getTokenSet(- e.getState());
    }
    else
    {
      expected = [XQueryParser.TOKEN[e.getExpected()]];
    }
    return expected;
  };

  this.getErrorMessage = function(e)
  {
    var tokenSet = this.getExpectedTokenSet(e);
    var found = this.getOffendingToken(e);
    var prefix = input.substring(0, e.getBegin());
    var lines = prefix.split("\n");
    var line = lines.length;
    var column = lines[line - 1].length + 1;
    var size = e.getEnd() - e.getBegin();
    return e.getMessage()
         + (found == null ? "" : ", found " + found)
         + "\nwhile expecting "
         + (tokenSet.length == 1 ? tokenSet[0] : ("[" + tokenSet.join(", ") + "]"))
         + "\n"
         + (size == 0 || found != null ? "" : "after successfully scanning " + size + " characters beginning ")
         + "at line " + line + ", column " + column + ":\n..."
         + input.substring(e.getBegin(), Math.min(input.length, e.getBegin() + 64))
         + "...";
  };

  this.parse_XQuery = function()
  {
    eventHandler.startNonterminal("XQuery", e0);
    lookahead1W(274);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | EOF | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' |
                                    // '..' | '/' | '//' | ';' | '<' | '<!--' | '<?' | '@' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
    whitespace();
    parse_Module();
    shift(25);                      // EOF
    eventHandler.endNonterminal("XQuery", e0);
  };

  function parse_Module()
  {
    eventHandler.startNonterminal("Module", e0);
    switch (l1)
    {
    case 274:                       // 'xquery'
      lookahead2W(198);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'encoding' | 'eq' | 'except' | 'ge' | 'gt' |
                                    // 'idiv' | 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' |
                                    // 'to' | 'treat' | 'union' | 'version' | '|' | '||'
      break;
    default:
      lk = l1;
    }
    if (lk == 64274                 // 'xquery' 'encoding'
     || lk == 134930)               // 'xquery' 'version'
    {
      parse_VersionDecl();
    }
    lookahead1W(274);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | EOF | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' |
                                    // '..' | '/' | '//' | ';' | '<' | '<!--' | '<?' | '@' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
    switch (l1)
    {
    case 182:                       // 'module'
      lookahead2W(193);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'namespace' | 'ne' |
                                    // 'or' | 'to' | 'treat' | 'union' | '|' | '||'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 94390:                     // 'module' 'namespace'
      whitespace();
      parse_LibraryModule();
      break;
    default:
      whitespace();
      parse_MainModule();
    }
    eventHandler.endNonterminal("Module", e0);
  }

  function parse_VersionDecl()
  {
    eventHandler.startNonterminal("VersionDecl", e0);
    shift(274);                     // 'xquery'
    lookahead1W(116);               // S^WS | '(:' | 'encoding' | 'version'
    switch (l1)
    {
    case 125:                       // 'encoding'
      shift(125);                   // 'encoding'
      lookahead1W(17);              // StringLiteral | S^WS | '(:'
      shift(11);                    // StringLiteral
      break;
    default:
      shift(263);                   // 'version'
      lookahead1W(17);              // StringLiteral | S^WS | '(:'
      shift(11);                    // StringLiteral
      lookahead1W(109);             // S^WS | '(:' | ';' | 'encoding'
      if (l1 == 125)                // 'encoding'
      {
        shift(125);                 // 'encoding'
        lookahead1W(17);            // StringLiteral | S^WS | '(:'
        shift(11);                  // StringLiteral
      }
    }
    lookahead1W(28);                // S^WS | '(:' | ';'
    whitespace();
    parse_Separator();
    eventHandler.endNonterminal("VersionDecl", e0);
  }

  function parse_LibraryModule()
  {
    eventHandler.startNonterminal("LibraryModule", e0);
    parse_ModuleDecl();
    lookahead1W(138);               // S^WS | EOF | '(:' | 'declare' | 'import'
    whitespace();
    parse_Prolog();
    eventHandler.endNonterminal("LibraryModule", e0);
  }

  function parse_ModuleDecl()
  {
    eventHandler.startNonterminal("ModuleDecl", e0);
    shift(182);                     // 'module'
    lookahead1W(61);                // S^WS | '(:' | 'namespace'
    shift(184);                     // 'namespace'
    lookahead1W(248);               // NCName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'last' | 'lax' | 'le' | 'let' |
                                    // 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery'
    whitespace();
    parse_NCName();
    lookahead1W(29);                // S^WS | '(:' | '='
    shift(60);                      // '='
    lookahead1W(15);                // URILiteral | S^WS | '(:'
    shift(7);                       // URILiteral
    lookahead1W(28);                // S^WS | '(:' | ';'
    whitespace();
    parse_Separator();
    eventHandler.endNonterminal("ModuleDecl", e0);
  }

  function parse_Prolog()
  {
    eventHandler.startNonterminal("Prolog", e0);
    for (;;)
    {
      lookahead1W(274);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | EOF | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' |
                                    // '..' | '/' | '//' | ';' | '<' | '<!--' | '<?' | '@' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
      switch (l1)
      {
      case 108:                     // 'declare'
        lookahead2W(212);           // S^WS | EOF | '!' | '!=' | '#' | '%' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' |
                                    // 'base-uri' | 'boundary-space' | 'cast' | 'castable' | 'collection' |
                                    // 'construction' | 'contains' | 'context' | 'copy-namespaces' | 'decimal-format' |
                                    // 'default' | 'div' | 'eq' | 'except' | 'ft-option' | 'function' | 'ge' | 'gt' |
                                    // 'idiv' | 'index' | 'instance' | 'integrity' | 'intersect' | 'is' | 'le' | 'lt' |
                                    // 'mod' | 'namespace' | 'ne' | 'option' | 'or' | 'ordering' | 'revalidation' |
                                    // 'to' | 'treat' | 'union' | 'updating' | 'variable' | '|' | '||'
        break;
      case 153:                     // 'import'
        lookahead2W(201);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'module' | 'ne' | 'or' |
                                    // 'schema' | 'to' | 'treat' | 'union' | '|' | '||'
        break;
      default:
        lk = l1;
      }
      if (lk != 42604               // 'declare' 'base-uri'
       && lk != 43628               // 'declare' 'boundary-space'
       && lk != 50284               // 'declare' 'construction'
       && lk != 53356               // 'declare' 'copy-namespaces'
       && lk != 54380               // 'declare' 'decimal-format'
       && lk != 55916               // 'declare' 'default'
       && lk != 72300               // 'declare' 'ft-option'
       && lk != 93337               // 'import' 'module'
       && lk != 94316               // 'declare' 'namespace'
       && lk != 104044              // 'declare' 'ordering'
       && lk != 113772              // 'declare' 'revalidation'
       && lk != 115353)             // 'import' 'schema'
      {
        break;
      }
      switch (l1)
      {
      case 108:                     // 'declare'
        lookahead2W(179);           // S^WS | '(:' | 'base-uri' | 'boundary-space' | 'construction' |
                                    // 'copy-namespaces' | 'decimal-format' | 'default' | 'ft-option' | 'namespace' |
                                    // 'ordering' | 'revalidation'
        break;
      default:
        lk = l1;
      }
      if (lk == 55916)              // 'declare' 'default'
      {
        lk = memoized(0, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2;
          try
          {
            try_DefaultNamespaceDecl();
            lk = -1;
          }
          catch (p1A)
          {
            lk = -2;
          }
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(0, e0, lk);
        }
      }
      switch (lk)
      {
      case -1:
        whitespace();
        parse_DefaultNamespaceDecl();
        break;
      case 94316:                   // 'declare' 'namespace'
        whitespace();
        parse_NamespaceDecl();
        break;
      case 153:                     // 'import'
        whitespace();
        parse_Import();
        break;
      case 72300:                   // 'declare' 'ft-option'
        whitespace();
        parse_FTOptionDecl();
        break;
      default:
        whitespace();
        parse_Setter();
      }
      lookahead1W(28);              // S^WS | '(:' | ';'
      whitespace();
      parse_Separator();
    }
    for (;;)
    {
      lookahead1W(274);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | EOF | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' |
                                    // '..' | '/' | '//' | ';' | '<' | '<!--' | '<?' | '@' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
      switch (l1)
      {
      case 108:                     // 'declare'
        lookahead2W(210);           // S^WS | EOF | '!' | '!=' | '#' | '%' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'collection' | 'contains' | 'context' | 'div' | 'eq' | 'except' |
                                    // 'function' | 'ge' | 'gt' | 'idiv' | 'index' | 'instance' | 'integrity' |
                                    // 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'option' | 'or' | 'to' |
                                    // 'treat' | 'union' | 'updating' | 'variable' | '|' | '||'
        break;
      default:
        lk = l1;
      }
      if (lk != 16492               // 'declare' '%'
       && lk != 48748               // 'declare' 'collection'
       && lk != 51820               // 'declare' 'context'
       && lk != 74348               // 'declare' 'function'
       && lk != 79468               // 'declare' 'index'
       && lk != 82540               // 'declare' 'integrity'
       && lk != 101996              // 'declare' 'option'
       && lk != 131692              // 'declare' 'updating'
       && lk != 134252)             // 'declare' 'variable'
      {
        break;
      }
      switch (l1)
      {
      case 108:                     // 'declare'
        lookahead2W(175);           // S^WS | '%' | '(:' | 'collection' | 'context' | 'function' | 'index' |
                                    // 'integrity' | 'option' | 'updating' | 'variable'
        break;
      default:
        lk = l1;
      }
      switch (lk)
      {
      case 51820:                   // 'declare' 'context'
        whitespace();
        parse_ContextItemDecl();
        break;
      case 101996:                  // 'declare' 'option'
        whitespace();
        parse_OptionDecl();
        break;
      default:
        whitespace();
        parse_AnnotatedDecl();
      }
      lookahead1W(28);              // S^WS | '(:' | ';'
      whitespace();
      parse_Separator();
    }
    eventHandler.endNonterminal("Prolog", e0);
  }

  function parse_Separator()
  {
    eventHandler.startNonterminal("Separator", e0);
    shift(53);                      // ';'
    eventHandler.endNonterminal("Separator", e0);
  }

  function parse_Setter()
  {
    eventHandler.startNonterminal("Setter", e0);
    switch (l1)
    {
    case 108:                       // 'declare'
      lookahead2W(172);             // S^WS | '(:' | 'base-uri' | 'boundary-space' | 'construction' |
                                    // 'copy-namespaces' | 'decimal-format' | 'default' | 'ordering' | 'revalidation'
      break;
    default:
      lk = l1;
    }
    if (lk == 55916)                // 'declare' 'default'
    {
      lk = memoized(1, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_DefaultCollationDecl();
          lk = -2;
        }
        catch (p2A)
        {
          try
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            try_EmptyOrderDecl();
            lk = -6;
          }
          catch (p6A)
          {
            lk = -9;
          }
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(1, e0, lk);
      }
    }
    switch (lk)
    {
    case 43628:                     // 'declare' 'boundary-space'
      parse_BoundarySpaceDecl();
      break;
    case -2:
      parse_DefaultCollationDecl();
      break;
    case 42604:                     // 'declare' 'base-uri'
      parse_BaseURIDecl();
      break;
    case 50284:                     // 'declare' 'construction'
      parse_ConstructionDecl();
      break;
    case 104044:                    // 'declare' 'ordering'
      parse_OrderingModeDecl();
      break;
    case -6:
      parse_EmptyOrderDecl();
      break;
    case 113772:                    // 'declare' 'revalidation'
      parse_RevalidationDecl();
      break;
    case 53356:                     // 'declare' 'copy-namespaces'
      parse_CopyNamespacesDecl();
      break;
    default:
      parse_DecimalFormatDecl();
    }
    eventHandler.endNonterminal("Setter", e0);
  }

  function parse_BoundarySpaceDecl()
  {
    eventHandler.startNonterminal("BoundarySpaceDecl", e0);
    shift(108);                     // 'declare'
    lookahead1W(33);                // S^WS | '(:' | 'boundary-space'
    shift(85);                      // 'boundary-space'
    lookahead1W(133);               // S^WS | '(:' | 'preserve' | 'strip'
    switch (l1)
    {
    case 214:                       // 'preserve'
      shift(214);                   // 'preserve'
      break;
    default:
      shift(241);                   // 'strip'
    }
    eventHandler.endNonterminal("BoundarySpaceDecl", e0);
  }

  function parse_DefaultCollationDecl()
  {
    eventHandler.startNonterminal("DefaultCollationDecl", e0);
    shift(108);                     // 'declare'
    lookahead1W(46);                // S^WS | '(:' | 'default'
    shift(109);                     // 'default'
    lookahead1W(38);                // S^WS | '(:' | 'collation'
    shift(94);                      // 'collation'
    lookahead1W(15);                // URILiteral | S^WS | '(:'
    shift(7);                       // URILiteral
    eventHandler.endNonterminal("DefaultCollationDecl", e0);
  }

  function try_DefaultCollationDecl()
  {
    shiftT(108);                    // 'declare'
    lookahead1W(46);                // S^WS | '(:' | 'default'
    shiftT(109);                    // 'default'
    lookahead1W(38);                // S^WS | '(:' | 'collation'
    shiftT(94);                     // 'collation'
    lookahead1W(15);                // URILiteral | S^WS | '(:'
    shiftT(7);                      // URILiteral
  }

  function parse_BaseURIDecl()
  {
    eventHandler.startNonterminal("BaseURIDecl", e0);
    shift(108);                     // 'declare'
    lookahead1W(32);                // S^WS | '(:' | 'base-uri'
    shift(83);                      // 'base-uri'
    lookahead1W(15);                // URILiteral | S^WS | '(:'
    shift(7);                       // URILiteral
    eventHandler.endNonterminal("BaseURIDecl", e0);
  }

  function parse_ConstructionDecl()
  {
    eventHandler.startNonterminal("ConstructionDecl", e0);
    shift(108);                     // 'declare'
    lookahead1W(41);                // S^WS | '(:' | 'construction'
    shift(98);                      // 'construction'
    lookahead1W(133);               // S^WS | '(:' | 'preserve' | 'strip'
    switch (l1)
    {
    case 241:                       // 'strip'
      shift(241);                   // 'strip'
      break;
    default:
      shift(214);                   // 'preserve'
    }
    eventHandler.endNonterminal("ConstructionDecl", e0);
  }

  function parse_OrderingModeDecl()
  {
    eventHandler.startNonterminal("OrderingModeDecl", e0);
    shift(108);                     // 'declare'
    lookahead1W(68);                // S^WS | '(:' | 'ordering'
    shift(203);                     // 'ordering'
    lookahead1W(131);               // S^WS | '(:' | 'ordered' | 'unordered'
    switch (l1)
    {
    case 202:                       // 'ordered'
      shift(202);                   // 'ordered'
      break;
    default:
      shift(256);                   // 'unordered'
    }
    eventHandler.endNonterminal("OrderingModeDecl", e0);
  }

  function parse_EmptyOrderDecl()
  {
    eventHandler.startNonterminal("EmptyOrderDecl", e0);
    shift(108);                     // 'declare'
    lookahead1W(46);                // S^WS | '(:' | 'default'
    shift(109);                     // 'default'
    lookahead1W(67);                // S^WS | '(:' | 'order'
    shift(201);                     // 'order'
    lookahead1W(49);                // S^WS | '(:' | 'empty'
    shift(123);                     // 'empty'
    lookahead1W(121);               // S^WS | '(:' | 'greatest' | 'least'
    switch (l1)
    {
    case 147:                       // 'greatest'
      shift(147);                   // 'greatest'
      break;
    default:
      shift(173);                   // 'least'
    }
    eventHandler.endNonterminal("EmptyOrderDecl", e0);
  }

  function try_EmptyOrderDecl()
  {
    shiftT(108);                    // 'declare'
    lookahead1W(46);                // S^WS | '(:' | 'default'
    shiftT(109);                    // 'default'
    lookahead1W(67);                // S^WS | '(:' | 'order'
    shiftT(201);                    // 'order'
    lookahead1W(49);                // S^WS | '(:' | 'empty'
    shiftT(123);                    // 'empty'
    lookahead1W(121);               // S^WS | '(:' | 'greatest' | 'least'
    switch (l1)
    {
    case 147:                       // 'greatest'
      shiftT(147);                  // 'greatest'
      break;
    default:
      shiftT(173);                  // 'least'
    }
  }

  function parse_CopyNamespacesDecl()
  {
    eventHandler.startNonterminal("CopyNamespacesDecl", e0);
    shift(108);                     // 'declare'
    lookahead1W(44);                // S^WS | '(:' | 'copy-namespaces'
    shift(104);                     // 'copy-namespaces'
    lookahead1W(128);               // S^WS | '(:' | 'no-preserve' | 'preserve'
    whitespace();
    parse_PreserveMode();
    lookahead1W(25);                // S^WS | '(:' | ','
    shift(41);                      // ','
    lookahead1W(123);               // S^WS | '(:' | 'inherit' | 'no-inherit'
    whitespace();
    parse_InheritMode();
    eventHandler.endNonterminal("CopyNamespacesDecl", e0);
  }

  function parse_PreserveMode()
  {
    eventHandler.startNonterminal("PreserveMode", e0);
    switch (l1)
    {
    case 214:                       // 'preserve'
      shift(214);                   // 'preserve'
      break;
    default:
      shift(190);                   // 'no-preserve'
    }
    eventHandler.endNonterminal("PreserveMode", e0);
  }

  function parse_InheritMode()
  {
    eventHandler.startNonterminal("InheritMode", e0);
    switch (l1)
    {
    case 157:                       // 'inherit'
      shift(157);                   // 'inherit'
      break;
    default:
      shift(189);                   // 'no-inherit'
    }
    eventHandler.endNonterminal("InheritMode", e0);
  }

  function parse_DecimalFormatDecl()
  {
    eventHandler.startNonterminal("DecimalFormatDecl", e0);
    shift(108);                     // 'declare'
    lookahead1W(114);               // S^WS | '(:' | 'decimal-format' | 'default'
    switch (l1)
    {
    case 106:                       // 'decimal-format'
      shift(106);                   // 'decimal-format'
      lookahead1W(254);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_EQName();
      break;
    default:
      shift(109);                   // 'default'
      lookahead1W(45);              // S^WS | '(:' | 'decimal-format'
      shift(106);                   // 'decimal-format'
    }
    for (;;)
    {
      lookahead1W(181);             // S^WS | '(:' | ';' | 'NaN' | 'decimal-separator' | 'digit' |
                                    // 'grouping-separator' | 'infinity' | 'minus-sign' | 'pattern-separator' |
                                    // 'per-mille' | 'percent' | 'zero-digit'
      if (l1 == 53)                 // ';'
      {
        break;
      }
      whitespace();
      parse_DFPropertyName();
      lookahead1W(29);              // S^WS | '(:' | '='
      shift(60);                    // '='
      lookahead1W(17);              // StringLiteral | S^WS | '(:'
      shift(11);                    // StringLiteral
    }
    eventHandler.endNonterminal("DecimalFormatDecl", e0);
  }

  function parse_DFPropertyName()
  {
    eventHandler.startNonterminal("DFPropertyName", e0);
    switch (l1)
    {
    case 107:                       // 'decimal-separator'
      shift(107);                   // 'decimal-separator'
      break;
    case 149:                       // 'grouping-separator'
      shift(149);                   // 'grouping-separator'
      break;
    case 156:                       // 'infinity'
      shift(156);                   // 'infinity'
      break;
    case 179:                       // 'minus-sign'
      shift(179);                   // 'minus-sign'
      break;
    case 67:                        // 'NaN'
      shift(67);                    // 'NaN'
      break;
    case 209:                       // 'percent'
      shift(209);                   // 'percent'
      break;
    case 208:                       // 'per-mille'
      shift(208);                   // 'per-mille'
      break;
    case 275:                       // 'zero-digit'
      shift(275);                   // 'zero-digit'
      break;
    case 116:                       // 'digit'
      shift(116);                   // 'digit'
      break;
    default:
      shift(207);                   // 'pattern-separator'
    }
    eventHandler.endNonterminal("DFPropertyName", e0);
  }

  function parse_Import()
  {
    eventHandler.startNonterminal("Import", e0);
    switch (l1)
    {
    case 153:                       // 'import'
      lookahead2W(126);             // S^WS | '(:' | 'module' | 'schema'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 115353:                    // 'import' 'schema'
      parse_SchemaImport();
      break;
    default:
      parse_ModuleImport();
    }
    eventHandler.endNonterminal("Import", e0);
  }

  function parse_SchemaImport()
  {
    eventHandler.startNonterminal("SchemaImport", e0);
    shift(153);                     // 'import'
    lookahead1W(73);                // S^WS | '(:' | 'schema'
    shift(225);                     // 'schema'
    lookahead1W(137);               // URILiteral | S^WS | '(:' | 'default' | 'namespace'
    if (l1 != 7)                    // URILiteral
    {
      whitespace();
      parse_SchemaPrefix();
    }
    lookahead1W(15);                // URILiteral | S^WS | '(:'
    shift(7);                       // URILiteral
    lookahead1W(108);               // S^WS | '(:' | ';' | 'at'
    if (l1 == 81)                   // 'at'
    {
      shift(81);                    // 'at'
      lookahead1W(15);              // URILiteral | S^WS | '(:'
      shift(7);                     // URILiteral
      for (;;)
      {
        lookahead1W(103);           // S^WS | '(:' | ',' | ';'
        if (l1 != 41)               // ','
        {
          break;
        }
        shift(41);                  // ','
        lookahead1W(15);            // URILiteral | S^WS | '(:'
        shift(7);                   // URILiteral
      }
    }
    eventHandler.endNonterminal("SchemaImport", e0);
  }

  function parse_SchemaPrefix()
  {
    eventHandler.startNonterminal("SchemaPrefix", e0);
    switch (l1)
    {
    case 184:                       // 'namespace'
      shift(184);                   // 'namespace'
      lookahead1W(248);             // NCName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'last' | 'lax' | 'le' | 'let' |
                                    // 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery'
      whitespace();
      parse_NCName();
      lookahead1W(29);              // S^WS | '(:' | '='
      shift(60);                    // '='
      break;
    default:
      shift(109);                   // 'default'
      lookahead1W(47);              // S^WS | '(:' | 'element'
      shift(121);                   // 'element'
      lookahead1W(61);              // S^WS | '(:' | 'namespace'
      shift(184);                   // 'namespace'
    }
    eventHandler.endNonterminal("SchemaPrefix", e0);
  }

  function parse_ModuleImport()
  {
    eventHandler.startNonterminal("ModuleImport", e0);
    shift(153);                     // 'import'
    lookahead1W(60);                // S^WS | '(:' | 'module'
    shift(182);                     // 'module'
    lookahead1W(90);                // URILiteral | S^WS | '(:' | 'namespace'
    if (l1 == 184)                  // 'namespace'
    {
      shift(184);                   // 'namespace'
      lookahead1W(248);             // NCName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'last' | 'lax' | 'le' | 'let' |
                                    // 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery'
      whitespace();
      parse_NCName();
      lookahead1W(29);              // S^WS | '(:' | '='
      shift(60);                    // '='
    }
    lookahead1W(15);                // URILiteral | S^WS | '(:'
    shift(7);                       // URILiteral
    lookahead1W(108);               // S^WS | '(:' | ';' | 'at'
    if (l1 == 81)                   // 'at'
    {
      shift(81);                    // 'at'
      lookahead1W(15);              // URILiteral | S^WS | '(:'
      shift(7);                     // URILiteral
      for (;;)
      {
        lookahead1W(103);           // S^WS | '(:' | ',' | ';'
        if (l1 != 41)               // ','
        {
          break;
        }
        shift(41);                  // ','
        lookahead1W(15);            // URILiteral | S^WS | '(:'
        shift(7);                   // URILiteral
      }
    }
    eventHandler.endNonterminal("ModuleImport", e0);
  }

  function parse_NamespaceDecl()
  {
    eventHandler.startNonterminal("NamespaceDecl", e0);
    shift(108);                     // 'declare'
    lookahead1W(61);                // S^WS | '(:' | 'namespace'
    shift(184);                     // 'namespace'
    lookahead1W(248);               // NCName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'last' | 'lax' | 'le' | 'let' |
                                    // 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery'
    whitespace();
    parse_NCName();
    lookahead1W(29);                // S^WS | '(:' | '='
    shift(60);                      // '='
    lookahead1W(15);                // URILiteral | S^WS | '(:'
    shift(7);                       // URILiteral
    eventHandler.endNonterminal("NamespaceDecl", e0);
  }

  function parse_DefaultNamespaceDecl()
  {
    eventHandler.startNonterminal("DefaultNamespaceDecl", e0);
    shift(108);                     // 'declare'
    lookahead1W(46);                // S^WS | '(:' | 'default'
    shift(109);                     // 'default'
    lookahead1W(115);               // S^WS | '(:' | 'element' | 'function'
    switch (l1)
    {
    case 121:                       // 'element'
      shift(121);                   // 'element'
      break;
    default:
      shift(145);                   // 'function'
    }
    lookahead1W(61);                // S^WS | '(:' | 'namespace'
    shift(184);                     // 'namespace'
    lookahead1W(15);                // URILiteral | S^WS | '(:'
    shift(7);                       // URILiteral
    eventHandler.endNonterminal("DefaultNamespaceDecl", e0);
  }

  function try_DefaultNamespaceDecl()
  {
    shiftT(108);                    // 'declare'
    lookahead1W(46);                // S^WS | '(:' | 'default'
    shiftT(109);                    // 'default'
    lookahead1W(115);               // S^WS | '(:' | 'element' | 'function'
    switch (l1)
    {
    case 121:                       // 'element'
      shiftT(121);                  // 'element'
      break;
    default:
      shiftT(145);                  // 'function'
    }
    lookahead1W(61);                // S^WS | '(:' | 'namespace'
    shiftT(184);                    // 'namespace'
    lookahead1W(15);                // URILiteral | S^WS | '(:'
    shiftT(7);                      // URILiteral
  }

  function parse_FTOptionDecl()
  {
    eventHandler.startNonterminal("FTOptionDecl", e0);
    shift(108);                     // 'declare'
    lookahead1W(52);                // S^WS | '(:' | 'ft-option'
    shift(141);                     // 'ft-option'
    lookahead1W(81);                // S^WS | '(:' | 'using'
    whitespace();
    parse_FTMatchOptions();
    eventHandler.endNonterminal("FTOptionDecl", e0);
  }

  function parse_AnnotatedDecl()
  {
    eventHandler.startNonterminal("AnnotatedDecl", e0);
    shift(108);                     // 'declare'
    for (;;)
    {
      lookahead1W(170);             // S^WS | '%' | '(:' | 'collection' | 'function' | 'index' | 'integrity' |
                                    // 'updating' | 'variable'
      if (l1 != 32                  // '%'
       && l1 != 257)                // 'updating'
      {
        break;
      }
      switch (l1)
      {
      case 257:                     // 'updating'
        whitespace();
        parse_CompatibilityAnnotation();
        break;
      default:
        whitespace();
        parse_Annotation();
      }
    }
    switch (l1)
    {
    case 262:                       // 'variable'
      whitespace();
      parse_VarDecl();
      break;
    case 145:                       // 'function'
      whitespace();
      parse_FunctionDecl();
      break;
    case 95:                        // 'collection'
      whitespace();
      parse_CollectionDecl();
      break;
    case 155:                       // 'index'
      whitespace();
      parse_IndexDecl();
      break;
    default:
      whitespace();
      parse_ICDecl();
    }
    eventHandler.endNonterminal("AnnotatedDecl", e0);
  }

  function parse_CompatibilityAnnotation()
  {
    eventHandler.startNonterminal("CompatibilityAnnotation", e0);
    shift(257);                     // 'updating'
    eventHandler.endNonterminal("CompatibilityAnnotation", e0);
  }

  function parse_Annotation()
  {
    eventHandler.startNonterminal("Annotation", e0);
    shift(32);                      // '%'
    lookahead1W(254);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_EQName();
    lookahead1W(171);               // S^WS | '%' | '(' | '(:' | 'collection' | 'function' | 'index' | 'integrity' |
                                    // 'updating' | 'variable'
    if (l1 == 34)                   // '('
    {
      shift(34);                    // '('
      lookahead1W(154);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | S^WS | '(:'
      whitespace();
      parse_Literal();
      for (;;)
      {
        lookahead1W(101);           // S^WS | '(:' | ')' | ','
        if (l1 != 41)               // ','
        {
          break;
        }
        shift(41);                  // ','
        lookahead1W(154);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | S^WS | '(:'
        whitespace();
        parse_Literal();
      }
      shift(37);                    // ')'
    }
    eventHandler.endNonterminal("Annotation", e0);
  }

  function try_Annotation()
  {
    shiftT(32);                     // '%'
    lookahead1W(254);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
    try_EQName();
    lookahead1W(171);               // S^WS | '%' | '(' | '(:' | 'collection' | 'function' | 'index' | 'integrity' |
                                    // 'updating' | 'variable'
    if (l1 == 34)                   // '('
    {
      shiftT(34);                   // '('
      lookahead1W(154);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | S^WS | '(:'
      try_Literal();
      for (;;)
      {
        lookahead1W(101);           // S^WS | '(:' | ')' | ','
        if (l1 != 41)               // ','
        {
          break;
        }
        shiftT(41);                 // ','
        lookahead1W(154);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | S^WS | '(:'
        try_Literal();
      }
      shiftT(37);                   // ')'
    }
  }

  function parse_VarDecl()
  {
    eventHandler.startNonterminal("VarDecl", e0);
    shift(262);                     // 'variable'
    lookahead1W(21);                // S^WS | '$' | '(:'
    shift(31);                      // '$'
    lookahead1W(254);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_VarName();
    lookahead1W(147);               // S^WS | '(:' | ':=' | 'as' | 'external'
    if (l1 == 79)                   // 'as'
    {
      whitespace();
      parse_TypeDeclaration();
    }
    lookahead1W(106);               // S^WS | '(:' | ':=' | 'external'
    switch (l1)
    {
    case 52:                        // ':='
      shift(52);                    // ':='
      lookahead1W(266);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_VarValue();
      break;
    default:
      shift(133);                   // 'external'
      lookahead1W(104);             // S^WS | '(:' | ':=' | ';'
      if (l1 == 52)                 // ':='
      {
        shift(52);                  // ':='
        lookahead1W(266);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
        whitespace();
        parse_VarDefaultValue();
      }
    }
    eventHandler.endNonterminal("VarDecl", e0);
  }

  function parse_VarValue()
  {
    eventHandler.startNonterminal("VarValue", e0);
    parse_ExprSingle();
    eventHandler.endNonterminal("VarValue", e0);
  }

  function parse_VarDefaultValue()
  {
    eventHandler.startNonterminal("VarDefaultValue", e0);
    parse_ExprSingle();
    eventHandler.endNonterminal("VarDefaultValue", e0);
  }

  function parse_ContextItemDecl()
  {
    eventHandler.startNonterminal("ContextItemDecl", e0);
    shift(108);                     // 'declare'
    lookahead1W(43);                // S^WS | '(:' | 'context'
    shift(101);                     // 'context'
    lookahead1W(55);                // S^WS | '(:' | 'item'
    shift(165);                     // 'item'
    lookahead1W(147);               // S^WS | '(:' | ':=' | 'as' | 'external'
    if (l1 == 79)                   // 'as'
    {
      shift(79);                    // 'as'
      lookahead1W(259);             // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_ItemType();
    }
    lookahead1W(106);               // S^WS | '(:' | ':=' | 'external'
    switch (l1)
    {
    case 52:                        // ':='
      shift(52);                    // ':='
      lookahead1W(266);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_VarValue();
      break;
    default:
      shift(133);                   // 'external'
      lookahead1W(104);             // S^WS | '(:' | ':=' | ';'
      if (l1 == 52)                 // ':='
      {
        shift(52);                  // ':='
        lookahead1W(266);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
        whitespace();
        parse_VarDefaultValue();
      }
    }
    eventHandler.endNonterminal("ContextItemDecl", e0);
  }

  function parse_ParamList()
  {
    eventHandler.startNonterminal("ParamList", e0);
    parse_Param();
    for (;;)
    {
      lookahead1W(101);             // S^WS | '(:' | ')' | ','
      if (l1 != 41)                 // ','
      {
        break;
      }
      shift(41);                    // ','
      lookahead1W(21);              // S^WS | '$' | '(:'
      whitespace();
      parse_Param();
    }
    eventHandler.endNonterminal("ParamList", e0);
  }

  function try_ParamList()
  {
    try_Param();
    for (;;)
    {
      lookahead1W(101);             // S^WS | '(:' | ')' | ','
      if (l1 != 41)                 // ','
      {
        break;
      }
      shiftT(41);                   // ','
      lookahead1W(21);              // S^WS | '$' | '(:'
      try_Param();
    }
  }

  function parse_Param()
  {
    eventHandler.startNonterminal("Param", e0);
    shift(31);                      // '$'
    lookahead1W(254);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_EQName();
    lookahead1W(143);               // S^WS | '(:' | ')' | ',' | 'as'
    if (l1 == 79)                   // 'as'
    {
      whitespace();
      parse_TypeDeclaration();
    }
    eventHandler.endNonterminal("Param", e0);
  }

  function try_Param()
  {
    shiftT(31);                     // '$'
    lookahead1W(254);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
    try_EQName();
    lookahead1W(143);               // S^WS | '(:' | ')' | ',' | 'as'
    if (l1 == 79)                   // 'as'
    {
      try_TypeDeclaration();
    }
  }

  function parse_FunctionBody()
  {
    eventHandler.startNonterminal("FunctionBody", e0);
    parse_EnclosedExpr();
    eventHandler.endNonterminal("FunctionBody", e0);
  }

  function try_FunctionBody()
  {
    try_EnclosedExpr();
  }

  function parse_EnclosedExpr()
  {
    eventHandler.startNonterminal("EnclosedExpr", e0);
    shift(276);                     // '{'
    lookahead1W(266);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_Expr();
    shift(282);                     // '}'
    eventHandler.endNonterminal("EnclosedExpr", e0);
  }

  function try_EnclosedExpr()
  {
    shiftT(276);                    // '{'
    lookahead1W(266);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
    try_Expr();
    shiftT(282);                    // '}'
  }

  function parse_OptionDecl()
  {
    eventHandler.startNonterminal("OptionDecl", e0);
    shift(108);                     // 'declare'
    lookahead1W(66);                // S^WS | '(:' | 'option'
    shift(199);                     // 'option'
    lookahead1W(254);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_EQName();
    lookahead1W(17);                // StringLiteral | S^WS | '(:'
    shift(11);                      // StringLiteral
    eventHandler.endNonterminal("OptionDecl", e0);
  }

  function parse_Expr()
  {
    eventHandler.startNonterminal("Expr", e0);
    parse_ExprSingle();
    for (;;)
    {
      if (l1 != 41)                 // ','
      {
        break;
      }
      shift(41);                    // ','
      lookahead1W(266);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_ExprSingle();
    }
    eventHandler.endNonterminal("Expr", e0);
  }

  function try_Expr()
  {
    try_ExprSingle();
    for (;;)
    {
      if (l1 != 41)                 // ','
      {
        break;
      }
      shiftT(41);                   // ','
      lookahead1W(266);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      try_ExprSingle();
    }
  }

  function parse_FLWORExpr()
  {
    eventHandler.startNonterminal("FLWORExpr", e0);
    parse_InitialClause();
    for (;;)
    {
      lookahead1W(173);             // S^WS | '(:' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' | 'stable' |
                                    // 'where'
      if (l1 == 220)                // 'return'
      {
        break;
      }
      whitespace();
      parse_IntermediateClause();
    }
    whitespace();
    parse_ReturnClause();
    eventHandler.endNonterminal("FLWORExpr", e0);
  }

  function try_FLWORExpr()
  {
    try_InitialClause();
    for (;;)
    {
      lookahead1W(173);             // S^WS | '(:' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' | 'stable' |
                                    // 'where'
      if (l1 == 220)                // 'return'
      {
        break;
      }
      try_IntermediateClause();
    }
    try_ReturnClause();
  }

  function parse_InitialClause()
  {
    eventHandler.startNonterminal("InitialClause", e0);
    switch (l1)
    {
    case 137:                       // 'for'
      lookahead2W(141);             // S^WS | '$' | '(:' | 'sliding' | 'tumbling'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 16009:                     // 'for' '$'
      parse_ForClause();
      break;
    case 174:                       // 'let'
      parse_LetClause();
      break;
    default:
      parse_WindowClause();
    }
    eventHandler.endNonterminal("InitialClause", e0);
  }

  function try_InitialClause()
  {
    switch (l1)
    {
    case 137:                       // 'for'
      lookahead2W(141);             // S^WS | '$' | '(:' | 'sliding' | 'tumbling'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 16009:                     // 'for' '$'
      try_ForClause();
      break;
    case 174:                       // 'let'
      try_LetClause();
      break;
    default:
      try_WindowClause();
    }
  }

  function parse_IntermediateClause()
  {
    eventHandler.startNonterminal("IntermediateClause", e0);
    switch (l1)
    {
    case 137:                       // 'for'
    case 174:                       // 'let'
      parse_InitialClause();
      break;
    case 266:                       // 'where'
      parse_WhereClause();
      break;
    case 148:                       // 'group'
      parse_GroupByClause();
      break;
    case 105:                       // 'count'
      parse_CountClause();
      break;
    default:
      parse_OrderByClause();
    }
    eventHandler.endNonterminal("IntermediateClause", e0);
  }

  function try_IntermediateClause()
  {
    switch (l1)
    {
    case 137:                       // 'for'
    case 174:                       // 'let'
      try_InitialClause();
      break;
    case 266:                       // 'where'
      try_WhereClause();
      break;
    case 148:                       // 'group'
      try_GroupByClause();
      break;
    case 105:                       // 'count'
      try_CountClause();
      break;
    default:
      try_OrderByClause();
    }
  }

  function parse_ForClause()
  {
    eventHandler.startNonterminal("ForClause", e0);
    shift(137);                     // 'for'
    lookahead1W(21);                // S^WS | '$' | '(:'
    whitespace();
    parse_ForBinding();
    for (;;)
    {
      if (l1 != 41)                 // ','
      {
        break;
      }
      shift(41);                    // ','
      lookahead1W(21);              // S^WS | '$' | '(:'
      whitespace();
      parse_ForBinding();
    }
    eventHandler.endNonterminal("ForClause", e0);
  }

  function try_ForClause()
  {
    shiftT(137);                    // 'for'
    lookahead1W(21);                // S^WS | '$' | '(:'
    try_ForBinding();
    for (;;)
    {
      if (l1 != 41)                 // ','
      {
        break;
      }
      shiftT(41);                   // ','
      lookahead1W(21);              // S^WS | '$' | '(:'
      try_ForBinding();
    }
  }

  function parse_ForBinding()
  {
    eventHandler.startNonterminal("ForBinding", e0);
    shift(31);                      // '$'
    lookahead1W(254);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_VarName();
    lookahead1W(164);               // S^WS | '(:' | 'allowing' | 'as' | 'at' | 'in' | 'score'
    if (l1 == 79)                   // 'as'
    {
      whitespace();
      parse_TypeDeclaration();
    }
    lookahead1W(158);               // S^WS | '(:' | 'allowing' | 'at' | 'in' | 'score'
    if (l1 == 72)                   // 'allowing'
    {
      whitespace();
      parse_AllowingEmpty();
    }
    lookahead1W(150);               // S^WS | '(:' | 'at' | 'in' | 'score'
    if (l1 == 81)                   // 'at'
    {
      whitespace();
      parse_PositionalVar();
    }
    lookahead1W(122);               // S^WS | '(:' | 'in' | 'score'
    if (l1 == 228)                  // 'score'
    {
      whitespace();
      parse_FTScoreVar();
    }
    lookahead1W(53);                // S^WS | '(:' | 'in'
    shift(154);                     // 'in'
    lookahead1W(266);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("ForBinding", e0);
  }

  function try_ForBinding()
  {
    shiftT(31);                     // '$'
    lookahead1W(254);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
    try_VarName();
    lookahead1W(164);               // S^WS | '(:' | 'allowing' | 'as' | 'at' | 'in' | 'score'
    if (l1 == 79)                   // 'as'
    {
      try_TypeDeclaration();
    }
    lookahead1W(158);               // S^WS | '(:' | 'allowing' | 'at' | 'in' | 'score'
    if (l1 == 72)                   // 'allowing'
    {
      try_AllowingEmpty();
    }
    lookahead1W(150);               // S^WS | '(:' | 'at' | 'in' | 'score'
    if (l1 == 81)                   // 'at'
    {
      try_PositionalVar();
    }
    lookahead1W(122);               // S^WS | '(:' | 'in' | 'score'
    if (l1 == 228)                  // 'score'
    {
      try_FTScoreVar();
    }
    lookahead1W(53);                // S^WS | '(:' | 'in'
    shiftT(154);                    // 'in'
    lookahead1W(266);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_AllowingEmpty()
  {
    eventHandler.startNonterminal("AllowingEmpty", e0);
    shift(72);                      // 'allowing'
    lookahead1W(49);                // S^WS | '(:' | 'empty'
    shift(123);                     // 'empty'
    eventHandler.endNonterminal("AllowingEmpty", e0);
  }

  function try_AllowingEmpty()
  {
    shiftT(72);                     // 'allowing'
    lookahead1W(49);                // S^WS | '(:' | 'empty'
    shiftT(123);                    // 'empty'
  }

  function parse_PositionalVar()
  {
    eventHandler.startNonterminal("PositionalVar", e0);
    shift(81);                      // 'at'
    lookahead1W(21);                // S^WS | '$' | '(:'
    shift(31);                      // '$'
    lookahead1W(254);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_VarName();
    eventHandler.endNonterminal("PositionalVar", e0);
  }

  function try_PositionalVar()
  {
    shiftT(81);                     // 'at'
    lookahead1W(21);                // S^WS | '$' | '(:'
    shiftT(31);                     // '$'
    lookahead1W(254);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
    try_VarName();
  }

  function parse_FTScoreVar()
  {
    eventHandler.startNonterminal("FTScoreVar", e0);
    shift(228);                     // 'score'
    lookahead1W(21);                // S^WS | '$' | '(:'
    shift(31);                      // '$'
    lookahead1W(254);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_VarName();
    eventHandler.endNonterminal("FTScoreVar", e0);
  }

  function try_FTScoreVar()
  {
    shiftT(228);                    // 'score'
    lookahead1W(21);                // S^WS | '$' | '(:'
    shiftT(31);                     // '$'
    lookahead1W(254);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
    try_VarName();
  }

  function parse_LetClause()
  {
    eventHandler.startNonterminal("LetClause", e0);
    shift(174);                     // 'let'
    lookahead1W(96);                // S^WS | '$' | '(:' | 'score'
    whitespace();
    parse_LetBinding();
    for (;;)
    {
      if (l1 != 41)                 // ','
      {
        break;
      }
      shift(41);                    // ','
      lookahead1W(96);              // S^WS | '$' | '(:' | 'score'
      whitespace();
      parse_LetBinding();
    }
    eventHandler.endNonterminal("LetClause", e0);
  }

  function try_LetClause()
  {
    shiftT(174);                    // 'let'
    lookahead1W(96);                // S^WS | '$' | '(:' | 'score'
    try_LetBinding();
    for (;;)
    {
      if (l1 != 41)                 // ','
      {
        break;
      }
      shiftT(41);                   // ','
      lookahead1W(96);              // S^WS | '$' | '(:' | 'score'
      try_LetBinding();
    }
  }

  function parse_LetBinding()
  {
    eventHandler.startNonterminal("LetBinding", e0);
    switch (l1)
    {
    case 31:                        // '$'
      shift(31);                    // '$'
      lookahead1W(254);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_VarName();
      lookahead1W(105);             // S^WS | '(:' | ':=' | 'as'
      if (l1 == 79)                 // 'as'
      {
        whitespace();
        parse_TypeDeclaration();
      }
      break;
    default:
      parse_FTScoreVar();
    }
    lookahead1W(27);                // S^WS | '(:' | ':='
    shift(52);                      // ':='
    lookahead1W(266);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("LetBinding", e0);
  }

  function try_LetBinding()
  {
    switch (l1)
    {
    case 31:                        // '$'
      shiftT(31);                   // '$'
      lookahead1W(254);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
      try_VarName();
      lookahead1W(105);             // S^WS | '(:' | ':=' | 'as'
      if (l1 == 79)                 // 'as'
      {
        try_TypeDeclaration();
      }
      break;
    default:
      try_FTScoreVar();
    }
    lookahead1W(27);                // S^WS | '(:' | ':='
    shiftT(52);                     // ':='
    lookahead1W(266);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_WindowClause()
  {
    eventHandler.startNonterminal("WindowClause", e0);
    shift(137);                     // 'for'
    lookahead1W(135);               // S^WS | '(:' | 'sliding' | 'tumbling'
    switch (l1)
    {
    case 251:                       // 'tumbling'
      whitespace();
      parse_TumblingWindowClause();
      break;
    default:
      whitespace();
      parse_SlidingWindowClause();
    }
    eventHandler.endNonterminal("WindowClause", e0);
  }

  function try_WindowClause()
  {
    shiftT(137);                    // 'for'
    lookahead1W(135);               // S^WS | '(:' | 'sliding' | 'tumbling'
    switch (l1)
    {
    case 251:                       // 'tumbling'
      try_TumblingWindowClause();
      break;
    default:
      try_SlidingWindowClause();
    }
  }

  function parse_TumblingWindowClause()
  {
    eventHandler.startNonterminal("TumblingWindowClause", e0);
    shift(251);                     // 'tumbling'
    lookahead1W(85);                // S^WS | '(:' | 'window'
    shift(269);                     // 'window'
    lookahead1W(21);                // S^WS | '$' | '(:'
    shift(31);                      // '$'
    lookahead1W(254);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_VarName();
    lookahead1W(110);               // S^WS | '(:' | 'as' | 'in'
    if (l1 == 79)                   // 'as'
    {
      whitespace();
      parse_TypeDeclaration();
    }
    lookahead1W(53);                // S^WS | '(:' | 'in'
    shift(154);                     // 'in'
    lookahead1W(266);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    whitespace();
    parse_WindowStartCondition();
    if (l1 == 126                   // 'end'
     || l1 == 198)                  // 'only'
    {
      whitespace();
      parse_WindowEndCondition();
    }
    eventHandler.endNonterminal("TumblingWindowClause", e0);
  }

  function try_TumblingWindowClause()
  {
    shiftT(251);                    // 'tumbling'
    lookahead1W(85);                // S^WS | '(:' | 'window'
    shiftT(269);                    // 'window'
    lookahead1W(21);                // S^WS | '$' | '(:'
    shiftT(31);                     // '$'
    lookahead1W(254);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
    try_VarName();
    lookahead1W(110);               // S^WS | '(:' | 'as' | 'in'
    if (l1 == 79)                   // 'as'
    {
      try_TypeDeclaration();
    }
    lookahead1W(53);                // S^WS | '(:' | 'in'
    shiftT(154);                    // 'in'
    lookahead1W(266);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
    try_WindowStartCondition();
    if (l1 == 126                   // 'end'
     || l1 == 198)                  // 'only'
    {
      try_WindowEndCondition();
    }
  }

  function parse_SlidingWindowClause()
  {
    eventHandler.startNonterminal("SlidingWindowClause", e0);
    shift(234);                     // 'sliding'
    lookahead1W(85);                // S^WS | '(:' | 'window'
    shift(269);                     // 'window'
    lookahead1W(21);                // S^WS | '$' | '(:'
    shift(31);                      // '$'
    lookahead1W(254);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_VarName();
    lookahead1W(110);               // S^WS | '(:' | 'as' | 'in'
    if (l1 == 79)                   // 'as'
    {
      whitespace();
      parse_TypeDeclaration();
    }
    lookahead1W(53);                // S^WS | '(:' | 'in'
    shift(154);                     // 'in'
    lookahead1W(266);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    whitespace();
    parse_WindowStartCondition();
    whitespace();
    parse_WindowEndCondition();
    eventHandler.endNonterminal("SlidingWindowClause", e0);
  }

  function try_SlidingWindowClause()
  {
    shiftT(234);                    // 'sliding'
    lookahead1W(85);                // S^WS | '(:' | 'window'
    shiftT(269);                    // 'window'
    lookahead1W(21);                // S^WS | '$' | '(:'
    shiftT(31);                     // '$'
    lookahead1W(254);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
    try_VarName();
    lookahead1W(110);               // S^WS | '(:' | 'as' | 'in'
    if (l1 == 79)                   // 'as'
    {
      try_TypeDeclaration();
    }
    lookahead1W(53);                // S^WS | '(:' | 'in'
    shiftT(154);                    // 'in'
    lookahead1W(266);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
    try_WindowStartCondition();
    try_WindowEndCondition();
  }

  function parse_WindowStartCondition()
  {
    eventHandler.startNonterminal("WindowStartCondition", e0);
    shift(237);                     // 'start'
    lookahead1W(163);               // S^WS | '$' | '(:' | 'at' | 'next' | 'previous' | 'when'
    whitespace();
    parse_WindowVars();
    lookahead1W(83);                // S^WS | '(:' | 'when'
    shift(265);                     // 'when'
    lookahead1W(266);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("WindowStartCondition", e0);
  }

  function try_WindowStartCondition()
  {
    shiftT(237);                    // 'start'
    lookahead1W(163);               // S^WS | '$' | '(:' | 'at' | 'next' | 'previous' | 'when'
    try_WindowVars();
    lookahead1W(83);                // S^WS | '(:' | 'when'
    shiftT(265);                    // 'when'
    lookahead1W(266);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_WindowEndCondition()
  {
    eventHandler.startNonterminal("WindowEndCondition", e0);
    if (l1 == 198)                  // 'only'
    {
      shift(198);                   // 'only'
    }
    lookahead1W(50);                // S^WS | '(:' | 'end'
    shift(126);                     // 'end'
    lookahead1W(163);               // S^WS | '$' | '(:' | 'at' | 'next' | 'previous' | 'when'
    whitespace();
    parse_WindowVars();
    lookahead1W(83);                // S^WS | '(:' | 'when'
    shift(265);                     // 'when'
    lookahead1W(266);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("WindowEndCondition", e0);
  }

  function try_WindowEndCondition()
  {
    if (l1 == 198)                  // 'only'
    {
      shiftT(198);                  // 'only'
    }
    lookahead1W(50);                // S^WS | '(:' | 'end'
    shiftT(126);                    // 'end'
    lookahead1W(163);               // S^WS | '$' | '(:' | 'at' | 'next' | 'previous' | 'when'
    try_WindowVars();
    lookahead1W(83);                // S^WS | '(:' | 'when'
    shiftT(265);                    // 'when'
    lookahead1W(266);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_WindowVars()
  {
    eventHandler.startNonterminal("WindowVars", e0);
    if (l1 == 31)                   // '$'
    {
      shift(31);                    // '$'
      lookahead1W(254);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_CurrentItem();
    }
    lookahead1W(159);               // S^WS | '(:' | 'at' | 'next' | 'previous' | 'when'
    if (l1 == 81)                   // 'at'
    {
      whitespace();
      parse_PositionalVar();
    }
    lookahead1W(153);               // S^WS | '(:' | 'next' | 'previous' | 'when'
    if (l1 == 215)                  // 'previous'
    {
      shift(215);                   // 'previous'
      lookahead1W(21);              // S^WS | '$' | '(:'
      shift(31);                    // '$'
      lookahead1W(254);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_PreviousItem();
    }
    lookahead1W(127);               // S^WS | '(:' | 'next' | 'when'
    if (l1 == 187)                  // 'next'
    {
      shift(187);                   // 'next'
      lookahead1W(21);              // S^WS | '$' | '(:'
      shift(31);                    // '$'
      lookahead1W(254);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_NextItem();
    }
    eventHandler.endNonterminal("WindowVars", e0);
  }

  function try_WindowVars()
  {
    if (l1 == 31)                   // '$'
    {
      shiftT(31);                   // '$'
      lookahead1W(254);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
      try_CurrentItem();
    }
    lookahead1W(159);               // S^WS | '(:' | 'at' | 'next' | 'previous' | 'when'
    if (l1 == 81)                   // 'at'
    {
      try_PositionalVar();
    }
    lookahead1W(153);               // S^WS | '(:' | 'next' | 'previous' | 'when'
    if (l1 == 215)                  // 'previous'
    {
      shiftT(215);                  // 'previous'
      lookahead1W(21);              // S^WS | '$' | '(:'
      shiftT(31);                   // '$'
      lookahead1W(254);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
      try_PreviousItem();
    }
    lookahead1W(127);               // S^WS | '(:' | 'next' | 'when'
    if (l1 == 187)                  // 'next'
    {
      shiftT(187);                  // 'next'
      lookahead1W(21);              // S^WS | '$' | '(:'
      shiftT(31);                   // '$'
      lookahead1W(254);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
      try_NextItem();
    }
  }

  function parse_CurrentItem()
  {
    eventHandler.startNonterminal("CurrentItem", e0);
    parse_EQName();
    eventHandler.endNonterminal("CurrentItem", e0);
  }

  function try_CurrentItem()
  {
    try_EQName();
  }

  function parse_PreviousItem()
  {
    eventHandler.startNonterminal("PreviousItem", e0);
    parse_EQName();
    eventHandler.endNonterminal("PreviousItem", e0);
  }

  function try_PreviousItem()
  {
    try_EQName();
  }

  function parse_NextItem()
  {
    eventHandler.startNonterminal("NextItem", e0);
    parse_EQName();
    eventHandler.endNonterminal("NextItem", e0);
  }

  function try_NextItem()
  {
    try_EQName();
  }

  function parse_CountClause()
  {
    eventHandler.startNonterminal("CountClause", e0);
    shift(105);                     // 'count'
    lookahead1W(21);                // S^WS | '$' | '(:'
    shift(31);                      // '$'
    lookahead1W(254);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_VarName();
    eventHandler.endNonterminal("CountClause", e0);
  }

  function try_CountClause()
  {
    shiftT(105);                    // 'count'
    lookahead1W(21);                // S^WS | '$' | '(:'
    shiftT(31);                     // '$'
    lookahead1W(254);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
    try_VarName();
  }

  function parse_WhereClause()
  {
    eventHandler.startNonterminal("WhereClause", e0);
    shift(266);                     // 'where'
    lookahead1W(266);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("WhereClause", e0);
  }

  function try_WhereClause()
  {
    shiftT(266);                    // 'where'
    lookahead1W(266);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_GroupByClause()
  {
    eventHandler.startNonterminal("GroupByClause", e0);
    shift(148);                     // 'group'
    lookahead1W(34);                // S^WS | '(:' | 'by'
    shift(87);                      // 'by'
    lookahead1W(266);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_GroupingSpecList();
    eventHandler.endNonterminal("GroupByClause", e0);
  }

  function try_GroupByClause()
  {
    shiftT(148);                    // 'group'
    lookahead1W(34);                // S^WS | '(:' | 'by'
    shiftT(87);                     // 'by'
    lookahead1W(266);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
    try_GroupingSpecList();
  }

  function parse_GroupingSpecList()
  {
    eventHandler.startNonterminal("GroupingSpecList", e0);
    parse_GroupingSpec();
    for (;;)
    {
      lookahead1W(176);             // S^WS | '(:' | ',' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' |
                                    // 'stable' | 'where'
      if (l1 != 41)                 // ','
      {
        break;
      }
      shift(41);                    // ','
      lookahead1W(266);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_GroupingSpec();
    }
    eventHandler.endNonterminal("GroupingSpecList", e0);
  }

  function try_GroupingSpecList()
  {
    try_GroupingSpec();
    for (;;)
    {
      lookahead1W(176);             // S^WS | '(:' | ',' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' |
                                    // 'stable' | 'where'
      if (l1 != 41)                 // ','
      {
        break;
      }
      shiftT(41);                   // ','
      lookahead1W(266);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      try_GroupingSpec();
    }
  }

  function parse_GroupingSpec()
  {
    eventHandler.startNonterminal("GroupingSpec", e0);
    parse_GroupingVariable();
    if (l1 == 52                    // ':='
     || l1 == 79)                   // 'as'
    {
      if (l1 == 79)                 // 'as'
      {
        whitespace();
        parse_TypeDeclaration();
      }
      lookahead1W(27);              // S^WS | '(:' | ':='
      shift(52);                    // ':='
      lookahead1W(266);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_ExprSingle();
    }
    if (l1 == 94)                   // 'collation'
    {
      shift(94);                    // 'collation'
      lookahead1W(15);              // URILiteral | S^WS | '(:'
      shift(7);                     // URILiteral
    }
    eventHandler.endNonterminal("GroupingSpec", e0);
  }

  function try_GroupingSpec()
  {
    try_GroupingVariable();
    if (l1 == 52                    // ':='
     || l1 == 79)                   // 'as'
    {
      if (l1 == 79)                 // 'as'
      {
        try_TypeDeclaration();
      }
      lookahead1W(27);              // S^WS | '(:' | ':='
      shiftT(52);                   // ':='
      lookahead1W(266);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      try_ExprSingle();
    }
    if (l1 == 94)                   // 'collation'
    {
      shiftT(94);                   // 'collation'
      lookahead1W(15);              // URILiteral | S^WS | '(:'
      shiftT(7);                    // URILiteral
    }
  }

  function parse_GroupingVariable()
  {
    eventHandler.startNonterminal("GroupingVariable", e0);
    parse_ExprSingle();
    eventHandler.endNonterminal("GroupingVariable", e0);
  }

  function try_GroupingVariable()
  {
    try_ExprSingle();
  }

  function parse_OrderByClause()
  {
    eventHandler.startNonterminal("OrderByClause", e0);
    switch (l1)
    {
    case 201:                       // 'order'
      shift(201);                   // 'order'
      lookahead1W(34);              // S^WS | '(:' | 'by'
      shift(87);                    // 'by'
      break;
    default:
      shift(236);                   // 'stable'
      lookahead1W(67);              // S^WS | '(:' | 'order'
      shift(201);                   // 'order'
      lookahead1W(34);              // S^WS | '(:' | 'by'
      shift(87);                    // 'by'
    }
    lookahead1W(266);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_OrderSpecList();
    eventHandler.endNonterminal("OrderByClause", e0);
  }

  function try_OrderByClause()
  {
    switch (l1)
    {
    case 201:                       // 'order'
      shiftT(201);                  // 'order'
      lookahead1W(34);              // S^WS | '(:' | 'by'
      shiftT(87);                   // 'by'
      break;
    default:
      shiftT(236);                  // 'stable'
      lookahead1W(67);              // S^WS | '(:' | 'order'
      shiftT(201);                  // 'order'
      lookahead1W(34);              // S^WS | '(:' | 'by'
      shiftT(87);                   // 'by'
    }
    lookahead1W(266);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
    try_OrderSpecList();
  }

  function parse_OrderSpecList()
  {
    eventHandler.startNonterminal("OrderSpecList", e0);
    parse_OrderSpec();
    for (;;)
    {
      lookahead1W(176);             // S^WS | '(:' | ',' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' |
                                    // 'stable' | 'where'
      if (l1 != 41)                 // ','
      {
        break;
      }
      shift(41);                    // ','
      lookahead1W(266);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_OrderSpec();
    }
    eventHandler.endNonterminal("OrderSpecList", e0);
  }

  function try_OrderSpecList()
  {
    try_OrderSpec();
    for (;;)
    {
      lookahead1W(176);             // S^WS | '(:' | ',' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' |
                                    // 'stable' | 'where'
      if (l1 != 41)                 // ','
      {
        break;
      }
      shiftT(41);                   // ','
      lookahead1W(266);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      try_OrderSpec();
    }
  }

  function parse_OrderSpec()
  {
    eventHandler.startNonterminal("OrderSpec", e0);
    parse_ExprSingle();
    whitespace();
    parse_OrderModifier();
    eventHandler.endNonterminal("OrderSpec", e0);
  }

  function try_OrderSpec()
  {
    try_ExprSingle();
    try_OrderModifier();
  }

  function parse_OrderModifier()
  {
    eventHandler.startNonterminal("OrderModifier", e0);
    if (l1 == 80                    // 'ascending'
     || l1 == 113)                  // 'descending'
    {
      switch (l1)
      {
      case 80:                      // 'ascending'
        shift(80);                  // 'ascending'
        break;
      default:
        shift(113);                 // 'descending'
      }
    }
    lookahead1W(180);               // S^WS | '(:' | ',' | 'collation' | 'count' | 'empty' | 'for' | 'group' | 'let' |
                                    // 'order' | 'return' | 'stable' | 'where'
    if (l1 == 123)                  // 'empty'
    {
      shift(123);                   // 'empty'
      lookahead1W(121);             // S^WS | '(:' | 'greatest' | 'least'
      switch (l1)
      {
      case 147:                     // 'greatest'
        shift(147);                 // 'greatest'
        break;
      default:
        shift(173);                 // 'least'
      }
    }
    lookahead1W(177);               // S^WS | '(:' | ',' | 'collation' | 'count' | 'for' | 'group' | 'let' | 'order' |
                                    // 'return' | 'stable' | 'where'
    if (l1 == 94)                   // 'collation'
    {
      shift(94);                    // 'collation'
      lookahead1W(15);              // URILiteral | S^WS | '(:'
      shift(7);                     // URILiteral
    }
    eventHandler.endNonterminal("OrderModifier", e0);
  }

  function try_OrderModifier()
  {
    if (l1 == 80                    // 'ascending'
     || l1 == 113)                  // 'descending'
    {
      switch (l1)
      {
      case 80:                      // 'ascending'
        shiftT(80);                 // 'ascending'
        break;
      default:
        shiftT(113);                // 'descending'
      }
    }
    lookahead1W(180);               // S^WS | '(:' | ',' | 'collation' | 'count' | 'empty' | 'for' | 'group' | 'let' |
                                    // 'order' | 'return' | 'stable' | 'where'
    if (l1 == 123)                  // 'empty'
    {
      shiftT(123);                  // 'empty'
      lookahead1W(121);             // S^WS | '(:' | 'greatest' | 'least'
      switch (l1)
      {
      case 147:                     // 'greatest'
        shiftT(147);                // 'greatest'
        break;
      default:
        shiftT(173);                // 'least'
      }
    }
    lookahead1W(177);               // S^WS | '(:' | ',' | 'collation' | 'count' | 'for' | 'group' | 'let' | 'order' |
                                    // 'return' | 'stable' | 'where'
    if (l1 == 94)                   // 'collation'
    {
      shiftT(94);                   // 'collation'
      lookahead1W(15);              // URILiteral | S^WS | '(:'
      shiftT(7);                    // URILiteral
    }
  }

  function parse_ReturnClause()
  {
    eventHandler.startNonterminal("ReturnClause", e0);
    shift(220);                     // 'return'
    lookahead1W(266);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("ReturnClause", e0);
  }

  function try_ReturnClause()
  {
    shiftT(220);                    // 'return'
    lookahead1W(266);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_QuantifiedExpr()
  {
    eventHandler.startNonterminal("QuantifiedExpr", e0);
    switch (l1)
    {
    case 235:                       // 'some'
      shift(235);                   // 'some'
      break;
    default:
      shift(129);                   // 'every'
    }
    lookahead1W(21);                // S^WS | '$' | '(:'
    shift(31);                      // '$'
    lookahead1W(254);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_VarName();
    lookahead1W(110);               // S^WS | '(:' | 'as' | 'in'
    if (l1 == 79)                   // 'as'
    {
      whitespace();
      parse_TypeDeclaration();
    }
    lookahead1W(53);                // S^WS | '(:' | 'in'
    shift(154);                     // 'in'
    lookahead1W(266);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    for (;;)
    {
      if (l1 != 41)                 // ','
      {
        break;
      }
      shift(41);                    // ','
      lookahead1W(21);              // S^WS | '$' | '(:'
      shift(31);                    // '$'
      lookahead1W(254);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_VarName();
      lookahead1W(110);             // S^WS | '(:' | 'as' | 'in'
      if (l1 == 79)                 // 'as'
      {
        whitespace();
        parse_TypeDeclaration();
      }
      lookahead1W(53);              // S^WS | '(:' | 'in'
      shift(154);                   // 'in'
      lookahead1W(266);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_ExprSingle();
    }
    shift(224);                     // 'satisfies'
    lookahead1W(266);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("QuantifiedExpr", e0);
  }

  function try_QuantifiedExpr()
  {
    switch (l1)
    {
    case 235:                       // 'some'
      shiftT(235);                  // 'some'
      break;
    default:
      shiftT(129);                  // 'every'
    }
    lookahead1W(21);                // S^WS | '$' | '(:'
    shiftT(31);                     // '$'
    lookahead1W(254);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
    try_VarName();
    lookahead1W(110);               // S^WS | '(:' | 'as' | 'in'
    if (l1 == 79)                   // 'as'
    {
      try_TypeDeclaration();
    }
    lookahead1W(53);                // S^WS | '(:' | 'in'
    shiftT(154);                    // 'in'
    lookahead1W(266);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
    for (;;)
    {
      if (l1 != 41)                 // ','
      {
        break;
      }
      shiftT(41);                   // ','
      lookahead1W(21);              // S^WS | '$' | '(:'
      shiftT(31);                   // '$'
      lookahead1W(254);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
      try_VarName();
      lookahead1W(110);             // S^WS | '(:' | 'as' | 'in'
      if (l1 == 79)                 // 'as'
      {
        try_TypeDeclaration();
      }
      lookahead1W(53);              // S^WS | '(:' | 'in'
      shiftT(154);                  // 'in'
      lookahead1W(266);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      try_ExprSingle();
    }
    shiftT(224);                    // 'satisfies'
    lookahead1W(266);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_SwitchExpr()
  {
    eventHandler.startNonterminal("SwitchExpr", e0);
    shift(243);                     // 'switch'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shift(34);                      // '('
    lookahead1W(266);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_Expr();
    shift(37);                      // ')'
    for (;;)
    {
      lookahead1W(35);              // S^WS | '(:' | 'case'
      whitespace();
      parse_SwitchCaseClause();
      if (l1 != 88)                 // 'case'
      {
        break;
      }
    }
    shift(109);                     // 'default'
    lookahead1W(70);                // S^WS | '(:' | 'return'
    shift(220);                     // 'return'
    lookahead1W(266);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("SwitchExpr", e0);
  }

  function try_SwitchExpr()
  {
    shiftT(243);                    // 'switch'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shiftT(34);                     // '('
    lookahead1W(266);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
    try_Expr();
    shiftT(37);                     // ')'
    for (;;)
    {
      lookahead1W(35);              // S^WS | '(:' | 'case'
      try_SwitchCaseClause();
      if (l1 != 88)                 // 'case'
      {
        break;
      }
    }
    shiftT(109);                    // 'default'
    lookahead1W(70);                // S^WS | '(:' | 'return'
    shiftT(220);                    // 'return'
    lookahead1W(266);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_SwitchCaseClause()
  {
    eventHandler.startNonterminal("SwitchCaseClause", e0);
    for (;;)
    {
      shift(88);                    // 'case'
      lookahead1W(266);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_SwitchCaseOperand();
      if (l1 != 88)                 // 'case'
      {
        break;
      }
    }
    shift(220);                     // 'return'
    lookahead1W(266);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("SwitchCaseClause", e0);
  }

  function try_SwitchCaseClause()
  {
    for (;;)
    {
      shiftT(88);                   // 'case'
      lookahead1W(266);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      try_SwitchCaseOperand();
      if (l1 != 88)                 // 'case'
      {
        break;
      }
    }
    shiftT(220);                    // 'return'
    lookahead1W(266);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_SwitchCaseOperand()
  {
    eventHandler.startNonterminal("SwitchCaseOperand", e0);
    parse_ExprSingle();
    eventHandler.endNonterminal("SwitchCaseOperand", e0);
  }

  function try_SwitchCaseOperand()
  {
    try_ExprSingle();
  }

  function parse_TypeswitchExpr()
  {
    eventHandler.startNonterminal("TypeswitchExpr", e0);
    shift(253);                     // 'typeswitch'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shift(34);                      // '('
    lookahead1W(266);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_Expr();
    shift(37);                      // ')'
    for (;;)
    {
      lookahead1W(35);              // S^WS | '(:' | 'case'
      whitespace();
      parse_CaseClause();
      if (l1 != 88)                 // 'case'
      {
        break;
      }
    }
    shift(109);                     // 'default'
    lookahead1W(95);                // S^WS | '$' | '(:' | 'return'
    if (l1 == 31)                   // '$'
    {
      shift(31);                    // '$'
      lookahead1W(254);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_VarName();
    }
    lookahead1W(70);                // S^WS | '(:' | 'return'
    shift(220);                     // 'return'
    lookahead1W(266);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("TypeswitchExpr", e0);
  }

  function try_TypeswitchExpr()
  {
    shiftT(253);                    // 'typeswitch'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shiftT(34);                     // '('
    lookahead1W(266);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
    try_Expr();
    shiftT(37);                     // ')'
    for (;;)
    {
      lookahead1W(35);              // S^WS | '(:' | 'case'
      try_CaseClause();
      if (l1 != 88)                 // 'case'
      {
        break;
      }
    }
    shiftT(109);                    // 'default'
    lookahead1W(95);                // S^WS | '$' | '(:' | 'return'
    if (l1 == 31)                   // '$'
    {
      shiftT(31);                   // '$'
      lookahead1W(254);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
      try_VarName();
    }
    lookahead1W(70);                // S^WS | '(:' | 'return'
    shiftT(220);                    // 'return'
    lookahead1W(266);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_CaseClause()
  {
    eventHandler.startNonterminal("CaseClause", e0);
    shift(88);                      // 'case'
    lookahead1W(261);               // EQName^Token | S^WS | '$' | '%' | '(' | '(:' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
    if (l1 == 31)                   // '$'
    {
      shift(31);                    // '$'
      lookahead1W(254);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_VarName();
      lookahead1W(30);              // S^WS | '(:' | 'as'
      shift(79);                    // 'as'
    }
    lookahead1W(259);               // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_SequenceTypeUnion();
    shift(220);                     // 'return'
    lookahead1W(266);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("CaseClause", e0);
  }

  function try_CaseClause()
  {
    shiftT(88);                     // 'case'
    lookahead1W(261);               // EQName^Token | S^WS | '$' | '%' | '(' | '(:' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
    if (l1 == 31)                   // '$'
    {
      shiftT(31);                   // '$'
      lookahead1W(254);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
      try_VarName();
      lookahead1W(30);              // S^WS | '(:' | 'as'
      shiftT(79);                   // 'as'
    }
    lookahead1W(259);               // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
    try_SequenceTypeUnion();
    shiftT(220);                    // 'return'
    lookahead1W(266);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_SequenceTypeUnion()
  {
    eventHandler.startNonterminal("SequenceTypeUnion", e0);
    parse_SequenceType();
    for (;;)
    {
      lookahead1W(134);             // S^WS | '(:' | 'return' | '|'
      if (l1 != 279)                // '|'
      {
        break;
      }
      shift(279);                   // '|'
      lookahead1W(259);             // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_SequenceType();
    }
    eventHandler.endNonterminal("SequenceTypeUnion", e0);
  }

  function try_SequenceTypeUnion()
  {
    try_SequenceType();
    for (;;)
    {
      lookahead1W(134);             // S^WS | '(:' | 'return' | '|'
      if (l1 != 279)                // '|'
      {
        break;
      }
      shiftT(279);                  // '|'
      lookahead1W(259);             // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
      try_SequenceType();
    }
  }

  function parse_IfExpr()
  {
    eventHandler.startNonterminal("IfExpr", e0);
    shift(152);                     // 'if'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shift(34);                      // '('
    lookahead1W(266);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_Expr();
    shift(37);                      // ')'
    lookahead1W(77);                // S^WS | '(:' | 'then'
    shift(245);                     // 'then'
    lookahead1W(266);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    shift(122);                     // 'else'
    lookahead1W(266);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("IfExpr", e0);
  }

  function try_IfExpr()
  {
    shiftT(152);                    // 'if'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shiftT(34);                     // '('
    lookahead1W(266);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
    try_Expr();
    shiftT(37);                     // ')'
    lookahead1W(77);                // S^WS | '(:' | 'then'
    shiftT(245);                    // 'then'
    lookahead1W(266);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
    shiftT(122);                    // 'else'
    lookahead1W(266);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_TryCatchExpr()
  {
    eventHandler.startNonterminal("TryCatchExpr", e0);
    parse_TryClause();
    for (;;)
    {
      lookahead1W(36);              // S^WS | '(:' | 'catch'
      whitespace();
      parse_CatchClause();
      lookahead1W(183);             // S^WS | EOF | '(:' | ')' | ',' | ':' | ':=' | ';' | ']' | 'after' | 'as' |
                                    // 'ascending' | 'at' | 'before' | 'case' | 'catch' | 'collation' | 'count' |
                                    // 'default' | 'descending' | 'else' | 'empty' | 'end' | 'for' | 'group' | 'into' |
                                    // 'let' | 'modify' | 'only' | 'order' | 'return' | 'satisfies' | 'stable' |
                                    // 'start' | 'where' | 'with' | '|}' | '}'
      if (l1 != 91)                 // 'catch'
      {
        break;
      }
    }
    eventHandler.endNonterminal("TryCatchExpr", e0);
  }

  function try_TryCatchExpr()
  {
    try_TryClause();
    for (;;)
    {
      lookahead1W(36);              // S^WS | '(:' | 'catch'
      try_CatchClause();
      lookahead1W(183);             // S^WS | EOF | '(:' | ')' | ',' | ':' | ':=' | ';' | ']' | 'after' | 'as' |
                                    // 'ascending' | 'at' | 'before' | 'case' | 'catch' | 'collation' | 'count' |
                                    // 'default' | 'descending' | 'else' | 'empty' | 'end' | 'for' | 'group' | 'into' |
                                    // 'let' | 'modify' | 'only' | 'order' | 'return' | 'satisfies' | 'stable' |
                                    // 'start' | 'where' | 'with' | '|}' | '}'
      if (l1 != 91)                 // 'catch'
      {
        break;
      }
    }
  }

  function parse_TryClause()
  {
    eventHandler.startNonterminal("TryClause", e0);
    shift(250);                     // 'try'
    lookahead1W(87);                // S^WS | '(:' | '{'
    shift(276);                     // '{'
    lookahead1W(266);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_TryTargetExpr();
    shift(282);                     // '}'
    eventHandler.endNonterminal("TryClause", e0);
  }

  function try_TryClause()
  {
    shiftT(250);                    // 'try'
    lookahead1W(87);                // S^WS | '(:' | '{'
    shiftT(276);                    // '{'
    lookahead1W(266);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
    try_TryTargetExpr();
    shiftT(282);                    // '}'
  }

  function parse_TryTargetExpr()
  {
    eventHandler.startNonterminal("TryTargetExpr", e0);
    parse_Expr();
    eventHandler.endNonterminal("TryTargetExpr", e0);
  }

  function try_TryTargetExpr()
  {
    try_Expr();
  }

  function parse_CatchClause()
  {
    eventHandler.startNonterminal("CatchClause", e0);
    shift(91);                      // 'catch'
    lookahead1W(256);               // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_CatchErrorList();
    shift(276);                     // '{'
    lookahead1W(266);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_Expr();
    shift(282);                     // '}'
    eventHandler.endNonterminal("CatchClause", e0);
  }

  function try_CatchClause()
  {
    shiftT(91);                     // 'catch'
    lookahead1W(256);               // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
    try_CatchErrorList();
    shiftT(276);                    // '{'
    lookahead1W(266);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
    try_Expr();
    shiftT(282);                    // '}'
  }

  function parse_CatchErrorList()
  {
    eventHandler.startNonterminal("CatchErrorList", e0);
    parse_NameTest();
    for (;;)
    {
      lookahead1W(136);             // S^WS | '(:' | '{' | '|'
      if (l1 != 279)                // '|'
      {
        break;
      }
      shift(279);                   // '|'
      lookahead1W(256);             // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_NameTest();
    }
    eventHandler.endNonterminal("CatchErrorList", e0);
  }

  function try_CatchErrorList()
  {
    try_NameTest();
    for (;;)
    {
      lookahead1W(136);             // S^WS | '(:' | '{' | '|'
      if (l1 != 279)                // '|'
      {
        break;
      }
      shiftT(279);                  // '|'
      lookahead1W(256);             // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
      try_NameTest();
    }
  }

  function parse_OrExpr()
  {
    eventHandler.startNonterminal("OrExpr", e0);
    parse_AndExpr();
    for (;;)
    {
      if (l1 != 200)                // 'or'
      {
        break;
      }
      shift(200);                   // 'or'
      lookahead1W(266);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_AndExpr();
    }
    eventHandler.endNonterminal("OrExpr", e0);
  }

  function try_OrExpr()
  {
    try_AndExpr();
    for (;;)
    {
      if (l1 != 200)                // 'or'
      {
        break;
      }
      shiftT(200);                  // 'or'
      lookahead1W(266);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      try_AndExpr();
    }
  }

  function parse_AndExpr()
  {
    eventHandler.startNonterminal("AndExpr", e0);
    parse_ComparisonExpr();
    for (;;)
    {
      if (l1 != 75)                 // 'and'
      {
        break;
      }
      shift(75);                    // 'and'
      lookahead1W(266);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_ComparisonExpr();
    }
    eventHandler.endNonterminal("AndExpr", e0);
  }

  function try_AndExpr()
  {
    try_ComparisonExpr();
    for (;;)
    {
      if (l1 != 75)                 // 'and'
      {
        break;
      }
      shiftT(75);                   // 'and'
      lookahead1W(266);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      try_ComparisonExpr();
    }
  }

  function parse_ComparisonExpr()
  {
    eventHandler.startNonterminal("ComparisonExpr", e0);
    parse_FTContainsExpr();
    if (l1 == 27                    // '!='
     || l1 == 54                    // '<'
     || l1 == 57                    // '<<'
     || l1 == 58                    // '<='
     || l1 == 60                    // '='
     || l1 == 61                    // '>'
     || l1 == 62                    // '>='
     || l1 == 63                    // '>>'
     || l1 == 128                   // 'eq'
     || l1 == 146                   // 'ge'
     || l1 == 150                   // 'gt'
     || l1 == 164                   // 'is'
     || l1 == 172                   // 'le'
     || l1 == 178                   // 'lt'
     || l1 == 186)                  // 'ne'
    {
      switch (l1)
      {
      case 128:                     // 'eq'
      case 146:                     // 'ge'
      case 150:                     // 'gt'
      case 172:                     // 'le'
      case 178:                     // 'lt'
      case 186:                     // 'ne'
        whitespace();
        parse_ValueComp();
        break;
      case 57:                      // '<<'
      case 63:                      // '>>'
      case 164:                     // 'is'
        whitespace();
        parse_NodeComp();
        break;
      default:
        whitespace();
        parse_GeneralComp();
      }
      lookahead1W(266);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_FTContainsExpr();
    }
    eventHandler.endNonterminal("ComparisonExpr", e0);
  }

  function try_ComparisonExpr()
  {
    try_FTContainsExpr();
    if (l1 == 27                    // '!='
     || l1 == 54                    // '<'
     || l1 == 57                    // '<<'
     || l1 == 58                    // '<='
     || l1 == 60                    // '='
     || l1 == 61                    // '>'
     || l1 == 62                    // '>='
     || l1 == 63                    // '>>'
     || l1 == 128                   // 'eq'
     || l1 == 146                   // 'ge'
     || l1 == 150                   // 'gt'
     || l1 == 164                   // 'is'
     || l1 == 172                   // 'le'
     || l1 == 178                   // 'lt'
     || l1 == 186)                  // 'ne'
    {
      switch (l1)
      {
      case 128:                     // 'eq'
      case 146:                     // 'ge'
      case 150:                     // 'gt'
      case 172:                     // 'le'
      case 178:                     // 'lt'
      case 186:                     // 'ne'
        try_ValueComp();
        break;
      case 57:                      // '<<'
      case 63:                      // '>>'
      case 164:                     // 'is'
        try_NodeComp();
        break;
      default:
        try_GeneralComp();
      }
      lookahead1W(266);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      try_FTContainsExpr();
    }
  }

  function parse_FTContainsExpr()
  {
    eventHandler.startNonterminal("FTContainsExpr", e0);
    parse_StringConcatExpr();
    if (l1 == 99)                   // 'contains'
    {
      shift(99);                    // 'contains'
      lookahead1W(76);              // S^WS | '(:' | 'text'
      shift(244);                   // 'text'
      lookahead1W(162);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      whitespace();
      parse_FTSelection();
      if (l1 == 271)                // 'without'
      {
        whitespace();
        parse_FTIgnoreOption();
      }
    }
    eventHandler.endNonterminal("FTContainsExpr", e0);
  }

  function try_FTContainsExpr()
  {
    try_StringConcatExpr();
    if (l1 == 99)                   // 'contains'
    {
      shiftT(99);                   // 'contains'
      lookahead1W(76);              // S^WS | '(:' | 'text'
      shiftT(244);                  // 'text'
      lookahead1W(162);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      try_FTSelection();
      if (l1 == 271)                // 'without'
      {
        try_FTIgnoreOption();
      }
    }
  }

  function parse_StringConcatExpr()
  {
    eventHandler.startNonterminal("StringConcatExpr", e0);
    parse_RangeExpr();
    for (;;)
    {
      if (l1 != 280)                // '||'
      {
        break;
      }
      shift(280);                   // '||'
      lookahead1W(266);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_RangeExpr();
    }
    eventHandler.endNonterminal("StringConcatExpr", e0);
  }

  function try_StringConcatExpr()
  {
    try_RangeExpr();
    for (;;)
    {
      if (l1 != 280)                // '||'
      {
        break;
      }
      shiftT(280);                  // '||'
      lookahead1W(266);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      try_RangeExpr();
    }
  }

  function parse_RangeExpr()
  {
    eventHandler.startNonterminal("RangeExpr", e0);
    parse_AdditiveExpr();
    if (l1 == 248)                  // 'to'
    {
      shift(248);                   // 'to'
      lookahead1W(266);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_AdditiveExpr();
    }
    eventHandler.endNonterminal("RangeExpr", e0);
  }

  function try_RangeExpr()
  {
    try_AdditiveExpr();
    if (l1 == 248)                  // 'to'
    {
      shiftT(248);                  // 'to'
      lookahead1W(266);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      try_AdditiveExpr();
    }
  }

  function parse_AdditiveExpr()
  {
    eventHandler.startNonterminal("AdditiveExpr", e0);
    parse_MultiplicativeExpr();
    for (;;)
    {
      if (l1 != 40                  // '+'
       && l1 != 42)                 // '-'
      {
        break;
      }
      switch (l1)
      {
      case 40:                      // '+'
        shift(40);                  // '+'
        break;
      default:
        shift(42);                  // '-'
      }
      lookahead1W(266);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_MultiplicativeExpr();
    }
    eventHandler.endNonterminal("AdditiveExpr", e0);
  }

  function try_AdditiveExpr()
  {
    try_MultiplicativeExpr();
    for (;;)
    {
      if (l1 != 40                  // '+'
       && l1 != 42)                 // '-'
      {
        break;
      }
      switch (l1)
      {
      case 40:                      // '+'
        shiftT(40);                 // '+'
        break;
      default:
        shiftT(42);                 // '-'
      }
      lookahead1W(266);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      try_MultiplicativeExpr();
    }
  }

  function parse_MultiplicativeExpr()
  {
    eventHandler.startNonterminal("MultiplicativeExpr", e0);
    parse_UnionExpr();
    for (;;)
    {
      if (l1 != 38                  // '*'
       && l1 != 118                 // 'div'
       && l1 != 151                 // 'idiv'
       && l1 != 180)                // 'mod'
      {
        break;
      }
      switch (l1)
      {
      case 38:                      // '*'
        shift(38);                  // '*'
        break;
      case 118:                     // 'div'
        shift(118);                 // 'div'
        break;
      case 151:                     // 'idiv'
        shift(151);                 // 'idiv'
        break;
      default:
        shift(180);                 // 'mod'
      }
      lookahead1W(266);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_UnionExpr();
    }
    eventHandler.endNonterminal("MultiplicativeExpr", e0);
  }

  function try_MultiplicativeExpr()
  {
    try_UnionExpr();
    for (;;)
    {
      if (l1 != 38                  // '*'
       && l1 != 118                 // 'div'
       && l1 != 151                 // 'idiv'
       && l1 != 180)                // 'mod'
      {
        break;
      }
      switch (l1)
      {
      case 38:                      // '*'
        shiftT(38);                 // '*'
        break;
      case 118:                     // 'div'
        shiftT(118);                // 'div'
        break;
      case 151:                     // 'idiv'
        shiftT(151);                // 'idiv'
        break;
      default:
        shiftT(180);                // 'mod'
      }
      lookahead1W(266);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      try_UnionExpr();
    }
  }

  function parse_UnionExpr()
  {
    eventHandler.startNonterminal("UnionExpr", e0);
    parse_IntersectExceptExpr();
    for (;;)
    {
      if (l1 != 254                 // 'union'
       && l1 != 279)                // '|'
      {
        break;
      }
      switch (l1)
      {
      case 254:                     // 'union'
        shift(254);                 // 'union'
        break;
      default:
        shift(279);                 // '|'
      }
      lookahead1W(266);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_IntersectExceptExpr();
    }
    eventHandler.endNonterminal("UnionExpr", e0);
  }

  function try_UnionExpr()
  {
    try_IntersectExceptExpr();
    for (;;)
    {
      if (l1 != 254                 // 'union'
       && l1 != 279)                // '|'
      {
        break;
      }
      switch (l1)
      {
      case 254:                     // 'union'
        shiftT(254);                // 'union'
        break;
      default:
        shiftT(279);                // '|'
      }
      lookahead1W(266);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      try_IntersectExceptExpr();
    }
  }

  function parse_IntersectExceptExpr()
  {
    eventHandler.startNonterminal("IntersectExceptExpr", e0);
    parse_InstanceofExpr();
    for (;;)
    {
      lookahead1W(222);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ':=' | ';' | '<' |
                                    // '<<' | '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' |
                                    // 'ascending' | 'at' | 'before' | 'case' | 'collation' | 'contains' | 'count' |
                                    // 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' |
                                    // 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'intersect' | 'into' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' |
                                    // 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
      if (l1 != 131                 // 'except'
       && l1 != 162)                // 'intersect'
      {
        break;
      }
      switch (l1)
      {
      case 162:                     // 'intersect'
        shift(162);                 // 'intersect'
        break;
      default:
        shift(131);                 // 'except'
      }
      lookahead1W(266);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_InstanceofExpr();
    }
    eventHandler.endNonterminal("IntersectExceptExpr", e0);
  }

  function try_IntersectExceptExpr()
  {
    try_InstanceofExpr();
    for (;;)
    {
      lookahead1W(222);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ':=' | ';' | '<' |
                                    // '<<' | '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' |
                                    // 'ascending' | 'at' | 'before' | 'case' | 'collation' | 'contains' | 'count' |
                                    // 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' |
                                    // 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'intersect' | 'into' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' |
                                    // 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
      if (l1 != 131                 // 'except'
       && l1 != 162)                // 'intersect'
      {
        break;
      }
      switch (l1)
      {
      case 162:                     // 'intersect'
        shiftT(162);                // 'intersect'
        break;
      default:
        shiftT(131);                // 'except'
      }
      lookahead1W(266);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      try_InstanceofExpr();
    }
  }

  function parse_InstanceofExpr()
  {
    eventHandler.startNonterminal("InstanceofExpr", e0);
    parse_TreatExpr();
    lookahead1W(223);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ':=' | ';' | '<' |
                                    // '<<' | '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' |
                                    // 'ascending' | 'at' | 'before' | 'case' | 'collation' | 'contains' | 'count' |
                                    // 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' |
                                    // 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
    if (l1 == 160)                  // 'instance'
    {
      shift(160);                   // 'instance'
      lookahead1W(64);              // S^WS | '(:' | 'of'
      shift(196);                   // 'of'
      lookahead1W(259);             // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_SequenceType();
    }
    eventHandler.endNonterminal("InstanceofExpr", e0);
  }

  function try_InstanceofExpr()
  {
    try_TreatExpr();
    lookahead1W(223);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ':=' | ';' | '<' |
                                    // '<<' | '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' |
                                    // 'ascending' | 'at' | 'before' | 'case' | 'collation' | 'contains' | 'count' |
                                    // 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' |
                                    // 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
    if (l1 == 160)                  // 'instance'
    {
      shiftT(160);                  // 'instance'
      lookahead1W(64);              // S^WS | '(:' | 'of'
      shiftT(196);                  // 'of'
      lookahead1W(259);             // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
      try_SequenceType();
    }
  }

  function parse_TreatExpr()
  {
    eventHandler.startNonterminal("TreatExpr", e0);
    parse_CastableExpr();
    lookahead1W(224);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ':=' | ';' | '<' |
                                    // '<<' | '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' |
                                    // 'ascending' | 'at' | 'before' | 'case' | 'collation' | 'contains' | 'count' |
                                    // 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' |
                                    // 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' | '||' |
                                    // '|}' | '}'
    if (l1 == 249)                  // 'treat'
    {
      shift(249);                   // 'treat'
      lookahead1W(30);              // S^WS | '(:' | 'as'
      shift(79);                    // 'as'
      lookahead1W(259);             // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_SequenceType();
    }
    eventHandler.endNonterminal("TreatExpr", e0);
  }

  function try_TreatExpr()
  {
    try_CastableExpr();
    lookahead1W(224);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ':=' | ';' | '<' |
                                    // '<<' | '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' |
                                    // 'ascending' | 'at' | 'before' | 'case' | 'collation' | 'contains' | 'count' |
                                    // 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' |
                                    // 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' | '||' |
                                    // '|}' | '}'
    if (l1 == 249)                  // 'treat'
    {
      shiftT(249);                  // 'treat'
      lookahead1W(30);              // S^WS | '(:' | 'as'
      shiftT(79);                   // 'as'
      lookahead1W(259);             // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
      try_SequenceType();
    }
  }

  function parse_CastableExpr()
  {
    eventHandler.startNonterminal("CastableExpr", e0);
    parse_CastExpr();
    lookahead1W(225);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ':=' | ';' | '<' |
                                    // '<<' | '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' |
                                    // 'ascending' | 'at' | 'before' | 'case' | 'castable' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' |
                                    // 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' |
                                    // 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' |
                                    // 'order' | 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' |
                                    // 'start' | 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' |
                                    // '||' | '|}' | '}'
    if (l1 == 90)                   // 'castable'
    {
      shift(90);                    // 'castable'
      lookahead1W(30);              // S^WS | '(:' | 'as'
      shift(79);                    // 'as'
      lookahead1W(254);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_SingleType();
    }
    eventHandler.endNonterminal("CastableExpr", e0);
  }

  function try_CastableExpr()
  {
    try_CastExpr();
    lookahead1W(225);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ':=' | ';' | '<' |
                                    // '<<' | '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' |
                                    // 'ascending' | 'at' | 'before' | 'case' | 'castable' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' |
                                    // 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' |
                                    // 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' |
                                    // 'order' | 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' |
                                    // 'start' | 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' |
                                    // '||' | '|}' | '}'
    if (l1 == 90)                   // 'castable'
    {
      shiftT(90);                   // 'castable'
      lookahead1W(30);              // S^WS | '(:' | 'as'
      shiftT(79);                   // 'as'
      lookahead1W(254);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
      try_SingleType();
    }
  }

  function parse_CastExpr()
  {
    eventHandler.startNonterminal("CastExpr", e0);
    parse_UnaryExpr();
    lookahead1W(227);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ':=' | ';' | '<' |
                                    // '<<' | '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' |
                                    // 'ascending' | 'at' | 'before' | 'case' | 'cast' | 'castable' | 'collation' |
                                    // 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' |
                                    // 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' |
                                    // 'only' | 'or' | 'order' | 'paragraphs' | 'return' | 'satisfies' | 'sentences' |
                                    // 'stable' | 'start' | 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' |
                                    // 'words' | '|' | '||' | '|}' | '}'
    if (l1 == 89)                   // 'cast'
    {
      shift(89);                    // 'cast'
      lookahead1W(30);              // S^WS | '(:' | 'as'
      shift(79);                    // 'as'
      lookahead1W(254);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_SingleType();
    }
    eventHandler.endNonterminal("CastExpr", e0);
  }

  function try_CastExpr()
  {
    try_UnaryExpr();
    lookahead1W(227);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ':=' | ';' | '<' |
                                    // '<<' | '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' |
                                    // 'ascending' | 'at' | 'before' | 'case' | 'cast' | 'castable' | 'collation' |
                                    // 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' |
                                    // 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' |
                                    // 'only' | 'or' | 'order' | 'paragraphs' | 'return' | 'satisfies' | 'sentences' |
                                    // 'stable' | 'start' | 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' |
                                    // 'words' | '|' | '||' | '|}' | '}'
    if (l1 == 89)                   // 'cast'
    {
      shiftT(89);                   // 'cast'
      lookahead1W(30);              // S^WS | '(:' | 'as'
      shiftT(79);                   // 'as'
      lookahead1W(254);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
      try_SingleType();
    }
  }

  function parse_UnaryExpr()
  {
    eventHandler.startNonterminal("UnaryExpr", e0);
    for (;;)
    {
      lookahead1W(266);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      if (l1 != 40                  // '+'
       && l1 != 42)                 // '-'
      {
        break;
      }
      switch (l1)
      {
      case 42:                      // '-'
        shift(42);                  // '-'
        break;
      default:
        shift(40);                  // '+'
      }
    }
    whitespace();
    parse_ValueExpr();
    eventHandler.endNonterminal("UnaryExpr", e0);
  }

  function try_UnaryExpr()
  {
    for (;;)
    {
      lookahead1W(266);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      if (l1 != 40                  // '+'
       && l1 != 42)                 // '-'
      {
        break;
      }
      switch (l1)
      {
      case 42:                      // '-'
        shiftT(42);                 // '-'
        break;
      default:
        shiftT(40);                 // '+'
      }
    }
    try_ValueExpr();
  }

  function parse_ValueExpr()
  {
    eventHandler.startNonterminal("ValueExpr", e0);
    switch (l1)
    {
    case 260:                       // 'validate'
      lookahead2W(247);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ':=' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'lax' | 'le' | 'let' |
                                    // 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' |
                                    // 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' | 'strict' | 'times' |
                                    // 'to' | 'treat' | 'type' | 'union' | 'where' | 'with' | 'words' | '{' | '|' |
                                    // '||' | '|}' | '}'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 87812:                     // 'validate' 'lax'
    case 123140:                    // 'validate' 'strict'
    case 129284:                    // 'validate' 'type'
    case 141572:                    // 'validate' '{'
      parse_ValidateExpr();
      break;
    case 35:                        // '(#'
      parse_ExtensionExpr();
      break;
    default:
      parse_SimpleMapExpr();
    }
    eventHandler.endNonterminal("ValueExpr", e0);
  }

  function try_ValueExpr()
  {
    switch (l1)
    {
    case 260:                       // 'validate'
      lookahead2W(247);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ':=' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'lax' | 'le' | 'let' |
                                    // 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' |
                                    // 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' | 'strict' | 'times' |
                                    // 'to' | 'treat' | 'type' | 'union' | 'where' | 'with' | 'words' | '{' | '|' |
                                    // '||' | '|}' | '}'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 87812:                     // 'validate' 'lax'
    case 123140:                    // 'validate' 'strict'
    case 129284:                    // 'validate' 'type'
    case 141572:                    // 'validate' '{'
      try_ValidateExpr();
      break;
    case 35:                        // '(#'
      try_ExtensionExpr();
      break;
    default:
      try_SimpleMapExpr();
    }
  }

  function parse_SimpleMapExpr()
  {
    eventHandler.startNonterminal("SimpleMapExpr", e0);
    parse_PathExpr();
    for (;;)
    {
      if (l1 != 26)                 // '!'
      {
        break;
      }
      shift(26);                    // '!'
      lookahead1W(265);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(:' | '.' | '..' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_PathExpr();
    }
    eventHandler.endNonterminal("SimpleMapExpr", e0);
  }

  function try_SimpleMapExpr()
  {
    try_PathExpr();
    for (;;)
    {
      if (l1 != 26)                 // '!'
      {
        break;
      }
      shiftT(26);                   // '!'
      lookahead1W(265);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(:' | '.' | '..' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      try_PathExpr();
    }
  }

  function parse_GeneralComp()
  {
    eventHandler.startNonterminal("GeneralComp", e0);
    switch (l1)
    {
    case 60:                        // '='
      shift(60);                    // '='
      break;
    case 27:                        // '!='
      shift(27);                    // '!='
      break;
    case 54:                        // '<'
      shift(54);                    // '<'
      break;
    case 58:                        // '<='
      shift(58);                    // '<='
      break;
    case 61:                        // '>'
      shift(61);                    // '>'
      break;
    default:
      shift(62);                    // '>='
    }
    eventHandler.endNonterminal("GeneralComp", e0);
  }

  function try_GeneralComp()
  {
    switch (l1)
    {
    case 60:                        // '='
      shiftT(60);                   // '='
      break;
    case 27:                        // '!='
      shiftT(27);                   // '!='
      break;
    case 54:                        // '<'
      shiftT(54);                   // '<'
      break;
    case 58:                        // '<='
      shiftT(58);                   // '<='
      break;
    case 61:                        // '>'
      shiftT(61);                   // '>'
      break;
    default:
      shiftT(62);                   // '>='
    }
  }

  function parse_ValueComp()
  {
    eventHandler.startNonterminal("ValueComp", e0);
    switch (l1)
    {
    case 128:                       // 'eq'
      shift(128);                   // 'eq'
      break;
    case 186:                       // 'ne'
      shift(186);                   // 'ne'
      break;
    case 178:                       // 'lt'
      shift(178);                   // 'lt'
      break;
    case 172:                       // 'le'
      shift(172);                   // 'le'
      break;
    case 150:                       // 'gt'
      shift(150);                   // 'gt'
      break;
    default:
      shift(146);                   // 'ge'
    }
    eventHandler.endNonterminal("ValueComp", e0);
  }

  function try_ValueComp()
  {
    switch (l1)
    {
    case 128:                       // 'eq'
      shiftT(128);                  // 'eq'
      break;
    case 186:                       // 'ne'
      shiftT(186);                  // 'ne'
      break;
    case 178:                       // 'lt'
      shiftT(178);                  // 'lt'
      break;
    case 172:                       // 'le'
      shiftT(172);                  // 'le'
      break;
    case 150:                       // 'gt'
      shiftT(150);                  // 'gt'
      break;
    default:
      shiftT(146);                  // 'ge'
    }
  }

  function parse_NodeComp()
  {
    eventHandler.startNonterminal("NodeComp", e0);
    switch (l1)
    {
    case 164:                       // 'is'
      shift(164);                   // 'is'
      break;
    case 57:                        // '<<'
      shift(57);                    // '<<'
      break;
    default:
      shift(63);                    // '>>'
    }
    eventHandler.endNonterminal("NodeComp", e0);
  }

  function try_NodeComp()
  {
    switch (l1)
    {
    case 164:                       // 'is'
      shiftT(164);                  // 'is'
      break;
    case 57:                        // '<<'
      shiftT(57);                   // '<<'
      break;
    default:
      shiftT(63);                   // '>>'
    }
  }

  function parse_ValidateExpr()
  {
    eventHandler.startNonterminal("ValidateExpr", e0);
    shift(260);                     // 'validate'
    lookahead1W(160);               // S^WS | '(:' | 'lax' | 'strict' | 'type' | '{'
    if (l1 != 276)                  // '{'
    {
      switch (l1)
      {
      case 252:                     // 'type'
        shift(252);                 // 'type'
        lookahead1W(254);           // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
        whitespace();
        parse_TypeName();
        break;
      default:
        whitespace();
        parse_ValidationMode();
      }
    }
    lookahead1W(87);                // S^WS | '(:' | '{'
    shift(276);                     // '{'
    lookahead1W(266);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_Expr();
    shift(282);                     // '}'
    eventHandler.endNonterminal("ValidateExpr", e0);
  }

  function try_ValidateExpr()
  {
    shiftT(260);                    // 'validate'
    lookahead1W(160);               // S^WS | '(:' | 'lax' | 'strict' | 'type' | '{'
    if (l1 != 276)                  // '{'
    {
      switch (l1)
      {
      case 252:                     // 'type'
        shiftT(252);                // 'type'
        lookahead1W(254);           // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
        try_TypeName();
        break;
      default:
        try_ValidationMode();
      }
    }
    lookahead1W(87);                // S^WS | '(:' | '{'
    shiftT(276);                    // '{'
    lookahead1W(266);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
    try_Expr();
    shiftT(282);                    // '}'
  }

  function parse_ValidationMode()
  {
    eventHandler.startNonterminal("ValidationMode", e0);
    switch (l1)
    {
    case 171:                       // 'lax'
      shift(171);                   // 'lax'
      break;
    default:
      shift(240);                   // 'strict'
    }
    eventHandler.endNonterminal("ValidationMode", e0);
  }

  function try_ValidationMode()
  {
    switch (l1)
    {
    case 171:                       // 'lax'
      shiftT(171);                  // 'lax'
      break;
    default:
      shiftT(240);                  // 'strict'
    }
  }

  function parse_ExtensionExpr()
  {
    eventHandler.startNonterminal("ExtensionExpr", e0);
    for (;;)
    {
      whitespace();
      parse_Pragma();
      lookahead1W(100);             // S^WS | '(#' | '(:' | '{'
      if (l1 != 35)                 // '(#'
      {
        break;
      }
    }
    shift(276);                     // '{'
    lookahead1W(273);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|' | '}'
    if (l1 != 282)                  // '}'
    {
      whitespace();
      parse_Expr();
    }
    shift(282);                     // '}'
    eventHandler.endNonterminal("ExtensionExpr", e0);
  }

  function try_ExtensionExpr()
  {
    for (;;)
    {
      try_Pragma();
      lookahead1W(100);             // S^WS | '(#' | '(:' | '{'
      if (l1 != 35)                 // '(#'
      {
        break;
      }
    }
    shiftT(276);                    // '{'
    lookahead1W(273);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|' | '}'
    if (l1 != 282)                  // '}'
    {
      try_Expr();
    }
    shiftT(282);                    // '}'
  }

  function parse_Pragma()
  {
    eventHandler.startNonterminal("Pragma", e0);
    shift(35);                      // '(#'
    lookahead1(251);                // EQName^Token | S | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' |
                                    // 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
    if (l1 == 21)                   // S
    {
      shift(21);                    // S
    }
    parse_EQName();
    lookahead1(10);                 // S | '#)'
    if (l1 == 21)                   // S
    {
      shift(21);                    // S
      lookahead1(0);                // PragmaContents
      shift(1);                     // PragmaContents
    }
    lookahead1(5);                  // '#)'
    shift(30);                      // '#)'
    eventHandler.endNonterminal("Pragma", e0);
  }

  function try_Pragma()
  {
    shiftT(35);                     // '(#'
    lookahead1(251);                // EQName^Token | S | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' |
                                    // 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
    if (l1 == 21)                   // S
    {
      shiftT(21);                   // S
    }
    try_EQName();
    lookahead1(10);                 // S | '#)'
    if (l1 == 21)                   // S
    {
      shiftT(21);                   // S
      lookahead1(0);                // PragmaContents
      shiftT(1);                    // PragmaContents
    }
    lookahead1(5);                  // '#)'
    shiftT(30);                     // '#)'
  }

  function parse_PathExpr()
  {
    eventHandler.startNonterminal("PathExpr", e0);
    switch (l1)
    {
    case 46:                        // '/'
      shift(46);                    // '/'
      lookahead1W(285);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | EOF | '!' | '!=' | '$' | '%' | '(' | '(:' | ')' | '*' |
                                    // '+' | ',' | '-' | '.' | '..' | ':' | ':=' | ';' | '<' | '<!--' | '<<' | '<=' |
                                    // '<?' | '=' | '>' | '>=' | '>>' | '@' | '[' | ']' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'by' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'contains' | 'context' | 'continue' |
                                    // 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'paragraphs' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' |
                                    // 'sentences' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'times' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'words' | 'xquery' | '{' | '{|' | '|' | '||' | '|}' | '}'
      switch (l1)
      {
      case 25:                      // EOF
      case 26:                      // '!'
      case 27:                      // '!='
      case 37:                      // ')'
      case 38:                      // '*'
      case 40:                      // '+'
      case 41:                      // ','
      case 42:                      // '-'
      case 49:                      // ':'
      case 52:                      // ':='
      case 53:                      // ';'
      case 57:                      // '<<'
      case 58:                      // '<='
      case 60:                      // '='
      case 61:                      // '>'
      case 62:                      // '>='
      case 63:                      // '>>'
      case 69:                      // ']'
      case 87:                      // 'by'
      case 99:                      // 'contains'
      case 205:                     // 'paragraphs'
      case 232:                     // 'sentences'
      case 247:                     // 'times'
      case 273:                     // 'words'
      case 279:                     // '|'
      case 280:                     // '||'
      case 281:                     // '|}'
      case 282:                     // '}'
        break;
      default:
        whitespace();
        parse_RelativePathExpr();
      }
      break;
    case 47:                        // '//'
      shift(47);                    // '//'
      lookahead1W(264);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(:' | '.' | '..' | '<' | '<!--' |
                                    // '<?' | '@' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' |
                                    // 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_RelativePathExpr();
      break;
    default:
      parse_RelativePathExpr();
    }
    eventHandler.endNonterminal("PathExpr", e0);
  }

  function try_PathExpr()
  {
    switch (l1)
    {
    case 46:                        // '/'
      shiftT(46);                   // '/'
      lookahead1W(285);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | EOF | '!' | '!=' | '$' | '%' | '(' | '(:' | ')' | '*' |
                                    // '+' | ',' | '-' | '.' | '..' | ':' | ':=' | ';' | '<' | '<!--' | '<<' | '<=' |
                                    // '<?' | '=' | '>' | '>=' | '>>' | '@' | '[' | ']' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'by' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'contains' | 'context' | 'continue' |
                                    // 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'paragraphs' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' |
                                    // 'sentences' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'times' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'words' | 'xquery' | '{' | '{|' | '|' | '||' | '|}' | '}'
      switch (l1)
      {
      case 25:                      // EOF
      case 26:                      // '!'
      case 27:                      // '!='
      case 37:                      // ')'
      case 38:                      // '*'
      case 40:                      // '+'
      case 41:                      // ','
      case 42:                      // '-'
      case 49:                      // ':'
      case 52:                      // ':='
      case 53:                      // ';'
      case 57:                      // '<<'
      case 58:                      // '<='
      case 60:                      // '='
      case 61:                      // '>'
      case 62:                      // '>='
      case 63:                      // '>>'
      case 69:                      // ']'
      case 87:                      // 'by'
      case 99:                      // 'contains'
      case 205:                     // 'paragraphs'
      case 232:                     // 'sentences'
      case 247:                     // 'times'
      case 273:                     // 'words'
      case 279:                     // '|'
      case 280:                     // '||'
      case 281:                     // '|}'
      case 282:                     // '}'
        break;
      default:
        try_RelativePathExpr();
      }
      break;
    case 47:                        // '//'
      shiftT(47);                   // '//'
      lookahead1W(264);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(:' | '.' | '..' | '<' | '<!--' |
                                    // '<?' | '@' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' |
                                    // 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      try_RelativePathExpr();
      break;
    default:
      try_RelativePathExpr();
    }
  }

  function parse_RelativePathExpr()
  {
    eventHandler.startNonterminal("RelativePathExpr", e0);
    parse_StepExpr();
    for (;;)
    {
      switch (l1)
      {
      case 26:                      // '!'
        lookahead2W(265);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(:' | '.' | '..' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
        break;
      default:
        lk = l1;
      }
      if (lk != 25                  // EOF
       && lk != 27                  // '!='
       && lk != 37                  // ')'
       && lk != 38                  // '*'
       && lk != 40                  // '+'
       && lk != 41                  // ','
       && lk != 42                  // '-'
       && lk != 46                  // '/'
       && lk != 47                  // '//'
       && lk != 49                  // ':'
       && lk != 52                  // ':='
       && lk != 53                  // ';'
       && lk != 54                  // '<'
       && lk != 57                  // '<<'
       && lk != 58                  // '<='
       && lk != 60                  // '='
       && lk != 61                  // '>'
       && lk != 62                  // '>='
       && lk != 63                  // '>>'
       && lk != 69                  // ']'
       && lk != 70                  // 'after'
       && lk != 75                  // 'and'
       && lk != 79                  // 'as'
       && lk != 80                  // 'ascending'
       && lk != 81                  // 'at'
       && lk != 84                  // 'before'
       && lk != 87                  // 'by'
       && lk != 88                  // 'case'
       && lk != 89                  // 'cast'
       && lk != 90                  // 'castable'
       && lk != 94                  // 'collation'
       && lk != 99                  // 'contains'
       && lk != 105                 // 'count'
       && lk != 109                 // 'default'
       && lk != 113                 // 'descending'
       && lk != 118                 // 'div'
       && lk != 122                 // 'else'
       && lk != 123                 // 'empty'
       && lk != 126                 // 'end'
       && lk != 128                 // 'eq'
       && lk != 131                 // 'except'
       && lk != 137                 // 'for'
       && lk != 146                 // 'ge'
       && lk != 148                 // 'group'
       && lk != 150                 // 'gt'
       && lk != 151                 // 'idiv'
       && lk != 160                 // 'instance'
       && lk != 162                 // 'intersect'
       && lk != 163                 // 'into'
       && lk != 164                 // 'is'
       && lk != 172                 // 'le'
       && lk != 174                 // 'let'
       && lk != 178                 // 'lt'
       && lk != 180                 // 'mod'
       && lk != 181                 // 'modify'
       && lk != 186                 // 'ne'
       && lk != 198                 // 'only'
       && lk != 200                 // 'or'
       && lk != 201                 // 'order'
       && lk != 205                 // 'paragraphs'
       && lk != 220                 // 'return'
       && lk != 224                 // 'satisfies'
       && lk != 232                 // 'sentences'
       && lk != 236                 // 'stable'
       && lk != 237                 // 'start'
       && lk != 247                 // 'times'
       && lk != 248                 // 'to'
       && lk != 249                 // 'treat'
       && lk != 254                 // 'union'
       && lk != 266                 // 'where'
       && lk != 270                 // 'with'
       && lk != 273                 // 'words'
       && lk != 279                 // '|'
       && lk != 280                 // '||'
       && lk != 281                 // '|}'
       && lk != 282                 // '}'
       && lk != 23578               // '!' '/'
       && lk != 24090)              // '!' '//'
      {
        lk = memoized(2, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2;
          try
          {
            switch (l1)
            {
            case 46:                // '/'
              shiftT(46);           // '/'
              break;
            case 47:                // '//'
              shiftT(47);           // '//'
              break;
            default:
              shiftT(26);           // '!'
            }
            lookahead1W(264);       // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(:' | '.' | '..' | '<' | '<!--' |
                                    // '<?' | '@' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' |
                                    // 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
            try_StepExpr();
            lk = -1;
          }
          catch (p1A)
          {
            lk = -2;
          }
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(2, e0, lk);
        }
      }
      if (lk != -1
       && lk != 46                  // '/'
       && lk != 47)                 // '//'
      {
        break;
      }
      switch (l1)
      {
      case 46:                      // '/'
        shift(46);                  // '/'
        break;
      case 47:                      // '//'
        shift(47);                  // '//'
        break;
      default:
        shift(26);                  // '!'
      }
      lookahead1W(264);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(:' | '.' | '..' | '<' | '<!--' |
                                    // '<?' | '@' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' |
                                    // 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_StepExpr();
    }
    eventHandler.endNonterminal("RelativePathExpr", e0);
  }

  function try_RelativePathExpr()
  {
    try_StepExpr();
    for (;;)
    {
      switch (l1)
      {
      case 26:                      // '!'
        lookahead2W(265);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(:' | '.' | '..' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
        break;
      default:
        lk = l1;
      }
      if (lk != 25                  // EOF
       && lk != 27                  // '!='
       && lk != 37                  // ')'
       && lk != 38                  // '*'
       && lk != 40                  // '+'
       && lk != 41                  // ','
       && lk != 42                  // '-'
       && lk != 46                  // '/'
       && lk != 47                  // '//'
       && lk != 49                  // ':'
       && lk != 52                  // ':='
       && lk != 53                  // ';'
       && lk != 54                  // '<'
       && lk != 57                  // '<<'
       && lk != 58                  // '<='
       && lk != 60                  // '='
       && lk != 61                  // '>'
       && lk != 62                  // '>='
       && lk != 63                  // '>>'
       && lk != 69                  // ']'
       && lk != 70                  // 'after'
       && lk != 75                  // 'and'
       && lk != 79                  // 'as'
       && lk != 80                  // 'ascending'
       && lk != 81                  // 'at'
       && lk != 84                  // 'before'
       && lk != 87                  // 'by'
       && lk != 88                  // 'case'
       && lk != 89                  // 'cast'
       && lk != 90                  // 'castable'
       && lk != 94                  // 'collation'
       && lk != 99                  // 'contains'
       && lk != 105                 // 'count'
       && lk != 109                 // 'default'
       && lk != 113                 // 'descending'
       && lk != 118                 // 'div'
       && lk != 122                 // 'else'
       && lk != 123                 // 'empty'
       && lk != 126                 // 'end'
       && lk != 128                 // 'eq'
       && lk != 131                 // 'except'
       && lk != 137                 // 'for'
       && lk != 146                 // 'ge'
       && lk != 148                 // 'group'
       && lk != 150                 // 'gt'
       && lk != 151                 // 'idiv'
       && lk != 160                 // 'instance'
       && lk != 162                 // 'intersect'
       && lk != 163                 // 'into'
       && lk != 164                 // 'is'
       && lk != 172                 // 'le'
       && lk != 174                 // 'let'
       && lk != 178                 // 'lt'
       && lk != 180                 // 'mod'
       && lk != 181                 // 'modify'
       && lk != 186                 // 'ne'
       && lk != 198                 // 'only'
       && lk != 200                 // 'or'
       && lk != 201                 // 'order'
       && lk != 205                 // 'paragraphs'
       && lk != 220                 // 'return'
       && lk != 224                 // 'satisfies'
       && lk != 232                 // 'sentences'
       && lk != 236                 // 'stable'
       && lk != 237                 // 'start'
       && lk != 247                 // 'times'
       && lk != 248                 // 'to'
       && lk != 249                 // 'treat'
       && lk != 254                 // 'union'
       && lk != 266                 // 'where'
       && lk != 270                 // 'with'
       && lk != 273                 // 'words'
       && lk != 279                 // '|'
       && lk != 280                 // '||'
       && lk != 281                 // '|}'
       && lk != 282                 // '}'
       && lk != 23578               // '!' '/'
       && lk != 24090)              // '!' '//'
      {
        lk = memoized(2, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2;
          try
          {
            switch (l1)
            {
            case 46:                // '/'
              shiftT(46);           // '/'
              break;
            case 47:                // '//'
              shiftT(47);           // '//'
              break;
            default:
              shiftT(26);           // '!'
            }
            lookahead1W(264);       // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(:' | '.' | '..' | '<' | '<!--' |
                                    // '<?' | '@' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' |
                                    // 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
            try_StepExpr();
            memoize(2, e0A, -1);
            continue;
          }
          catch (p1A)
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            memoize(2, e0A, -2);
            break;
          }
        }
      }
      if (lk != -1
       && lk != 46                  // '/'
       && lk != 47)                 // '//'
      {
        break;
      }
      switch (l1)
      {
      case 46:                      // '/'
        shiftT(46);                 // '/'
        break;
      case 47:                      // '//'
        shiftT(47);                 // '//'
        break;
      default:
        shiftT(26);                 // '!'
      }
      lookahead1W(264);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(:' | '.' | '..' | '<' | '<!--' |
                                    // '<?' | '@' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' |
                                    // 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      try_StepExpr();
    }
  }

  function parse_StepExpr()
  {
    eventHandler.startNonterminal("StepExpr", e0);
    switch (l1)
    {
    case 82:                        // 'attribute'
      lookahead2W(284);             // EQName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' |
                                    // ',' | '-' | '/' | '//' | ':' | '::' | ':=' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | '[' | ']' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'by' |
                                    // 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'contains' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'paragraphs' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' |
                                    // 'sentences' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'times' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'words' | 'xquery' | '{' | '|' | '||' | '|}' | '}'
      break;
    case 121:                       // 'element'
      lookahead2W(283);             // EQName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' |
                                    // ',' | '-' | '/' | '//' | ':' | ':=' | ';' | '<' | '<<' | '<=' | '=' | '>' |
                                    // '>=' | '>>' | '[' | ']' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'by' |
                                    // 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'contains' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'paragraphs' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' |
                                    // 'sentences' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'times' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'words' | 'xquery' | '{' | '|' | '||' | '|}' | '}'
      break;
    case 184:                       // 'namespace'
    case 216:                       // 'processing-instruction'
      lookahead2W(281);             // NCName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' |
                                    // ',' | '-' | '/' | '//' | ':' | ':=' | ';' | '<' | '<<' | '<=' | '=' | '>' |
                                    // '>=' | '>>' | '[' | ']' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'contains' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'paragraphs' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sentences' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' |
                                    // 'times' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'words' | 'xquery' | '{' | '|' | '||' | '|}' | '}'
      break;
    case 96:                        // 'comment'
    case 119:                       // 'document'
    case 202:                       // 'ordered'
    case 244:                       // 'text'
    case 256:                       // 'unordered'
      lookahead2W(246);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ':=' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' |
                                    // 'cast' | 'castable' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '{' | '|' |
                                    // '||' | '|}' | '}'
      break;
    case 78:                        // 'array'
    case 124:                       // 'empty-sequence'
    case 152:                       // 'if'
    case 165:                       // 'item'
    case 167:                       // 'json-item'
    case 242:                       // 'structured-item'
    case 243:                       // 'switch'
    case 253:                       // 'typeswitch'
      lookahead2W(240);             // S^WS | EOF | '!' | '!=' | '#' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | ':=' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
      break;
    case 73:                        // 'ancestor'
    case 74:                        // 'ancestor-or-self'
    case 93:                        // 'child'
    case 111:                       // 'descendant'
    case 112:                       // 'descendant-or-self'
    case 135:                       // 'following'
    case 136:                       // 'following-sibling'
    case 206:                       // 'parent'
    case 212:                       // 'preceding'
    case 213:                       // 'preceding-sibling'
    case 229:                       // 'self'
      lookahead2W(245);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | '::' | ':=' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' |
                                    // '[' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' |
                                    // 'case' | 'cast' | 'castable' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' | '||' |
                                    // '|}' | '}'
      break;
    case 6:                         // EQName^Token
    case 70:                        // 'after'
    case 72:                        // 'allowing'
    case 75:                        // 'and'
    case 77:                        // 'append'
    case 79:                        // 'as'
    case 80:                        // 'ascending'
    case 81:                        // 'at'
    case 83:                        // 'base-uri'
    case 84:                        // 'before'
    case 85:                        // 'boundary-space'
    case 86:                        // 'break'
    case 88:                        // 'case'
    case 89:                        // 'cast'
    case 90:                        // 'castable'
    case 91:                        // 'catch'
    case 94:                        // 'collation'
    case 97:                        // 'constraint'
    case 98:                        // 'construction'
    case 101:                       // 'context'
    case 102:                       // 'continue'
    case 103:                       // 'copy'
    case 104:                       // 'copy-namespaces'
    case 105:                       // 'count'
    case 106:                       // 'decimal-format'
    case 108:                       // 'declare'
    case 109:                       // 'default'
    case 110:                       // 'delete'
    case 113:                       // 'descending'
    case 118:                       // 'div'
    case 120:                       // 'document-node'
    case 122:                       // 'else'
    case 123:                       // 'empty'
    case 125:                       // 'encoding'
    case 126:                       // 'end'
    case 128:                       // 'eq'
    case 129:                       // 'every'
    case 131:                       // 'except'
    case 132:                       // 'exit'
    case 133:                       // 'external'
    case 134:                       // 'first'
    case 137:                       // 'for'
    case 141:                       // 'ft-option'
    case 145:                       // 'function'
    case 146:                       // 'ge'
    case 148:                       // 'group'
    case 150:                       // 'gt'
    case 151:                       // 'idiv'
    case 153:                       // 'import'
    case 154:                       // 'in'
    case 155:                       // 'index'
    case 159:                       // 'insert'
    case 160:                       // 'instance'
    case 161:                       // 'integrity'
    case 162:                       // 'intersect'
    case 163:                       // 'into'
    case 164:                       // 'is'
    case 166:                       // 'json'
    case 170:                       // 'last'
    case 171:                       // 'lax'
    case 172:                       // 'le'
    case 174:                       // 'let'
    case 176:                       // 'loop'
    case 178:                       // 'lt'
    case 180:                       // 'mod'
    case 181:                       // 'modify'
    case 182:                       // 'module'
    case 185:                       // 'namespace-node'
    case 186:                       // 'ne'
    case 191:                       // 'node'
    case 192:                       // 'nodes'
    case 194:                       // 'object'
    case 198:                       // 'only'
    case 199:                       // 'option'
    case 200:                       // 'or'
    case 201:                       // 'order'
    case 203:                       // 'ordering'
    case 218:                       // 'rename'
    case 219:                       // 'replace'
    case 220:                       // 'return'
    case 221:                       // 'returning'
    case 222:                       // 'revalidation'
    case 224:                       // 'satisfies'
    case 225:                       // 'schema'
    case 226:                       // 'schema-attribute'
    case 227:                       // 'schema-element'
    case 228:                       // 'score'
    case 234:                       // 'sliding'
    case 235:                       // 'some'
    case 236:                       // 'stable'
    case 237:                       // 'start'
    case 240:                       // 'strict'
    case 248:                       // 'to'
    case 249:                       // 'treat'
    case 250:                       // 'try'
    case 251:                       // 'tumbling'
    case 252:                       // 'type'
    case 254:                       // 'union'
    case 257:                       // 'updating'
    case 260:                       // 'validate'
    case 261:                       // 'value'
    case 262:                       // 'variable'
    case 263:                       // 'version'
    case 266:                       // 'where'
    case 267:                       // 'while'
    case 270:                       // 'with'
    case 274:                       // 'xquery'
      lookahead2W(243);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ':=' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' |
                                    // 'cast' | 'castable' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' | '||' |
                                    // '|}' | '}'
      break;
    default:
      lk = l1;
    }
    if (lk == 35922                 // 'attribute' 'after'
     || lk == 35961                 // 'element' 'after'
     || lk == 36024                 // 'namespace' 'after'
     || lk == 36056                 // 'processing-instruction' 'after'
     || lk == 38482                 // 'attribute' 'and'
     || lk == 38521                 // 'element' 'and'
     || lk == 38584                 // 'namespace' 'and'
     || lk == 38616                 // 'processing-instruction' 'and'
     || lk == 40530                 // 'attribute' 'as'
     || lk == 40569                 // 'element' 'as'
     || lk == 40632                 // 'namespace' 'as'
     || lk == 40664                 // 'processing-instruction' 'as'
     || lk == 41042                 // 'attribute' 'ascending'
     || lk == 41081                 // 'element' 'ascending'
     || lk == 41144                 // 'namespace' 'ascending'
     || lk == 41176                 // 'processing-instruction' 'ascending'
     || lk == 41554                 // 'attribute' 'at'
     || lk == 41593                 // 'element' 'at'
     || lk == 41656                 // 'namespace' 'at'
     || lk == 41688                 // 'processing-instruction' 'at'
     || lk == 43090                 // 'attribute' 'before'
     || lk == 43129                 // 'element' 'before'
     || lk == 43192                 // 'namespace' 'before'
     || lk == 43224                 // 'processing-instruction' 'before'
     || lk == 45138                 // 'attribute' 'case'
     || lk == 45177                 // 'element' 'case'
     || lk == 45240                 // 'namespace' 'case'
     || lk == 45272                 // 'processing-instruction' 'case'
     || lk == 45650                 // 'attribute' 'cast'
     || lk == 45689                 // 'element' 'cast'
     || lk == 45752                 // 'namespace' 'cast'
     || lk == 45784                 // 'processing-instruction' 'cast'
     || lk == 46162                 // 'attribute' 'castable'
     || lk == 46201                 // 'element' 'castable'
     || lk == 46264                 // 'namespace' 'castable'
     || lk == 46296                 // 'processing-instruction' 'castable'
     || lk == 48210                 // 'attribute' 'collation'
     || lk == 48249                 // 'element' 'collation'
     || lk == 48312                 // 'namespace' 'collation'
     || lk == 48344                 // 'processing-instruction' 'collation'
     || lk == 53842                 // 'attribute' 'count'
     || lk == 53881                 // 'element' 'count'
     || lk == 53944                 // 'namespace' 'count'
     || lk == 53976                 // 'processing-instruction' 'count'
     || lk == 55890                 // 'attribute' 'default'
     || lk == 55929                 // 'element' 'default'
     || lk == 55992                 // 'namespace' 'default'
     || lk == 56024                 // 'processing-instruction' 'default'
     || lk == 57938                 // 'attribute' 'descending'
     || lk == 57977                 // 'element' 'descending'
     || lk == 58040                 // 'namespace' 'descending'
     || lk == 58072                 // 'processing-instruction' 'descending'
     || lk == 60498                 // 'attribute' 'div'
     || lk == 60537                 // 'element' 'div'
     || lk == 60600                 // 'namespace' 'div'
     || lk == 60632                 // 'processing-instruction' 'div'
     || lk == 62546                 // 'attribute' 'else'
     || lk == 62585                 // 'element' 'else'
     || lk == 62648                 // 'namespace' 'else'
     || lk == 62680                 // 'processing-instruction' 'else'
     || lk == 63058                 // 'attribute' 'empty'
     || lk == 63097                 // 'element' 'empty'
     || lk == 63160                 // 'namespace' 'empty'
     || lk == 63192                 // 'processing-instruction' 'empty'
     || lk == 64594                 // 'attribute' 'end'
     || lk == 64633                 // 'element' 'end'
     || lk == 64696                 // 'namespace' 'end'
     || lk == 64728                 // 'processing-instruction' 'end'
     || lk == 65618                 // 'attribute' 'eq'
     || lk == 65657                 // 'element' 'eq'
     || lk == 65720                 // 'namespace' 'eq'
     || lk == 65752                 // 'processing-instruction' 'eq'
     || lk == 67154                 // 'attribute' 'except'
     || lk == 67193                 // 'element' 'except'
     || lk == 67256                 // 'namespace' 'except'
     || lk == 67288                 // 'processing-instruction' 'except'
     || lk == 70226                 // 'attribute' 'for'
     || lk == 70265                 // 'element' 'for'
     || lk == 70328                 // 'namespace' 'for'
     || lk == 70360                 // 'processing-instruction' 'for'
     || lk == 74834                 // 'attribute' 'ge'
     || lk == 74873                 // 'element' 'ge'
     || lk == 74936                 // 'namespace' 'ge'
     || lk == 74968                 // 'processing-instruction' 'ge'
     || lk == 75858                 // 'attribute' 'group'
     || lk == 75897                 // 'element' 'group'
     || lk == 75960                 // 'namespace' 'group'
     || lk == 75992                 // 'processing-instruction' 'group'
     || lk == 76882                 // 'attribute' 'gt'
     || lk == 76921                 // 'element' 'gt'
     || lk == 76984                 // 'namespace' 'gt'
     || lk == 77016                 // 'processing-instruction' 'gt'
     || lk == 77394                 // 'attribute' 'idiv'
     || lk == 77433                 // 'element' 'idiv'
     || lk == 77496                 // 'namespace' 'idiv'
     || lk == 77528                 // 'processing-instruction' 'idiv'
     || lk == 82002                 // 'attribute' 'instance'
     || lk == 82041                 // 'element' 'instance'
     || lk == 82104                 // 'namespace' 'instance'
     || lk == 82136                 // 'processing-instruction' 'instance'
     || lk == 83026                 // 'attribute' 'intersect'
     || lk == 83065                 // 'element' 'intersect'
     || lk == 83128                 // 'namespace' 'intersect'
     || lk == 83160                 // 'processing-instruction' 'intersect'
     || lk == 83538                 // 'attribute' 'into'
     || lk == 83577                 // 'element' 'into'
     || lk == 83640                 // 'namespace' 'into'
     || lk == 83672                 // 'processing-instruction' 'into'
     || lk == 84050                 // 'attribute' 'is'
     || lk == 84089                 // 'element' 'is'
     || lk == 84152                 // 'namespace' 'is'
     || lk == 84184                 // 'processing-instruction' 'is'
     || lk == 88146                 // 'attribute' 'le'
     || lk == 88185                 // 'element' 'le'
     || lk == 88248                 // 'namespace' 'le'
     || lk == 88280                 // 'processing-instruction' 'le'
     || lk == 89170                 // 'attribute' 'let'
     || lk == 89209                 // 'element' 'let'
     || lk == 89272                 // 'namespace' 'let'
     || lk == 89304                 // 'processing-instruction' 'let'
     || lk == 91218                 // 'attribute' 'lt'
     || lk == 91257                 // 'element' 'lt'
     || lk == 91320                 // 'namespace' 'lt'
     || lk == 91352                 // 'processing-instruction' 'lt'
     || lk == 92242                 // 'attribute' 'mod'
     || lk == 92281                 // 'element' 'mod'
     || lk == 92344                 // 'namespace' 'mod'
     || lk == 92376                 // 'processing-instruction' 'mod'
     || lk == 92754                 // 'attribute' 'modify'
     || lk == 92793                 // 'element' 'modify'
     || lk == 92856                 // 'namespace' 'modify'
     || lk == 92888                 // 'processing-instruction' 'modify'
     || lk == 95314                 // 'attribute' 'ne'
     || lk == 95353                 // 'element' 'ne'
     || lk == 95416                 // 'namespace' 'ne'
     || lk == 95448                 // 'processing-instruction' 'ne'
     || lk == 101458                // 'attribute' 'only'
     || lk == 101497                // 'element' 'only'
     || lk == 101560                // 'namespace' 'only'
     || lk == 101592                // 'processing-instruction' 'only'
     || lk == 102482                // 'attribute' 'or'
     || lk == 102521                // 'element' 'or'
     || lk == 102584                // 'namespace' 'or'
     || lk == 102616                // 'processing-instruction' 'or'
     || lk == 102994                // 'attribute' 'order'
     || lk == 103033                // 'element' 'order'
     || lk == 103096                // 'namespace' 'order'
     || lk == 103128                // 'processing-instruction' 'order'
     || lk == 112722                // 'attribute' 'return'
     || lk == 112761                // 'element' 'return'
     || lk == 112824                // 'namespace' 'return'
     || lk == 112856                // 'processing-instruction' 'return'
     || lk == 114770                // 'attribute' 'satisfies'
     || lk == 114809                // 'element' 'satisfies'
     || lk == 114872                // 'namespace' 'satisfies'
     || lk == 114904                // 'processing-instruction' 'satisfies'
     || lk == 120914                // 'attribute' 'stable'
     || lk == 120953                // 'element' 'stable'
     || lk == 121016                // 'namespace' 'stable'
     || lk == 121048                // 'processing-instruction' 'stable'
     || lk == 121426                // 'attribute' 'start'
     || lk == 121465                // 'element' 'start'
     || lk == 121528                // 'namespace' 'start'
     || lk == 121560                // 'processing-instruction' 'start'
     || lk == 127058                // 'attribute' 'to'
     || lk == 127097                // 'element' 'to'
     || lk == 127160                // 'namespace' 'to'
     || lk == 127192                // 'processing-instruction' 'to'
     || lk == 127570                // 'attribute' 'treat'
     || lk == 127609                // 'element' 'treat'
     || lk == 127672                // 'namespace' 'treat'
     || lk == 127704                // 'processing-instruction' 'treat'
     || lk == 130130                // 'attribute' 'union'
     || lk == 130169                // 'element' 'union'
     || lk == 130232                // 'namespace' 'union'
     || lk == 130264                // 'processing-instruction' 'union'
     || lk == 136274                // 'attribute' 'where'
     || lk == 136313                // 'element' 'where'
     || lk == 136376                // 'namespace' 'where'
     || lk == 136408                // 'processing-instruction' 'where'
     || lk == 138322                // 'attribute' 'with'
     || lk == 138361                // 'element' 'with'
     || lk == 138424                // 'namespace' 'with'
     || lk == 138456)               // 'processing-instruction' 'with'
    {
      lk = memoized(3, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_PostfixExpr();
          lk = -1;
        }
        catch (p1A)
        {
          lk = -2;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(3, e0, lk);
      }
    }
    switch (lk)
    {
    case -1:
    case 8:                         // IntegerLiteral
    case 9:                         // DecimalLiteral
    case 10:                        // DoubleLiteral
    case 11:                        // StringLiteral
    case 31:                        // '$'
    case 32:                        // '%'
    case 34:                        // '('
    case 44:                        // '.'
    case 54:                        // '<'
    case 55:                        // '<!--'
    case 59:                        // '<?'
    case 68:                        // '['
    case 276:                       // '{'
    case 278:                       // '{|'
    case 3154:                      // 'attribute' EQName^Token
    case 3193:                      // 'element' EQName^Token
    case 9912:                      // 'namespace' NCName^Token
    case 9944:                      // 'processing-instruction' NCName^Token
    case 14854:                     // EQName^Token '#'
    case 14918:                     // 'after' '#'
    case 14920:                     // 'allowing' '#'
    case 14921:                     // 'ancestor' '#'
    case 14922:                     // 'ancestor-or-self' '#'
    case 14923:                     // 'and' '#'
    case 14925:                     // 'append' '#'
    case 14926:                     // 'array' '#'
    case 14927:                     // 'as' '#'
    case 14928:                     // 'ascending' '#'
    case 14929:                     // 'at' '#'
    case 14930:                     // 'attribute' '#'
    case 14931:                     // 'base-uri' '#'
    case 14932:                     // 'before' '#'
    case 14933:                     // 'boundary-space' '#'
    case 14934:                     // 'break' '#'
    case 14936:                     // 'case' '#'
    case 14937:                     // 'cast' '#'
    case 14938:                     // 'castable' '#'
    case 14939:                     // 'catch' '#'
    case 14941:                     // 'child' '#'
    case 14942:                     // 'collation' '#'
    case 14944:                     // 'comment' '#'
    case 14945:                     // 'constraint' '#'
    case 14946:                     // 'construction' '#'
    case 14949:                     // 'context' '#'
    case 14950:                     // 'continue' '#'
    case 14951:                     // 'copy' '#'
    case 14952:                     // 'copy-namespaces' '#'
    case 14953:                     // 'count' '#'
    case 14954:                     // 'decimal-format' '#'
    case 14956:                     // 'declare' '#'
    case 14957:                     // 'default' '#'
    case 14958:                     // 'delete' '#'
    case 14959:                     // 'descendant' '#'
    case 14960:                     // 'descendant-or-self' '#'
    case 14961:                     // 'descending' '#'
    case 14966:                     // 'div' '#'
    case 14967:                     // 'document' '#'
    case 14968:                     // 'document-node' '#'
    case 14969:                     // 'element' '#'
    case 14970:                     // 'else' '#'
    case 14971:                     // 'empty' '#'
    case 14972:                     // 'empty-sequence' '#'
    case 14973:                     // 'encoding' '#'
    case 14974:                     // 'end' '#'
    case 14976:                     // 'eq' '#'
    case 14977:                     // 'every' '#'
    case 14979:                     // 'except' '#'
    case 14980:                     // 'exit' '#'
    case 14981:                     // 'external' '#'
    case 14982:                     // 'first' '#'
    case 14983:                     // 'following' '#'
    case 14984:                     // 'following-sibling' '#'
    case 14985:                     // 'for' '#'
    case 14989:                     // 'ft-option' '#'
    case 14993:                     // 'function' '#'
    case 14994:                     // 'ge' '#'
    case 14996:                     // 'group' '#'
    case 14998:                     // 'gt' '#'
    case 14999:                     // 'idiv' '#'
    case 15000:                     // 'if' '#'
    case 15001:                     // 'import' '#'
    case 15002:                     // 'in' '#'
    case 15003:                     // 'index' '#'
    case 15007:                     // 'insert' '#'
    case 15008:                     // 'instance' '#'
    case 15009:                     // 'integrity' '#'
    case 15010:                     // 'intersect' '#'
    case 15011:                     // 'into' '#'
    case 15012:                     // 'is' '#'
    case 15013:                     // 'item' '#'
    case 15014:                     // 'json' '#'
    case 15015:                     // 'json-item' '#'
    case 15018:                     // 'last' '#'
    case 15019:                     // 'lax' '#'
    case 15020:                     // 'le' '#'
    case 15022:                     // 'let' '#'
    case 15024:                     // 'loop' '#'
    case 15026:                     // 'lt' '#'
    case 15028:                     // 'mod' '#'
    case 15029:                     // 'modify' '#'
    case 15030:                     // 'module' '#'
    case 15032:                     // 'namespace' '#'
    case 15033:                     // 'namespace-node' '#'
    case 15034:                     // 'ne' '#'
    case 15039:                     // 'node' '#'
    case 15040:                     // 'nodes' '#'
    case 15042:                     // 'object' '#'
    case 15046:                     // 'only' '#'
    case 15047:                     // 'option' '#'
    case 15048:                     // 'or' '#'
    case 15049:                     // 'order' '#'
    case 15050:                     // 'ordered' '#'
    case 15051:                     // 'ordering' '#'
    case 15054:                     // 'parent' '#'
    case 15060:                     // 'preceding' '#'
    case 15061:                     // 'preceding-sibling' '#'
    case 15064:                     // 'processing-instruction' '#'
    case 15066:                     // 'rename' '#'
    case 15067:                     // 'replace' '#'
    case 15068:                     // 'return' '#'
    case 15069:                     // 'returning' '#'
    case 15070:                     // 'revalidation' '#'
    case 15072:                     // 'satisfies' '#'
    case 15073:                     // 'schema' '#'
    case 15074:                     // 'schema-attribute' '#'
    case 15075:                     // 'schema-element' '#'
    case 15076:                     // 'score' '#'
    case 15077:                     // 'self' '#'
    case 15082:                     // 'sliding' '#'
    case 15083:                     // 'some' '#'
    case 15084:                     // 'stable' '#'
    case 15085:                     // 'start' '#'
    case 15088:                     // 'strict' '#'
    case 15090:                     // 'structured-item' '#'
    case 15091:                     // 'switch' '#'
    case 15092:                     // 'text' '#'
    case 15096:                     // 'to' '#'
    case 15097:                     // 'treat' '#'
    case 15098:                     // 'try' '#'
    case 15099:                     // 'tumbling' '#'
    case 15100:                     // 'type' '#'
    case 15101:                     // 'typeswitch' '#'
    case 15102:                     // 'union' '#'
    case 15104:                     // 'unordered' '#'
    case 15105:                     // 'updating' '#'
    case 15108:                     // 'validate' '#'
    case 15109:                     // 'value' '#'
    case 15110:                     // 'variable' '#'
    case 15111:                     // 'version' '#'
    case 15114:                     // 'where' '#'
    case 15115:                     // 'while' '#'
    case 15118:                     // 'with' '#'
    case 15122:                     // 'xquery' '#'
    case 17414:                     // EQName^Token '('
    case 17478:                     // 'after' '('
    case 17480:                     // 'allowing' '('
    case 17481:                     // 'ancestor' '('
    case 17482:                     // 'ancestor-or-self' '('
    case 17483:                     // 'and' '('
    case 17485:                     // 'append' '('
    case 17487:                     // 'as' '('
    case 17488:                     // 'ascending' '('
    case 17489:                     // 'at' '('
    case 17491:                     // 'base-uri' '('
    case 17492:                     // 'before' '('
    case 17493:                     // 'boundary-space' '('
    case 17494:                     // 'break' '('
    case 17496:                     // 'case' '('
    case 17497:                     // 'cast' '('
    case 17498:                     // 'castable' '('
    case 17499:                     // 'catch' '('
    case 17501:                     // 'child' '('
    case 17502:                     // 'collation' '('
    case 17505:                     // 'constraint' '('
    case 17506:                     // 'construction' '('
    case 17509:                     // 'context' '('
    case 17510:                     // 'continue' '('
    case 17511:                     // 'copy' '('
    case 17512:                     // 'copy-namespaces' '('
    case 17513:                     // 'count' '('
    case 17514:                     // 'decimal-format' '('
    case 17516:                     // 'declare' '('
    case 17517:                     // 'default' '('
    case 17518:                     // 'delete' '('
    case 17519:                     // 'descendant' '('
    case 17520:                     // 'descendant-or-self' '('
    case 17521:                     // 'descending' '('
    case 17526:                     // 'div' '('
    case 17527:                     // 'document' '('
    case 17530:                     // 'else' '('
    case 17531:                     // 'empty' '('
    case 17533:                     // 'encoding' '('
    case 17534:                     // 'end' '('
    case 17536:                     // 'eq' '('
    case 17537:                     // 'every' '('
    case 17539:                     // 'except' '('
    case 17540:                     // 'exit' '('
    case 17541:                     // 'external' '('
    case 17542:                     // 'first' '('
    case 17543:                     // 'following' '('
    case 17544:                     // 'following-sibling' '('
    case 17545:                     // 'for' '('
    case 17549:                     // 'ft-option' '('
    case 17553:                     // 'function' '('
    case 17554:                     // 'ge' '('
    case 17556:                     // 'group' '('
    case 17558:                     // 'gt' '('
    case 17559:                     // 'idiv' '('
    case 17561:                     // 'import' '('
    case 17562:                     // 'in' '('
    case 17563:                     // 'index' '('
    case 17567:                     // 'insert' '('
    case 17568:                     // 'instance' '('
    case 17569:                     // 'integrity' '('
    case 17570:                     // 'intersect' '('
    case 17571:                     // 'into' '('
    case 17572:                     // 'is' '('
    case 17574:                     // 'json' '('
    case 17578:                     // 'last' '('
    case 17579:                     // 'lax' '('
    case 17580:                     // 'le' '('
    case 17582:                     // 'let' '('
    case 17584:                     // 'loop' '('
    case 17586:                     // 'lt' '('
    case 17588:                     // 'mod' '('
    case 17589:                     // 'modify' '('
    case 17590:                     // 'module' '('
    case 17592:                     // 'namespace' '('
    case 17594:                     // 'ne' '('
    case 17600:                     // 'nodes' '('
    case 17602:                     // 'object' '('
    case 17606:                     // 'only' '('
    case 17607:                     // 'option' '('
    case 17608:                     // 'or' '('
    case 17609:                     // 'order' '('
    case 17610:                     // 'ordered' '('
    case 17611:                     // 'ordering' '('
    case 17614:                     // 'parent' '('
    case 17620:                     // 'preceding' '('
    case 17621:                     // 'preceding-sibling' '('
    case 17626:                     // 'rename' '('
    case 17627:                     // 'replace' '('
    case 17628:                     // 'return' '('
    case 17629:                     // 'returning' '('
    case 17630:                     // 'revalidation' '('
    case 17632:                     // 'satisfies' '('
    case 17633:                     // 'schema' '('
    case 17636:                     // 'score' '('
    case 17637:                     // 'self' '('
    case 17642:                     // 'sliding' '('
    case 17643:                     // 'some' '('
    case 17644:                     // 'stable' '('
    case 17645:                     // 'start' '('
    case 17648:                     // 'strict' '('
    case 17656:                     // 'to' '('
    case 17657:                     // 'treat' '('
    case 17658:                     // 'try' '('
    case 17659:                     // 'tumbling' '('
    case 17660:                     // 'type' '('
    case 17662:                     // 'union' '('
    case 17664:                     // 'unordered' '('
    case 17665:                     // 'updating' '('
    case 17668:                     // 'validate' '('
    case 17669:                     // 'value' '('
    case 17670:                     // 'variable' '('
    case 17671:                     // 'version' '('
    case 17674:                     // 'where' '('
    case 17675:                     // 'while' '('
    case 17678:                     // 'with' '('
    case 17682:                     // 'xquery' '('
    case 36946:                     // 'attribute' 'allowing'
    case 36985:                     // 'element' 'allowing'
    case 37048:                     // 'namespace' 'allowing'
    case 37080:                     // 'processing-instruction' 'allowing'
    case 37458:                     // 'attribute' 'ancestor'
    case 37497:                     // 'element' 'ancestor'
    case 37560:                     // 'namespace' 'ancestor'
    case 37592:                     // 'processing-instruction' 'ancestor'
    case 37970:                     // 'attribute' 'ancestor-or-self'
    case 38009:                     // 'element' 'ancestor-or-self'
    case 38072:                     // 'namespace' 'ancestor-or-self'
    case 38104:                     // 'processing-instruction' 'ancestor-or-self'
    case 39506:                     // 'attribute' 'append'
    case 39545:                     // 'element' 'append'
    case 39608:                     // 'namespace' 'append'
    case 39640:                     // 'processing-instruction' 'append'
    case 40018:                     // 'attribute' 'array'
    case 40057:                     // 'element' 'array'
    case 42066:                     // 'attribute' 'attribute'
    case 42105:                     // 'element' 'attribute'
    case 42168:                     // 'namespace' 'attribute'
    case 42200:                     // 'processing-instruction' 'attribute'
    case 42578:                     // 'attribute' 'base-uri'
    case 42617:                     // 'element' 'base-uri'
    case 42680:                     // 'namespace' 'base-uri'
    case 42712:                     // 'processing-instruction' 'base-uri'
    case 43602:                     // 'attribute' 'boundary-space'
    case 43641:                     // 'element' 'boundary-space'
    case 43704:                     // 'namespace' 'boundary-space'
    case 43736:                     // 'processing-instruction' 'boundary-space'
    case 44114:                     // 'attribute' 'break'
    case 44153:                     // 'element' 'break'
    case 44216:                     // 'namespace' 'break'
    case 44248:                     // 'processing-instruction' 'break'
    case 46674:                     // 'attribute' 'catch'
    case 46713:                     // 'element' 'catch'
    case 46776:                     // 'namespace' 'catch'
    case 46808:                     // 'processing-instruction' 'catch'
    case 47698:                     // 'attribute' 'child'
    case 47737:                     // 'element' 'child'
    case 47800:                     // 'namespace' 'child'
    case 47832:                     // 'processing-instruction' 'child'
    case 49234:                     // 'attribute' 'comment'
    case 49273:                     // 'element' 'comment'
    case 49336:                     // 'namespace' 'comment'
    case 49368:                     // 'processing-instruction' 'comment'
    case 49746:                     // 'attribute' 'constraint'
    case 49785:                     // 'element' 'constraint'
    case 49848:                     // 'namespace' 'constraint'
    case 49880:                     // 'processing-instruction' 'constraint'
    case 50258:                     // 'attribute' 'construction'
    case 50297:                     // 'element' 'construction'
    case 50360:                     // 'namespace' 'construction'
    case 50392:                     // 'processing-instruction' 'construction'
    case 51794:                     // 'attribute' 'context'
    case 51833:                     // 'element' 'context'
    case 51896:                     // 'namespace' 'context'
    case 51928:                     // 'processing-instruction' 'context'
    case 52306:                     // 'attribute' 'continue'
    case 52345:                     // 'element' 'continue'
    case 52408:                     // 'namespace' 'continue'
    case 52440:                     // 'processing-instruction' 'continue'
    case 52818:                     // 'attribute' 'copy'
    case 52857:                     // 'element' 'copy'
    case 52920:                     // 'namespace' 'copy'
    case 52952:                     // 'processing-instruction' 'copy'
    case 53330:                     // 'attribute' 'copy-namespaces'
    case 53369:                     // 'element' 'copy-namespaces'
    case 53432:                     // 'namespace' 'copy-namespaces'
    case 53464:                     // 'processing-instruction' 'copy-namespaces'
    case 54354:                     // 'attribute' 'decimal-format'
    case 54393:                     // 'element' 'decimal-format'
    case 54456:                     // 'namespace' 'decimal-format'
    case 54488:                     // 'processing-instruction' 'decimal-format'
    case 55378:                     // 'attribute' 'declare'
    case 55417:                     // 'element' 'declare'
    case 55480:                     // 'namespace' 'declare'
    case 55512:                     // 'processing-instruction' 'declare'
    case 56402:                     // 'attribute' 'delete'
    case 56441:                     // 'element' 'delete'
    case 56504:                     // 'namespace' 'delete'
    case 56536:                     // 'processing-instruction' 'delete'
    case 56914:                     // 'attribute' 'descendant'
    case 56953:                     // 'element' 'descendant'
    case 57016:                     // 'namespace' 'descendant'
    case 57048:                     // 'processing-instruction' 'descendant'
    case 57426:                     // 'attribute' 'descendant-or-self'
    case 57465:                     // 'element' 'descendant-or-self'
    case 57528:                     // 'namespace' 'descendant-or-self'
    case 57560:                     // 'processing-instruction' 'descendant-or-self'
    case 61010:                     // 'attribute' 'document'
    case 61049:                     // 'element' 'document'
    case 61112:                     // 'namespace' 'document'
    case 61144:                     // 'processing-instruction' 'document'
    case 61522:                     // 'attribute' 'document-node'
    case 61561:                     // 'element' 'document-node'
    case 61624:                     // 'namespace' 'document-node'
    case 61656:                     // 'processing-instruction' 'document-node'
    case 62034:                     // 'attribute' 'element'
    case 62073:                     // 'element' 'element'
    case 62136:                     // 'namespace' 'element'
    case 62168:                     // 'processing-instruction' 'element'
    case 63570:                     // 'attribute' 'empty-sequence'
    case 63609:                     // 'element' 'empty-sequence'
    case 63672:                     // 'namespace' 'empty-sequence'
    case 63704:                     // 'processing-instruction' 'empty-sequence'
    case 64082:                     // 'attribute' 'encoding'
    case 64121:                     // 'element' 'encoding'
    case 64184:                     // 'namespace' 'encoding'
    case 64216:                     // 'processing-instruction' 'encoding'
    case 66130:                     // 'attribute' 'every'
    case 66169:                     // 'element' 'every'
    case 66232:                     // 'namespace' 'every'
    case 66264:                     // 'processing-instruction' 'every'
    case 67666:                     // 'attribute' 'exit'
    case 67705:                     // 'element' 'exit'
    case 67768:                     // 'namespace' 'exit'
    case 67800:                     // 'processing-instruction' 'exit'
    case 68178:                     // 'attribute' 'external'
    case 68217:                     // 'element' 'external'
    case 68280:                     // 'namespace' 'external'
    case 68312:                     // 'processing-instruction' 'external'
    case 68690:                     // 'attribute' 'first'
    case 68729:                     // 'element' 'first'
    case 68792:                     // 'namespace' 'first'
    case 68824:                     // 'processing-instruction' 'first'
    case 69202:                     // 'attribute' 'following'
    case 69241:                     // 'element' 'following'
    case 69304:                     // 'namespace' 'following'
    case 69336:                     // 'processing-instruction' 'following'
    case 69714:                     // 'attribute' 'following-sibling'
    case 69753:                     // 'element' 'following-sibling'
    case 69816:                     // 'namespace' 'following-sibling'
    case 69848:                     // 'processing-instruction' 'following-sibling'
    case 72274:                     // 'attribute' 'ft-option'
    case 72313:                     // 'element' 'ft-option'
    case 72376:                     // 'namespace' 'ft-option'
    case 72408:                     // 'processing-instruction' 'ft-option'
    case 74322:                     // 'attribute' 'function'
    case 74361:                     // 'element' 'function'
    case 74424:                     // 'namespace' 'function'
    case 74456:                     // 'processing-instruction' 'function'
    case 77906:                     // 'attribute' 'if'
    case 77945:                     // 'element' 'if'
    case 78008:                     // 'namespace' 'if'
    case 78040:                     // 'processing-instruction' 'if'
    case 78418:                     // 'attribute' 'import'
    case 78457:                     // 'element' 'import'
    case 78520:                     // 'namespace' 'import'
    case 78552:                     // 'processing-instruction' 'import'
    case 78930:                     // 'attribute' 'in'
    case 78969:                     // 'element' 'in'
    case 79032:                     // 'namespace' 'in'
    case 79064:                     // 'processing-instruction' 'in'
    case 79442:                     // 'attribute' 'index'
    case 79481:                     // 'element' 'index'
    case 79544:                     // 'namespace' 'index'
    case 79576:                     // 'processing-instruction' 'index'
    case 81490:                     // 'attribute' 'insert'
    case 81529:                     // 'element' 'insert'
    case 81592:                     // 'namespace' 'insert'
    case 81624:                     // 'processing-instruction' 'insert'
    case 82514:                     // 'attribute' 'integrity'
    case 82553:                     // 'element' 'integrity'
    case 82616:                     // 'namespace' 'integrity'
    case 82648:                     // 'processing-instruction' 'integrity'
    case 84562:                     // 'attribute' 'item'
    case 84601:                     // 'element' 'item'
    case 84664:                     // 'namespace' 'item'
    case 84696:                     // 'processing-instruction' 'item'
    case 85074:                     // 'attribute' 'json'
    case 85113:                     // 'element' 'json'
    case 85176:                     // 'namespace' 'json'
    case 85208:                     // 'processing-instruction' 'json'
    case 85586:                     // 'attribute' 'json-item'
    case 85625:                     // 'element' 'json-item'
    case 87122:                     // 'attribute' 'last'
    case 87161:                     // 'element' 'last'
    case 87224:                     // 'namespace' 'last'
    case 87256:                     // 'processing-instruction' 'last'
    case 87634:                     // 'attribute' 'lax'
    case 87673:                     // 'element' 'lax'
    case 87736:                     // 'namespace' 'lax'
    case 87768:                     // 'processing-instruction' 'lax'
    case 90194:                     // 'attribute' 'loop'
    case 90233:                     // 'element' 'loop'
    case 90296:                     // 'namespace' 'loop'
    case 90328:                     // 'processing-instruction' 'loop'
    case 93266:                     // 'attribute' 'module'
    case 93305:                     // 'element' 'module'
    case 93368:                     // 'namespace' 'module'
    case 93400:                     // 'processing-instruction' 'module'
    case 94290:                     // 'attribute' 'namespace'
    case 94329:                     // 'element' 'namespace'
    case 94392:                     // 'namespace' 'namespace'
    case 94424:                     // 'processing-instruction' 'namespace'
    case 94802:                     // 'attribute' 'namespace-node'
    case 94841:                     // 'element' 'namespace-node'
    case 94904:                     // 'namespace' 'namespace-node'
    case 94936:                     // 'processing-instruction' 'namespace-node'
    case 97874:                     // 'attribute' 'node'
    case 97913:                     // 'element' 'node'
    case 97976:                     // 'namespace' 'node'
    case 98008:                     // 'processing-instruction' 'node'
    case 98386:                     // 'attribute' 'nodes'
    case 98425:                     // 'element' 'nodes'
    case 98488:                     // 'namespace' 'nodes'
    case 98520:                     // 'processing-instruction' 'nodes'
    case 99410:                     // 'attribute' 'object'
    case 99449:                     // 'element' 'object'
    case 99512:                     // 'namespace' 'object'
    case 99544:                     // 'processing-instruction' 'object'
    case 101970:                    // 'attribute' 'option'
    case 102009:                    // 'element' 'option'
    case 102072:                    // 'namespace' 'option'
    case 102104:                    // 'processing-instruction' 'option'
    case 103506:                    // 'attribute' 'ordered'
    case 103545:                    // 'element' 'ordered'
    case 103608:                    // 'namespace' 'ordered'
    case 103640:                    // 'processing-instruction' 'ordered'
    case 104018:                    // 'attribute' 'ordering'
    case 104057:                    // 'element' 'ordering'
    case 104120:                    // 'namespace' 'ordering'
    case 104152:                    // 'processing-instruction' 'ordering'
    case 105554:                    // 'attribute' 'parent'
    case 105593:                    // 'element' 'parent'
    case 105656:                    // 'namespace' 'parent'
    case 105688:                    // 'processing-instruction' 'parent'
    case 108626:                    // 'attribute' 'preceding'
    case 108665:                    // 'element' 'preceding'
    case 108728:                    // 'namespace' 'preceding'
    case 108760:                    // 'processing-instruction' 'preceding'
    case 109138:                    // 'attribute' 'preceding-sibling'
    case 109177:                    // 'element' 'preceding-sibling'
    case 109240:                    // 'namespace' 'preceding-sibling'
    case 109272:                    // 'processing-instruction' 'preceding-sibling'
    case 110674:                    // 'attribute' 'processing-instruction'
    case 110713:                    // 'element' 'processing-instruction'
    case 110776:                    // 'namespace' 'processing-instruction'
    case 110808:                    // 'processing-instruction' 'processing-instruction'
    case 111698:                    // 'attribute' 'rename'
    case 111737:                    // 'element' 'rename'
    case 111800:                    // 'namespace' 'rename'
    case 111832:                    // 'processing-instruction' 'rename'
    case 112210:                    // 'attribute' 'replace'
    case 112249:                    // 'element' 'replace'
    case 112312:                    // 'namespace' 'replace'
    case 112344:                    // 'processing-instruction' 'replace'
    case 113234:                    // 'attribute' 'returning'
    case 113273:                    // 'element' 'returning'
    case 113336:                    // 'namespace' 'returning'
    case 113368:                    // 'processing-instruction' 'returning'
    case 113746:                    // 'attribute' 'revalidation'
    case 113785:                    // 'element' 'revalidation'
    case 113848:                    // 'namespace' 'revalidation'
    case 113880:                    // 'processing-instruction' 'revalidation'
    case 115282:                    // 'attribute' 'schema'
    case 115321:                    // 'element' 'schema'
    case 115384:                    // 'namespace' 'schema'
    case 115416:                    // 'processing-instruction' 'schema'
    case 115794:                    // 'attribute' 'schema-attribute'
    case 115833:                    // 'element' 'schema-attribute'
    case 115896:                    // 'namespace' 'schema-attribute'
    case 115928:                    // 'processing-instruction' 'schema-attribute'
    case 116306:                    // 'attribute' 'schema-element'
    case 116345:                    // 'element' 'schema-element'
    case 116408:                    // 'namespace' 'schema-element'
    case 116440:                    // 'processing-instruction' 'schema-element'
    case 116818:                    // 'attribute' 'score'
    case 116857:                    // 'element' 'score'
    case 116920:                    // 'namespace' 'score'
    case 116952:                    // 'processing-instruction' 'score'
    case 117330:                    // 'attribute' 'self'
    case 117369:                    // 'element' 'self'
    case 117432:                    // 'namespace' 'self'
    case 117464:                    // 'processing-instruction' 'self'
    case 119890:                    // 'attribute' 'sliding'
    case 119929:                    // 'element' 'sliding'
    case 119992:                    // 'namespace' 'sliding'
    case 120024:                    // 'processing-instruction' 'sliding'
    case 120402:                    // 'attribute' 'some'
    case 120441:                    // 'element' 'some'
    case 120504:                    // 'namespace' 'some'
    case 120536:                    // 'processing-instruction' 'some'
    case 122962:                    // 'attribute' 'strict'
    case 123001:                    // 'element' 'strict'
    case 123064:                    // 'namespace' 'strict'
    case 123096:                    // 'processing-instruction' 'strict'
    case 123986:                    // 'attribute' 'structured-item'
    case 124025:                    // 'element' 'structured-item'
    case 124498:                    // 'attribute' 'switch'
    case 124537:                    // 'element' 'switch'
    case 124600:                    // 'namespace' 'switch'
    case 124632:                    // 'processing-instruction' 'switch'
    case 125010:                    // 'attribute' 'text'
    case 125049:                    // 'element' 'text'
    case 125112:                    // 'namespace' 'text'
    case 125144:                    // 'processing-instruction' 'text'
    case 128082:                    // 'attribute' 'try'
    case 128121:                    // 'element' 'try'
    case 128184:                    // 'namespace' 'try'
    case 128216:                    // 'processing-instruction' 'try'
    case 128594:                    // 'attribute' 'tumbling'
    case 128633:                    // 'element' 'tumbling'
    case 128696:                    // 'namespace' 'tumbling'
    case 128728:                    // 'processing-instruction' 'tumbling'
    case 129106:                    // 'attribute' 'type'
    case 129145:                    // 'element' 'type'
    case 129208:                    // 'namespace' 'type'
    case 129240:                    // 'processing-instruction' 'type'
    case 129618:                    // 'attribute' 'typeswitch'
    case 129657:                    // 'element' 'typeswitch'
    case 129720:                    // 'namespace' 'typeswitch'
    case 129752:                    // 'processing-instruction' 'typeswitch'
    case 131154:                    // 'attribute' 'unordered'
    case 131193:                    // 'element' 'unordered'
    case 131256:                    // 'namespace' 'unordered'
    case 131288:                    // 'processing-instruction' 'unordered'
    case 131666:                    // 'attribute' 'updating'
    case 131705:                    // 'element' 'updating'
    case 131768:                    // 'namespace' 'updating'
    case 131800:                    // 'processing-instruction' 'updating'
    case 133202:                    // 'attribute' 'validate'
    case 133241:                    // 'element' 'validate'
    case 133304:                    // 'namespace' 'validate'
    case 133336:                    // 'processing-instruction' 'validate'
    case 133714:                    // 'attribute' 'value'
    case 133753:                    // 'element' 'value'
    case 133816:                    // 'namespace' 'value'
    case 133848:                    // 'processing-instruction' 'value'
    case 134226:                    // 'attribute' 'variable'
    case 134265:                    // 'element' 'variable'
    case 134328:                    // 'namespace' 'variable'
    case 134360:                    // 'processing-instruction' 'variable'
    case 134738:                    // 'attribute' 'version'
    case 134777:                    // 'element' 'version'
    case 134840:                    // 'namespace' 'version'
    case 134872:                    // 'processing-instruction' 'version'
    case 136786:                    // 'attribute' 'while'
    case 136825:                    // 'element' 'while'
    case 136888:                    // 'namespace' 'while'
    case 136920:                    // 'processing-instruction' 'while'
    case 140370:                    // 'attribute' 'xquery'
    case 140409:                    // 'element' 'xquery'
    case 140472:                    // 'namespace' 'xquery'
    case 140504:                    // 'processing-instruction' 'xquery'
    case 141394:                    // 'attribute' '{'
    case 141408:                    // 'comment' '{'
    case 141431:                    // 'document' '{'
    case 141433:                    // 'element' '{'
    case 141496:                    // 'namespace' '{'
    case 141514:                    // 'ordered' '{'
    case 141528:                    // 'processing-instruction' '{'
    case 141556:                    // 'text' '{'
    case 141568:                    // 'unordered' '{'
      parse_PostfixExpr();
      break;
    default:
      parse_AxisStep();
    }
    eventHandler.endNonterminal("StepExpr", e0);
  }

  function try_StepExpr()
  {
    switch (l1)
    {
    case 82:                        // 'attribute'
      lookahead2W(284);             // EQName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' |
                                    // ',' | '-' | '/' | '//' | ':' | '::' | ':=' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | '[' | ']' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'by' |
                                    // 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'contains' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'paragraphs' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' |
                                    // 'sentences' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'times' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'words' | 'xquery' | '{' | '|' | '||' | '|}' | '}'
      break;
    case 121:                       // 'element'
      lookahead2W(283);             // EQName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' |
                                    // ',' | '-' | '/' | '//' | ':' | ':=' | ';' | '<' | '<<' | '<=' | '=' | '>' |
                                    // '>=' | '>>' | '[' | ']' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'by' |
                                    // 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'contains' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'paragraphs' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' |
                                    // 'sentences' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'times' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'words' | 'xquery' | '{' | '|' | '||' | '|}' | '}'
      break;
    case 184:                       // 'namespace'
    case 216:                       // 'processing-instruction'
      lookahead2W(281);             // NCName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' |
                                    // ',' | '-' | '/' | '//' | ':' | ':=' | ';' | '<' | '<<' | '<=' | '=' | '>' |
                                    // '>=' | '>>' | '[' | ']' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'contains' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'paragraphs' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sentences' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' |
                                    // 'times' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'words' | 'xquery' | '{' | '|' | '||' | '|}' | '}'
      break;
    case 96:                        // 'comment'
    case 119:                       // 'document'
    case 202:                       // 'ordered'
    case 244:                       // 'text'
    case 256:                       // 'unordered'
      lookahead2W(246);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ':=' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' |
                                    // 'cast' | 'castable' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '{' | '|' |
                                    // '||' | '|}' | '}'
      break;
    case 78:                        // 'array'
    case 124:                       // 'empty-sequence'
    case 152:                       // 'if'
    case 165:                       // 'item'
    case 167:                       // 'json-item'
    case 242:                       // 'structured-item'
    case 243:                       // 'switch'
    case 253:                       // 'typeswitch'
      lookahead2W(240);             // S^WS | EOF | '!' | '!=' | '#' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | ':=' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
      break;
    case 73:                        // 'ancestor'
    case 74:                        // 'ancestor-or-self'
    case 93:                        // 'child'
    case 111:                       // 'descendant'
    case 112:                       // 'descendant-or-self'
    case 135:                       // 'following'
    case 136:                       // 'following-sibling'
    case 206:                       // 'parent'
    case 212:                       // 'preceding'
    case 213:                       // 'preceding-sibling'
    case 229:                       // 'self'
      lookahead2W(245);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | '::' | ':=' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' |
                                    // '[' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' |
                                    // 'case' | 'cast' | 'castable' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' | '||' |
                                    // '|}' | '}'
      break;
    case 6:                         // EQName^Token
    case 70:                        // 'after'
    case 72:                        // 'allowing'
    case 75:                        // 'and'
    case 77:                        // 'append'
    case 79:                        // 'as'
    case 80:                        // 'ascending'
    case 81:                        // 'at'
    case 83:                        // 'base-uri'
    case 84:                        // 'before'
    case 85:                        // 'boundary-space'
    case 86:                        // 'break'
    case 88:                        // 'case'
    case 89:                        // 'cast'
    case 90:                        // 'castable'
    case 91:                        // 'catch'
    case 94:                        // 'collation'
    case 97:                        // 'constraint'
    case 98:                        // 'construction'
    case 101:                       // 'context'
    case 102:                       // 'continue'
    case 103:                       // 'copy'
    case 104:                       // 'copy-namespaces'
    case 105:                       // 'count'
    case 106:                       // 'decimal-format'
    case 108:                       // 'declare'
    case 109:                       // 'default'
    case 110:                       // 'delete'
    case 113:                       // 'descending'
    case 118:                       // 'div'
    case 120:                       // 'document-node'
    case 122:                       // 'else'
    case 123:                       // 'empty'
    case 125:                       // 'encoding'
    case 126:                       // 'end'
    case 128:                       // 'eq'
    case 129:                       // 'every'
    case 131:                       // 'except'
    case 132:                       // 'exit'
    case 133:                       // 'external'
    case 134:                       // 'first'
    case 137:                       // 'for'
    case 141:                       // 'ft-option'
    case 145:                       // 'function'
    case 146:                       // 'ge'
    case 148:                       // 'group'
    case 150:                       // 'gt'
    case 151:                       // 'idiv'
    case 153:                       // 'import'
    case 154:                       // 'in'
    case 155:                       // 'index'
    case 159:                       // 'insert'
    case 160:                       // 'instance'
    case 161:                       // 'integrity'
    case 162:                       // 'intersect'
    case 163:                       // 'into'
    case 164:                       // 'is'
    case 166:                       // 'json'
    case 170:                       // 'last'
    case 171:                       // 'lax'
    case 172:                       // 'le'
    case 174:                       // 'let'
    case 176:                       // 'loop'
    case 178:                       // 'lt'
    case 180:                       // 'mod'
    case 181:                       // 'modify'
    case 182:                       // 'module'
    case 185:                       // 'namespace-node'
    case 186:                       // 'ne'
    case 191:                       // 'node'
    case 192:                       // 'nodes'
    case 194:                       // 'object'
    case 198:                       // 'only'
    case 199:                       // 'option'
    case 200:                       // 'or'
    case 201:                       // 'order'
    case 203:                       // 'ordering'
    case 218:                       // 'rename'
    case 219:                       // 'replace'
    case 220:                       // 'return'
    case 221:                       // 'returning'
    case 222:                       // 'revalidation'
    case 224:                       // 'satisfies'
    case 225:                       // 'schema'
    case 226:                       // 'schema-attribute'
    case 227:                       // 'schema-element'
    case 228:                       // 'score'
    case 234:                       // 'sliding'
    case 235:                       // 'some'
    case 236:                       // 'stable'
    case 237:                       // 'start'
    case 240:                       // 'strict'
    case 248:                       // 'to'
    case 249:                       // 'treat'
    case 250:                       // 'try'
    case 251:                       // 'tumbling'
    case 252:                       // 'type'
    case 254:                       // 'union'
    case 257:                       // 'updating'
    case 260:                       // 'validate'
    case 261:                       // 'value'
    case 262:                       // 'variable'
    case 263:                       // 'version'
    case 266:                       // 'where'
    case 267:                       // 'while'
    case 270:                       // 'with'
    case 274:                       // 'xquery'
      lookahead2W(243);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ':=' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' |
                                    // 'cast' | 'castable' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' | '||' |
                                    // '|}' | '}'
      break;
    default:
      lk = l1;
    }
    if (lk == 35922                 // 'attribute' 'after'
     || lk == 35961                 // 'element' 'after'
     || lk == 36024                 // 'namespace' 'after'
     || lk == 36056                 // 'processing-instruction' 'after'
     || lk == 38482                 // 'attribute' 'and'
     || lk == 38521                 // 'element' 'and'
     || lk == 38584                 // 'namespace' 'and'
     || lk == 38616                 // 'processing-instruction' 'and'
     || lk == 40530                 // 'attribute' 'as'
     || lk == 40569                 // 'element' 'as'
     || lk == 40632                 // 'namespace' 'as'
     || lk == 40664                 // 'processing-instruction' 'as'
     || lk == 41042                 // 'attribute' 'ascending'
     || lk == 41081                 // 'element' 'ascending'
     || lk == 41144                 // 'namespace' 'ascending'
     || lk == 41176                 // 'processing-instruction' 'ascending'
     || lk == 41554                 // 'attribute' 'at'
     || lk == 41593                 // 'element' 'at'
     || lk == 41656                 // 'namespace' 'at'
     || lk == 41688                 // 'processing-instruction' 'at'
     || lk == 43090                 // 'attribute' 'before'
     || lk == 43129                 // 'element' 'before'
     || lk == 43192                 // 'namespace' 'before'
     || lk == 43224                 // 'processing-instruction' 'before'
     || lk == 45138                 // 'attribute' 'case'
     || lk == 45177                 // 'element' 'case'
     || lk == 45240                 // 'namespace' 'case'
     || lk == 45272                 // 'processing-instruction' 'case'
     || lk == 45650                 // 'attribute' 'cast'
     || lk == 45689                 // 'element' 'cast'
     || lk == 45752                 // 'namespace' 'cast'
     || lk == 45784                 // 'processing-instruction' 'cast'
     || lk == 46162                 // 'attribute' 'castable'
     || lk == 46201                 // 'element' 'castable'
     || lk == 46264                 // 'namespace' 'castable'
     || lk == 46296                 // 'processing-instruction' 'castable'
     || lk == 48210                 // 'attribute' 'collation'
     || lk == 48249                 // 'element' 'collation'
     || lk == 48312                 // 'namespace' 'collation'
     || lk == 48344                 // 'processing-instruction' 'collation'
     || lk == 53842                 // 'attribute' 'count'
     || lk == 53881                 // 'element' 'count'
     || lk == 53944                 // 'namespace' 'count'
     || lk == 53976                 // 'processing-instruction' 'count'
     || lk == 55890                 // 'attribute' 'default'
     || lk == 55929                 // 'element' 'default'
     || lk == 55992                 // 'namespace' 'default'
     || lk == 56024                 // 'processing-instruction' 'default'
     || lk == 57938                 // 'attribute' 'descending'
     || lk == 57977                 // 'element' 'descending'
     || lk == 58040                 // 'namespace' 'descending'
     || lk == 58072                 // 'processing-instruction' 'descending'
     || lk == 60498                 // 'attribute' 'div'
     || lk == 60537                 // 'element' 'div'
     || lk == 60600                 // 'namespace' 'div'
     || lk == 60632                 // 'processing-instruction' 'div'
     || lk == 62546                 // 'attribute' 'else'
     || lk == 62585                 // 'element' 'else'
     || lk == 62648                 // 'namespace' 'else'
     || lk == 62680                 // 'processing-instruction' 'else'
     || lk == 63058                 // 'attribute' 'empty'
     || lk == 63097                 // 'element' 'empty'
     || lk == 63160                 // 'namespace' 'empty'
     || lk == 63192                 // 'processing-instruction' 'empty'
     || lk == 64594                 // 'attribute' 'end'
     || lk == 64633                 // 'element' 'end'
     || lk == 64696                 // 'namespace' 'end'
     || lk == 64728                 // 'processing-instruction' 'end'
     || lk == 65618                 // 'attribute' 'eq'
     || lk == 65657                 // 'element' 'eq'
     || lk == 65720                 // 'namespace' 'eq'
     || lk == 65752                 // 'processing-instruction' 'eq'
     || lk == 67154                 // 'attribute' 'except'
     || lk == 67193                 // 'element' 'except'
     || lk == 67256                 // 'namespace' 'except'
     || lk == 67288                 // 'processing-instruction' 'except'
     || lk == 70226                 // 'attribute' 'for'
     || lk == 70265                 // 'element' 'for'
     || lk == 70328                 // 'namespace' 'for'
     || lk == 70360                 // 'processing-instruction' 'for'
     || lk == 74834                 // 'attribute' 'ge'
     || lk == 74873                 // 'element' 'ge'
     || lk == 74936                 // 'namespace' 'ge'
     || lk == 74968                 // 'processing-instruction' 'ge'
     || lk == 75858                 // 'attribute' 'group'
     || lk == 75897                 // 'element' 'group'
     || lk == 75960                 // 'namespace' 'group'
     || lk == 75992                 // 'processing-instruction' 'group'
     || lk == 76882                 // 'attribute' 'gt'
     || lk == 76921                 // 'element' 'gt'
     || lk == 76984                 // 'namespace' 'gt'
     || lk == 77016                 // 'processing-instruction' 'gt'
     || lk == 77394                 // 'attribute' 'idiv'
     || lk == 77433                 // 'element' 'idiv'
     || lk == 77496                 // 'namespace' 'idiv'
     || lk == 77528                 // 'processing-instruction' 'idiv'
     || lk == 82002                 // 'attribute' 'instance'
     || lk == 82041                 // 'element' 'instance'
     || lk == 82104                 // 'namespace' 'instance'
     || lk == 82136                 // 'processing-instruction' 'instance'
     || lk == 83026                 // 'attribute' 'intersect'
     || lk == 83065                 // 'element' 'intersect'
     || lk == 83128                 // 'namespace' 'intersect'
     || lk == 83160                 // 'processing-instruction' 'intersect'
     || lk == 83538                 // 'attribute' 'into'
     || lk == 83577                 // 'element' 'into'
     || lk == 83640                 // 'namespace' 'into'
     || lk == 83672                 // 'processing-instruction' 'into'
     || lk == 84050                 // 'attribute' 'is'
     || lk == 84089                 // 'element' 'is'
     || lk == 84152                 // 'namespace' 'is'
     || lk == 84184                 // 'processing-instruction' 'is'
     || lk == 88146                 // 'attribute' 'le'
     || lk == 88185                 // 'element' 'le'
     || lk == 88248                 // 'namespace' 'le'
     || lk == 88280                 // 'processing-instruction' 'le'
     || lk == 89170                 // 'attribute' 'let'
     || lk == 89209                 // 'element' 'let'
     || lk == 89272                 // 'namespace' 'let'
     || lk == 89304                 // 'processing-instruction' 'let'
     || lk == 91218                 // 'attribute' 'lt'
     || lk == 91257                 // 'element' 'lt'
     || lk == 91320                 // 'namespace' 'lt'
     || lk == 91352                 // 'processing-instruction' 'lt'
     || lk == 92242                 // 'attribute' 'mod'
     || lk == 92281                 // 'element' 'mod'
     || lk == 92344                 // 'namespace' 'mod'
     || lk == 92376                 // 'processing-instruction' 'mod'
     || lk == 92754                 // 'attribute' 'modify'
     || lk == 92793                 // 'element' 'modify'
     || lk == 92856                 // 'namespace' 'modify'
     || lk == 92888                 // 'processing-instruction' 'modify'
     || lk == 95314                 // 'attribute' 'ne'
     || lk == 95353                 // 'element' 'ne'
     || lk == 95416                 // 'namespace' 'ne'
     || lk == 95448                 // 'processing-instruction' 'ne'
     || lk == 101458                // 'attribute' 'only'
     || lk == 101497                // 'element' 'only'
     || lk == 101560                // 'namespace' 'only'
     || lk == 101592                // 'processing-instruction' 'only'
     || lk == 102482                // 'attribute' 'or'
     || lk == 102521                // 'element' 'or'
     || lk == 102584                // 'namespace' 'or'
     || lk == 102616                // 'processing-instruction' 'or'
     || lk == 102994                // 'attribute' 'order'
     || lk == 103033                // 'element' 'order'
     || lk == 103096                // 'namespace' 'order'
     || lk == 103128                // 'processing-instruction' 'order'
     || lk == 112722                // 'attribute' 'return'
     || lk == 112761                // 'element' 'return'
     || lk == 112824                // 'namespace' 'return'
     || lk == 112856                // 'processing-instruction' 'return'
     || lk == 114770                // 'attribute' 'satisfies'
     || lk == 114809                // 'element' 'satisfies'
     || lk == 114872                // 'namespace' 'satisfies'
     || lk == 114904                // 'processing-instruction' 'satisfies'
     || lk == 120914                // 'attribute' 'stable'
     || lk == 120953                // 'element' 'stable'
     || lk == 121016                // 'namespace' 'stable'
     || lk == 121048                // 'processing-instruction' 'stable'
     || lk == 121426                // 'attribute' 'start'
     || lk == 121465                // 'element' 'start'
     || lk == 121528                // 'namespace' 'start'
     || lk == 121560                // 'processing-instruction' 'start'
     || lk == 127058                // 'attribute' 'to'
     || lk == 127097                // 'element' 'to'
     || lk == 127160                // 'namespace' 'to'
     || lk == 127192                // 'processing-instruction' 'to'
     || lk == 127570                // 'attribute' 'treat'
     || lk == 127609                // 'element' 'treat'
     || lk == 127672                // 'namespace' 'treat'
     || lk == 127704                // 'processing-instruction' 'treat'
     || lk == 130130                // 'attribute' 'union'
     || lk == 130169                // 'element' 'union'
     || lk == 130232                // 'namespace' 'union'
     || lk == 130264                // 'processing-instruction' 'union'
     || lk == 136274                // 'attribute' 'where'
     || lk == 136313                // 'element' 'where'
     || lk == 136376                // 'namespace' 'where'
     || lk == 136408                // 'processing-instruction' 'where'
     || lk == 138322                // 'attribute' 'with'
     || lk == 138361                // 'element' 'with'
     || lk == 138424                // 'namespace' 'with'
     || lk == 138456)               // 'processing-instruction' 'with'
    {
      lk = memoized(3, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_PostfixExpr();
          memoize(3, e0A, -1);
          lk = -3;
        }
        catch (p1A)
        {
          lk = -2;
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(3, e0A, -2);
        }
      }
    }
    switch (lk)
    {
    case -1:
    case 8:                         // IntegerLiteral
    case 9:                         // DecimalLiteral
    case 10:                        // DoubleLiteral
    case 11:                        // StringLiteral
    case 31:                        // '$'
    case 32:                        // '%'
    case 34:                        // '('
    case 44:                        // '.'
    case 54:                        // '<'
    case 55:                        // '<!--'
    case 59:                        // '<?'
    case 68:                        // '['
    case 276:                       // '{'
    case 278:                       // '{|'
    case 3154:                      // 'attribute' EQName^Token
    case 3193:                      // 'element' EQName^Token
    case 9912:                      // 'namespace' NCName^Token
    case 9944:                      // 'processing-instruction' NCName^Token
    case 14854:                     // EQName^Token '#'
    case 14918:                     // 'after' '#'
    case 14920:                     // 'allowing' '#'
    case 14921:                     // 'ancestor' '#'
    case 14922:                     // 'ancestor-or-self' '#'
    case 14923:                     // 'and' '#'
    case 14925:                     // 'append' '#'
    case 14926:                     // 'array' '#'
    case 14927:                     // 'as' '#'
    case 14928:                     // 'ascending' '#'
    case 14929:                     // 'at' '#'
    case 14930:                     // 'attribute' '#'
    case 14931:                     // 'base-uri' '#'
    case 14932:                     // 'before' '#'
    case 14933:                     // 'boundary-space' '#'
    case 14934:                     // 'break' '#'
    case 14936:                     // 'case' '#'
    case 14937:                     // 'cast' '#'
    case 14938:                     // 'castable' '#'
    case 14939:                     // 'catch' '#'
    case 14941:                     // 'child' '#'
    case 14942:                     // 'collation' '#'
    case 14944:                     // 'comment' '#'
    case 14945:                     // 'constraint' '#'
    case 14946:                     // 'construction' '#'
    case 14949:                     // 'context' '#'
    case 14950:                     // 'continue' '#'
    case 14951:                     // 'copy' '#'
    case 14952:                     // 'copy-namespaces' '#'
    case 14953:                     // 'count' '#'
    case 14954:                     // 'decimal-format' '#'
    case 14956:                     // 'declare' '#'
    case 14957:                     // 'default' '#'
    case 14958:                     // 'delete' '#'
    case 14959:                     // 'descendant' '#'
    case 14960:                     // 'descendant-or-self' '#'
    case 14961:                     // 'descending' '#'
    case 14966:                     // 'div' '#'
    case 14967:                     // 'document' '#'
    case 14968:                     // 'document-node' '#'
    case 14969:                     // 'element' '#'
    case 14970:                     // 'else' '#'
    case 14971:                     // 'empty' '#'
    case 14972:                     // 'empty-sequence' '#'
    case 14973:                     // 'encoding' '#'
    case 14974:                     // 'end' '#'
    case 14976:                     // 'eq' '#'
    case 14977:                     // 'every' '#'
    case 14979:                     // 'except' '#'
    case 14980:                     // 'exit' '#'
    case 14981:                     // 'external' '#'
    case 14982:                     // 'first' '#'
    case 14983:                     // 'following' '#'
    case 14984:                     // 'following-sibling' '#'
    case 14985:                     // 'for' '#'
    case 14989:                     // 'ft-option' '#'
    case 14993:                     // 'function' '#'
    case 14994:                     // 'ge' '#'
    case 14996:                     // 'group' '#'
    case 14998:                     // 'gt' '#'
    case 14999:                     // 'idiv' '#'
    case 15000:                     // 'if' '#'
    case 15001:                     // 'import' '#'
    case 15002:                     // 'in' '#'
    case 15003:                     // 'index' '#'
    case 15007:                     // 'insert' '#'
    case 15008:                     // 'instance' '#'
    case 15009:                     // 'integrity' '#'
    case 15010:                     // 'intersect' '#'
    case 15011:                     // 'into' '#'
    case 15012:                     // 'is' '#'
    case 15013:                     // 'item' '#'
    case 15014:                     // 'json' '#'
    case 15015:                     // 'json-item' '#'
    case 15018:                     // 'last' '#'
    case 15019:                     // 'lax' '#'
    case 15020:                     // 'le' '#'
    case 15022:                     // 'let' '#'
    case 15024:                     // 'loop' '#'
    case 15026:                     // 'lt' '#'
    case 15028:                     // 'mod' '#'
    case 15029:                     // 'modify' '#'
    case 15030:                     // 'module' '#'
    case 15032:                     // 'namespace' '#'
    case 15033:                     // 'namespace-node' '#'
    case 15034:                     // 'ne' '#'
    case 15039:                     // 'node' '#'
    case 15040:                     // 'nodes' '#'
    case 15042:                     // 'object' '#'
    case 15046:                     // 'only' '#'
    case 15047:                     // 'option' '#'
    case 15048:                     // 'or' '#'
    case 15049:                     // 'order' '#'
    case 15050:                     // 'ordered' '#'
    case 15051:                     // 'ordering' '#'
    case 15054:                     // 'parent' '#'
    case 15060:                     // 'preceding' '#'
    case 15061:                     // 'preceding-sibling' '#'
    case 15064:                     // 'processing-instruction' '#'
    case 15066:                     // 'rename' '#'
    case 15067:                     // 'replace' '#'
    case 15068:                     // 'return' '#'
    case 15069:                     // 'returning' '#'
    case 15070:                     // 'revalidation' '#'
    case 15072:                     // 'satisfies' '#'
    case 15073:                     // 'schema' '#'
    case 15074:                     // 'schema-attribute' '#'
    case 15075:                     // 'schema-element' '#'
    case 15076:                     // 'score' '#'
    case 15077:                     // 'self' '#'
    case 15082:                     // 'sliding' '#'
    case 15083:                     // 'some' '#'
    case 15084:                     // 'stable' '#'
    case 15085:                     // 'start' '#'
    case 15088:                     // 'strict' '#'
    case 15090:                     // 'structured-item' '#'
    case 15091:                     // 'switch' '#'
    case 15092:                     // 'text' '#'
    case 15096:                     // 'to' '#'
    case 15097:                     // 'treat' '#'
    case 15098:                     // 'try' '#'
    case 15099:                     // 'tumbling' '#'
    case 15100:                     // 'type' '#'
    case 15101:                     // 'typeswitch' '#'
    case 15102:                     // 'union' '#'
    case 15104:                     // 'unordered' '#'
    case 15105:                     // 'updating' '#'
    case 15108:                     // 'validate' '#'
    case 15109:                     // 'value' '#'
    case 15110:                     // 'variable' '#'
    case 15111:                     // 'version' '#'
    case 15114:                     // 'where' '#'
    case 15115:                     // 'while' '#'
    case 15118:                     // 'with' '#'
    case 15122:                     // 'xquery' '#'
    case 17414:                     // EQName^Token '('
    case 17478:                     // 'after' '('
    case 17480:                     // 'allowing' '('
    case 17481:                     // 'ancestor' '('
    case 17482:                     // 'ancestor-or-self' '('
    case 17483:                     // 'and' '('
    case 17485:                     // 'append' '('
    case 17487:                     // 'as' '('
    case 17488:                     // 'ascending' '('
    case 17489:                     // 'at' '('
    case 17491:                     // 'base-uri' '('
    case 17492:                     // 'before' '('
    case 17493:                     // 'boundary-space' '('
    case 17494:                     // 'break' '('
    case 17496:                     // 'case' '('
    case 17497:                     // 'cast' '('
    case 17498:                     // 'castable' '('
    case 17499:                     // 'catch' '('
    case 17501:                     // 'child' '('
    case 17502:                     // 'collation' '('
    case 17505:                     // 'constraint' '('
    case 17506:                     // 'construction' '('
    case 17509:                     // 'context' '('
    case 17510:                     // 'continue' '('
    case 17511:                     // 'copy' '('
    case 17512:                     // 'copy-namespaces' '('
    case 17513:                     // 'count' '('
    case 17514:                     // 'decimal-format' '('
    case 17516:                     // 'declare' '('
    case 17517:                     // 'default' '('
    case 17518:                     // 'delete' '('
    case 17519:                     // 'descendant' '('
    case 17520:                     // 'descendant-or-self' '('
    case 17521:                     // 'descending' '('
    case 17526:                     // 'div' '('
    case 17527:                     // 'document' '('
    case 17530:                     // 'else' '('
    case 17531:                     // 'empty' '('
    case 17533:                     // 'encoding' '('
    case 17534:                     // 'end' '('
    case 17536:                     // 'eq' '('
    case 17537:                     // 'every' '('
    case 17539:                     // 'except' '('
    case 17540:                     // 'exit' '('
    case 17541:                     // 'external' '('
    case 17542:                     // 'first' '('
    case 17543:                     // 'following' '('
    case 17544:                     // 'following-sibling' '('
    case 17545:                     // 'for' '('
    case 17549:                     // 'ft-option' '('
    case 17553:                     // 'function' '('
    case 17554:                     // 'ge' '('
    case 17556:                     // 'group' '('
    case 17558:                     // 'gt' '('
    case 17559:                     // 'idiv' '('
    case 17561:                     // 'import' '('
    case 17562:                     // 'in' '('
    case 17563:                     // 'index' '('
    case 17567:                     // 'insert' '('
    case 17568:                     // 'instance' '('
    case 17569:                     // 'integrity' '('
    case 17570:                     // 'intersect' '('
    case 17571:                     // 'into' '('
    case 17572:                     // 'is' '('
    case 17574:                     // 'json' '('
    case 17578:                     // 'last' '('
    case 17579:                     // 'lax' '('
    case 17580:                     // 'le' '('
    case 17582:                     // 'let' '('
    case 17584:                     // 'loop' '('
    case 17586:                     // 'lt' '('
    case 17588:                     // 'mod' '('
    case 17589:                     // 'modify' '('
    case 17590:                     // 'module' '('
    case 17592:                     // 'namespace' '('
    case 17594:                     // 'ne' '('
    case 17600:                     // 'nodes' '('
    case 17602:                     // 'object' '('
    case 17606:                     // 'only' '('
    case 17607:                     // 'option' '('
    case 17608:                     // 'or' '('
    case 17609:                     // 'order' '('
    case 17610:                     // 'ordered' '('
    case 17611:                     // 'ordering' '('
    case 17614:                     // 'parent' '('
    case 17620:                     // 'preceding' '('
    case 17621:                     // 'preceding-sibling' '('
    case 17626:                     // 'rename' '('
    case 17627:                     // 'replace' '('
    case 17628:                     // 'return' '('
    case 17629:                     // 'returning' '('
    case 17630:                     // 'revalidation' '('
    case 17632:                     // 'satisfies' '('
    case 17633:                     // 'schema' '('
    case 17636:                     // 'score' '('
    case 17637:                     // 'self' '('
    case 17642:                     // 'sliding' '('
    case 17643:                     // 'some' '('
    case 17644:                     // 'stable' '('
    case 17645:                     // 'start' '('
    case 17648:                     // 'strict' '('
    case 17656:                     // 'to' '('
    case 17657:                     // 'treat' '('
    case 17658:                     // 'try' '('
    case 17659:                     // 'tumbling' '('
    case 17660:                     // 'type' '('
    case 17662:                     // 'union' '('
    case 17664:                     // 'unordered' '('
    case 17665:                     // 'updating' '('
    case 17668:                     // 'validate' '('
    case 17669:                     // 'value' '('
    case 17670:                     // 'variable' '('
    case 17671:                     // 'version' '('
    case 17674:                     // 'where' '('
    case 17675:                     // 'while' '('
    case 17678:                     // 'with' '('
    case 17682:                     // 'xquery' '('
    case 36946:                     // 'attribute' 'allowing'
    case 36985:                     // 'element' 'allowing'
    case 37048:                     // 'namespace' 'allowing'
    case 37080:                     // 'processing-instruction' 'allowing'
    case 37458:                     // 'attribute' 'ancestor'
    case 37497:                     // 'element' 'ancestor'
    case 37560:                     // 'namespace' 'ancestor'
    case 37592:                     // 'processing-instruction' 'ancestor'
    case 37970:                     // 'attribute' 'ancestor-or-self'
    case 38009:                     // 'element' 'ancestor-or-self'
    case 38072:                     // 'namespace' 'ancestor-or-self'
    case 38104:                     // 'processing-instruction' 'ancestor-or-self'
    case 39506:                     // 'attribute' 'append'
    case 39545:                     // 'element' 'append'
    case 39608:                     // 'namespace' 'append'
    case 39640:                     // 'processing-instruction' 'append'
    case 40018:                     // 'attribute' 'array'
    case 40057:                     // 'element' 'array'
    case 42066:                     // 'attribute' 'attribute'
    case 42105:                     // 'element' 'attribute'
    case 42168:                     // 'namespace' 'attribute'
    case 42200:                     // 'processing-instruction' 'attribute'
    case 42578:                     // 'attribute' 'base-uri'
    case 42617:                     // 'element' 'base-uri'
    case 42680:                     // 'namespace' 'base-uri'
    case 42712:                     // 'processing-instruction' 'base-uri'
    case 43602:                     // 'attribute' 'boundary-space'
    case 43641:                     // 'element' 'boundary-space'
    case 43704:                     // 'namespace' 'boundary-space'
    case 43736:                     // 'processing-instruction' 'boundary-space'
    case 44114:                     // 'attribute' 'break'
    case 44153:                     // 'element' 'break'
    case 44216:                     // 'namespace' 'break'
    case 44248:                     // 'processing-instruction' 'break'
    case 46674:                     // 'attribute' 'catch'
    case 46713:                     // 'element' 'catch'
    case 46776:                     // 'namespace' 'catch'
    case 46808:                     // 'processing-instruction' 'catch'
    case 47698:                     // 'attribute' 'child'
    case 47737:                     // 'element' 'child'
    case 47800:                     // 'namespace' 'child'
    case 47832:                     // 'processing-instruction' 'child'
    case 49234:                     // 'attribute' 'comment'
    case 49273:                     // 'element' 'comment'
    case 49336:                     // 'namespace' 'comment'
    case 49368:                     // 'processing-instruction' 'comment'
    case 49746:                     // 'attribute' 'constraint'
    case 49785:                     // 'element' 'constraint'
    case 49848:                     // 'namespace' 'constraint'
    case 49880:                     // 'processing-instruction' 'constraint'
    case 50258:                     // 'attribute' 'construction'
    case 50297:                     // 'element' 'construction'
    case 50360:                     // 'namespace' 'construction'
    case 50392:                     // 'processing-instruction' 'construction'
    case 51794:                     // 'attribute' 'context'
    case 51833:                     // 'element' 'context'
    case 51896:                     // 'namespace' 'context'
    case 51928:                     // 'processing-instruction' 'context'
    case 52306:                     // 'attribute' 'continue'
    case 52345:                     // 'element' 'continue'
    case 52408:                     // 'namespace' 'continue'
    case 52440:                     // 'processing-instruction' 'continue'
    case 52818:                     // 'attribute' 'copy'
    case 52857:                     // 'element' 'copy'
    case 52920:                     // 'namespace' 'copy'
    case 52952:                     // 'processing-instruction' 'copy'
    case 53330:                     // 'attribute' 'copy-namespaces'
    case 53369:                     // 'element' 'copy-namespaces'
    case 53432:                     // 'namespace' 'copy-namespaces'
    case 53464:                     // 'processing-instruction' 'copy-namespaces'
    case 54354:                     // 'attribute' 'decimal-format'
    case 54393:                     // 'element' 'decimal-format'
    case 54456:                     // 'namespace' 'decimal-format'
    case 54488:                     // 'processing-instruction' 'decimal-format'
    case 55378:                     // 'attribute' 'declare'
    case 55417:                     // 'element' 'declare'
    case 55480:                     // 'namespace' 'declare'
    case 55512:                     // 'processing-instruction' 'declare'
    case 56402:                     // 'attribute' 'delete'
    case 56441:                     // 'element' 'delete'
    case 56504:                     // 'namespace' 'delete'
    case 56536:                     // 'processing-instruction' 'delete'
    case 56914:                     // 'attribute' 'descendant'
    case 56953:                     // 'element' 'descendant'
    case 57016:                     // 'namespace' 'descendant'
    case 57048:                     // 'processing-instruction' 'descendant'
    case 57426:                     // 'attribute' 'descendant-or-self'
    case 57465:                     // 'element' 'descendant-or-self'
    case 57528:                     // 'namespace' 'descendant-or-self'
    case 57560:                     // 'processing-instruction' 'descendant-or-self'
    case 61010:                     // 'attribute' 'document'
    case 61049:                     // 'element' 'document'
    case 61112:                     // 'namespace' 'document'
    case 61144:                     // 'processing-instruction' 'document'
    case 61522:                     // 'attribute' 'document-node'
    case 61561:                     // 'element' 'document-node'
    case 61624:                     // 'namespace' 'document-node'
    case 61656:                     // 'processing-instruction' 'document-node'
    case 62034:                     // 'attribute' 'element'
    case 62073:                     // 'element' 'element'
    case 62136:                     // 'namespace' 'element'
    case 62168:                     // 'processing-instruction' 'element'
    case 63570:                     // 'attribute' 'empty-sequence'
    case 63609:                     // 'element' 'empty-sequence'
    case 63672:                     // 'namespace' 'empty-sequence'
    case 63704:                     // 'processing-instruction' 'empty-sequence'
    case 64082:                     // 'attribute' 'encoding'
    case 64121:                     // 'element' 'encoding'
    case 64184:                     // 'namespace' 'encoding'
    case 64216:                     // 'processing-instruction' 'encoding'
    case 66130:                     // 'attribute' 'every'
    case 66169:                     // 'element' 'every'
    case 66232:                     // 'namespace' 'every'
    case 66264:                     // 'processing-instruction' 'every'
    case 67666:                     // 'attribute' 'exit'
    case 67705:                     // 'element' 'exit'
    case 67768:                     // 'namespace' 'exit'
    case 67800:                     // 'processing-instruction' 'exit'
    case 68178:                     // 'attribute' 'external'
    case 68217:                     // 'element' 'external'
    case 68280:                     // 'namespace' 'external'
    case 68312:                     // 'processing-instruction' 'external'
    case 68690:                     // 'attribute' 'first'
    case 68729:                     // 'element' 'first'
    case 68792:                     // 'namespace' 'first'
    case 68824:                     // 'processing-instruction' 'first'
    case 69202:                     // 'attribute' 'following'
    case 69241:                     // 'element' 'following'
    case 69304:                     // 'namespace' 'following'
    case 69336:                     // 'processing-instruction' 'following'
    case 69714:                     // 'attribute' 'following-sibling'
    case 69753:                     // 'element' 'following-sibling'
    case 69816:                     // 'namespace' 'following-sibling'
    case 69848:                     // 'processing-instruction' 'following-sibling'
    case 72274:                     // 'attribute' 'ft-option'
    case 72313:                     // 'element' 'ft-option'
    case 72376:                     // 'namespace' 'ft-option'
    case 72408:                     // 'processing-instruction' 'ft-option'
    case 74322:                     // 'attribute' 'function'
    case 74361:                     // 'element' 'function'
    case 74424:                     // 'namespace' 'function'
    case 74456:                     // 'processing-instruction' 'function'
    case 77906:                     // 'attribute' 'if'
    case 77945:                     // 'element' 'if'
    case 78008:                     // 'namespace' 'if'
    case 78040:                     // 'processing-instruction' 'if'
    case 78418:                     // 'attribute' 'import'
    case 78457:                     // 'element' 'import'
    case 78520:                     // 'namespace' 'import'
    case 78552:                     // 'processing-instruction' 'import'
    case 78930:                     // 'attribute' 'in'
    case 78969:                     // 'element' 'in'
    case 79032:                     // 'namespace' 'in'
    case 79064:                     // 'processing-instruction' 'in'
    case 79442:                     // 'attribute' 'index'
    case 79481:                     // 'element' 'index'
    case 79544:                     // 'namespace' 'index'
    case 79576:                     // 'processing-instruction' 'index'
    case 81490:                     // 'attribute' 'insert'
    case 81529:                     // 'element' 'insert'
    case 81592:                     // 'namespace' 'insert'
    case 81624:                     // 'processing-instruction' 'insert'
    case 82514:                     // 'attribute' 'integrity'
    case 82553:                     // 'element' 'integrity'
    case 82616:                     // 'namespace' 'integrity'
    case 82648:                     // 'processing-instruction' 'integrity'
    case 84562:                     // 'attribute' 'item'
    case 84601:                     // 'element' 'item'
    case 84664:                     // 'namespace' 'item'
    case 84696:                     // 'processing-instruction' 'item'
    case 85074:                     // 'attribute' 'json'
    case 85113:                     // 'element' 'json'
    case 85176:                     // 'namespace' 'json'
    case 85208:                     // 'processing-instruction' 'json'
    case 85586:                     // 'attribute' 'json-item'
    case 85625:                     // 'element' 'json-item'
    case 87122:                     // 'attribute' 'last'
    case 87161:                     // 'element' 'last'
    case 87224:                     // 'namespace' 'last'
    case 87256:                     // 'processing-instruction' 'last'
    case 87634:                     // 'attribute' 'lax'
    case 87673:                     // 'element' 'lax'
    case 87736:                     // 'namespace' 'lax'
    case 87768:                     // 'processing-instruction' 'lax'
    case 90194:                     // 'attribute' 'loop'
    case 90233:                     // 'element' 'loop'
    case 90296:                     // 'namespace' 'loop'
    case 90328:                     // 'processing-instruction' 'loop'
    case 93266:                     // 'attribute' 'module'
    case 93305:                     // 'element' 'module'
    case 93368:                     // 'namespace' 'module'
    case 93400:                     // 'processing-instruction' 'module'
    case 94290:                     // 'attribute' 'namespace'
    case 94329:                     // 'element' 'namespace'
    case 94392:                     // 'namespace' 'namespace'
    case 94424:                     // 'processing-instruction' 'namespace'
    case 94802:                     // 'attribute' 'namespace-node'
    case 94841:                     // 'element' 'namespace-node'
    case 94904:                     // 'namespace' 'namespace-node'
    case 94936:                     // 'processing-instruction' 'namespace-node'
    case 97874:                     // 'attribute' 'node'
    case 97913:                     // 'element' 'node'
    case 97976:                     // 'namespace' 'node'
    case 98008:                     // 'processing-instruction' 'node'
    case 98386:                     // 'attribute' 'nodes'
    case 98425:                     // 'element' 'nodes'
    case 98488:                     // 'namespace' 'nodes'
    case 98520:                     // 'processing-instruction' 'nodes'
    case 99410:                     // 'attribute' 'object'
    case 99449:                     // 'element' 'object'
    case 99512:                     // 'namespace' 'object'
    case 99544:                     // 'processing-instruction' 'object'
    case 101970:                    // 'attribute' 'option'
    case 102009:                    // 'element' 'option'
    case 102072:                    // 'namespace' 'option'
    case 102104:                    // 'processing-instruction' 'option'
    case 103506:                    // 'attribute' 'ordered'
    case 103545:                    // 'element' 'ordered'
    case 103608:                    // 'namespace' 'ordered'
    case 103640:                    // 'processing-instruction' 'ordered'
    case 104018:                    // 'attribute' 'ordering'
    case 104057:                    // 'element' 'ordering'
    case 104120:                    // 'namespace' 'ordering'
    case 104152:                    // 'processing-instruction' 'ordering'
    case 105554:                    // 'attribute' 'parent'
    case 105593:                    // 'element' 'parent'
    case 105656:                    // 'namespace' 'parent'
    case 105688:                    // 'processing-instruction' 'parent'
    case 108626:                    // 'attribute' 'preceding'
    case 108665:                    // 'element' 'preceding'
    case 108728:                    // 'namespace' 'preceding'
    case 108760:                    // 'processing-instruction' 'preceding'
    case 109138:                    // 'attribute' 'preceding-sibling'
    case 109177:                    // 'element' 'preceding-sibling'
    case 109240:                    // 'namespace' 'preceding-sibling'
    case 109272:                    // 'processing-instruction' 'preceding-sibling'
    case 110674:                    // 'attribute' 'processing-instruction'
    case 110713:                    // 'element' 'processing-instruction'
    case 110776:                    // 'namespace' 'processing-instruction'
    case 110808:                    // 'processing-instruction' 'processing-instruction'
    case 111698:                    // 'attribute' 'rename'
    case 111737:                    // 'element' 'rename'
    case 111800:                    // 'namespace' 'rename'
    case 111832:                    // 'processing-instruction' 'rename'
    case 112210:                    // 'attribute' 'replace'
    case 112249:                    // 'element' 'replace'
    case 112312:                    // 'namespace' 'replace'
    case 112344:                    // 'processing-instruction' 'replace'
    case 113234:                    // 'attribute' 'returning'
    case 113273:                    // 'element' 'returning'
    case 113336:                    // 'namespace' 'returning'
    case 113368:                    // 'processing-instruction' 'returning'
    case 113746:                    // 'attribute' 'revalidation'
    case 113785:                    // 'element' 'revalidation'
    case 113848:                    // 'namespace' 'revalidation'
    case 113880:                    // 'processing-instruction' 'revalidation'
    case 115282:                    // 'attribute' 'schema'
    case 115321:                    // 'element' 'schema'
    case 115384:                    // 'namespace' 'schema'
    case 115416:                    // 'processing-instruction' 'schema'
    case 115794:                    // 'attribute' 'schema-attribute'
    case 115833:                    // 'element' 'schema-attribute'
    case 115896:                    // 'namespace' 'schema-attribute'
    case 115928:                    // 'processing-instruction' 'schema-attribute'
    case 116306:                    // 'attribute' 'schema-element'
    case 116345:                    // 'element' 'schema-element'
    case 116408:                    // 'namespace' 'schema-element'
    case 116440:                    // 'processing-instruction' 'schema-element'
    case 116818:                    // 'attribute' 'score'
    case 116857:                    // 'element' 'score'
    case 116920:                    // 'namespace' 'score'
    case 116952:                    // 'processing-instruction' 'score'
    case 117330:                    // 'attribute' 'self'
    case 117369:                    // 'element' 'self'
    case 117432:                    // 'namespace' 'self'
    case 117464:                    // 'processing-instruction' 'self'
    case 119890:                    // 'attribute' 'sliding'
    case 119929:                    // 'element' 'sliding'
    case 119992:                    // 'namespace' 'sliding'
    case 120024:                    // 'processing-instruction' 'sliding'
    case 120402:                    // 'attribute' 'some'
    case 120441:                    // 'element' 'some'
    case 120504:                    // 'namespace' 'some'
    case 120536:                    // 'processing-instruction' 'some'
    case 122962:                    // 'attribute' 'strict'
    case 123001:                    // 'element' 'strict'
    case 123064:                    // 'namespace' 'strict'
    case 123096:                    // 'processing-instruction' 'strict'
    case 123986:                    // 'attribute' 'structured-item'
    case 124025:                    // 'element' 'structured-item'
    case 124498:                    // 'attribute' 'switch'
    case 124537:                    // 'element' 'switch'
    case 124600:                    // 'namespace' 'switch'
    case 124632:                    // 'processing-instruction' 'switch'
    case 125010:                    // 'attribute' 'text'
    case 125049:                    // 'element' 'text'
    case 125112:                    // 'namespace' 'text'
    case 125144:                    // 'processing-instruction' 'text'
    case 128082:                    // 'attribute' 'try'
    case 128121:                    // 'element' 'try'
    case 128184:                    // 'namespace' 'try'
    case 128216:                    // 'processing-instruction' 'try'
    case 128594:                    // 'attribute' 'tumbling'
    case 128633:                    // 'element' 'tumbling'
    case 128696:                    // 'namespace' 'tumbling'
    case 128728:                    // 'processing-instruction' 'tumbling'
    case 129106:                    // 'attribute' 'type'
    case 129145:                    // 'element' 'type'
    case 129208:                    // 'namespace' 'type'
    case 129240:                    // 'processing-instruction' 'type'
    case 129618:                    // 'attribute' 'typeswitch'
    case 129657:                    // 'element' 'typeswitch'
    case 129720:                    // 'namespace' 'typeswitch'
    case 129752:                    // 'processing-instruction' 'typeswitch'
    case 131154:                    // 'attribute' 'unordered'
    case 131193:                    // 'element' 'unordered'
    case 131256:                    // 'namespace' 'unordered'
    case 131288:                    // 'processing-instruction' 'unordered'
    case 131666:                    // 'attribute' 'updating'
    case 131705:                    // 'element' 'updating'
    case 131768:                    // 'namespace' 'updating'
    case 131800:                    // 'processing-instruction' 'updating'
    case 133202:                    // 'attribute' 'validate'
    case 133241:                    // 'element' 'validate'
    case 133304:                    // 'namespace' 'validate'
    case 133336:                    // 'processing-instruction' 'validate'
    case 133714:                    // 'attribute' 'value'
    case 133753:                    // 'element' 'value'
    case 133816:                    // 'namespace' 'value'
    case 133848:                    // 'processing-instruction' 'value'
    case 134226:                    // 'attribute' 'variable'
    case 134265:                    // 'element' 'variable'
    case 134328:                    // 'namespace' 'variable'
    case 134360:                    // 'processing-instruction' 'variable'
    case 134738:                    // 'attribute' 'version'
    case 134777:                    // 'element' 'version'
    case 134840:                    // 'namespace' 'version'
    case 134872:                    // 'processing-instruction' 'version'
    case 136786:                    // 'attribute' 'while'
    case 136825:                    // 'element' 'while'
    case 136888:                    // 'namespace' 'while'
    case 136920:                    // 'processing-instruction' 'while'
    case 140370:                    // 'attribute' 'xquery'
    case 140409:                    // 'element' 'xquery'
    case 140472:                    // 'namespace' 'xquery'
    case 140504:                    // 'processing-instruction' 'xquery'
    case 141394:                    // 'attribute' '{'
    case 141408:                    // 'comment' '{'
    case 141431:                    // 'document' '{'
    case 141433:                    // 'element' '{'
    case 141496:                    // 'namespace' '{'
    case 141514:                    // 'ordered' '{'
    case 141528:                    // 'processing-instruction' '{'
    case 141556:                    // 'text' '{'
    case 141568:                    // 'unordered' '{'
      try_PostfixExpr();
      break;
    case -3:
      break;
    default:
      try_AxisStep();
    }
  }

  function parse_AxisStep()
  {
    eventHandler.startNonterminal("AxisStep", e0);
    switch (l1)
    {
    case 73:                        // 'ancestor'
    case 74:                        // 'ancestor-or-self'
    case 206:                       // 'parent'
    case 212:                       // 'preceding'
    case 213:                       // 'preceding-sibling'
      lookahead2W(242);             // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' |
                                    // '::' | ':=' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 45:                        // '..'
    case 26185:                     // 'ancestor' '::'
    case 26186:                     // 'ancestor-or-self' '::'
    case 26318:                     // 'parent' '::'
    case 26324:                     // 'preceding' '::'
    case 26325:                     // 'preceding-sibling' '::'
      parse_ReverseStep();
      break;
    default:
      parse_ForwardStep();
    }
    lookahead1W(238);               // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' |
                                    // ':=' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' | 'after' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
    whitespace();
    parse_PredicateList();
    eventHandler.endNonterminal("AxisStep", e0);
  }

  function try_AxisStep()
  {
    switch (l1)
    {
    case 73:                        // 'ancestor'
    case 74:                        // 'ancestor-or-self'
    case 206:                       // 'parent'
    case 212:                       // 'preceding'
    case 213:                       // 'preceding-sibling'
      lookahead2W(242);             // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' |
                                    // '::' | ':=' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 45:                        // '..'
    case 26185:                     // 'ancestor' '::'
    case 26186:                     // 'ancestor-or-self' '::'
    case 26318:                     // 'parent' '::'
    case 26324:                     // 'preceding' '::'
    case 26325:                     // 'preceding-sibling' '::'
      try_ReverseStep();
      break;
    default:
      try_ForwardStep();
    }
    lookahead1W(238);               // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' |
                                    // ':=' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' | 'after' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
    try_PredicateList();
  }

  function parse_ForwardStep()
  {
    eventHandler.startNonterminal("ForwardStep", e0);
    switch (l1)
    {
    case 82:                        // 'attribute'
      lookahead2W(244);             // S^WS | EOF | '!' | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | '::' | ':=' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' |
                                    // 'cast' | 'castable' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' | '||' |
                                    // '|}' | '}'
      break;
    case 93:                        // 'child'
    case 111:                       // 'descendant'
    case 112:                       // 'descendant-or-self'
    case 135:                       // 'following'
    case 136:                       // 'following-sibling'
    case 229:                       // 'self'
      lookahead2W(242);             // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' |
                                    // '::' | ':=' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 26194:                     // 'attribute' '::'
    case 26205:                     // 'child' '::'
    case 26223:                     // 'descendant' '::'
    case 26224:                     // 'descendant-or-self' '::'
    case 26247:                     // 'following' '::'
    case 26248:                     // 'following-sibling' '::'
    case 26341:                     // 'self' '::'
      parse_ForwardAxis();
      lookahead1W(256);             // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_NodeTest();
      break;
    default:
      parse_AbbrevForwardStep();
    }
    eventHandler.endNonterminal("ForwardStep", e0);
  }

  function try_ForwardStep()
  {
    switch (l1)
    {
    case 82:                        // 'attribute'
      lookahead2W(244);             // S^WS | EOF | '!' | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | '::' | ':=' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' |
                                    // 'cast' | 'castable' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' | '||' |
                                    // '|}' | '}'
      break;
    case 93:                        // 'child'
    case 111:                       // 'descendant'
    case 112:                       // 'descendant-or-self'
    case 135:                       // 'following'
    case 136:                       // 'following-sibling'
    case 229:                       // 'self'
      lookahead2W(242);             // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' |
                                    // '::' | ':=' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 26194:                     // 'attribute' '::'
    case 26205:                     // 'child' '::'
    case 26223:                     // 'descendant' '::'
    case 26224:                     // 'descendant-or-self' '::'
    case 26247:                     // 'following' '::'
    case 26248:                     // 'following-sibling' '::'
    case 26341:                     // 'self' '::'
      try_ForwardAxis();
      lookahead1W(256);             // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
      try_NodeTest();
      break;
    default:
      try_AbbrevForwardStep();
    }
  }

  function parse_ForwardAxis()
  {
    eventHandler.startNonterminal("ForwardAxis", e0);
    switch (l1)
    {
    case 93:                        // 'child'
      shift(93);                    // 'child'
      lookahead1W(26);              // S^WS | '(:' | '::'
      shift(51);                    // '::'
      break;
    case 111:                       // 'descendant'
      shift(111);                   // 'descendant'
      lookahead1W(26);              // S^WS | '(:' | '::'
      shift(51);                    // '::'
      break;
    case 82:                        // 'attribute'
      shift(82);                    // 'attribute'
      lookahead1W(26);              // S^WS | '(:' | '::'
      shift(51);                    // '::'
      break;
    case 229:                       // 'self'
      shift(229);                   // 'self'
      lookahead1W(26);              // S^WS | '(:' | '::'
      shift(51);                    // '::'
      break;
    case 112:                       // 'descendant-or-self'
      shift(112);                   // 'descendant-or-self'
      lookahead1W(26);              // S^WS | '(:' | '::'
      shift(51);                    // '::'
      break;
    case 136:                       // 'following-sibling'
      shift(136);                   // 'following-sibling'
      lookahead1W(26);              // S^WS | '(:' | '::'
      shift(51);                    // '::'
      break;
    default:
      shift(135);                   // 'following'
      lookahead1W(26);              // S^WS | '(:' | '::'
      shift(51);                    // '::'
    }
    eventHandler.endNonterminal("ForwardAxis", e0);
  }

  function try_ForwardAxis()
  {
    switch (l1)
    {
    case 93:                        // 'child'
      shiftT(93);                   // 'child'
      lookahead1W(26);              // S^WS | '(:' | '::'
      shiftT(51);                   // '::'
      break;
    case 111:                       // 'descendant'
      shiftT(111);                  // 'descendant'
      lookahead1W(26);              // S^WS | '(:' | '::'
      shiftT(51);                   // '::'
      break;
    case 82:                        // 'attribute'
      shiftT(82);                   // 'attribute'
      lookahead1W(26);              // S^WS | '(:' | '::'
      shiftT(51);                   // '::'
      break;
    case 229:                       // 'self'
      shiftT(229);                  // 'self'
      lookahead1W(26);              // S^WS | '(:' | '::'
      shiftT(51);                   // '::'
      break;
    case 112:                       // 'descendant-or-self'
      shiftT(112);                  // 'descendant-or-self'
      lookahead1W(26);              // S^WS | '(:' | '::'
      shiftT(51);                   // '::'
      break;
    case 136:                       // 'following-sibling'
      shiftT(136);                  // 'following-sibling'
      lookahead1W(26);              // S^WS | '(:' | '::'
      shiftT(51);                   // '::'
      break;
    default:
      shiftT(135);                  // 'following'
      lookahead1W(26);              // S^WS | '(:' | '::'
      shiftT(51);                   // '::'
    }
  }

  function parse_AbbrevForwardStep()
  {
    eventHandler.startNonterminal("AbbrevForwardStep", e0);
    if (l1 == 66)                   // '@'
    {
      shift(66);                    // '@'
    }
    lookahead1W(256);               // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_NodeTest();
    eventHandler.endNonterminal("AbbrevForwardStep", e0);
  }

  function try_AbbrevForwardStep()
  {
    if (l1 == 66)                   // '@'
    {
      shiftT(66);                   // '@'
    }
    lookahead1W(256);               // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
    try_NodeTest();
  }

  function parse_ReverseStep()
  {
    eventHandler.startNonterminal("ReverseStep", e0);
    switch (l1)
    {
    case 45:                        // '..'
      parse_AbbrevReverseStep();
      break;
    default:
      parse_ReverseAxis();
      lookahead1W(256);             // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_NodeTest();
    }
    eventHandler.endNonterminal("ReverseStep", e0);
  }

  function try_ReverseStep()
  {
    switch (l1)
    {
    case 45:                        // '..'
      try_AbbrevReverseStep();
      break;
    default:
      try_ReverseAxis();
      lookahead1W(256);             // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
      try_NodeTest();
    }
  }

  function parse_ReverseAxis()
  {
    eventHandler.startNonterminal("ReverseAxis", e0);
    switch (l1)
    {
    case 206:                       // 'parent'
      shift(206);                   // 'parent'
      lookahead1W(26);              // S^WS | '(:' | '::'
      shift(51);                    // '::'
      break;
    case 73:                        // 'ancestor'
      shift(73);                    // 'ancestor'
      lookahead1W(26);              // S^WS | '(:' | '::'
      shift(51);                    // '::'
      break;
    case 213:                       // 'preceding-sibling'
      shift(213);                   // 'preceding-sibling'
      lookahead1W(26);              // S^WS | '(:' | '::'
      shift(51);                    // '::'
      break;
    case 212:                       // 'preceding'
      shift(212);                   // 'preceding'
      lookahead1W(26);              // S^WS | '(:' | '::'
      shift(51);                    // '::'
      break;
    default:
      shift(74);                    // 'ancestor-or-self'
      lookahead1W(26);              // S^WS | '(:' | '::'
      shift(51);                    // '::'
    }
    eventHandler.endNonterminal("ReverseAxis", e0);
  }

  function try_ReverseAxis()
  {
    switch (l1)
    {
    case 206:                       // 'parent'
      shiftT(206);                  // 'parent'
      lookahead1W(26);              // S^WS | '(:' | '::'
      shiftT(51);                   // '::'
      break;
    case 73:                        // 'ancestor'
      shiftT(73);                   // 'ancestor'
      lookahead1W(26);              // S^WS | '(:' | '::'
      shiftT(51);                   // '::'
      break;
    case 213:                       // 'preceding-sibling'
      shiftT(213);                  // 'preceding-sibling'
      lookahead1W(26);              // S^WS | '(:' | '::'
      shiftT(51);                   // '::'
      break;
    case 212:                       // 'preceding'
      shiftT(212);                  // 'preceding'
      lookahead1W(26);              // S^WS | '(:' | '::'
      shiftT(51);                   // '::'
      break;
    default:
      shiftT(74);                   // 'ancestor-or-self'
      lookahead1W(26);              // S^WS | '(:' | '::'
      shiftT(51);                   // '::'
    }
  }

  function parse_AbbrevReverseStep()
  {
    eventHandler.startNonterminal("AbbrevReverseStep", e0);
    shift(45);                      // '..'
    eventHandler.endNonterminal("AbbrevReverseStep", e0);
  }

  function try_AbbrevReverseStep()
  {
    shiftT(45);                     // '..'
  }

  function parse_NodeTest()
  {
    eventHandler.startNonterminal("NodeTest", e0);
    switch (l1)
    {
    case 82:                        // 'attribute'
    case 96:                        // 'comment'
    case 120:                       // 'document-node'
    case 121:                       // 'element'
    case 185:                       // 'namespace-node'
    case 191:                       // 'node'
    case 216:                       // 'processing-instruction'
    case 226:                       // 'schema-attribute'
    case 227:                       // 'schema-element'
    case 244:                       // 'text'
      lookahead2W(241);             // S^WS | EOF | '!' | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | ':=' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 17490:                     // 'attribute' '('
    case 17504:                     // 'comment' '('
    case 17528:                     // 'document-node' '('
    case 17529:                     // 'element' '('
    case 17593:                     // 'namespace-node' '('
    case 17599:                     // 'node' '('
    case 17624:                     // 'processing-instruction' '('
    case 17634:                     // 'schema-attribute' '('
    case 17635:                     // 'schema-element' '('
    case 17652:                     // 'text' '('
      parse_KindTest();
      break;
    default:
      parse_NameTest();
    }
    eventHandler.endNonterminal("NodeTest", e0);
  }

  function try_NodeTest()
  {
    switch (l1)
    {
    case 82:                        // 'attribute'
    case 96:                        // 'comment'
    case 120:                       // 'document-node'
    case 121:                       // 'element'
    case 185:                       // 'namespace-node'
    case 191:                       // 'node'
    case 216:                       // 'processing-instruction'
    case 226:                       // 'schema-attribute'
    case 227:                       // 'schema-element'
    case 244:                       // 'text'
      lookahead2W(241);             // S^WS | EOF | '!' | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | ':=' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 17490:                     // 'attribute' '('
    case 17504:                     // 'comment' '('
    case 17528:                     // 'document-node' '('
    case 17529:                     // 'element' '('
    case 17593:                     // 'namespace-node' '('
    case 17599:                     // 'node' '('
    case 17624:                     // 'processing-instruction' '('
    case 17634:                     // 'schema-attribute' '('
    case 17635:                     // 'schema-element' '('
    case 17652:                     // 'text' '('
      try_KindTest();
      break;
    default:
      try_NameTest();
    }
  }

  function parse_NameTest()
  {
    eventHandler.startNonterminal("NameTest", e0);
    switch (l1)
    {
    case 5:                         // Wildcard
      shift(5);                     // Wildcard
      break;
    default:
      parse_EQName();
    }
    eventHandler.endNonterminal("NameTest", e0);
  }

  function try_NameTest()
  {
    switch (l1)
    {
    case 5:                         // Wildcard
      shiftT(5);                    // Wildcard
      break;
    default:
      try_EQName();
    }
  }

  function parse_PostfixExpr()
  {
    eventHandler.startNonterminal("PostfixExpr", e0);
    parse_PrimaryExpr();
    for (;;)
    {
      lookahead1W(241);             // S^WS | EOF | '!' | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | ':=' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
      if (l1 != 34                  // '('
       && l1 != 68)                 // '['
      {
        break;
      }
      switch (l1)
      {
      case 68:                      // '['
        whitespace();
        parse_Predicate();
        break;
      default:
        whitespace();
        parse_ArgumentList();
      }
    }
    eventHandler.endNonterminal("PostfixExpr", e0);
  }

  function try_PostfixExpr()
  {
    try_PrimaryExpr();
    for (;;)
    {
      lookahead1W(241);             // S^WS | EOF | '!' | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | ':=' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
      if (l1 != 34                  // '('
       && l1 != 68)                 // '['
      {
        break;
      }
      switch (l1)
      {
      case 68:                      // '['
        try_Predicate();
        break;
      default:
        try_ArgumentList();
      }
    }
  }

  function parse_ArgumentList()
  {
    eventHandler.startNonterminal("ArgumentList", e0);
    shift(34);                      // '('
    lookahead1W(275);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | ')' | '+' | '-' | '.' |
                                    // '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
    if (l1 != 37)                   // ')'
    {
      whitespace();
      parse_Argument();
      for (;;)
      {
        lookahead1W(101);           // S^WS | '(:' | ')' | ','
        if (l1 != 41)               // ','
        {
          break;
        }
        shift(41);                  // ','
        lookahead1W(270);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
        whitespace();
        parse_Argument();
      }
    }
    shift(37);                      // ')'
    eventHandler.endNonterminal("ArgumentList", e0);
  }

  function try_ArgumentList()
  {
    shiftT(34);                     // '('
    lookahead1W(275);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | ')' | '+' | '-' | '.' |
                                    // '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
    if (l1 != 37)                   // ')'
    {
      try_Argument();
      for (;;)
      {
        lookahead1W(101);           // S^WS | '(:' | ')' | ','
        if (l1 != 41)               // ','
        {
          break;
        }
        shiftT(41);                 // ','
        lookahead1W(270);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
        try_Argument();
      }
    }
    shiftT(37);                     // ')'
  }

  function parse_PredicateList()
  {
    eventHandler.startNonterminal("PredicateList", e0);
    for (;;)
    {
      lookahead1W(238);             // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' |
                                    // ':=' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' | 'after' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
      if (l1 != 68)                 // '['
      {
        break;
      }
      whitespace();
      parse_Predicate();
    }
    eventHandler.endNonterminal("PredicateList", e0);
  }

  function try_PredicateList()
  {
    for (;;)
    {
      lookahead1W(238);             // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' |
                                    // ':=' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' | 'after' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
      if (l1 != 68)                 // '['
      {
        break;
      }
      try_Predicate();
    }
  }

  function parse_Predicate()
  {
    eventHandler.startNonterminal("Predicate", e0);
    shift(68);                      // '['
    lookahead1W(266);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_Expr();
    shift(69);                      // ']'
    eventHandler.endNonterminal("Predicate", e0);
  }

  function try_Predicate()
  {
    shiftT(68);                     // '['
    lookahead1W(266);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
    try_Expr();
    shiftT(69);                     // ']'
  }

  function parse_Literal()
  {
    eventHandler.startNonterminal("Literal", e0);
    switch (l1)
    {
    case 11:                        // StringLiteral
      shift(11);                    // StringLiteral
      break;
    default:
      parse_NumericLiteral();
    }
    eventHandler.endNonterminal("Literal", e0);
  }

  function try_Literal()
  {
    switch (l1)
    {
    case 11:                        // StringLiteral
      shiftT(11);                   // StringLiteral
      break;
    default:
      try_NumericLiteral();
    }
  }

  function parse_NumericLiteral()
  {
    eventHandler.startNonterminal("NumericLiteral", e0);
    switch (l1)
    {
    case 8:                         // IntegerLiteral
      shift(8);                     // IntegerLiteral
      break;
    case 9:                         // DecimalLiteral
      shift(9);                     // DecimalLiteral
      break;
    default:
      shift(10);                    // DoubleLiteral
    }
    eventHandler.endNonterminal("NumericLiteral", e0);
  }

  function try_NumericLiteral()
  {
    switch (l1)
    {
    case 8:                         // IntegerLiteral
      shiftT(8);                    // IntegerLiteral
      break;
    case 9:                         // DecimalLiteral
      shiftT(9);                    // DecimalLiteral
      break;
    default:
      shiftT(10);                   // DoubleLiteral
    }
  }

  function parse_VarRef()
  {
    eventHandler.startNonterminal("VarRef", e0);
    shift(31);                      // '$'
    lookahead1W(254);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_VarName();
    eventHandler.endNonterminal("VarRef", e0);
  }

  function try_VarRef()
  {
    shiftT(31);                     // '$'
    lookahead1W(254);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
    try_VarName();
  }

  function parse_VarName()
  {
    eventHandler.startNonterminal("VarName", e0);
    parse_EQName();
    eventHandler.endNonterminal("VarName", e0);
  }

  function try_VarName()
  {
    try_EQName();
  }

  function parse_ParenthesizedExpr()
  {
    eventHandler.startNonterminal("ParenthesizedExpr", e0);
    shift(34);                      // '('
    lookahead1W(268);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | ')' | '+' | '-' | '.' |
                                    // '..' | '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
    if (l1 != 37)                   // ')'
    {
      whitespace();
      parse_Expr();
    }
    shift(37);                      // ')'
    eventHandler.endNonterminal("ParenthesizedExpr", e0);
  }

  function try_ParenthesizedExpr()
  {
    shiftT(34);                     // '('
    lookahead1W(268);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | ')' | '+' | '-' | '.' |
                                    // '..' | '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
    if (l1 != 37)                   // ')'
    {
      try_Expr();
    }
    shiftT(37);                     // ')'
  }

  function parse_ContextItemExpr()
  {
    eventHandler.startNonterminal("ContextItemExpr", e0);
    shift(44);                      // '.'
    eventHandler.endNonterminal("ContextItemExpr", e0);
  }

  function try_ContextItemExpr()
  {
    shiftT(44);                     // '.'
  }

  function parse_OrderedExpr()
  {
    eventHandler.startNonterminal("OrderedExpr", e0);
    shift(202);                     // 'ordered'
    lookahead1W(87);                // S^WS | '(:' | '{'
    shift(276);                     // '{'
    lookahead1W(266);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_Expr();
    shift(282);                     // '}'
    eventHandler.endNonterminal("OrderedExpr", e0);
  }

  function try_OrderedExpr()
  {
    shiftT(202);                    // 'ordered'
    lookahead1W(87);                // S^WS | '(:' | '{'
    shiftT(276);                    // '{'
    lookahead1W(266);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
    try_Expr();
    shiftT(282);                    // '}'
  }

  function parse_UnorderedExpr()
  {
    eventHandler.startNonterminal("UnorderedExpr", e0);
    shift(256);                     // 'unordered'
    lookahead1W(87);                // S^WS | '(:' | '{'
    shift(276);                     // '{'
    lookahead1W(266);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_Expr();
    shift(282);                     // '}'
    eventHandler.endNonterminal("UnorderedExpr", e0);
  }

  function try_UnorderedExpr()
  {
    shiftT(256);                    // 'unordered'
    lookahead1W(87);                // S^WS | '(:' | '{'
    shiftT(276);                    // '{'
    lookahead1W(266);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
    try_Expr();
    shiftT(282);                    // '}'
  }

  function parse_FunctionCall()
  {
    eventHandler.startNonterminal("FunctionCall", e0);
    parse_FunctionName();
    lookahead1W(22);                // S^WS | '(' | '(:'
    whitespace();
    parse_ArgumentList();
    eventHandler.endNonterminal("FunctionCall", e0);
  }

  function try_FunctionCall()
  {
    try_FunctionName();
    lookahead1W(22);                // S^WS | '(' | '(:'
    try_ArgumentList();
  }

  function parse_Argument()
  {
    eventHandler.startNonterminal("Argument", e0);
    switch (l1)
    {
    case 64:                        // '?'
      parse_ArgumentPlaceholder();
      break;
    default:
      parse_ExprSingle();
    }
    eventHandler.endNonterminal("Argument", e0);
  }

  function try_Argument()
  {
    switch (l1)
    {
    case 64:                        // '?'
      try_ArgumentPlaceholder();
      break;
    default:
      try_ExprSingle();
    }
  }

  function parse_ArgumentPlaceholder()
  {
    eventHandler.startNonterminal("ArgumentPlaceholder", e0);
    shift(64);                      // '?'
    eventHandler.endNonterminal("ArgumentPlaceholder", e0);
  }

  function try_ArgumentPlaceholder()
  {
    shiftT(64);                     // '?'
  }

  function parse_Constructor()
  {
    eventHandler.startNonterminal("Constructor", e0);
    switch (l1)
    {
    case 54:                        // '<'
    case 55:                        // '<!--'
    case 59:                        // '<?'
      parse_DirectConstructor();
      break;
    default:
      parse_ComputedConstructor();
    }
    eventHandler.endNonterminal("Constructor", e0);
  }

  function try_Constructor()
  {
    switch (l1)
    {
    case 54:                        // '<'
    case 55:                        // '<!--'
    case 59:                        // '<?'
      try_DirectConstructor();
      break;
    default:
      try_ComputedConstructor();
    }
  }

  function parse_DirectConstructor()
  {
    eventHandler.startNonterminal("DirectConstructor", e0);
    switch (l1)
    {
    case 54:                        // '<'
      parse_DirElemConstructor();
      break;
    case 55:                        // '<!--'
      parse_DirCommentConstructor();
      break;
    default:
      parse_DirPIConstructor();
    }
    eventHandler.endNonterminal("DirectConstructor", e0);
  }

  function try_DirectConstructor()
  {
    switch (l1)
    {
    case 54:                        // '<'
      try_DirElemConstructor();
      break;
    case 55:                        // '<!--'
      try_DirCommentConstructor();
      break;
    default:
      try_DirPIConstructor();
    }
  }

  function parse_DirElemConstructor()
  {
    eventHandler.startNonterminal("DirElemConstructor", e0);
    shift(54);                      // '<'
    lookahead1(4);                  // QName
    shift(20);                      // QName
    parse_DirAttributeList();
    switch (l1)
    {
    case 48:                        // '/>'
      shift(48);                    // '/>'
      break;
    default:
      shift(61);                    // '>'
      for (;;)
      {
        lookahead1(174);            // CDataSection | PredefinedEntityRef | ElementContentChar | CharRef | '<' |
                                    // '<!--' | '</' | '<?' | '{' | '{{' | '}}'
        if (l1 == 56)               // '</'
        {
          break;
        }
        parse_DirElemContent();
      }
      shift(56);                    // '</'
      lookahead1(4);                // QName
      shift(20);                    // QName
      lookahead1(12);               // S | '>'
      if (l1 == 21)                 // S
      {
        shift(21);                  // S
      }
      lookahead1(8);                // '>'
      shift(61);                    // '>'
    }
    eventHandler.endNonterminal("DirElemConstructor", e0);
  }

  function try_DirElemConstructor()
  {
    shiftT(54);                     // '<'
    lookahead1(4);                  // QName
    shiftT(20);                     // QName
    try_DirAttributeList();
    switch (l1)
    {
    case 48:                        // '/>'
      shiftT(48);                   // '/>'
      break;
    default:
      shiftT(61);                   // '>'
      for (;;)
      {
        lookahead1(174);            // CDataSection | PredefinedEntityRef | ElementContentChar | CharRef | '<' |
                                    // '<!--' | '</' | '<?' | '{' | '{{' | '}}'
        if (l1 == 56)               // '</'
        {
          break;
        }
        try_DirElemContent();
      }
      shiftT(56);                   // '</'
      lookahead1(4);                // QName
      shiftT(20);                   // QName
      lookahead1(12);               // S | '>'
      if (l1 == 21)                 // S
      {
        shiftT(21);                 // S
      }
      lookahead1(8);                // '>'
      shiftT(61);                   // '>'
    }
  }

  function parse_DirAttributeList()
  {
    eventHandler.startNonterminal("DirAttributeList", e0);
    for (;;)
    {
      lookahead1(19);               // S | '/>' | '>'
      if (l1 != 21)                 // S
      {
        break;
      }
      shift(21);                    // S
      lookahead1(91);               // QName | S | '/>' | '>'
      if (l1 == 20)                 // QName
      {
        shift(20);                  // QName
        lookahead1(11);             // S | '='
        if (l1 == 21)               // S
        {
          shift(21);                // S
        }
        lookahead1(7);              // '='
        shift(60);                  // '='
        lookahead1(18);             // S | '"' | "'"
        if (l1 == 21)               // S
        {
          shift(21);                // S
        }
        parse_DirAttributeValue();
      }
    }
    eventHandler.endNonterminal("DirAttributeList", e0);
  }

  function try_DirAttributeList()
  {
    for (;;)
    {
      lookahead1(19);               // S | '/>' | '>'
      if (l1 != 21)                 // S
      {
        break;
      }
      shiftT(21);                   // S
      lookahead1(91);               // QName | S | '/>' | '>'
      if (l1 == 20)                 // QName
      {
        shiftT(20);                 // QName
        lookahead1(11);             // S | '='
        if (l1 == 21)               // S
        {
          shiftT(21);               // S
        }
        lookahead1(7);              // '='
        shiftT(60);                 // '='
        lookahead1(18);             // S | '"' | "'"
        if (l1 == 21)               // S
        {
          shiftT(21);               // S
        }
        try_DirAttributeValue();
      }
    }
  }

  function parse_DirAttributeValue()
  {
    eventHandler.startNonterminal("DirAttributeValue", e0);
    lookahead1(14);                 // '"' | "'"
    switch (l1)
    {
    case 28:                        // '"'
      shift(28);                    // '"'
      for (;;)
      {
        lookahead1(167);            // PredefinedEntityRef | EscapeQuot | QuotAttrContentChar | CharRef | '"' | '{' |
                                    // '{{' | '}}'
        if (l1 == 28)               // '"'
        {
          break;
        }
        switch (l1)
        {
        case 13:                    // EscapeQuot
          shift(13);                // EscapeQuot
          break;
        default:
          parse_QuotAttrValueContent();
        }
      }
      shift(28);                    // '"'
      break;
    default:
      shift(33);                    // "'"
      for (;;)
      {
        lookahead1(168);            // PredefinedEntityRef | EscapeApos | AposAttrContentChar | CharRef | "'" | '{' |
                                    // '{{' | '}}'
        if (l1 == 33)               // "'"
        {
          break;
        }
        switch (l1)
        {
        case 14:                    // EscapeApos
          shift(14);                // EscapeApos
          break;
        default:
          parse_AposAttrValueContent();
        }
      }
      shift(33);                    // "'"
    }
    eventHandler.endNonterminal("DirAttributeValue", e0);
  }

  function try_DirAttributeValue()
  {
    lookahead1(14);                 // '"' | "'"
    switch (l1)
    {
    case 28:                        // '"'
      shiftT(28);                   // '"'
      for (;;)
      {
        lookahead1(167);            // PredefinedEntityRef | EscapeQuot | QuotAttrContentChar | CharRef | '"' | '{' |
                                    // '{{' | '}}'
        if (l1 == 28)               // '"'
        {
          break;
        }
        switch (l1)
        {
        case 13:                    // EscapeQuot
          shiftT(13);               // EscapeQuot
          break;
        default:
          try_QuotAttrValueContent();
        }
      }
      shiftT(28);                   // '"'
      break;
    default:
      shiftT(33);                   // "'"
      for (;;)
      {
        lookahead1(168);            // PredefinedEntityRef | EscapeApos | AposAttrContentChar | CharRef | "'" | '{' |
                                    // '{{' | '}}'
        if (l1 == 33)               // "'"
        {
          break;
        }
        switch (l1)
        {
        case 14:                    // EscapeApos
          shiftT(14);               // EscapeApos
          break;
        default:
          try_AposAttrValueContent();
        }
      }
      shiftT(33);                   // "'"
    }
  }

  function parse_QuotAttrValueContent()
  {
    eventHandler.startNonterminal("QuotAttrValueContent", e0);
    switch (l1)
    {
    case 16:                        // QuotAttrContentChar
      shift(16);                    // QuotAttrContentChar
      break;
    default:
      parse_CommonContent();
    }
    eventHandler.endNonterminal("QuotAttrValueContent", e0);
  }

  function try_QuotAttrValueContent()
  {
    switch (l1)
    {
    case 16:                        // QuotAttrContentChar
      shiftT(16);                   // QuotAttrContentChar
      break;
    default:
      try_CommonContent();
    }
  }

  function parse_AposAttrValueContent()
  {
    eventHandler.startNonterminal("AposAttrValueContent", e0);
    switch (l1)
    {
    case 17:                        // AposAttrContentChar
      shift(17);                    // AposAttrContentChar
      break;
    default:
      parse_CommonContent();
    }
    eventHandler.endNonterminal("AposAttrValueContent", e0);
  }

  function try_AposAttrValueContent()
  {
    switch (l1)
    {
    case 17:                        // AposAttrContentChar
      shiftT(17);                   // AposAttrContentChar
      break;
    default:
      try_CommonContent();
    }
  }

  function parse_DirElemContent()
  {
    eventHandler.startNonterminal("DirElemContent", e0);
    switch (l1)
    {
    case 54:                        // '<'
    case 55:                        // '<!--'
    case 59:                        // '<?'
      parse_DirectConstructor();
      break;
    case 4:                         // CDataSection
      shift(4);                     // CDataSection
      break;
    case 15:                        // ElementContentChar
      shift(15);                    // ElementContentChar
      break;
    default:
      parse_CommonContent();
    }
    eventHandler.endNonterminal("DirElemContent", e0);
  }

  function try_DirElemContent()
  {
    switch (l1)
    {
    case 54:                        // '<'
    case 55:                        // '<!--'
    case 59:                        // '<?'
      try_DirectConstructor();
      break;
    case 4:                         // CDataSection
      shiftT(4);                    // CDataSection
      break;
    case 15:                        // ElementContentChar
      shiftT(15);                   // ElementContentChar
      break;
    default:
      try_CommonContent();
    }
  }

  function parse_DirCommentConstructor()
  {
    eventHandler.startNonterminal("DirCommentConstructor", e0);
    shift(55);                      // '<!--'
    lookahead1(1);                  // DirCommentContents
    shift(2);                       // DirCommentContents
    lookahead1(6);                  // '-->'
    shift(43);                      // '-->'
    eventHandler.endNonterminal("DirCommentConstructor", e0);
  }

  function try_DirCommentConstructor()
  {
    shiftT(55);                     // '<!--'
    lookahead1(1);                  // DirCommentContents
    shiftT(2);                      // DirCommentContents
    lookahead1(6);                  // '-->'
    shiftT(43);                     // '-->'
  }

  function parse_DirPIConstructor()
  {
    eventHandler.startNonterminal("DirPIConstructor", e0);
    shift(59);                      // '<?'
    lookahead1(3);                  // PITarget
    shift(18);                      // PITarget
    lookahead1(13);                 // S | '?>'
    if (l1 == 21)                   // S
    {
      shift(21);                    // S
      lookahead1(2);                // DirPIContents
      shift(3);                     // DirPIContents
    }
    lookahead1(9);                  // '?>'
    shift(65);                      // '?>'
    eventHandler.endNonterminal("DirPIConstructor", e0);
  }

  function try_DirPIConstructor()
  {
    shiftT(59);                     // '<?'
    lookahead1(3);                  // PITarget
    shiftT(18);                     // PITarget
    lookahead1(13);                 // S | '?>'
    if (l1 == 21)                   // S
    {
      shiftT(21);                   // S
      lookahead1(2);                // DirPIContents
      shiftT(3);                    // DirPIContents
    }
    lookahead1(9);                  // '?>'
    shiftT(65);                     // '?>'
  }

  function parse_ComputedConstructor()
  {
    eventHandler.startNonterminal("ComputedConstructor", e0);
    switch (l1)
    {
    case 119:                       // 'document'
      parse_CompDocConstructor();
      break;
    case 121:                       // 'element'
      parse_CompElemConstructor();
      break;
    case 82:                        // 'attribute'
      parse_CompAttrConstructor();
      break;
    case 184:                       // 'namespace'
      parse_CompNamespaceConstructor();
      break;
    case 244:                       // 'text'
      parse_CompTextConstructor();
      break;
    case 96:                        // 'comment'
      parse_CompCommentConstructor();
      break;
    default:
      parse_CompPIConstructor();
    }
    eventHandler.endNonterminal("ComputedConstructor", e0);
  }

  function try_ComputedConstructor()
  {
    switch (l1)
    {
    case 119:                       // 'document'
      try_CompDocConstructor();
      break;
    case 121:                       // 'element'
      try_CompElemConstructor();
      break;
    case 82:                        // 'attribute'
      try_CompAttrConstructor();
      break;
    case 184:                       // 'namespace'
      try_CompNamespaceConstructor();
      break;
    case 244:                       // 'text'
      try_CompTextConstructor();
      break;
    case 96:                        // 'comment'
      try_CompCommentConstructor();
      break;
    default:
      try_CompPIConstructor();
    }
  }

  function parse_CompElemConstructor()
  {
    eventHandler.startNonterminal("CompElemConstructor", e0);
    shift(121);                     // 'element'
    lookahead1W(257);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{'
    switch (l1)
    {
    case 276:                       // '{'
      shift(276);                   // '{'
      lookahead1W(266);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_Expr();
      shift(282);                   // '}'
      break;
    default:
      whitespace();
      parse_EQName();
    }
    lookahead1W(87);                // S^WS | '(:' | '{'
    shift(276);                     // '{'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|' | '}'
    if (l1 != 282)                  // '}'
    {
      whitespace();
      parse_ContentExpr();
    }
    shift(282);                     // '}'
    eventHandler.endNonterminal("CompElemConstructor", e0);
  }

  function try_CompElemConstructor()
  {
    shiftT(121);                    // 'element'
    lookahead1W(257);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{'
    switch (l1)
    {
    case 276:                       // '{'
      shiftT(276);                  // '{'
      lookahead1W(266);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      try_Expr();
      shiftT(282);                  // '}'
      break;
    default:
      try_EQName();
    }
    lookahead1W(87);                // S^WS | '(:' | '{'
    shiftT(276);                    // '{'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|' | '}'
    if (l1 != 282)                  // '}'
    {
      try_ContentExpr();
    }
    shiftT(282);                    // '}'
  }

  function parse_CompNamespaceConstructor()
  {
    eventHandler.startNonterminal("CompNamespaceConstructor", e0);
    shift(184);                     // 'namespace'
    lookahead1W(250);               // NCName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'last' | 'lax' | 'le' | 'let' |
                                    // 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{'
    switch (l1)
    {
    case 276:                       // '{'
      shift(276);                   // '{'
      lookahead1W(266);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_PrefixExpr();
      shift(282);                   // '}'
      break;
    default:
      whitespace();
      parse_Prefix();
    }
    lookahead1W(87);                // S^WS | '(:' | '{'
    shift(276);                     // '{'
    lookahead1W(266);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_URIExpr();
    shift(282);                     // '}'
    eventHandler.endNonterminal("CompNamespaceConstructor", e0);
  }

  function try_CompNamespaceConstructor()
  {
    shiftT(184);                    // 'namespace'
    lookahead1W(250);               // NCName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'last' | 'lax' | 'le' | 'let' |
                                    // 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{'
    switch (l1)
    {
    case 276:                       // '{'
      shiftT(276);                  // '{'
      lookahead1W(266);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      try_PrefixExpr();
      shiftT(282);                  // '}'
      break;
    default:
      try_Prefix();
    }
    lookahead1W(87);                // S^WS | '(:' | '{'
    shiftT(276);                    // '{'
    lookahead1W(266);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
    try_URIExpr();
    shiftT(282);                    // '}'
  }

  function parse_Prefix()
  {
    eventHandler.startNonterminal("Prefix", e0);
    parse_NCName();
    eventHandler.endNonterminal("Prefix", e0);
  }

  function try_Prefix()
  {
    try_NCName();
  }

  function parse_PrefixExpr()
  {
    eventHandler.startNonterminal("PrefixExpr", e0);
    parse_Expr();
    eventHandler.endNonterminal("PrefixExpr", e0);
  }

  function try_PrefixExpr()
  {
    try_Expr();
  }

  function parse_URIExpr()
  {
    eventHandler.startNonterminal("URIExpr", e0);
    parse_Expr();
    eventHandler.endNonterminal("URIExpr", e0);
  }

  function try_URIExpr()
  {
    try_Expr();
  }

  function parse_FunctionItemExpr()
  {
    eventHandler.startNonterminal("FunctionItemExpr", e0);
    switch (l1)
    {
    case 145:                       // 'function'
      lookahead2W(92);              // S^WS | '#' | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 32:                        // '%'
    case 17553:                     // 'function' '('
      parse_InlineFunctionExpr();
      break;
    default:
      parse_NamedFunctionRef();
    }
    eventHandler.endNonterminal("FunctionItemExpr", e0);
  }

  function try_FunctionItemExpr()
  {
    switch (l1)
    {
    case 145:                       // 'function'
      lookahead2W(92);              // S^WS | '#' | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 32:                        // '%'
    case 17553:                     // 'function' '('
      try_InlineFunctionExpr();
      break;
    default:
      try_NamedFunctionRef();
    }
  }

  function parse_NamedFunctionRef()
  {
    eventHandler.startNonterminal("NamedFunctionRef", e0);
    parse_EQName();
    lookahead1W(20);                // S^WS | '#' | '(:'
    shift(29);                      // '#'
    lookahead1W(16);                // IntegerLiteral | S^WS | '(:'
    shift(8);                       // IntegerLiteral
    eventHandler.endNonterminal("NamedFunctionRef", e0);
  }

  function try_NamedFunctionRef()
  {
    try_EQName();
    lookahead1W(20);                // S^WS | '#' | '(:'
    shiftT(29);                     // '#'
    lookahead1W(16);                // IntegerLiteral | S^WS | '(:'
    shiftT(8);                      // IntegerLiteral
  }

  function parse_InlineFunctionExpr()
  {
    eventHandler.startNonterminal("InlineFunctionExpr", e0);
    for (;;)
    {
      lookahead1W(97);              // S^WS | '%' | '(:' | 'function'
      if (l1 != 32)                 // '%'
      {
        break;
      }
      whitespace();
      parse_Annotation();
    }
    shift(145);                     // 'function'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shift(34);                      // '('
    lookahead1W(94);                // S^WS | '$' | '(:' | ')'
    if (l1 == 31)                   // '$'
    {
      whitespace();
      parse_ParamList();
    }
    shift(37);                      // ')'
    lookahead1W(111);               // S^WS | '(:' | 'as' | '{'
    if (l1 == 79)                   // 'as'
    {
      shift(79);                    // 'as'
      lookahead1W(259);             // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_SequenceType();
    }
    lookahead1W(87);                // S^WS | '(:' | '{'
    whitespace();
    parse_FunctionBody();
    eventHandler.endNonterminal("InlineFunctionExpr", e0);
  }

  function try_InlineFunctionExpr()
  {
    for (;;)
    {
      lookahead1W(97);              // S^WS | '%' | '(:' | 'function'
      if (l1 != 32)                 // '%'
      {
        break;
      }
      try_Annotation();
    }
    shiftT(145);                    // 'function'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shiftT(34);                     // '('
    lookahead1W(94);                // S^WS | '$' | '(:' | ')'
    if (l1 == 31)                   // '$'
    {
      try_ParamList();
    }
    shiftT(37);                     // ')'
    lookahead1W(111);               // S^WS | '(:' | 'as' | '{'
    if (l1 == 79)                   // 'as'
    {
      shiftT(79);                   // 'as'
      lookahead1W(259);             // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
      try_SequenceType();
    }
    lookahead1W(87);                // S^WS | '(:' | '{'
    try_FunctionBody();
  }

  function parse_SingleType()
  {
    eventHandler.startNonterminal("SingleType", e0);
    parse_SimpleTypeName();
    lookahead1W(226);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ':=' | ';' | '<' |
                                    // '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' | 'and' | 'as' |
                                    // 'ascending' | 'at' | 'before' | 'case' | 'castable' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' |
                                    // 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' |
                                    // 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' |
                                    // 'order' | 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' |
                                    // 'start' | 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' |
                                    // '||' | '|}' | '}'
    if (l1 == 64)                   // '?'
    {
      shift(64);                    // '?'
    }
    eventHandler.endNonterminal("SingleType", e0);
  }

  function try_SingleType()
  {
    try_SimpleTypeName();
    lookahead1W(226);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ':=' | ';' | '<' |
                                    // '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' | 'and' | 'as' |
                                    // 'ascending' | 'at' | 'before' | 'case' | 'castable' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' |
                                    // 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' |
                                    // 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' |
                                    // 'order' | 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' |
                                    // 'start' | 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' |
                                    // '||' | '|}' | '}'
    if (l1 == 64)                   // '?'
    {
      shiftT(64);                   // '?'
    }
  }

  function parse_TypeDeclaration()
  {
    eventHandler.startNonterminal("TypeDeclaration", e0);
    shift(79);                      // 'as'
    lookahead1W(259);               // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_SequenceType();
    eventHandler.endNonterminal("TypeDeclaration", e0);
  }

  function try_TypeDeclaration()
  {
    shiftT(79);                     // 'as'
    lookahead1W(259);               // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
    try_SequenceType();
  }

  function parse_SequenceType()
  {
    eventHandler.startNonterminal("SequenceType", e0);
    switch (l1)
    {
    case 124:                       // 'empty-sequence'
      lookahead2W(239);             // S^WS | EOF | '!=' | '(' | '(:' | ')' | '*' | '*' | '+' | ',' | '-' | ':' | ':=' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' |
                                    // 'allowing' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'external' | 'for' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'in' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'score' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'union' | 'where' | 'with' | 'words' | '{' | '|' | '||' | '|}' | '}'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 17532:                     // 'empty-sequence' '('
      shift(124);                   // 'empty-sequence'
      lookahead1W(22);              // S^WS | '(' | '(:'
      shift(34);                    // '('
      lookahead1W(23);              // S^WS | '(:' | ')'
      shift(37);                    // ')'
      break;
    default:
      parse_ItemType();
      lookahead1W(234);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '*' | '+' | ',' | '-' | ':' | ':=' | ';' |
                                    // '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' | 'allowing' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'collation' |
                                    // 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' |
                                    // 'end' | 'eq' | 'except' | 'external' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'in' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'score' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'union' | 'where' | 'with' | 'words' | '{' | '|' | '||' | '|}' | '}'
      switch (l1)
      {
      case 39:                      // '*'
      case 40:                      // '+'
      case 64:                      // '?'
        whitespace();
        parse_OccurrenceIndicator();
        break;
      default:
        break;
      }
    }
    eventHandler.endNonterminal("SequenceType", e0);
  }

  function try_SequenceType()
  {
    switch (l1)
    {
    case 124:                       // 'empty-sequence'
      lookahead2W(239);             // S^WS | EOF | '!=' | '(' | '(:' | ')' | '*' | '*' | '+' | ',' | '-' | ':' | ':=' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' |
                                    // 'allowing' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'external' | 'for' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'in' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'score' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'union' | 'where' | 'with' | 'words' | '{' | '|' | '||' | '|}' | '}'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 17532:                     // 'empty-sequence' '('
      shiftT(124);                  // 'empty-sequence'
      lookahead1W(22);              // S^WS | '(' | '(:'
      shiftT(34);                   // '('
      lookahead1W(23);              // S^WS | '(:' | ')'
      shiftT(37);                   // ')'
      break;
    default:
      try_ItemType();
      lookahead1W(234);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '*' | '+' | ',' | '-' | ':' | ':=' | ';' |
                                    // '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' | 'allowing' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'collation' |
                                    // 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' |
                                    // 'end' | 'eq' | 'except' | 'external' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'in' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'score' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'union' | 'where' | 'with' | 'words' | '{' | '|' | '||' | '|}' | '}'
      switch (l1)
      {
      case 39:                      // '*'
      case 40:                      // '+'
      case 64:                      // '?'
        try_OccurrenceIndicator();
        break;
      default:
        break;
      }
    }
  }

  function parse_OccurrenceIndicator()
  {
    eventHandler.startNonterminal("OccurrenceIndicator", e0);
    switch (l1)
    {
    case 64:                        // '?'
      shift(64);                    // '?'
      break;
    case 39:                        // '*'
      shift(39);                    // '*'
      break;
    default:
      shift(40);                    // '+'
    }
    eventHandler.endNonterminal("OccurrenceIndicator", e0);
  }

  function try_OccurrenceIndicator()
  {
    switch (l1)
    {
    case 64:                        // '?'
      shiftT(64);                   // '?'
      break;
    case 39:                        // '*'
      shiftT(39);                   // '*'
      break;
    default:
      shiftT(40);                   // '+'
    }
  }

  function parse_ItemType()
  {
    eventHandler.startNonterminal("ItemType", e0);
    switch (l1)
    {
    case 78:                        // 'array'
    case 82:                        // 'attribute'
    case 96:                        // 'comment'
    case 120:                       // 'document-node'
    case 121:                       // 'element'
    case 145:                       // 'function'
    case 165:                       // 'item'
    case 167:                       // 'json-item'
    case 185:                       // 'namespace-node'
    case 191:                       // 'node'
    case 194:                       // 'object'
    case 216:                       // 'processing-instruction'
    case 226:                       // 'schema-attribute'
    case 227:                       // 'schema-element'
    case 242:                       // 'structured-item'
    case 244:                       // 'text'
      lookahead2W(239);             // S^WS | EOF | '!=' | '(' | '(:' | ')' | '*' | '*' | '+' | ',' | '-' | ':' | ':=' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' |
                                    // 'allowing' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'external' | 'for' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'in' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'score' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'union' | 'where' | 'with' | 'words' | '{' | '|' | '||' | '|}' | '}'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 17490:                     // 'attribute' '('
    case 17504:                     // 'comment' '('
    case 17528:                     // 'document-node' '('
    case 17529:                     // 'element' '('
    case 17593:                     // 'namespace-node' '('
    case 17599:                     // 'node' '('
    case 17624:                     // 'processing-instruction' '('
    case 17634:                     // 'schema-attribute' '('
    case 17635:                     // 'schema-element' '('
    case 17652:                     // 'text' '('
      parse_KindTest();
      break;
    case 17573:                     // 'item' '('
      shift(165);                   // 'item'
      lookahead1W(22);              // S^WS | '(' | '(:'
      shift(34);                    // '('
      lookahead1W(23);              // S^WS | '(:' | ')'
      shift(37);                    // ')'
      break;
    case 32:                        // '%'
    case 17553:                     // 'function' '('
      parse_FunctionTest();
      break;
    case 34:                        // '('
      parse_ParenthesizedItemType();
      break;
    case 17486:                     // 'array' '('
    case 17575:                     // 'json-item' '('
    case 17602:                     // 'object' '('
      parse_JSONTest();
      break;
    case 17650:                     // 'structured-item' '('
      parse_StructuredItemTest();
      break;
    default:
      parse_AtomicOrUnionType();
    }
    eventHandler.endNonterminal("ItemType", e0);
  }

  function try_ItemType()
  {
    switch (l1)
    {
    case 78:                        // 'array'
    case 82:                        // 'attribute'
    case 96:                        // 'comment'
    case 120:                       // 'document-node'
    case 121:                       // 'element'
    case 145:                       // 'function'
    case 165:                       // 'item'
    case 167:                       // 'json-item'
    case 185:                       // 'namespace-node'
    case 191:                       // 'node'
    case 194:                       // 'object'
    case 216:                       // 'processing-instruction'
    case 226:                       // 'schema-attribute'
    case 227:                       // 'schema-element'
    case 242:                       // 'structured-item'
    case 244:                       // 'text'
      lookahead2W(239);             // S^WS | EOF | '!=' | '(' | '(:' | ')' | '*' | '*' | '+' | ',' | '-' | ':' | ':=' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' |
                                    // 'allowing' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'external' | 'for' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'in' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'score' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'union' | 'where' | 'with' | 'words' | '{' | '|' | '||' | '|}' | '}'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 17490:                     // 'attribute' '('
    case 17504:                     // 'comment' '('
    case 17528:                     // 'document-node' '('
    case 17529:                     // 'element' '('
    case 17593:                     // 'namespace-node' '('
    case 17599:                     // 'node' '('
    case 17624:                     // 'processing-instruction' '('
    case 17634:                     // 'schema-attribute' '('
    case 17635:                     // 'schema-element' '('
    case 17652:                     // 'text' '('
      try_KindTest();
      break;
    case 17573:                     // 'item' '('
      shiftT(165);                  // 'item'
      lookahead1W(22);              // S^WS | '(' | '(:'
      shiftT(34);                   // '('
      lookahead1W(23);              // S^WS | '(:' | ')'
      shiftT(37);                   // ')'
      break;
    case 32:                        // '%'
    case 17553:                     // 'function' '('
      try_FunctionTest();
      break;
    case 34:                        // '('
      try_ParenthesizedItemType();
      break;
    case 17486:                     // 'array' '('
    case 17575:                     // 'json-item' '('
    case 17602:                     // 'object' '('
      try_JSONTest();
      break;
    case 17650:                     // 'structured-item' '('
      try_StructuredItemTest();
      break;
    default:
      try_AtomicOrUnionType();
    }
  }

  function parse_JSONTest()
  {
    eventHandler.startNonterminal("JSONTest", e0);
    switch (l1)
    {
    case 167:                       // 'json-item'
      parse_JSONItemTest();
      break;
    case 194:                       // 'object'
      parse_JSONObjectTest();
      break;
    default:
      parse_JSONArrayTest();
    }
    eventHandler.endNonterminal("JSONTest", e0);
  }

  function try_JSONTest()
  {
    switch (l1)
    {
    case 167:                       // 'json-item'
      try_JSONItemTest();
      break;
    case 194:                       // 'object'
      try_JSONObjectTest();
      break;
    default:
      try_JSONArrayTest();
    }
  }

  function parse_StructuredItemTest()
  {
    eventHandler.startNonterminal("StructuredItemTest", e0);
    shift(242);                     // 'structured-item'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shift(34);                      // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    shift(37);                      // ')'
    eventHandler.endNonterminal("StructuredItemTest", e0);
  }

  function try_StructuredItemTest()
  {
    shiftT(242);                    // 'structured-item'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shiftT(34);                     // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    shiftT(37);                     // ')'
  }

  function parse_JSONItemTest()
  {
    eventHandler.startNonterminal("JSONItemTest", e0);
    shift(167);                     // 'json-item'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shift(34);                      // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    shift(37);                      // ')'
    eventHandler.endNonterminal("JSONItemTest", e0);
  }

  function try_JSONItemTest()
  {
    shiftT(167);                    // 'json-item'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shiftT(34);                     // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    shiftT(37);                     // ')'
  }

  function parse_JSONObjectTest()
  {
    eventHandler.startNonterminal("JSONObjectTest", e0);
    shift(194);                     // 'object'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shift(34);                      // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    shift(37);                      // ')'
    eventHandler.endNonterminal("JSONObjectTest", e0);
  }

  function try_JSONObjectTest()
  {
    shiftT(194);                    // 'object'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shiftT(34);                     // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    shiftT(37);                     // ')'
  }

  function parse_JSONArrayTest()
  {
    eventHandler.startNonterminal("JSONArrayTest", e0);
    shift(78);                      // 'array'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shift(34);                      // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    shift(37);                      // ')'
    eventHandler.endNonterminal("JSONArrayTest", e0);
  }

  function try_JSONArrayTest()
  {
    shiftT(78);                     // 'array'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shiftT(34);                     // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    shiftT(37);                     // ')'
  }

  function parse_AtomicOrUnionType()
  {
    eventHandler.startNonterminal("AtomicOrUnionType", e0);
    parse_EQName();
    eventHandler.endNonterminal("AtomicOrUnionType", e0);
  }

  function try_AtomicOrUnionType()
  {
    try_EQName();
  }

  function parse_KindTest()
  {
    eventHandler.startNonterminal("KindTest", e0);
    switch (l1)
    {
    case 120:                       // 'document-node'
      parse_DocumentTest();
      break;
    case 121:                       // 'element'
      parse_ElementTest();
      break;
    case 82:                        // 'attribute'
      parse_AttributeTest();
      break;
    case 227:                       // 'schema-element'
      parse_SchemaElementTest();
      break;
    case 226:                       // 'schema-attribute'
      parse_SchemaAttributeTest();
      break;
    case 216:                       // 'processing-instruction'
      parse_PITest();
      break;
    case 96:                        // 'comment'
      parse_CommentTest();
      break;
    case 244:                       // 'text'
      parse_TextTest();
      break;
    case 185:                       // 'namespace-node'
      parse_NamespaceNodeTest();
      break;
    default:
      parse_AnyKindTest();
    }
    eventHandler.endNonterminal("KindTest", e0);
  }

  function try_KindTest()
  {
    switch (l1)
    {
    case 120:                       // 'document-node'
      try_DocumentTest();
      break;
    case 121:                       // 'element'
      try_ElementTest();
      break;
    case 82:                        // 'attribute'
      try_AttributeTest();
      break;
    case 227:                       // 'schema-element'
      try_SchemaElementTest();
      break;
    case 226:                       // 'schema-attribute'
      try_SchemaAttributeTest();
      break;
    case 216:                       // 'processing-instruction'
      try_PITest();
      break;
    case 96:                        // 'comment'
      try_CommentTest();
      break;
    case 244:                       // 'text'
      try_TextTest();
      break;
    case 185:                       // 'namespace-node'
      try_NamespaceNodeTest();
      break;
    default:
      try_AnyKindTest();
    }
  }

  function parse_AnyKindTest()
  {
    eventHandler.startNonterminal("AnyKindTest", e0);
    shift(191);                     // 'node'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shift(34);                      // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    shift(37);                      // ')'
    eventHandler.endNonterminal("AnyKindTest", e0);
  }

  function try_AnyKindTest()
  {
    shiftT(191);                    // 'node'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shiftT(34);                     // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    shiftT(37);                     // ')'
  }

  function parse_DocumentTest()
  {
    eventHandler.startNonterminal("DocumentTest", e0);
    shift(120);                     // 'document-node'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shift(34);                      // '('
    lookahead1W(144);               // S^WS | '(:' | ')' | 'element' | 'schema-element'
    if (l1 != 37)                   // ')'
    {
      switch (l1)
      {
      case 121:                     // 'element'
        whitespace();
        parse_ElementTest();
        break;
      default:
        whitespace();
        parse_SchemaElementTest();
      }
    }
    lookahead1W(23);                // S^WS | '(:' | ')'
    shift(37);                      // ')'
    eventHandler.endNonterminal("DocumentTest", e0);
  }

  function try_DocumentTest()
  {
    shiftT(120);                    // 'document-node'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shiftT(34);                     // '('
    lookahead1W(144);               // S^WS | '(:' | ')' | 'element' | 'schema-element'
    if (l1 != 37)                   // ')'
    {
      switch (l1)
      {
      case 121:                     // 'element'
        try_ElementTest();
        break;
      default:
        try_SchemaElementTest();
      }
    }
    lookahead1W(23);                // S^WS | '(:' | ')'
    shiftT(37);                     // ')'
  }

  function parse_TextTest()
  {
    eventHandler.startNonterminal("TextTest", e0);
    shift(244);                     // 'text'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shift(34);                      // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    shift(37);                      // ')'
    eventHandler.endNonterminal("TextTest", e0);
  }

  function try_TextTest()
  {
    shiftT(244);                    // 'text'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shiftT(34);                     // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    shiftT(37);                     // ')'
  }

  function parse_CommentTest()
  {
    eventHandler.startNonterminal("CommentTest", e0);
    shift(96);                      // 'comment'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shift(34);                      // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    shift(37);                      // ')'
    eventHandler.endNonterminal("CommentTest", e0);
  }

  function try_CommentTest()
  {
    shiftT(96);                     // 'comment'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shiftT(34);                     // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    shiftT(37);                     // ')'
  }

  function parse_NamespaceNodeTest()
  {
    eventHandler.startNonterminal("NamespaceNodeTest", e0);
    shift(185);                     // 'namespace-node'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shift(34);                      // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    shift(37);                      // ')'
    eventHandler.endNonterminal("NamespaceNodeTest", e0);
  }

  function try_NamespaceNodeTest()
  {
    shiftT(185);                    // 'namespace-node'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shiftT(34);                     // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    shiftT(37);                     // ')'
  }

  function parse_PITest()
  {
    eventHandler.startNonterminal("PITest", e0);
    shift(216);                     // 'processing-instruction'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shift(34);                      // '('
    lookahead1W(252);               // StringLiteral | NCName^Token | S^WS | '(:' | ')' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    if (l1 != 37)                   // ')'
    {
      switch (l1)
      {
      case 11:                      // StringLiteral
        shift(11);                  // StringLiteral
        break;
      default:
        whitespace();
        parse_NCName();
      }
    }
    lookahead1W(23);                // S^WS | '(:' | ')'
    shift(37);                      // ')'
    eventHandler.endNonterminal("PITest", e0);
  }

  function try_PITest()
  {
    shiftT(216);                    // 'processing-instruction'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shiftT(34);                     // '('
    lookahead1W(252);               // StringLiteral | NCName^Token | S^WS | '(:' | ')' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    if (l1 != 37)                   // ')'
    {
      switch (l1)
      {
      case 11:                      // StringLiteral
        shiftT(11);                 // StringLiteral
        break;
      default:
        try_NCName();
      }
    }
    lookahead1W(23);                // S^WS | '(:' | ')'
    shiftT(37);                     // ')'
  }

  function parse_AttributeTest()
  {
    eventHandler.startNonterminal("AttributeTest", e0);
    shift(82);                      // 'attribute'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shift(34);                      // '('
    lookahead1W(260);               // EQName^Token | S^WS | '(:' | ')' | '*' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
    if (l1 != 37)                   // ')'
    {
      whitespace();
      parse_AttribNameOrWildcard();
      lookahead1W(101);             // S^WS | '(:' | ')' | ','
      if (l1 == 41)                 // ','
      {
        shift(41);                  // ','
        lookahead1W(254);           // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
        whitespace();
        parse_TypeName();
      }
    }
    lookahead1W(23);                // S^WS | '(:' | ')'
    shift(37);                      // ')'
    eventHandler.endNonterminal("AttributeTest", e0);
  }

  function try_AttributeTest()
  {
    shiftT(82);                     // 'attribute'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shiftT(34);                     // '('
    lookahead1W(260);               // EQName^Token | S^WS | '(:' | ')' | '*' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
    if (l1 != 37)                   // ')'
    {
      try_AttribNameOrWildcard();
      lookahead1W(101);             // S^WS | '(:' | ')' | ','
      if (l1 == 41)                 // ','
      {
        shiftT(41);                 // ','
        lookahead1W(254);           // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
        try_TypeName();
      }
    }
    lookahead1W(23);                // S^WS | '(:' | ')'
    shiftT(37);                     // ')'
  }

  function parse_AttribNameOrWildcard()
  {
    eventHandler.startNonterminal("AttribNameOrWildcard", e0);
    switch (l1)
    {
    case 38:                        // '*'
      shift(38);                    // '*'
      break;
    default:
      parse_AttributeName();
    }
    eventHandler.endNonterminal("AttribNameOrWildcard", e0);
  }

  function try_AttribNameOrWildcard()
  {
    switch (l1)
    {
    case 38:                        // '*'
      shiftT(38);                   // '*'
      break;
    default:
      try_AttributeName();
    }
  }

  function parse_SchemaAttributeTest()
  {
    eventHandler.startNonterminal("SchemaAttributeTest", e0);
    shift(226);                     // 'schema-attribute'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shift(34);                      // '('
    lookahead1W(254);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_AttributeDeclaration();
    lookahead1W(23);                // S^WS | '(:' | ')'
    shift(37);                      // ')'
    eventHandler.endNonterminal("SchemaAttributeTest", e0);
  }

  function try_SchemaAttributeTest()
  {
    shiftT(226);                    // 'schema-attribute'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shiftT(34);                     // '('
    lookahead1W(254);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
    try_AttributeDeclaration();
    lookahead1W(23);                // S^WS | '(:' | ')'
    shiftT(37);                     // ')'
  }

  function parse_AttributeDeclaration()
  {
    eventHandler.startNonterminal("AttributeDeclaration", e0);
    parse_AttributeName();
    eventHandler.endNonterminal("AttributeDeclaration", e0);
  }

  function try_AttributeDeclaration()
  {
    try_AttributeName();
  }

  function parse_ElementTest()
  {
    eventHandler.startNonterminal("ElementTest", e0);
    shift(121);                     // 'element'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shift(34);                      // '('
    lookahead1W(260);               // EQName^Token | S^WS | '(:' | ')' | '*' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
    if (l1 != 37)                   // ')'
    {
      whitespace();
      parse_ElementNameOrWildcard();
      lookahead1W(101);             // S^WS | '(:' | ')' | ','
      if (l1 == 41)                 // ','
      {
        shift(41);                  // ','
        lookahead1W(254);           // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
        whitespace();
        parse_TypeName();
        lookahead1W(102);           // S^WS | '(:' | ')' | '?'
        if (l1 == 64)               // '?'
        {
          shift(64);                // '?'
        }
      }
    }
    lookahead1W(23);                // S^WS | '(:' | ')'
    shift(37);                      // ')'
    eventHandler.endNonterminal("ElementTest", e0);
  }

  function try_ElementTest()
  {
    shiftT(121);                    // 'element'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shiftT(34);                     // '('
    lookahead1W(260);               // EQName^Token | S^WS | '(:' | ')' | '*' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
    if (l1 != 37)                   // ')'
    {
      try_ElementNameOrWildcard();
      lookahead1W(101);             // S^WS | '(:' | ')' | ','
      if (l1 == 41)                 // ','
      {
        shiftT(41);                 // ','
        lookahead1W(254);           // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
        try_TypeName();
        lookahead1W(102);           // S^WS | '(:' | ')' | '?'
        if (l1 == 64)               // '?'
        {
          shiftT(64);               // '?'
        }
      }
    }
    lookahead1W(23);                // S^WS | '(:' | ')'
    shiftT(37);                     // ')'
  }

  function parse_ElementNameOrWildcard()
  {
    eventHandler.startNonterminal("ElementNameOrWildcard", e0);
    switch (l1)
    {
    case 38:                        // '*'
      shift(38);                    // '*'
      break;
    default:
      parse_ElementName();
    }
    eventHandler.endNonterminal("ElementNameOrWildcard", e0);
  }

  function try_ElementNameOrWildcard()
  {
    switch (l1)
    {
    case 38:                        // '*'
      shiftT(38);                   // '*'
      break;
    default:
      try_ElementName();
    }
  }

  function parse_SchemaElementTest()
  {
    eventHandler.startNonterminal("SchemaElementTest", e0);
    shift(227);                     // 'schema-element'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shift(34);                      // '('
    lookahead1W(254);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_ElementDeclaration();
    lookahead1W(23);                // S^WS | '(:' | ')'
    shift(37);                      // ')'
    eventHandler.endNonterminal("SchemaElementTest", e0);
  }

  function try_SchemaElementTest()
  {
    shiftT(227);                    // 'schema-element'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shiftT(34);                     // '('
    lookahead1W(254);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
    try_ElementDeclaration();
    lookahead1W(23);                // S^WS | '(:' | ')'
    shiftT(37);                     // ')'
  }

  function parse_ElementDeclaration()
  {
    eventHandler.startNonterminal("ElementDeclaration", e0);
    parse_ElementName();
    eventHandler.endNonterminal("ElementDeclaration", e0);
  }

  function try_ElementDeclaration()
  {
    try_ElementName();
  }

  function parse_AttributeName()
  {
    eventHandler.startNonterminal("AttributeName", e0);
    parse_EQName();
    eventHandler.endNonterminal("AttributeName", e0);
  }

  function try_AttributeName()
  {
    try_EQName();
  }

  function parse_ElementName()
  {
    eventHandler.startNonterminal("ElementName", e0);
    parse_EQName();
    eventHandler.endNonterminal("ElementName", e0);
  }

  function try_ElementName()
  {
    try_EQName();
  }

  function parse_SimpleTypeName()
  {
    eventHandler.startNonterminal("SimpleTypeName", e0);
    parse_TypeName();
    eventHandler.endNonterminal("SimpleTypeName", e0);
  }

  function try_SimpleTypeName()
  {
    try_TypeName();
  }

  function parse_TypeName()
  {
    eventHandler.startNonterminal("TypeName", e0);
    parse_EQName();
    eventHandler.endNonterminal("TypeName", e0);
  }

  function try_TypeName()
  {
    try_EQName();
  }

  function parse_FunctionTest()
  {
    eventHandler.startNonterminal("FunctionTest", e0);
    for (;;)
    {
      lookahead1W(97);              // S^WS | '%' | '(:' | 'function'
      if (l1 != 32)                 // '%'
      {
        break;
      }
      whitespace();
      parse_Annotation();
    }
    switch (l1)
    {
    case 145:                       // 'function'
      lookahead2W(22);              // S^WS | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    lk = memoized(4, e0);
    if (lk == 0)
    {
      var b0A = b0; var e0A = e0; var l1A = l1;
      var b1A = b1; var e1A = e1; var l2A = l2;
      var b2A = b2; var e2A = e2;
      try
      {
        try_AnyFunctionTest();
        lk = -1;
      }
      catch (p1A)
      {
        lk = -2;
      }
      b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
      b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
      b2 = b2A; e2 = e2A; end = e2A; }}
      memoize(4, e0, lk);
    }
    switch (lk)
    {
    case -1:
      whitespace();
      parse_AnyFunctionTest();
      break;
    default:
      whitespace();
      parse_TypedFunctionTest();
    }
    eventHandler.endNonterminal("FunctionTest", e0);
  }

  function try_FunctionTest()
  {
    for (;;)
    {
      lookahead1W(97);              // S^WS | '%' | '(:' | 'function'
      if (l1 != 32)                 // '%'
      {
        break;
      }
      try_Annotation();
    }
    switch (l1)
    {
    case 145:                       // 'function'
      lookahead2W(22);              // S^WS | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    lk = memoized(4, e0);
    if (lk == 0)
    {
      var b0A = b0; var e0A = e0; var l1A = l1;
      var b1A = b1; var e1A = e1; var l2A = l2;
      var b2A = b2; var e2A = e2;
      try
      {
        try_AnyFunctionTest();
        memoize(4, e0A, -1);
        lk = -3;
      }
      catch (p1A)
      {
        lk = -2;
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(4, e0A, -2);
      }
    }
    switch (lk)
    {
    case -1:
      try_AnyFunctionTest();
      break;
    case -3:
      break;
    default:
      try_TypedFunctionTest();
    }
  }

  function parse_AnyFunctionTest()
  {
    eventHandler.startNonterminal("AnyFunctionTest", e0);
    shift(145);                     // 'function'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shift(34);                      // '('
    lookahead1W(24);                // S^WS | '(:' | '*'
    shift(38);                      // '*'
    lookahead1W(23);                // S^WS | '(:' | ')'
    shift(37);                      // ')'
    eventHandler.endNonterminal("AnyFunctionTest", e0);
  }

  function try_AnyFunctionTest()
  {
    shiftT(145);                    // 'function'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shiftT(34);                     // '('
    lookahead1W(24);                // S^WS | '(:' | '*'
    shiftT(38);                     // '*'
    lookahead1W(23);                // S^WS | '(:' | ')'
    shiftT(37);                     // ')'
  }

  function parse_TypedFunctionTest()
  {
    eventHandler.startNonterminal("TypedFunctionTest", e0);
    shift(145);                     // 'function'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shift(34);                      // '('
    lookahead1W(262);               // EQName^Token | S^WS | '%' | '(' | '(:' | ')' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
    if (l1 != 37)                   // ')'
    {
      whitespace();
      parse_SequenceType();
      for (;;)
      {
        lookahead1W(101);           // S^WS | '(:' | ')' | ','
        if (l1 != 41)               // ','
        {
          break;
        }
        shift(41);                  // ','
        lookahead1W(259);           // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
        whitespace();
        parse_SequenceType();
      }
    }
    shift(37);                      // ')'
    lookahead1W(30);                // S^WS | '(:' | 'as'
    shift(79);                      // 'as'
    lookahead1W(259);               // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_SequenceType();
    eventHandler.endNonterminal("TypedFunctionTest", e0);
  }

  function try_TypedFunctionTest()
  {
    shiftT(145);                    // 'function'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shiftT(34);                     // '('
    lookahead1W(262);               // EQName^Token | S^WS | '%' | '(' | '(:' | ')' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
    if (l1 != 37)                   // ')'
    {
      try_SequenceType();
      for (;;)
      {
        lookahead1W(101);           // S^WS | '(:' | ')' | ','
        if (l1 != 41)               // ','
        {
          break;
        }
        shiftT(41);                 // ','
        lookahead1W(259);           // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
        try_SequenceType();
      }
    }
    shiftT(37);                     // ')'
    lookahead1W(30);                // S^WS | '(:' | 'as'
    shiftT(79);                     // 'as'
    lookahead1W(259);               // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
    try_SequenceType();
  }

  function parse_ParenthesizedItemType()
  {
    eventHandler.startNonterminal("ParenthesizedItemType", e0);
    shift(34);                      // '('
    lookahead1W(259);               // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_ItemType();
    lookahead1W(23);                // S^WS | '(:' | ')'
    shift(37);                      // ')'
    eventHandler.endNonterminal("ParenthesizedItemType", e0);
  }

  function try_ParenthesizedItemType()
  {
    shiftT(34);                     // '('
    lookahead1W(259);               // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
    try_ItemType();
    lookahead1W(23);                // S^WS | '(:' | ')'
    shiftT(37);                     // ')'
  }

  function parse_RevalidationDecl()
  {
    eventHandler.startNonterminal("RevalidationDecl", e0);
    shift(108);                     // 'declare'
    lookahead1W(72);                // S^WS | '(:' | 'revalidation'
    shift(222);                     // 'revalidation'
    lookahead1W(152);               // S^WS | '(:' | 'lax' | 'skip' | 'strict'
    switch (l1)
    {
    case 240:                       // 'strict'
      shift(240);                   // 'strict'
      break;
    case 171:                       // 'lax'
      shift(171);                   // 'lax'
      break;
    default:
      shift(233);                   // 'skip'
    }
    eventHandler.endNonterminal("RevalidationDecl", e0);
  }

  function parse_InsertExprTargetChoice()
  {
    eventHandler.startNonterminal("InsertExprTargetChoice", e0);
    switch (l1)
    {
    case 70:                        // 'after'
      shift(70);                    // 'after'
      break;
    case 84:                        // 'before'
      shift(84);                    // 'before'
      break;
    default:
      if (l1 == 79)                 // 'as'
      {
        shift(79);                  // 'as'
        lookahead1W(119);           // S^WS | '(:' | 'first' | 'last'
        switch (l1)
        {
        case 134:                   // 'first'
          shift(134);               // 'first'
          break;
        default:
          shift(170);               // 'last'
        }
      }
      lookahead1W(54);              // S^WS | '(:' | 'into'
      shift(163);                   // 'into'
    }
    eventHandler.endNonterminal("InsertExprTargetChoice", e0);
  }

  function try_InsertExprTargetChoice()
  {
    switch (l1)
    {
    case 70:                        // 'after'
      shiftT(70);                   // 'after'
      break;
    case 84:                        // 'before'
      shiftT(84);                   // 'before'
      break;
    default:
      if (l1 == 79)                 // 'as'
      {
        shiftT(79);                 // 'as'
        lookahead1W(119);           // S^WS | '(:' | 'first' | 'last'
        switch (l1)
        {
        case 134:                   // 'first'
          shiftT(134);              // 'first'
          break;
        default:
          shiftT(170);              // 'last'
        }
      }
      lookahead1W(54);              // S^WS | '(:' | 'into'
      shiftT(163);                  // 'into'
    }
  }

  function parse_InsertExpr()
  {
    eventHandler.startNonterminal("InsertExpr", e0);
    shift(159);                     // 'insert'
    lookahead1W(129);               // S^WS | '(:' | 'node' | 'nodes'
    switch (l1)
    {
    case 191:                       // 'node'
      shift(191);                   // 'node'
      break;
    default:
      shift(192);                   // 'nodes'
    }
    lookahead1W(266);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_SourceExpr();
    whitespace();
    parse_InsertExprTargetChoice();
    lookahead1W(266);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_TargetExpr();
    eventHandler.endNonterminal("InsertExpr", e0);
  }

  function try_InsertExpr()
  {
    shiftT(159);                    // 'insert'
    lookahead1W(129);               // S^WS | '(:' | 'node' | 'nodes'
    switch (l1)
    {
    case 191:                       // 'node'
      shiftT(191);                  // 'node'
      break;
    default:
      shiftT(192);                  // 'nodes'
    }
    lookahead1W(266);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
    try_SourceExpr();
    try_InsertExprTargetChoice();
    lookahead1W(266);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
    try_TargetExpr();
  }

  function parse_DeleteExpr()
  {
    eventHandler.startNonterminal("DeleteExpr", e0);
    shift(110);                     // 'delete'
    lookahead1W(129);               // S^WS | '(:' | 'node' | 'nodes'
    switch (l1)
    {
    case 191:                       // 'node'
      shift(191);                   // 'node'
      break;
    default:
      shift(192);                   // 'nodes'
    }
    lookahead1W(266);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_TargetExpr();
    eventHandler.endNonterminal("DeleteExpr", e0);
  }

  function try_DeleteExpr()
  {
    shiftT(110);                    // 'delete'
    lookahead1W(129);               // S^WS | '(:' | 'node' | 'nodes'
    switch (l1)
    {
    case 191:                       // 'node'
      shiftT(191);                  // 'node'
      break;
    default:
      shiftT(192);                  // 'nodes'
    }
    lookahead1W(266);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
    try_TargetExpr();
  }

  function parse_ReplaceExpr()
  {
    eventHandler.startNonterminal("ReplaceExpr", e0);
    shift(219);                     // 'replace'
    lookahead1W(130);               // S^WS | '(:' | 'node' | 'value'
    if (l1 == 261)                  // 'value'
    {
      shift(261);                   // 'value'
      lookahead1W(64);              // S^WS | '(:' | 'of'
      shift(196);                   // 'of'
    }
    lookahead1W(62);                // S^WS | '(:' | 'node'
    shift(191);                     // 'node'
    lookahead1W(266);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_TargetExpr();
    shift(270);                     // 'with'
    lookahead1W(266);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("ReplaceExpr", e0);
  }

  function try_ReplaceExpr()
  {
    shiftT(219);                    // 'replace'
    lookahead1W(130);               // S^WS | '(:' | 'node' | 'value'
    if (l1 == 261)                  // 'value'
    {
      shiftT(261);                  // 'value'
      lookahead1W(64);              // S^WS | '(:' | 'of'
      shiftT(196);                  // 'of'
    }
    lookahead1W(62);                // S^WS | '(:' | 'node'
    shiftT(191);                    // 'node'
    lookahead1W(266);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
    try_TargetExpr();
    shiftT(270);                    // 'with'
    lookahead1W(266);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_RenameExpr()
  {
    eventHandler.startNonterminal("RenameExpr", e0);
    shift(218);                     // 'rename'
    lookahead1W(62);                // S^WS | '(:' | 'node'
    shift(191);                     // 'node'
    lookahead1W(266);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_TargetExpr();
    shift(79);                      // 'as'
    lookahead1W(266);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_NewNameExpr();
    eventHandler.endNonterminal("RenameExpr", e0);
  }

  function try_RenameExpr()
  {
    shiftT(218);                    // 'rename'
    lookahead1W(62);                // S^WS | '(:' | 'node'
    shiftT(191);                    // 'node'
    lookahead1W(266);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
    try_TargetExpr();
    shiftT(79);                     // 'as'
    lookahead1W(266);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
    try_NewNameExpr();
  }

  function parse_SourceExpr()
  {
    eventHandler.startNonterminal("SourceExpr", e0);
    parse_ExprSingle();
    eventHandler.endNonterminal("SourceExpr", e0);
  }

  function try_SourceExpr()
  {
    try_ExprSingle();
  }

  function parse_TargetExpr()
  {
    eventHandler.startNonterminal("TargetExpr", e0);
    parse_ExprSingle();
    eventHandler.endNonterminal("TargetExpr", e0);
  }

  function try_TargetExpr()
  {
    try_ExprSingle();
  }

  function parse_NewNameExpr()
  {
    eventHandler.startNonterminal("NewNameExpr", e0);
    parse_ExprSingle();
    eventHandler.endNonterminal("NewNameExpr", e0);
  }

  function try_NewNameExpr()
  {
    try_ExprSingle();
  }

  function parse_TransformExpr()
  {
    eventHandler.startNonterminal("TransformExpr", e0);
    shift(103);                     // 'copy'
    lookahead1W(21);                // S^WS | '$' | '(:'
    shift(31);                      // '$'
    lookahead1W(254);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_VarName();
    lookahead1W(27);                // S^WS | '(:' | ':='
    shift(52);                      // ':='
    lookahead1W(266);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    for (;;)
    {
      if (l1 != 41)                 // ','
      {
        break;
      }
      shift(41);                    // ','
      lookahead1W(21);              // S^WS | '$' | '(:'
      shift(31);                    // '$'
      lookahead1W(254);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_VarName();
      lookahead1W(27);              // S^WS | '(:' | ':='
      shift(52);                    // ':='
      lookahead1W(266);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_ExprSingle();
    }
    shift(181);                     // 'modify'
    lookahead1W(266);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    shift(220);                     // 'return'
    lookahead1W(266);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("TransformExpr", e0);
  }

  function try_TransformExpr()
  {
    shiftT(103);                    // 'copy'
    lookahead1W(21);                // S^WS | '$' | '(:'
    shiftT(31);                     // '$'
    lookahead1W(254);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
    try_VarName();
    lookahead1W(27);                // S^WS | '(:' | ':='
    shiftT(52);                     // ':='
    lookahead1W(266);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
    for (;;)
    {
      if (l1 != 41)                 // ','
      {
        break;
      }
      shiftT(41);                   // ','
      lookahead1W(21);              // S^WS | '$' | '(:'
      shiftT(31);                   // '$'
      lookahead1W(254);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
      try_VarName();
      lookahead1W(27);              // S^WS | '(:' | ':='
      shiftT(52);                   // ':='
      lookahead1W(266);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      try_ExprSingle();
    }
    shiftT(181);                    // 'modify'
    lookahead1W(266);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
    shiftT(220);                    // 'return'
    lookahead1W(266);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_FTSelection()
  {
    eventHandler.startNonterminal("FTSelection", e0);
    parse_FTOr();
    for (;;)
    {
      lookahead1W(211);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ':=' | ';' | '<' | '<<' | '<=' |
                                    // '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'modify' | 'ne' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'return' | 'same' | 'satisfies' |
                                    // 'stable' | 'start' | 'where' | 'window' | 'with' | 'without' | '|}' | '}'
      switch (l1)
      {
      case 81:                      // 'at'
        lookahead2W(151);           // S^WS | '(:' | 'end' | 'position' | 'start'
        break;
      default:
        lk = l1;
      }
      if (lk != 115                 // 'different'
       && lk != 117                 // 'distance'
       && lk != 127                 // 'entire'
       && lk != 202                 // 'ordered'
       && lk != 223                 // 'same'
       && lk != 269                 // 'window'
       && lk != 64593               // 'at' 'end'
       && lk != 121425)             // 'at' 'start'
      {
        break;
      }
      whitespace();
      parse_FTPosFilter();
    }
    eventHandler.endNonterminal("FTSelection", e0);
  }

  function try_FTSelection()
  {
    try_FTOr();
    for (;;)
    {
      lookahead1W(211);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ':=' | ';' | '<' | '<<' | '<=' |
                                    // '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'modify' | 'ne' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'return' | 'same' | 'satisfies' |
                                    // 'stable' | 'start' | 'where' | 'window' | 'with' | 'without' | '|}' | '}'
      switch (l1)
      {
      case 81:                      // 'at'
        lookahead2W(151);           // S^WS | '(:' | 'end' | 'position' | 'start'
        break;
      default:
        lk = l1;
      }
      if (lk != 115                 // 'different'
       && lk != 117                 // 'distance'
       && lk != 127                 // 'entire'
       && lk != 202                 // 'ordered'
       && lk != 223                 // 'same'
       && lk != 269                 // 'window'
       && lk != 64593               // 'at' 'end'
       && lk != 121425)             // 'at' 'start'
      {
        break;
      }
      try_FTPosFilter();
    }
  }

  function parse_FTWeight()
  {
    eventHandler.startNonterminal("FTWeight", e0);
    shift(264);                     // 'weight'
    lookahead1W(87);                // S^WS | '(:' | '{'
    shift(276);                     // '{'
    lookahead1W(266);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_Expr();
    shift(282);                     // '}'
    eventHandler.endNonterminal("FTWeight", e0);
  }

  function try_FTWeight()
  {
    shiftT(264);                    // 'weight'
    lookahead1W(87);                // S^WS | '(:' | '{'
    shiftT(276);                    // '{'
    lookahead1W(266);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
    try_Expr();
    shiftT(282);                    // '}'
  }

  function parse_FTOr()
  {
    eventHandler.startNonterminal("FTOr", e0);
    parse_FTAnd();
    for (;;)
    {
      if (l1 != 144)                // 'ftor'
      {
        break;
      }
      shift(144);                   // 'ftor'
      lookahead1W(162);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      whitespace();
      parse_FTAnd();
    }
    eventHandler.endNonterminal("FTOr", e0);
  }

  function try_FTOr()
  {
    try_FTAnd();
    for (;;)
    {
      if (l1 != 144)                // 'ftor'
      {
        break;
      }
      shiftT(144);                  // 'ftor'
      lookahead1W(162);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      try_FTAnd();
    }
  }

  function parse_FTAnd()
  {
    eventHandler.startNonterminal("FTAnd", e0);
    parse_FTMildNot();
    for (;;)
    {
      if (l1 != 142)                // 'ftand'
      {
        break;
      }
      shift(142);                   // 'ftand'
      lookahead1W(162);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      whitespace();
      parse_FTMildNot();
    }
    eventHandler.endNonterminal("FTAnd", e0);
  }

  function try_FTAnd()
  {
    try_FTMildNot();
    for (;;)
    {
      if (l1 != 142)                // 'ftand'
      {
        break;
      }
      shiftT(142);                  // 'ftand'
      lookahead1W(162);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      try_FTMildNot();
    }
  }

  function parse_FTMildNot()
  {
    eventHandler.startNonterminal("FTMildNot", e0);
    parse_FTUnaryNot();
    for (;;)
    {
      lookahead1W(213);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ':=' | ';' | '<' | '<<' | '<=' |
                                    // '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' | 'ordered' | 'return' |
                                    // 'same' | 'satisfies' | 'stable' | 'start' | 'where' | 'window' | 'with' |
                                    // 'without' | '|}' | '}'
      if (l1 != 193)                // 'not'
      {
        break;
      }
      shift(193);                   // 'not'
      lookahead1W(53);              // S^WS | '(:' | 'in'
      shift(154);                   // 'in'
      lookahead1W(162);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      whitespace();
      parse_FTUnaryNot();
    }
    eventHandler.endNonterminal("FTMildNot", e0);
  }

  function try_FTMildNot()
  {
    try_FTUnaryNot();
    for (;;)
    {
      lookahead1W(213);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ':=' | ';' | '<' | '<<' | '<=' |
                                    // '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' | 'ordered' | 'return' |
                                    // 'same' | 'satisfies' | 'stable' | 'start' | 'where' | 'window' | 'with' |
                                    // 'without' | '|}' | '}'
      if (l1 != 193)                // 'not'
      {
        break;
      }
      shiftT(193);                  // 'not'
      lookahead1W(53);              // S^WS | '(:' | 'in'
      shiftT(154);                  // 'in'
      lookahead1W(162);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      try_FTUnaryNot();
    }
  }

  function parse_FTUnaryNot()
  {
    eventHandler.startNonterminal("FTUnaryNot", e0);
    if (l1 == 143)                  // 'ftnot'
    {
      shift(143);                   // 'ftnot'
    }
    lookahead1W(155);               // StringLiteral | S^WS | '(' | '(#' | '(:' | '{'
    whitespace();
    parse_FTPrimaryWithOptions();
    eventHandler.endNonterminal("FTUnaryNot", e0);
  }

  function try_FTUnaryNot()
  {
    if (l1 == 143)                  // 'ftnot'
    {
      shiftT(143);                  // 'ftnot'
    }
    lookahead1W(155);               // StringLiteral | S^WS | '(' | '(#' | '(:' | '{'
    try_FTPrimaryWithOptions();
  }

  function parse_FTPrimaryWithOptions()
  {
    eventHandler.startNonterminal("FTPrimaryWithOptions", e0);
    parse_FTPrimary();
    lookahead1W(214);               // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ':=' | ';' | '<' | '<<' | '<=' |
                                    // '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' | 'ordered' | 'return' |
                                    // 'same' | 'satisfies' | 'stable' | 'start' | 'using' | 'weight' | 'where' |
                                    // 'window' | 'with' | 'without' | '|}' | '}'
    if (l1 == 259)                  // 'using'
    {
      whitespace();
      parse_FTMatchOptions();
    }
    if (l1 == 264)                  // 'weight'
    {
      whitespace();
      parse_FTWeight();
    }
    eventHandler.endNonterminal("FTPrimaryWithOptions", e0);
  }

  function try_FTPrimaryWithOptions()
  {
    try_FTPrimary();
    lookahead1W(214);               // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ':=' | ';' | '<' | '<<' | '<=' |
                                    // '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' | 'ordered' | 'return' |
                                    // 'same' | 'satisfies' | 'stable' | 'start' | 'using' | 'weight' | 'where' |
                                    // 'window' | 'with' | 'without' | '|}' | '}'
    if (l1 == 259)                  // 'using'
    {
      try_FTMatchOptions();
    }
    if (l1 == 264)                  // 'weight'
    {
      try_FTWeight();
    }
  }

  function parse_FTPrimary()
  {
    eventHandler.startNonterminal("FTPrimary", e0);
    switch (l1)
    {
    case 34:                        // '('
      shift(34);                    // '('
      lookahead1W(162);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      whitespace();
      parse_FTSelection();
      shift(37);                    // ')'
      break;
    case 35:                        // '(#'
      parse_FTExtensionSelection();
      break;
    default:
      parse_FTWords();
      lookahead1W(215);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ':=' | ';' | '<' | '<<' | '<=' |
                                    // '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'occurs' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'using' | 'weight' |
                                    // 'where' | 'window' | 'with' | 'without' | '|}' | '}'
      if (l1 == 195)                // 'occurs'
      {
        whitespace();
        parse_FTTimes();
      }
    }
    eventHandler.endNonterminal("FTPrimary", e0);
  }

  function try_FTPrimary()
  {
    switch (l1)
    {
    case 34:                        // '('
      shiftT(34);                   // '('
      lookahead1W(162);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      try_FTSelection();
      shiftT(37);                   // ')'
      break;
    case 35:                        // '(#'
      try_FTExtensionSelection();
      break;
    default:
      try_FTWords();
      lookahead1W(215);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ':=' | ';' | '<' | '<<' | '<=' |
                                    // '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'occurs' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'using' | 'weight' |
                                    // 'where' | 'window' | 'with' | 'without' | '|}' | '}'
      if (l1 == 195)                // 'occurs'
      {
        try_FTTimes();
      }
    }
  }

  function parse_FTWords()
  {
    eventHandler.startNonterminal("FTWords", e0);
    parse_FTWordsValue();
    lookahead1W(221);               // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ':=' | ';' | '<' | '<<' | '<=' |
                                    // '=' | '>' | '>=' | '>>' | ']' | 'after' | 'all' | 'and' | 'any' | 'as' |
                                    // 'ascending' | 'at' | 'before' | 'case' | 'collation' | 'count' | 'default' |
                                    // 'descending' | 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' |
                                    // 'eq' | 'for' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'occurs' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'phrase' | 'return' | 'same' | 'satisfies' | 'stable' | 'start' |
                                    // 'using' | 'weight' | 'where' | 'window' | 'with' | 'without' | '|}' | '}'
    if (l1 == 71                    // 'all'
     || l1 == 76                    // 'any'
     || l1 == 210)                  // 'phrase'
    {
      whitespace();
      parse_FTAnyallOption();
    }
    eventHandler.endNonterminal("FTWords", e0);
  }

  function try_FTWords()
  {
    try_FTWordsValue();
    lookahead1W(221);               // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ':=' | ';' | '<' | '<<' | '<=' |
                                    // '=' | '>' | '>=' | '>>' | ']' | 'after' | 'all' | 'and' | 'any' | 'as' |
                                    // 'ascending' | 'at' | 'before' | 'case' | 'collation' | 'count' | 'default' |
                                    // 'descending' | 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' |
                                    // 'eq' | 'for' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' |
                                    // 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'occurs' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'phrase' | 'return' | 'same' | 'satisfies' | 'stable' | 'start' |
                                    // 'using' | 'weight' | 'where' | 'window' | 'with' | 'without' | '|}' | '}'
    if (l1 == 71                    // 'all'
     || l1 == 76                    // 'any'
     || l1 == 210)                  // 'phrase'
    {
      try_FTAnyallOption();
    }
  }

  function parse_FTWordsValue()
  {
    eventHandler.startNonterminal("FTWordsValue", e0);
    switch (l1)
    {
    case 11:                        // StringLiteral
      shift(11);                    // StringLiteral
      break;
    default:
      shift(276);                   // '{'
      lookahead1W(266);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_Expr();
      shift(282);                   // '}'
    }
    eventHandler.endNonterminal("FTWordsValue", e0);
  }

  function try_FTWordsValue()
  {
    switch (l1)
    {
    case 11:                        // StringLiteral
      shiftT(11);                   // StringLiteral
      break;
    default:
      shiftT(276);                  // '{'
      lookahead1W(266);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      try_Expr();
      shiftT(282);                  // '}'
    }
  }

  function parse_FTExtensionSelection()
  {
    eventHandler.startNonterminal("FTExtensionSelection", e0);
    for (;;)
    {
      whitespace();
      parse_Pragma();
      lookahead1W(100);             // S^WS | '(#' | '(:' | '{'
      if (l1 != 35)                 // '(#'
      {
        break;
      }
    }
    shift(276);                     // '{'
    lookahead1W(166);               // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{' | '}'
    if (l1 != 282)                  // '}'
    {
      whitespace();
      parse_FTSelection();
    }
    shift(282);                     // '}'
    eventHandler.endNonterminal("FTExtensionSelection", e0);
  }

  function try_FTExtensionSelection()
  {
    for (;;)
    {
      try_Pragma();
      lookahead1W(100);             // S^WS | '(#' | '(:' | '{'
      if (l1 != 35)                 // '(#'
      {
        break;
      }
    }
    shiftT(276);                    // '{'
    lookahead1W(166);               // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{' | '}'
    if (l1 != 282)                  // '}'
    {
      try_FTSelection();
    }
    shiftT(282);                    // '}'
  }

  function parse_FTAnyallOption()
  {
    eventHandler.startNonterminal("FTAnyallOption", e0);
    switch (l1)
    {
    case 76:                        // 'any'
      shift(76);                    // 'any'
      lookahead1W(218);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ':=' | ';' | '<' | '<<' | '<=' |
                                    // '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'occurs' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'using' | 'weight' |
                                    // 'where' | 'window' | 'with' | 'without' | 'word' | '|}' | '}'
      if (l1 == 272)                // 'word'
      {
        shift(272);                 // 'word'
      }
      break;
    case 71:                        // 'all'
      shift(71);                    // 'all'
      lookahead1W(219);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ':=' | ';' | '<' | '<<' | '<=' |
                                    // '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'occurs' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'using' | 'weight' |
                                    // 'where' | 'window' | 'with' | 'without' | 'words' | '|}' | '}'
      if (l1 == 273)                // 'words'
      {
        shift(273);                 // 'words'
      }
      break;
    default:
      shift(210);                   // 'phrase'
    }
    eventHandler.endNonterminal("FTAnyallOption", e0);
  }

  function try_FTAnyallOption()
  {
    switch (l1)
    {
    case 76:                        // 'any'
      shiftT(76);                   // 'any'
      lookahead1W(218);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ':=' | ';' | '<' | '<<' | '<=' |
                                    // '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'occurs' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'using' | 'weight' |
                                    // 'where' | 'window' | 'with' | 'without' | 'word' | '|}' | '}'
      if (l1 == 272)                // 'word'
      {
        shiftT(272);                // 'word'
      }
      break;
    case 71:                        // 'all'
      shiftT(71);                   // 'all'
      lookahead1W(219);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ':=' | ';' | '<' | '<<' | '<=' |
                                    // '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'occurs' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'using' | 'weight' |
                                    // 'where' | 'window' | 'with' | 'without' | 'words' | '|}' | '}'
      if (l1 == 273)                // 'words'
      {
        shiftT(273);                // 'words'
      }
      break;
    default:
      shiftT(210);                  // 'phrase'
    }
  }

  function parse_FTTimes()
  {
    eventHandler.startNonterminal("FTTimes", e0);
    shift(195);                     // 'occurs'
    lookahead1W(149);               // S^WS | '(:' | 'at' | 'exactly' | 'from'
    whitespace();
    parse_FTRange();
    shift(247);                     // 'times'
    eventHandler.endNonterminal("FTTimes", e0);
  }

  function try_FTTimes()
  {
    shiftT(195);                    // 'occurs'
    lookahead1W(149);               // S^WS | '(:' | 'at' | 'exactly' | 'from'
    try_FTRange();
    shiftT(247);                    // 'times'
  }

  function parse_FTRange()
  {
    eventHandler.startNonterminal("FTRange", e0);
    switch (l1)
    {
    case 130:                       // 'exactly'
      shift(130);                   // 'exactly'
      lookahead1W(266);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_AdditiveExpr();
      break;
    case 81:                        // 'at'
      shift(81);                    // 'at'
      lookahead1W(125);             // S^WS | '(:' | 'least' | 'most'
      switch (l1)
      {
      case 173:                     // 'least'
        shift(173);                 // 'least'
        lookahead1W(266);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
        whitespace();
        parse_AdditiveExpr();
        break;
      default:
        shift(183);                 // 'most'
        lookahead1W(266);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
        whitespace();
        parse_AdditiveExpr();
      }
      break;
    default:
      shift(140);                   // 'from'
      lookahead1W(266);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_AdditiveExpr();
      shift(248);                   // 'to'
      lookahead1W(266);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_AdditiveExpr();
    }
    eventHandler.endNonterminal("FTRange", e0);
  }

  function try_FTRange()
  {
    switch (l1)
    {
    case 130:                       // 'exactly'
      shiftT(130);                  // 'exactly'
      lookahead1W(266);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      try_AdditiveExpr();
      break;
    case 81:                        // 'at'
      shiftT(81);                   // 'at'
      lookahead1W(125);             // S^WS | '(:' | 'least' | 'most'
      switch (l1)
      {
      case 173:                     // 'least'
        shiftT(173);                // 'least'
        lookahead1W(266);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
        try_AdditiveExpr();
        break;
      default:
        shiftT(183);                // 'most'
        lookahead1W(266);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
        try_AdditiveExpr();
      }
      break;
    default:
      shiftT(140);                  // 'from'
      lookahead1W(266);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      try_AdditiveExpr();
      shiftT(248);                  // 'to'
      lookahead1W(266);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      try_AdditiveExpr();
    }
  }

  function parse_FTPosFilter()
  {
    eventHandler.startNonterminal("FTPosFilter", e0);
    switch (l1)
    {
    case 202:                       // 'ordered'
      parse_FTOrder();
      break;
    case 269:                       // 'window'
      parse_FTWindow();
      break;
    case 117:                       // 'distance'
      parse_FTDistance();
      break;
    case 115:                       // 'different'
    case 223:                       // 'same'
      parse_FTScope();
      break;
    default:
      parse_FTContent();
    }
    eventHandler.endNonterminal("FTPosFilter", e0);
  }

  function try_FTPosFilter()
  {
    switch (l1)
    {
    case 202:                       // 'ordered'
      try_FTOrder();
      break;
    case 269:                       // 'window'
      try_FTWindow();
      break;
    case 117:                       // 'distance'
      try_FTDistance();
      break;
    case 115:                       // 'different'
    case 223:                       // 'same'
      try_FTScope();
      break;
    default:
      try_FTContent();
    }
  }

  function parse_FTOrder()
  {
    eventHandler.startNonterminal("FTOrder", e0);
    shift(202);                     // 'ordered'
    eventHandler.endNonterminal("FTOrder", e0);
  }

  function try_FTOrder()
  {
    shiftT(202);                    // 'ordered'
  }

  function parse_FTWindow()
  {
    eventHandler.startNonterminal("FTWindow", e0);
    shift(269);                     // 'window'
    lookahead1W(266);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_AdditiveExpr();
    whitespace();
    parse_FTUnit();
    eventHandler.endNonterminal("FTWindow", e0);
  }

  function try_FTWindow()
  {
    shiftT(269);                    // 'window'
    lookahead1W(266);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
    try_AdditiveExpr();
    try_FTUnit();
  }

  function parse_FTDistance()
  {
    eventHandler.startNonterminal("FTDistance", e0);
    shift(117);                     // 'distance'
    lookahead1W(149);               // S^WS | '(:' | 'at' | 'exactly' | 'from'
    whitespace();
    parse_FTRange();
    whitespace();
    parse_FTUnit();
    eventHandler.endNonterminal("FTDistance", e0);
  }

  function try_FTDistance()
  {
    shiftT(117);                    // 'distance'
    lookahead1W(149);               // S^WS | '(:' | 'at' | 'exactly' | 'from'
    try_FTRange();
    try_FTUnit();
  }

  function parse_FTUnit()
  {
    eventHandler.startNonterminal("FTUnit", e0);
    switch (l1)
    {
    case 273:                       // 'words'
      shift(273);                   // 'words'
      break;
    case 232:                       // 'sentences'
      shift(232);                   // 'sentences'
      break;
    default:
      shift(205);                   // 'paragraphs'
    }
    eventHandler.endNonterminal("FTUnit", e0);
  }

  function try_FTUnit()
  {
    switch (l1)
    {
    case 273:                       // 'words'
      shiftT(273);                  // 'words'
      break;
    case 232:                       // 'sentences'
      shiftT(232);                  // 'sentences'
      break;
    default:
      shiftT(205);                  // 'paragraphs'
    }
  }

  function parse_FTScope()
  {
    eventHandler.startNonterminal("FTScope", e0);
    switch (l1)
    {
    case 223:                       // 'same'
      shift(223);                   // 'same'
      break;
    default:
      shift(115);                   // 'different'
    }
    lookahead1W(132);               // S^WS | '(:' | 'paragraph' | 'sentence'
    whitespace();
    parse_FTBigUnit();
    eventHandler.endNonterminal("FTScope", e0);
  }

  function try_FTScope()
  {
    switch (l1)
    {
    case 223:                       // 'same'
      shiftT(223);                  // 'same'
      break;
    default:
      shiftT(115);                  // 'different'
    }
    lookahead1W(132);               // S^WS | '(:' | 'paragraph' | 'sentence'
    try_FTBigUnit();
  }

  function parse_FTBigUnit()
  {
    eventHandler.startNonterminal("FTBigUnit", e0);
    switch (l1)
    {
    case 231:                       // 'sentence'
      shift(231);                   // 'sentence'
      break;
    default:
      shift(204);                   // 'paragraph'
    }
    eventHandler.endNonterminal("FTBigUnit", e0);
  }

  function try_FTBigUnit()
  {
    switch (l1)
    {
    case 231:                       // 'sentence'
      shiftT(231);                  // 'sentence'
      break;
    default:
      shiftT(204);                  // 'paragraph'
    }
  }

  function parse_FTContent()
  {
    eventHandler.startNonterminal("FTContent", e0);
    switch (l1)
    {
    case 81:                        // 'at'
      shift(81);                    // 'at'
      lookahead1W(117);             // S^WS | '(:' | 'end' | 'start'
      switch (l1)
      {
      case 237:                     // 'start'
        shift(237);                 // 'start'
        break;
      default:
        shift(126);                 // 'end'
      }
      break;
    default:
      shift(127);                   // 'entire'
      lookahead1W(42);              // S^WS | '(:' | 'content'
      shift(100);                   // 'content'
    }
    eventHandler.endNonterminal("FTContent", e0);
  }

  function try_FTContent()
  {
    switch (l1)
    {
    case 81:                        // 'at'
      shiftT(81);                   // 'at'
      lookahead1W(117);             // S^WS | '(:' | 'end' | 'start'
      switch (l1)
      {
      case 237:                     // 'start'
        shiftT(237);                // 'start'
        break;
      default:
        shiftT(126);                // 'end'
      }
      break;
    default:
      shiftT(127);                  // 'entire'
      lookahead1W(42);              // S^WS | '(:' | 'content'
      shiftT(100);                  // 'content'
    }
  }

  function parse_FTMatchOptions()
  {
    eventHandler.startNonterminal("FTMatchOptions", e0);
    for (;;)
    {
      shift(259);                   // 'using'
      lookahead1W(182);             // S^WS | '(:' | 'case' | 'diacritics' | 'language' | 'lowercase' | 'no' |
                                    // 'option' | 'stemming' | 'stop' | 'thesaurus' | 'uppercase' | 'wildcards'
      whitespace();
      parse_FTMatchOption();
      lookahead1W(214);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ':=' | ';' | '<' | '<<' | '<=' |
                                    // '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' | 'ordered' | 'return' |
                                    // 'same' | 'satisfies' | 'stable' | 'start' | 'using' | 'weight' | 'where' |
                                    // 'window' | 'with' | 'without' | '|}' | '}'
      if (l1 != 259)                // 'using'
      {
        break;
      }
    }
    eventHandler.endNonterminal("FTMatchOptions", e0);
  }

  function try_FTMatchOptions()
  {
    for (;;)
    {
      shiftT(259);                  // 'using'
      lookahead1W(182);             // S^WS | '(:' | 'case' | 'diacritics' | 'language' | 'lowercase' | 'no' |
                                    // 'option' | 'stemming' | 'stop' | 'thesaurus' | 'uppercase' | 'wildcards'
      try_FTMatchOption();
      lookahead1W(214);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ':=' | ';' | '<' | '<<' | '<=' |
                                    // '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' | 'ordered' | 'return' |
                                    // 'same' | 'satisfies' | 'stable' | 'start' | 'using' | 'weight' | 'where' |
                                    // 'window' | 'with' | 'without' | '|}' | '}'
      if (l1 != 259)                // 'using'
      {
        break;
      }
    }
  }

  function parse_FTMatchOption()
  {
    eventHandler.startNonterminal("FTMatchOption", e0);
    switch (l1)
    {
    case 188:                       // 'no'
      lookahead2W(161);             // S^WS | '(:' | 'stemming' | 'stop' | 'thesaurus' | 'wildcards'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 169:                       // 'language'
      parse_FTLanguageOption();
      break;
    case 268:                       // 'wildcards'
    case 137404:                    // 'no' 'wildcards'
      parse_FTWildCardOption();
      break;
    case 246:                       // 'thesaurus'
    case 126140:                    // 'no' 'thesaurus'
      parse_FTThesaurusOption();
      break;
    case 238:                       // 'stemming'
    case 122044:                    // 'no' 'stemming'
      parse_FTStemOption();
      break;
    case 114:                       // 'diacritics'
      parse_FTDiacriticsOption();
      break;
    case 239:                       // 'stop'
    case 122556:                    // 'no' 'stop'
      parse_FTStopWordOption();
      break;
    case 199:                       // 'option'
      parse_FTExtensionOption();
      break;
    default:
      parse_FTCaseOption();
    }
    eventHandler.endNonterminal("FTMatchOption", e0);
  }

  function try_FTMatchOption()
  {
    switch (l1)
    {
    case 188:                       // 'no'
      lookahead2W(161);             // S^WS | '(:' | 'stemming' | 'stop' | 'thesaurus' | 'wildcards'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 169:                       // 'language'
      try_FTLanguageOption();
      break;
    case 268:                       // 'wildcards'
    case 137404:                    // 'no' 'wildcards'
      try_FTWildCardOption();
      break;
    case 246:                       // 'thesaurus'
    case 126140:                    // 'no' 'thesaurus'
      try_FTThesaurusOption();
      break;
    case 238:                       // 'stemming'
    case 122044:                    // 'no' 'stemming'
      try_FTStemOption();
      break;
    case 114:                       // 'diacritics'
      try_FTDiacriticsOption();
      break;
    case 239:                       // 'stop'
    case 122556:                    // 'no' 'stop'
      try_FTStopWordOption();
      break;
    case 199:                       // 'option'
      try_FTExtensionOption();
      break;
    default:
      try_FTCaseOption();
    }
  }

  function parse_FTCaseOption()
  {
    eventHandler.startNonterminal("FTCaseOption", e0);
    switch (l1)
    {
    case 88:                        // 'case'
      shift(88);                    // 'case'
      lookahead1W(124);             // S^WS | '(:' | 'insensitive' | 'sensitive'
      switch (l1)
      {
      case 158:                     // 'insensitive'
        shift(158);                 // 'insensitive'
        break;
      default:
        shift(230);                 // 'sensitive'
      }
      break;
    case 177:                       // 'lowercase'
      shift(177);                   // 'lowercase'
      break;
    default:
      shift(258);                   // 'uppercase'
    }
    eventHandler.endNonterminal("FTCaseOption", e0);
  }

  function try_FTCaseOption()
  {
    switch (l1)
    {
    case 88:                        // 'case'
      shiftT(88);                   // 'case'
      lookahead1W(124);             // S^WS | '(:' | 'insensitive' | 'sensitive'
      switch (l1)
      {
      case 158:                     // 'insensitive'
        shiftT(158);                // 'insensitive'
        break;
      default:
        shiftT(230);                // 'sensitive'
      }
      break;
    case 177:                       // 'lowercase'
      shiftT(177);                  // 'lowercase'
      break;
    default:
      shiftT(258);                  // 'uppercase'
    }
  }

  function parse_FTDiacriticsOption()
  {
    eventHandler.startNonterminal("FTDiacriticsOption", e0);
    shift(114);                     // 'diacritics'
    lookahead1W(124);               // S^WS | '(:' | 'insensitive' | 'sensitive'
    switch (l1)
    {
    case 158:                       // 'insensitive'
      shift(158);                   // 'insensitive'
      break;
    default:
      shift(230);                   // 'sensitive'
    }
    eventHandler.endNonterminal("FTDiacriticsOption", e0);
  }

  function try_FTDiacriticsOption()
  {
    shiftT(114);                    // 'diacritics'
    lookahead1W(124);               // S^WS | '(:' | 'insensitive' | 'sensitive'
    switch (l1)
    {
    case 158:                       // 'insensitive'
      shiftT(158);                  // 'insensitive'
      break;
    default:
      shiftT(230);                  // 'sensitive'
    }
  }

  function parse_FTStemOption()
  {
    eventHandler.startNonterminal("FTStemOption", e0);
    switch (l1)
    {
    case 238:                       // 'stemming'
      shift(238);                   // 'stemming'
      break;
    default:
      shift(188);                   // 'no'
      lookahead1W(74);              // S^WS | '(:' | 'stemming'
      shift(238);                   // 'stemming'
    }
    eventHandler.endNonterminal("FTStemOption", e0);
  }

  function try_FTStemOption()
  {
    switch (l1)
    {
    case 238:                       // 'stemming'
      shiftT(238);                  // 'stemming'
      break;
    default:
      shiftT(188);                  // 'no'
      lookahead1W(74);              // S^WS | '(:' | 'stemming'
      shiftT(238);                  // 'stemming'
    }
  }

  function parse_FTThesaurusOption()
  {
    eventHandler.startNonterminal("FTThesaurusOption", e0);
    switch (l1)
    {
    case 246:                       // 'thesaurus'
      shift(246);                   // 'thesaurus'
      lookahead1W(142);             // S^WS | '(' | '(:' | 'at' | 'default'
      switch (l1)
      {
      case 81:                      // 'at'
        whitespace();
        parse_FTThesaurusID();
        break;
      case 109:                     // 'default'
        shift(109);                 // 'default'
        break;
      default:
        shift(34);                  // '('
        lookahead1W(112);           // S^WS | '(:' | 'at' | 'default'
        switch (l1)
        {
        case 81:                    // 'at'
          whitespace();
          parse_FTThesaurusID();
          break;
        default:
          shift(109);               // 'default'
        }
        for (;;)
        {
          lookahead1W(101);         // S^WS | '(:' | ')' | ','
          if (l1 != 41)             // ','
          {
            break;
          }
          shift(41);                // ','
          lookahead1W(31);          // S^WS | '(:' | 'at'
          whitespace();
          parse_FTThesaurusID();
        }
        shift(37);                  // ')'
      }
      break;
    default:
      shift(188);                   // 'no'
      lookahead1W(78);              // S^WS | '(:' | 'thesaurus'
      shift(246);                   // 'thesaurus'
    }
    eventHandler.endNonterminal("FTThesaurusOption", e0);
  }

  function try_FTThesaurusOption()
  {
    switch (l1)
    {
    case 246:                       // 'thesaurus'
      shiftT(246);                  // 'thesaurus'
      lookahead1W(142);             // S^WS | '(' | '(:' | 'at' | 'default'
      switch (l1)
      {
      case 81:                      // 'at'
        try_FTThesaurusID();
        break;
      case 109:                     // 'default'
        shiftT(109);                // 'default'
        break;
      default:
        shiftT(34);                 // '('
        lookahead1W(112);           // S^WS | '(:' | 'at' | 'default'
        switch (l1)
        {
        case 81:                    // 'at'
          try_FTThesaurusID();
          break;
        default:
          shiftT(109);              // 'default'
        }
        for (;;)
        {
          lookahead1W(101);         // S^WS | '(:' | ')' | ','
          if (l1 != 41)             // ','
          {
            break;
          }
          shiftT(41);               // ','
          lookahead1W(31);          // S^WS | '(:' | 'at'
          try_FTThesaurusID();
        }
        shiftT(37);                 // ')'
      }
      break;
    default:
      shiftT(188);                  // 'no'
      lookahead1W(78);              // S^WS | '(:' | 'thesaurus'
      shiftT(246);                  // 'thesaurus'
    }
  }

  function parse_FTThesaurusID()
  {
    eventHandler.startNonterminal("FTThesaurusID", e0);
    shift(81);                      // 'at'
    lookahead1W(15);                // URILiteral | S^WS | '(:'
    shift(7);                       // URILiteral
    lookahead1W(220);               // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ':=' | ';' | '<' | '<<' | '<=' |
                                    // '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' |
                                    // 'exactly' | 'for' | 'from' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'relationship' | 'return' | 'same' | 'satisfies' | 'stable' |
                                    // 'start' | 'using' | 'weight' | 'where' | 'window' | 'with' | 'without' | '|}' |
                                    // '}'
    if (l1 == 217)                  // 'relationship'
    {
      shift(217);                   // 'relationship'
      lookahead1W(17);              // StringLiteral | S^WS | '(:'
      shift(11);                    // StringLiteral
    }
    lookahead1W(216);               // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ':=' | ';' | '<' | '<<' | '<=' |
                                    // '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' |
                                    // 'exactly' | 'for' | 'from' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'using' |
                                    // 'weight' | 'where' | 'window' | 'with' | 'without' | '|}' | '}'
    switch (l1)
    {
    case 81:                        // 'at'
      lookahead2W(165);             // S^WS | '(:' | 'end' | 'least' | 'most' | 'position' | 'start'
      break;
    default:
      lk = l1;
    }
    if (lk == 130                   // 'exactly'
     || lk == 140                   // 'from'
     || lk == 88657                 // 'at' 'least'
     || lk == 93777)                // 'at' 'most'
    {
      whitespace();
      parse_FTLiteralRange();
      lookahead1W(58);              // S^WS | '(:' | 'levels'
      shift(175);                   // 'levels'
    }
    eventHandler.endNonterminal("FTThesaurusID", e0);
  }

  function try_FTThesaurusID()
  {
    shiftT(81);                     // 'at'
    lookahead1W(15);                // URILiteral | S^WS | '(:'
    shiftT(7);                      // URILiteral
    lookahead1W(220);               // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ':=' | ';' | '<' | '<<' | '<=' |
                                    // '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' |
                                    // 'exactly' | 'for' | 'from' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'relationship' | 'return' | 'same' | 'satisfies' | 'stable' |
                                    // 'start' | 'using' | 'weight' | 'where' | 'window' | 'with' | 'without' | '|}' |
                                    // '}'
    if (l1 == 217)                  // 'relationship'
    {
      shiftT(217);                  // 'relationship'
      lookahead1W(17);              // StringLiteral | S^WS | '(:'
      shiftT(11);                   // StringLiteral
    }
    lookahead1W(216);               // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ':=' | ';' | '<' | '<<' | '<=' |
                                    // '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' |
                                    // 'exactly' | 'for' | 'from' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'using' |
                                    // 'weight' | 'where' | 'window' | 'with' | 'without' | '|}' | '}'
    switch (l1)
    {
    case 81:                        // 'at'
      lookahead2W(165);             // S^WS | '(:' | 'end' | 'least' | 'most' | 'position' | 'start'
      break;
    default:
      lk = l1;
    }
    if (lk == 130                   // 'exactly'
     || lk == 140                   // 'from'
     || lk == 88657                 // 'at' 'least'
     || lk == 93777)                // 'at' 'most'
    {
      try_FTLiteralRange();
      lookahead1W(58);              // S^WS | '(:' | 'levels'
      shiftT(175);                  // 'levels'
    }
  }

  function parse_FTLiteralRange()
  {
    eventHandler.startNonterminal("FTLiteralRange", e0);
    switch (l1)
    {
    case 130:                       // 'exactly'
      shift(130);                   // 'exactly'
      lookahead1W(16);              // IntegerLiteral | S^WS | '(:'
      shift(8);                     // IntegerLiteral
      break;
    case 81:                        // 'at'
      shift(81);                    // 'at'
      lookahead1W(125);             // S^WS | '(:' | 'least' | 'most'
      switch (l1)
      {
      case 173:                     // 'least'
        shift(173);                 // 'least'
        lookahead1W(16);            // IntegerLiteral | S^WS | '(:'
        shift(8);                   // IntegerLiteral
        break;
      default:
        shift(183);                 // 'most'
        lookahead1W(16);            // IntegerLiteral | S^WS | '(:'
        shift(8);                   // IntegerLiteral
      }
      break;
    default:
      shift(140);                   // 'from'
      lookahead1W(16);              // IntegerLiteral | S^WS | '(:'
      shift(8);                     // IntegerLiteral
      lookahead1W(79);              // S^WS | '(:' | 'to'
      shift(248);                   // 'to'
      lookahead1W(16);              // IntegerLiteral | S^WS | '(:'
      shift(8);                     // IntegerLiteral
    }
    eventHandler.endNonterminal("FTLiteralRange", e0);
  }

  function try_FTLiteralRange()
  {
    switch (l1)
    {
    case 130:                       // 'exactly'
      shiftT(130);                  // 'exactly'
      lookahead1W(16);              // IntegerLiteral | S^WS | '(:'
      shiftT(8);                    // IntegerLiteral
      break;
    case 81:                        // 'at'
      shiftT(81);                   // 'at'
      lookahead1W(125);             // S^WS | '(:' | 'least' | 'most'
      switch (l1)
      {
      case 173:                     // 'least'
        shiftT(173);                // 'least'
        lookahead1W(16);            // IntegerLiteral | S^WS | '(:'
        shiftT(8);                  // IntegerLiteral
        break;
      default:
        shiftT(183);                // 'most'
        lookahead1W(16);            // IntegerLiteral | S^WS | '(:'
        shiftT(8);                  // IntegerLiteral
      }
      break;
    default:
      shiftT(140);                  // 'from'
      lookahead1W(16);              // IntegerLiteral | S^WS | '(:'
      shiftT(8);                    // IntegerLiteral
      lookahead1W(79);              // S^WS | '(:' | 'to'
      shiftT(248);                  // 'to'
      lookahead1W(16);              // IntegerLiteral | S^WS | '(:'
      shiftT(8);                    // IntegerLiteral
    }
  }

  function parse_FTStopWordOption()
  {
    eventHandler.startNonterminal("FTStopWordOption", e0);
    switch (l1)
    {
    case 239:                       // 'stop'
      shift(239);                   // 'stop'
      lookahead1W(86);              // S^WS | '(:' | 'words'
      shift(273);                   // 'words'
      lookahead1W(142);             // S^WS | '(' | '(:' | 'at' | 'default'
      switch (l1)
      {
      case 109:                     // 'default'
        shift(109);                 // 'default'
        for (;;)
        {
          lookahead1W(217);         // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ':=' | ';' | '<' | '<<' | '<=' |
                                    // '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' |
                                    // 'except' | 'for' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'union' |
                                    // 'using' | 'weight' | 'where' | 'window' | 'with' | 'without' | '|}' | '}'
          if (l1 != 131             // 'except'
           && l1 != 254)            // 'union'
          {
            break;
          }
          whitespace();
          parse_FTStopWordsInclExcl();
        }
        break;
      default:
        whitespace();
        parse_FTStopWords();
        for (;;)
        {
          lookahead1W(217);         // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ':=' | ';' | '<' | '<<' | '<=' |
                                    // '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' |
                                    // 'except' | 'for' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'union' |
                                    // 'using' | 'weight' | 'where' | 'window' | 'with' | 'without' | '|}' | '}'
          if (l1 != 131             // 'except'
           && l1 != 254)            // 'union'
          {
            break;
          }
          whitespace();
          parse_FTStopWordsInclExcl();
        }
      }
      break;
    default:
      shift(188);                   // 'no'
      lookahead1W(75);              // S^WS | '(:' | 'stop'
      shift(239);                   // 'stop'
      lookahead1W(86);              // S^WS | '(:' | 'words'
      shift(273);                   // 'words'
    }
    eventHandler.endNonterminal("FTStopWordOption", e0);
  }

  function try_FTStopWordOption()
  {
    switch (l1)
    {
    case 239:                       // 'stop'
      shiftT(239);                  // 'stop'
      lookahead1W(86);              // S^WS | '(:' | 'words'
      shiftT(273);                  // 'words'
      lookahead1W(142);             // S^WS | '(' | '(:' | 'at' | 'default'
      switch (l1)
      {
      case 109:                     // 'default'
        shiftT(109);                // 'default'
        for (;;)
        {
          lookahead1W(217);         // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ':=' | ';' | '<' | '<<' | '<=' |
                                    // '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' |
                                    // 'except' | 'for' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'union' |
                                    // 'using' | 'weight' | 'where' | 'window' | 'with' | 'without' | '|}' | '}'
          if (l1 != 131             // 'except'
           && l1 != 254)            // 'union'
          {
            break;
          }
          try_FTStopWordsInclExcl();
        }
        break;
      default:
        try_FTStopWords();
        for (;;)
        {
          lookahead1W(217);         // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ':=' | ';' | '<' | '<<' | '<=' |
                                    // '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' |
                                    // 'except' | 'for' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'union' |
                                    // 'using' | 'weight' | 'where' | 'window' | 'with' | 'without' | '|}' | '}'
          if (l1 != 131             // 'except'
           && l1 != 254)            // 'union'
          {
            break;
          }
          try_FTStopWordsInclExcl();
        }
      }
      break;
    default:
      shiftT(188);                  // 'no'
      lookahead1W(75);              // S^WS | '(:' | 'stop'
      shiftT(239);                  // 'stop'
      lookahead1W(86);              // S^WS | '(:' | 'words'
      shiftT(273);                  // 'words'
    }
  }

  function parse_FTStopWords()
  {
    eventHandler.startNonterminal("FTStopWords", e0);
    switch (l1)
    {
    case 81:                        // 'at'
      shift(81);                    // 'at'
      lookahead1W(15);              // URILiteral | S^WS | '(:'
      shift(7);                     // URILiteral
      break;
    default:
      shift(34);                    // '('
      lookahead1W(17);              // StringLiteral | S^WS | '(:'
      shift(11);                    // StringLiteral
      for (;;)
      {
        lookahead1W(101);           // S^WS | '(:' | ')' | ','
        if (l1 != 41)               // ','
        {
          break;
        }
        shift(41);                  // ','
        lookahead1W(17);            // StringLiteral | S^WS | '(:'
        shift(11);                  // StringLiteral
      }
      shift(37);                    // ')'
    }
    eventHandler.endNonterminal("FTStopWords", e0);
  }

  function try_FTStopWords()
  {
    switch (l1)
    {
    case 81:                        // 'at'
      shiftT(81);                   // 'at'
      lookahead1W(15);              // URILiteral | S^WS | '(:'
      shiftT(7);                    // URILiteral
      break;
    default:
      shiftT(34);                   // '('
      lookahead1W(17);              // StringLiteral | S^WS | '(:'
      shiftT(11);                   // StringLiteral
      for (;;)
      {
        lookahead1W(101);           // S^WS | '(:' | ')' | ','
        if (l1 != 41)               // ','
        {
          break;
        }
        shiftT(41);                 // ','
        lookahead1W(17);            // StringLiteral | S^WS | '(:'
        shiftT(11);                 // StringLiteral
      }
      shiftT(37);                   // ')'
    }
  }

  function parse_FTStopWordsInclExcl()
  {
    eventHandler.startNonterminal("FTStopWordsInclExcl", e0);
    switch (l1)
    {
    case 254:                       // 'union'
      shift(254);                   // 'union'
      break;
    default:
      shift(131);                   // 'except'
    }
    lookahead1W(99);                // S^WS | '(' | '(:' | 'at'
    whitespace();
    parse_FTStopWords();
    eventHandler.endNonterminal("FTStopWordsInclExcl", e0);
  }

  function try_FTStopWordsInclExcl()
  {
    switch (l1)
    {
    case 254:                       // 'union'
      shiftT(254);                  // 'union'
      break;
    default:
      shiftT(131);                  // 'except'
    }
    lookahead1W(99);                // S^WS | '(' | '(:' | 'at'
    try_FTStopWords();
  }

  function parse_FTLanguageOption()
  {
    eventHandler.startNonterminal("FTLanguageOption", e0);
    shift(169);                     // 'language'
    lookahead1W(17);                // StringLiteral | S^WS | '(:'
    shift(11);                      // StringLiteral
    eventHandler.endNonterminal("FTLanguageOption", e0);
  }

  function try_FTLanguageOption()
  {
    shiftT(169);                    // 'language'
    lookahead1W(17);                // StringLiteral | S^WS | '(:'
    shiftT(11);                     // StringLiteral
  }

  function parse_FTWildCardOption()
  {
    eventHandler.startNonterminal("FTWildCardOption", e0);
    switch (l1)
    {
    case 268:                       // 'wildcards'
      shift(268);                   // 'wildcards'
      break;
    default:
      shift(188);                   // 'no'
      lookahead1W(84);              // S^WS | '(:' | 'wildcards'
      shift(268);                   // 'wildcards'
    }
    eventHandler.endNonterminal("FTWildCardOption", e0);
  }

  function try_FTWildCardOption()
  {
    switch (l1)
    {
    case 268:                       // 'wildcards'
      shiftT(268);                  // 'wildcards'
      break;
    default:
      shiftT(188);                  // 'no'
      lookahead1W(84);              // S^WS | '(:' | 'wildcards'
      shiftT(268);                  // 'wildcards'
    }
  }

  function parse_FTExtensionOption()
  {
    eventHandler.startNonterminal("FTExtensionOption", e0);
    shift(199);                     // 'option'
    lookahead1W(254);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_EQName();
    lookahead1W(17);                // StringLiteral | S^WS | '(:'
    shift(11);                      // StringLiteral
    eventHandler.endNonterminal("FTExtensionOption", e0);
  }

  function try_FTExtensionOption()
  {
    shiftT(199);                    // 'option'
    lookahead1W(254);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
    try_EQName();
    lookahead1W(17);                // StringLiteral | S^WS | '(:'
    shiftT(11);                     // StringLiteral
  }

  function parse_FTIgnoreOption()
  {
    eventHandler.startNonterminal("FTIgnoreOption", e0);
    shift(271);                     // 'without'
    lookahead1W(42);                // S^WS | '(:' | 'content'
    shift(100);                     // 'content'
    lookahead1W(266);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_UnionExpr();
    eventHandler.endNonterminal("FTIgnoreOption", e0);
  }

  function try_FTIgnoreOption()
  {
    shiftT(271);                    // 'without'
    lookahead1W(42);                // S^WS | '(:' | 'content'
    shiftT(100);                    // 'content'
    lookahead1W(266);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
    try_UnionExpr();
  }

  function parse_CollectionDecl()
  {
    eventHandler.startNonterminal("CollectionDecl", e0);
    shift(95);                      // 'collection'
    lookahead1W(254);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_EQName();
    lookahead1W(107);               // S^WS | '(:' | ';' | 'as'
    if (l1 == 79)                   // 'as'
    {
      whitespace();
      parse_CollectionTypeDecl();
    }
    eventHandler.endNonterminal("CollectionDecl", e0);
  }

  function parse_CollectionTypeDecl()
  {
    eventHandler.startNonterminal("CollectionTypeDecl", e0);
    shift(79);                      // 'as'
    lookahead1W(178);               // S^WS | '(:' | 'attribute' | 'comment' | 'document-node' | 'element' |
                                    // 'namespace-node' | 'node' | 'processing-instruction' | 'schema-attribute' |
                                    // 'schema-element' | 'text'
    whitespace();
    parse_KindTest();
    lookahead1W(156);               // S^WS | '(:' | '*' | '+' | ';' | '?'
    if (l1 != 53)                   // ';'
    {
      whitespace();
      parse_OccurrenceIndicator();
    }
    eventHandler.endNonterminal("CollectionTypeDecl", e0);
  }

  function parse_IndexName()
  {
    eventHandler.startNonterminal("IndexName", e0);
    parse_EQName();
    eventHandler.endNonterminal("IndexName", e0);
  }

  function parse_IndexDomainExpr()
  {
    eventHandler.startNonterminal("IndexDomainExpr", e0);
    parse_PathExpr();
    eventHandler.endNonterminal("IndexDomainExpr", e0);
  }

  function parse_IndexKeySpec()
  {
    eventHandler.startNonterminal("IndexKeySpec", e0);
    parse_IndexKeyExpr();
    if (l1 == 79)                   // 'as'
    {
      whitespace();
      parse_IndexKeyTypeDecl();
    }
    lookahead1W(146);               // S^WS | '(:' | ',' | ';' | 'collation'
    if (l1 == 94)                   // 'collation'
    {
      whitespace();
      parse_IndexKeyCollation();
    }
    eventHandler.endNonterminal("IndexKeySpec", e0);
  }

  function parse_IndexKeyExpr()
  {
    eventHandler.startNonterminal("IndexKeyExpr", e0);
    parse_PathExpr();
    eventHandler.endNonterminal("IndexKeyExpr", e0);
  }

  function parse_IndexKeyTypeDecl()
  {
    eventHandler.startNonterminal("IndexKeyTypeDecl", e0);
    shift(79);                      // 'as'
    lookahead1W(254);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_AtomicType();
    lookahead1W(169);               // S^WS | '(:' | '*' | '+' | ',' | ';' | '?' | 'collation'
    if (l1 == 39                    // '*'
     || l1 == 40                    // '+'
     || l1 == 64)                   // '?'
    {
      whitespace();
      parse_OccurrenceIndicator();
    }
    eventHandler.endNonterminal("IndexKeyTypeDecl", e0);
  }

  function parse_AtomicType()
  {
    eventHandler.startNonterminal("AtomicType", e0);
    parse_EQName();
    eventHandler.endNonterminal("AtomicType", e0);
  }

  function parse_IndexKeyCollation()
  {
    eventHandler.startNonterminal("IndexKeyCollation", e0);
    shift(94);                      // 'collation'
    lookahead1W(15);                // URILiteral | S^WS | '(:'
    shift(7);                       // URILiteral
    eventHandler.endNonterminal("IndexKeyCollation", e0);
  }

  function parse_IndexDecl()
  {
    eventHandler.startNonterminal("IndexDecl", e0);
    shift(155);                     // 'index'
    lookahead1W(254);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_IndexName();
    lookahead1W(65);                // S^WS | '(:' | 'on'
    shift(197);                     // 'on'
    lookahead1W(63);                // S^WS | '(:' | 'nodes'
    shift(192);                     // 'nodes'
    lookahead1W(265);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(:' | '.' | '..' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_IndexDomainExpr();
    shift(87);                      // 'by'
    lookahead1W(265);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(:' | '.' | '..' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_IndexKeySpec();
    for (;;)
    {
      lookahead1W(103);             // S^WS | '(:' | ',' | ';'
      if (l1 != 41)                 // ','
      {
        break;
      }
      shift(41);                    // ','
      lookahead1W(265);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(:' | '.' | '..' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_IndexKeySpec();
    }
    eventHandler.endNonterminal("IndexDecl", e0);
  }

  function parse_ICDecl()
  {
    eventHandler.startNonterminal("ICDecl", e0);
    shift(161);                     // 'integrity'
    lookahead1W(40);                // S^WS | '(:' | 'constraint'
    shift(97);                      // 'constraint'
    lookahead1W(254);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_EQName();
    lookahead1W(120);               // S^WS | '(:' | 'foreign' | 'on'
    switch (l1)
    {
    case 197:                       // 'on'
      whitespace();
      parse_ICCollection();
      break;
    default:
      whitespace();
      parse_ICForeignKey();
    }
    eventHandler.endNonterminal("ICDecl", e0);
  }

  function parse_ICCollection()
  {
    eventHandler.startNonterminal("ICCollection", e0);
    shift(197);                     // 'on'
    lookahead1W(39);                // S^WS | '(:' | 'collection'
    shift(95);                      // 'collection'
    lookahead1W(254);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_EQName();
    lookahead1W(140);               // S^WS | '$' | '(:' | 'foreach' | 'node'
    switch (l1)
    {
    case 31:                        // '$'
      whitespace();
      parse_ICCollSequence();
      break;
    case 191:                       // 'node'
      whitespace();
      parse_ICCollSequenceUnique();
      break;
    default:
      whitespace();
      parse_ICCollNode();
    }
    eventHandler.endNonterminal("ICCollection", e0);
  }

  function parse_ICCollSequence()
  {
    eventHandler.startNonterminal("ICCollSequence", e0);
    parse_VarRef();
    lookahead1W(37);                // S^WS | '(:' | 'check'
    shift(92);                      // 'check'
    lookahead1W(266);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("ICCollSequence", e0);
  }

  function parse_ICCollSequenceUnique()
  {
    eventHandler.startNonterminal("ICCollSequenceUnique", e0);
    shift(191);                     // 'node'
    lookahead1W(21);                // S^WS | '$' | '(:'
    whitespace();
    parse_VarRef();
    lookahead1W(37);                // S^WS | '(:' | 'check'
    shift(92);                      // 'check'
    lookahead1W(80);                // S^WS | '(:' | 'unique'
    shift(255);                     // 'unique'
    lookahead1W(57);                // S^WS | '(:' | 'key'
    shift(168);                     // 'key'
    lookahead1W(265);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(:' | '.' | '..' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_PathExpr();
    eventHandler.endNonterminal("ICCollSequenceUnique", e0);
  }

  function parse_ICCollNode()
  {
    eventHandler.startNonterminal("ICCollNode", e0);
    shift(138);                     // 'foreach'
    lookahead1W(62);                // S^WS | '(:' | 'node'
    shift(191);                     // 'node'
    lookahead1W(21);                // S^WS | '$' | '(:'
    whitespace();
    parse_VarRef();
    lookahead1W(37);                // S^WS | '(:' | 'check'
    shift(92);                      // 'check'
    lookahead1W(266);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("ICCollNode", e0);
  }

  function parse_ICForeignKey()
  {
    eventHandler.startNonterminal("ICForeignKey", e0);
    shift(139);                     // 'foreign'
    lookahead1W(57);                // S^WS | '(:' | 'key'
    shift(168);                     // 'key'
    lookahead1W(51);                // S^WS | '(:' | 'from'
    whitespace();
    parse_ICForeignKeySource();
    whitespace();
    parse_ICForeignKeyTarget();
    eventHandler.endNonterminal("ICForeignKey", e0);
  }

  function parse_ICForeignKeySource()
  {
    eventHandler.startNonterminal("ICForeignKeySource", e0);
    shift(140);                     // 'from'
    lookahead1W(39);                // S^WS | '(:' | 'collection'
    whitespace();
    parse_ICForeignKeyValues();
    eventHandler.endNonterminal("ICForeignKeySource", e0);
  }

  function parse_ICForeignKeyTarget()
  {
    eventHandler.startNonterminal("ICForeignKeyTarget", e0);
    shift(248);                     // 'to'
    lookahead1W(39);                // S^WS | '(:' | 'collection'
    whitespace();
    parse_ICForeignKeyValues();
    eventHandler.endNonterminal("ICForeignKeyTarget", e0);
  }

  function parse_ICForeignKeyValues()
  {
    eventHandler.startNonterminal("ICForeignKeyValues", e0);
    shift(95);                      // 'collection'
    lookahead1W(254);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_EQName();
    lookahead1W(62);                // S^WS | '(:' | 'node'
    shift(191);                     // 'node'
    lookahead1W(21);                // S^WS | '$' | '(:'
    whitespace();
    parse_VarRef();
    lookahead1W(57);                // S^WS | '(:' | 'key'
    shift(168);                     // 'key'
    lookahead1W(265);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(:' | '.' | '..' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_PathExpr();
    eventHandler.endNonterminal("ICForeignKeyValues", e0);
  }

  function try_Comment()
  {
    shiftT(36);                     // '(:'
    for (;;)
    {
      lookahead1(89);               // CommentContents | '(:' | ':)'
      if (l1 == 50)                 // ':)'
      {
        break;
      }
      switch (l1)
      {
      case 24:                      // CommentContents
        shiftT(24);                 // CommentContents
        break;
      default:
        try_Comment();
      }
    }
    shiftT(50);                     // ':)'
  }

  function try_Whitespace()
  {
    switch (l1)
    {
    case 22:                        // S^WS
      shiftT(22);                   // S^WS
      break;
    default:
      try_Comment();
    }
  }

  function parse_EQName()
  {
    eventHandler.startNonterminal("EQName", e0);
    lookahead1(249);                // EQName^Token | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery'
    switch (l1)
    {
    case 82:                        // 'attribute'
      shift(82);                    // 'attribute'
      break;
    case 96:                        // 'comment'
      shift(96);                    // 'comment'
      break;
    case 120:                       // 'document-node'
      shift(120);                   // 'document-node'
      break;
    case 121:                       // 'element'
      shift(121);                   // 'element'
      break;
    case 124:                       // 'empty-sequence'
      shift(124);                   // 'empty-sequence'
      break;
    case 145:                       // 'function'
      shift(145);                   // 'function'
      break;
    case 152:                       // 'if'
      shift(152);                   // 'if'
      break;
    case 165:                       // 'item'
      shift(165);                   // 'item'
      break;
    case 185:                       // 'namespace-node'
      shift(185);                   // 'namespace-node'
      break;
    case 191:                       // 'node'
      shift(191);                   // 'node'
      break;
    case 216:                       // 'processing-instruction'
      shift(216);                   // 'processing-instruction'
      break;
    case 226:                       // 'schema-attribute'
      shift(226);                   // 'schema-attribute'
      break;
    case 227:                       // 'schema-element'
      shift(227);                   // 'schema-element'
      break;
    case 243:                       // 'switch'
      shift(243);                   // 'switch'
      break;
    case 244:                       // 'text'
      shift(244);                   // 'text'
      break;
    case 253:                       // 'typeswitch'
      shift(253);                   // 'typeswitch'
      break;
    case 78:                        // 'array'
      shift(78);                    // 'array'
      break;
    case 167:                       // 'json-item'
      shift(167);                   // 'json-item'
      break;
    case 242:                       // 'structured-item'
      shift(242);                   // 'structured-item'
      break;
    default:
      parse_FunctionName();
    }
    eventHandler.endNonterminal("EQName", e0);
  }

  function try_EQName()
  {
    lookahead1(249);                // EQName^Token | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery'
    switch (l1)
    {
    case 82:                        // 'attribute'
      shiftT(82);                   // 'attribute'
      break;
    case 96:                        // 'comment'
      shiftT(96);                   // 'comment'
      break;
    case 120:                       // 'document-node'
      shiftT(120);                  // 'document-node'
      break;
    case 121:                       // 'element'
      shiftT(121);                  // 'element'
      break;
    case 124:                       // 'empty-sequence'
      shiftT(124);                  // 'empty-sequence'
      break;
    case 145:                       // 'function'
      shiftT(145);                  // 'function'
      break;
    case 152:                       // 'if'
      shiftT(152);                  // 'if'
      break;
    case 165:                       // 'item'
      shiftT(165);                  // 'item'
      break;
    case 185:                       // 'namespace-node'
      shiftT(185);                  // 'namespace-node'
      break;
    case 191:                       // 'node'
      shiftT(191);                  // 'node'
      break;
    case 216:                       // 'processing-instruction'
      shiftT(216);                  // 'processing-instruction'
      break;
    case 226:                       // 'schema-attribute'
      shiftT(226);                  // 'schema-attribute'
      break;
    case 227:                       // 'schema-element'
      shiftT(227);                  // 'schema-element'
      break;
    case 243:                       // 'switch'
      shiftT(243);                  // 'switch'
      break;
    case 244:                       // 'text'
      shiftT(244);                  // 'text'
      break;
    case 253:                       // 'typeswitch'
      shiftT(253);                  // 'typeswitch'
      break;
    case 78:                        // 'array'
      shiftT(78);                   // 'array'
      break;
    case 167:                       // 'json-item'
      shiftT(167);                  // 'json-item'
      break;
    case 242:                       // 'structured-item'
      shiftT(242);                  // 'structured-item'
      break;
    default:
      try_FunctionName();
    }
  }

  function parse_FunctionName()
  {
    eventHandler.startNonterminal("FunctionName", e0);
    switch (l1)
    {
    case 6:                         // EQName^Token
      shift(6);                     // EQName^Token
      break;
    case 70:                        // 'after'
      shift(70);                    // 'after'
      break;
    case 73:                        // 'ancestor'
      shift(73);                    // 'ancestor'
      break;
    case 74:                        // 'ancestor-or-self'
      shift(74);                    // 'ancestor-or-self'
      break;
    case 75:                        // 'and'
      shift(75);                    // 'and'
      break;
    case 79:                        // 'as'
      shift(79);                    // 'as'
      break;
    case 80:                        // 'ascending'
      shift(80);                    // 'ascending'
      break;
    case 84:                        // 'before'
      shift(84);                    // 'before'
      break;
    case 88:                        // 'case'
      shift(88);                    // 'case'
      break;
    case 89:                        // 'cast'
      shift(89);                    // 'cast'
      break;
    case 90:                        // 'castable'
      shift(90);                    // 'castable'
      break;
    case 93:                        // 'child'
      shift(93);                    // 'child'
      break;
    case 94:                        // 'collation'
      shift(94);                    // 'collation'
      break;
    case 103:                       // 'copy'
      shift(103);                   // 'copy'
      break;
    case 105:                       // 'count'
      shift(105);                   // 'count'
      break;
    case 108:                       // 'declare'
      shift(108);                   // 'declare'
      break;
    case 109:                       // 'default'
      shift(109);                   // 'default'
      break;
    case 110:                       // 'delete'
      shift(110);                   // 'delete'
      break;
    case 111:                       // 'descendant'
      shift(111);                   // 'descendant'
      break;
    case 112:                       // 'descendant-or-self'
      shift(112);                   // 'descendant-or-self'
      break;
    case 113:                       // 'descending'
      shift(113);                   // 'descending'
      break;
    case 118:                       // 'div'
      shift(118);                   // 'div'
      break;
    case 119:                       // 'document'
      shift(119);                   // 'document'
      break;
    case 122:                       // 'else'
      shift(122);                   // 'else'
      break;
    case 123:                       // 'empty'
      shift(123);                   // 'empty'
      break;
    case 126:                       // 'end'
      shift(126);                   // 'end'
      break;
    case 128:                       // 'eq'
      shift(128);                   // 'eq'
      break;
    case 129:                       // 'every'
      shift(129);                   // 'every'
      break;
    case 131:                       // 'except'
      shift(131);                   // 'except'
      break;
    case 134:                       // 'first'
      shift(134);                   // 'first'
      break;
    case 135:                       // 'following'
      shift(135);                   // 'following'
      break;
    case 136:                       // 'following-sibling'
      shift(136);                   // 'following-sibling'
      break;
    case 137:                       // 'for'
      shift(137);                   // 'for'
      break;
    case 146:                       // 'ge'
      shift(146);                   // 'ge'
      break;
    case 148:                       // 'group'
      shift(148);                   // 'group'
      break;
    case 150:                       // 'gt'
      shift(150);                   // 'gt'
      break;
    case 151:                       // 'idiv'
      shift(151);                   // 'idiv'
      break;
    case 153:                       // 'import'
      shift(153);                   // 'import'
      break;
    case 159:                       // 'insert'
      shift(159);                   // 'insert'
      break;
    case 160:                       // 'instance'
      shift(160);                   // 'instance'
      break;
    case 162:                       // 'intersect'
      shift(162);                   // 'intersect'
      break;
    case 163:                       // 'into'
      shift(163);                   // 'into'
      break;
    case 164:                       // 'is'
      shift(164);                   // 'is'
      break;
    case 170:                       // 'last'
      shift(170);                   // 'last'
      break;
    case 172:                       // 'le'
      shift(172);                   // 'le'
      break;
    case 174:                       // 'let'
      shift(174);                   // 'let'
      break;
    case 178:                       // 'lt'
      shift(178);                   // 'lt'
      break;
    case 180:                       // 'mod'
      shift(180);                   // 'mod'
      break;
    case 181:                       // 'modify'
      shift(181);                   // 'modify'
      break;
    case 182:                       // 'module'
      shift(182);                   // 'module'
      break;
    case 184:                       // 'namespace'
      shift(184);                   // 'namespace'
      break;
    case 186:                       // 'ne'
      shift(186);                   // 'ne'
      break;
    case 198:                       // 'only'
      shift(198);                   // 'only'
      break;
    case 200:                       // 'or'
      shift(200);                   // 'or'
      break;
    case 201:                       // 'order'
      shift(201);                   // 'order'
      break;
    case 202:                       // 'ordered'
      shift(202);                   // 'ordered'
      break;
    case 206:                       // 'parent'
      shift(206);                   // 'parent'
      break;
    case 212:                       // 'preceding'
      shift(212);                   // 'preceding'
      break;
    case 213:                       // 'preceding-sibling'
      shift(213);                   // 'preceding-sibling'
      break;
    case 218:                       // 'rename'
      shift(218);                   // 'rename'
      break;
    case 219:                       // 'replace'
      shift(219);                   // 'replace'
      break;
    case 220:                       // 'return'
      shift(220);                   // 'return'
      break;
    case 224:                       // 'satisfies'
      shift(224);                   // 'satisfies'
      break;
    case 229:                       // 'self'
      shift(229);                   // 'self'
      break;
    case 235:                       // 'some'
      shift(235);                   // 'some'
      break;
    case 236:                       // 'stable'
      shift(236);                   // 'stable'
      break;
    case 237:                       // 'start'
      shift(237);                   // 'start'
      break;
    case 248:                       // 'to'
      shift(248);                   // 'to'
      break;
    case 249:                       // 'treat'
      shift(249);                   // 'treat'
      break;
    case 250:                       // 'try'
      shift(250);                   // 'try'
      break;
    case 254:                       // 'union'
      shift(254);                   // 'union'
      break;
    case 256:                       // 'unordered'
      shift(256);                   // 'unordered'
      break;
    case 260:                       // 'validate'
      shift(260);                   // 'validate'
      break;
    case 266:                       // 'where'
      shift(266);                   // 'where'
      break;
    case 270:                       // 'with'
      shift(270);                   // 'with'
      break;
    case 274:                       // 'xquery'
      shift(274);                   // 'xquery'
      break;
    case 72:                        // 'allowing'
      shift(72);                    // 'allowing'
      break;
    case 81:                        // 'at'
      shift(81);                    // 'at'
      break;
    case 83:                        // 'base-uri'
      shift(83);                    // 'base-uri'
      break;
    case 85:                        // 'boundary-space'
      shift(85);                    // 'boundary-space'
      break;
    case 86:                        // 'break'
      shift(86);                    // 'break'
      break;
    case 91:                        // 'catch'
      shift(91);                    // 'catch'
      break;
    case 98:                        // 'construction'
      shift(98);                    // 'construction'
      break;
    case 101:                       // 'context'
      shift(101);                   // 'context'
      break;
    case 102:                       // 'continue'
      shift(102);                   // 'continue'
      break;
    case 104:                       // 'copy-namespaces'
      shift(104);                   // 'copy-namespaces'
      break;
    case 106:                       // 'decimal-format'
      shift(106);                   // 'decimal-format'
      break;
    case 125:                       // 'encoding'
      shift(125);                   // 'encoding'
      break;
    case 132:                       // 'exit'
      shift(132);                   // 'exit'
      break;
    case 133:                       // 'external'
      shift(133);                   // 'external'
      break;
    case 141:                       // 'ft-option'
      shift(141);                   // 'ft-option'
      break;
    case 154:                       // 'in'
      shift(154);                   // 'in'
      break;
    case 155:                       // 'index'
      shift(155);                   // 'index'
      break;
    case 161:                       // 'integrity'
      shift(161);                   // 'integrity'
      break;
    case 171:                       // 'lax'
      shift(171);                   // 'lax'
      break;
    case 192:                       // 'nodes'
      shift(192);                   // 'nodes'
      break;
    case 199:                       // 'option'
      shift(199);                   // 'option'
      break;
    case 203:                       // 'ordering'
      shift(203);                   // 'ordering'
      break;
    case 222:                       // 'revalidation'
      shift(222);                   // 'revalidation'
      break;
    case 225:                       // 'schema'
      shift(225);                   // 'schema'
      break;
    case 228:                       // 'score'
      shift(228);                   // 'score'
      break;
    case 234:                       // 'sliding'
      shift(234);                   // 'sliding'
      break;
    case 240:                       // 'strict'
      shift(240);                   // 'strict'
      break;
    case 251:                       // 'tumbling'
      shift(251);                   // 'tumbling'
      break;
    case 252:                       // 'type'
      shift(252);                   // 'type'
      break;
    case 257:                       // 'updating'
      shift(257);                   // 'updating'
      break;
    case 261:                       // 'value'
      shift(261);                   // 'value'
      break;
    case 262:                       // 'variable'
      shift(262);                   // 'variable'
      break;
    case 263:                       // 'version'
      shift(263);                   // 'version'
      break;
    case 267:                       // 'while'
      shift(267);                   // 'while'
      break;
    case 97:                        // 'constraint'
      shift(97);                    // 'constraint'
      break;
    case 176:                       // 'loop'
      shift(176);                   // 'loop'
      break;
    case 221:                       // 'returning'
      shift(221);                   // 'returning'
      break;
    case 77:                        // 'append'
      shift(77);                    // 'append'
      break;
    case 166:                       // 'json'
      shift(166);                   // 'json'
      break;
    default:
      shift(194);                   // 'object'
    }
    eventHandler.endNonterminal("FunctionName", e0);
  }

  function try_FunctionName()
  {
    switch (l1)
    {
    case 6:                         // EQName^Token
      shiftT(6);                    // EQName^Token
      break;
    case 70:                        // 'after'
      shiftT(70);                   // 'after'
      break;
    case 73:                        // 'ancestor'
      shiftT(73);                   // 'ancestor'
      break;
    case 74:                        // 'ancestor-or-self'
      shiftT(74);                   // 'ancestor-or-self'
      break;
    case 75:                        // 'and'
      shiftT(75);                   // 'and'
      break;
    case 79:                        // 'as'
      shiftT(79);                   // 'as'
      break;
    case 80:                        // 'ascending'
      shiftT(80);                   // 'ascending'
      break;
    case 84:                        // 'before'
      shiftT(84);                   // 'before'
      break;
    case 88:                        // 'case'
      shiftT(88);                   // 'case'
      break;
    case 89:                        // 'cast'
      shiftT(89);                   // 'cast'
      break;
    case 90:                        // 'castable'
      shiftT(90);                   // 'castable'
      break;
    case 93:                        // 'child'
      shiftT(93);                   // 'child'
      break;
    case 94:                        // 'collation'
      shiftT(94);                   // 'collation'
      break;
    case 103:                       // 'copy'
      shiftT(103);                  // 'copy'
      break;
    case 105:                       // 'count'
      shiftT(105);                  // 'count'
      break;
    case 108:                       // 'declare'
      shiftT(108);                  // 'declare'
      break;
    case 109:                       // 'default'
      shiftT(109);                  // 'default'
      break;
    case 110:                       // 'delete'
      shiftT(110);                  // 'delete'
      break;
    case 111:                       // 'descendant'
      shiftT(111);                  // 'descendant'
      break;
    case 112:                       // 'descendant-or-self'
      shiftT(112);                  // 'descendant-or-self'
      break;
    case 113:                       // 'descending'
      shiftT(113);                  // 'descending'
      break;
    case 118:                       // 'div'
      shiftT(118);                  // 'div'
      break;
    case 119:                       // 'document'
      shiftT(119);                  // 'document'
      break;
    case 122:                       // 'else'
      shiftT(122);                  // 'else'
      break;
    case 123:                       // 'empty'
      shiftT(123);                  // 'empty'
      break;
    case 126:                       // 'end'
      shiftT(126);                  // 'end'
      break;
    case 128:                       // 'eq'
      shiftT(128);                  // 'eq'
      break;
    case 129:                       // 'every'
      shiftT(129);                  // 'every'
      break;
    case 131:                       // 'except'
      shiftT(131);                  // 'except'
      break;
    case 134:                       // 'first'
      shiftT(134);                  // 'first'
      break;
    case 135:                       // 'following'
      shiftT(135);                  // 'following'
      break;
    case 136:                       // 'following-sibling'
      shiftT(136);                  // 'following-sibling'
      break;
    case 137:                       // 'for'
      shiftT(137);                  // 'for'
      break;
    case 146:                       // 'ge'
      shiftT(146);                  // 'ge'
      break;
    case 148:                       // 'group'
      shiftT(148);                  // 'group'
      break;
    case 150:                       // 'gt'
      shiftT(150);                  // 'gt'
      break;
    case 151:                       // 'idiv'
      shiftT(151);                  // 'idiv'
      break;
    case 153:                       // 'import'
      shiftT(153);                  // 'import'
      break;
    case 159:                       // 'insert'
      shiftT(159);                  // 'insert'
      break;
    case 160:                       // 'instance'
      shiftT(160);                  // 'instance'
      break;
    case 162:                       // 'intersect'
      shiftT(162);                  // 'intersect'
      break;
    case 163:                       // 'into'
      shiftT(163);                  // 'into'
      break;
    case 164:                       // 'is'
      shiftT(164);                  // 'is'
      break;
    case 170:                       // 'last'
      shiftT(170);                  // 'last'
      break;
    case 172:                       // 'le'
      shiftT(172);                  // 'le'
      break;
    case 174:                       // 'let'
      shiftT(174);                  // 'let'
      break;
    case 178:                       // 'lt'
      shiftT(178);                  // 'lt'
      break;
    case 180:                       // 'mod'
      shiftT(180);                  // 'mod'
      break;
    case 181:                       // 'modify'
      shiftT(181);                  // 'modify'
      break;
    case 182:                       // 'module'
      shiftT(182);                  // 'module'
      break;
    case 184:                       // 'namespace'
      shiftT(184);                  // 'namespace'
      break;
    case 186:                       // 'ne'
      shiftT(186);                  // 'ne'
      break;
    case 198:                       // 'only'
      shiftT(198);                  // 'only'
      break;
    case 200:                       // 'or'
      shiftT(200);                  // 'or'
      break;
    case 201:                       // 'order'
      shiftT(201);                  // 'order'
      break;
    case 202:                       // 'ordered'
      shiftT(202);                  // 'ordered'
      break;
    case 206:                       // 'parent'
      shiftT(206);                  // 'parent'
      break;
    case 212:                       // 'preceding'
      shiftT(212);                  // 'preceding'
      break;
    case 213:                       // 'preceding-sibling'
      shiftT(213);                  // 'preceding-sibling'
      break;
    case 218:                       // 'rename'
      shiftT(218);                  // 'rename'
      break;
    case 219:                       // 'replace'
      shiftT(219);                  // 'replace'
      break;
    case 220:                       // 'return'
      shiftT(220);                  // 'return'
      break;
    case 224:                       // 'satisfies'
      shiftT(224);                  // 'satisfies'
      break;
    case 229:                       // 'self'
      shiftT(229);                  // 'self'
      break;
    case 235:                       // 'some'
      shiftT(235);                  // 'some'
      break;
    case 236:                       // 'stable'
      shiftT(236);                  // 'stable'
      break;
    case 237:                       // 'start'
      shiftT(237);                  // 'start'
      break;
    case 248:                       // 'to'
      shiftT(248);                  // 'to'
      break;
    case 249:                       // 'treat'
      shiftT(249);                  // 'treat'
      break;
    case 250:                       // 'try'
      shiftT(250);                  // 'try'
      break;
    case 254:                       // 'union'
      shiftT(254);                  // 'union'
      break;
    case 256:                       // 'unordered'
      shiftT(256);                  // 'unordered'
      break;
    case 260:                       // 'validate'
      shiftT(260);                  // 'validate'
      break;
    case 266:                       // 'where'
      shiftT(266);                  // 'where'
      break;
    case 270:                       // 'with'
      shiftT(270);                  // 'with'
      break;
    case 274:                       // 'xquery'
      shiftT(274);                  // 'xquery'
      break;
    case 72:                        // 'allowing'
      shiftT(72);                   // 'allowing'
      break;
    case 81:                        // 'at'
      shiftT(81);                   // 'at'
      break;
    case 83:                        // 'base-uri'
      shiftT(83);                   // 'base-uri'
      break;
    case 85:                        // 'boundary-space'
      shiftT(85);                   // 'boundary-space'
      break;
    case 86:                        // 'break'
      shiftT(86);                   // 'break'
      break;
    case 91:                        // 'catch'
      shiftT(91);                   // 'catch'
      break;
    case 98:                        // 'construction'
      shiftT(98);                   // 'construction'
      break;
    case 101:                       // 'context'
      shiftT(101);                  // 'context'
      break;
    case 102:                       // 'continue'
      shiftT(102);                  // 'continue'
      break;
    case 104:                       // 'copy-namespaces'
      shiftT(104);                  // 'copy-namespaces'
      break;
    case 106:                       // 'decimal-format'
      shiftT(106);                  // 'decimal-format'
      break;
    case 125:                       // 'encoding'
      shiftT(125);                  // 'encoding'
      break;
    case 132:                       // 'exit'
      shiftT(132);                  // 'exit'
      break;
    case 133:                       // 'external'
      shiftT(133);                  // 'external'
      break;
    case 141:                       // 'ft-option'
      shiftT(141);                  // 'ft-option'
      break;
    case 154:                       // 'in'
      shiftT(154);                  // 'in'
      break;
    case 155:                       // 'index'
      shiftT(155);                  // 'index'
      break;
    case 161:                       // 'integrity'
      shiftT(161);                  // 'integrity'
      break;
    case 171:                       // 'lax'
      shiftT(171);                  // 'lax'
      break;
    case 192:                       // 'nodes'
      shiftT(192);                  // 'nodes'
      break;
    case 199:                       // 'option'
      shiftT(199);                  // 'option'
      break;
    case 203:                       // 'ordering'
      shiftT(203);                  // 'ordering'
      break;
    case 222:                       // 'revalidation'
      shiftT(222);                  // 'revalidation'
      break;
    case 225:                       // 'schema'
      shiftT(225);                  // 'schema'
      break;
    case 228:                       // 'score'
      shiftT(228);                  // 'score'
      break;
    case 234:                       // 'sliding'
      shiftT(234);                  // 'sliding'
      break;
    case 240:                       // 'strict'
      shiftT(240);                  // 'strict'
      break;
    case 251:                       // 'tumbling'
      shiftT(251);                  // 'tumbling'
      break;
    case 252:                       // 'type'
      shiftT(252);                  // 'type'
      break;
    case 257:                       // 'updating'
      shiftT(257);                  // 'updating'
      break;
    case 261:                       // 'value'
      shiftT(261);                  // 'value'
      break;
    case 262:                       // 'variable'
      shiftT(262);                  // 'variable'
      break;
    case 263:                       // 'version'
      shiftT(263);                  // 'version'
      break;
    case 267:                       // 'while'
      shiftT(267);                  // 'while'
      break;
    case 97:                        // 'constraint'
      shiftT(97);                   // 'constraint'
      break;
    case 176:                       // 'loop'
      shiftT(176);                  // 'loop'
      break;
    case 221:                       // 'returning'
      shiftT(221);                  // 'returning'
      break;
    case 77:                        // 'append'
      shiftT(77);                   // 'append'
      break;
    case 166:                       // 'json'
      shiftT(166);                  // 'json'
      break;
    default:
      shiftT(194);                  // 'object'
    }
  }

  function parse_NCName()
  {
    eventHandler.startNonterminal("NCName", e0);
    switch (l1)
    {
    case 19:                        // NCName^Token
      shift(19);                    // NCName^Token
      break;
    case 70:                        // 'after'
      shift(70);                    // 'after'
      break;
    case 75:                        // 'and'
      shift(75);                    // 'and'
      break;
    case 79:                        // 'as'
      shift(79);                    // 'as'
      break;
    case 80:                        // 'ascending'
      shift(80);                    // 'ascending'
      break;
    case 84:                        // 'before'
      shift(84);                    // 'before'
      break;
    case 88:                        // 'case'
      shift(88);                    // 'case'
      break;
    case 89:                        // 'cast'
      shift(89);                    // 'cast'
      break;
    case 90:                        // 'castable'
      shift(90);                    // 'castable'
      break;
    case 94:                        // 'collation'
      shift(94);                    // 'collation'
      break;
    case 105:                       // 'count'
      shift(105);                   // 'count'
      break;
    case 109:                       // 'default'
      shift(109);                   // 'default'
      break;
    case 113:                       // 'descending'
      shift(113);                   // 'descending'
      break;
    case 118:                       // 'div'
      shift(118);                   // 'div'
      break;
    case 122:                       // 'else'
      shift(122);                   // 'else'
      break;
    case 123:                       // 'empty'
      shift(123);                   // 'empty'
      break;
    case 126:                       // 'end'
      shift(126);                   // 'end'
      break;
    case 128:                       // 'eq'
      shift(128);                   // 'eq'
      break;
    case 131:                       // 'except'
      shift(131);                   // 'except'
      break;
    case 137:                       // 'for'
      shift(137);                   // 'for'
      break;
    case 146:                       // 'ge'
      shift(146);                   // 'ge'
      break;
    case 148:                       // 'group'
      shift(148);                   // 'group'
      break;
    case 150:                       // 'gt'
      shift(150);                   // 'gt'
      break;
    case 151:                       // 'idiv'
      shift(151);                   // 'idiv'
      break;
    case 160:                       // 'instance'
      shift(160);                   // 'instance'
      break;
    case 162:                       // 'intersect'
      shift(162);                   // 'intersect'
      break;
    case 163:                       // 'into'
      shift(163);                   // 'into'
      break;
    case 164:                       // 'is'
      shift(164);                   // 'is'
      break;
    case 172:                       // 'le'
      shift(172);                   // 'le'
      break;
    case 174:                       // 'let'
      shift(174);                   // 'let'
      break;
    case 178:                       // 'lt'
      shift(178);                   // 'lt'
      break;
    case 180:                       // 'mod'
      shift(180);                   // 'mod'
      break;
    case 181:                       // 'modify'
      shift(181);                   // 'modify'
      break;
    case 186:                       // 'ne'
      shift(186);                   // 'ne'
      break;
    case 198:                       // 'only'
      shift(198);                   // 'only'
      break;
    case 200:                       // 'or'
      shift(200);                   // 'or'
      break;
    case 201:                       // 'order'
      shift(201);                   // 'order'
      break;
    case 220:                       // 'return'
      shift(220);                   // 'return'
      break;
    case 224:                       // 'satisfies'
      shift(224);                   // 'satisfies'
      break;
    case 236:                       // 'stable'
      shift(236);                   // 'stable'
      break;
    case 237:                       // 'start'
      shift(237);                   // 'start'
      break;
    case 248:                       // 'to'
      shift(248);                   // 'to'
      break;
    case 249:                       // 'treat'
      shift(249);                   // 'treat'
      break;
    case 254:                       // 'union'
      shift(254);                   // 'union'
      break;
    case 266:                       // 'where'
      shift(266);                   // 'where'
      break;
    case 270:                       // 'with'
      shift(270);                   // 'with'
      break;
    case 73:                        // 'ancestor'
      shift(73);                    // 'ancestor'
      break;
    case 74:                        // 'ancestor-or-self'
      shift(74);                    // 'ancestor-or-self'
      break;
    case 82:                        // 'attribute'
      shift(82);                    // 'attribute'
      break;
    case 93:                        // 'child'
      shift(93);                    // 'child'
      break;
    case 96:                        // 'comment'
      shift(96);                    // 'comment'
      break;
    case 103:                       // 'copy'
      shift(103);                   // 'copy'
      break;
    case 108:                       // 'declare'
      shift(108);                   // 'declare'
      break;
    case 110:                       // 'delete'
      shift(110);                   // 'delete'
      break;
    case 111:                       // 'descendant'
      shift(111);                   // 'descendant'
      break;
    case 112:                       // 'descendant-or-self'
      shift(112);                   // 'descendant-or-self'
      break;
    case 119:                       // 'document'
      shift(119);                   // 'document'
      break;
    case 120:                       // 'document-node'
      shift(120);                   // 'document-node'
      break;
    case 121:                       // 'element'
      shift(121);                   // 'element'
      break;
    case 124:                       // 'empty-sequence'
      shift(124);                   // 'empty-sequence'
      break;
    case 129:                       // 'every'
      shift(129);                   // 'every'
      break;
    case 134:                       // 'first'
      shift(134);                   // 'first'
      break;
    case 135:                       // 'following'
      shift(135);                   // 'following'
      break;
    case 136:                       // 'following-sibling'
      shift(136);                   // 'following-sibling'
      break;
    case 145:                       // 'function'
      shift(145);                   // 'function'
      break;
    case 152:                       // 'if'
      shift(152);                   // 'if'
      break;
    case 153:                       // 'import'
      shift(153);                   // 'import'
      break;
    case 159:                       // 'insert'
      shift(159);                   // 'insert'
      break;
    case 165:                       // 'item'
      shift(165);                   // 'item'
      break;
    case 170:                       // 'last'
      shift(170);                   // 'last'
      break;
    case 182:                       // 'module'
      shift(182);                   // 'module'
      break;
    case 184:                       // 'namespace'
      shift(184);                   // 'namespace'
      break;
    case 185:                       // 'namespace-node'
      shift(185);                   // 'namespace-node'
      break;
    case 191:                       // 'node'
      shift(191);                   // 'node'
      break;
    case 202:                       // 'ordered'
      shift(202);                   // 'ordered'
      break;
    case 206:                       // 'parent'
      shift(206);                   // 'parent'
      break;
    case 212:                       // 'preceding'
      shift(212);                   // 'preceding'
      break;
    case 213:                       // 'preceding-sibling'
      shift(213);                   // 'preceding-sibling'
      break;
    case 216:                       // 'processing-instruction'
      shift(216);                   // 'processing-instruction'
      break;
    case 218:                       // 'rename'
      shift(218);                   // 'rename'
      break;
    case 219:                       // 'replace'
      shift(219);                   // 'replace'
      break;
    case 226:                       // 'schema-attribute'
      shift(226);                   // 'schema-attribute'
      break;
    case 227:                       // 'schema-element'
      shift(227);                   // 'schema-element'
      break;
    case 229:                       // 'self'
      shift(229);                   // 'self'
      break;
    case 235:                       // 'some'
      shift(235);                   // 'some'
      break;
    case 243:                       // 'switch'
      shift(243);                   // 'switch'
      break;
    case 244:                       // 'text'
      shift(244);                   // 'text'
      break;
    case 250:                       // 'try'
      shift(250);                   // 'try'
      break;
    case 253:                       // 'typeswitch'
      shift(253);                   // 'typeswitch'
      break;
    case 256:                       // 'unordered'
      shift(256);                   // 'unordered'
      break;
    case 260:                       // 'validate'
      shift(260);                   // 'validate'
      break;
    case 262:                       // 'variable'
      shift(262);                   // 'variable'
      break;
    case 274:                       // 'xquery'
      shift(274);                   // 'xquery'
      break;
    case 72:                        // 'allowing'
      shift(72);                    // 'allowing'
      break;
    case 81:                        // 'at'
      shift(81);                    // 'at'
      break;
    case 83:                        // 'base-uri'
      shift(83);                    // 'base-uri'
      break;
    case 85:                        // 'boundary-space'
      shift(85);                    // 'boundary-space'
      break;
    case 86:                        // 'break'
      shift(86);                    // 'break'
      break;
    case 91:                        // 'catch'
      shift(91);                    // 'catch'
      break;
    case 98:                        // 'construction'
      shift(98);                    // 'construction'
      break;
    case 101:                       // 'context'
      shift(101);                   // 'context'
      break;
    case 102:                       // 'continue'
      shift(102);                   // 'continue'
      break;
    case 104:                       // 'copy-namespaces'
      shift(104);                   // 'copy-namespaces'
      break;
    case 106:                       // 'decimal-format'
      shift(106);                   // 'decimal-format'
      break;
    case 125:                       // 'encoding'
      shift(125);                   // 'encoding'
      break;
    case 132:                       // 'exit'
      shift(132);                   // 'exit'
      break;
    case 133:                       // 'external'
      shift(133);                   // 'external'
      break;
    case 141:                       // 'ft-option'
      shift(141);                   // 'ft-option'
      break;
    case 154:                       // 'in'
      shift(154);                   // 'in'
      break;
    case 155:                       // 'index'
      shift(155);                   // 'index'
      break;
    case 161:                       // 'integrity'
      shift(161);                   // 'integrity'
      break;
    case 171:                       // 'lax'
      shift(171);                   // 'lax'
      break;
    case 192:                       // 'nodes'
      shift(192);                   // 'nodes'
      break;
    case 199:                       // 'option'
      shift(199);                   // 'option'
      break;
    case 203:                       // 'ordering'
      shift(203);                   // 'ordering'
      break;
    case 222:                       // 'revalidation'
      shift(222);                   // 'revalidation'
      break;
    case 225:                       // 'schema'
      shift(225);                   // 'schema'
      break;
    case 228:                       // 'score'
      shift(228);                   // 'score'
      break;
    case 234:                       // 'sliding'
      shift(234);                   // 'sliding'
      break;
    case 240:                       // 'strict'
      shift(240);                   // 'strict'
      break;
    case 251:                       // 'tumbling'
      shift(251);                   // 'tumbling'
      break;
    case 252:                       // 'type'
      shift(252);                   // 'type'
      break;
    case 257:                       // 'updating'
      shift(257);                   // 'updating'
      break;
    case 261:                       // 'value'
      shift(261);                   // 'value'
      break;
    case 263:                       // 'version'
      shift(263);                   // 'version'
      break;
    case 267:                       // 'while'
      shift(267);                   // 'while'
      break;
    case 97:                        // 'constraint'
      shift(97);                    // 'constraint'
      break;
    case 176:                       // 'loop'
      shift(176);                   // 'loop'
      break;
    case 221:                       // 'returning'
      shift(221);                   // 'returning'
      break;
    case 77:                        // 'append'
      shift(77);                    // 'append'
      break;
    case 166:                       // 'json'
      shift(166);                   // 'json'
      break;
    default:
      shift(194);                   // 'object'
    }
    eventHandler.endNonterminal("NCName", e0);
  }

  function try_NCName()
  {
    switch (l1)
    {
    case 19:                        // NCName^Token
      shiftT(19);                   // NCName^Token
      break;
    case 70:                        // 'after'
      shiftT(70);                   // 'after'
      break;
    case 75:                        // 'and'
      shiftT(75);                   // 'and'
      break;
    case 79:                        // 'as'
      shiftT(79);                   // 'as'
      break;
    case 80:                        // 'ascending'
      shiftT(80);                   // 'ascending'
      break;
    case 84:                        // 'before'
      shiftT(84);                   // 'before'
      break;
    case 88:                        // 'case'
      shiftT(88);                   // 'case'
      break;
    case 89:                        // 'cast'
      shiftT(89);                   // 'cast'
      break;
    case 90:                        // 'castable'
      shiftT(90);                   // 'castable'
      break;
    case 94:                        // 'collation'
      shiftT(94);                   // 'collation'
      break;
    case 105:                       // 'count'
      shiftT(105);                  // 'count'
      break;
    case 109:                       // 'default'
      shiftT(109);                  // 'default'
      break;
    case 113:                       // 'descending'
      shiftT(113);                  // 'descending'
      break;
    case 118:                       // 'div'
      shiftT(118);                  // 'div'
      break;
    case 122:                       // 'else'
      shiftT(122);                  // 'else'
      break;
    case 123:                       // 'empty'
      shiftT(123);                  // 'empty'
      break;
    case 126:                       // 'end'
      shiftT(126);                  // 'end'
      break;
    case 128:                       // 'eq'
      shiftT(128);                  // 'eq'
      break;
    case 131:                       // 'except'
      shiftT(131);                  // 'except'
      break;
    case 137:                       // 'for'
      shiftT(137);                  // 'for'
      break;
    case 146:                       // 'ge'
      shiftT(146);                  // 'ge'
      break;
    case 148:                       // 'group'
      shiftT(148);                  // 'group'
      break;
    case 150:                       // 'gt'
      shiftT(150);                  // 'gt'
      break;
    case 151:                       // 'idiv'
      shiftT(151);                  // 'idiv'
      break;
    case 160:                       // 'instance'
      shiftT(160);                  // 'instance'
      break;
    case 162:                       // 'intersect'
      shiftT(162);                  // 'intersect'
      break;
    case 163:                       // 'into'
      shiftT(163);                  // 'into'
      break;
    case 164:                       // 'is'
      shiftT(164);                  // 'is'
      break;
    case 172:                       // 'le'
      shiftT(172);                  // 'le'
      break;
    case 174:                       // 'let'
      shiftT(174);                  // 'let'
      break;
    case 178:                       // 'lt'
      shiftT(178);                  // 'lt'
      break;
    case 180:                       // 'mod'
      shiftT(180);                  // 'mod'
      break;
    case 181:                       // 'modify'
      shiftT(181);                  // 'modify'
      break;
    case 186:                       // 'ne'
      shiftT(186);                  // 'ne'
      break;
    case 198:                       // 'only'
      shiftT(198);                  // 'only'
      break;
    case 200:                       // 'or'
      shiftT(200);                  // 'or'
      break;
    case 201:                       // 'order'
      shiftT(201);                  // 'order'
      break;
    case 220:                       // 'return'
      shiftT(220);                  // 'return'
      break;
    case 224:                       // 'satisfies'
      shiftT(224);                  // 'satisfies'
      break;
    case 236:                       // 'stable'
      shiftT(236);                  // 'stable'
      break;
    case 237:                       // 'start'
      shiftT(237);                  // 'start'
      break;
    case 248:                       // 'to'
      shiftT(248);                  // 'to'
      break;
    case 249:                       // 'treat'
      shiftT(249);                  // 'treat'
      break;
    case 254:                       // 'union'
      shiftT(254);                  // 'union'
      break;
    case 266:                       // 'where'
      shiftT(266);                  // 'where'
      break;
    case 270:                       // 'with'
      shiftT(270);                  // 'with'
      break;
    case 73:                        // 'ancestor'
      shiftT(73);                   // 'ancestor'
      break;
    case 74:                        // 'ancestor-or-self'
      shiftT(74);                   // 'ancestor-or-self'
      break;
    case 82:                        // 'attribute'
      shiftT(82);                   // 'attribute'
      break;
    case 93:                        // 'child'
      shiftT(93);                   // 'child'
      break;
    case 96:                        // 'comment'
      shiftT(96);                   // 'comment'
      break;
    case 103:                       // 'copy'
      shiftT(103);                  // 'copy'
      break;
    case 108:                       // 'declare'
      shiftT(108);                  // 'declare'
      break;
    case 110:                       // 'delete'
      shiftT(110);                  // 'delete'
      break;
    case 111:                       // 'descendant'
      shiftT(111);                  // 'descendant'
      break;
    case 112:                       // 'descendant-or-self'
      shiftT(112);                  // 'descendant-or-self'
      break;
    case 119:                       // 'document'
      shiftT(119);                  // 'document'
      break;
    case 120:                       // 'document-node'
      shiftT(120);                  // 'document-node'
      break;
    case 121:                       // 'element'
      shiftT(121);                  // 'element'
      break;
    case 124:                       // 'empty-sequence'
      shiftT(124);                  // 'empty-sequence'
      break;
    case 129:                       // 'every'
      shiftT(129);                  // 'every'
      break;
    case 134:                       // 'first'
      shiftT(134);                  // 'first'
      break;
    case 135:                       // 'following'
      shiftT(135);                  // 'following'
      break;
    case 136:                       // 'following-sibling'
      shiftT(136);                  // 'following-sibling'
      break;
    case 145:                       // 'function'
      shiftT(145);                  // 'function'
      break;
    case 152:                       // 'if'
      shiftT(152);                  // 'if'
      break;
    case 153:                       // 'import'
      shiftT(153);                  // 'import'
      break;
    case 159:                       // 'insert'
      shiftT(159);                  // 'insert'
      break;
    case 165:                       // 'item'
      shiftT(165);                  // 'item'
      break;
    case 170:                       // 'last'
      shiftT(170);                  // 'last'
      break;
    case 182:                       // 'module'
      shiftT(182);                  // 'module'
      break;
    case 184:                       // 'namespace'
      shiftT(184);                  // 'namespace'
      break;
    case 185:                       // 'namespace-node'
      shiftT(185);                  // 'namespace-node'
      break;
    case 191:                       // 'node'
      shiftT(191);                  // 'node'
      break;
    case 202:                       // 'ordered'
      shiftT(202);                  // 'ordered'
      break;
    case 206:                       // 'parent'
      shiftT(206);                  // 'parent'
      break;
    case 212:                       // 'preceding'
      shiftT(212);                  // 'preceding'
      break;
    case 213:                       // 'preceding-sibling'
      shiftT(213);                  // 'preceding-sibling'
      break;
    case 216:                       // 'processing-instruction'
      shiftT(216);                  // 'processing-instruction'
      break;
    case 218:                       // 'rename'
      shiftT(218);                  // 'rename'
      break;
    case 219:                       // 'replace'
      shiftT(219);                  // 'replace'
      break;
    case 226:                       // 'schema-attribute'
      shiftT(226);                  // 'schema-attribute'
      break;
    case 227:                       // 'schema-element'
      shiftT(227);                  // 'schema-element'
      break;
    case 229:                       // 'self'
      shiftT(229);                  // 'self'
      break;
    case 235:                       // 'some'
      shiftT(235);                  // 'some'
      break;
    case 243:                       // 'switch'
      shiftT(243);                  // 'switch'
      break;
    case 244:                       // 'text'
      shiftT(244);                  // 'text'
      break;
    case 250:                       // 'try'
      shiftT(250);                  // 'try'
      break;
    case 253:                       // 'typeswitch'
      shiftT(253);                  // 'typeswitch'
      break;
    case 256:                       // 'unordered'
      shiftT(256);                  // 'unordered'
      break;
    case 260:                       // 'validate'
      shiftT(260);                  // 'validate'
      break;
    case 262:                       // 'variable'
      shiftT(262);                  // 'variable'
      break;
    case 274:                       // 'xquery'
      shiftT(274);                  // 'xquery'
      break;
    case 72:                        // 'allowing'
      shiftT(72);                   // 'allowing'
      break;
    case 81:                        // 'at'
      shiftT(81);                   // 'at'
      break;
    case 83:                        // 'base-uri'
      shiftT(83);                   // 'base-uri'
      break;
    case 85:                        // 'boundary-space'
      shiftT(85);                   // 'boundary-space'
      break;
    case 86:                        // 'break'
      shiftT(86);                   // 'break'
      break;
    case 91:                        // 'catch'
      shiftT(91);                   // 'catch'
      break;
    case 98:                        // 'construction'
      shiftT(98);                   // 'construction'
      break;
    case 101:                       // 'context'
      shiftT(101);                  // 'context'
      break;
    case 102:                       // 'continue'
      shiftT(102);                  // 'continue'
      break;
    case 104:                       // 'copy-namespaces'
      shiftT(104);                  // 'copy-namespaces'
      break;
    case 106:                       // 'decimal-format'
      shiftT(106);                  // 'decimal-format'
      break;
    case 125:                       // 'encoding'
      shiftT(125);                  // 'encoding'
      break;
    case 132:                       // 'exit'
      shiftT(132);                  // 'exit'
      break;
    case 133:                       // 'external'
      shiftT(133);                  // 'external'
      break;
    case 141:                       // 'ft-option'
      shiftT(141);                  // 'ft-option'
      break;
    case 154:                       // 'in'
      shiftT(154);                  // 'in'
      break;
    case 155:                       // 'index'
      shiftT(155);                  // 'index'
      break;
    case 161:                       // 'integrity'
      shiftT(161);                  // 'integrity'
      break;
    case 171:                       // 'lax'
      shiftT(171);                  // 'lax'
      break;
    case 192:                       // 'nodes'
      shiftT(192);                  // 'nodes'
      break;
    case 199:                       // 'option'
      shiftT(199);                  // 'option'
      break;
    case 203:                       // 'ordering'
      shiftT(203);                  // 'ordering'
      break;
    case 222:                       // 'revalidation'
      shiftT(222);                  // 'revalidation'
      break;
    case 225:                       // 'schema'
      shiftT(225);                  // 'schema'
      break;
    case 228:                       // 'score'
      shiftT(228);                  // 'score'
      break;
    case 234:                       // 'sliding'
      shiftT(234);                  // 'sliding'
      break;
    case 240:                       // 'strict'
      shiftT(240);                  // 'strict'
      break;
    case 251:                       // 'tumbling'
      shiftT(251);                  // 'tumbling'
      break;
    case 252:                       // 'type'
      shiftT(252);                  // 'type'
      break;
    case 257:                       // 'updating'
      shiftT(257);                  // 'updating'
      break;
    case 261:                       // 'value'
      shiftT(261);                  // 'value'
      break;
    case 263:                       // 'version'
      shiftT(263);                  // 'version'
      break;
    case 267:                       // 'while'
      shiftT(267);                  // 'while'
      break;
    case 97:                        // 'constraint'
      shiftT(97);                   // 'constraint'
      break;
    case 176:                       // 'loop'
      shiftT(176);                  // 'loop'
      break;
    case 221:                       // 'returning'
      shiftT(221);                  // 'returning'
      break;
    case 77:                        // 'append'
      shiftT(77);                   // 'append'
      break;
    case 166:                       // 'json'
      shiftT(166);                  // 'json'
      break;
    default:
      shiftT(194);                  // 'object'
    }
  }

  function parse_MainModule()
  {
    eventHandler.startNonterminal("MainModule", e0);
    parse_Prolog();
    whitespace();
    parse_Program();
    eventHandler.endNonterminal("MainModule", e0);
  }

  function parse_Program()
  {
    eventHandler.startNonterminal("Program", e0);
    parse_StatementsAndOptionalExpr();
    eventHandler.endNonterminal("Program", e0);
  }

  function parse_Statements()
  {
    eventHandler.startNonterminal("Statements", e0);
    for (;;)
    {
      lookahead1W(277);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | EOF | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' |
                                    // '..' | '/' | '//' | ';' | '<' | '<!--' | '<?' | '@' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|' | '}'
      switch (l1)
      {
      case 34:                      // '('
        lookahead2W(268);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | ')' | '+' | '-' | '.' |
                                    // '..' | '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
        break;
      case 35:                      // '(#'
        lookahead2(251);            // EQName^Token | S | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' |
                                    // 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
        break;
      case 46:                      // '/'
        lookahead2W(282);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | EOF | '!' | '!=' | '$' | '%' | '(' | '(:' | '*' | '+' |
                                    // ',' | '-' | '.' | '..' | ';' | '<' | '<!--' | '<<' | '<=' | '<?' | '=' | '>' |
                                    // '>=' | '>>' | '@' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'contains' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|' | '|' | '||' | '}'
        break;
      case 47:                      // '//'
        lookahead2W(264);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(:' | '.' | '..' | '<' | '<!--' |
                                    // '<?' | '@' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' |
                                    // 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
        break;
      case 54:                      // '<'
        lookahead2(4);              // QName
        break;
      case 55:                      // '<!--'
        lookahead2(1);              // DirCommentContents
        break;
      case 59:                      // '<?'
        lookahead2(3);              // PITarget
        break;
      case 66:                      // '@'
        lookahead2W(256);           // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
        break;
      case 68:                      // '['
        lookahead2W(271);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | ']' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
        break;
      case 77:                      // 'append'
        lookahead2W(199);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'json' | 'le' | 'lt' | 'mod' | 'ne' | 'or' |
                                    // 'to' | 'treat' | 'union' | '|' | '||' | '}'
        break;
      case 82:                      // 'attribute'
        lookahead2W(280);           // EQName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' |
                                    // '-' | '/' | '//' | '::' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'contains' |
                                    // 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' |
                                    // 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '|' | '||' | '}'
        break;
      case 121:                     // 'element'
        lookahead2W(279);           // EQName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' |
                                    // '-' | '/' | '//' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' |
                                    // 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'contains' |
                                    // 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' |
                                    // 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '|' | '||' | '}'
        break;
      case 132:                     // 'exit'
        lookahead2W(202);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' |
                                    // 'returning' | 'to' | 'treat' | 'union' | '|' | '||' | '}'
        break;
      case 137:                     // 'for'
        lookahead2W(206);           // S^WS | EOF | '!' | '!=' | '#' | '$' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'sliding' |
                                    // 'to' | 'treat' | 'tumbling' | 'union' | '|' | '||' | '}'
        break;
      case 174:                     // 'let'
        lookahead2W(204);           // S^WS | EOF | '!' | '!=' | '#' | '$' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'score' |
                                    // 'to' | 'treat' | 'union' | '|' | '||' | '}'
        break;
      case 218:                     // 'rename'
        lookahead2W(205);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'json' | 'le' | 'lt' | 'mod' | 'ne' | 'node' |
                                    // 'or' | 'to' | 'treat' | 'union' | '|' | '||' | '}'
        break;
      case 219:                     // 'replace'
        lookahead2W(208);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'json' | 'le' | 'lt' | 'mod' | 'ne' | 'node' |
                                    // 'or' | 'to' | 'treat' | 'union' | 'value' | '|' | '||' | '}'
        break;
      case 260:                     // 'validate'
        lookahead2W(209);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'lax' | 'le' | 'lt' | 'mod' | 'ne' | 'or' |
                                    // 'strict' | 'to' | 'treat' | 'type' | 'union' | '{' | '|' | '||' | '}'
        break;
      case 276:                     // '{'
        lookahead2W(276);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|' | '}'
        break;
      case 278:                     // '{|'
        lookahead2W(272);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|' | '|}'
        break;
      case 5:                       // Wildcard
      case 45:                      // '..'
        lookahead2W(185);           // S^WS | EOF | '!' | '!=' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' | ';' | '<' |
                                    // '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' | 'castable' |
                                    // 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' | 'treat' |
                                    // 'union' | '|' | '||' | '}'
        break;
      case 31:                      // '$'
      case 32:                      // '%'
        lookahead2W(254);           // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
        break;
      case 40:                      // '+'
      case 42:                      // '-'
        lookahead2W(266);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
        break;
      case 86:                      // 'break'
      case 102:                     // 'continue'
        lookahead2W(200);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'loop' | 'lt' | 'mod' | 'ne' | 'or' |
                                    // 'to' | 'treat' | 'union' | '|' | '||' | '}'
        break;
      case 110:                     // 'delete'
      case 159:                     // 'insert'
        lookahead2W(207);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'json' | 'le' | 'lt' | 'mod' | 'ne' | 'node' |
                                    // 'nodes' | 'or' | 'to' | 'treat' | 'union' | '|' | '||' | '}'
        break;
      case 184:                     // 'namespace'
      case 216:                     // 'processing-instruction'
        lookahead2W(267);           // NCName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' |
                                    // '-' | '/' | '//' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' |
                                    // 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'contains' |
                                    // 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'last' | 'lax' | 'le' | 'let' |
                                    // 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '|' | '||' | '}'
        break;
      case 103:                     // 'copy'
      case 129:                     // 'every'
      case 235:                     // 'some'
      case 262:                     // 'variable'
        lookahead2W(196);           // S^WS | EOF | '!' | '!=' | '#' | '$' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' |
                                    // 'treat' | 'union' | '|' | '||' | '}'
        break;
      case 8:                       // IntegerLiteral
      case 9:                       // DecimalLiteral
      case 10:                      // DoubleLiteral
      case 11:                      // StringLiteral
      case 44:                      // '.'
        lookahead2W(191);           // S^WS | EOF | '!' | '!=' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' | ';' |
                                    // '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' | 'castable' |
                                    // 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' | 'treat' |
                                    // 'union' | '|' | '||' | '}'
        break;
      case 78:                      // 'array'
      case 124:                     // 'empty-sequence'
      case 165:                     // 'item'
      case 167:                     // 'json-item'
      case 242:                     // 'structured-item'
        lookahead2W(190);           // S^WS | EOF | '!' | '!=' | '#' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' | ';' |
                                    // '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' | 'castable' |
                                    // 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' | 'treat' |
                                    // 'union' | '|' | '||' | '}'
        break;
      case 96:                      // 'comment'
      case 119:                     // 'document'
      case 202:                     // 'ordered'
      case 244:                     // 'text'
      case 250:                     // 'try'
      case 256:                     // 'unordered'
        lookahead2W(203);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' |
                                    // 'treat' | 'union' | '{' | '|' | '||' | '}'
        break;
      case 73:                      // 'ancestor'
      case 74:                      // 'ancestor-or-self'
      case 93:                      // 'child'
      case 111:                     // 'descendant'
      case 112:                     // 'descendant-or-self'
      case 135:                     // 'following'
      case 136:                     // 'following-sibling'
      case 206:                     // 'parent'
      case 212:                     // 'preceding'
      case 213:                     // 'preceding-sibling'
      case 229:                     // 'self'
        lookahead2W(197);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // '::' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' |
                                    // 'treat' | 'union' | '|' | '||' | '}'
        break;
      case 6:                       // EQName^Token
      case 70:                      // 'after'
      case 72:                      // 'allowing'
      case 75:                      // 'and'
      case 79:                      // 'as'
      case 80:                      // 'ascending'
      case 81:                      // 'at'
      case 83:                      // 'base-uri'
      case 84:                      // 'before'
      case 85:                      // 'boundary-space'
      case 88:                      // 'case'
      case 89:                      // 'cast'
      case 90:                      // 'castable'
      case 91:                      // 'catch'
      case 94:                      // 'collation'
      case 97:                      // 'constraint'
      case 98:                      // 'construction'
      case 101:                     // 'context'
      case 104:                     // 'copy-namespaces'
      case 105:                     // 'count'
      case 106:                     // 'decimal-format'
      case 108:                     // 'declare'
      case 109:                     // 'default'
      case 113:                     // 'descending'
      case 118:                     // 'div'
      case 120:                     // 'document-node'
      case 122:                     // 'else'
      case 123:                     // 'empty'
      case 125:                     // 'encoding'
      case 126:                     // 'end'
      case 128:                     // 'eq'
      case 131:                     // 'except'
      case 133:                     // 'external'
      case 134:                     // 'first'
      case 141:                     // 'ft-option'
      case 145:                     // 'function'
      case 146:                     // 'ge'
      case 148:                     // 'group'
      case 150:                     // 'gt'
      case 151:                     // 'idiv'
      case 152:                     // 'if'
      case 153:                     // 'import'
      case 154:                     // 'in'
      case 155:                     // 'index'
      case 160:                     // 'instance'
      case 161:                     // 'integrity'
      case 162:                     // 'intersect'
      case 163:                     // 'into'
      case 164:                     // 'is'
      case 166:                     // 'json'
      case 170:                     // 'last'
      case 171:                     // 'lax'
      case 172:                     // 'le'
      case 176:                     // 'loop'
      case 178:                     // 'lt'
      case 180:                     // 'mod'
      case 181:                     // 'modify'
      case 182:                     // 'module'
      case 185:                     // 'namespace-node'
      case 186:                     // 'ne'
      case 191:                     // 'node'
      case 192:                     // 'nodes'
      case 194:                     // 'object'
      case 198:                     // 'only'
      case 199:                     // 'option'
      case 200:                     // 'or'
      case 201:                     // 'order'
      case 203:                     // 'ordering'
      case 220:                     // 'return'
      case 221:                     // 'returning'
      case 222:                     // 'revalidation'
      case 224:                     // 'satisfies'
      case 225:                     // 'schema'
      case 226:                     // 'schema-attribute'
      case 227:                     // 'schema-element'
      case 228:                     // 'score'
      case 234:                     // 'sliding'
      case 236:                     // 'stable'
      case 237:                     // 'start'
      case 240:                     // 'strict'
      case 243:                     // 'switch'
      case 248:                     // 'to'
      case 249:                     // 'treat'
      case 251:                     // 'tumbling'
      case 252:                     // 'type'
      case 253:                     // 'typeswitch'
      case 254:                     // 'union'
      case 257:                     // 'updating'
      case 261:                     // 'value'
      case 263:                     // 'version'
      case 266:                     // 'where'
      case 267:                     // 'while'
      case 270:                     // 'with'
      case 274:                     // 'xquery'
        lookahead2W(194);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' |
                                    // 'treat' | 'union' | '|' | '||' | '}'
        break;
      default:
        lk = l1;
      }
      if (lk != 25                  // EOF
       && lk != 53                  // ';'
       && lk != 282                 // '}'
       && lk != 12805               // Wildcard EOF
       && lk != 12806               // EQName^Token EOF
       && lk != 12808               // IntegerLiteral EOF
       && lk != 12809               // DecimalLiteral EOF
       && lk != 12810               // DoubleLiteral EOF
       && lk != 12811               // StringLiteral EOF
       && lk != 12844               // '.' EOF
       && lk != 12845               // '..' EOF
       && lk != 12846               // '/' EOF
       && lk != 12870               // 'after' EOF
       && lk != 12872               // 'allowing' EOF
       && lk != 12873               // 'ancestor' EOF
       && lk != 12874               // 'ancestor-or-self' EOF
       && lk != 12875               // 'and' EOF
       && lk != 12877               // 'append' EOF
       && lk != 12878               // 'array' EOF
       && lk != 12879               // 'as' EOF
       && lk != 12880               // 'ascending' EOF
       && lk != 12881               // 'at' EOF
       && lk != 12882               // 'attribute' EOF
       && lk != 12883               // 'base-uri' EOF
       && lk != 12884               // 'before' EOF
       && lk != 12885               // 'boundary-space' EOF
       && lk != 12886               // 'break' EOF
       && lk != 12888               // 'case' EOF
       && lk != 12889               // 'cast' EOF
       && lk != 12890               // 'castable' EOF
       && lk != 12891               // 'catch' EOF
       && lk != 12893               // 'child' EOF
       && lk != 12894               // 'collation' EOF
       && lk != 12896               // 'comment' EOF
       && lk != 12897               // 'constraint' EOF
       && lk != 12898               // 'construction' EOF
       && lk != 12901               // 'context' EOF
       && lk != 12902               // 'continue' EOF
       && lk != 12903               // 'copy' EOF
       && lk != 12904               // 'copy-namespaces' EOF
       && lk != 12905               // 'count' EOF
       && lk != 12906               // 'decimal-format' EOF
       && lk != 12908               // 'declare' EOF
       && lk != 12909               // 'default' EOF
       && lk != 12910               // 'delete' EOF
       && lk != 12911               // 'descendant' EOF
       && lk != 12912               // 'descendant-or-self' EOF
       && lk != 12913               // 'descending' EOF
       && lk != 12918               // 'div' EOF
       && lk != 12919               // 'document' EOF
       && lk != 12920               // 'document-node' EOF
       && lk != 12921               // 'element' EOF
       && lk != 12922               // 'else' EOF
       && lk != 12923               // 'empty' EOF
       && lk != 12924               // 'empty-sequence' EOF
       && lk != 12925               // 'encoding' EOF
       && lk != 12926               // 'end' EOF
       && lk != 12928               // 'eq' EOF
       && lk != 12929               // 'every' EOF
       && lk != 12931               // 'except' EOF
       && lk != 12932               // 'exit' EOF
       && lk != 12933               // 'external' EOF
       && lk != 12934               // 'first' EOF
       && lk != 12935               // 'following' EOF
       && lk != 12936               // 'following-sibling' EOF
       && lk != 12937               // 'for' EOF
       && lk != 12941               // 'ft-option' EOF
       && lk != 12945               // 'function' EOF
       && lk != 12946               // 'ge' EOF
       && lk != 12948               // 'group' EOF
       && lk != 12950               // 'gt' EOF
       && lk != 12951               // 'idiv' EOF
       && lk != 12952               // 'if' EOF
       && lk != 12953               // 'import' EOF
       && lk != 12954               // 'in' EOF
       && lk != 12955               // 'index' EOF
       && lk != 12959               // 'insert' EOF
       && lk != 12960               // 'instance' EOF
       && lk != 12961               // 'integrity' EOF
       && lk != 12962               // 'intersect' EOF
       && lk != 12963               // 'into' EOF
       && lk != 12964               // 'is' EOF
       && lk != 12965               // 'item' EOF
       && lk != 12966               // 'json' EOF
       && lk != 12967               // 'json-item' EOF
       && lk != 12970               // 'last' EOF
       && lk != 12971               // 'lax' EOF
       && lk != 12972               // 'le' EOF
       && lk != 12974               // 'let' EOF
       && lk != 12976               // 'loop' EOF
       && lk != 12978               // 'lt' EOF
       && lk != 12980               // 'mod' EOF
       && lk != 12981               // 'modify' EOF
       && lk != 12982               // 'module' EOF
       && lk != 12984               // 'namespace' EOF
       && lk != 12985               // 'namespace-node' EOF
       && lk != 12986               // 'ne' EOF
       && lk != 12991               // 'node' EOF
       && lk != 12992               // 'nodes' EOF
       && lk != 12994               // 'object' EOF
       && lk != 12998               // 'only' EOF
       && lk != 12999               // 'option' EOF
       && lk != 13000               // 'or' EOF
       && lk != 13001               // 'order' EOF
       && lk != 13002               // 'ordered' EOF
       && lk != 13003               // 'ordering' EOF
       && lk != 13006               // 'parent' EOF
       && lk != 13012               // 'preceding' EOF
       && lk != 13013               // 'preceding-sibling' EOF
       && lk != 13016               // 'processing-instruction' EOF
       && lk != 13018               // 'rename' EOF
       && lk != 13019               // 'replace' EOF
       && lk != 13020               // 'return' EOF
       && lk != 13021               // 'returning' EOF
       && lk != 13022               // 'revalidation' EOF
       && lk != 13024               // 'satisfies' EOF
       && lk != 13025               // 'schema' EOF
       && lk != 13026               // 'schema-attribute' EOF
       && lk != 13027               // 'schema-element' EOF
       && lk != 13028               // 'score' EOF
       && lk != 13029               // 'self' EOF
       && lk != 13034               // 'sliding' EOF
       && lk != 13035               // 'some' EOF
       && lk != 13036               // 'stable' EOF
       && lk != 13037               // 'start' EOF
       && lk != 13040               // 'strict' EOF
       && lk != 13042               // 'structured-item' EOF
       && lk != 13043               // 'switch' EOF
       && lk != 13044               // 'text' EOF
       && lk != 13048               // 'to' EOF
       && lk != 13049               // 'treat' EOF
       && lk != 13050               // 'try' EOF
       && lk != 13051               // 'tumbling' EOF
       && lk != 13052               // 'type' EOF
       && lk != 13053               // 'typeswitch' EOF
       && lk != 13054               // 'union' EOF
       && lk != 13056               // 'unordered' EOF
       && lk != 13057               // 'updating' EOF
       && lk != 13060               // 'validate' EOF
       && lk != 13061               // 'value' EOF
       && lk != 13062               // 'variable' EOF
       && lk != 13063               // 'version' EOF
       && lk != 13066               // 'where' EOF
       && lk != 13067               // 'while' EOF
       && lk != 13070               // 'with' EOF
       && lk != 13074               // 'xquery' EOF
       && lk != 16134               // 'variable' '$'
       && lk != 20997               // Wildcard ','
       && lk != 20998               // EQName^Token ','
       && lk != 21000               // IntegerLiteral ','
       && lk != 21001               // DecimalLiteral ','
       && lk != 21002               // DoubleLiteral ','
       && lk != 21003               // StringLiteral ','
       && lk != 21036               // '.' ','
       && lk != 21037               // '..' ','
       && lk != 21038               // '/' ','
       && lk != 21062               // 'after' ','
       && lk != 21064               // 'allowing' ','
       && lk != 21065               // 'ancestor' ','
       && lk != 21066               // 'ancestor-or-self' ','
       && lk != 21067               // 'and' ','
       && lk != 21069               // 'append' ','
       && lk != 21070               // 'array' ','
       && lk != 21071               // 'as' ','
       && lk != 21072               // 'ascending' ','
       && lk != 21073               // 'at' ','
       && lk != 21074               // 'attribute' ','
       && lk != 21075               // 'base-uri' ','
       && lk != 21076               // 'before' ','
       && lk != 21077               // 'boundary-space' ','
       && lk != 21078               // 'break' ','
       && lk != 21080               // 'case' ','
       && lk != 21081               // 'cast' ','
       && lk != 21082               // 'castable' ','
       && lk != 21083               // 'catch' ','
       && lk != 21085               // 'child' ','
       && lk != 21086               // 'collation' ','
       && lk != 21088               // 'comment' ','
       && lk != 21089               // 'constraint' ','
       && lk != 21090               // 'construction' ','
       && lk != 21093               // 'context' ','
       && lk != 21094               // 'continue' ','
       && lk != 21095               // 'copy' ','
       && lk != 21096               // 'copy-namespaces' ','
       && lk != 21097               // 'count' ','
       && lk != 21098               // 'decimal-format' ','
       && lk != 21100               // 'declare' ','
       && lk != 21101               // 'default' ','
       && lk != 21102               // 'delete' ','
       && lk != 21103               // 'descendant' ','
       && lk != 21104               // 'descendant-or-self' ','
       && lk != 21105               // 'descending' ','
       && lk != 21110               // 'div' ','
       && lk != 21111               // 'document' ','
       && lk != 21112               // 'document-node' ','
       && lk != 21113               // 'element' ','
       && lk != 21114               // 'else' ','
       && lk != 21115               // 'empty' ','
       && lk != 21116               // 'empty-sequence' ','
       && lk != 21117               // 'encoding' ','
       && lk != 21118               // 'end' ','
       && lk != 21120               // 'eq' ','
       && lk != 21121               // 'every' ','
       && lk != 21123               // 'except' ','
       && lk != 21124               // 'exit' ','
       && lk != 21125               // 'external' ','
       && lk != 21126               // 'first' ','
       && lk != 21127               // 'following' ','
       && lk != 21128               // 'following-sibling' ','
       && lk != 21129               // 'for' ','
       && lk != 21133               // 'ft-option' ','
       && lk != 21137               // 'function' ','
       && lk != 21138               // 'ge' ','
       && lk != 21140               // 'group' ','
       && lk != 21142               // 'gt' ','
       && lk != 21143               // 'idiv' ','
       && lk != 21144               // 'if' ','
       && lk != 21145               // 'import' ','
       && lk != 21146               // 'in' ','
       && lk != 21147               // 'index' ','
       && lk != 21151               // 'insert' ','
       && lk != 21152               // 'instance' ','
       && lk != 21153               // 'integrity' ','
       && lk != 21154               // 'intersect' ','
       && lk != 21155               // 'into' ','
       && lk != 21156               // 'is' ','
       && lk != 21157               // 'item' ','
       && lk != 21158               // 'json' ','
       && lk != 21159               // 'json-item' ','
       && lk != 21162               // 'last' ','
       && lk != 21163               // 'lax' ','
       && lk != 21164               // 'le' ','
       && lk != 21166               // 'let' ','
       && lk != 21168               // 'loop' ','
       && lk != 21170               // 'lt' ','
       && lk != 21172               // 'mod' ','
       && lk != 21173               // 'modify' ','
       && lk != 21174               // 'module' ','
       && lk != 21176               // 'namespace' ','
       && lk != 21177               // 'namespace-node' ','
       && lk != 21178               // 'ne' ','
       && lk != 21183               // 'node' ','
       && lk != 21184               // 'nodes' ','
       && lk != 21186               // 'object' ','
       && lk != 21190               // 'only' ','
       && lk != 21191               // 'option' ','
       && lk != 21192               // 'or' ','
       && lk != 21193               // 'order' ','
       && lk != 21194               // 'ordered' ','
       && lk != 21195               // 'ordering' ','
       && lk != 21198               // 'parent' ','
       && lk != 21204               // 'preceding' ','
       && lk != 21205               // 'preceding-sibling' ','
       && lk != 21208               // 'processing-instruction' ','
       && lk != 21210               // 'rename' ','
       && lk != 21211               // 'replace' ','
       && lk != 21212               // 'return' ','
       && lk != 21213               // 'returning' ','
       && lk != 21214               // 'revalidation' ','
       && lk != 21216               // 'satisfies' ','
       && lk != 21217               // 'schema' ','
       && lk != 21218               // 'schema-attribute' ','
       && lk != 21219               // 'schema-element' ','
       && lk != 21220               // 'score' ','
       && lk != 21221               // 'self' ','
       && lk != 21226               // 'sliding' ','
       && lk != 21227               // 'some' ','
       && lk != 21228               // 'stable' ','
       && lk != 21229               // 'start' ','
       && lk != 21232               // 'strict' ','
       && lk != 21234               // 'structured-item' ','
       && lk != 21235               // 'switch' ','
       && lk != 21236               // 'text' ','
       && lk != 21240               // 'to' ','
       && lk != 21241               // 'treat' ','
       && lk != 21242               // 'try' ','
       && lk != 21243               // 'tumbling' ','
       && lk != 21244               // 'type' ','
       && lk != 21245               // 'typeswitch' ','
       && lk != 21246               // 'union' ','
       && lk != 21248               // 'unordered' ','
       && lk != 21249               // 'updating' ','
       && lk != 21252               // 'validate' ','
       && lk != 21253               // 'value' ','
       && lk != 21254               // 'variable' ','
       && lk != 21255               // 'version' ','
       && lk != 21258               // 'where' ','
       && lk != 21259               // 'while' ','
       && lk != 21262               // 'with' ','
       && lk != 21266               // 'xquery' ','
       && lk != 27141               // Wildcard ';'
       && lk != 27142               // EQName^Token ';'
       && lk != 27144               // IntegerLiteral ';'
       && lk != 27145               // DecimalLiteral ';'
       && lk != 27146               // DoubleLiteral ';'
       && lk != 27147               // StringLiteral ';'
       && lk != 27180               // '.' ';'
       && lk != 27181               // '..' ';'
       && lk != 27182               // '/' ';'
       && lk != 27206               // 'after' ';'
       && lk != 27208               // 'allowing' ';'
       && lk != 27209               // 'ancestor' ';'
       && lk != 27210               // 'ancestor-or-self' ';'
       && lk != 27211               // 'and' ';'
       && lk != 27213               // 'append' ';'
       && lk != 27214               // 'array' ';'
       && lk != 27215               // 'as' ';'
       && lk != 27216               // 'ascending' ';'
       && lk != 27217               // 'at' ';'
       && lk != 27218               // 'attribute' ';'
       && lk != 27219               // 'base-uri' ';'
       && lk != 27220               // 'before' ';'
       && lk != 27221               // 'boundary-space' ';'
       && lk != 27222               // 'break' ';'
       && lk != 27224               // 'case' ';'
       && lk != 27225               // 'cast' ';'
       && lk != 27226               // 'castable' ';'
       && lk != 27227               // 'catch' ';'
       && lk != 27229               // 'child' ';'
       && lk != 27230               // 'collation' ';'
       && lk != 27232               // 'comment' ';'
       && lk != 27233               // 'constraint' ';'
       && lk != 27234               // 'construction' ';'
       && lk != 27237               // 'context' ';'
       && lk != 27238               // 'continue' ';'
       && lk != 27239               // 'copy' ';'
       && lk != 27240               // 'copy-namespaces' ';'
       && lk != 27241               // 'count' ';'
       && lk != 27242               // 'decimal-format' ';'
       && lk != 27244               // 'declare' ';'
       && lk != 27245               // 'default' ';'
       && lk != 27246               // 'delete' ';'
       && lk != 27247               // 'descendant' ';'
       && lk != 27248               // 'descendant-or-self' ';'
       && lk != 27249               // 'descending' ';'
       && lk != 27254               // 'div' ';'
       && lk != 27255               // 'document' ';'
       && lk != 27256               // 'document-node' ';'
       && lk != 27257               // 'element' ';'
       && lk != 27258               // 'else' ';'
       && lk != 27259               // 'empty' ';'
       && lk != 27260               // 'empty-sequence' ';'
       && lk != 27261               // 'encoding' ';'
       && lk != 27262               // 'end' ';'
       && lk != 27264               // 'eq' ';'
       && lk != 27265               // 'every' ';'
       && lk != 27267               // 'except' ';'
       && lk != 27268               // 'exit' ';'
       && lk != 27269               // 'external' ';'
       && lk != 27270               // 'first' ';'
       && lk != 27271               // 'following' ';'
       && lk != 27272               // 'following-sibling' ';'
       && lk != 27273               // 'for' ';'
       && lk != 27277               // 'ft-option' ';'
       && lk != 27281               // 'function' ';'
       && lk != 27282               // 'ge' ';'
       && lk != 27284               // 'group' ';'
       && lk != 27286               // 'gt' ';'
       && lk != 27287               // 'idiv' ';'
       && lk != 27288               // 'if' ';'
       && lk != 27289               // 'import' ';'
       && lk != 27290               // 'in' ';'
       && lk != 27291               // 'index' ';'
       && lk != 27295               // 'insert' ';'
       && lk != 27296               // 'instance' ';'
       && lk != 27297               // 'integrity' ';'
       && lk != 27298               // 'intersect' ';'
       && lk != 27299               // 'into' ';'
       && lk != 27300               // 'is' ';'
       && lk != 27301               // 'item' ';'
       && lk != 27302               // 'json' ';'
       && lk != 27303               // 'json-item' ';'
       && lk != 27306               // 'last' ';'
       && lk != 27307               // 'lax' ';'
       && lk != 27308               // 'le' ';'
       && lk != 27310               // 'let' ';'
       && lk != 27312               // 'loop' ';'
       && lk != 27314               // 'lt' ';'
       && lk != 27316               // 'mod' ';'
       && lk != 27317               // 'modify' ';'
       && lk != 27318               // 'module' ';'
       && lk != 27320               // 'namespace' ';'
       && lk != 27321               // 'namespace-node' ';'
       && lk != 27322               // 'ne' ';'
       && lk != 27327               // 'node' ';'
       && lk != 27328               // 'nodes' ';'
       && lk != 27330               // 'object' ';'
       && lk != 27334               // 'only' ';'
       && lk != 27335               // 'option' ';'
       && lk != 27336               // 'or' ';'
       && lk != 27337               // 'order' ';'
       && lk != 27338               // 'ordered' ';'
       && lk != 27339               // 'ordering' ';'
       && lk != 27342               // 'parent' ';'
       && lk != 27348               // 'preceding' ';'
       && lk != 27349               // 'preceding-sibling' ';'
       && lk != 27352               // 'processing-instruction' ';'
       && lk != 27354               // 'rename' ';'
       && lk != 27355               // 'replace' ';'
       && lk != 27356               // 'return' ';'
       && lk != 27357               // 'returning' ';'
       && lk != 27358               // 'revalidation' ';'
       && lk != 27360               // 'satisfies' ';'
       && lk != 27361               // 'schema' ';'
       && lk != 27362               // 'schema-attribute' ';'
       && lk != 27363               // 'schema-element' ';'
       && lk != 27364               // 'score' ';'
       && lk != 27365               // 'self' ';'
       && lk != 27370               // 'sliding' ';'
       && lk != 27371               // 'some' ';'
       && lk != 27372               // 'stable' ';'
       && lk != 27373               // 'start' ';'
       && lk != 27376               // 'strict' ';'
       && lk != 27378               // 'structured-item' ';'
       && lk != 27379               // 'switch' ';'
       && lk != 27380               // 'text' ';'
       && lk != 27384               // 'to' ';'
       && lk != 27385               // 'treat' ';'
       && lk != 27386               // 'try' ';'
       && lk != 27387               // 'tumbling' ';'
       && lk != 27388               // 'type' ';'
       && lk != 27389               // 'typeswitch' ';'
       && lk != 27390               // 'union' ';'
       && lk != 27392               // 'unordered' ';'
       && lk != 27393               // 'updating' ';'
       && lk != 27396               // 'validate' ';'
       && lk != 27397               // 'value' ';'
       && lk != 27398               // 'variable' ';'
       && lk != 27399               // 'version' ';'
       && lk != 27402               // 'where' ';'
       && lk != 27403               // 'while' ';'
       && lk != 27406               // 'with' ';'
       && lk != 27410               // 'xquery' ';'
       && lk != 90198               // 'break' 'loop'
       && lk != 90214               // 'continue' 'loop'
       && lk != 113284              // 'exit' 'returning'
       && lk != 144389              // Wildcard '}'
       && lk != 144390              // EQName^Token '}'
       && lk != 144392              // IntegerLiteral '}'
       && lk != 144393              // DecimalLiteral '}'
       && lk != 144394              // DoubleLiteral '}'
       && lk != 144395              // StringLiteral '}'
       && lk != 144428              // '.' '}'
       && lk != 144429              // '..' '}'
       && lk != 144430              // '/' '}'
       && lk != 144454              // 'after' '}'
       && lk != 144456              // 'allowing' '}'
       && lk != 144457              // 'ancestor' '}'
       && lk != 144458              // 'ancestor-or-self' '}'
       && lk != 144459              // 'and' '}'
       && lk != 144461              // 'append' '}'
       && lk != 144462              // 'array' '}'
       && lk != 144463              // 'as' '}'
       && lk != 144464              // 'ascending' '}'
       && lk != 144465              // 'at' '}'
       && lk != 144466              // 'attribute' '}'
       && lk != 144467              // 'base-uri' '}'
       && lk != 144468              // 'before' '}'
       && lk != 144469              // 'boundary-space' '}'
       && lk != 144470              // 'break' '}'
       && lk != 144472              // 'case' '}'
       && lk != 144473              // 'cast' '}'
       && lk != 144474              // 'castable' '}'
       && lk != 144475              // 'catch' '}'
       && lk != 144477              // 'child' '}'
       && lk != 144478              // 'collation' '}'
       && lk != 144480              // 'comment' '}'
       && lk != 144481              // 'constraint' '}'
       && lk != 144482              // 'construction' '}'
       && lk != 144485              // 'context' '}'
       && lk != 144486              // 'continue' '}'
       && lk != 144487              // 'copy' '}'
       && lk != 144488              // 'copy-namespaces' '}'
       && lk != 144489              // 'count' '}'
       && lk != 144490              // 'decimal-format' '}'
       && lk != 144492              // 'declare' '}'
       && lk != 144493              // 'default' '}'
       && lk != 144494              // 'delete' '}'
       && lk != 144495              // 'descendant' '}'
       && lk != 144496              // 'descendant-or-self' '}'
       && lk != 144497              // 'descending' '}'
       && lk != 144502              // 'div' '}'
       && lk != 144503              // 'document' '}'
       && lk != 144504              // 'document-node' '}'
       && lk != 144505              // 'element' '}'
       && lk != 144506              // 'else' '}'
       && lk != 144507              // 'empty' '}'
       && lk != 144508              // 'empty-sequence' '}'
       && lk != 144509              // 'encoding' '}'
       && lk != 144510              // 'end' '}'
       && lk != 144512              // 'eq' '}'
       && lk != 144513              // 'every' '}'
       && lk != 144515              // 'except' '}'
       && lk != 144516              // 'exit' '}'
       && lk != 144517              // 'external' '}'
       && lk != 144518              // 'first' '}'
       && lk != 144519              // 'following' '}'
       && lk != 144520              // 'following-sibling' '}'
       && lk != 144521              // 'for' '}'
       && lk != 144525              // 'ft-option' '}'
       && lk != 144529              // 'function' '}'
       && lk != 144530              // 'ge' '}'
       && lk != 144532              // 'group' '}'
       && lk != 144534              // 'gt' '}'
       && lk != 144535              // 'idiv' '}'
       && lk != 144536              // 'if' '}'
       && lk != 144537              // 'import' '}'
       && lk != 144538              // 'in' '}'
       && lk != 144539              // 'index' '}'
       && lk != 144543              // 'insert' '}'
       && lk != 144544              // 'instance' '}'
       && lk != 144545              // 'integrity' '}'
       && lk != 144546              // 'intersect' '}'
       && lk != 144547              // 'into' '}'
       && lk != 144548              // 'is' '}'
       && lk != 144549              // 'item' '}'
       && lk != 144550              // 'json' '}'
       && lk != 144551              // 'json-item' '}'
       && lk != 144554              // 'last' '}'
       && lk != 144555              // 'lax' '}'
       && lk != 144556              // 'le' '}'
       && lk != 144558              // 'let' '}'
       && lk != 144560              // 'loop' '}'
       && lk != 144562              // 'lt' '}'
       && lk != 144564              // 'mod' '}'
       && lk != 144565              // 'modify' '}'
       && lk != 144566              // 'module' '}'
       && lk != 144568              // 'namespace' '}'
       && lk != 144569              // 'namespace-node' '}'
       && lk != 144570              // 'ne' '}'
       && lk != 144575              // 'node' '}'
       && lk != 144576              // 'nodes' '}'
       && lk != 144578              // 'object' '}'
       && lk != 144582              // 'only' '}'
       && lk != 144583              // 'option' '}'
       && lk != 144584              // 'or' '}'
       && lk != 144585              // 'order' '}'
       && lk != 144586              // 'ordered' '}'
       && lk != 144587              // 'ordering' '}'
       && lk != 144590              // 'parent' '}'
       && lk != 144596              // 'preceding' '}'
       && lk != 144597              // 'preceding-sibling' '}'
       && lk != 144600              // 'processing-instruction' '}'
       && lk != 144602              // 'rename' '}'
       && lk != 144603              // 'replace' '}'
       && lk != 144604              // 'return' '}'
       && lk != 144605              // 'returning' '}'
       && lk != 144606              // 'revalidation' '}'
       && lk != 144608              // 'satisfies' '}'
       && lk != 144609              // 'schema' '}'
       && lk != 144610              // 'schema-attribute' '}'
       && lk != 144611              // 'schema-element' '}'
       && lk != 144612              // 'score' '}'
       && lk != 144613              // 'self' '}'
       && lk != 144618              // 'sliding' '}'
       && lk != 144619              // 'some' '}'
       && lk != 144620              // 'stable' '}'
       && lk != 144621              // 'start' '}'
       && lk != 144624              // 'strict' '}'
       && lk != 144626              // 'structured-item' '}'
       && lk != 144627              // 'switch' '}'
       && lk != 144628              // 'text' '}'
       && lk != 144632              // 'to' '}'
       && lk != 144633              // 'treat' '}'
       && lk != 144634              // 'try' '}'
       && lk != 144635              // 'tumbling' '}'
       && lk != 144636              // 'type' '}'
       && lk != 144637              // 'typeswitch' '}'
       && lk != 144638              // 'union' '}'
       && lk != 144640              // 'unordered' '}'
       && lk != 144641              // 'updating' '}'
       && lk != 144644              // 'validate' '}'
       && lk != 144645              // 'value' '}'
       && lk != 144646              // 'variable' '}'
       && lk != 144647              // 'version' '}'
       && lk != 144650              // 'where' '}'
       && lk != 144651              // 'while' '}'
       && lk != 144654              // 'with' '}'
       && lk != 144658)             // 'xquery' '}'
      {
        lk = memoized(5, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2;
          try
          {
            try_Statement();
            lk = -1;
          }
          catch (p1A)
          {
            lk = -2;
          }
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(5, e0, lk);
        }
      }
      if (lk != -1
       && lk != 53                  // ';'
       && lk != 16134               // 'variable' '$'
       && lk != 27141               // Wildcard ';'
       && lk != 27142               // EQName^Token ';'
       && lk != 27144               // IntegerLiteral ';'
       && lk != 27145               // DecimalLiteral ';'
       && lk != 27146               // DoubleLiteral ';'
       && lk != 27147               // StringLiteral ';'
       && lk != 27180               // '.' ';'
       && lk != 27181               // '..' ';'
       && lk != 27182               // '/' ';'
       && lk != 27206               // 'after' ';'
       && lk != 27208               // 'allowing' ';'
       && lk != 27209               // 'ancestor' ';'
       && lk != 27210               // 'ancestor-or-self' ';'
       && lk != 27211               // 'and' ';'
       && lk != 27213               // 'append' ';'
       && lk != 27214               // 'array' ';'
       && lk != 27215               // 'as' ';'
       && lk != 27216               // 'ascending' ';'
       && lk != 27217               // 'at' ';'
       && lk != 27218               // 'attribute' ';'
       && lk != 27219               // 'base-uri' ';'
       && lk != 27220               // 'before' ';'
       && lk != 27221               // 'boundary-space' ';'
       && lk != 27222               // 'break' ';'
       && lk != 27224               // 'case' ';'
       && lk != 27225               // 'cast' ';'
       && lk != 27226               // 'castable' ';'
       && lk != 27227               // 'catch' ';'
       && lk != 27229               // 'child' ';'
       && lk != 27230               // 'collation' ';'
       && lk != 27232               // 'comment' ';'
       && lk != 27233               // 'constraint' ';'
       && lk != 27234               // 'construction' ';'
       && lk != 27237               // 'context' ';'
       && lk != 27238               // 'continue' ';'
       && lk != 27239               // 'copy' ';'
       && lk != 27240               // 'copy-namespaces' ';'
       && lk != 27241               // 'count' ';'
       && lk != 27242               // 'decimal-format' ';'
       && lk != 27244               // 'declare' ';'
       && lk != 27245               // 'default' ';'
       && lk != 27246               // 'delete' ';'
       && lk != 27247               // 'descendant' ';'
       && lk != 27248               // 'descendant-or-self' ';'
       && lk != 27249               // 'descending' ';'
       && lk != 27254               // 'div' ';'
       && lk != 27255               // 'document' ';'
       && lk != 27256               // 'document-node' ';'
       && lk != 27257               // 'element' ';'
       && lk != 27258               // 'else' ';'
       && lk != 27259               // 'empty' ';'
       && lk != 27260               // 'empty-sequence' ';'
       && lk != 27261               // 'encoding' ';'
       && lk != 27262               // 'end' ';'
       && lk != 27264               // 'eq' ';'
       && lk != 27265               // 'every' ';'
       && lk != 27267               // 'except' ';'
       && lk != 27268               // 'exit' ';'
       && lk != 27269               // 'external' ';'
       && lk != 27270               // 'first' ';'
       && lk != 27271               // 'following' ';'
       && lk != 27272               // 'following-sibling' ';'
       && lk != 27273               // 'for' ';'
       && lk != 27277               // 'ft-option' ';'
       && lk != 27281               // 'function' ';'
       && lk != 27282               // 'ge' ';'
       && lk != 27284               // 'group' ';'
       && lk != 27286               // 'gt' ';'
       && lk != 27287               // 'idiv' ';'
       && lk != 27288               // 'if' ';'
       && lk != 27289               // 'import' ';'
       && lk != 27290               // 'in' ';'
       && lk != 27291               // 'index' ';'
       && lk != 27295               // 'insert' ';'
       && lk != 27296               // 'instance' ';'
       && lk != 27297               // 'integrity' ';'
       && lk != 27298               // 'intersect' ';'
       && lk != 27299               // 'into' ';'
       && lk != 27300               // 'is' ';'
       && lk != 27301               // 'item' ';'
       && lk != 27302               // 'json' ';'
       && lk != 27303               // 'json-item' ';'
       && lk != 27306               // 'last' ';'
       && lk != 27307               // 'lax' ';'
       && lk != 27308               // 'le' ';'
       && lk != 27310               // 'let' ';'
       && lk != 27312               // 'loop' ';'
       && lk != 27314               // 'lt' ';'
       && lk != 27316               // 'mod' ';'
       && lk != 27317               // 'modify' ';'
       && lk != 27318               // 'module' ';'
       && lk != 27320               // 'namespace' ';'
       && lk != 27321               // 'namespace-node' ';'
       && lk != 27322               // 'ne' ';'
       && lk != 27327               // 'node' ';'
       && lk != 27328               // 'nodes' ';'
       && lk != 27330               // 'object' ';'
       && lk != 27334               // 'only' ';'
       && lk != 27335               // 'option' ';'
       && lk != 27336               // 'or' ';'
       && lk != 27337               // 'order' ';'
       && lk != 27338               // 'ordered' ';'
       && lk != 27339               // 'ordering' ';'
       && lk != 27342               // 'parent' ';'
       && lk != 27348               // 'preceding' ';'
       && lk != 27349               // 'preceding-sibling' ';'
       && lk != 27352               // 'processing-instruction' ';'
       && lk != 27354               // 'rename' ';'
       && lk != 27355               // 'replace' ';'
       && lk != 27356               // 'return' ';'
       && lk != 27357               // 'returning' ';'
       && lk != 27358               // 'revalidation' ';'
       && lk != 27360               // 'satisfies' ';'
       && lk != 27361               // 'schema' ';'
       && lk != 27362               // 'schema-attribute' ';'
       && lk != 27363               // 'schema-element' ';'
       && lk != 27364               // 'score' ';'
       && lk != 27365               // 'self' ';'
       && lk != 27370               // 'sliding' ';'
       && lk != 27371               // 'some' ';'
       && lk != 27372               // 'stable' ';'
       && lk != 27373               // 'start' ';'
       && lk != 27376               // 'strict' ';'
       && lk != 27378               // 'structured-item' ';'
       && lk != 27379               // 'switch' ';'
       && lk != 27380               // 'text' ';'
       && lk != 27384               // 'to' ';'
       && lk != 27385               // 'treat' ';'
       && lk != 27386               // 'try' ';'
       && lk != 27387               // 'tumbling' ';'
       && lk != 27388               // 'type' ';'
       && lk != 27389               // 'typeswitch' ';'
       && lk != 27390               // 'union' ';'
       && lk != 27392               // 'unordered' ';'
       && lk != 27393               // 'updating' ';'
       && lk != 27396               // 'validate' ';'
       && lk != 27397               // 'value' ';'
       && lk != 27398               // 'variable' ';'
       && lk != 27399               // 'version' ';'
       && lk != 27402               // 'where' ';'
       && lk != 27403               // 'while' ';'
       && lk != 27406               // 'with' ';'
       && lk != 27410               // 'xquery' ';'
       && lk != 90198               // 'break' 'loop'
       && lk != 90214               // 'continue' 'loop'
       && lk != 113284)             // 'exit' 'returning'
      {
        break;
      }
      whitespace();
      parse_Statement();
    }
    eventHandler.endNonterminal("Statements", e0);
  }

  function try_Statements()
  {
    for (;;)
    {
      lookahead1W(277);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | EOF | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' |
                                    // '..' | '/' | '//' | ';' | '<' | '<!--' | '<?' | '@' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|' | '}'
      switch (l1)
      {
      case 34:                      // '('
        lookahead2W(268);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | ')' | '+' | '-' | '.' |
                                    // '..' | '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
        break;
      case 35:                      // '(#'
        lookahead2(251);            // EQName^Token | S | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' |
                                    // 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
        break;
      case 46:                      // '/'
        lookahead2W(282);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | EOF | '!' | '!=' | '$' | '%' | '(' | '(:' | '*' | '+' |
                                    // ',' | '-' | '.' | '..' | ';' | '<' | '<!--' | '<<' | '<=' | '<?' | '=' | '>' |
                                    // '>=' | '>>' | '@' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'contains' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|' | '|' | '||' | '}'
        break;
      case 47:                      // '//'
        lookahead2W(264);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(:' | '.' | '..' | '<' | '<!--' |
                                    // '<?' | '@' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' |
                                    // 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
        break;
      case 54:                      // '<'
        lookahead2(4);              // QName
        break;
      case 55:                      // '<!--'
        lookahead2(1);              // DirCommentContents
        break;
      case 59:                      // '<?'
        lookahead2(3);              // PITarget
        break;
      case 66:                      // '@'
        lookahead2W(256);           // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
        break;
      case 68:                      // '['
        lookahead2W(271);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | ']' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
        break;
      case 77:                      // 'append'
        lookahead2W(199);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'json' | 'le' | 'lt' | 'mod' | 'ne' | 'or' |
                                    // 'to' | 'treat' | 'union' | '|' | '||' | '}'
        break;
      case 82:                      // 'attribute'
        lookahead2W(280);           // EQName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' |
                                    // '-' | '/' | '//' | '::' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'contains' |
                                    // 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' |
                                    // 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '|' | '||' | '}'
        break;
      case 121:                     // 'element'
        lookahead2W(279);           // EQName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' |
                                    // '-' | '/' | '//' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' |
                                    // 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'contains' |
                                    // 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' |
                                    // 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '|' | '||' | '}'
        break;
      case 132:                     // 'exit'
        lookahead2W(202);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' |
                                    // 'returning' | 'to' | 'treat' | 'union' | '|' | '||' | '}'
        break;
      case 137:                     // 'for'
        lookahead2W(206);           // S^WS | EOF | '!' | '!=' | '#' | '$' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'sliding' |
                                    // 'to' | 'treat' | 'tumbling' | 'union' | '|' | '||' | '}'
        break;
      case 174:                     // 'let'
        lookahead2W(204);           // S^WS | EOF | '!' | '!=' | '#' | '$' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'score' |
                                    // 'to' | 'treat' | 'union' | '|' | '||' | '}'
        break;
      case 218:                     // 'rename'
        lookahead2W(205);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'json' | 'le' | 'lt' | 'mod' | 'ne' | 'node' |
                                    // 'or' | 'to' | 'treat' | 'union' | '|' | '||' | '}'
        break;
      case 219:                     // 'replace'
        lookahead2W(208);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'json' | 'le' | 'lt' | 'mod' | 'ne' | 'node' |
                                    // 'or' | 'to' | 'treat' | 'union' | 'value' | '|' | '||' | '}'
        break;
      case 260:                     // 'validate'
        lookahead2W(209);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'lax' | 'le' | 'lt' | 'mod' | 'ne' | 'or' |
                                    // 'strict' | 'to' | 'treat' | 'type' | 'union' | '{' | '|' | '||' | '}'
        break;
      case 276:                     // '{'
        lookahead2W(276);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|' | '}'
        break;
      case 278:                     // '{|'
        lookahead2W(272);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|' | '|}'
        break;
      case 5:                       // Wildcard
      case 45:                      // '..'
        lookahead2W(185);           // S^WS | EOF | '!' | '!=' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' | ';' | '<' |
                                    // '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' | 'castable' |
                                    // 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' | 'treat' |
                                    // 'union' | '|' | '||' | '}'
        break;
      case 31:                      // '$'
      case 32:                      // '%'
        lookahead2W(254);           // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
        break;
      case 40:                      // '+'
      case 42:                      // '-'
        lookahead2W(266);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
        break;
      case 86:                      // 'break'
      case 102:                     // 'continue'
        lookahead2W(200);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'loop' | 'lt' | 'mod' | 'ne' | 'or' |
                                    // 'to' | 'treat' | 'union' | '|' | '||' | '}'
        break;
      case 110:                     // 'delete'
      case 159:                     // 'insert'
        lookahead2W(207);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'json' | 'le' | 'lt' | 'mod' | 'ne' | 'node' |
                                    // 'nodes' | 'or' | 'to' | 'treat' | 'union' | '|' | '||' | '}'
        break;
      case 184:                     // 'namespace'
      case 216:                     // 'processing-instruction'
        lookahead2W(267);           // NCName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' |
                                    // '-' | '/' | '//' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' |
                                    // 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'contains' |
                                    // 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'last' | 'lax' | 'le' | 'let' |
                                    // 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' | '|' | '||' | '}'
        break;
      case 103:                     // 'copy'
      case 129:                     // 'every'
      case 235:                     // 'some'
      case 262:                     // 'variable'
        lookahead2W(196);           // S^WS | EOF | '!' | '!=' | '#' | '$' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' |
                                    // 'treat' | 'union' | '|' | '||' | '}'
        break;
      case 8:                       // IntegerLiteral
      case 9:                       // DecimalLiteral
      case 10:                      // DoubleLiteral
      case 11:                      // StringLiteral
      case 44:                      // '.'
        lookahead2W(191);           // S^WS | EOF | '!' | '!=' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' | ';' |
                                    // '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' | 'castable' |
                                    // 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' | 'treat' |
                                    // 'union' | '|' | '||' | '}'
        break;
      case 78:                      // 'array'
      case 124:                     // 'empty-sequence'
      case 165:                     // 'item'
      case 167:                     // 'json-item'
      case 242:                     // 'structured-item'
        lookahead2W(190);           // S^WS | EOF | '!' | '!=' | '#' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' | ';' |
                                    // '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' | 'castable' |
                                    // 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' | 'treat' |
                                    // 'union' | '|' | '||' | '}'
        break;
      case 96:                      // 'comment'
      case 119:                     // 'document'
      case 202:                     // 'ordered'
      case 244:                     // 'text'
      case 250:                     // 'try'
      case 256:                     // 'unordered'
        lookahead2W(203);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' |
                                    // 'treat' | 'union' | '{' | '|' | '||' | '}'
        break;
      case 73:                      // 'ancestor'
      case 74:                      // 'ancestor-or-self'
      case 93:                      // 'child'
      case 111:                     // 'descendant'
      case 112:                     // 'descendant-or-self'
      case 135:                     // 'following'
      case 136:                     // 'following-sibling'
      case 206:                     // 'parent'
      case 212:                     // 'preceding'
      case 213:                     // 'preceding-sibling'
      case 229:                     // 'self'
        lookahead2W(197);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // '::' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' |
                                    // 'treat' | 'union' | '|' | '||' | '}'
        break;
      case 6:                       // EQName^Token
      case 70:                      // 'after'
      case 72:                      // 'allowing'
      case 75:                      // 'and'
      case 79:                      // 'as'
      case 80:                      // 'ascending'
      case 81:                      // 'at'
      case 83:                      // 'base-uri'
      case 84:                      // 'before'
      case 85:                      // 'boundary-space'
      case 88:                      // 'case'
      case 89:                      // 'cast'
      case 90:                      // 'castable'
      case 91:                      // 'catch'
      case 94:                      // 'collation'
      case 97:                      // 'constraint'
      case 98:                      // 'construction'
      case 101:                     // 'context'
      case 104:                     // 'copy-namespaces'
      case 105:                     // 'count'
      case 106:                     // 'decimal-format'
      case 108:                     // 'declare'
      case 109:                     // 'default'
      case 113:                     // 'descending'
      case 118:                     // 'div'
      case 120:                     // 'document-node'
      case 122:                     // 'else'
      case 123:                     // 'empty'
      case 125:                     // 'encoding'
      case 126:                     // 'end'
      case 128:                     // 'eq'
      case 131:                     // 'except'
      case 133:                     // 'external'
      case 134:                     // 'first'
      case 141:                     // 'ft-option'
      case 145:                     // 'function'
      case 146:                     // 'ge'
      case 148:                     // 'group'
      case 150:                     // 'gt'
      case 151:                     // 'idiv'
      case 152:                     // 'if'
      case 153:                     // 'import'
      case 154:                     // 'in'
      case 155:                     // 'index'
      case 160:                     // 'instance'
      case 161:                     // 'integrity'
      case 162:                     // 'intersect'
      case 163:                     // 'into'
      case 164:                     // 'is'
      case 166:                     // 'json'
      case 170:                     // 'last'
      case 171:                     // 'lax'
      case 172:                     // 'le'
      case 176:                     // 'loop'
      case 178:                     // 'lt'
      case 180:                     // 'mod'
      case 181:                     // 'modify'
      case 182:                     // 'module'
      case 185:                     // 'namespace-node'
      case 186:                     // 'ne'
      case 191:                     // 'node'
      case 192:                     // 'nodes'
      case 194:                     // 'object'
      case 198:                     // 'only'
      case 199:                     // 'option'
      case 200:                     // 'or'
      case 201:                     // 'order'
      case 203:                     // 'ordering'
      case 220:                     // 'return'
      case 221:                     // 'returning'
      case 222:                     // 'revalidation'
      case 224:                     // 'satisfies'
      case 225:                     // 'schema'
      case 226:                     // 'schema-attribute'
      case 227:                     // 'schema-element'
      case 228:                     // 'score'
      case 234:                     // 'sliding'
      case 236:                     // 'stable'
      case 237:                     // 'start'
      case 240:                     // 'strict'
      case 243:                     // 'switch'
      case 248:                     // 'to'
      case 249:                     // 'treat'
      case 251:                     // 'tumbling'
      case 252:                     // 'type'
      case 253:                     // 'typeswitch'
      case 254:                     // 'union'
      case 257:                     // 'updating'
      case 261:                     // 'value'
      case 263:                     // 'version'
      case 266:                     // 'where'
      case 267:                     // 'while'
      case 270:                     // 'with'
      case 274:                     // 'xquery'
        lookahead2W(194);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' |
                                    // 'treat' | 'union' | '|' | '||' | '}'
        break;
      default:
        lk = l1;
      }
      if (lk != 25                  // EOF
       && lk != 53                  // ';'
       && lk != 282                 // '}'
       && lk != 12805               // Wildcard EOF
       && lk != 12806               // EQName^Token EOF
       && lk != 12808               // IntegerLiteral EOF
       && lk != 12809               // DecimalLiteral EOF
       && lk != 12810               // DoubleLiteral EOF
       && lk != 12811               // StringLiteral EOF
       && lk != 12844               // '.' EOF
       && lk != 12845               // '..' EOF
       && lk != 12846               // '/' EOF
       && lk != 12870               // 'after' EOF
       && lk != 12872               // 'allowing' EOF
       && lk != 12873               // 'ancestor' EOF
       && lk != 12874               // 'ancestor-or-self' EOF
       && lk != 12875               // 'and' EOF
       && lk != 12877               // 'append' EOF
       && lk != 12878               // 'array' EOF
       && lk != 12879               // 'as' EOF
       && lk != 12880               // 'ascending' EOF
       && lk != 12881               // 'at' EOF
       && lk != 12882               // 'attribute' EOF
       && lk != 12883               // 'base-uri' EOF
       && lk != 12884               // 'before' EOF
       && lk != 12885               // 'boundary-space' EOF
       && lk != 12886               // 'break' EOF
       && lk != 12888               // 'case' EOF
       && lk != 12889               // 'cast' EOF
       && lk != 12890               // 'castable' EOF
       && lk != 12891               // 'catch' EOF
       && lk != 12893               // 'child' EOF
       && lk != 12894               // 'collation' EOF
       && lk != 12896               // 'comment' EOF
       && lk != 12897               // 'constraint' EOF
       && lk != 12898               // 'construction' EOF
       && lk != 12901               // 'context' EOF
       && lk != 12902               // 'continue' EOF
       && lk != 12903               // 'copy' EOF
       && lk != 12904               // 'copy-namespaces' EOF
       && lk != 12905               // 'count' EOF
       && lk != 12906               // 'decimal-format' EOF
       && lk != 12908               // 'declare' EOF
       && lk != 12909               // 'default' EOF
       && lk != 12910               // 'delete' EOF
       && lk != 12911               // 'descendant' EOF
       && lk != 12912               // 'descendant-or-self' EOF
       && lk != 12913               // 'descending' EOF
       && lk != 12918               // 'div' EOF
       && lk != 12919               // 'document' EOF
       && lk != 12920               // 'document-node' EOF
       && lk != 12921               // 'element' EOF
       && lk != 12922               // 'else' EOF
       && lk != 12923               // 'empty' EOF
       && lk != 12924               // 'empty-sequence' EOF
       && lk != 12925               // 'encoding' EOF
       && lk != 12926               // 'end' EOF
       && lk != 12928               // 'eq' EOF
       && lk != 12929               // 'every' EOF
       && lk != 12931               // 'except' EOF
       && lk != 12932               // 'exit' EOF
       && lk != 12933               // 'external' EOF
       && lk != 12934               // 'first' EOF
       && lk != 12935               // 'following' EOF
       && lk != 12936               // 'following-sibling' EOF
       && lk != 12937               // 'for' EOF
       && lk != 12941               // 'ft-option' EOF
       && lk != 12945               // 'function' EOF
       && lk != 12946               // 'ge' EOF
       && lk != 12948               // 'group' EOF
       && lk != 12950               // 'gt' EOF
       && lk != 12951               // 'idiv' EOF
       && lk != 12952               // 'if' EOF
       && lk != 12953               // 'import' EOF
       && lk != 12954               // 'in' EOF
       && lk != 12955               // 'index' EOF
       && lk != 12959               // 'insert' EOF
       && lk != 12960               // 'instance' EOF
       && lk != 12961               // 'integrity' EOF
       && lk != 12962               // 'intersect' EOF
       && lk != 12963               // 'into' EOF
       && lk != 12964               // 'is' EOF
       && lk != 12965               // 'item' EOF
       && lk != 12966               // 'json' EOF
       && lk != 12967               // 'json-item' EOF
       && lk != 12970               // 'last' EOF
       && lk != 12971               // 'lax' EOF
       && lk != 12972               // 'le' EOF
       && lk != 12974               // 'let' EOF
       && lk != 12976               // 'loop' EOF
       && lk != 12978               // 'lt' EOF
       && lk != 12980               // 'mod' EOF
       && lk != 12981               // 'modify' EOF
       && lk != 12982               // 'module' EOF
       && lk != 12984               // 'namespace' EOF
       && lk != 12985               // 'namespace-node' EOF
       && lk != 12986               // 'ne' EOF
       && lk != 12991               // 'node' EOF
       && lk != 12992               // 'nodes' EOF
       && lk != 12994               // 'object' EOF
       && lk != 12998               // 'only' EOF
       && lk != 12999               // 'option' EOF
       && lk != 13000               // 'or' EOF
       && lk != 13001               // 'order' EOF
       && lk != 13002               // 'ordered' EOF
       && lk != 13003               // 'ordering' EOF
       && lk != 13006               // 'parent' EOF
       && lk != 13012               // 'preceding' EOF
       && lk != 13013               // 'preceding-sibling' EOF
       && lk != 13016               // 'processing-instruction' EOF
       && lk != 13018               // 'rename' EOF
       && lk != 13019               // 'replace' EOF
       && lk != 13020               // 'return' EOF
       && lk != 13021               // 'returning' EOF
       && lk != 13022               // 'revalidation' EOF
       && lk != 13024               // 'satisfies' EOF
       && lk != 13025               // 'schema' EOF
       && lk != 13026               // 'schema-attribute' EOF
       && lk != 13027               // 'schema-element' EOF
       && lk != 13028               // 'score' EOF
       && lk != 13029               // 'self' EOF
       && lk != 13034               // 'sliding' EOF
       && lk != 13035               // 'some' EOF
       && lk != 13036               // 'stable' EOF
       && lk != 13037               // 'start' EOF
       && lk != 13040               // 'strict' EOF
       && lk != 13042               // 'structured-item' EOF
       && lk != 13043               // 'switch' EOF
       && lk != 13044               // 'text' EOF
       && lk != 13048               // 'to' EOF
       && lk != 13049               // 'treat' EOF
       && lk != 13050               // 'try' EOF
       && lk != 13051               // 'tumbling' EOF
       && lk != 13052               // 'type' EOF
       && lk != 13053               // 'typeswitch' EOF
       && lk != 13054               // 'union' EOF
       && lk != 13056               // 'unordered' EOF
       && lk != 13057               // 'updating' EOF
       && lk != 13060               // 'validate' EOF
       && lk != 13061               // 'value' EOF
       && lk != 13062               // 'variable' EOF
       && lk != 13063               // 'version' EOF
       && lk != 13066               // 'where' EOF
       && lk != 13067               // 'while' EOF
       && lk != 13070               // 'with' EOF
       && lk != 13074               // 'xquery' EOF
       && lk != 16134               // 'variable' '$'
       && lk != 20997               // Wildcard ','
       && lk != 20998               // EQName^Token ','
       && lk != 21000               // IntegerLiteral ','
       && lk != 21001               // DecimalLiteral ','
       && lk != 21002               // DoubleLiteral ','
       && lk != 21003               // StringLiteral ','
       && lk != 21036               // '.' ','
       && lk != 21037               // '..' ','
       && lk != 21038               // '/' ','
       && lk != 21062               // 'after' ','
       && lk != 21064               // 'allowing' ','
       && lk != 21065               // 'ancestor' ','
       && lk != 21066               // 'ancestor-or-self' ','
       && lk != 21067               // 'and' ','
       && lk != 21069               // 'append' ','
       && lk != 21070               // 'array' ','
       && lk != 21071               // 'as' ','
       && lk != 21072               // 'ascending' ','
       && lk != 21073               // 'at' ','
       && lk != 21074               // 'attribute' ','
       && lk != 21075               // 'base-uri' ','
       && lk != 21076               // 'before' ','
       && lk != 21077               // 'boundary-space' ','
       && lk != 21078               // 'break' ','
       && lk != 21080               // 'case' ','
       && lk != 21081               // 'cast' ','
       && lk != 21082               // 'castable' ','
       && lk != 21083               // 'catch' ','
       && lk != 21085               // 'child' ','
       && lk != 21086               // 'collation' ','
       && lk != 21088               // 'comment' ','
       && lk != 21089               // 'constraint' ','
       && lk != 21090               // 'construction' ','
       && lk != 21093               // 'context' ','
       && lk != 21094               // 'continue' ','
       && lk != 21095               // 'copy' ','
       && lk != 21096               // 'copy-namespaces' ','
       && lk != 21097               // 'count' ','
       && lk != 21098               // 'decimal-format' ','
       && lk != 21100               // 'declare' ','
       && lk != 21101               // 'default' ','
       && lk != 21102               // 'delete' ','
       && lk != 21103               // 'descendant' ','
       && lk != 21104               // 'descendant-or-self' ','
       && lk != 21105               // 'descending' ','
       && lk != 21110               // 'div' ','
       && lk != 21111               // 'document' ','
       && lk != 21112               // 'document-node' ','
       && lk != 21113               // 'element' ','
       && lk != 21114               // 'else' ','
       && lk != 21115               // 'empty' ','
       && lk != 21116               // 'empty-sequence' ','
       && lk != 21117               // 'encoding' ','
       && lk != 21118               // 'end' ','
       && lk != 21120               // 'eq' ','
       && lk != 21121               // 'every' ','
       && lk != 21123               // 'except' ','
       && lk != 21124               // 'exit' ','
       && lk != 21125               // 'external' ','
       && lk != 21126               // 'first' ','
       && lk != 21127               // 'following' ','
       && lk != 21128               // 'following-sibling' ','
       && lk != 21129               // 'for' ','
       && lk != 21133               // 'ft-option' ','
       && lk != 21137               // 'function' ','
       && lk != 21138               // 'ge' ','
       && lk != 21140               // 'group' ','
       && lk != 21142               // 'gt' ','
       && lk != 21143               // 'idiv' ','
       && lk != 21144               // 'if' ','
       && lk != 21145               // 'import' ','
       && lk != 21146               // 'in' ','
       && lk != 21147               // 'index' ','
       && lk != 21151               // 'insert' ','
       && lk != 21152               // 'instance' ','
       && lk != 21153               // 'integrity' ','
       && lk != 21154               // 'intersect' ','
       && lk != 21155               // 'into' ','
       && lk != 21156               // 'is' ','
       && lk != 21157               // 'item' ','
       && lk != 21158               // 'json' ','
       && lk != 21159               // 'json-item' ','
       && lk != 21162               // 'last' ','
       && lk != 21163               // 'lax' ','
       && lk != 21164               // 'le' ','
       && lk != 21166               // 'let' ','
       && lk != 21168               // 'loop' ','
       && lk != 21170               // 'lt' ','
       && lk != 21172               // 'mod' ','
       && lk != 21173               // 'modify' ','
       && lk != 21174               // 'module' ','
       && lk != 21176               // 'namespace' ','
       && lk != 21177               // 'namespace-node' ','
       && lk != 21178               // 'ne' ','
       && lk != 21183               // 'node' ','
       && lk != 21184               // 'nodes' ','
       && lk != 21186               // 'object' ','
       && lk != 21190               // 'only' ','
       && lk != 21191               // 'option' ','
       && lk != 21192               // 'or' ','
       && lk != 21193               // 'order' ','
       && lk != 21194               // 'ordered' ','
       && lk != 21195               // 'ordering' ','
       && lk != 21198               // 'parent' ','
       && lk != 21204               // 'preceding' ','
       && lk != 21205               // 'preceding-sibling' ','
       && lk != 21208               // 'processing-instruction' ','
       && lk != 21210               // 'rename' ','
       && lk != 21211               // 'replace' ','
       && lk != 21212               // 'return' ','
       && lk != 21213               // 'returning' ','
       && lk != 21214               // 'revalidation' ','
       && lk != 21216               // 'satisfies' ','
       && lk != 21217               // 'schema' ','
       && lk != 21218               // 'schema-attribute' ','
       && lk != 21219               // 'schema-element' ','
       && lk != 21220               // 'score' ','
       && lk != 21221               // 'self' ','
       && lk != 21226               // 'sliding' ','
       && lk != 21227               // 'some' ','
       && lk != 21228               // 'stable' ','
       && lk != 21229               // 'start' ','
       && lk != 21232               // 'strict' ','
       && lk != 21234               // 'structured-item' ','
       && lk != 21235               // 'switch' ','
       && lk != 21236               // 'text' ','
       && lk != 21240               // 'to' ','
       && lk != 21241               // 'treat' ','
       && lk != 21242               // 'try' ','
       && lk != 21243               // 'tumbling' ','
       && lk != 21244               // 'type' ','
       && lk != 21245               // 'typeswitch' ','
       && lk != 21246               // 'union' ','
       && lk != 21248               // 'unordered' ','
       && lk != 21249               // 'updating' ','
       && lk != 21252               // 'validate' ','
       && lk != 21253               // 'value' ','
       && lk != 21254               // 'variable' ','
       && lk != 21255               // 'version' ','
       && lk != 21258               // 'where' ','
       && lk != 21259               // 'while' ','
       && lk != 21262               // 'with' ','
       && lk != 21266               // 'xquery' ','
       && lk != 27141               // Wildcard ';'
       && lk != 27142               // EQName^Token ';'
       && lk != 27144               // IntegerLiteral ';'
       && lk != 27145               // DecimalLiteral ';'
       && lk != 27146               // DoubleLiteral ';'
       && lk != 27147               // StringLiteral ';'
       && lk != 27180               // '.' ';'
       && lk != 27181               // '..' ';'
       && lk != 27182               // '/' ';'
       && lk != 27206               // 'after' ';'
       && lk != 27208               // 'allowing' ';'
       && lk != 27209               // 'ancestor' ';'
       && lk != 27210               // 'ancestor-or-self' ';'
       && lk != 27211               // 'and' ';'
       && lk != 27213               // 'append' ';'
       && lk != 27214               // 'array' ';'
       && lk != 27215               // 'as' ';'
       && lk != 27216               // 'ascending' ';'
       && lk != 27217               // 'at' ';'
       && lk != 27218               // 'attribute' ';'
       && lk != 27219               // 'base-uri' ';'
       && lk != 27220               // 'before' ';'
       && lk != 27221               // 'boundary-space' ';'
       && lk != 27222               // 'break' ';'
       && lk != 27224               // 'case' ';'
       && lk != 27225               // 'cast' ';'
       && lk != 27226               // 'castable' ';'
       && lk != 27227               // 'catch' ';'
       && lk != 27229               // 'child' ';'
       && lk != 27230               // 'collation' ';'
       && lk != 27232               // 'comment' ';'
       && lk != 27233               // 'constraint' ';'
       && lk != 27234               // 'construction' ';'
       && lk != 27237               // 'context' ';'
       && lk != 27238               // 'continue' ';'
       && lk != 27239               // 'copy' ';'
       && lk != 27240               // 'copy-namespaces' ';'
       && lk != 27241               // 'count' ';'
       && lk != 27242               // 'decimal-format' ';'
       && lk != 27244               // 'declare' ';'
       && lk != 27245               // 'default' ';'
       && lk != 27246               // 'delete' ';'
       && lk != 27247               // 'descendant' ';'
       && lk != 27248               // 'descendant-or-self' ';'
       && lk != 27249               // 'descending' ';'
       && lk != 27254               // 'div' ';'
       && lk != 27255               // 'document' ';'
       && lk != 27256               // 'document-node' ';'
       && lk != 27257               // 'element' ';'
       && lk != 27258               // 'else' ';'
       && lk != 27259               // 'empty' ';'
       && lk != 27260               // 'empty-sequence' ';'
       && lk != 27261               // 'encoding' ';'
       && lk != 27262               // 'end' ';'
       && lk != 27264               // 'eq' ';'
       && lk != 27265               // 'every' ';'
       && lk != 27267               // 'except' ';'
       && lk != 27268               // 'exit' ';'
       && lk != 27269               // 'external' ';'
       && lk != 27270               // 'first' ';'
       && lk != 27271               // 'following' ';'
       && lk != 27272               // 'following-sibling' ';'
       && lk != 27273               // 'for' ';'
       && lk != 27277               // 'ft-option' ';'
       && lk != 27281               // 'function' ';'
       && lk != 27282               // 'ge' ';'
       && lk != 27284               // 'group' ';'
       && lk != 27286               // 'gt' ';'
       && lk != 27287               // 'idiv' ';'
       && lk != 27288               // 'if' ';'
       && lk != 27289               // 'import' ';'
       && lk != 27290               // 'in' ';'
       && lk != 27291               // 'index' ';'
       && lk != 27295               // 'insert' ';'
       && lk != 27296               // 'instance' ';'
       && lk != 27297               // 'integrity' ';'
       && lk != 27298               // 'intersect' ';'
       && lk != 27299               // 'into' ';'
       && lk != 27300               // 'is' ';'
       && lk != 27301               // 'item' ';'
       && lk != 27302               // 'json' ';'
       && lk != 27303               // 'json-item' ';'
       && lk != 27306               // 'last' ';'
       && lk != 27307               // 'lax' ';'
       && lk != 27308               // 'le' ';'
       && lk != 27310               // 'let' ';'
       && lk != 27312               // 'loop' ';'
       && lk != 27314               // 'lt' ';'
       && lk != 27316               // 'mod' ';'
       && lk != 27317               // 'modify' ';'
       && lk != 27318               // 'module' ';'
       && lk != 27320               // 'namespace' ';'
       && lk != 27321               // 'namespace-node' ';'
       && lk != 27322               // 'ne' ';'
       && lk != 27327               // 'node' ';'
       && lk != 27328               // 'nodes' ';'
       && lk != 27330               // 'object' ';'
       && lk != 27334               // 'only' ';'
       && lk != 27335               // 'option' ';'
       && lk != 27336               // 'or' ';'
       && lk != 27337               // 'order' ';'
       && lk != 27338               // 'ordered' ';'
       && lk != 27339               // 'ordering' ';'
       && lk != 27342               // 'parent' ';'
       && lk != 27348               // 'preceding' ';'
       && lk != 27349               // 'preceding-sibling' ';'
       && lk != 27352               // 'processing-instruction' ';'
       && lk != 27354               // 'rename' ';'
       && lk != 27355               // 'replace' ';'
       && lk != 27356               // 'return' ';'
       && lk != 27357               // 'returning' ';'
       && lk != 27358               // 'revalidation' ';'
       && lk != 27360               // 'satisfies' ';'
       && lk != 27361               // 'schema' ';'
       && lk != 27362               // 'schema-attribute' ';'
       && lk != 27363               // 'schema-element' ';'
       && lk != 27364               // 'score' ';'
       && lk != 27365               // 'self' ';'
       && lk != 27370               // 'sliding' ';'
       && lk != 27371               // 'some' ';'
       && lk != 27372               // 'stable' ';'
       && lk != 27373               // 'start' ';'
       && lk != 27376               // 'strict' ';'
       && lk != 27378               // 'structured-item' ';'
       && lk != 27379               // 'switch' ';'
       && lk != 27380               // 'text' ';'
       && lk != 27384               // 'to' ';'
       && lk != 27385               // 'treat' ';'
       && lk != 27386               // 'try' ';'
       && lk != 27387               // 'tumbling' ';'
       && lk != 27388               // 'type' ';'
       && lk != 27389               // 'typeswitch' ';'
       && lk != 27390               // 'union' ';'
       && lk != 27392               // 'unordered' ';'
       && lk != 27393               // 'updating' ';'
       && lk != 27396               // 'validate' ';'
       && lk != 27397               // 'value' ';'
       && lk != 27398               // 'variable' ';'
       && lk != 27399               // 'version' ';'
       && lk != 27402               // 'where' ';'
       && lk != 27403               // 'while' ';'
       && lk != 27406               // 'with' ';'
       && lk != 27410               // 'xquery' ';'
       && lk != 90198               // 'break' 'loop'
       && lk != 90214               // 'continue' 'loop'
       && lk != 113284              // 'exit' 'returning'
       && lk != 144389              // Wildcard '}'
       && lk != 144390              // EQName^Token '}'
       && lk != 144392              // IntegerLiteral '}'
       && lk != 144393              // DecimalLiteral '}'
       && lk != 144394              // DoubleLiteral '}'
       && lk != 144395              // StringLiteral '}'
       && lk != 144428              // '.' '}'
       && lk != 144429              // '..' '}'
       && lk != 144430              // '/' '}'
       && lk != 144454              // 'after' '}'
       && lk != 144456              // 'allowing' '}'
       && lk != 144457              // 'ancestor' '}'
       && lk != 144458              // 'ancestor-or-self' '}'
       && lk != 144459              // 'and' '}'
       && lk != 144461              // 'append' '}'
       && lk != 144462              // 'array' '}'
       && lk != 144463              // 'as' '}'
       && lk != 144464              // 'ascending' '}'
       && lk != 144465              // 'at' '}'
       && lk != 144466              // 'attribute' '}'
       && lk != 144467              // 'base-uri' '}'
       && lk != 144468              // 'before' '}'
       && lk != 144469              // 'boundary-space' '}'
       && lk != 144470              // 'break' '}'
       && lk != 144472              // 'case' '}'
       && lk != 144473              // 'cast' '}'
       && lk != 144474              // 'castable' '}'
       && lk != 144475              // 'catch' '}'
       && lk != 144477              // 'child' '}'
       && lk != 144478              // 'collation' '}'
       && lk != 144480              // 'comment' '}'
       && lk != 144481              // 'constraint' '}'
       && lk != 144482              // 'construction' '}'
       && lk != 144485              // 'context' '}'
       && lk != 144486              // 'continue' '}'
       && lk != 144487              // 'copy' '}'
       && lk != 144488              // 'copy-namespaces' '}'
       && lk != 144489              // 'count' '}'
       && lk != 144490              // 'decimal-format' '}'
       && lk != 144492              // 'declare' '}'
       && lk != 144493              // 'default' '}'
       && lk != 144494              // 'delete' '}'
       && lk != 144495              // 'descendant' '}'
       && lk != 144496              // 'descendant-or-self' '}'
       && lk != 144497              // 'descending' '}'
       && lk != 144502              // 'div' '}'
       && lk != 144503              // 'document' '}'
       && lk != 144504              // 'document-node' '}'
       && lk != 144505              // 'element' '}'
       && lk != 144506              // 'else' '}'
       && lk != 144507              // 'empty' '}'
       && lk != 144508              // 'empty-sequence' '}'
       && lk != 144509              // 'encoding' '}'
       && lk != 144510              // 'end' '}'
       && lk != 144512              // 'eq' '}'
       && lk != 144513              // 'every' '}'
       && lk != 144515              // 'except' '}'
       && lk != 144516              // 'exit' '}'
       && lk != 144517              // 'external' '}'
       && lk != 144518              // 'first' '}'
       && lk != 144519              // 'following' '}'
       && lk != 144520              // 'following-sibling' '}'
       && lk != 144521              // 'for' '}'
       && lk != 144525              // 'ft-option' '}'
       && lk != 144529              // 'function' '}'
       && lk != 144530              // 'ge' '}'
       && lk != 144532              // 'group' '}'
       && lk != 144534              // 'gt' '}'
       && lk != 144535              // 'idiv' '}'
       && lk != 144536              // 'if' '}'
       && lk != 144537              // 'import' '}'
       && lk != 144538              // 'in' '}'
       && lk != 144539              // 'index' '}'
       && lk != 144543              // 'insert' '}'
       && lk != 144544              // 'instance' '}'
       && lk != 144545              // 'integrity' '}'
       && lk != 144546              // 'intersect' '}'
       && lk != 144547              // 'into' '}'
       && lk != 144548              // 'is' '}'
       && lk != 144549              // 'item' '}'
       && lk != 144550              // 'json' '}'
       && lk != 144551              // 'json-item' '}'
       && lk != 144554              // 'last' '}'
       && lk != 144555              // 'lax' '}'
       && lk != 144556              // 'le' '}'
       && lk != 144558              // 'let' '}'
       && lk != 144560              // 'loop' '}'
       && lk != 144562              // 'lt' '}'
       && lk != 144564              // 'mod' '}'
       && lk != 144565              // 'modify' '}'
       && lk != 144566              // 'module' '}'
       && lk != 144568              // 'namespace' '}'
       && lk != 144569              // 'namespace-node' '}'
       && lk != 144570              // 'ne' '}'
       && lk != 144575              // 'node' '}'
       && lk != 144576              // 'nodes' '}'
       && lk != 144578              // 'object' '}'
       && lk != 144582              // 'only' '}'
       && lk != 144583              // 'option' '}'
       && lk != 144584              // 'or' '}'
       && lk != 144585              // 'order' '}'
       && lk != 144586              // 'ordered' '}'
       && lk != 144587              // 'ordering' '}'
       && lk != 144590              // 'parent' '}'
       && lk != 144596              // 'preceding' '}'
       && lk != 144597              // 'preceding-sibling' '}'
       && lk != 144600              // 'processing-instruction' '}'
       && lk != 144602              // 'rename' '}'
       && lk != 144603              // 'replace' '}'
       && lk != 144604              // 'return' '}'
       && lk != 144605              // 'returning' '}'
       && lk != 144606              // 'revalidation' '}'
       && lk != 144608              // 'satisfies' '}'
       && lk != 144609              // 'schema' '}'
       && lk != 144610              // 'schema-attribute' '}'
       && lk != 144611              // 'schema-element' '}'
       && lk != 144612              // 'score' '}'
       && lk != 144613              // 'self' '}'
       && lk != 144618              // 'sliding' '}'
       && lk != 144619              // 'some' '}'
       && lk != 144620              // 'stable' '}'
       && lk != 144621              // 'start' '}'
       && lk != 144624              // 'strict' '}'
       && lk != 144626              // 'structured-item' '}'
       && lk != 144627              // 'switch' '}'
       && lk != 144628              // 'text' '}'
       && lk != 144632              // 'to' '}'
       && lk != 144633              // 'treat' '}'
       && lk != 144634              // 'try' '}'
       && lk != 144635              // 'tumbling' '}'
       && lk != 144636              // 'type' '}'
       && lk != 144637              // 'typeswitch' '}'
       && lk != 144638              // 'union' '}'
       && lk != 144640              // 'unordered' '}'
       && lk != 144641              // 'updating' '}'
       && lk != 144644              // 'validate' '}'
       && lk != 144645              // 'value' '}'
       && lk != 144646              // 'variable' '}'
       && lk != 144647              // 'version' '}'
       && lk != 144650              // 'where' '}'
       && lk != 144651              // 'while' '}'
       && lk != 144654              // 'with' '}'
       && lk != 144658)             // 'xquery' '}'
      {
        lk = memoized(5, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2;
          try
          {
            try_Statement();
            memoize(5, e0A, -1);
            continue;
          }
          catch (p1A)
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            memoize(5, e0A, -2);
            break;
          }
        }
      }
      if (lk != -1
       && lk != 53                  // ';'
       && lk != 16134               // 'variable' '$'
       && lk != 27141               // Wildcard ';'
       && lk != 27142               // EQName^Token ';'
       && lk != 27144               // IntegerLiteral ';'
       && lk != 27145               // DecimalLiteral ';'
       && lk != 27146               // DoubleLiteral ';'
       && lk != 27147               // StringLiteral ';'
       && lk != 27180               // '.' ';'
       && lk != 27181               // '..' ';'
       && lk != 27182               // '/' ';'
       && lk != 27206               // 'after' ';'
       && lk != 27208               // 'allowing' ';'
       && lk != 27209               // 'ancestor' ';'
       && lk != 27210               // 'ancestor-or-self' ';'
       && lk != 27211               // 'and' ';'
       && lk != 27213               // 'append' ';'
       && lk != 27214               // 'array' ';'
       && lk != 27215               // 'as' ';'
       && lk != 27216               // 'ascending' ';'
       && lk != 27217               // 'at' ';'
       && lk != 27218               // 'attribute' ';'
       && lk != 27219               // 'base-uri' ';'
       && lk != 27220               // 'before' ';'
       && lk != 27221               // 'boundary-space' ';'
       && lk != 27222               // 'break' ';'
       && lk != 27224               // 'case' ';'
       && lk != 27225               // 'cast' ';'
       && lk != 27226               // 'castable' ';'
       && lk != 27227               // 'catch' ';'
       && lk != 27229               // 'child' ';'
       && lk != 27230               // 'collation' ';'
       && lk != 27232               // 'comment' ';'
       && lk != 27233               // 'constraint' ';'
       && lk != 27234               // 'construction' ';'
       && lk != 27237               // 'context' ';'
       && lk != 27238               // 'continue' ';'
       && lk != 27239               // 'copy' ';'
       && lk != 27240               // 'copy-namespaces' ';'
       && lk != 27241               // 'count' ';'
       && lk != 27242               // 'decimal-format' ';'
       && lk != 27244               // 'declare' ';'
       && lk != 27245               // 'default' ';'
       && lk != 27246               // 'delete' ';'
       && lk != 27247               // 'descendant' ';'
       && lk != 27248               // 'descendant-or-self' ';'
       && lk != 27249               // 'descending' ';'
       && lk != 27254               // 'div' ';'
       && lk != 27255               // 'document' ';'
       && lk != 27256               // 'document-node' ';'
       && lk != 27257               // 'element' ';'
       && lk != 27258               // 'else' ';'
       && lk != 27259               // 'empty' ';'
       && lk != 27260               // 'empty-sequence' ';'
       && lk != 27261               // 'encoding' ';'
       && lk != 27262               // 'end' ';'
       && lk != 27264               // 'eq' ';'
       && lk != 27265               // 'every' ';'
       && lk != 27267               // 'except' ';'
       && lk != 27268               // 'exit' ';'
       && lk != 27269               // 'external' ';'
       && lk != 27270               // 'first' ';'
       && lk != 27271               // 'following' ';'
       && lk != 27272               // 'following-sibling' ';'
       && lk != 27273               // 'for' ';'
       && lk != 27277               // 'ft-option' ';'
       && lk != 27281               // 'function' ';'
       && lk != 27282               // 'ge' ';'
       && lk != 27284               // 'group' ';'
       && lk != 27286               // 'gt' ';'
       && lk != 27287               // 'idiv' ';'
       && lk != 27288               // 'if' ';'
       && lk != 27289               // 'import' ';'
       && lk != 27290               // 'in' ';'
       && lk != 27291               // 'index' ';'
       && lk != 27295               // 'insert' ';'
       && lk != 27296               // 'instance' ';'
       && lk != 27297               // 'integrity' ';'
       && lk != 27298               // 'intersect' ';'
       && lk != 27299               // 'into' ';'
       && lk != 27300               // 'is' ';'
       && lk != 27301               // 'item' ';'
       && lk != 27302               // 'json' ';'
       && lk != 27303               // 'json-item' ';'
       && lk != 27306               // 'last' ';'
       && lk != 27307               // 'lax' ';'
       && lk != 27308               // 'le' ';'
       && lk != 27310               // 'let' ';'
       && lk != 27312               // 'loop' ';'
       && lk != 27314               // 'lt' ';'
       && lk != 27316               // 'mod' ';'
       && lk != 27317               // 'modify' ';'
       && lk != 27318               // 'module' ';'
       && lk != 27320               // 'namespace' ';'
       && lk != 27321               // 'namespace-node' ';'
       && lk != 27322               // 'ne' ';'
       && lk != 27327               // 'node' ';'
       && lk != 27328               // 'nodes' ';'
       && lk != 27330               // 'object' ';'
       && lk != 27334               // 'only' ';'
       && lk != 27335               // 'option' ';'
       && lk != 27336               // 'or' ';'
       && lk != 27337               // 'order' ';'
       && lk != 27338               // 'ordered' ';'
       && lk != 27339               // 'ordering' ';'
       && lk != 27342               // 'parent' ';'
       && lk != 27348               // 'preceding' ';'
       && lk != 27349               // 'preceding-sibling' ';'
       && lk != 27352               // 'processing-instruction' ';'
       && lk != 27354               // 'rename' ';'
       && lk != 27355               // 'replace' ';'
       && lk != 27356               // 'return' ';'
       && lk != 27357               // 'returning' ';'
       && lk != 27358               // 'revalidation' ';'
       && lk != 27360               // 'satisfies' ';'
       && lk != 27361               // 'schema' ';'
       && lk != 27362               // 'schema-attribute' ';'
       && lk != 27363               // 'schema-element' ';'
       && lk != 27364               // 'score' ';'
       && lk != 27365               // 'self' ';'
       && lk != 27370               // 'sliding' ';'
       && lk != 27371               // 'some' ';'
       && lk != 27372               // 'stable' ';'
       && lk != 27373               // 'start' ';'
       && lk != 27376               // 'strict' ';'
       && lk != 27378               // 'structured-item' ';'
       && lk != 27379               // 'switch' ';'
       && lk != 27380               // 'text' ';'
       && lk != 27384               // 'to' ';'
       && lk != 27385               // 'treat' ';'
       && lk != 27386               // 'try' ';'
       && lk != 27387               // 'tumbling' ';'
       && lk != 27388               // 'type' ';'
       && lk != 27389               // 'typeswitch' ';'
       && lk != 27390               // 'union' ';'
       && lk != 27392               // 'unordered' ';'
       && lk != 27393               // 'updating' ';'
       && lk != 27396               // 'validate' ';'
       && lk != 27397               // 'value' ';'
       && lk != 27398               // 'variable' ';'
       && lk != 27399               // 'version' ';'
       && lk != 27402               // 'where' ';'
       && lk != 27403               // 'while' ';'
       && lk != 27406               // 'with' ';'
       && lk != 27410               // 'xquery' ';'
       && lk != 90198               // 'break' 'loop'
       && lk != 90214               // 'continue' 'loop'
       && lk != 113284)             // 'exit' 'returning'
      {
        break;
      }
      try_Statement();
    }
  }

  function parse_StatementsAndExpr()
  {
    eventHandler.startNonterminal("StatementsAndExpr", e0);
    parse_Statements();
    whitespace();
    parse_Expr();
    eventHandler.endNonterminal("StatementsAndExpr", e0);
  }

  function try_StatementsAndExpr()
  {
    try_Statements();
    try_Expr();
  }

  function parse_StatementsAndOptionalExpr()
  {
    eventHandler.startNonterminal("StatementsAndOptionalExpr", e0);
    parse_Statements();
    if (l1 != 25                    // EOF
     && l1 != 282)                  // '}'
    {
      whitespace();
      parse_Expr();
    }
    eventHandler.endNonterminal("StatementsAndOptionalExpr", e0);
  }

  function try_StatementsAndOptionalExpr()
  {
    try_Statements();
    if (l1 != 25                    // EOF
     && l1 != 282)                  // '}'
    {
      try_Expr();
    }
  }

  function parse_Statement()
  {
    eventHandler.startNonterminal("Statement", e0);
    switch (l1)
    {
    case 132:                       // 'exit'
      lookahead2W(188);             // S^WS | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | '-' | '/' | '//' | ';' | '<' |
                                    // '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' | 'castable' |
                                    // 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'returning' | 'to' |
                                    // 'treat' | 'union' | '|' | '||'
      break;
    case 137:                       // 'for'
      lookahead2W(195);             // S^WS | '!' | '!=' | '#' | '$' | '(' | '(:' | '*' | '+' | '-' | '/' | '//' | ';' |
                                    // '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' | 'castable' |
                                    // 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'sliding' | 'to' |
                                    // 'treat' | 'tumbling' | 'union' | '|' | '||'
      break;
    case 174:                       // 'let'
      lookahead2W(192);             // S^WS | '!' | '!=' | '#' | '$' | '(' | '(:' | '*' | '+' | '-' | '/' | '//' | ';' |
                                    // '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' | 'castable' |
                                    // 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'score' | 'to' |
                                    // 'treat' | 'union' | '|' | '||'
      break;
    case 250:                       // 'try'
      lookahead2W(189);             // S^WS | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | '-' | '/' | '//' | ';' | '<' |
                                    // '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' | 'castable' |
                                    // 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' | 'treat' |
                                    // 'union' | '{' | '|' | '||'
      break;
    case 262:                       // 'variable'
      lookahead2W(186);             // S^WS | '!' | '!=' | '#' | '$' | '(' | '(:' | '*' | '+' | '-' | '/' | '//' | ';' |
                                    // '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' | 'castable' |
                                    // 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' | 'treat' |
                                    // 'union' | '|' | '||'
      break;
    case 276:                       // '{'
      lookahead2W(276);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|' | '}'
      break;
    case 31:                        // '$'
    case 32:                        // '%'
      lookahead2W(254);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
      break;
    case 86:                        // 'break'
    case 102:                       // 'continue'
      lookahead2W(187);             // S^WS | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | '-' | '/' | '//' | ';' | '<' |
                                    // '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' | 'castable' |
                                    // 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'is' | 'le' | 'loop' | 'lt' | 'mod' | 'ne' | 'or' | 'to' |
                                    // 'treat' | 'union' | '|' | '||'
      break;
    case 152:                       // 'if'
    case 243:                       // 'switch'
    case 253:                       // 'typeswitch'
    case 267:                       // 'while'
      lookahead2W(184);             // S^WS | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | '-' | '/' | '//' | ';' | '<' |
                                    // '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' | 'castable' |
                                    // 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' | 'treat' |
                                    // 'union' | '|' | '||'
      break;
    default:
      lk = l1;
    }
    if (lk == 2836                  // '{' Wildcard
     || lk == 3103                  // '$' EQName^Token
     || lk == 3104                  // '%' EQName^Token
     || lk == 3348                  // '{' EQName^Token
     || lk == 4372                  // '{' IntegerLiteral
     || lk == 4884                  // '{' DecimalLiteral
     || lk == 5396                  // '{' DoubleLiteral
     || lk == 5908                  // '{' StringLiteral
     || lk == 16148                 // '{' '$'
     || lk == 16660                 // '{' '%'
     || lk == 17675                 // 'while' '('
     || lk == 17684                 // '{' '('
     || lk == 18196                 // '{' '(#'
     || lk == 20756                 // '{' '+'
     || lk == 21780                 // '{' '-'
     || lk == 22804                 // '{' '.'
     || lk == 23316                 // '{' '..'
     || lk == 23828                 // '{' '/'
     || lk == 24340                 // '{' '//'
     || lk == 27412                 // '{' ';'
     || lk == 27924                 // '{' '<'
     || lk == 28436                 // '{' '<!--'
     || lk == 30484                 // '{' '<?'
     || lk == 34068                 // '{' '@'
     || lk == 35092                 // '{' '['
     || lk == 35871                 // '$' 'after'
     || lk == 35872                 // '%' 'after'
     || lk == 36116                 // '{' 'after'
     || lk == 36895                 // '$' 'allowing'
     || lk == 36896                 // '%' 'allowing'
     || lk == 37140                 // '{' 'allowing'
     || lk == 37407                 // '$' 'ancestor'
     || lk == 37408                 // '%' 'ancestor'
     || lk == 37652                 // '{' 'ancestor'
     || lk == 37919                 // '$' 'ancestor-or-self'
     || lk == 37920                 // '%' 'ancestor-or-self'
     || lk == 38164                 // '{' 'ancestor-or-self'
     || lk == 38431                 // '$' 'and'
     || lk == 38432                 // '%' 'and'
     || lk == 38676                 // '{' 'and'
     || lk == 39455                 // '$' 'append'
     || lk == 39456                 // '%' 'append'
     || lk == 39700                 // '{' 'append'
     || lk == 39967                 // '$' 'array'
     || lk == 39968                 // '%' 'array'
     || lk == 40212                 // '{' 'array'
     || lk == 40479                 // '$' 'as'
     || lk == 40480                 // '%' 'as'
     || lk == 40724                 // '{' 'as'
     || lk == 40991                 // '$' 'ascending'
     || lk == 40992                 // '%' 'ascending'
     || lk == 41236                 // '{' 'ascending'
     || lk == 41503                 // '$' 'at'
     || lk == 41504                 // '%' 'at'
     || lk == 41748                 // '{' 'at'
     || lk == 42015                 // '$' 'attribute'
     || lk == 42016                 // '%' 'attribute'
     || lk == 42260                 // '{' 'attribute'
     || lk == 42527                 // '$' 'base-uri'
     || lk == 42528                 // '%' 'base-uri'
     || lk == 42772                 // '{' 'base-uri'
     || lk == 43039                 // '$' 'before'
     || lk == 43040                 // '%' 'before'
     || lk == 43284                 // '{' 'before'
     || lk == 43551                 // '$' 'boundary-space'
     || lk == 43552                 // '%' 'boundary-space'
     || lk == 43796                 // '{' 'boundary-space'
     || lk == 44063                 // '$' 'break'
     || lk == 44064                 // '%' 'break'
     || lk == 44308                 // '{' 'break'
     || lk == 45087                 // '$' 'case'
     || lk == 45088                 // '%' 'case'
     || lk == 45332                 // '{' 'case'
     || lk == 45599                 // '$' 'cast'
     || lk == 45600                 // '%' 'cast'
     || lk == 45844                 // '{' 'cast'
     || lk == 46111                 // '$' 'castable'
     || lk == 46112                 // '%' 'castable'
     || lk == 46356                 // '{' 'castable'
     || lk == 46623                 // '$' 'catch'
     || lk == 46624                 // '%' 'catch'
     || lk == 46868                 // '{' 'catch'
     || lk == 47647                 // '$' 'child'
     || lk == 47648                 // '%' 'child'
     || lk == 47892                 // '{' 'child'
     || lk == 48159                 // '$' 'collation'
     || lk == 48160                 // '%' 'collation'
     || lk == 48404                 // '{' 'collation'
     || lk == 49183                 // '$' 'comment'
     || lk == 49184                 // '%' 'comment'
     || lk == 49428                 // '{' 'comment'
     || lk == 49695                 // '$' 'constraint'
     || lk == 49696                 // '%' 'constraint'
     || lk == 49940                 // '{' 'constraint'
     || lk == 50207                 // '$' 'construction'
     || lk == 50208                 // '%' 'construction'
     || lk == 50452                 // '{' 'construction'
     || lk == 51743                 // '$' 'context'
     || lk == 51744                 // '%' 'context'
     || lk == 51988                 // '{' 'context'
     || lk == 52255                 // '$' 'continue'
     || lk == 52256                 // '%' 'continue'
     || lk == 52500                 // '{' 'continue'
     || lk == 52767                 // '$' 'copy'
     || lk == 52768                 // '%' 'copy'
     || lk == 53012                 // '{' 'copy'
     || lk == 53279                 // '$' 'copy-namespaces'
     || lk == 53280                 // '%' 'copy-namespaces'
     || lk == 53524                 // '{' 'copy-namespaces'
     || lk == 53791                 // '$' 'count'
     || lk == 53792                 // '%' 'count'
     || lk == 54036                 // '{' 'count'
     || lk == 54303                 // '$' 'decimal-format'
     || lk == 54304                 // '%' 'decimal-format'
     || lk == 54548                 // '{' 'decimal-format'
     || lk == 55327                 // '$' 'declare'
     || lk == 55328                 // '%' 'declare'
     || lk == 55572                 // '{' 'declare'
     || lk == 55839                 // '$' 'default'
     || lk == 55840                 // '%' 'default'
     || lk == 56084                 // '{' 'default'
     || lk == 56351                 // '$' 'delete'
     || lk == 56352                 // '%' 'delete'
     || lk == 56596                 // '{' 'delete'
     || lk == 56863                 // '$' 'descendant'
     || lk == 56864                 // '%' 'descendant'
     || lk == 57108                 // '{' 'descendant'
     || lk == 57375                 // '$' 'descendant-or-self'
     || lk == 57376                 // '%' 'descendant-or-self'
     || lk == 57620                 // '{' 'descendant-or-self'
     || lk == 57887                 // '$' 'descending'
     || lk == 57888                 // '%' 'descending'
     || lk == 58132                 // '{' 'descending'
     || lk == 60447                 // '$' 'div'
     || lk == 60448                 // '%' 'div'
     || lk == 60692                 // '{' 'div'
     || lk == 60959                 // '$' 'document'
     || lk == 60960                 // '%' 'document'
     || lk == 61204                 // '{' 'document'
     || lk == 61471                 // '$' 'document-node'
     || lk == 61472                 // '%' 'document-node'
     || lk == 61716                 // '{' 'document-node'
     || lk == 61983                 // '$' 'element'
     || lk == 61984                 // '%' 'element'
     || lk == 62228                 // '{' 'element'
     || lk == 62495                 // '$' 'else'
     || lk == 62496                 // '%' 'else'
     || lk == 62740                 // '{' 'else'
     || lk == 63007                 // '$' 'empty'
     || lk == 63008                 // '%' 'empty'
     || lk == 63252                 // '{' 'empty'
     || lk == 63519                 // '$' 'empty-sequence'
     || lk == 63520                 // '%' 'empty-sequence'
     || lk == 63764                 // '{' 'empty-sequence'
     || lk == 64031                 // '$' 'encoding'
     || lk == 64032                 // '%' 'encoding'
     || lk == 64276                 // '{' 'encoding'
     || lk == 64543                 // '$' 'end'
     || lk == 64544                 // '%' 'end'
     || lk == 64788                 // '{' 'end'
     || lk == 65567                 // '$' 'eq'
     || lk == 65568                 // '%' 'eq'
     || lk == 65812                 // '{' 'eq'
     || lk == 66079                 // '$' 'every'
     || lk == 66080                 // '%' 'every'
     || lk == 66324                 // '{' 'every'
     || lk == 67103                 // '$' 'except'
     || lk == 67104                 // '%' 'except'
     || lk == 67348                 // '{' 'except'
     || lk == 67615                 // '$' 'exit'
     || lk == 67616                 // '%' 'exit'
     || lk == 67860                 // '{' 'exit'
     || lk == 68127                 // '$' 'external'
     || lk == 68128                 // '%' 'external'
     || lk == 68372                 // '{' 'external'
     || lk == 68639                 // '$' 'first'
     || lk == 68640                 // '%' 'first'
     || lk == 68884                 // '{' 'first'
     || lk == 69151                 // '$' 'following'
     || lk == 69152                 // '%' 'following'
     || lk == 69396                 // '{' 'following'
     || lk == 69663                 // '$' 'following-sibling'
     || lk == 69664                 // '%' 'following-sibling'
     || lk == 69908                 // '{' 'following-sibling'
     || lk == 70175                 // '$' 'for'
     || lk == 70176                 // '%' 'for'
     || lk == 70420                 // '{' 'for'
     || lk == 72223                 // '$' 'ft-option'
     || lk == 72224                 // '%' 'ft-option'
     || lk == 72468                 // '{' 'ft-option'
     || lk == 74271                 // '$' 'function'
     || lk == 74272                 // '%' 'function'
     || lk == 74516                 // '{' 'function'
     || lk == 74783                 // '$' 'ge'
     || lk == 74784                 // '%' 'ge'
     || lk == 75028                 // '{' 'ge'
     || lk == 75807                 // '$' 'group'
     || lk == 75808                 // '%' 'group'
     || lk == 76052                 // '{' 'group'
     || lk == 76831                 // '$' 'gt'
     || lk == 76832                 // '%' 'gt'
     || lk == 77076                 // '{' 'gt'
     || lk == 77343                 // '$' 'idiv'
     || lk == 77344                 // '%' 'idiv'
     || lk == 77588                 // '{' 'idiv'
     || lk == 77855                 // '$' 'if'
     || lk == 77856                 // '%' 'if'
     || lk == 78100                 // '{' 'if'
     || lk == 78367                 // '$' 'import'
     || lk == 78368                 // '%' 'import'
     || lk == 78612                 // '{' 'import'
     || lk == 78879                 // '$' 'in'
     || lk == 78880                 // '%' 'in'
     || lk == 79124                 // '{' 'in'
     || lk == 79391                 // '$' 'index'
     || lk == 79392                 // '%' 'index'
     || lk == 79636                 // '{' 'index'
     || lk == 81439                 // '$' 'insert'
     || lk == 81440                 // '%' 'insert'
     || lk == 81684                 // '{' 'insert'
     || lk == 81951                 // '$' 'instance'
     || lk == 81952                 // '%' 'instance'
     || lk == 82196                 // '{' 'instance'
     || lk == 82463                 // '$' 'integrity'
     || lk == 82464                 // '%' 'integrity'
     || lk == 82708                 // '{' 'integrity'
     || lk == 82975                 // '$' 'intersect'
     || lk == 82976                 // '%' 'intersect'
     || lk == 83220                 // '{' 'intersect'
     || lk == 83487                 // '$' 'into'
     || lk == 83488                 // '%' 'into'
     || lk == 83732                 // '{' 'into'
     || lk == 83999                 // '$' 'is'
     || lk == 84000                 // '%' 'is'
     || lk == 84244                 // '{' 'is'
     || lk == 84511                 // '$' 'item'
     || lk == 84512                 // '%' 'item'
     || lk == 84756                 // '{' 'item'
     || lk == 85023                 // '$' 'json'
     || lk == 85024                 // '%' 'json'
     || lk == 85268                 // '{' 'json'
     || lk == 85535                 // '$' 'json-item'
     || lk == 85536                 // '%' 'json-item'
     || lk == 85780                 // '{' 'json-item'
     || lk == 87071                 // '$' 'last'
     || lk == 87072                 // '%' 'last'
     || lk == 87316                 // '{' 'last'
     || lk == 87583                 // '$' 'lax'
     || lk == 87584                 // '%' 'lax'
     || lk == 87828                 // '{' 'lax'
     || lk == 88095                 // '$' 'le'
     || lk == 88096                 // '%' 'le'
     || lk == 88340                 // '{' 'le'
     || lk == 89119                 // '$' 'let'
     || lk == 89120                 // '%' 'let'
     || lk == 89364                 // '{' 'let'
     || lk == 90143                 // '$' 'loop'
     || lk == 90144                 // '%' 'loop'
     || lk == 90388                 // '{' 'loop'
     || lk == 91167                 // '$' 'lt'
     || lk == 91168                 // '%' 'lt'
     || lk == 91412                 // '{' 'lt'
     || lk == 92191                 // '$' 'mod'
     || lk == 92192                 // '%' 'mod'
     || lk == 92436                 // '{' 'mod'
     || lk == 92703                 // '$' 'modify'
     || lk == 92704                 // '%' 'modify'
     || lk == 92948                 // '{' 'modify'
     || lk == 93215                 // '$' 'module'
     || lk == 93216                 // '%' 'module'
     || lk == 93460                 // '{' 'module'
     || lk == 94239                 // '$' 'namespace'
     || lk == 94240                 // '%' 'namespace'
     || lk == 94484                 // '{' 'namespace'
     || lk == 94751                 // '$' 'namespace-node'
     || lk == 94752                 // '%' 'namespace-node'
     || lk == 94996                 // '{' 'namespace-node'
     || lk == 95263                 // '$' 'ne'
     || lk == 95264                 // '%' 'ne'
     || lk == 95508                 // '{' 'ne'
     || lk == 97823                 // '$' 'node'
     || lk == 97824                 // '%' 'node'
     || lk == 98068                 // '{' 'node'
     || lk == 98335                 // '$' 'nodes'
     || lk == 98336                 // '%' 'nodes'
     || lk == 98580                 // '{' 'nodes'
     || lk == 99359                 // '$' 'object'
     || lk == 99360                 // '%' 'object'
     || lk == 99604                 // '{' 'object'
     || lk == 101407                // '$' 'only'
     || lk == 101408                // '%' 'only'
     || lk == 101652                // '{' 'only'
     || lk == 101919                // '$' 'option'
     || lk == 101920                // '%' 'option'
     || lk == 102164                // '{' 'option'
     || lk == 102431                // '$' 'or'
     || lk == 102432                // '%' 'or'
     || lk == 102676                // '{' 'or'
     || lk == 102943                // '$' 'order'
     || lk == 102944                // '%' 'order'
     || lk == 103188                // '{' 'order'
     || lk == 103455                // '$' 'ordered'
     || lk == 103456                // '%' 'ordered'
     || lk == 103700                // '{' 'ordered'
     || lk == 103967                // '$' 'ordering'
     || lk == 103968                // '%' 'ordering'
     || lk == 104212                // '{' 'ordering'
     || lk == 105503                // '$' 'parent'
     || lk == 105504                // '%' 'parent'
     || lk == 105748                // '{' 'parent'
     || lk == 108575                // '$' 'preceding'
     || lk == 108576                // '%' 'preceding'
     || lk == 108820                // '{' 'preceding'
     || lk == 109087                // '$' 'preceding-sibling'
     || lk == 109088                // '%' 'preceding-sibling'
     || lk == 109332                // '{' 'preceding-sibling'
     || lk == 110623                // '$' 'processing-instruction'
     || lk == 110624                // '%' 'processing-instruction'
     || lk == 110868                // '{' 'processing-instruction'
     || lk == 111647                // '$' 'rename'
     || lk == 111648                // '%' 'rename'
     || lk == 111892                // '{' 'rename'
     || lk == 112159                // '$' 'replace'
     || lk == 112160                // '%' 'replace'
     || lk == 112404                // '{' 'replace'
     || lk == 112671                // '$' 'return'
     || lk == 112672                // '%' 'return'
     || lk == 112916                // '{' 'return'
     || lk == 113183                // '$' 'returning'
     || lk == 113184                // '%' 'returning'
     || lk == 113428                // '{' 'returning'
     || lk == 113695                // '$' 'revalidation'
     || lk == 113696                // '%' 'revalidation'
     || lk == 113940                // '{' 'revalidation'
     || lk == 114719                // '$' 'satisfies'
     || lk == 114720                // '%' 'satisfies'
     || lk == 114964                // '{' 'satisfies'
     || lk == 115231                // '$' 'schema'
     || lk == 115232                // '%' 'schema'
     || lk == 115476                // '{' 'schema'
     || lk == 115743                // '$' 'schema-attribute'
     || lk == 115744                // '%' 'schema-attribute'
     || lk == 115988                // '{' 'schema-attribute'
     || lk == 116255                // '$' 'schema-element'
     || lk == 116256                // '%' 'schema-element'
     || lk == 116500                // '{' 'schema-element'
     || lk == 116767                // '$' 'score'
     || lk == 116768                // '%' 'score'
     || lk == 117012                // '{' 'score'
     || lk == 117279                // '$' 'self'
     || lk == 117280                // '%' 'self'
     || lk == 117524                // '{' 'self'
     || lk == 119839                // '$' 'sliding'
     || lk == 119840                // '%' 'sliding'
     || lk == 120084                // '{' 'sliding'
     || lk == 120351                // '$' 'some'
     || lk == 120352                // '%' 'some'
     || lk == 120596                // '{' 'some'
     || lk == 120863                // '$' 'stable'
     || lk == 120864                // '%' 'stable'
     || lk == 121108                // '{' 'stable'
     || lk == 121375                // '$' 'start'
     || lk == 121376                // '%' 'start'
     || lk == 121620                // '{' 'start'
     || lk == 122911                // '$' 'strict'
     || lk == 122912                // '%' 'strict'
     || lk == 123156                // '{' 'strict'
     || lk == 123935                // '$' 'structured-item'
     || lk == 123936                // '%' 'structured-item'
     || lk == 124180                // '{' 'structured-item'
     || lk == 124447                // '$' 'switch'
     || lk == 124448                // '%' 'switch'
     || lk == 124692                // '{' 'switch'
     || lk == 124959                // '$' 'text'
     || lk == 124960                // '%' 'text'
     || lk == 125204                // '{' 'text'
     || lk == 127007                // '$' 'to'
     || lk == 127008                // '%' 'to'
     || lk == 127252                // '{' 'to'
     || lk == 127519                // '$' 'treat'
     || lk == 127520                // '%' 'treat'
     || lk == 127764                // '{' 'treat'
     || lk == 128031                // '$' 'try'
     || lk == 128032                // '%' 'try'
     || lk == 128276                // '{' 'try'
     || lk == 128543                // '$' 'tumbling'
     || lk == 128544                // '%' 'tumbling'
     || lk == 128788                // '{' 'tumbling'
     || lk == 129055                // '$' 'type'
     || lk == 129056                // '%' 'type'
     || lk == 129300                // '{' 'type'
     || lk == 129567                // '$' 'typeswitch'
     || lk == 129568                // '%' 'typeswitch'
     || lk == 129812                // '{' 'typeswitch'
     || lk == 130079                // '$' 'union'
     || lk == 130080                // '%' 'union'
     || lk == 130324                // '{' 'union'
     || lk == 131103                // '$' 'unordered'
     || lk == 131104                // '%' 'unordered'
     || lk == 131348                // '{' 'unordered'
     || lk == 131615                // '$' 'updating'
     || lk == 131616                // '%' 'updating'
     || lk == 131860                // '{' 'updating'
     || lk == 133151                // '$' 'validate'
     || lk == 133152                // '%' 'validate'
     || lk == 133396                // '{' 'validate'
     || lk == 133663                // '$' 'value'
     || lk == 133664                // '%' 'value'
     || lk == 133908                // '{' 'value'
     || lk == 134175                // '$' 'variable'
     || lk == 134176                // '%' 'variable'
     || lk == 134420                // '{' 'variable'
     || lk == 134687                // '$' 'version'
     || lk == 134688                // '%' 'version'
     || lk == 134932                // '{' 'version'
     || lk == 136223                // '$' 'where'
     || lk == 136224                // '%' 'where'
     || lk == 136468                // '{' 'where'
     || lk == 136735                // '$' 'while'
     || lk == 136736                // '%' 'while'
     || lk == 136980                // '{' 'while'
     || lk == 138271                // '$' 'with'
     || lk == 138272                // '%' 'with'
     || lk == 138516                // '{' 'with'
     || lk == 140319                // '$' 'xquery'
     || lk == 140320                // '%' 'xquery'
     || lk == 140564                // '{' 'xquery'
     || lk == 141588                // '{' '{'
     || lk == 142612                // '{' '{|'
     || lk == 144660)               // '{' '}'
    {
      lk = memoized(6, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_ApplyStatement();
          lk = -1;
        }
        catch (p1A)
        {
          try
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            try_AssignStatement();
            lk = -2;
          }
          catch (p2A)
          {
            try
            {
              b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
              b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
              b2 = b2A; e2 = e2A; end = e2A; }}
              try_BlockStatement();
              lk = -3;
            }
            catch (p3A)
            {
              try
              {
                b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
                b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
                b2 = b2A; e2 = e2A; end = e2A; }}
                try_VarDeclStatement();
                lk = -12;
              }
              catch (p12A)
              {
                lk = -13;
              }
            }
          }
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(6, e0, lk);
      }
    }
    switch (lk)
    {
    case -2:
      parse_AssignStatement();
      break;
    case -3:
      parse_BlockStatement();
      break;
    case 90198:                     // 'break' 'loop'
      parse_BreakStatement();
      break;
    case 90214:                     // 'continue' 'loop'
      parse_ContinueStatement();
      break;
    case 113284:                    // 'exit' 'returning'
      parse_ExitStatement();
      break;
    case 16009:                     // 'for' '$'
    case 16046:                     // 'let' '$'
    case 116910:                    // 'let' 'score'
    case 119945:                    // 'for' 'sliding'
    case 128649:                    // 'for' 'tumbling'
      parse_FLWORStatement();
      break;
    case 17560:                     // 'if' '('
      parse_IfStatement();
      break;
    case 17651:                     // 'switch' '('
      parse_SwitchStatement();
      break;
    case 141562:                    // 'try' '{'
      parse_TryCatchStatement();
      break;
    case 17661:                     // 'typeswitch' '('
      parse_TypeswitchStatement();
      break;
    case -12:
    case 16134:                     // 'variable' '$'
      parse_VarDeclStatement();
      break;
    case -13:
      parse_WhileStatement();
      break;
    case 53:                        // ';'
      parse_VoidStatement();
      break;
    default:
      parse_ApplyStatement();
    }
    eventHandler.endNonterminal("Statement", e0);
  }

  function try_Statement()
  {
    switch (l1)
    {
    case 132:                       // 'exit'
      lookahead2W(188);             // S^WS | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | '-' | '/' | '//' | ';' | '<' |
                                    // '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' | 'castable' |
                                    // 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'returning' | 'to' |
                                    // 'treat' | 'union' | '|' | '||'
      break;
    case 137:                       // 'for'
      lookahead2W(195);             // S^WS | '!' | '!=' | '#' | '$' | '(' | '(:' | '*' | '+' | '-' | '/' | '//' | ';' |
                                    // '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' | 'castable' |
                                    // 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'sliding' | 'to' |
                                    // 'treat' | 'tumbling' | 'union' | '|' | '||'
      break;
    case 174:                       // 'let'
      lookahead2W(192);             // S^WS | '!' | '!=' | '#' | '$' | '(' | '(:' | '*' | '+' | '-' | '/' | '//' | ';' |
                                    // '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' | 'castable' |
                                    // 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'score' | 'to' |
                                    // 'treat' | 'union' | '|' | '||'
      break;
    case 250:                       // 'try'
      lookahead2W(189);             // S^WS | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | '-' | '/' | '//' | ';' | '<' |
                                    // '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' | 'castable' |
                                    // 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' | 'treat' |
                                    // 'union' | '{' | '|' | '||'
      break;
    case 262:                       // 'variable'
      lookahead2W(186);             // S^WS | '!' | '!=' | '#' | '$' | '(' | '(:' | '*' | '+' | '-' | '/' | '//' | ';' |
                                    // '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' | 'castable' |
                                    // 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' | 'treat' |
                                    // 'union' | '|' | '||'
      break;
    case 276:                       // '{'
      lookahead2W(276);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|' | '}'
      break;
    case 31:                        // '$'
    case 32:                        // '%'
      lookahead2W(254);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
      break;
    case 86:                        // 'break'
    case 102:                       // 'continue'
      lookahead2W(187);             // S^WS | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | '-' | '/' | '//' | ';' | '<' |
                                    // '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' | 'castable' |
                                    // 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'is' | 'le' | 'loop' | 'lt' | 'mod' | 'ne' | 'or' | 'to' |
                                    // 'treat' | 'union' | '|' | '||'
      break;
    case 152:                       // 'if'
    case 243:                       // 'switch'
    case 253:                       // 'typeswitch'
    case 267:                       // 'while'
      lookahead2W(184);             // S^WS | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | '-' | '/' | '//' | ';' | '<' |
                                    // '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' | 'castable' |
                                    // 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' | 'treat' |
                                    // 'union' | '|' | '||'
      break;
    default:
      lk = l1;
    }
    if (lk == 2836                  // '{' Wildcard
     || lk == 3103                  // '$' EQName^Token
     || lk == 3104                  // '%' EQName^Token
     || lk == 3348                  // '{' EQName^Token
     || lk == 4372                  // '{' IntegerLiteral
     || lk == 4884                  // '{' DecimalLiteral
     || lk == 5396                  // '{' DoubleLiteral
     || lk == 5908                  // '{' StringLiteral
     || lk == 16148                 // '{' '$'
     || lk == 16660                 // '{' '%'
     || lk == 17675                 // 'while' '('
     || lk == 17684                 // '{' '('
     || lk == 18196                 // '{' '(#'
     || lk == 20756                 // '{' '+'
     || lk == 21780                 // '{' '-'
     || lk == 22804                 // '{' '.'
     || lk == 23316                 // '{' '..'
     || lk == 23828                 // '{' '/'
     || lk == 24340                 // '{' '//'
     || lk == 27412                 // '{' ';'
     || lk == 27924                 // '{' '<'
     || lk == 28436                 // '{' '<!--'
     || lk == 30484                 // '{' '<?'
     || lk == 34068                 // '{' '@'
     || lk == 35092                 // '{' '['
     || lk == 35871                 // '$' 'after'
     || lk == 35872                 // '%' 'after'
     || lk == 36116                 // '{' 'after'
     || lk == 36895                 // '$' 'allowing'
     || lk == 36896                 // '%' 'allowing'
     || lk == 37140                 // '{' 'allowing'
     || lk == 37407                 // '$' 'ancestor'
     || lk == 37408                 // '%' 'ancestor'
     || lk == 37652                 // '{' 'ancestor'
     || lk == 37919                 // '$' 'ancestor-or-self'
     || lk == 37920                 // '%' 'ancestor-or-self'
     || lk == 38164                 // '{' 'ancestor-or-self'
     || lk == 38431                 // '$' 'and'
     || lk == 38432                 // '%' 'and'
     || lk == 38676                 // '{' 'and'
     || lk == 39455                 // '$' 'append'
     || lk == 39456                 // '%' 'append'
     || lk == 39700                 // '{' 'append'
     || lk == 39967                 // '$' 'array'
     || lk == 39968                 // '%' 'array'
     || lk == 40212                 // '{' 'array'
     || lk == 40479                 // '$' 'as'
     || lk == 40480                 // '%' 'as'
     || lk == 40724                 // '{' 'as'
     || lk == 40991                 // '$' 'ascending'
     || lk == 40992                 // '%' 'ascending'
     || lk == 41236                 // '{' 'ascending'
     || lk == 41503                 // '$' 'at'
     || lk == 41504                 // '%' 'at'
     || lk == 41748                 // '{' 'at'
     || lk == 42015                 // '$' 'attribute'
     || lk == 42016                 // '%' 'attribute'
     || lk == 42260                 // '{' 'attribute'
     || lk == 42527                 // '$' 'base-uri'
     || lk == 42528                 // '%' 'base-uri'
     || lk == 42772                 // '{' 'base-uri'
     || lk == 43039                 // '$' 'before'
     || lk == 43040                 // '%' 'before'
     || lk == 43284                 // '{' 'before'
     || lk == 43551                 // '$' 'boundary-space'
     || lk == 43552                 // '%' 'boundary-space'
     || lk == 43796                 // '{' 'boundary-space'
     || lk == 44063                 // '$' 'break'
     || lk == 44064                 // '%' 'break'
     || lk == 44308                 // '{' 'break'
     || lk == 45087                 // '$' 'case'
     || lk == 45088                 // '%' 'case'
     || lk == 45332                 // '{' 'case'
     || lk == 45599                 // '$' 'cast'
     || lk == 45600                 // '%' 'cast'
     || lk == 45844                 // '{' 'cast'
     || lk == 46111                 // '$' 'castable'
     || lk == 46112                 // '%' 'castable'
     || lk == 46356                 // '{' 'castable'
     || lk == 46623                 // '$' 'catch'
     || lk == 46624                 // '%' 'catch'
     || lk == 46868                 // '{' 'catch'
     || lk == 47647                 // '$' 'child'
     || lk == 47648                 // '%' 'child'
     || lk == 47892                 // '{' 'child'
     || lk == 48159                 // '$' 'collation'
     || lk == 48160                 // '%' 'collation'
     || lk == 48404                 // '{' 'collation'
     || lk == 49183                 // '$' 'comment'
     || lk == 49184                 // '%' 'comment'
     || lk == 49428                 // '{' 'comment'
     || lk == 49695                 // '$' 'constraint'
     || lk == 49696                 // '%' 'constraint'
     || lk == 49940                 // '{' 'constraint'
     || lk == 50207                 // '$' 'construction'
     || lk == 50208                 // '%' 'construction'
     || lk == 50452                 // '{' 'construction'
     || lk == 51743                 // '$' 'context'
     || lk == 51744                 // '%' 'context'
     || lk == 51988                 // '{' 'context'
     || lk == 52255                 // '$' 'continue'
     || lk == 52256                 // '%' 'continue'
     || lk == 52500                 // '{' 'continue'
     || lk == 52767                 // '$' 'copy'
     || lk == 52768                 // '%' 'copy'
     || lk == 53012                 // '{' 'copy'
     || lk == 53279                 // '$' 'copy-namespaces'
     || lk == 53280                 // '%' 'copy-namespaces'
     || lk == 53524                 // '{' 'copy-namespaces'
     || lk == 53791                 // '$' 'count'
     || lk == 53792                 // '%' 'count'
     || lk == 54036                 // '{' 'count'
     || lk == 54303                 // '$' 'decimal-format'
     || lk == 54304                 // '%' 'decimal-format'
     || lk == 54548                 // '{' 'decimal-format'
     || lk == 55327                 // '$' 'declare'
     || lk == 55328                 // '%' 'declare'
     || lk == 55572                 // '{' 'declare'
     || lk == 55839                 // '$' 'default'
     || lk == 55840                 // '%' 'default'
     || lk == 56084                 // '{' 'default'
     || lk == 56351                 // '$' 'delete'
     || lk == 56352                 // '%' 'delete'
     || lk == 56596                 // '{' 'delete'
     || lk == 56863                 // '$' 'descendant'
     || lk == 56864                 // '%' 'descendant'
     || lk == 57108                 // '{' 'descendant'
     || lk == 57375                 // '$' 'descendant-or-self'
     || lk == 57376                 // '%' 'descendant-or-self'
     || lk == 57620                 // '{' 'descendant-or-self'
     || lk == 57887                 // '$' 'descending'
     || lk == 57888                 // '%' 'descending'
     || lk == 58132                 // '{' 'descending'
     || lk == 60447                 // '$' 'div'
     || lk == 60448                 // '%' 'div'
     || lk == 60692                 // '{' 'div'
     || lk == 60959                 // '$' 'document'
     || lk == 60960                 // '%' 'document'
     || lk == 61204                 // '{' 'document'
     || lk == 61471                 // '$' 'document-node'
     || lk == 61472                 // '%' 'document-node'
     || lk == 61716                 // '{' 'document-node'
     || lk == 61983                 // '$' 'element'
     || lk == 61984                 // '%' 'element'
     || lk == 62228                 // '{' 'element'
     || lk == 62495                 // '$' 'else'
     || lk == 62496                 // '%' 'else'
     || lk == 62740                 // '{' 'else'
     || lk == 63007                 // '$' 'empty'
     || lk == 63008                 // '%' 'empty'
     || lk == 63252                 // '{' 'empty'
     || lk == 63519                 // '$' 'empty-sequence'
     || lk == 63520                 // '%' 'empty-sequence'
     || lk == 63764                 // '{' 'empty-sequence'
     || lk == 64031                 // '$' 'encoding'
     || lk == 64032                 // '%' 'encoding'
     || lk == 64276                 // '{' 'encoding'
     || lk == 64543                 // '$' 'end'
     || lk == 64544                 // '%' 'end'
     || lk == 64788                 // '{' 'end'
     || lk == 65567                 // '$' 'eq'
     || lk == 65568                 // '%' 'eq'
     || lk == 65812                 // '{' 'eq'
     || lk == 66079                 // '$' 'every'
     || lk == 66080                 // '%' 'every'
     || lk == 66324                 // '{' 'every'
     || lk == 67103                 // '$' 'except'
     || lk == 67104                 // '%' 'except'
     || lk == 67348                 // '{' 'except'
     || lk == 67615                 // '$' 'exit'
     || lk == 67616                 // '%' 'exit'
     || lk == 67860                 // '{' 'exit'
     || lk == 68127                 // '$' 'external'
     || lk == 68128                 // '%' 'external'
     || lk == 68372                 // '{' 'external'
     || lk == 68639                 // '$' 'first'
     || lk == 68640                 // '%' 'first'
     || lk == 68884                 // '{' 'first'
     || lk == 69151                 // '$' 'following'
     || lk == 69152                 // '%' 'following'
     || lk == 69396                 // '{' 'following'
     || lk == 69663                 // '$' 'following-sibling'
     || lk == 69664                 // '%' 'following-sibling'
     || lk == 69908                 // '{' 'following-sibling'
     || lk == 70175                 // '$' 'for'
     || lk == 70176                 // '%' 'for'
     || lk == 70420                 // '{' 'for'
     || lk == 72223                 // '$' 'ft-option'
     || lk == 72224                 // '%' 'ft-option'
     || lk == 72468                 // '{' 'ft-option'
     || lk == 74271                 // '$' 'function'
     || lk == 74272                 // '%' 'function'
     || lk == 74516                 // '{' 'function'
     || lk == 74783                 // '$' 'ge'
     || lk == 74784                 // '%' 'ge'
     || lk == 75028                 // '{' 'ge'
     || lk == 75807                 // '$' 'group'
     || lk == 75808                 // '%' 'group'
     || lk == 76052                 // '{' 'group'
     || lk == 76831                 // '$' 'gt'
     || lk == 76832                 // '%' 'gt'
     || lk == 77076                 // '{' 'gt'
     || lk == 77343                 // '$' 'idiv'
     || lk == 77344                 // '%' 'idiv'
     || lk == 77588                 // '{' 'idiv'
     || lk == 77855                 // '$' 'if'
     || lk == 77856                 // '%' 'if'
     || lk == 78100                 // '{' 'if'
     || lk == 78367                 // '$' 'import'
     || lk == 78368                 // '%' 'import'
     || lk == 78612                 // '{' 'import'
     || lk == 78879                 // '$' 'in'
     || lk == 78880                 // '%' 'in'
     || lk == 79124                 // '{' 'in'
     || lk == 79391                 // '$' 'index'
     || lk == 79392                 // '%' 'index'
     || lk == 79636                 // '{' 'index'
     || lk == 81439                 // '$' 'insert'
     || lk == 81440                 // '%' 'insert'
     || lk == 81684                 // '{' 'insert'
     || lk == 81951                 // '$' 'instance'
     || lk == 81952                 // '%' 'instance'
     || lk == 82196                 // '{' 'instance'
     || lk == 82463                 // '$' 'integrity'
     || lk == 82464                 // '%' 'integrity'
     || lk == 82708                 // '{' 'integrity'
     || lk == 82975                 // '$' 'intersect'
     || lk == 82976                 // '%' 'intersect'
     || lk == 83220                 // '{' 'intersect'
     || lk == 83487                 // '$' 'into'
     || lk == 83488                 // '%' 'into'
     || lk == 83732                 // '{' 'into'
     || lk == 83999                 // '$' 'is'
     || lk == 84000                 // '%' 'is'
     || lk == 84244                 // '{' 'is'
     || lk == 84511                 // '$' 'item'
     || lk == 84512                 // '%' 'item'
     || lk == 84756                 // '{' 'item'
     || lk == 85023                 // '$' 'json'
     || lk == 85024                 // '%' 'json'
     || lk == 85268                 // '{' 'json'
     || lk == 85535                 // '$' 'json-item'
     || lk == 85536                 // '%' 'json-item'
     || lk == 85780                 // '{' 'json-item'
     || lk == 87071                 // '$' 'last'
     || lk == 87072                 // '%' 'last'
     || lk == 87316                 // '{' 'last'
     || lk == 87583                 // '$' 'lax'
     || lk == 87584                 // '%' 'lax'
     || lk == 87828                 // '{' 'lax'
     || lk == 88095                 // '$' 'le'
     || lk == 88096                 // '%' 'le'
     || lk == 88340                 // '{' 'le'
     || lk == 89119                 // '$' 'let'
     || lk == 89120                 // '%' 'let'
     || lk == 89364                 // '{' 'let'
     || lk == 90143                 // '$' 'loop'
     || lk == 90144                 // '%' 'loop'
     || lk == 90388                 // '{' 'loop'
     || lk == 91167                 // '$' 'lt'
     || lk == 91168                 // '%' 'lt'
     || lk == 91412                 // '{' 'lt'
     || lk == 92191                 // '$' 'mod'
     || lk == 92192                 // '%' 'mod'
     || lk == 92436                 // '{' 'mod'
     || lk == 92703                 // '$' 'modify'
     || lk == 92704                 // '%' 'modify'
     || lk == 92948                 // '{' 'modify'
     || lk == 93215                 // '$' 'module'
     || lk == 93216                 // '%' 'module'
     || lk == 93460                 // '{' 'module'
     || lk == 94239                 // '$' 'namespace'
     || lk == 94240                 // '%' 'namespace'
     || lk == 94484                 // '{' 'namespace'
     || lk == 94751                 // '$' 'namespace-node'
     || lk == 94752                 // '%' 'namespace-node'
     || lk == 94996                 // '{' 'namespace-node'
     || lk == 95263                 // '$' 'ne'
     || lk == 95264                 // '%' 'ne'
     || lk == 95508                 // '{' 'ne'
     || lk == 97823                 // '$' 'node'
     || lk == 97824                 // '%' 'node'
     || lk == 98068                 // '{' 'node'
     || lk == 98335                 // '$' 'nodes'
     || lk == 98336                 // '%' 'nodes'
     || lk == 98580                 // '{' 'nodes'
     || lk == 99359                 // '$' 'object'
     || lk == 99360                 // '%' 'object'
     || lk == 99604                 // '{' 'object'
     || lk == 101407                // '$' 'only'
     || lk == 101408                // '%' 'only'
     || lk == 101652                // '{' 'only'
     || lk == 101919                // '$' 'option'
     || lk == 101920                // '%' 'option'
     || lk == 102164                // '{' 'option'
     || lk == 102431                // '$' 'or'
     || lk == 102432                // '%' 'or'
     || lk == 102676                // '{' 'or'
     || lk == 102943                // '$' 'order'
     || lk == 102944                // '%' 'order'
     || lk == 103188                // '{' 'order'
     || lk == 103455                // '$' 'ordered'
     || lk == 103456                // '%' 'ordered'
     || lk == 103700                // '{' 'ordered'
     || lk == 103967                // '$' 'ordering'
     || lk == 103968                // '%' 'ordering'
     || lk == 104212                // '{' 'ordering'
     || lk == 105503                // '$' 'parent'
     || lk == 105504                // '%' 'parent'
     || lk == 105748                // '{' 'parent'
     || lk == 108575                // '$' 'preceding'
     || lk == 108576                // '%' 'preceding'
     || lk == 108820                // '{' 'preceding'
     || lk == 109087                // '$' 'preceding-sibling'
     || lk == 109088                // '%' 'preceding-sibling'
     || lk == 109332                // '{' 'preceding-sibling'
     || lk == 110623                // '$' 'processing-instruction'
     || lk == 110624                // '%' 'processing-instruction'
     || lk == 110868                // '{' 'processing-instruction'
     || lk == 111647                // '$' 'rename'
     || lk == 111648                // '%' 'rename'
     || lk == 111892                // '{' 'rename'
     || lk == 112159                // '$' 'replace'
     || lk == 112160                // '%' 'replace'
     || lk == 112404                // '{' 'replace'
     || lk == 112671                // '$' 'return'
     || lk == 112672                // '%' 'return'
     || lk == 112916                // '{' 'return'
     || lk == 113183                // '$' 'returning'
     || lk == 113184                // '%' 'returning'
     || lk == 113428                // '{' 'returning'
     || lk == 113695                // '$' 'revalidation'
     || lk == 113696                // '%' 'revalidation'
     || lk == 113940                // '{' 'revalidation'
     || lk == 114719                // '$' 'satisfies'
     || lk == 114720                // '%' 'satisfies'
     || lk == 114964                // '{' 'satisfies'
     || lk == 115231                // '$' 'schema'
     || lk == 115232                // '%' 'schema'
     || lk == 115476                // '{' 'schema'
     || lk == 115743                // '$' 'schema-attribute'
     || lk == 115744                // '%' 'schema-attribute'
     || lk == 115988                // '{' 'schema-attribute'
     || lk == 116255                // '$' 'schema-element'
     || lk == 116256                // '%' 'schema-element'
     || lk == 116500                // '{' 'schema-element'
     || lk == 116767                // '$' 'score'
     || lk == 116768                // '%' 'score'
     || lk == 117012                // '{' 'score'
     || lk == 117279                // '$' 'self'
     || lk == 117280                // '%' 'self'
     || lk == 117524                // '{' 'self'
     || lk == 119839                // '$' 'sliding'
     || lk == 119840                // '%' 'sliding'
     || lk == 120084                // '{' 'sliding'
     || lk == 120351                // '$' 'some'
     || lk == 120352                // '%' 'some'
     || lk == 120596                // '{' 'some'
     || lk == 120863                // '$' 'stable'
     || lk == 120864                // '%' 'stable'
     || lk == 121108                // '{' 'stable'
     || lk == 121375                // '$' 'start'
     || lk == 121376                // '%' 'start'
     || lk == 121620                // '{' 'start'
     || lk == 122911                // '$' 'strict'
     || lk == 122912                // '%' 'strict'
     || lk == 123156                // '{' 'strict'
     || lk == 123935                // '$' 'structured-item'
     || lk == 123936                // '%' 'structured-item'
     || lk == 124180                // '{' 'structured-item'
     || lk == 124447                // '$' 'switch'
     || lk == 124448                // '%' 'switch'
     || lk == 124692                // '{' 'switch'
     || lk == 124959                // '$' 'text'
     || lk == 124960                // '%' 'text'
     || lk == 125204                // '{' 'text'
     || lk == 127007                // '$' 'to'
     || lk == 127008                // '%' 'to'
     || lk == 127252                // '{' 'to'
     || lk == 127519                // '$' 'treat'
     || lk == 127520                // '%' 'treat'
     || lk == 127764                // '{' 'treat'
     || lk == 128031                // '$' 'try'
     || lk == 128032                // '%' 'try'
     || lk == 128276                // '{' 'try'
     || lk == 128543                // '$' 'tumbling'
     || lk == 128544                // '%' 'tumbling'
     || lk == 128788                // '{' 'tumbling'
     || lk == 129055                // '$' 'type'
     || lk == 129056                // '%' 'type'
     || lk == 129300                // '{' 'type'
     || lk == 129567                // '$' 'typeswitch'
     || lk == 129568                // '%' 'typeswitch'
     || lk == 129812                // '{' 'typeswitch'
     || lk == 130079                // '$' 'union'
     || lk == 130080                // '%' 'union'
     || lk == 130324                // '{' 'union'
     || lk == 131103                // '$' 'unordered'
     || lk == 131104                // '%' 'unordered'
     || lk == 131348                // '{' 'unordered'
     || lk == 131615                // '$' 'updating'
     || lk == 131616                // '%' 'updating'
     || lk == 131860                // '{' 'updating'
     || lk == 133151                // '$' 'validate'
     || lk == 133152                // '%' 'validate'
     || lk == 133396                // '{' 'validate'
     || lk == 133663                // '$' 'value'
     || lk == 133664                // '%' 'value'
     || lk == 133908                // '{' 'value'
     || lk == 134175                // '$' 'variable'
     || lk == 134176                // '%' 'variable'
     || lk == 134420                // '{' 'variable'
     || lk == 134687                // '$' 'version'
     || lk == 134688                // '%' 'version'
     || lk == 134932                // '{' 'version'
     || lk == 136223                // '$' 'where'
     || lk == 136224                // '%' 'where'
     || lk == 136468                // '{' 'where'
     || lk == 136735                // '$' 'while'
     || lk == 136736                // '%' 'while'
     || lk == 136980                // '{' 'while'
     || lk == 138271                // '$' 'with'
     || lk == 138272                // '%' 'with'
     || lk == 138516                // '{' 'with'
     || lk == 140319                // '$' 'xquery'
     || lk == 140320                // '%' 'xquery'
     || lk == 140564                // '{' 'xquery'
     || lk == 141588                // '{' '{'
     || lk == 142612                // '{' '{|'
     || lk == 144660)               // '{' '}'
    {
      lk = memoized(6, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_ApplyStatement();
          memoize(6, e0A, -1);
          lk = -15;
        }
        catch (p1A)
        {
          try
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            try_AssignStatement();
            memoize(6, e0A, -2);
            lk = -15;
          }
          catch (p2A)
          {
            try
            {
              b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
              b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
              b2 = b2A; e2 = e2A; end = e2A; }}
              try_BlockStatement();
              memoize(6, e0A, -3);
              lk = -15;
            }
            catch (p3A)
            {
              try
              {
                b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
                b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
                b2 = b2A; e2 = e2A; end = e2A; }}
                try_VarDeclStatement();
                memoize(6, e0A, -12);
                lk = -15;
              }
              catch (p12A)
              {
                lk = -13;
                b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
                b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
                b2 = b2A; e2 = e2A; end = e2A; }}
                memoize(6, e0A, -13);
              }
            }
          }
        }
      }
    }
    switch (lk)
    {
    case -2:
      try_AssignStatement();
      break;
    case -3:
      try_BlockStatement();
      break;
    case 90198:                     // 'break' 'loop'
      try_BreakStatement();
      break;
    case 90214:                     // 'continue' 'loop'
      try_ContinueStatement();
      break;
    case 113284:                    // 'exit' 'returning'
      try_ExitStatement();
      break;
    case 16009:                     // 'for' '$'
    case 16046:                     // 'let' '$'
    case 116910:                    // 'let' 'score'
    case 119945:                    // 'for' 'sliding'
    case 128649:                    // 'for' 'tumbling'
      try_FLWORStatement();
      break;
    case 17560:                     // 'if' '('
      try_IfStatement();
      break;
    case 17651:                     // 'switch' '('
      try_SwitchStatement();
      break;
    case 141562:                    // 'try' '{'
      try_TryCatchStatement();
      break;
    case 17661:                     // 'typeswitch' '('
      try_TypeswitchStatement();
      break;
    case -12:
    case 16134:                     // 'variable' '$'
      try_VarDeclStatement();
      break;
    case -13:
      try_WhileStatement();
      break;
    case 53:                        // ';'
      try_VoidStatement();
      break;
    case -15:
      break;
    default:
      try_ApplyStatement();
    }
  }

  function parse_ApplyStatement()
  {
    eventHandler.startNonterminal("ApplyStatement", e0);
    parse_ExprSimple();
    shift(53);                      // ';'
    eventHandler.endNonterminal("ApplyStatement", e0);
  }

  function try_ApplyStatement()
  {
    try_ExprSimple();
    shiftT(53);                     // ';'
  }

  function parse_AssignStatement()
  {
    eventHandler.startNonterminal("AssignStatement", e0);
    shift(31);                      // '$'
    lookahead1W(254);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_VarName();
    lookahead1W(27);                // S^WS | '(:' | ':='
    shift(52);                      // ':='
    lookahead1W(266);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    shift(53);                      // ';'
    eventHandler.endNonterminal("AssignStatement", e0);
  }

  function try_AssignStatement()
  {
    shiftT(31);                     // '$'
    lookahead1W(254);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
    try_VarName();
    lookahead1W(27);                // S^WS | '(:' | ':='
    shiftT(52);                     // ':='
    lookahead1W(266);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
    shiftT(53);                     // ';'
  }

  function parse_BlockStatement()
  {
    eventHandler.startNonterminal("BlockStatement", e0);
    shift(276);                     // '{'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|' | '}'
    whitespace();
    parse_Statements();
    shift(282);                     // '}'
    eventHandler.endNonterminal("BlockStatement", e0);
  }

  function try_BlockStatement()
  {
    shiftT(276);                    // '{'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|' | '}'
    try_Statements();
    shiftT(282);                    // '}'
  }

  function parse_BreakStatement()
  {
    eventHandler.startNonterminal("BreakStatement", e0);
    shift(86);                      // 'break'
    lookahead1W(59);                // S^WS | '(:' | 'loop'
    shift(176);                     // 'loop'
    lookahead1W(28);                // S^WS | '(:' | ';'
    shift(53);                      // ';'
    eventHandler.endNonterminal("BreakStatement", e0);
  }

  function try_BreakStatement()
  {
    shiftT(86);                     // 'break'
    lookahead1W(59);                // S^WS | '(:' | 'loop'
    shiftT(176);                    // 'loop'
    lookahead1W(28);                // S^WS | '(:' | ';'
    shiftT(53);                     // ';'
  }

  function parse_ContinueStatement()
  {
    eventHandler.startNonterminal("ContinueStatement", e0);
    shift(102);                     // 'continue'
    lookahead1W(59);                // S^WS | '(:' | 'loop'
    shift(176);                     // 'loop'
    lookahead1W(28);                // S^WS | '(:' | ';'
    shift(53);                      // ';'
    eventHandler.endNonterminal("ContinueStatement", e0);
  }

  function try_ContinueStatement()
  {
    shiftT(102);                    // 'continue'
    lookahead1W(59);                // S^WS | '(:' | 'loop'
    shiftT(176);                    // 'loop'
    lookahead1W(28);                // S^WS | '(:' | ';'
    shiftT(53);                     // ';'
  }

  function parse_ExitStatement()
  {
    eventHandler.startNonterminal("ExitStatement", e0);
    shift(132);                     // 'exit'
    lookahead1W(71);                // S^WS | '(:' | 'returning'
    shift(221);                     // 'returning'
    lookahead1W(266);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    shift(53);                      // ';'
    eventHandler.endNonterminal("ExitStatement", e0);
  }

  function try_ExitStatement()
  {
    shiftT(132);                    // 'exit'
    lookahead1W(71);                // S^WS | '(:' | 'returning'
    shiftT(221);                    // 'returning'
    lookahead1W(266);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
    shiftT(53);                     // ';'
  }

  function parse_FLWORStatement()
  {
    eventHandler.startNonterminal("FLWORStatement", e0);
    parse_InitialClause();
    for (;;)
    {
      lookahead1W(173);             // S^WS | '(:' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' | 'stable' |
                                    // 'where'
      if (l1 == 220)                // 'return'
      {
        break;
      }
      whitespace();
      parse_IntermediateClause();
    }
    whitespace();
    parse_ReturnStatement();
    eventHandler.endNonterminal("FLWORStatement", e0);
  }

  function try_FLWORStatement()
  {
    try_InitialClause();
    for (;;)
    {
      lookahead1W(173);             // S^WS | '(:' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' | 'stable' |
                                    // 'where'
      if (l1 == 220)                // 'return'
      {
        break;
      }
      try_IntermediateClause();
    }
    try_ReturnStatement();
  }

  function parse_ReturnStatement()
  {
    eventHandler.startNonterminal("ReturnStatement", e0);
    shift(220);                     // 'return'
    lookahead1W(269);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_Statement();
    eventHandler.endNonterminal("ReturnStatement", e0);
  }

  function try_ReturnStatement()
  {
    shiftT(220);                    // 'return'
    lookahead1W(269);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
    try_Statement();
  }

  function parse_IfStatement()
  {
    eventHandler.startNonterminal("IfStatement", e0);
    shift(152);                     // 'if'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shift(34);                      // '('
    lookahead1W(266);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_Expr();
    shift(37);                      // ')'
    lookahead1W(77);                // S^WS | '(:' | 'then'
    shift(245);                     // 'then'
    lookahead1W(269);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_Statement();
    lookahead1W(48);                // S^WS | '(:' | 'else'
    shift(122);                     // 'else'
    lookahead1W(269);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_Statement();
    eventHandler.endNonterminal("IfStatement", e0);
  }

  function try_IfStatement()
  {
    shiftT(152);                    // 'if'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shiftT(34);                     // '('
    lookahead1W(266);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
    try_Expr();
    shiftT(37);                     // ')'
    lookahead1W(77);                // S^WS | '(:' | 'then'
    shiftT(245);                    // 'then'
    lookahead1W(269);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
    try_Statement();
    lookahead1W(48);                // S^WS | '(:' | 'else'
    shiftT(122);                    // 'else'
    lookahead1W(269);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
    try_Statement();
  }

  function parse_SwitchStatement()
  {
    eventHandler.startNonterminal("SwitchStatement", e0);
    shift(243);                     // 'switch'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shift(34);                      // '('
    lookahead1W(266);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_Expr();
    shift(37);                      // ')'
    for (;;)
    {
      lookahead1W(35);              // S^WS | '(:' | 'case'
      whitespace();
      parse_SwitchCaseStatement();
      lookahead1W(113);             // S^WS | '(:' | 'case' | 'default'
      if (l1 != 88)                 // 'case'
      {
        break;
      }
    }
    shift(109);                     // 'default'
    lookahead1W(70);                // S^WS | '(:' | 'return'
    shift(220);                     // 'return'
    lookahead1W(269);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_Statement();
    eventHandler.endNonterminal("SwitchStatement", e0);
  }

  function try_SwitchStatement()
  {
    shiftT(243);                    // 'switch'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shiftT(34);                     // '('
    lookahead1W(266);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
    try_Expr();
    shiftT(37);                     // ')'
    for (;;)
    {
      lookahead1W(35);              // S^WS | '(:' | 'case'
      try_SwitchCaseStatement();
      lookahead1W(113);             // S^WS | '(:' | 'case' | 'default'
      if (l1 != 88)                 // 'case'
      {
        break;
      }
    }
    shiftT(109);                    // 'default'
    lookahead1W(70);                // S^WS | '(:' | 'return'
    shiftT(220);                    // 'return'
    lookahead1W(269);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
    try_Statement();
  }

  function parse_SwitchCaseStatement()
  {
    eventHandler.startNonterminal("SwitchCaseStatement", e0);
    for (;;)
    {
      shift(88);                    // 'case'
      lookahead1W(266);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_SwitchCaseOperand();
      if (l1 != 88)                 // 'case'
      {
        break;
      }
    }
    shift(220);                     // 'return'
    lookahead1W(269);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_Statement();
    eventHandler.endNonterminal("SwitchCaseStatement", e0);
  }

  function try_SwitchCaseStatement()
  {
    for (;;)
    {
      shiftT(88);                   // 'case'
      lookahead1W(266);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      try_SwitchCaseOperand();
      if (l1 != 88)                 // 'case'
      {
        break;
      }
    }
    shiftT(220);                    // 'return'
    lookahead1W(269);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
    try_Statement();
  }

  function parse_TryCatchStatement()
  {
    eventHandler.startNonterminal("TryCatchStatement", e0);
    shift(250);                     // 'try'
    lookahead1W(87);                // S^WS | '(:' | '{'
    whitespace();
    parse_BlockStatement();
    for (;;)
    {
      lookahead1W(36);              // S^WS | '(:' | 'catch'
      shift(91);                    // 'catch'
      lookahead1W(256);             // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_CatchErrorList();
      whitespace();
      parse_BlockStatement();
      lookahead1W(277);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | EOF | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' |
                                    // '..' | '/' | '//' | ';' | '<' | '<!--' | '<?' | '@' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|' | '}'
      switch (l1)
      {
      case 91:                      // 'catch'
        lookahead2W(278);           // Wildcard | EQName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' |
                                    // '+' | ',' | '-' | '/' | '//' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' |
                                    // '>>' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'contains' |
                                    // 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' |
                                    // 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '|' | '||' | '}'
        break;
      default:
        lk = l1;
      }
      if (lk == 38491               // 'catch' 'and'
       || lk == 45659               // 'catch' 'cast'
       || lk == 46171               // 'catch' 'castable'
       || lk == 60507               // 'catch' 'div'
       || lk == 65627               // 'catch' 'eq'
       || lk == 67163               // 'catch' 'except'
       || lk == 74843               // 'catch' 'ge'
       || lk == 76891               // 'catch' 'gt'
       || lk == 77403               // 'catch' 'idiv'
       || lk == 82011               // 'catch' 'instance'
       || lk == 83035               // 'catch' 'intersect'
       || lk == 84059               // 'catch' 'is'
       || lk == 88155               // 'catch' 'le'
       || lk == 91227               // 'catch' 'lt'
       || lk == 92251               // 'catch' 'mod'
       || lk == 95323               // 'catch' 'ne'
       || lk == 102491              // 'catch' 'or'
       || lk == 127067              // 'catch' 'to'
       || lk == 127579              // 'catch' 'treat'
       || lk == 130139)             // 'catch' 'union'
      {
        lk = memoized(7, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2;
          try
          {
            lookahead1W(36);        // S^WS | '(:' | 'catch'
            shiftT(91);             // 'catch'
            lookahead1W(256);       // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
            try_CatchErrorList();
            try_BlockStatement();
            lk = -1;
          }
          catch (p1A)
          {
            lk = -2;
          }
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(7, e0, lk);
        }
      }
      if (lk != -1
       && lk != 2651                // 'catch' Wildcard
       && lk != 3163                // 'catch' EQName^Token
       && lk != 35931               // 'catch' 'after'
       && lk != 36955               // 'catch' 'allowing'
       && lk != 37467               // 'catch' 'ancestor'
       && lk != 37979               // 'catch' 'ancestor-or-self'
       && lk != 39515               // 'catch' 'append'
       && lk != 40027               // 'catch' 'array'
       && lk != 40539               // 'catch' 'as'
       && lk != 41051               // 'catch' 'ascending'
       && lk != 41563               // 'catch' 'at'
       && lk != 42075               // 'catch' 'attribute'
       && lk != 42587               // 'catch' 'base-uri'
       && lk != 43099               // 'catch' 'before'
       && lk != 43611               // 'catch' 'boundary-space'
       && lk != 44123               // 'catch' 'break'
       && lk != 45147               // 'catch' 'case'
       && lk != 46683               // 'catch' 'catch'
       && lk != 47707               // 'catch' 'child'
       && lk != 48219               // 'catch' 'collation'
       && lk != 49243               // 'catch' 'comment'
       && lk != 49755               // 'catch' 'constraint'
       && lk != 50267               // 'catch' 'construction'
       && lk != 51803               // 'catch' 'context'
       && lk != 52315               // 'catch' 'continue'
       && lk != 52827               // 'catch' 'copy'
       && lk != 53339               // 'catch' 'copy-namespaces'
       && lk != 53851               // 'catch' 'count'
       && lk != 54363               // 'catch' 'decimal-format'
       && lk != 55387               // 'catch' 'declare'
       && lk != 55899               // 'catch' 'default'
       && lk != 56411               // 'catch' 'delete'
       && lk != 56923               // 'catch' 'descendant'
       && lk != 57435               // 'catch' 'descendant-or-self'
       && lk != 57947               // 'catch' 'descending'
       && lk != 61019               // 'catch' 'document'
       && lk != 61531               // 'catch' 'document-node'
       && lk != 62043               // 'catch' 'element'
       && lk != 62555               // 'catch' 'else'
       && lk != 63067               // 'catch' 'empty'
       && lk != 63579               // 'catch' 'empty-sequence'
       && lk != 64091               // 'catch' 'encoding'
       && lk != 64603               // 'catch' 'end'
       && lk != 66139               // 'catch' 'every'
       && lk != 67675               // 'catch' 'exit'
       && lk != 68187               // 'catch' 'external'
       && lk != 68699               // 'catch' 'first'
       && lk != 69211               // 'catch' 'following'
       && lk != 69723               // 'catch' 'following-sibling'
       && lk != 70235               // 'catch' 'for'
       && lk != 72283               // 'catch' 'ft-option'
       && lk != 74331               // 'catch' 'function'
       && lk != 75867               // 'catch' 'group'
       && lk != 77915               // 'catch' 'if'
       && lk != 78427               // 'catch' 'import'
       && lk != 78939               // 'catch' 'in'
       && lk != 79451               // 'catch' 'index'
       && lk != 81499               // 'catch' 'insert'
       && lk != 82523               // 'catch' 'integrity'
       && lk != 83547               // 'catch' 'into'
       && lk != 84571               // 'catch' 'item'
       && lk != 85083               // 'catch' 'json'
       && lk != 85595               // 'catch' 'json-item'
       && lk != 87131               // 'catch' 'last'
       && lk != 87643               // 'catch' 'lax'
       && lk != 89179               // 'catch' 'let'
       && lk != 90203               // 'catch' 'loop'
       && lk != 92763               // 'catch' 'modify'
       && lk != 93275               // 'catch' 'module'
       && lk != 94299               // 'catch' 'namespace'
       && lk != 94811               // 'catch' 'namespace-node'
       && lk != 97883               // 'catch' 'node'
       && lk != 98395               // 'catch' 'nodes'
       && lk != 99419               // 'catch' 'object'
       && lk != 101467              // 'catch' 'only'
       && lk != 101979              // 'catch' 'option'
       && lk != 103003              // 'catch' 'order'
       && lk != 103515              // 'catch' 'ordered'
       && lk != 104027              // 'catch' 'ordering'
       && lk != 105563              // 'catch' 'parent'
       && lk != 108635              // 'catch' 'preceding'
       && lk != 109147              // 'catch' 'preceding-sibling'
       && lk != 110683              // 'catch' 'processing-instruction'
       && lk != 111707              // 'catch' 'rename'
       && lk != 112219              // 'catch' 'replace'
       && lk != 112731              // 'catch' 'return'
       && lk != 113243              // 'catch' 'returning'
       && lk != 113755              // 'catch' 'revalidation'
       && lk != 114779              // 'catch' 'satisfies'
       && lk != 115291              // 'catch' 'schema'
       && lk != 115803              // 'catch' 'schema-attribute'
       && lk != 116315              // 'catch' 'schema-element'
       && lk != 116827              // 'catch' 'score'
       && lk != 117339              // 'catch' 'self'
       && lk != 119899              // 'catch' 'sliding'
       && lk != 120411              // 'catch' 'some'
       && lk != 120923              // 'catch' 'stable'
       && lk != 121435              // 'catch' 'start'
       && lk != 122971              // 'catch' 'strict'
       && lk != 123995              // 'catch' 'structured-item'
       && lk != 124507              // 'catch' 'switch'
       && lk != 125019              // 'catch' 'text'
       && lk != 128091              // 'catch' 'try'
       && lk != 128603              // 'catch' 'tumbling'
       && lk != 129115              // 'catch' 'type'
       && lk != 129627              // 'catch' 'typeswitch'
       && lk != 131163              // 'catch' 'unordered'
       && lk != 131675              // 'catch' 'updating'
       && lk != 133211              // 'catch' 'validate'
       && lk != 133723              // 'catch' 'value'
       && lk != 134235              // 'catch' 'variable'
       && lk != 134747              // 'catch' 'version'
       && lk != 136283              // 'catch' 'where'
       && lk != 136795              // 'catch' 'while'
       && lk != 138331              // 'catch' 'with'
       && lk != 140379)             // 'catch' 'xquery'
      {
        break;
      }
    }
    eventHandler.endNonterminal("TryCatchStatement", e0);
  }

  function try_TryCatchStatement()
  {
    shiftT(250);                    // 'try'
    lookahead1W(87);                // S^WS | '(:' | '{'
    try_BlockStatement();
    lookahead1W(36);                // S^WS | '(:' | 'catch'
    shiftT(91);                     // 'catch'
    lookahead1W(256);               // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
    try_CatchErrorList();
    try_BlockStatement();
    for (;;)
    {
      lookahead1W(277);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | EOF | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' |
                                    // '..' | '/' | '//' | ';' | '<' | '<!--' | '<?' | '@' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|' | '}'
      switch (l1)
      {
      case 91:                      // 'catch'
        lookahead2W(278);           // Wildcard | EQName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' |
                                    // '+' | ',' | '-' | '/' | '//' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' |
                                    // '>>' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'contains' |
                                    // 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' |
                                    // 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '|' | '||' | '}'
        break;
      default:
        lk = l1;
      }
      if (lk == 38491               // 'catch' 'and'
       || lk == 45659               // 'catch' 'cast'
       || lk == 46171               // 'catch' 'castable'
       || lk == 60507               // 'catch' 'div'
       || lk == 65627               // 'catch' 'eq'
       || lk == 67163               // 'catch' 'except'
       || lk == 74843               // 'catch' 'ge'
       || lk == 76891               // 'catch' 'gt'
       || lk == 77403               // 'catch' 'idiv'
       || lk == 82011               // 'catch' 'instance'
       || lk == 83035               // 'catch' 'intersect'
       || lk == 84059               // 'catch' 'is'
       || lk == 88155               // 'catch' 'le'
       || lk == 91227               // 'catch' 'lt'
       || lk == 92251               // 'catch' 'mod'
       || lk == 95323               // 'catch' 'ne'
       || lk == 102491              // 'catch' 'or'
       || lk == 127067              // 'catch' 'to'
       || lk == 127579              // 'catch' 'treat'
       || lk == 130139)             // 'catch' 'union'
      {
        lk = memoized(7, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2;
          try
          {
            lookahead1W(36);        // S^WS | '(:' | 'catch'
            shiftT(91);             // 'catch'
            lookahead1W(256);       // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
            try_CatchErrorList();
            try_BlockStatement();
            memoize(7, e0A, -1);
            continue;
          }
          catch (p1A)
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            memoize(7, e0A, -2);
            break;
          }
        }
      }
      if (lk != -1
       && lk != 2651                // 'catch' Wildcard
       && lk != 3163                // 'catch' EQName^Token
       && lk != 35931               // 'catch' 'after'
       && lk != 36955               // 'catch' 'allowing'
       && lk != 37467               // 'catch' 'ancestor'
       && lk != 37979               // 'catch' 'ancestor-or-self'
       && lk != 39515               // 'catch' 'append'
       && lk != 40027               // 'catch' 'array'
       && lk != 40539               // 'catch' 'as'
       && lk != 41051               // 'catch' 'ascending'
       && lk != 41563               // 'catch' 'at'
       && lk != 42075               // 'catch' 'attribute'
       && lk != 42587               // 'catch' 'base-uri'
       && lk != 43099               // 'catch' 'before'
       && lk != 43611               // 'catch' 'boundary-space'
       && lk != 44123               // 'catch' 'break'
       && lk != 45147               // 'catch' 'case'
       && lk != 46683               // 'catch' 'catch'
       && lk != 47707               // 'catch' 'child'
       && lk != 48219               // 'catch' 'collation'
       && lk != 49243               // 'catch' 'comment'
       && lk != 49755               // 'catch' 'constraint'
       && lk != 50267               // 'catch' 'construction'
       && lk != 51803               // 'catch' 'context'
       && lk != 52315               // 'catch' 'continue'
       && lk != 52827               // 'catch' 'copy'
       && lk != 53339               // 'catch' 'copy-namespaces'
       && lk != 53851               // 'catch' 'count'
       && lk != 54363               // 'catch' 'decimal-format'
       && lk != 55387               // 'catch' 'declare'
       && lk != 55899               // 'catch' 'default'
       && lk != 56411               // 'catch' 'delete'
       && lk != 56923               // 'catch' 'descendant'
       && lk != 57435               // 'catch' 'descendant-or-self'
       && lk != 57947               // 'catch' 'descending'
       && lk != 61019               // 'catch' 'document'
       && lk != 61531               // 'catch' 'document-node'
       && lk != 62043               // 'catch' 'element'
       && lk != 62555               // 'catch' 'else'
       && lk != 63067               // 'catch' 'empty'
       && lk != 63579               // 'catch' 'empty-sequence'
       && lk != 64091               // 'catch' 'encoding'
       && lk != 64603               // 'catch' 'end'
       && lk != 66139               // 'catch' 'every'
       && lk != 67675               // 'catch' 'exit'
       && lk != 68187               // 'catch' 'external'
       && lk != 68699               // 'catch' 'first'
       && lk != 69211               // 'catch' 'following'
       && lk != 69723               // 'catch' 'following-sibling'
       && lk != 70235               // 'catch' 'for'
       && lk != 72283               // 'catch' 'ft-option'
       && lk != 74331               // 'catch' 'function'
       && lk != 75867               // 'catch' 'group'
       && lk != 77915               // 'catch' 'if'
       && lk != 78427               // 'catch' 'import'
       && lk != 78939               // 'catch' 'in'
       && lk != 79451               // 'catch' 'index'
       && lk != 81499               // 'catch' 'insert'
       && lk != 82523               // 'catch' 'integrity'
       && lk != 83547               // 'catch' 'into'
       && lk != 84571               // 'catch' 'item'
       && lk != 85083               // 'catch' 'json'
       && lk != 85595               // 'catch' 'json-item'
       && lk != 87131               // 'catch' 'last'
       && lk != 87643               // 'catch' 'lax'
       && lk != 89179               // 'catch' 'let'
       && lk != 90203               // 'catch' 'loop'
       && lk != 92763               // 'catch' 'modify'
       && lk != 93275               // 'catch' 'module'
       && lk != 94299               // 'catch' 'namespace'
       && lk != 94811               // 'catch' 'namespace-node'
       && lk != 97883               // 'catch' 'node'
       && lk != 98395               // 'catch' 'nodes'
       && lk != 99419               // 'catch' 'object'
       && lk != 101467              // 'catch' 'only'
       && lk != 101979              // 'catch' 'option'
       && lk != 103003              // 'catch' 'order'
       && lk != 103515              // 'catch' 'ordered'
       && lk != 104027              // 'catch' 'ordering'
       && lk != 105563              // 'catch' 'parent'
       && lk != 108635              // 'catch' 'preceding'
       && lk != 109147              // 'catch' 'preceding-sibling'
       && lk != 110683              // 'catch' 'processing-instruction'
       && lk != 111707              // 'catch' 'rename'
       && lk != 112219              // 'catch' 'replace'
       && lk != 112731              // 'catch' 'return'
       && lk != 113243              // 'catch' 'returning'
       && lk != 113755              // 'catch' 'revalidation'
       && lk != 114779              // 'catch' 'satisfies'
       && lk != 115291              // 'catch' 'schema'
       && lk != 115803              // 'catch' 'schema-attribute'
       && lk != 116315              // 'catch' 'schema-element'
       && lk != 116827              // 'catch' 'score'
       && lk != 117339              // 'catch' 'self'
       && lk != 119899              // 'catch' 'sliding'
       && lk != 120411              // 'catch' 'some'
       && lk != 120923              // 'catch' 'stable'
       && lk != 121435              // 'catch' 'start'
       && lk != 122971              // 'catch' 'strict'
       && lk != 123995              // 'catch' 'structured-item'
       && lk != 124507              // 'catch' 'switch'
       && lk != 125019              // 'catch' 'text'
       && lk != 128091              // 'catch' 'try'
       && lk != 128603              // 'catch' 'tumbling'
       && lk != 129115              // 'catch' 'type'
       && lk != 129627              // 'catch' 'typeswitch'
       && lk != 131163              // 'catch' 'unordered'
       && lk != 131675              // 'catch' 'updating'
       && lk != 133211              // 'catch' 'validate'
       && lk != 133723              // 'catch' 'value'
       && lk != 134235              // 'catch' 'variable'
       && lk != 134747              // 'catch' 'version'
       && lk != 136283              // 'catch' 'where'
       && lk != 136795              // 'catch' 'while'
       && lk != 138331              // 'catch' 'with'
       && lk != 140379)             // 'catch' 'xquery'
      {
        break;
      }
      lookahead1W(36);              // S^WS | '(:' | 'catch'
      shiftT(91);                   // 'catch'
      lookahead1W(256);             // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
      try_CatchErrorList();
      try_BlockStatement();
    }
  }

  function parse_TypeswitchStatement()
  {
    eventHandler.startNonterminal("TypeswitchStatement", e0);
    shift(253);                     // 'typeswitch'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shift(34);                      // '('
    lookahead1W(266);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_Expr();
    shift(37);                      // ')'
    for (;;)
    {
      lookahead1W(35);              // S^WS | '(:' | 'case'
      whitespace();
      parse_CaseStatement();
      lookahead1W(113);             // S^WS | '(:' | 'case' | 'default'
      if (l1 != 88)                 // 'case'
      {
        break;
      }
    }
    shift(109);                     // 'default'
    lookahead1W(95);                // S^WS | '$' | '(:' | 'return'
    if (l1 == 31)                   // '$'
    {
      shift(31);                    // '$'
      lookahead1W(254);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_VarName();
    }
    lookahead1W(70);                // S^WS | '(:' | 'return'
    shift(220);                     // 'return'
    lookahead1W(269);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_Statement();
    eventHandler.endNonterminal("TypeswitchStatement", e0);
  }

  function try_TypeswitchStatement()
  {
    shiftT(253);                    // 'typeswitch'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shiftT(34);                     // '('
    lookahead1W(266);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
    try_Expr();
    shiftT(37);                     // ')'
    for (;;)
    {
      lookahead1W(35);              // S^WS | '(:' | 'case'
      try_CaseStatement();
      lookahead1W(113);             // S^WS | '(:' | 'case' | 'default'
      if (l1 != 88)                 // 'case'
      {
        break;
      }
    }
    shiftT(109);                    // 'default'
    lookahead1W(95);                // S^WS | '$' | '(:' | 'return'
    if (l1 == 31)                   // '$'
    {
      shiftT(31);                   // '$'
      lookahead1W(254);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
      try_VarName();
    }
    lookahead1W(70);                // S^WS | '(:' | 'return'
    shiftT(220);                    // 'return'
    lookahead1W(269);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
    try_Statement();
  }

  function parse_CaseStatement()
  {
    eventHandler.startNonterminal("CaseStatement", e0);
    shift(88);                      // 'case'
    lookahead1W(261);               // EQName^Token | S^WS | '$' | '%' | '(' | '(:' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
    if (l1 == 31)                   // '$'
    {
      shift(31);                    // '$'
      lookahead1W(254);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_VarName();
      lookahead1W(30);              // S^WS | '(:' | 'as'
      shift(79);                    // 'as'
    }
    lookahead1W(259);               // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_SequenceType();
    lookahead1W(70);                // S^WS | '(:' | 'return'
    shift(220);                     // 'return'
    lookahead1W(269);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_Statement();
    eventHandler.endNonterminal("CaseStatement", e0);
  }

  function try_CaseStatement()
  {
    shiftT(88);                     // 'case'
    lookahead1W(261);               // EQName^Token | S^WS | '$' | '%' | '(' | '(:' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
    if (l1 == 31)                   // '$'
    {
      shiftT(31);                   // '$'
      lookahead1W(254);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
      try_VarName();
      lookahead1W(30);              // S^WS | '(:' | 'as'
      shiftT(79);                   // 'as'
    }
    lookahead1W(259);               // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
    try_SequenceType();
    lookahead1W(70);                // S^WS | '(:' | 'return'
    shiftT(220);                    // 'return'
    lookahead1W(269);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
    try_Statement();
  }

  function parse_VarDeclStatement()
  {
    eventHandler.startNonterminal("VarDeclStatement", e0);
    for (;;)
    {
      lookahead1W(98);              // S^WS | '%' | '(:' | 'variable'
      if (l1 != 32)                 // '%'
      {
        break;
      }
      whitespace();
      parse_Annotation();
    }
    shift(262);                     // 'variable'
    lookahead1W(21);                // S^WS | '$' | '(:'
    shift(31);                      // '$'
    lookahead1W(254);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_VarName();
    lookahead1W(157);               // S^WS | '(:' | ',' | ':=' | ';' | 'as'
    if (l1 == 79)                   // 'as'
    {
      whitespace();
      parse_TypeDeclaration();
    }
    lookahead1W(145);               // S^WS | '(:' | ',' | ':=' | ';'
    if (l1 == 52)                   // ':='
    {
      shift(52);                    // ':='
      lookahead1W(266);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_ExprSingle();
    }
    for (;;)
    {
      if (l1 != 41)                 // ','
      {
        break;
      }
      shift(41);                    // ','
      lookahead1W(21);              // S^WS | '$' | '(:'
      shift(31);                    // '$'
      lookahead1W(254);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_VarName();
      lookahead1W(157);             // S^WS | '(:' | ',' | ':=' | ';' | 'as'
      if (l1 == 79)                 // 'as'
      {
        whitespace();
        parse_TypeDeclaration();
      }
      lookahead1W(145);             // S^WS | '(:' | ',' | ':=' | ';'
      if (l1 == 52)                 // ':='
      {
        shift(52);                  // ':='
        lookahead1W(266);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
        whitespace();
        parse_ExprSingle();
      }
    }
    shift(53);                      // ';'
    eventHandler.endNonterminal("VarDeclStatement", e0);
  }

  function try_VarDeclStatement()
  {
    for (;;)
    {
      lookahead1W(98);              // S^WS | '%' | '(:' | 'variable'
      if (l1 != 32)                 // '%'
      {
        break;
      }
      try_Annotation();
    }
    shiftT(262);                    // 'variable'
    lookahead1W(21);                // S^WS | '$' | '(:'
    shiftT(31);                     // '$'
    lookahead1W(254);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
    try_VarName();
    lookahead1W(157);               // S^WS | '(:' | ',' | ':=' | ';' | 'as'
    if (l1 == 79)                   // 'as'
    {
      try_TypeDeclaration();
    }
    lookahead1W(145);               // S^WS | '(:' | ',' | ':=' | ';'
    if (l1 == 52)                   // ':='
    {
      shiftT(52);                   // ':='
      lookahead1W(266);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      try_ExprSingle();
    }
    for (;;)
    {
      if (l1 != 41)                 // ','
      {
        break;
      }
      shiftT(41);                   // ','
      lookahead1W(21);              // S^WS | '$' | '(:'
      shiftT(31);                   // '$'
      lookahead1W(254);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
      try_VarName();
      lookahead1W(157);             // S^WS | '(:' | ',' | ':=' | ';' | 'as'
      if (l1 == 79)                 // 'as'
      {
        try_TypeDeclaration();
      }
      lookahead1W(145);             // S^WS | '(:' | ',' | ':=' | ';'
      if (l1 == 52)                 // ':='
      {
        shiftT(52);                 // ':='
        lookahead1W(266);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
        try_ExprSingle();
      }
    }
    shiftT(53);                     // ';'
  }

  function parse_WhileStatement()
  {
    eventHandler.startNonterminal("WhileStatement", e0);
    shift(267);                     // 'while'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shift(34);                      // '('
    lookahead1W(266);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_Expr();
    shift(37);                      // ')'
    lookahead1W(269);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_Statement();
    eventHandler.endNonterminal("WhileStatement", e0);
  }

  function try_WhileStatement()
  {
    shiftT(267);                    // 'while'
    lookahead1W(22);                // S^WS | '(' | '(:'
    shiftT(34);                     // '('
    lookahead1W(266);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
    try_Expr();
    shiftT(37);                     // ')'
    lookahead1W(269);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
    try_Statement();
  }

  function parse_VoidStatement()
  {
    eventHandler.startNonterminal("VoidStatement", e0);
    shift(53);                      // ';'
    eventHandler.endNonterminal("VoidStatement", e0);
  }

  function try_VoidStatement()
  {
    shiftT(53);                     // ';'
  }

  function parse_ExprSingle()
  {
    eventHandler.startNonterminal("ExprSingle", e0);
    switch (l1)
    {
    case 137:                       // 'for'
      lookahead2W(235);             // S^WS | EOF | '!' | '!=' | '#' | '$' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' |
                                    // '/' | '//' | ':' | ':=' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' |
                                    // '[' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' |
                                    // 'cast' | 'castable' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'return' | 'satisfies' | 'sliding' | 'stable' | 'start' | 'to' | 'treat' |
                                    // 'tumbling' | 'union' | 'where' | 'with' | '|' | '||' | '|}' | '}'
      break;
    case 174:                       // 'let'
      lookahead2W(232);             // S^WS | EOF | '!' | '!=' | '#' | '$' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' |
                                    // '/' | '//' | ':' | ':=' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' |
                                    // '[' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' |
                                    // 'cast' | 'castable' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'return' | 'satisfies' | 'score' | 'stable' | 'start' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | '|' | '||' | '|}' | '}'
      break;
    case 250:                       // 'try'
      lookahead2W(231);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ':=' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                    // 'stable' | 'start' | 'to' | 'treat' | 'union' | 'where' | 'with' | '{' | '|' |
                                    // '||' | '|}' | '}'
      break;
    case 152:                       // 'if'
    case 243:                       // 'switch'
    case 253:                       // 'typeswitch'
      lookahead2W(228);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ':=' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                    // 'stable' | 'start' | 'to' | 'treat' | 'union' | 'where' | 'with' | '|' | '||' |
                                    // '|}' | '}'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 16009:                     // 'for' '$'
    case 16046:                     // 'let' '$'
    case 116910:                    // 'let' 'score'
    case 119945:                    // 'for' 'sliding'
    case 128649:                    // 'for' 'tumbling'
      parse_FLWORExpr();
      break;
    case 17560:                     // 'if' '('
      parse_IfExpr();
      break;
    case 17651:                     // 'switch' '('
      parse_SwitchExpr();
      break;
    case 141562:                    // 'try' '{'
      parse_TryCatchExpr();
      break;
    case 17661:                     // 'typeswitch' '('
      parse_TypeswitchExpr();
      break;
    default:
      parse_ExprSimple();
    }
    eventHandler.endNonterminal("ExprSingle", e0);
  }

  function try_ExprSingle()
  {
    switch (l1)
    {
    case 137:                       // 'for'
      lookahead2W(235);             // S^WS | EOF | '!' | '!=' | '#' | '$' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' |
                                    // '/' | '//' | ':' | ':=' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' |
                                    // '[' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' |
                                    // 'cast' | 'castable' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'return' | 'satisfies' | 'sliding' | 'stable' | 'start' | 'to' | 'treat' |
                                    // 'tumbling' | 'union' | 'where' | 'with' | '|' | '||' | '|}' | '}'
      break;
    case 174:                       // 'let'
      lookahead2W(232);             // S^WS | EOF | '!' | '!=' | '#' | '$' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' |
                                    // '/' | '//' | ':' | ':=' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' |
                                    // '[' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' |
                                    // 'cast' | 'castable' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'return' | 'satisfies' | 'score' | 'stable' | 'start' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | '|' | '||' | '|}' | '}'
      break;
    case 250:                       // 'try'
      lookahead2W(231);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ':=' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                    // 'stable' | 'start' | 'to' | 'treat' | 'union' | 'where' | 'with' | '{' | '|' |
                                    // '||' | '|}' | '}'
      break;
    case 152:                       // 'if'
    case 243:                       // 'switch'
    case 253:                       // 'typeswitch'
      lookahead2W(228);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ':=' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                    // 'stable' | 'start' | 'to' | 'treat' | 'union' | 'where' | 'with' | '|' | '||' |
                                    // '|}' | '}'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 16009:                     // 'for' '$'
    case 16046:                     // 'let' '$'
    case 116910:                    // 'let' 'score'
    case 119945:                    // 'for' 'sliding'
    case 128649:                    // 'for' 'tumbling'
      try_FLWORExpr();
      break;
    case 17560:                     // 'if' '('
      try_IfExpr();
      break;
    case 17651:                     // 'switch' '('
      try_SwitchExpr();
      break;
    case 141562:                    // 'try' '{'
      try_TryCatchExpr();
      break;
    case 17661:                     // 'typeswitch' '('
      try_TypeswitchExpr();
      break;
    default:
      try_ExprSimple();
    }
  }

  function parse_ExprSimple()
  {
    eventHandler.startNonterminal("ExprSimple", e0);
    switch (l1)
    {
    case 77:                        // 'append'
      lookahead2W(230);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ':=' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'json' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'return' |
                                    // 'satisfies' | 'stable' | 'start' | 'to' | 'treat' | 'union' | 'where' | 'with' |
                                    // '|' | '||' | '|}' | '}'
      break;
    case 218:                       // 'rename'
      lookahead2W(233);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ':=' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'json' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'treat' | 'union' |
                                    // 'where' | 'with' | '|' | '||' | '|}' | '}'
      break;
    case 219:                       // 'replace'
      lookahead2W(237);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ':=' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'json' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'treat' | 'union' |
                                    // 'value' | 'where' | 'with' | '|' | '||' | '|}' | '}'
      break;
    case 110:                       // 'delete'
    case 159:                       // 'insert'
      lookahead2W(236);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ':=' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'json' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'node' | 'nodes' | 'only' | 'or' |
                                    // 'order' | 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | '|' | '||' | '|}' | '}'
      break;
    case 103:                       // 'copy'
    case 129:                       // 'every'
    case 235:                       // 'some'
      lookahead2W(229);             // S^WS | EOF | '!' | '!=' | '#' | '$' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' |
                                    // '/' | '//' | ':' | ':=' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' |
                                    // '[' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' |
                                    // 'cast' | 'castable' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'treat' | 'union' |
                                    // 'where' | 'with' | '|' | '||' | '|}' | '}'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 16001:                     // 'every' '$'
    case 16107:                     // 'some' '$'
      parse_QuantifiedExpr();
      break;
    case 97951:                     // 'insert' 'node'
    case 98463:                     // 'insert' 'nodes'
      parse_InsertExpr();
      break;
    case 97902:                     // 'delete' 'node'
    case 98414:                     // 'delete' 'nodes'
      parse_DeleteExpr();
      break;
    case 98010:                     // 'rename' 'node'
      parse_RenameExpr();
      break;
    case 98011:                     // 'replace' 'node'
    case 133851:                    // 'replace' 'value'
      parse_ReplaceExpr();
      break;
    case 15975:                     // 'copy' '$'
      parse_TransformExpr();
      break;
    case 85102:                     // 'delete' 'json'
      parse_JSONDeleteExpr();
      break;
    case 85151:                     // 'insert' 'json'
      parse_JSONInsertExpr();
      break;
    case 85210:                     // 'rename' 'json'
      parse_JSONRenameExpr();
      break;
    case 85211:                     // 'replace' 'json'
      parse_JSONReplaceExpr();
      break;
    case 85069:                     // 'append' 'json'
      parse_JSONAppendExpr();
      break;
    default:
      parse_OrExpr();
    }
    eventHandler.endNonterminal("ExprSimple", e0);
  }

  function try_ExprSimple()
  {
    switch (l1)
    {
    case 77:                        // 'append'
      lookahead2W(230);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ':=' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'json' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'return' |
                                    // 'satisfies' | 'stable' | 'start' | 'to' | 'treat' | 'union' | 'where' | 'with' |
                                    // '|' | '||' | '|}' | '}'
      break;
    case 218:                       // 'rename'
      lookahead2W(233);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ':=' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'json' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'treat' | 'union' |
                                    // 'where' | 'with' | '|' | '||' | '|}' | '}'
      break;
    case 219:                       // 'replace'
      lookahead2W(237);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ':=' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'json' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'treat' | 'union' |
                                    // 'value' | 'where' | 'with' | '|' | '||' | '|}' | '}'
      break;
    case 110:                       // 'delete'
    case 159:                       // 'insert'
      lookahead2W(236);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ':=' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'json' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'node' | 'nodes' | 'only' | 'or' |
                                    // 'order' | 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | '|' | '||' | '|}' | '}'
      break;
    case 103:                       // 'copy'
    case 129:                       // 'every'
    case 235:                       // 'some'
      lookahead2W(229);             // S^WS | EOF | '!' | '!=' | '#' | '$' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' |
                                    // '/' | '//' | ':' | ':=' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' |
                                    // '[' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' |
                                    // 'cast' | 'castable' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'treat' | 'union' |
                                    // 'where' | 'with' | '|' | '||' | '|}' | '}'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 16001:                     // 'every' '$'
    case 16107:                     // 'some' '$'
      try_QuantifiedExpr();
      break;
    case 97951:                     // 'insert' 'node'
    case 98463:                     // 'insert' 'nodes'
      try_InsertExpr();
      break;
    case 97902:                     // 'delete' 'node'
    case 98414:                     // 'delete' 'nodes'
      try_DeleteExpr();
      break;
    case 98010:                     // 'rename' 'node'
      try_RenameExpr();
      break;
    case 98011:                     // 'replace' 'node'
    case 133851:                    // 'replace' 'value'
      try_ReplaceExpr();
      break;
    case 15975:                     // 'copy' '$'
      try_TransformExpr();
      break;
    case 85102:                     // 'delete' 'json'
      try_JSONDeleteExpr();
      break;
    case 85151:                     // 'insert' 'json'
      try_JSONInsertExpr();
      break;
    case 85210:                     // 'rename' 'json'
      try_JSONRenameExpr();
      break;
    case 85211:                     // 'replace' 'json'
      try_JSONReplaceExpr();
      break;
    case 85069:                     // 'append' 'json'
      try_JSONAppendExpr();
      break;
    default:
      try_OrExpr();
    }
  }

  function parse_JSONDeleteExpr()
  {
    eventHandler.startNonterminal("JSONDeleteExpr", e0);
    shift(110);                     // 'delete'
    lookahead1W(56);                // S^WS | '(:' | 'json'
    shift(166);                     // 'json'
    lookahead1W(263);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(:' | '.' | '<' | '<!--' | '<?' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
    whitespace();
    parse_PostfixExpr();
    eventHandler.endNonterminal("JSONDeleteExpr", e0);
  }

  function try_JSONDeleteExpr()
  {
    shiftT(110);                    // 'delete'
    lookahead1W(56);                // S^WS | '(:' | 'json'
    shiftT(166);                    // 'json'
    lookahead1W(263);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(:' | '.' | '<' | '<!--' | '<?' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
    try_PostfixExpr();
  }

  function parse_JSONInsertExpr()
  {
    eventHandler.startNonterminal("JSONInsertExpr", e0);
    switch (l1)
    {
    case 159:                       // 'insert'
      lookahead2W(56);              // S^WS | '(:' | 'json'
      break;
    default:
      lk = l1;
    }
    lk = memoized(8, e0);
    if (lk == 0)
    {
      var b0A = b0; var e0A = e0; var l1A = l1;
      var b1A = b1; var e1A = e1; var l2A = l2;
      var b2A = b2; var e2A = e2;
      try
      {
        shiftT(159);                // 'insert'
        lookahead1W(56);            // S^WS | '(:' | 'json'
        shiftT(166);                // 'json'
        lookahead1W(266);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
        try_ExprSingle();
        shiftT(163);                // 'into'
        lookahead1W(266);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
        try_ExprSingle();
        switch (l1)
        {
        case 81:                    // 'at'
          lookahead2W(69);          // S^WS | '(:' | 'position'
          break;
        default:
          lk = l1;
        }
        if (lk == 108113)           // 'at' 'position'
        {
          lk = memoized(9, e0);
          if (lk == 0)
          {
            var b0B = b0; var e0B = e0; var l1B = l1;
            var b1B = b1; var e1B = e1; var l2B = l2;
            var b2B = b2; var e2B = e2;
            try
            {
              shiftT(81);           // 'at'
              lookahead1W(69);      // S^WS | '(:' | 'position'
              shiftT(211);          // 'position'
              lookahead1W(266);     // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
              try_ExprSingle();
              memoize(9, e0B, -1);
            }
            catch (p1B)
            {
              b0 = b0B; e0 = e0B; l1 = l1B; if (l1 == 0) {end = e0B;} else {
              b1 = b1B; e1 = e1B; l2 = l2B; if (l2 == 0) {end = e1B;} else {
              b2 = b2B; e2 = e2B; end = e2B; }}
              memoize(9, e0B, -2);
            }
            lk = -2;
          }
        }
        if (lk == -1)
        {
          shiftT(81);               // 'at'
          lookahead1W(69);          // S^WS | '(:' | 'position'
          shiftT(211);              // 'position'
          lookahead1W(266);         // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
          try_ExprSingle();
        }
        lk = -1;
      }
      catch (p1A)
      {
        lk = -2;
      }
      b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
      b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
      b2 = b2A; e2 = e2A; end = e2A; }}
      memoize(8, e0, lk);
    }
    switch (lk)
    {
    case -1:
      shift(159);                   // 'insert'
      lookahead1W(56);              // S^WS | '(:' | 'json'
      shift(166);                   // 'json'
      lookahead1W(266);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_ExprSingle();
      shift(163);                   // 'into'
      lookahead1W(266);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_ExprSingle();
      switch (l1)
      {
      case 81:                      // 'at'
        lookahead2W(69);            // S^WS | '(:' | 'position'
        break;
      default:
        lk = l1;
      }
      if (lk == 108113)             // 'at' 'position'
      {
        lk = memoized(9, e0);
        if (lk == 0)
        {
          var b0B = b0; var e0B = e0; var l1B = l1;
          var b1B = b1; var e1B = e1; var l2B = l2;
          var b2B = b2; var e2B = e2;
          try
          {
            shiftT(81);             // 'at'
            lookahead1W(69);        // S^WS | '(:' | 'position'
            shiftT(211);            // 'position'
            lookahead1W(266);       // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
            try_ExprSingle();
            lk = -1;
          }
          catch (p1B)
          {
            lk = -2;
          }
          b0 = b0B; e0 = e0B; l1 = l1B; if (l1 == 0) {end = e0B;} else {
          b1 = b1B; e1 = e1B; l2 = l2B; if (l2 == 0) {end = e1B;} else {
          b2 = b2B; e2 = e2B; end = e2B; }}
          memoize(9, e0, lk);
        }
      }
      if (lk == -1)
      {
        shift(81);                  // 'at'
        lookahead1W(69);            // S^WS | '(:' | 'position'
        shift(211);                 // 'position'
        lookahead1W(266);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
        whitespace();
        parse_ExprSingle();
      }
      break;
    default:
      shift(159);                   // 'insert'
      lookahead1W(56);              // S^WS | '(:' | 'json'
      shift(166);                   // 'json'
      lookahead1W(266);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_PairConstructorList();
      shift(163);                   // 'into'
      lookahead1W(266);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_ExprSingle();
    }
    eventHandler.endNonterminal("JSONInsertExpr", e0);
  }

  function try_JSONInsertExpr()
  {
    switch (l1)
    {
    case 159:                       // 'insert'
      lookahead2W(56);              // S^WS | '(:' | 'json'
      break;
    default:
      lk = l1;
    }
    lk = memoized(8, e0);
    if (lk == 0)
    {
      var b0A = b0; var e0A = e0; var l1A = l1;
      var b1A = b1; var e1A = e1; var l2A = l2;
      var b2A = b2; var e2A = e2;
      try
      {
        shiftT(159);                // 'insert'
        lookahead1W(56);            // S^WS | '(:' | 'json'
        shiftT(166);                // 'json'
        lookahead1W(266);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
        try_ExprSingle();
        shiftT(163);                // 'into'
        lookahead1W(266);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
        try_ExprSingle();
        switch (l1)
        {
        case 81:                    // 'at'
          lookahead2W(69);          // S^WS | '(:' | 'position'
          break;
        default:
          lk = l1;
        }
        if (lk == 108113)           // 'at' 'position'
        {
          lk = memoized(9, e0);
          if (lk == 0)
          {
            var b0B = b0; var e0B = e0; var l1B = l1;
            var b1B = b1; var e1B = e1; var l2B = l2;
            var b2B = b2; var e2B = e2;
            try
            {
              shiftT(81);           // 'at'
              lookahead1W(69);      // S^WS | '(:' | 'position'
              shiftT(211);          // 'position'
              lookahead1W(266);     // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
              try_ExprSingle();
              memoize(9, e0B, -1);
            }
            catch (p1B)
            {
              b0 = b0B; e0 = e0B; l1 = l1B; if (l1 == 0) {end = e0B;} else {
              b1 = b1B; e1 = e1B; l2 = l2B; if (l2 == 0) {end = e1B;} else {
              b2 = b2B; e2 = e2B; end = e2B; }}
              memoize(9, e0B, -2);
            }
            lk = -2;
          }
        }
        if (lk == -1)
        {
          shiftT(81);               // 'at'
          lookahead1W(69);          // S^WS | '(:' | 'position'
          shiftT(211);              // 'position'
          lookahead1W(266);         // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
          try_ExprSingle();
        }
        memoize(8, e0A, -1);
        lk = -3;
      }
      catch (p1A)
      {
        lk = -2;
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(8, e0A, -2);
      }
    }
    switch (lk)
    {
    case -1:
      shiftT(159);                  // 'insert'
      lookahead1W(56);              // S^WS | '(:' | 'json'
      shiftT(166);                  // 'json'
      lookahead1W(266);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      try_ExprSingle();
      shiftT(163);                  // 'into'
      lookahead1W(266);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      try_ExprSingle();
      switch (l1)
      {
      case 81:                      // 'at'
        lookahead2W(69);            // S^WS | '(:' | 'position'
        break;
      default:
        lk = l1;
      }
      if (lk == 108113)             // 'at' 'position'
      {
        lk = memoized(9, e0);
        if (lk == 0)
        {
          var b0B = b0; var e0B = e0; var l1B = l1;
          var b1B = b1; var e1B = e1; var l2B = l2;
          var b2B = b2; var e2B = e2;
          try
          {
            shiftT(81);             // 'at'
            lookahead1W(69);        // S^WS | '(:' | 'position'
            shiftT(211);            // 'position'
            lookahead1W(266);       // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
            try_ExprSingle();
            memoize(9, e0B, -1);
          }
          catch (p1B)
          {
            b0 = b0B; e0 = e0B; l1 = l1B; if (l1 == 0) {end = e0B;} else {
            b1 = b1B; e1 = e1B; l2 = l2B; if (l2 == 0) {end = e1B;} else {
            b2 = b2B; e2 = e2B; end = e2B; }}
            memoize(9, e0B, -2);
          }
          lk = -2;
        }
      }
      if (lk == -1)
      {
        shiftT(81);                 // 'at'
        lookahead1W(69);            // S^WS | '(:' | 'position'
        shiftT(211);                // 'position'
        lookahead1W(266);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
        try_ExprSingle();
      }
      break;
    case -3:
      break;
    default:
      shiftT(159);                  // 'insert'
      lookahead1W(56);              // S^WS | '(:' | 'json'
      shiftT(166);                  // 'json'
      lookahead1W(266);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      try_PairConstructorList();
      shiftT(163);                  // 'into'
      lookahead1W(266);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      try_ExprSingle();
    }
  }

  function parse_JSONRenameExpr()
  {
    eventHandler.startNonterminal("JSONRenameExpr", e0);
    shift(218);                     // 'rename'
    lookahead1W(56);                // S^WS | '(:' | 'json'
    shift(166);                     // 'json'
    lookahead1W(263);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(:' | '.' | '<' | '<!--' | '<?' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
    whitespace();
    parse_PostfixExpr();
    shift(79);                      // 'as'
    lookahead1W(266);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("JSONRenameExpr", e0);
  }

  function try_JSONRenameExpr()
  {
    shiftT(218);                    // 'rename'
    lookahead1W(56);                // S^WS | '(:' | 'json'
    shiftT(166);                    // 'json'
    lookahead1W(263);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(:' | '.' | '<' | '<!--' | '<?' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
    try_PostfixExpr();
    shiftT(79);                     // 'as'
    lookahead1W(266);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_JSONReplaceExpr()
  {
    eventHandler.startNonterminal("JSONReplaceExpr", e0);
    shift(219);                     // 'replace'
    lookahead1W(56);                // S^WS | '(:' | 'json'
    shift(166);                     // 'json'
    lookahead1W(82);                // S^WS | '(:' | 'value'
    shift(261);                     // 'value'
    lookahead1W(64);                // S^WS | '(:' | 'of'
    shift(196);                     // 'of'
    lookahead1W(263);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(:' | '.' | '<' | '<!--' | '<?' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
    whitespace();
    parse_PostfixExpr();
    shift(270);                     // 'with'
    lookahead1W(266);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("JSONReplaceExpr", e0);
  }

  function try_JSONReplaceExpr()
  {
    shiftT(219);                    // 'replace'
    lookahead1W(56);                // S^WS | '(:' | 'json'
    shiftT(166);                    // 'json'
    lookahead1W(82);                // S^WS | '(:' | 'value'
    shiftT(261);                    // 'value'
    lookahead1W(64);                // S^WS | '(:' | 'of'
    shiftT(196);                    // 'of'
    lookahead1W(263);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(:' | '.' | '<' | '<!--' | '<?' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' |
                                    // 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' |
                                    // 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
    try_PostfixExpr();
    shiftT(270);                    // 'with'
    lookahead1W(266);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_JSONAppendExpr()
  {
    eventHandler.startNonterminal("JSONAppendExpr", e0);
    shift(77);                      // 'append'
    lookahead1W(56);                // S^WS | '(:' | 'json'
    shift(166);                     // 'json'
    lookahead1W(266);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    shift(163);                     // 'into'
    lookahead1W(266);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("JSONAppendExpr", e0);
  }

  function try_JSONAppendExpr()
  {
    shiftT(77);                     // 'append'
    lookahead1W(56);                // S^WS | '(:' | 'json'
    shiftT(166);                    // 'json'
    lookahead1W(266);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
    shiftT(163);                    // 'into'
    lookahead1W(266);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_CommonContent()
  {
    eventHandler.startNonterminal("CommonContent", e0);
    switch (l1)
    {
    case 12:                        // PredefinedEntityRef
      shift(12);                    // PredefinedEntityRef
      break;
    case 23:                        // CharRef
      shift(23);                    // CharRef
      break;
    case 277:                       // '{{'
      shift(277);                   // '{{'
      break;
    case 283:                       // '}}'
      shift(283);                   // '}}'
      break;
    default:
      parse_BlockExpr();
    }
    eventHandler.endNonterminal("CommonContent", e0);
  }

  function try_CommonContent()
  {
    switch (l1)
    {
    case 12:                        // PredefinedEntityRef
      shiftT(12);                   // PredefinedEntityRef
      break;
    case 23:                        // CharRef
      shiftT(23);                   // CharRef
      break;
    case 277:                       // '{{'
      shiftT(277);                  // '{{'
      break;
    case 283:                       // '}}'
      shiftT(283);                  // '}}'
      break;
    default:
      try_BlockExpr();
    }
  }

  function parse_ContentExpr()
  {
    eventHandler.startNonterminal("ContentExpr", e0);
    parse_StatementsAndExpr();
    eventHandler.endNonterminal("ContentExpr", e0);
  }

  function try_ContentExpr()
  {
    try_StatementsAndExpr();
  }

  function parse_CompDocConstructor()
  {
    eventHandler.startNonterminal("CompDocConstructor", e0);
    shift(119);                     // 'document'
    lookahead1W(87);                // S^WS | '(:' | '{'
    whitespace();
    parse_BlockExpr();
    eventHandler.endNonterminal("CompDocConstructor", e0);
  }

  function try_CompDocConstructor()
  {
    shiftT(119);                    // 'document'
    lookahead1W(87);                // S^WS | '(:' | '{'
    try_BlockExpr();
  }

  function parse_CompAttrConstructor()
  {
    eventHandler.startNonterminal("CompAttrConstructor", e0);
    shift(82);                      // 'attribute'
    lookahead1W(257);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{'
    switch (l1)
    {
    case 276:                       // '{'
      shift(276);                   // '{'
      lookahead1W(266);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_Expr();
      shift(282);                   // '}'
      break;
    default:
      whitespace();
      parse_EQName();
    }
    lookahead1W(87);                // S^WS | '(:' | '{'
    switch (l1)
    {
    case 276:                       // '{'
      lookahead2W(276);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|' | '}'
      break;
    default:
      lk = l1;
    }
    if (lk == 144660)               // '{' '}'
    {
      lk = memoized(10, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          shiftT(276);              // '{'
          lookahead1W(88);          // S^WS | '(:' | '}'
          shiftT(282);              // '}'
          lk = -1;
        }
        catch (p1A)
        {
          lk = -2;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(10, e0, lk);
      }
    }
    switch (lk)
    {
    case -1:
      shift(276);                   // '{'
      lookahead1W(88);              // S^WS | '(:' | '}'
      shift(282);                   // '}'
      break;
    default:
      whitespace();
      parse_BlockExpr();
    }
    eventHandler.endNonterminal("CompAttrConstructor", e0);
  }

  function try_CompAttrConstructor()
  {
    shiftT(82);                     // 'attribute'
    lookahead1W(257);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{'
    switch (l1)
    {
    case 276:                       // '{'
      shiftT(276);                  // '{'
      lookahead1W(266);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      try_Expr();
      shiftT(282);                  // '}'
      break;
    default:
      try_EQName();
    }
    lookahead1W(87);                // S^WS | '(:' | '{'
    switch (l1)
    {
    case 276:                       // '{'
      lookahead2W(276);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|' | '}'
      break;
    default:
      lk = l1;
    }
    if (lk == 144660)               // '{' '}'
    {
      lk = memoized(10, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          shiftT(276);              // '{'
          lookahead1W(88);          // S^WS | '(:' | '}'
          shiftT(282);              // '}'
          memoize(10, e0A, -1);
          lk = -3;
        }
        catch (p1A)
        {
          lk = -2;
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(10, e0A, -2);
        }
      }
    }
    switch (lk)
    {
    case -1:
      shiftT(276);                  // '{'
      lookahead1W(88);              // S^WS | '(:' | '}'
      shiftT(282);                  // '}'
      break;
    case -3:
      break;
    default:
      try_BlockExpr();
    }
  }

  function parse_CompPIConstructor()
  {
    eventHandler.startNonterminal("CompPIConstructor", e0);
    shift(216);                     // 'processing-instruction'
    lookahead1W(250);               // NCName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'last' | 'lax' | 'le' | 'let' |
                                    // 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{'
    switch (l1)
    {
    case 276:                       // '{'
      shift(276);                   // '{'
      lookahead1W(266);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_Expr();
      shift(282);                   // '}'
      break;
    default:
      whitespace();
      parse_NCName();
    }
    lookahead1W(87);                // S^WS | '(:' | '{'
    switch (l1)
    {
    case 276:                       // '{'
      lookahead2W(276);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|' | '}'
      break;
    default:
      lk = l1;
    }
    if (lk == 144660)               // '{' '}'
    {
      lk = memoized(11, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          shiftT(276);              // '{'
          lookahead1W(88);          // S^WS | '(:' | '}'
          shiftT(282);              // '}'
          lk = -1;
        }
        catch (p1A)
        {
          lk = -2;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(11, e0, lk);
      }
    }
    switch (lk)
    {
    case -1:
      shift(276);                   // '{'
      lookahead1W(88);              // S^WS | '(:' | '}'
      shift(282);                   // '}'
      break;
    default:
      whitespace();
      parse_BlockExpr();
    }
    eventHandler.endNonterminal("CompPIConstructor", e0);
  }

  function try_CompPIConstructor()
  {
    shiftT(216);                    // 'processing-instruction'
    lookahead1W(250);               // NCName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'last' | 'lax' | 'le' | 'let' |
                                    // 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{'
    switch (l1)
    {
    case 276:                       // '{'
      shiftT(276);                  // '{'
      lookahead1W(266);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      try_Expr();
      shiftT(282);                  // '}'
      break;
    default:
      try_NCName();
    }
    lookahead1W(87);                // S^WS | '(:' | '{'
    switch (l1)
    {
    case 276:                       // '{'
      lookahead2W(276);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|' | '}'
      break;
    default:
      lk = l1;
    }
    if (lk == 144660)               // '{' '}'
    {
      lk = memoized(11, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          shiftT(276);              // '{'
          lookahead1W(88);          // S^WS | '(:' | '}'
          shiftT(282);              // '}'
          memoize(11, e0A, -1);
          lk = -3;
        }
        catch (p1A)
        {
          lk = -2;
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(11, e0A, -2);
        }
      }
    }
    switch (lk)
    {
    case -1:
      shiftT(276);                  // '{'
      lookahead1W(88);              // S^WS | '(:' | '}'
      shiftT(282);                  // '}'
      break;
    case -3:
      break;
    default:
      try_BlockExpr();
    }
  }

  function parse_CompCommentConstructor()
  {
    eventHandler.startNonterminal("CompCommentConstructor", e0);
    shift(96);                      // 'comment'
    lookahead1W(87);                // S^WS | '(:' | '{'
    whitespace();
    parse_BlockExpr();
    eventHandler.endNonterminal("CompCommentConstructor", e0);
  }

  function try_CompCommentConstructor()
  {
    shiftT(96);                     // 'comment'
    lookahead1W(87);                // S^WS | '(:' | '{'
    try_BlockExpr();
  }

  function parse_CompTextConstructor()
  {
    eventHandler.startNonterminal("CompTextConstructor", e0);
    shift(244);                     // 'text'
    lookahead1W(87);                // S^WS | '(:' | '{'
    whitespace();
    parse_BlockExpr();
    eventHandler.endNonterminal("CompTextConstructor", e0);
  }

  function try_CompTextConstructor()
  {
    shiftT(244);                    // 'text'
    lookahead1W(87);                // S^WS | '(:' | '{'
    try_BlockExpr();
  }

  function parse_PrimaryExpr()
  {
    eventHandler.startNonterminal("PrimaryExpr", e0);
    switch (l1)
    {
    case 184:                       // 'namespace'
      lookahead2W(255);             // NCName^Token | S^WS | '#' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'last' | 'lax' | 'le' | 'let' |
                                    // 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{'
      break;
    case 216:                       // 'processing-instruction'
      lookahead2W(253);             // NCName^Token | S^WS | '#' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'last' | 'lax' | 'le' | 'let' |
                                    // 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{'
      break;
    case 276:                       // '{'
      lookahead2W(276);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|' | '}'
      break;
    case 82:                        // 'attribute'
    case 121:                       // 'element'
      lookahead2W(258);             // EQName^Token | S^WS | '#' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{'
      break;
    case 96:                        // 'comment'
    case 244:                       // 'text'
      lookahead2W(93);              // S^WS | '#' | '(:' | '{'
      break;
    case 119:                       // 'document'
    case 202:                       // 'ordered'
    case 256:                       // 'unordered'
      lookahead2W(139);             // S^WS | '#' | '(' | '(:' | '{'
      break;
    case 6:                         // EQName^Token
    case 70:                        // 'after'
    case 72:                        // 'allowing'
    case 73:                        // 'ancestor'
    case 74:                        // 'ancestor-or-self'
    case 75:                        // 'and'
    case 77:                        // 'append'
    case 79:                        // 'as'
    case 80:                        // 'ascending'
    case 81:                        // 'at'
    case 83:                        // 'base-uri'
    case 84:                        // 'before'
    case 85:                        // 'boundary-space'
    case 86:                        // 'break'
    case 88:                        // 'case'
    case 89:                        // 'cast'
    case 90:                        // 'castable'
    case 91:                        // 'catch'
    case 93:                        // 'child'
    case 94:                        // 'collation'
    case 97:                        // 'constraint'
    case 98:                        // 'construction'
    case 101:                       // 'context'
    case 102:                       // 'continue'
    case 103:                       // 'copy'
    case 104:                       // 'copy-namespaces'
    case 105:                       // 'count'
    case 106:                       // 'decimal-format'
    case 108:                       // 'declare'
    case 109:                       // 'default'
    case 110:                       // 'delete'
    case 111:                       // 'descendant'
    case 112:                       // 'descendant-or-self'
    case 113:                       // 'descending'
    case 118:                       // 'div'
    case 122:                       // 'else'
    case 123:                       // 'empty'
    case 125:                       // 'encoding'
    case 126:                       // 'end'
    case 128:                       // 'eq'
    case 129:                       // 'every'
    case 131:                       // 'except'
    case 132:                       // 'exit'
    case 133:                       // 'external'
    case 134:                       // 'first'
    case 135:                       // 'following'
    case 136:                       // 'following-sibling'
    case 137:                       // 'for'
    case 141:                       // 'ft-option'
    case 146:                       // 'ge'
    case 148:                       // 'group'
    case 150:                       // 'gt'
    case 151:                       // 'idiv'
    case 153:                       // 'import'
    case 154:                       // 'in'
    case 155:                       // 'index'
    case 159:                       // 'insert'
    case 160:                       // 'instance'
    case 161:                       // 'integrity'
    case 162:                       // 'intersect'
    case 163:                       // 'into'
    case 164:                       // 'is'
    case 166:                       // 'json'
    case 170:                       // 'last'
    case 171:                       // 'lax'
    case 172:                       // 'le'
    case 174:                       // 'let'
    case 176:                       // 'loop'
    case 178:                       // 'lt'
    case 180:                       // 'mod'
    case 181:                       // 'modify'
    case 182:                       // 'module'
    case 186:                       // 'ne'
    case 192:                       // 'nodes'
    case 194:                       // 'object'
    case 198:                       // 'only'
    case 199:                       // 'option'
    case 200:                       // 'or'
    case 201:                       // 'order'
    case 203:                       // 'ordering'
    case 206:                       // 'parent'
    case 212:                       // 'preceding'
    case 213:                       // 'preceding-sibling'
    case 218:                       // 'rename'
    case 219:                       // 'replace'
    case 220:                       // 'return'
    case 221:                       // 'returning'
    case 222:                       // 'revalidation'
    case 224:                       // 'satisfies'
    case 225:                       // 'schema'
    case 228:                       // 'score'
    case 229:                       // 'self'
    case 234:                       // 'sliding'
    case 235:                       // 'some'
    case 236:                       // 'stable'
    case 237:                       // 'start'
    case 240:                       // 'strict'
    case 248:                       // 'to'
    case 249:                       // 'treat'
    case 250:                       // 'try'
    case 251:                       // 'tumbling'
    case 252:                       // 'type'
    case 254:                       // 'union'
    case 257:                       // 'updating'
    case 260:                       // 'validate'
    case 261:                       // 'value'
    case 262:                       // 'variable'
    case 263:                       // 'version'
    case 266:                       // 'where'
    case 267:                       // 'while'
    case 270:                       // 'with'
    case 274:                       // 'xquery'
      lookahead2W(92);              // S^WS | '#' | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    if (lk == 2836                  // '{' Wildcard
     || lk == 3348                  // '{' EQName^Token
     || lk == 4372                  // '{' IntegerLiteral
     || lk == 4884                  // '{' DecimalLiteral
     || lk == 5396                  // '{' DoubleLiteral
     || lk == 5908                  // '{' StringLiteral
     || lk == 16148                 // '{' '$'
     || lk == 16660                 // '{' '%'
     || lk == 17684                 // '{' '('
     || lk == 18196                 // '{' '(#'
     || lk == 20756                 // '{' '+'
     || lk == 21780                 // '{' '-'
     || lk == 22804                 // '{' '.'
     || lk == 23316                 // '{' '..'
     || lk == 23828                 // '{' '/'
     || lk == 24340                 // '{' '//'
     || lk == 27924                 // '{' '<'
     || lk == 28436                 // '{' '<!--'
     || lk == 30484                 // '{' '<?'
     || lk == 34068                 // '{' '@'
     || lk == 35092                 // '{' '['
     || lk == 36116                 // '{' 'after'
     || lk == 37140                 // '{' 'allowing'
     || lk == 37652                 // '{' 'ancestor'
     || lk == 38164                 // '{' 'ancestor-or-self'
     || lk == 38676                 // '{' 'and'
     || lk == 39700                 // '{' 'append'
     || lk == 40212                 // '{' 'array'
     || lk == 40724                 // '{' 'as'
     || lk == 41236                 // '{' 'ascending'
     || lk == 41748                 // '{' 'at'
     || lk == 42260                 // '{' 'attribute'
     || lk == 42772                 // '{' 'base-uri'
     || lk == 43284                 // '{' 'before'
     || lk == 43796                 // '{' 'boundary-space'
     || lk == 44308                 // '{' 'break'
     || lk == 45332                 // '{' 'case'
     || lk == 45844                 // '{' 'cast'
     || lk == 46356                 // '{' 'castable'
     || lk == 46868                 // '{' 'catch'
     || lk == 47892                 // '{' 'child'
     || lk == 48404                 // '{' 'collation'
     || lk == 49428                 // '{' 'comment'
     || lk == 49940                 // '{' 'constraint'
     || lk == 50452                 // '{' 'construction'
     || lk == 51988                 // '{' 'context'
     || lk == 52500                 // '{' 'continue'
     || lk == 53012                 // '{' 'copy'
     || lk == 53524                 // '{' 'copy-namespaces'
     || lk == 54036                 // '{' 'count'
     || lk == 54548                 // '{' 'decimal-format'
     || lk == 55572                 // '{' 'declare'
     || lk == 56084                 // '{' 'default'
     || lk == 56596                 // '{' 'delete'
     || lk == 57108                 // '{' 'descendant'
     || lk == 57620                 // '{' 'descendant-or-self'
     || lk == 58132                 // '{' 'descending'
     || lk == 60692                 // '{' 'div'
     || lk == 61204                 // '{' 'document'
     || lk == 61716                 // '{' 'document-node'
     || lk == 62228                 // '{' 'element'
     || lk == 62740                 // '{' 'else'
     || lk == 63252                 // '{' 'empty'
     || lk == 63764                 // '{' 'empty-sequence'
     || lk == 64276                 // '{' 'encoding'
     || lk == 64788                 // '{' 'end'
     || lk == 65812                 // '{' 'eq'
     || lk == 66324                 // '{' 'every'
     || lk == 67348                 // '{' 'except'
     || lk == 67860                 // '{' 'exit'
     || lk == 68372                 // '{' 'external'
     || lk == 68884                 // '{' 'first'
     || lk == 69396                 // '{' 'following'
     || lk == 69908                 // '{' 'following-sibling'
     || lk == 70420                 // '{' 'for'
     || lk == 72468                 // '{' 'ft-option'
     || lk == 74516                 // '{' 'function'
     || lk == 75028                 // '{' 'ge'
     || lk == 76052                 // '{' 'group'
     || lk == 77076                 // '{' 'gt'
     || lk == 77588                 // '{' 'idiv'
     || lk == 78100                 // '{' 'if'
     || lk == 78612                 // '{' 'import'
     || lk == 79124                 // '{' 'in'
     || lk == 79636                 // '{' 'index'
     || lk == 81684                 // '{' 'insert'
     || lk == 82196                 // '{' 'instance'
     || lk == 82708                 // '{' 'integrity'
     || lk == 83220                 // '{' 'intersect'
     || lk == 83732                 // '{' 'into'
     || lk == 84244                 // '{' 'is'
     || lk == 84756                 // '{' 'item'
     || lk == 85268                 // '{' 'json'
     || lk == 85780                 // '{' 'json-item'
     || lk == 87316                 // '{' 'last'
     || lk == 87828                 // '{' 'lax'
     || lk == 88340                 // '{' 'le'
     || lk == 89364                 // '{' 'let'
     || lk == 90388                 // '{' 'loop'
     || lk == 91412                 // '{' 'lt'
     || lk == 92436                 // '{' 'mod'
     || lk == 92948                 // '{' 'modify'
     || lk == 93460                 // '{' 'module'
     || lk == 94484                 // '{' 'namespace'
     || lk == 94996                 // '{' 'namespace-node'
     || lk == 95508                 // '{' 'ne'
     || lk == 98068                 // '{' 'node'
     || lk == 98580                 // '{' 'nodes'
     || lk == 99604                 // '{' 'object'
     || lk == 101652                // '{' 'only'
     || lk == 102164                // '{' 'option'
     || lk == 102676                // '{' 'or'
     || lk == 103188                // '{' 'order'
     || lk == 103700                // '{' 'ordered'
     || lk == 104212                // '{' 'ordering'
     || lk == 105748                // '{' 'parent'
     || lk == 108820                // '{' 'preceding'
     || lk == 109332                // '{' 'preceding-sibling'
     || lk == 110868                // '{' 'processing-instruction'
     || lk == 111892                // '{' 'rename'
     || lk == 112404                // '{' 'replace'
     || lk == 112916                // '{' 'return'
     || lk == 113428                // '{' 'returning'
     || lk == 113940                // '{' 'revalidation'
     || lk == 114964                // '{' 'satisfies'
     || lk == 115476                // '{' 'schema'
     || lk == 115988                // '{' 'schema-attribute'
     || lk == 116500                // '{' 'schema-element'
     || lk == 117012                // '{' 'score'
     || lk == 117524                // '{' 'self'
     || lk == 120084                // '{' 'sliding'
     || lk == 120596                // '{' 'some'
     || lk == 121108                // '{' 'stable'
     || lk == 121620                // '{' 'start'
     || lk == 123156                // '{' 'strict'
     || lk == 124180                // '{' 'structured-item'
     || lk == 124692                // '{' 'switch'
     || lk == 125204                // '{' 'text'
     || lk == 127252                // '{' 'to'
     || lk == 127764                // '{' 'treat'
     || lk == 128276                // '{' 'try'
     || lk == 128788                // '{' 'tumbling'
     || lk == 129300                // '{' 'type'
     || lk == 129812                // '{' 'typeswitch'
     || lk == 130324                // '{' 'union'
     || lk == 131348                // '{' 'unordered'
     || lk == 131860                // '{' 'updating'
     || lk == 133396                // '{' 'validate'
     || lk == 133908                // '{' 'value'
     || lk == 134420                // '{' 'variable'
     || lk == 134932                // '{' 'version'
     || lk == 136468                // '{' 'where'
     || lk == 136980                // '{' 'while'
     || lk == 138516                // '{' 'with'
     || lk == 140564                // '{' 'xquery'
     || lk == 141588                // '{' '{'
     || lk == 142612                // '{' '{|'
     || lk == 144660)               // '{' '}'
    {
      lk = memoized(12, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_BlockExpr();
          lk = -10;
        }
        catch (p10A)
        {
          lk = -11;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(12, e0, lk);
      }
    }
    switch (lk)
    {
    case 8:                         // IntegerLiteral
    case 9:                         // DecimalLiteral
    case 10:                        // DoubleLiteral
    case 11:                        // StringLiteral
      parse_Literal();
      break;
    case 31:                        // '$'
      parse_VarRef();
      break;
    case 34:                        // '('
      parse_ParenthesizedExpr();
      break;
    case 44:                        // '.'
      parse_ContextItemExpr();
      break;
    case 17414:                     // EQName^Token '('
    case 17478:                     // 'after' '('
    case 17480:                     // 'allowing' '('
    case 17481:                     // 'ancestor' '('
    case 17482:                     // 'ancestor-or-self' '('
    case 17483:                     // 'and' '('
    case 17485:                     // 'append' '('
    case 17487:                     // 'as' '('
    case 17488:                     // 'ascending' '('
    case 17489:                     // 'at' '('
    case 17491:                     // 'base-uri' '('
    case 17492:                     // 'before' '('
    case 17493:                     // 'boundary-space' '('
    case 17494:                     // 'break' '('
    case 17496:                     // 'case' '('
    case 17497:                     // 'cast' '('
    case 17498:                     // 'castable' '('
    case 17499:                     // 'catch' '('
    case 17501:                     // 'child' '('
    case 17502:                     // 'collation' '('
    case 17505:                     // 'constraint' '('
    case 17506:                     // 'construction' '('
    case 17509:                     // 'context' '('
    case 17510:                     // 'continue' '('
    case 17511:                     // 'copy' '('
    case 17512:                     // 'copy-namespaces' '('
    case 17513:                     // 'count' '('
    case 17514:                     // 'decimal-format' '('
    case 17516:                     // 'declare' '('
    case 17517:                     // 'default' '('
    case 17518:                     // 'delete' '('
    case 17519:                     // 'descendant' '('
    case 17520:                     // 'descendant-or-self' '('
    case 17521:                     // 'descending' '('
    case 17526:                     // 'div' '('
    case 17527:                     // 'document' '('
    case 17530:                     // 'else' '('
    case 17531:                     // 'empty' '('
    case 17533:                     // 'encoding' '('
    case 17534:                     // 'end' '('
    case 17536:                     // 'eq' '('
    case 17537:                     // 'every' '('
    case 17539:                     // 'except' '('
    case 17540:                     // 'exit' '('
    case 17541:                     // 'external' '('
    case 17542:                     // 'first' '('
    case 17543:                     // 'following' '('
    case 17544:                     // 'following-sibling' '('
    case 17545:                     // 'for' '('
    case 17549:                     // 'ft-option' '('
    case 17554:                     // 'ge' '('
    case 17556:                     // 'group' '('
    case 17558:                     // 'gt' '('
    case 17559:                     // 'idiv' '('
    case 17561:                     // 'import' '('
    case 17562:                     // 'in' '('
    case 17563:                     // 'index' '('
    case 17567:                     // 'insert' '('
    case 17568:                     // 'instance' '('
    case 17569:                     // 'integrity' '('
    case 17570:                     // 'intersect' '('
    case 17571:                     // 'into' '('
    case 17572:                     // 'is' '('
    case 17574:                     // 'json' '('
    case 17578:                     // 'last' '('
    case 17579:                     // 'lax' '('
    case 17580:                     // 'le' '('
    case 17582:                     // 'let' '('
    case 17584:                     // 'loop' '('
    case 17586:                     // 'lt' '('
    case 17588:                     // 'mod' '('
    case 17589:                     // 'modify' '('
    case 17590:                     // 'module' '('
    case 17592:                     // 'namespace' '('
    case 17594:                     // 'ne' '('
    case 17600:                     // 'nodes' '('
    case 17602:                     // 'object' '('
    case 17606:                     // 'only' '('
    case 17607:                     // 'option' '('
    case 17608:                     // 'or' '('
    case 17609:                     // 'order' '('
    case 17610:                     // 'ordered' '('
    case 17611:                     // 'ordering' '('
    case 17614:                     // 'parent' '('
    case 17620:                     // 'preceding' '('
    case 17621:                     // 'preceding-sibling' '('
    case 17626:                     // 'rename' '('
    case 17627:                     // 'replace' '('
    case 17628:                     // 'return' '('
    case 17629:                     // 'returning' '('
    case 17630:                     // 'revalidation' '('
    case 17632:                     // 'satisfies' '('
    case 17633:                     // 'schema' '('
    case 17636:                     // 'score' '('
    case 17637:                     // 'self' '('
    case 17642:                     // 'sliding' '('
    case 17643:                     // 'some' '('
    case 17644:                     // 'stable' '('
    case 17645:                     // 'start' '('
    case 17648:                     // 'strict' '('
    case 17656:                     // 'to' '('
    case 17657:                     // 'treat' '('
    case 17658:                     // 'try' '('
    case 17659:                     // 'tumbling' '('
    case 17660:                     // 'type' '('
    case 17662:                     // 'union' '('
    case 17664:                     // 'unordered' '('
    case 17665:                     // 'updating' '('
    case 17668:                     // 'validate' '('
    case 17669:                     // 'value' '('
    case 17670:                     // 'variable' '('
    case 17671:                     // 'version' '('
    case 17674:                     // 'where' '('
    case 17675:                     // 'while' '('
    case 17678:                     // 'with' '('
    case 17682:                     // 'xquery' '('
      parse_FunctionCall();
      break;
    case 141514:                    // 'ordered' '{'
      parse_OrderedExpr();
      break;
    case 141568:                    // 'unordered' '{'
      parse_UnorderedExpr();
      break;
    case 32:                        // '%'
    case 78:                        // 'array'
    case 120:                       // 'document-node'
    case 124:                       // 'empty-sequence'
    case 145:                       // 'function'
    case 152:                       // 'if'
    case 165:                       // 'item'
    case 167:                       // 'json-item'
    case 185:                       // 'namespace-node'
    case 191:                       // 'node'
    case 226:                       // 'schema-attribute'
    case 227:                       // 'schema-element'
    case 242:                       // 'structured-item'
    case 243:                       // 'switch'
    case 253:                       // 'typeswitch'
    case 14854:                     // EQName^Token '#'
    case 14918:                     // 'after' '#'
    case 14920:                     // 'allowing' '#'
    case 14921:                     // 'ancestor' '#'
    case 14922:                     // 'ancestor-or-self' '#'
    case 14923:                     // 'and' '#'
    case 14925:                     // 'append' '#'
    case 14927:                     // 'as' '#'
    case 14928:                     // 'ascending' '#'
    case 14929:                     // 'at' '#'
    case 14930:                     // 'attribute' '#'
    case 14931:                     // 'base-uri' '#'
    case 14932:                     // 'before' '#'
    case 14933:                     // 'boundary-space' '#'
    case 14934:                     // 'break' '#'
    case 14936:                     // 'case' '#'
    case 14937:                     // 'cast' '#'
    case 14938:                     // 'castable' '#'
    case 14939:                     // 'catch' '#'
    case 14941:                     // 'child' '#'
    case 14942:                     // 'collation' '#'
    case 14944:                     // 'comment' '#'
    case 14945:                     // 'constraint' '#'
    case 14946:                     // 'construction' '#'
    case 14949:                     // 'context' '#'
    case 14950:                     // 'continue' '#'
    case 14951:                     // 'copy' '#'
    case 14952:                     // 'copy-namespaces' '#'
    case 14953:                     // 'count' '#'
    case 14954:                     // 'decimal-format' '#'
    case 14956:                     // 'declare' '#'
    case 14957:                     // 'default' '#'
    case 14958:                     // 'delete' '#'
    case 14959:                     // 'descendant' '#'
    case 14960:                     // 'descendant-or-self' '#'
    case 14961:                     // 'descending' '#'
    case 14966:                     // 'div' '#'
    case 14967:                     // 'document' '#'
    case 14969:                     // 'element' '#'
    case 14970:                     // 'else' '#'
    case 14971:                     // 'empty' '#'
    case 14973:                     // 'encoding' '#'
    case 14974:                     // 'end' '#'
    case 14976:                     // 'eq' '#'
    case 14977:                     // 'every' '#'
    case 14979:                     // 'except' '#'
    case 14980:                     // 'exit' '#'
    case 14981:                     // 'external' '#'
    case 14982:                     // 'first' '#'
    case 14983:                     // 'following' '#'
    case 14984:                     // 'following-sibling' '#'
    case 14985:                     // 'for' '#'
    case 14989:                     // 'ft-option' '#'
    case 14994:                     // 'ge' '#'
    case 14996:                     // 'group' '#'
    case 14998:                     // 'gt' '#'
    case 14999:                     // 'idiv' '#'
    case 15001:                     // 'import' '#'
    case 15002:                     // 'in' '#'
    case 15003:                     // 'index' '#'
    case 15007:                     // 'insert' '#'
    case 15008:                     // 'instance' '#'
    case 15009:                     // 'integrity' '#'
    case 15010:                     // 'intersect' '#'
    case 15011:                     // 'into' '#'
    case 15012:                     // 'is' '#'
    case 15014:                     // 'json' '#'
    case 15018:                     // 'last' '#'
    case 15019:                     // 'lax' '#'
    case 15020:                     // 'le' '#'
    case 15022:                     // 'let' '#'
    case 15024:                     // 'loop' '#'
    case 15026:                     // 'lt' '#'
    case 15028:                     // 'mod' '#'
    case 15029:                     // 'modify' '#'
    case 15030:                     // 'module' '#'
    case 15032:                     // 'namespace' '#'
    case 15034:                     // 'ne' '#'
    case 15040:                     // 'nodes' '#'
    case 15042:                     // 'object' '#'
    case 15046:                     // 'only' '#'
    case 15047:                     // 'option' '#'
    case 15048:                     // 'or' '#'
    case 15049:                     // 'order' '#'
    case 15050:                     // 'ordered' '#'
    case 15051:                     // 'ordering' '#'
    case 15054:                     // 'parent' '#'
    case 15060:                     // 'preceding' '#'
    case 15061:                     // 'preceding-sibling' '#'
    case 15064:                     // 'processing-instruction' '#'
    case 15066:                     // 'rename' '#'
    case 15067:                     // 'replace' '#'
    case 15068:                     // 'return' '#'
    case 15069:                     // 'returning' '#'
    case 15070:                     // 'revalidation' '#'
    case 15072:                     // 'satisfies' '#'
    case 15073:                     // 'schema' '#'
    case 15076:                     // 'score' '#'
    case 15077:                     // 'self' '#'
    case 15082:                     // 'sliding' '#'
    case 15083:                     // 'some' '#'
    case 15084:                     // 'stable' '#'
    case 15085:                     // 'start' '#'
    case 15088:                     // 'strict' '#'
    case 15092:                     // 'text' '#'
    case 15096:                     // 'to' '#'
    case 15097:                     // 'treat' '#'
    case 15098:                     // 'try' '#'
    case 15099:                     // 'tumbling' '#'
    case 15100:                     // 'type' '#'
    case 15102:                     // 'union' '#'
    case 15104:                     // 'unordered' '#'
    case 15105:                     // 'updating' '#'
    case 15108:                     // 'validate' '#'
    case 15109:                     // 'value' '#'
    case 15110:                     // 'variable' '#'
    case 15111:                     // 'version' '#'
    case 15114:                     // 'where' '#'
    case 15115:                     // 'while' '#'
    case 15118:                     // 'with' '#'
    case 15122:                     // 'xquery' '#'
      parse_FunctionItemExpr();
      break;
    case -10:
    case 27412:                     // '{' ';'
      parse_BlockExpr();
      break;
    case -11:
      parse_ObjectConstructor();
      break;
    case 68:                        // '['
      parse_ArrayConstructor();
      break;
    case 278:                       // '{|'
      parse_JSONSimpleObjectUnion();
      break;
    default:
      parse_Constructor();
    }
    eventHandler.endNonterminal("PrimaryExpr", e0);
  }

  function try_PrimaryExpr()
  {
    switch (l1)
    {
    case 184:                       // 'namespace'
      lookahead2W(255);             // NCName^Token | S^WS | '#' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'last' | 'lax' | 'le' | 'let' |
                                    // 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{'
      break;
    case 216:                       // 'processing-instruction'
      lookahead2W(253);             // NCName^Token | S^WS | '#' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'last' | 'lax' | 'le' | 'let' |
                                    // 'loop' | 'lt' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'xquery' | '{'
      break;
    case 276:                       // '{'
      lookahead2W(276);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|' | '}'
      break;
    case 82:                        // 'attribute'
    case 121:                       // 'element'
      lookahead2W(258);             // EQName^Token | S^WS | '#' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{'
      break;
    case 96:                        // 'comment'
    case 244:                       // 'text'
      lookahead2W(93);              // S^WS | '#' | '(:' | '{'
      break;
    case 119:                       // 'document'
    case 202:                       // 'ordered'
    case 256:                       // 'unordered'
      lookahead2W(139);             // S^WS | '#' | '(' | '(:' | '{'
      break;
    case 6:                         // EQName^Token
    case 70:                        // 'after'
    case 72:                        // 'allowing'
    case 73:                        // 'ancestor'
    case 74:                        // 'ancestor-or-self'
    case 75:                        // 'and'
    case 77:                        // 'append'
    case 79:                        // 'as'
    case 80:                        // 'ascending'
    case 81:                        // 'at'
    case 83:                        // 'base-uri'
    case 84:                        // 'before'
    case 85:                        // 'boundary-space'
    case 86:                        // 'break'
    case 88:                        // 'case'
    case 89:                        // 'cast'
    case 90:                        // 'castable'
    case 91:                        // 'catch'
    case 93:                        // 'child'
    case 94:                        // 'collation'
    case 97:                        // 'constraint'
    case 98:                        // 'construction'
    case 101:                       // 'context'
    case 102:                       // 'continue'
    case 103:                       // 'copy'
    case 104:                       // 'copy-namespaces'
    case 105:                       // 'count'
    case 106:                       // 'decimal-format'
    case 108:                       // 'declare'
    case 109:                       // 'default'
    case 110:                       // 'delete'
    case 111:                       // 'descendant'
    case 112:                       // 'descendant-or-self'
    case 113:                       // 'descending'
    case 118:                       // 'div'
    case 122:                       // 'else'
    case 123:                       // 'empty'
    case 125:                       // 'encoding'
    case 126:                       // 'end'
    case 128:                       // 'eq'
    case 129:                       // 'every'
    case 131:                       // 'except'
    case 132:                       // 'exit'
    case 133:                       // 'external'
    case 134:                       // 'first'
    case 135:                       // 'following'
    case 136:                       // 'following-sibling'
    case 137:                       // 'for'
    case 141:                       // 'ft-option'
    case 146:                       // 'ge'
    case 148:                       // 'group'
    case 150:                       // 'gt'
    case 151:                       // 'idiv'
    case 153:                       // 'import'
    case 154:                       // 'in'
    case 155:                       // 'index'
    case 159:                       // 'insert'
    case 160:                       // 'instance'
    case 161:                       // 'integrity'
    case 162:                       // 'intersect'
    case 163:                       // 'into'
    case 164:                       // 'is'
    case 166:                       // 'json'
    case 170:                       // 'last'
    case 171:                       // 'lax'
    case 172:                       // 'le'
    case 174:                       // 'let'
    case 176:                       // 'loop'
    case 178:                       // 'lt'
    case 180:                       // 'mod'
    case 181:                       // 'modify'
    case 182:                       // 'module'
    case 186:                       // 'ne'
    case 192:                       // 'nodes'
    case 194:                       // 'object'
    case 198:                       // 'only'
    case 199:                       // 'option'
    case 200:                       // 'or'
    case 201:                       // 'order'
    case 203:                       // 'ordering'
    case 206:                       // 'parent'
    case 212:                       // 'preceding'
    case 213:                       // 'preceding-sibling'
    case 218:                       // 'rename'
    case 219:                       // 'replace'
    case 220:                       // 'return'
    case 221:                       // 'returning'
    case 222:                       // 'revalidation'
    case 224:                       // 'satisfies'
    case 225:                       // 'schema'
    case 228:                       // 'score'
    case 229:                       // 'self'
    case 234:                       // 'sliding'
    case 235:                       // 'some'
    case 236:                       // 'stable'
    case 237:                       // 'start'
    case 240:                       // 'strict'
    case 248:                       // 'to'
    case 249:                       // 'treat'
    case 250:                       // 'try'
    case 251:                       // 'tumbling'
    case 252:                       // 'type'
    case 254:                       // 'union'
    case 257:                       // 'updating'
    case 260:                       // 'validate'
    case 261:                       // 'value'
    case 262:                       // 'variable'
    case 263:                       // 'version'
    case 266:                       // 'where'
    case 267:                       // 'while'
    case 270:                       // 'with'
    case 274:                       // 'xquery'
      lookahead2W(92);              // S^WS | '#' | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    if (lk == 2836                  // '{' Wildcard
     || lk == 3348                  // '{' EQName^Token
     || lk == 4372                  // '{' IntegerLiteral
     || lk == 4884                  // '{' DecimalLiteral
     || lk == 5396                  // '{' DoubleLiteral
     || lk == 5908                  // '{' StringLiteral
     || lk == 16148                 // '{' '$'
     || lk == 16660                 // '{' '%'
     || lk == 17684                 // '{' '('
     || lk == 18196                 // '{' '(#'
     || lk == 20756                 // '{' '+'
     || lk == 21780                 // '{' '-'
     || lk == 22804                 // '{' '.'
     || lk == 23316                 // '{' '..'
     || lk == 23828                 // '{' '/'
     || lk == 24340                 // '{' '//'
     || lk == 27924                 // '{' '<'
     || lk == 28436                 // '{' '<!--'
     || lk == 30484                 // '{' '<?'
     || lk == 34068                 // '{' '@'
     || lk == 35092                 // '{' '['
     || lk == 36116                 // '{' 'after'
     || lk == 37140                 // '{' 'allowing'
     || lk == 37652                 // '{' 'ancestor'
     || lk == 38164                 // '{' 'ancestor-or-self'
     || lk == 38676                 // '{' 'and'
     || lk == 39700                 // '{' 'append'
     || lk == 40212                 // '{' 'array'
     || lk == 40724                 // '{' 'as'
     || lk == 41236                 // '{' 'ascending'
     || lk == 41748                 // '{' 'at'
     || lk == 42260                 // '{' 'attribute'
     || lk == 42772                 // '{' 'base-uri'
     || lk == 43284                 // '{' 'before'
     || lk == 43796                 // '{' 'boundary-space'
     || lk == 44308                 // '{' 'break'
     || lk == 45332                 // '{' 'case'
     || lk == 45844                 // '{' 'cast'
     || lk == 46356                 // '{' 'castable'
     || lk == 46868                 // '{' 'catch'
     || lk == 47892                 // '{' 'child'
     || lk == 48404                 // '{' 'collation'
     || lk == 49428                 // '{' 'comment'
     || lk == 49940                 // '{' 'constraint'
     || lk == 50452                 // '{' 'construction'
     || lk == 51988                 // '{' 'context'
     || lk == 52500                 // '{' 'continue'
     || lk == 53012                 // '{' 'copy'
     || lk == 53524                 // '{' 'copy-namespaces'
     || lk == 54036                 // '{' 'count'
     || lk == 54548                 // '{' 'decimal-format'
     || lk == 55572                 // '{' 'declare'
     || lk == 56084                 // '{' 'default'
     || lk == 56596                 // '{' 'delete'
     || lk == 57108                 // '{' 'descendant'
     || lk == 57620                 // '{' 'descendant-or-self'
     || lk == 58132                 // '{' 'descending'
     || lk == 60692                 // '{' 'div'
     || lk == 61204                 // '{' 'document'
     || lk == 61716                 // '{' 'document-node'
     || lk == 62228                 // '{' 'element'
     || lk == 62740                 // '{' 'else'
     || lk == 63252                 // '{' 'empty'
     || lk == 63764                 // '{' 'empty-sequence'
     || lk == 64276                 // '{' 'encoding'
     || lk == 64788                 // '{' 'end'
     || lk == 65812                 // '{' 'eq'
     || lk == 66324                 // '{' 'every'
     || lk == 67348                 // '{' 'except'
     || lk == 67860                 // '{' 'exit'
     || lk == 68372                 // '{' 'external'
     || lk == 68884                 // '{' 'first'
     || lk == 69396                 // '{' 'following'
     || lk == 69908                 // '{' 'following-sibling'
     || lk == 70420                 // '{' 'for'
     || lk == 72468                 // '{' 'ft-option'
     || lk == 74516                 // '{' 'function'
     || lk == 75028                 // '{' 'ge'
     || lk == 76052                 // '{' 'group'
     || lk == 77076                 // '{' 'gt'
     || lk == 77588                 // '{' 'idiv'
     || lk == 78100                 // '{' 'if'
     || lk == 78612                 // '{' 'import'
     || lk == 79124                 // '{' 'in'
     || lk == 79636                 // '{' 'index'
     || lk == 81684                 // '{' 'insert'
     || lk == 82196                 // '{' 'instance'
     || lk == 82708                 // '{' 'integrity'
     || lk == 83220                 // '{' 'intersect'
     || lk == 83732                 // '{' 'into'
     || lk == 84244                 // '{' 'is'
     || lk == 84756                 // '{' 'item'
     || lk == 85268                 // '{' 'json'
     || lk == 85780                 // '{' 'json-item'
     || lk == 87316                 // '{' 'last'
     || lk == 87828                 // '{' 'lax'
     || lk == 88340                 // '{' 'le'
     || lk == 89364                 // '{' 'let'
     || lk == 90388                 // '{' 'loop'
     || lk == 91412                 // '{' 'lt'
     || lk == 92436                 // '{' 'mod'
     || lk == 92948                 // '{' 'modify'
     || lk == 93460                 // '{' 'module'
     || lk == 94484                 // '{' 'namespace'
     || lk == 94996                 // '{' 'namespace-node'
     || lk == 95508                 // '{' 'ne'
     || lk == 98068                 // '{' 'node'
     || lk == 98580                 // '{' 'nodes'
     || lk == 99604                 // '{' 'object'
     || lk == 101652                // '{' 'only'
     || lk == 102164                // '{' 'option'
     || lk == 102676                // '{' 'or'
     || lk == 103188                // '{' 'order'
     || lk == 103700                // '{' 'ordered'
     || lk == 104212                // '{' 'ordering'
     || lk == 105748                // '{' 'parent'
     || lk == 108820                // '{' 'preceding'
     || lk == 109332                // '{' 'preceding-sibling'
     || lk == 110868                // '{' 'processing-instruction'
     || lk == 111892                // '{' 'rename'
     || lk == 112404                // '{' 'replace'
     || lk == 112916                // '{' 'return'
     || lk == 113428                // '{' 'returning'
     || lk == 113940                // '{' 'revalidation'
     || lk == 114964                // '{' 'satisfies'
     || lk == 115476                // '{' 'schema'
     || lk == 115988                // '{' 'schema-attribute'
     || lk == 116500                // '{' 'schema-element'
     || lk == 117012                // '{' 'score'
     || lk == 117524                // '{' 'self'
     || lk == 120084                // '{' 'sliding'
     || lk == 120596                // '{' 'some'
     || lk == 121108                // '{' 'stable'
     || lk == 121620                // '{' 'start'
     || lk == 123156                // '{' 'strict'
     || lk == 124180                // '{' 'structured-item'
     || lk == 124692                // '{' 'switch'
     || lk == 125204                // '{' 'text'
     || lk == 127252                // '{' 'to'
     || lk == 127764                // '{' 'treat'
     || lk == 128276                // '{' 'try'
     || lk == 128788                // '{' 'tumbling'
     || lk == 129300                // '{' 'type'
     || lk == 129812                // '{' 'typeswitch'
     || lk == 130324                // '{' 'union'
     || lk == 131348                // '{' 'unordered'
     || lk == 131860                // '{' 'updating'
     || lk == 133396                // '{' 'validate'
     || lk == 133908                // '{' 'value'
     || lk == 134420                // '{' 'variable'
     || lk == 134932                // '{' 'version'
     || lk == 136468                // '{' 'where'
     || lk == 136980                // '{' 'while'
     || lk == 138516                // '{' 'with'
     || lk == 140564                // '{' 'xquery'
     || lk == 141588                // '{' '{'
     || lk == 142612                // '{' '{|'
     || lk == 144660)               // '{' '}'
    {
      lk = memoized(12, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_BlockExpr();
          memoize(12, e0A, -10);
          lk = -14;
        }
        catch (p10A)
        {
          lk = -11;
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(12, e0A, -11);
        }
      }
    }
    switch (lk)
    {
    case 8:                         // IntegerLiteral
    case 9:                         // DecimalLiteral
    case 10:                        // DoubleLiteral
    case 11:                        // StringLiteral
      try_Literal();
      break;
    case 31:                        // '$'
      try_VarRef();
      break;
    case 34:                        // '('
      try_ParenthesizedExpr();
      break;
    case 44:                        // '.'
      try_ContextItemExpr();
      break;
    case 17414:                     // EQName^Token '('
    case 17478:                     // 'after' '('
    case 17480:                     // 'allowing' '('
    case 17481:                     // 'ancestor' '('
    case 17482:                     // 'ancestor-or-self' '('
    case 17483:                     // 'and' '('
    case 17485:                     // 'append' '('
    case 17487:                     // 'as' '('
    case 17488:                     // 'ascending' '('
    case 17489:                     // 'at' '('
    case 17491:                     // 'base-uri' '('
    case 17492:                     // 'before' '('
    case 17493:                     // 'boundary-space' '('
    case 17494:                     // 'break' '('
    case 17496:                     // 'case' '('
    case 17497:                     // 'cast' '('
    case 17498:                     // 'castable' '('
    case 17499:                     // 'catch' '('
    case 17501:                     // 'child' '('
    case 17502:                     // 'collation' '('
    case 17505:                     // 'constraint' '('
    case 17506:                     // 'construction' '('
    case 17509:                     // 'context' '('
    case 17510:                     // 'continue' '('
    case 17511:                     // 'copy' '('
    case 17512:                     // 'copy-namespaces' '('
    case 17513:                     // 'count' '('
    case 17514:                     // 'decimal-format' '('
    case 17516:                     // 'declare' '('
    case 17517:                     // 'default' '('
    case 17518:                     // 'delete' '('
    case 17519:                     // 'descendant' '('
    case 17520:                     // 'descendant-or-self' '('
    case 17521:                     // 'descending' '('
    case 17526:                     // 'div' '('
    case 17527:                     // 'document' '('
    case 17530:                     // 'else' '('
    case 17531:                     // 'empty' '('
    case 17533:                     // 'encoding' '('
    case 17534:                     // 'end' '('
    case 17536:                     // 'eq' '('
    case 17537:                     // 'every' '('
    case 17539:                     // 'except' '('
    case 17540:                     // 'exit' '('
    case 17541:                     // 'external' '('
    case 17542:                     // 'first' '('
    case 17543:                     // 'following' '('
    case 17544:                     // 'following-sibling' '('
    case 17545:                     // 'for' '('
    case 17549:                     // 'ft-option' '('
    case 17554:                     // 'ge' '('
    case 17556:                     // 'group' '('
    case 17558:                     // 'gt' '('
    case 17559:                     // 'idiv' '('
    case 17561:                     // 'import' '('
    case 17562:                     // 'in' '('
    case 17563:                     // 'index' '('
    case 17567:                     // 'insert' '('
    case 17568:                     // 'instance' '('
    case 17569:                     // 'integrity' '('
    case 17570:                     // 'intersect' '('
    case 17571:                     // 'into' '('
    case 17572:                     // 'is' '('
    case 17574:                     // 'json' '('
    case 17578:                     // 'last' '('
    case 17579:                     // 'lax' '('
    case 17580:                     // 'le' '('
    case 17582:                     // 'let' '('
    case 17584:                     // 'loop' '('
    case 17586:                     // 'lt' '('
    case 17588:                     // 'mod' '('
    case 17589:                     // 'modify' '('
    case 17590:                     // 'module' '('
    case 17592:                     // 'namespace' '('
    case 17594:                     // 'ne' '('
    case 17600:                     // 'nodes' '('
    case 17602:                     // 'object' '('
    case 17606:                     // 'only' '('
    case 17607:                     // 'option' '('
    case 17608:                     // 'or' '('
    case 17609:                     // 'order' '('
    case 17610:                     // 'ordered' '('
    case 17611:                     // 'ordering' '('
    case 17614:                     // 'parent' '('
    case 17620:                     // 'preceding' '('
    case 17621:                     // 'preceding-sibling' '('
    case 17626:                     // 'rename' '('
    case 17627:                     // 'replace' '('
    case 17628:                     // 'return' '('
    case 17629:                     // 'returning' '('
    case 17630:                     // 'revalidation' '('
    case 17632:                     // 'satisfies' '('
    case 17633:                     // 'schema' '('
    case 17636:                     // 'score' '('
    case 17637:                     // 'self' '('
    case 17642:                     // 'sliding' '('
    case 17643:                     // 'some' '('
    case 17644:                     // 'stable' '('
    case 17645:                     // 'start' '('
    case 17648:                     // 'strict' '('
    case 17656:                     // 'to' '('
    case 17657:                     // 'treat' '('
    case 17658:                     // 'try' '('
    case 17659:                     // 'tumbling' '('
    case 17660:                     // 'type' '('
    case 17662:                     // 'union' '('
    case 17664:                     // 'unordered' '('
    case 17665:                     // 'updating' '('
    case 17668:                     // 'validate' '('
    case 17669:                     // 'value' '('
    case 17670:                     // 'variable' '('
    case 17671:                     // 'version' '('
    case 17674:                     // 'where' '('
    case 17675:                     // 'while' '('
    case 17678:                     // 'with' '('
    case 17682:                     // 'xquery' '('
      try_FunctionCall();
      break;
    case 141514:                    // 'ordered' '{'
      try_OrderedExpr();
      break;
    case 141568:                    // 'unordered' '{'
      try_UnorderedExpr();
      break;
    case 32:                        // '%'
    case 78:                        // 'array'
    case 120:                       // 'document-node'
    case 124:                       // 'empty-sequence'
    case 145:                       // 'function'
    case 152:                       // 'if'
    case 165:                       // 'item'
    case 167:                       // 'json-item'
    case 185:                       // 'namespace-node'
    case 191:                       // 'node'
    case 226:                       // 'schema-attribute'
    case 227:                       // 'schema-element'
    case 242:                       // 'structured-item'
    case 243:                       // 'switch'
    case 253:                       // 'typeswitch'
    case 14854:                     // EQName^Token '#'
    case 14918:                     // 'after' '#'
    case 14920:                     // 'allowing' '#'
    case 14921:                     // 'ancestor' '#'
    case 14922:                     // 'ancestor-or-self' '#'
    case 14923:                     // 'and' '#'
    case 14925:                     // 'append' '#'
    case 14927:                     // 'as' '#'
    case 14928:                     // 'ascending' '#'
    case 14929:                     // 'at' '#'
    case 14930:                     // 'attribute' '#'
    case 14931:                     // 'base-uri' '#'
    case 14932:                     // 'before' '#'
    case 14933:                     // 'boundary-space' '#'
    case 14934:                     // 'break' '#'
    case 14936:                     // 'case' '#'
    case 14937:                     // 'cast' '#'
    case 14938:                     // 'castable' '#'
    case 14939:                     // 'catch' '#'
    case 14941:                     // 'child' '#'
    case 14942:                     // 'collation' '#'
    case 14944:                     // 'comment' '#'
    case 14945:                     // 'constraint' '#'
    case 14946:                     // 'construction' '#'
    case 14949:                     // 'context' '#'
    case 14950:                     // 'continue' '#'
    case 14951:                     // 'copy' '#'
    case 14952:                     // 'copy-namespaces' '#'
    case 14953:                     // 'count' '#'
    case 14954:                     // 'decimal-format' '#'
    case 14956:                     // 'declare' '#'
    case 14957:                     // 'default' '#'
    case 14958:                     // 'delete' '#'
    case 14959:                     // 'descendant' '#'
    case 14960:                     // 'descendant-or-self' '#'
    case 14961:                     // 'descending' '#'
    case 14966:                     // 'div' '#'
    case 14967:                     // 'document' '#'
    case 14969:                     // 'element' '#'
    case 14970:                     // 'else' '#'
    case 14971:                     // 'empty' '#'
    case 14973:                     // 'encoding' '#'
    case 14974:                     // 'end' '#'
    case 14976:                     // 'eq' '#'
    case 14977:                     // 'every' '#'
    case 14979:                     // 'except' '#'
    case 14980:                     // 'exit' '#'
    case 14981:                     // 'external' '#'
    case 14982:                     // 'first' '#'
    case 14983:                     // 'following' '#'
    case 14984:                     // 'following-sibling' '#'
    case 14985:                     // 'for' '#'
    case 14989:                     // 'ft-option' '#'
    case 14994:                     // 'ge' '#'
    case 14996:                     // 'group' '#'
    case 14998:                     // 'gt' '#'
    case 14999:                     // 'idiv' '#'
    case 15001:                     // 'import' '#'
    case 15002:                     // 'in' '#'
    case 15003:                     // 'index' '#'
    case 15007:                     // 'insert' '#'
    case 15008:                     // 'instance' '#'
    case 15009:                     // 'integrity' '#'
    case 15010:                     // 'intersect' '#'
    case 15011:                     // 'into' '#'
    case 15012:                     // 'is' '#'
    case 15014:                     // 'json' '#'
    case 15018:                     // 'last' '#'
    case 15019:                     // 'lax' '#'
    case 15020:                     // 'le' '#'
    case 15022:                     // 'let' '#'
    case 15024:                     // 'loop' '#'
    case 15026:                     // 'lt' '#'
    case 15028:                     // 'mod' '#'
    case 15029:                     // 'modify' '#'
    case 15030:                     // 'module' '#'
    case 15032:                     // 'namespace' '#'
    case 15034:                     // 'ne' '#'
    case 15040:                     // 'nodes' '#'
    case 15042:                     // 'object' '#'
    case 15046:                     // 'only' '#'
    case 15047:                     // 'option' '#'
    case 15048:                     // 'or' '#'
    case 15049:                     // 'order' '#'
    case 15050:                     // 'ordered' '#'
    case 15051:                     // 'ordering' '#'
    case 15054:                     // 'parent' '#'
    case 15060:                     // 'preceding' '#'
    case 15061:                     // 'preceding-sibling' '#'
    case 15064:                     // 'processing-instruction' '#'
    case 15066:                     // 'rename' '#'
    case 15067:                     // 'replace' '#'
    case 15068:                     // 'return' '#'
    case 15069:                     // 'returning' '#'
    case 15070:                     // 'revalidation' '#'
    case 15072:                     // 'satisfies' '#'
    case 15073:                     // 'schema' '#'
    case 15076:                     // 'score' '#'
    case 15077:                     // 'self' '#'
    case 15082:                     // 'sliding' '#'
    case 15083:                     // 'some' '#'
    case 15084:                     // 'stable' '#'
    case 15085:                     // 'start' '#'
    case 15088:                     // 'strict' '#'
    case 15092:                     // 'text' '#'
    case 15096:                     // 'to' '#'
    case 15097:                     // 'treat' '#'
    case 15098:                     // 'try' '#'
    case 15099:                     // 'tumbling' '#'
    case 15100:                     // 'type' '#'
    case 15102:                     // 'union' '#'
    case 15104:                     // 'unordered' '#'
    case 15105:                     // 'updating' '#'
    case 15108:                     // 'validate' '#'
    case 15109:                     // 'value' '#'
    case 15110:                     // 'variable' '#'
    case 15111:                     // 'version' '#'
    case 15114:                     // 'where' '#'
    case 15115:                     // 'while' '#'
    case 15118:                     // 'with' '#'
    case 15122:                     // 'xquery' '#'
      try_FunctionItemExpr();
      break;
    case -10:
    case 27412:                     // '{' ';'
      try_BlockExpr();
      break;
    case -11:
      try_ObjectConstructor();
      break;
    case 68:                        // '['
      try_ArrayConstructor();
      break;
    case 278:                       // '{|'
      try_JSONSimpleObjectUnion();
      break;
    case -14:
      break;
    default:
      try_Constructor();
    }
  }

  function parse_JSONSimpleObjectUnion()
  {
    eventHandler.startNonterminal("JSONSimpleObjectUnion", e0);
    shift(278);                     // '{|'
    lookahead1W(272);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|' | '|}'
    if (l1 != 281)                  // '|}'
    {
      whitespace();
      parse_Expr();
    }
    shift(281);                     // '|}'
    eventHandler.endNonterminal("JSONSimpleObjectUnion", e0);
  }

  function try_JSONSimpleObjectUnion()
  {
    shiftT(278);                    // '{|'
    lookahead1W(272);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|' | '|}'
    if (l1 != 281)                  // '|}'
    {
      try_Expr();
    }
    shiftT(281);                    // '|}'
  }

  function parse_ObjectConstructor()
  {
    eventHandler.startNonterminal("ObjectConstructor", e0);
    shift(276);                     // '{'
    lookahead1W(273);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|' | '}'
    if (l1 != 282)                  // '}'
    {
      whitespace();
      parse_PairConstructorList();
    }
    shift(282);                     // '}'
    eventHandler.endNonterminal("ObjectConstructor", e0);
  }

  function try_ObjectConstructor()
  {
    shiftT(276);                    // '{'
    lookahead1W(273);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|' | '}'
    if (l1 != 282)                  // '}'
    {
      try_PairConstructorList();
    }
    shiftT(282);                    // '}'
  }

  function parse_PairConstructorList()
  {
    eventHandler.startNonterminal("PairConstructorList", e0);
    parse_PairConstructor();
    for (;;)
    {
      if (l1 != 41)                 // ','
      {
        break;
      }
      shift(41);                    // ','
      lookahead1W(266);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_PairConstructor();
    }
    eventHandler.endNonterminal("PairConstructorList", e0);
  }

  function try_PairConstructorList()
  {
    try_PairConstructor();
    for (;;)
    {
      if (l1 != 41)                 // ','
      {
        break;
      }
      shiftT(41);                   // ','
      lookahead1W(266);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      try_PairConstructor();
    }
  }

  function parse_PairConstructor()
  {
    eventHandler.startNonterminal("PairConstructor", e0);
    parse_ExprSingle();
    shift(49);                      // ':'
    lookahead1W(266);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("PairConstructor", e0);
  }

  function try_PairConstructor()
  {
    try_ExprSingle();
    shiftT(49);                     // ':'
    lookahead1W(266);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_ArrayConstructor()
  {
    eventHandler.startNonterminal("ArrayConstructor", e0);
    shift(68);                      // '['
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | ']' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
    if (l1 != 69)                   // ']'
    {
      whitespace();
      parse_Expr();
    }
    shift(69);                      // ']'
    eventHandler.endNonterminal("ArrayConstructor", e0);
  }

  function try_ArrayConstructor()
  {
    shiftT(68);                     // '['
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '@' | '[' | ']' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
    if (l1 != 69)                   // ']'
    {
      try_Expr();
    }
    shiftT(69);                     // ']'
  }

  function parse_BlockExpr()
  {
    eventHandler.startNonterminal("BlockExpr", e0);
    shift(276);                     // '{'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|' | '}'
    whitespace();
    parse_StatementsAndOptionalExpr();
    shift(282);                     // '}'
    eventHandler.endNonterminal("BlockExpr", e0);
  }

  function try_BlockExpr()
  {
    shiftT(276);                    // '{'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|' | '}'
    try_StatementsAndOptionalExpr();
    shiftT(282);                    // '}'
  }

  function parse_FunctionDecl()
  {
    eventHandler.startNonterminal("FunctionDecl", e0);
    shift(145);                     // 'function'
    lookahead1W(254);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
    whitespace();
    parse_EQName();
    lookahead1W(22);                // S^WS | '(' | '(:'
    shift(34);                      // '('
    lookahead1W(94);                // S^WS | '$' | '(:' | ')'
    if (l1 == 31)                   // '$'
    {
      whitespace();
      parse_ParamList();
    }
    shift(37);                      // ')'
    lookahead1W(148);               // S^WS | '(:' | 'as' | 'external' | '{'
    if (l1 == 79)                   // 'as'
    {
      shift(79);                    // 'as'
      lookahead1W(259);             // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
      whitespace();
      parse_SequenceType();
    }
    lookahead1W(118);               // S^WS | '(:' | 'external' | '{'
    switch (l1)
    {
    case 276:                       // '{'
      shift(276);                   // '{'
      lookahead1W(276);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|' | '}'
      whitespace();
      parse_StatementsAndOptionalExpr();
      shift(282);                   // '}'
      break;
    default:
      shift(133);                   // 'external'
    }
    eventHandler.endNonterminal("FunctionDecl", e0);
  }

  function shift(t)
  {
    if (l1 == t)
    {
      whitespace();
      eventHandler.terminal(XQueryParser.TOKEN[l1], b1, e1 > size ? size : e1);
      b0 = b1; e0 = e1; l1 = l2; if (l1 != 0) {
      b1 = b2; e1 = e2; l2 = 0; }
    }
    else
    {
      error(b1, e1, 0, l1, t);
    }
  }

  function shiftT(t)
  {
    if (l1 == t)
    {
      b0 = b1; e0 = e1; l1 = l2; if (l1 != 0) {
      b1 = b2; e1 = e2; l2 = 0; }
    }
    else
    {
      error(b1, e1, 0, l1, t);
    }
  }

  function skip(code)
  {
    var b0W = b0; var e0W = e0; var l1W = l1;
    var b1W = b1; var e1W = e1;

    l1 = code; b1 = begin; e1 = end;
    l2 = 0;

    try_Whitespace();

    b0 = b0W; e0 = e0W; l1 = l1W; if (l1 != 0) {
    b1 = b1W; e1 = e1W; }
  }

  function whitespace()
  {
    if (e0 != b1)
    {
      b0 = e0;
      e0 = b1;
      eventHandler.whitespace(b0, e0);
    }
  }

  function matchW(set)
  {
    var code;
    for (;;)
    {
      code = match(set);
      if (code != 22)               // S^WS
      {
        if (code != 36)             // '(:'
        {
          break;
        }
        skip(code);
      }
    }
    return code;
  }

  function lookahead1W(set)
  {
    if (l1 == 0)
    {
      l1 = matchW(set);
      b1 = begin;
      e1 = end;
    }
  }

  function lookahead2W(set)
  {
    if (l2 == 0)
    {
      l2 = matchW(set);
      b2 = begin;
      e2 = end;
    }
    lk = (l2 << 9) | l1;
  }

  function lookahead1(set)
  {
    if (l1 == 0)
    {
      l1 = match(set);
      b1 = begin;
      e1 = end;
    }
  }

  function lookahead2(set)
  {
    if (l2 == 0)
    {
      l2 = match(set);
      b2 = begin;
      e2 = end;
    }
    lk = (l2 << 9) | l1;
  }

  function error(b, e, s, l, t)
  {
    if (e > ex)
    {
      bx = b;
      ex = e;
      sx = s;
      lx = l;
      tx = t;
    }
    throw new self.ParseException(bx, ex, sx, lx, tx);
  }

  var lk, b0, e0;
  var l1, b1, e1;
  var l2, b2, e2;
  var bx, ex, sx, lx, tx;
  var eventHandler;
  var memo;

  function memoize(i, e, v)
  {
    memo[(e << 4) + i] = v;
  }

  function memoized(i, e)
  {
    var v = memo[(e << 4) + i];
    return typeof v != "undefined" ? v : 0;
  }

  var input;
  var size;
  var begin;
  var end;

  function match(tokenSetId)
  {
    var nonbmp = false;
    begin = end;
    var current = end;
    var result = XQueryParser.INITIAL[tokenSetId];
    var state = 0;

    for (var code = result & 4095; code != 0; )
    {
      var charclass;
      var c0 = current < size ? input.charCodeAt(current) : 0;
      ++current;
      if (c0 < 0x80)
      {
        charclass = XQueryParser.MAP0[c0];
      }
      else if (c0 < 0xd800)
      {
        var c1 = c0 >> 4;
        charclass = XQueryParser.MAP1[(c0 & 15) + XQueryParser.MAP1[(c1 & 31) + XQueryParser.MAP1[c1 >> 5]]];
      }
      else
      {
        if (c0 < 0xdc00)
        {
          var c1 = current < size ? input.charCodeAt(current) : 0;
          if (c1 >= 0xdc00 && c1 < 0xe000)
          {
            ++current;
            c0 = ((c0 & 0x3ff) << 10) + (c1 & 0x3ff) + 0x10000;
            nonbmp = true;
          }
        }
        var lo = 0, hi = 5;
        for (var m = 3; ; m = (hi + lo) >> 1)
        {
          if (XQueryParser.MAP2[m] > c0) hi = m - 1;
          else if (XQueryParser.MAP2[6 + m] < c0) lo = m + 1;
          else {charclass = XQueryParser.MAP2[12 + m]; break;}
          if (lo > hi) {charclass = 0; break;}
        }
      }

      state = code;
      var i0 = (charclass << 12) + code - 1;
      code = XQueryParser.TRANSITION[(i0 & 15) + XQueryParser.TRANSITION[i0 >> 4]];

      if (code > 4095)
      {
        result = code;
        code &= 4095;
        end = current;
      }
    }

    result >>= 12;
    if (result == 0)
    {
      end = current - 1;
      var c1 = end < size ? input.charCodeAt(end) : 0;
      if (c1 >= 0xdc00 && c1 < 0xe000) --end;
      return error(begin, end, state, -1, -1);
    }

    if (nonbmp)
    {
      for (var i = result >> 9; i > 0; --i)
      {
        --end;
        var c1 = end < size ? input.charCodeAt(end) : 0;
        if (c1 >= 0xdc00 && c1 < 0xe000) --end;
      }
    }
    else
    {
      end -= result >> 9;
    }

    return (result & 511) - 1;
  }
}

XQueryParser.getTokenSet = function(tokenSetId)
{
  var set = [];
  var s = tokenSetId < 0 ? - tokenSetId : INITIAL[tokenSetId] & 4095;
  for (var i = 0; i < 284; i += 32)
  {
    var j = i;
    var i0 = (i >> 5) * 3694 + s - 1;
    var i1 = i0 >> 1;
    var i2 = i1 >> 2;
    var f = XQueryParser.EXPECTED[(i0 & 1) + XQueryParser.EXPECTED[(i1 & 3) + XQueryParser.EXPECTED[(i2 & 3) + XQueryParser.EXPECTED[i2 >> 2]]]];
    for ( ; f != 0; f >>>= 1, ++j)
    {
      if ((f & 1) != 0)
      {
        set.push(XQueryParser.TOKEN[j]);
      }
    }
  }
  return set;
};

XQueryParser.MAP0 =
[
  /*   0 */ 70, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4,
  /*  36 */ 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 18, 19, 20, 21, 22, 23,
  /*  64 */ 24, 25, 26, 27, 28, 29, 26, 30, 30, 30, 30, 30, 31, 32, 33, 30, 30, 34, 30, 30, 35, 30, 30, 30, 36, 30, 30,
  /*  91 */ 37, 38, 39, 38, 30, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,
  /* 118 */ 61, 62, 63, 64, 65, 66, 67, 68, 38, 38
];

XQueryParser.MAP1 =
[
  /*   0 */ 108, 124, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 156, 181, 181, 181, 181,
  /*  21 */ 181, 214, 215, 213, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
  /*  42 */ 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
  /*  63 */ 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
  /*  84 */ 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
  /* 105 */ 214, 214, 214, 247, 261, 277, 293, 309, 355, 371, 387, 423, 423, 423, 415, 339, 331, 339, 331, 339, 339,
  /* 126 */ 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 440, 440, 440, 440, 440, 440, 440,
  /* 147 */ 324, 339, 339, 339, 339, 339, 339, 339, 339, 401, 423, 423, 424, 422, 423, 423, 339, 339, 339, 339, 339,
  /* 168 */ 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 423, 423, 423, 423, 423, 423, 423, 423,
  /* 189 */ 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423,
  /* 210 */ 423, 423, 423, 338, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339,
  /* 231 */ 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 423, 70, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 256 */ 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
  /* 290 */ 14, 15, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 26, 30,
  /* 317 */ 30, 30, 30, 30, 31, 32, 33, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 38, 30, 30, 30, 30, 30,
  /* 344 */ 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 34, 30, 30, 35, 30, 30, 30, 36, 30, 30, 37, 38, 39, 38, 30,
  /* 371 */ 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65,
  /* 398 */ 66, 67, 68, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 30, 30, 38, 38, 38, 38, 38, 38, 38, 69, 38, 38,
  /* 425 */ 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69,
  /* 452 */ 69, 69, 69, 69
];

XQueryParser.MAP2 =
[
  /*  0 */ 57344, 63744, 64976, 65008, 65536, 983040, 63743, 64975, 65007, 65533, 983039, 1114111, 38, 30, 38, 30, 30,
  /* 17 */ 38
];

XQueryParser.INITIAL =
[
  /*   0 */ 1, 12290, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28,
  /*  28 */ 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55,
  /*  55 */ 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82,
  /*  82 */ 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107,
  /* 107 */ 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
  /* 128 */ 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149,
  /* 149 */ 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170,
  /* 170 */ 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
  /* 191 */ 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212,
  /* 212 */ 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233,
  /* 233 */ 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254,
  /* 254 */ 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275,
  /* 275 */ 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286
];

XQueryParser.TRANSITION =
[
  /*     0 */ 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323,
  /*    15 */ 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323,
  /*    30 */ 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323,
  /*    45 */ 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323,
  /*    60 */ 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323,
  /*    75 */ 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323,
  /*    90 */ 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323,
  /*   105 */ 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323,
  /*   120 */ 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323,
  /*   135 */ 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323,
  /*   150 */ 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323,
  /*   165 */ 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323,
  /*   180 */ 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323,
  /*   195 */ 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323,
  /*   210 */ 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323,
  /*   225 */ 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323,
  /*   240 */ 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323,
  /*   255 */ 38323, 25975, 18176, 18180, 18180, 18180, 18210, 18180, 18180, 18180, 18180, 18222, 18180, 18180, 18180,
  /*   270 */ 18180, 18198, 18180, 18182, 18238, 38323, 38323, 38323, 26403, 38323, 38323, 51374, 38323, 38323, 38323,
  /*   285 */ 38323, 38323, 38323, 38323, 26331, 20476, 20741, 20610, 20743, 18975, 25647, 18275, 46788, 18301, 18323,
  /*   300 */ 38323, 38323, 18360, 38323, 32181, 21570, 18380, 18411, 18395, 18572, 19445, 18431, 20166, 18457, 25678,
  /*   315 */ 18484, 18506, 18946, 18463, 25684, 18490, 18512, 20573, 18528, 38323, 49890, 38323, 38323, 38323, 43058,
  /*   330 */ 23466, 43689, 38323, 18551, 44369, 18562, 20172, 24520, 20128, 20476, 23948, 18987, 19862, 18588, 18608,
  /*   345 */ 18993, 18468, 18991, 19866, 18592, 18612, 19074, 25632, 25648, 38323, 18628, 18665, 18687, 42424, 18671,
  /*   360 */ 18722, 38323, 30299, 46032, 18741, 18769, 19205, 18757, 19818, 25296, 18785, 18857, 18908, 18935, 19585,
  /*   375 */ 18962, 18785, 18857, 18908, 18935, 19585, 19009, 25641, 33669, 19090, 19125, 20852, 47209, 19141, 42123,
  /*   390 */ 19175, 20138, 20837, 19054, 19191, 19233, 19280, 25588, 19676, 19303, 18892, 19273, 25581, 19669, 19296,
  /*   405 */ 18885, 19326, 19355, 44208, 19389, 35906, 19411, 28985, 19431, 19461, 19039, 19540, 19571, 19603, 19621,
  /*   420 */ 19639, 19555, 19601, 19619, 19637, 19655, 19926, 19692, 19708, 19724, 19749, 19771, 19808, 19475, 19489,
  /*   435 */ 19883, 19900, 19834, 19882, 19899, 19916, 19942, 19979, 20016, 20047, 20116, 20154, 19786, 20188, 20210,
  /*   450 */ 19792, 20194, 20216, 20504, 20232, 43219, 20261, 20277, 20306, 20293, 20309, 20325, 20341, 20357, 24531,
  /*   465 */ 20712, 20401, 20440, 20474, 20742, 20743, 19024, 20492, 20520, 20547, 20636, 23957, 18813, 20667, 20683,
  /*   480 */ 20699, 20728, 20759, 20796, 20806, 20822, 19503, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323,
  /*   495 */ 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323,
  /*   510 */ 38323, 38323, 21073, 38323, 38323, 38323, 38323, 49383, 38323, 38323, 38323, 38323, 19257, 21352, 20889,
  /*   525 */ 20921, 20933, 20897, 20000, 21354, 20949, 38323, 38323, 38323, 26403, 38323, 38323, 51374, 32590, 38323,
  /*   540 */ 38323, 38323, 38323, 38323, 38323, 26331, 20476, 20741, 20610, 20743, 19849, 25647, 18275, 46788, 18301,
  /*   555 */ 18323, 38323, 38323, 18360, 38323, 32181, 21570, 18380, 18411, 18395, 18572, 19445, 18431, 20166, 18457,
  /*   570 */ 25678, 18484, 18506, 18946, 18463, 25684, 18490, 18512, 20573, 18528, 38323, 49890, 38323, 38323, 38323,
  /*   585 */ 43058, 23466, 43689, 38323, 18551, 44369, 18562, 20172, 24520, 20128, 20476, 23948, 18987, 19862, 18588,
  /*   600 */ 18608, 18993, 18468, 18991, 19866, 18592, 18612, 19074, 25632, 25648, 38323, 18628, 18665, 18687, 42424,
  /*   615 */ 18671, 18722, 38323, 30299, 46032, 18741, 18769, 19205, 18757, 19818, 25296, 18785, 18857, 18908, 18935,
  /*   630 */ 19585, 18962, 18785, 18857, 18908, 18935, 19585, 19009, 25641, 33669, 19090, 19125, 20852, 47209, 19141,
  /*   645 */ 42123, 19175, 20138, 20837, 19054, 19191, 19233, 19280, 25588, 19676, 19303, 18892, 19273, 25581, 19669,
  /*   660 */ 19296, 18885, 19326, 19355, 44208, 19389, 35906, 19411, 28985, 19431, 19461, 19039, 19540, 19571, 19603,
  /*   675 */ 19621, 19639, 19555, 19601, 19619, 19637, 19655, 19926, 19692, 19708, 19724, 19749, 19771, 19808, 19475,
  /*   690 */ 19489, 19883, 19900, 19834, 19882, 19899, 19916, 19942, 19979, 20016, 20047, 20116, 20154, 19786, 20188,
  /*   705 */ 20210, 19792, 20194, 20216, 20504, 20232, 43219, 20261, 20277, 20306, 20293, 20309, 20325, 20341, 20357,
  /*   720 */ 24531, 20712, 20401, 20440, 20474, 20742, 20743, 19024, 20492, 20520, 20547, 20636, 23957, 18813, 20667,
  /*   735 */ 20683, 20699, 20728, 20759, 20796, 20806, 20822, 19503, 38323, 38323, 38323, 38323, 38323, 38323, 38323,
  /*   750 */ 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323,
  /*   765 */ 38323, 38323, 38323, 25892, 21000, 38323, 38323, 38323, 38830, 38323, 38323, 42459, 42092, 21019, 38323,
  /*   780 */ 38323, 38323, 38323, 23570, 18706, 21059, 21092, 38323, 38323, 38323, 26403, 38323, 38323, 40923, 38323,
  /*   795 */ 38323, 38323, 38323, 38323, 38323, 38323, 26331, 20476, 20741, 20610, 20743, 18975, 51309, 18275, 46788,
  /*   810 */ 18301, 18323, 38323, 38323, 18360, 38323, 32181, 21570, 18380, 18411, 18395, 18572, 19445, 18431, 20166,
  /*   825 */ 18457, 25678, 18484, 18506, 18946, 18463, 25684, 18490, 18512, 20573, 18528, 38323, 49890, 38323, 38323,
  /*   840 */ 38323, 43058, 23466, 43689, 38323, 18551, 44369, 18562, 20172, 24520, 20128, 20476, 23948, 18987, 19862,
  /*   855 */ 18588, 18608, 18993, 18468, 18991, 19866, 18592, 18612, 19074, 25632, 25648, 38323, 18628, 18665, 18687,
  /*   870 */ 42424, 18671, 18722, 38323, 30299, 46032, 18741, 18769, 19205, 18757, 19818, 25296, 18785, 18857, 18908,
  /*   885 */ 18935, 19585, 18962, 18785, 18857, 18908, 18935, 19585, 19009, 25641, 33669, 19090, 19125, 20852, 47209,
  /*   900 */ 19141, 42123, 19175, 20138, 20837, 19054, 19191, 19233, 19280, 25588, 19676, 19303, 18892, 19273, 25581,
  /*   915 */ 19669, 19296, 18885, 19326, 19355, 44208, 19389, 35906, 19411, 28985, 19431, 19461, 19039, 19540, 19571,
  /*   930 */ 19603, 19621, 19639, 19555, 19601, 19619, 19637, 19655, 19926, 19692, 19708, 19724, 19749, 19771, 19808,
  /*   945 */ 19475, 19489, 19883, 19900, 19834, 19882, 19899, 19916, 19942, 19979, 20016, 20047, 20116, 20154, 19786,
  /*   960 */ 20188, 20210, 19792, 20194, 20216, 20504, 20232, 43219, 20261, 20277, 20306, 20293, 20309, 20325, 20341,
  /*   975 */ 20357, 24531, 20712, 20401, 20440, 20474, 20742, 20743, 19024, 20492, 20520, 20547, 20636, 23957, 18813,
  /*   990 */ 20667, 20683, 20699, 20728, 20759, 20796, 20806, 20822, 19503, 38323, 38323, 38323, 38323, 38323, 38323,
  /*  1005 */ 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323,
  /*  1020 */ 38323, 38323, 38323, 38323, 25537, 21199, 38323, 38323, 38323, 30319, 38323, 38323, 32239, 38323, 19257,
  /*  1035 */ 33742, 21129, 21142, 21163, 21176, 21192, 25523, 20949, 38323, 38323, 38323, 26403, 21220, 38323, 40818,
  /*  1050 */ 38323, 38323, 38323, 38323, 38323, 38323, 38323, 26331, 20476, 20741, 20610, 20743, 18975, 51098, 21238,
  /*  1065 */ 46788, 18301, 18323, 38323, 38323, 18360, 38323, 32181, 21570, 18380, 18411, 18395, 18572, 19445, 18431,
  /*  1080 */ 20166, 18457, 25678, 18484, 18506, 18946, 18463, 25684, 18490, 18512, 20573, 18528, 38323, 49890, 38323,
  /*  1095 */ 38323, 38323, 43058, 23466, 43689, 38323, 18551, 44369, 18562, 20172, 24520, 20128, 20476, 23948, 21261,
  /*  1110 */ 19862, 18588, 18608, 18993, 21266, 18991, 19866, 18592, 18612, 19074, 25632, 25648, 38323, 18628, 18665,
  /*  1125 */ 18687, 42424, 18671, 18722, 38323, 30299, 46032, 18741, 18769, 19205, 18757, 19818, 25296, 18785, 18857,
  /*  1140 */ 18908, 18935, 19585, 18962, 18785, 18857, 18908, 18935, 19585, 19009, 25641, 33669, 19090, 19125, 20852,
  /*  1155 */ 47209, 19141, 42123, 19175, 20138, 20837, 19054, 19191, 19233, 19280, 25588, 19676, 19303, 18892, 19273,
  /*  1170 */ 25581, 19669, 19296, 18885, 19326, 19355, 44208, 19389, 35906, 19411, 28985, 19431, 19461, 19039, 19540,
  /*  1185 */ 19571, 19603, 19621, 19639, 19555, 19601, 19619, 19637, 19655, 19926, 19692, 19708, 19724, 19749, 19771,
  /*  1200 */ 19808, 19475, 19489, 19883, 19900, 19834, 19882, 19899, 19916, 19942, 19979, 20016, 20047, 20116, 20154,
  /*  1215 */ 19786, 20188, 20210, 19792, 20194, 20216, 20504, 20232, 43219, 20261, 20277, 20306, 20293, 20309, 20325,
  /*  1230 */ 20341, 20357, 24531, 20712, 20401, 20440, 20474, 20742, 20743, 19024, 20492, 20520, 20547, 20636, 23957,
  /*  1245 */ 18813, 20667, 20683, 20699, 20728, 20759, 20796, 20806, 20822, 19503, 38323, 38323, 38323, 38323, 38323,
  /*  1260 */ 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323,
  /*  1275 */ 38323, 38323, 38323, 38323, 38323, 21073, 38317, 38323, 38323, 38323, 37810, 38322, 38323, 21394, 38323,
  /*  1290 */ 21282, 38312, 21319, 38323, 35075, 38323, 35713, 35725, 20949, 38323, 38323, 38323, 26403, 38323, 38323,
  /*  1305 */ 51374, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 26331, 20476, 20741, 20610, 20743, 18975, 25647,
  /*  1320 */ 18275, 46788, 18301, 18323, 38323, 38323, 18360, 38323, 32181, 21570, 18380, 18411, 18395, 18572, 19445,
  /*  1335 */ 18431, 20166, 18457, 25678, 18484, 18506, 18946, 18463, 25684, 18490, 18512, 20573, 18528, 38323, 49890,
  /*  1350 */ 38323, 38323, 38323, 43058, 23466, 43689, 38323, 18551, 44369, 18562, 20172, 24520, 20128, 20476, 23948,
  /*  1365 */ 18987, 19862, 18588, 18608, 18993, 18468, 18991, 19866, 18592, 18612, 19074, 25632, 25648, 38323, 18628,
  /*  1380 */ 18665, 18687, 42424, 18671, 18722, 38323, 30299, 46032, 18741, 18769, 19205, 18757, 19818, 25296, 18785,
  /*  1395 */ 18857, 18908, 18935, 19585, 18962, 18785, 18857, 18908, 18935, 19585, 19009, 25641, 33669, 19090, 19125,
  /*  1410 */ 20852, 47209, 19141, 42123, 19175, 20138, 20837, 19054, 19191, 19233, 19280, 25588, 19676, 19303, 18892,
  /*  1425 */ 19273, 25581, 19669, 19296, 18885, 19326, 19355, 44208, 19389, 35906, 19411, 28985, 19431, 19461, 19039,
  /*  1440 */ 19540, 19571, 19603, 19621, 19639, 19555, 19601, 19619, 19637, 19655, 19926, 19692, 19708, 19724, 19749,
  /*  1455 */ 19771, 19808, 19475, 19489, 19883, 19900, 19834, 19882, 19899, 19916, 19942, 19979, 20016, 20047, 20116,
  /*  1470 */ 20154, 19786, 20188, 20210, 19792, 20194, 20216, 20504, 20232, 43219, 20261, 20277, 20306, 20293, 20309,
  /*  1485 */ 20325, 20341, 20357, 24531, 20712, 20401, 20440, 20474, 20742, 20743, 19024, 20492, 20520, 20547, 20636,
  /*  1500 */ 23957, 18813, 20667, 20683, 20699, 20728, 20759, 20796, 20806, 20822, 19503, 38323, 38323, 38323, 38323,
  /*  1515 */ 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323,
  /*  1530 */ 38323, 38323, 38323, 38323, 38323, 38323, 21073, 38323, 38323, 38323, 38323, 49383, 21370, 38323, 38323,
  /*  1545 */ 38323, 21953, 38323, 38323, 21389, 38323, 38323, 21410, 21422, 20949, 38323, 38323, 38323, 26403, 38323,
  /*  1560 */ 38323, 51374, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 26331, 20476, 20741, 20610, 20743, 18975,
  /*  1575 */ 25647, 18275, 46788, 18301, 18323, 38323, 38323, 18360, 38323, 32181, 21570, 18380, 18411, 18395, 18572,
  /*  1590 */ 19445, 18431, 20166, 18457, 25678, 18484, 18506, 18946, 18463, 25684, 18490, 18512, 20573, 18528, 38323,
  /*  1605 */ 49890, 38323, 38323, 38323, 43058, 23466, 43689, 38323, 18551, 44369, 18562, 20172, 24520, 20128, 20476,
  /*  1620 */ 23948, 18987, 19862, 18588, 18608, 18993, 18468, 18991, 19866, 18592, 18612, 19074, 25632, 25648, 38323,
  /*  1635 */ 18628, 18665, 18687, 42424, 18671, 18722, 38323, 30299, 46032, 18741, 18769, 19205, 18757, 19818, 25296,
  /*  1650 */ 18785, 18857, 18908, 18935, 19585, 18962, 18785, 18857, 18908, 18935, 19585, 19009, 25641, 33669, 19090,
  /*  1665 */ 19125, 20852, 47209, 19141, 42123, 19175, 20138, 20837, 19054, 19191, 19233, 19280, 25588, 19676, 19303,
  /*  1680 */ 18892, 19273, 25581, 19669, 19296, 18885, 19326, 19355, 44208, 19389, 35906, 19411, 28985, 19431, 19461,
  /*  1695 */ 19039, 19540, 19571, 19603, 19621, 19639, 19555, 19601, 19619, 19637, 19655, 19926, 19692, 19708, 19724,
  /*  1710 */ 19749, 19771, 19808, 19475, 19489, 19883, 19900, 19834, 19882, 19899, 19916, 19942, 19979, 20016, 20047,
  /*  1725 */ 20116, 20154, 19786, 20188, 20210, 19792, 20194, 20216, 20504, 20232, 43219, 20261, 20277, 20306, 20293,
  /*  1740 */ 20309, 20325, 20341, 20357, 24531, 20712, 20401, 20440, 20474, 20742, 20743, 19024, 20492, 20520, 20547,
  /*  1755 */ 20636, 23957, 18813, 20667, 20683, 20699, 20728, 20759, 20796, 20806, 20822, 19503, 38323, 38323, 38323,
  /*  1770 */ 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323,
  /*  1785 */ 38323, 38323, 38323, 38323, 38323, 38323, 38323, 21073, 38323, 38323, 38323, 38323, 49383, 38323, 38323,
  /*  1800 */ 38323, 38323, 49202, 38323, 38323, 38323, 38323, 38323, 38323, 29037, 21438, 38323, 38323, 38323, 26403,
  /*  1815 */ 38323, 38323, 51374, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 26331, 20476, 20741, 20610, 20743,
  /*  1830 */ 18975, 25647, 18275, 46788, 18301, 18323, 38323, 38323, 18360, 38323, 32181, 21570, 18380, 18411, 18395,
  /*  1845 */ 18572, 19445, 18431, 20166, 21475, 25678, 18484, 18506, 20531, 18463, 25684, 18490, 18512, 20573, 18528,
  /*  1860 */ 38323, 49890, 38323, 38323, 38323, 43058, 23466, 43689, 38323, 18551, 44369, 18562, 20172, 24520, 20128,
  /*  1875 */ 20476, 23948, 18987, 19862, 18588, 18608, 18993, 18468, 18991, 19866, 18592, 18612, 19074, 25632, 25648,
  /*  1890 */ 38323, 18628, 18665, 18687, 42424, 18671, 18722, 38323, 30299, 46032, 18741, 18769, 19205, 18757, 19818,
  /*  1905 */ 25296, 18785, 18857, 18908, 18935, 19585, 18962, 18785, 18857, 18908, 18935, 19585, 19009, 25641, 33669,
  /*  1920 */ 19090, 19125, 20852, 47209, 19141, 42123, 19175, 20138, 20837, 19054, 19191, 19233, 19280, 25588, 19676,
  /*  1935 */ 19303, 18892, 19273, 25581, 19669, 19296, 18885, 19326, 19355, 44208, 19389, 35906, 19411, 28985, 19431,
  /*  1950 */ 19461, 19039, 19540, 19571, 19603, 19621, 19639, 19555, 19601, 19619, 19637, 19655, 19926, 19692, 19708,
  /*  1965 */ 19724, 19749, 19771, 19808, 19475, 19489, 19883, 19900, 19834, 19882, 19899, 19916, 19942, 19979, 20016,
  /*  1980 */ 20047, 20116, 20154, 19786, 20188, 20210, 19792, 20194, 20216, 20504, 20232, 43219, 20261, 20277, 20306,
  /*  1995 */ 20293, 20309, 20325, 20341, 20357, 24531, 20712, 20401, 20440, 20474, 20742, 20743, 19024, 20492, 20520,
  /*  2010 */ 20547, 20636, 23957, 18813, 20667, 20683, 20699, 20728, 20759, 20796, 20806, 20822, 19503, 38323, 38323,
  /*  2025 */ 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323,
  /*  2040 */ 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 23265, 21500, 38323, 38323, 38323, 22199, 38323,
  /*  2055 */ 38323, 40943, 42151, 25444, 38323, 38323, 38323, 38323, 51187, 43431, 21519, 21549, 38323, 38323, 38323,
  /*  2070 */ 26403, 38323, 38323, 51374, 21586, 38323, 38323, 38323, 38323, 38323, 38323, 26331, 20476, 20741, 20610,
  /*  2085 */ 20743, 18975, 21484, 21603, 46788, 18301, 18323, 38323, 38323, 18360, 38323, 32181, 21570, 18380, 18411,
  /*  2100 */ 18395, 18572, 19445, 18431, 20166, 18457, 25678, 18484, 18506, 18946, 18463, 25684, 18490, 18512, 20573,
  /*  2115 */ 18528, 38323, 49890, 38323, 38323, 38323, 43058, 23466, 43689, 38323, 18551, 44369, 18562, 20172, 24520,
  /*  2130 */ 20128, 20476, 23948, 18987, 19862, 18588, 18608, 18993, 18468, 18991, 19866, 18592, 18612, 19074, 25632,
  /*  2145 */ 25648, 38323, 18628, 18665, 18687, 42424, 18671, 18722, 38323, 30299, 46032, 18741, 18769, 19205, 18757,
  /*  2160 */ 19818, 25296, 18785, 18857, 18908, 18935, 19585, 18962, 18785, 18857, 18908, 18935, 19585, 19009, 25641,
  /*  2175 */ 33669, 19090, 19125, 20852, 47209, 19141, 42123, 19175, 20138, 20837, 19054, 19191, 19233, 19280, 25588,
  /*  2190 */ 19676, 19303, 18892, 19273, 25581, 19669, 19296, 18885, 19326, 19355, 44208, 19389, 35906, 19411, 28985,
  /*  2205 */ 19431, 19461, 19039, 19540, 19571, 19603, 19621, 19639, 19555, 19601, 19619, 19637, 19655, 19926, 19692,
  /*  2220 */ 19708, 19724, 19749, 19771, 19808, 19475, 19489, 19883, 19900, 19834, 19882, 19899, 19916, 19942, 19979,
  /*  2235 */ 20016, 20047, 20116, 20154, 19786, 20188, 20210, 19792, 20194, 20216, 20504, 20232, 43219, 20261, 20277,
  /*  2250 */ 20306, 20293, 20309, 20325, 20341, 20357, 24531, 20712, 20401, 20440, 20474, 20742, 20743, 19024, 20492,
  /*  2265 */ 20520, 20547, 20636, 23957, 18813, 20667, 20683, 20699, 20728, 20759, 20796, 20806, 20822, 19503, 38323,
  /*  2280 */ 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323,
  /*  2295 */ 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 21533, 21667, 21631, 21631, 21631, 21674,
  /*  2310 */ 21626, 21631, 21636, 21706, 21652, 21690, 21722, 21701, 21738, 21752, 21764, 21776, 20949, 38323, 38323,
  /*  2325 */ 38323, 40892, 38323, 38323, 51374, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 26331, 20476, 20741,
  /*  2340 */ 20610, 20743, 18975, 25647, 18275, 46788, 18301, 21792, 38323, 38323, 18360, 38323, 32181, 21570, 18380,
  /*  2355 */ 18411, 18395, 18572, 19445, 18431, 20166, 18457, 25678, 18484, 18506, 18946, 18463, 25684, 18490, 18512,
  /*  2370 */ 20573, 18528, 38323, 49890, 38323, 38323, 38323, 43058, 23466, 43689, 38323, 18551, 44369, 18562, 20172,
  /*  2385 */ 24520, 20128, 20476, 23948, 18987, 19862, 18588, 18608, 18993, 18468, 18991, 19866, 18592, 18612, 19074,
  /*  2400 */ 25632, 25648, 38323, 18628, 18665, 18687, 42424, 18671, 18722, 38323, 30299, 46032, 18741, 18769, 19205,
  /*  2415 */ 18757, 19818, 25296, 18785, 18857, 18908, 18935, 19585, 18962, 18785, 18857, 18908, 18935, 19585, 19009,
  /*  2430 */ 25641, 33669, 19090, 19125, 20852, 47209, 19141, 42123, 19175, 20138, 20837, 19054, 19191, 19233, 19280,
  /*  2445 */ 25588, 19676, 19303, 18892, 19273, 25581, 19669, 19296, 18885, 19326, 19355, 44208, 19389, 35906, 19411,
  /*  2460 */ 28985, 19431, 19461, 19039, 19540, 19571, 19603, 19621, 19639, 19555, 19601, 19619, 19637, 19655, 19926,
  /*  2475 */ 19692, 19708, 19724, 19749, 19771, 19808, 19475, 19489, 19883, 19900, 19834, 19882, 19899, 19916, 19942,
  /*  2490 */ 19979, 20016, 20047, 20116, 20154, 19786, 20188, 20210, 19792, 20194, 20216, 20504, 20232, 43219, 20261,
  /*  2505 */ 20277, 20306, 20293, 20309, 20325, 20341, 20357, 24531, 20712, 20401, 20440, 20474, 20742, 20743, 19024,
  /*  2520 */ 20492, 20520, 20547, 20636, 23957, 18813, 20667, 20683, 20699, 20728, 20759, 20796, 20806, 20822, 19503,
  /*  2535 */ 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323,
  /*  2550 */ 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 21073, 51441, 38323, 38323, 38323,
  /*  2565 */ 20984, 36747, 38323, 26148, 36753, 19257, 51441, 38323, 21828, 21833, 21849, 21874, 21858, 21903, 38323,
  /*  2580 */ 38323, 38323, 27673, 38323, 38323, 51374, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 26331, 20476,
  /*  2595 */ 20741, 20610, 20743, 18975, 25647, 18275, 46788, 18301, 21941, 38323, 38323, 18360, 38323, 32181, 21570,
  /*  2610 */ 18380, 18411, 18395, 18572, 19445, 18431, 20166, 18457, 25678, 18484, 18506, 18946, 18463, 25684, 18490,
  /*  2625 */ 18512, 20573, 18528, 38323, 49890, 38323, 38323, 38323, 43058, 23466, 43689, 38323, 18551, 44369, 18562,
  /*  2640 */ 20172, 24520, 20128, 20476, 23948, 18987, 19862, 18588, 18608, 18993, 18468, 18991, 19866, 18592, 18612,
  /*  2655 */ 19074, 25632, 25648, 38323, 18628, 18665, 18687, 42424, 18671, 18722, 38323, 30299, 46032, 18741, 18769,
  /*  2670 */ 19205, 18757, 19818, 25296, 18785, 18857, 18908, 18935, 19585, 18962, 18785, 18857, 18908, 18935, 19585,
  /*  2685 */ 19009, 25641, 33669, 19090, 19125, 20852, 47209, 19141, 42123, 19175, 20138, 20837, 19054, 19191, 19233,
  /*  2700 */ 19280, 25588, 19676, 19303, 18892, 19273, 25581, 19669, 19296, 18885, 19326, 19355, 44208, 19389, 35906,
  /*  2715 */ 19411, 28985, 19431, 19461, 19039, 19540, 19571, 19603, 19621, 19639, 19555, 19601, 19619, 19637, 19655,
  /*  2730 */ 19926, 19692, 19708, 19724, 19749, 19771, 19808, 19475, 19489, 19883, 19900, 19834, 19882, 19899, 19916,
  /*  2745 */ 19942, 19979, 20016, 20047, 20116, 20154, 19786, 20188, 20210, 19792, 20194, 20216, 20504, 20232, 43219,
  /*  2760 */ 20261, 20277, 20306, 20293, 20309, 20325, 20341, 20357, 24531, 20712, 20401, 20440, 20474, 20742, 20743,
  /*  2775 */ 19024, 20492, 20520, 20547, 20636, 23957, 18813, 20667, 20683, 20699, 20728, 20759, 20796, 20806, 20822,
  /*  2790 */ 19503, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323,
  /*  2805 */ 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 21073, 34828, 38323, 38323,
  /*  2820 */ 38323, 49383, 38323, 38323, 38323, 22126, 51284, 21997, 21969, 21991, 21975, 22013, 22037, 22049, 20949,
  /*  2835 */ 38323, 38323, 38323, 26403, 38323, 38323, 51374, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 26331,
  /*  2850 */ 20476, 20741, 20610, 20743, 18975, 25647, 18275, 46788, 18301, 18323, 38323, 38323, 18360, 38323, 32181,
  /*  2865 */ 21570, 18380, 18411, 18395, 18572, 19445, 18431, 20166, 18457, 25678, 18484, 18506, 20598, 18463, 25684,
  /*  2880 */ 18490, 18512, 20573, 18528, 38323, 49890, 38323, 38323, 38323, 43058, 23466, 43689, 38323, 18551, 44369,
  /*  2895 */ 18562, 20172, 24520, 20128, 20476, 23948, 18987, 19862, 18588, 18608, 18993, 18468, 18991, 19866, 18592,
  /*  2910 */ 18612, 19074, 25632, 25648, 38323, 18628, 18665, 18687, 42424, 18671, 18722, 38323, 30299, 46032, 18741,
  /*  2925 */ 18769, 19205, 18757, 19818, 25296, 18785, 18857, 18908, 18935, 19585, 18962, 18785, 18857, 18908, 18935,
  /*  2940 */ 19585, 19009, 25641, 33669, 19090, 19125, 20852, 47209, 19141, 42123, 19175, 20138, 20837, 19054, 19191,
  /*  2955 */ 19233, 19280, 25588, 19676, 19303, 18892, 19273, 25581, 19669, 19296, 18885, 19326, 19355, 44208, 19389,
  /*  2970 */ 35906, 19411, 28985, 19431, 19461, 19039, 19540, 19571, 19603, 19621, 19639, 19555, 19601, 19619, 19637,
  /*  2985 */ 19655, 19926, 19692, 19708, 19724, 19749, 19771, 19808, 19475, 19489, 19883, 19900, 19834, 19882, 19899,
  /*  3000 */ 19916, 19942, 19979, 20016, 20047, 20116, 20154, 19786, 20188, 20210, 19792, 20194, 20216, 20504, 20232,
  /*  3015 */ 43219, 20261, 20277, 20306, 20293, 20309, 20325, 20341, 20357, 24531, 20712, 20401, 20440, 20474, 20742,
  /*  3030 */ 20743, 19024, 20492, 20520, 20547, 20636, 23957, 18813, 20667, 20683, 20699, 20728, 20759, 20796, 20806,
  /*  3045 */ 20822, 19503, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323,
  /*  3060 */ 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 21073, 38323, 38323,
  /*  3075 */ 38323, 38323, 49383, 38323, 38323, 38323, 23194, 27298, 38791, 22065, 22083, 22065, 22097, 38789, 22067,
  /*  3090 */ 20949, 38323, 38323, 38323, 26403, 38323, 38323, 51374, 38323, 38323, 38323, 38323, 38323, 38323, 38323,
  /*  3105 */ 26331, 20476, 20741, 20610, 20743, 18975, 25647, 18275, 46788, 18301, 18323, 38323, 38323, 22121, 38323,
  /*  3120 */ 32181, 21570, 18380, 18411, 18395, 18572, 19445, 18431, 20166, 18457, 25678, 18484, 18506, 18946, 18463,
  /*  3135 */ 25684, 18490, 18512, 20573, 18528, 38323, 49890, 38323, 38323, 38323, 43058, 23466, 43689, 38323, 18551,
  /*  3150 */ 44369, 18562, 20172, 24520, 20128, 20476, 23948, 18987, 19862, 18588, 18608, 18993, 18468, 18991, 19866,
  /*  3165 */ 18592, 18612, 19074, 25632, 25648, 38323, 18628, 18665, 18687, 42424, 18671, 18722, 38323, 30299, 46032,
  /*  3180 */ 18741, 18769, 19205, 18757, 19818, 25296, 18785, 18857, 18908, 18935, 19585, 18962, 18785, 18857, 18908,
  /*  3195 */ 18935, 19585, 19009, 25641, 33669, 19090, 19125, 20852, 47209, 19141, 42123, 19175, 20138, 20837, 19054,
  /*  3210 */ 19191, 19233, 19280, 25588, 19676, 19303, 18892, 19273, 25581, 19669, 19296, 18885, 19326, 19355, 44208,
  /*  3225 */ 19389, 35906, 19411, 28985, 19431, 19461, 19039, 19540, 19571, 19603, 19621, 19639, 19555, 19601, 19619,
  /*  3240 */ 19637, 19655, 19926, 19692, 19708, 19724, 19749, 19771, 19808, 19475, 19489, 19883, 19900, 19834, 19882,
  /*  3255 */ 19899, 19916, 19942, 19979, 20016, 20047, 20116, 20154, 19786, 20188, 20210, 19792, 20194, 20216, 20504,
  /*  3270 */ 20232, 43219, 20261, 20277, 20306, 20293, 20309, 20325, 20341, 20357, 24531, 20712, 20401, 20440, 20474,
  /*  3285 */ 20742, 20743, 19024, 20492, 20520, 20547, 20636, 23957, 18813, 20667, 20683, 20699, 20728, 20759, 20796,
  /*  3300 */ 20806, 20822, 19503, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323,
  /*  3315 */ 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 21073, 31212,
  /*  3330 */ 38323, 38323, 38323, 49383, 38822, 38323, 26817, 22155, 29455, 22142, 22171, 22175, 22175, 22191, 31210,
  /*  3345 */ 25878, 20949, 38323, 38323, 38323, 26403, 38323, 38323, 51374, 38323, 38323, 38323, 38323, 38323, 38323,
  /*  3360 */ 38323, 26331, 20476, 20741, 20610, 20743, 18975, 25647, 18275, 46788, 18301, 18323, 38323, 38323, 18360,
  /*  3375 */ 38323, 32181, 21570, 18380, 18411, 18395, 18572, 19445, 18431, 20166, 18457, 25678, 18484, 18506, 18946,
  /*  3390 */ 18463, 25684, 18490, 18512, 20573, 18528, 38323, 49890, 38323, 38323, 38323, 43058, 23466, 43689, 38323,
  /*  3405 */ 18551, 44369, 18562, 20172, 24520, 20128, 20476, 23948, 18987, 19862, 18588, 18608, 18993, 18468, 18991,
  /*  3420 */ 19866, 18592, 18612, 19074, 25632, 25648, 38323, 18628, 18665, 18687, 42424, 18671, 18722, 38323, 30299,
  /*  3435 */ 46032, 18741, 18769, 19205, 18757, 19818, 25296, 18785, 18857, 18908, 18935, 19585, 18962, 18785, 18857,
  /*  3450 */ 18908, 18935, 19585, 19009, 25641, 33669, 19090, 19125, 20852, 47209, 19141, 42123, 19175, 20138, 20837,
  /*  3465 */ 19054, 19191, 19233, 19280, 25588, 19676, 19303, 18892, 19273, 25581, 19669, 19296, 18885, 19326, 19355,
  /*  3480 */ 44208, 19389, 35906, 19411, 28985, 19431, 19461, 19039, 19540, 19571, 19603, 19621, 19639, 19555, 19601,
  /*  3495 */ 19619, 19637, 19655, 19926, 19692, 19708, 19724, 19749, 19771, 19808, 19475, 19489, 19883, 19900, 19834,
  /*  3510 */ 19882, 19899, 19916, 19942, 19979, 20016, 20047, 20116, 20154, 19786, 20188, 20210, 19792, 20194, 20216,
  /*  3525 */ 20504, 20232, 43219, 20261, 20277, 20306, 20293, 20309, 20325, 20341, 20357, 24531, 20712, 20401, 20440,
  /*  3540 */ 20474, 20742, 20743, 19024, 20492, 20520, 20547, 20636, 23957, 18813, 20667, 20683, 20699, 20728, 20759,
  /*  3555 */ 20796, 20806, 20822, 19503, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323,
  /*  3570 */ 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 22215,
  /*  3585 */ 38323, 38323, 38323, 38323, 49383, 38323, 38323, 38323, 38323, 19257, 48976, 22238, 22256, 22238, 22270,
  /*  3600 */ 48974, 22240, 22294, 38323, 38323, 38323, 26403, 38323, 38323, 51374, 38323, 38323, 38323, 38323, 38323,
  /*  3615 */ 38323, 38323, 28208, 22701, 46213, 35139, 35586, 34683, 22325, 38323, 50188, 38323, 26352, 33699, 22349,
  /*  3630 */ 22121, 31133, 38323, 38323, 38323, 38323, 28210, 22701, 22366, 22701, 22701, 22385, 44587, 46215, 46215,
  /*  3645 */ 39549, 35586, 35415, 35586, 35586, 22403, 22426, 38323, 38323, 38323, 38323, 38323, 28780, 38323, 22449,
  /*  3660 */ 22470, 38323, 38323, 38164, 22701, 22701, 22701, 22701, 38170, 22585, 46215, 46215, 46215, 46215, 28695,
  /*  3675 */ 35586, 35586, 35586, 35586, 35586, 32887, 22488, 45840, 30229, 38323, 38323, 38323, 38323, 38323, 43165,
  /*  3690 */ 38323, 38323, 23033, 48879, 22701, 22701, 22701, 30391, 22511, 40059, 46215, 22545, 46215, 22387, 43862,
  /*  3705 */ 42257, 35586, 22564, 35586, 27855, 41406, 38323, 38323, 38323, 38323, 38323, 46469, 38323, 36754, 22701,
  /*  3720 */ 32985, 22701, 22701, 30392, 22583, 41663, 46215, 46215, 46215, 30151, 35586, 39864, 35586, 35586, 34371,
  /*  3735 */ 41409, 38323, 38323, 49060, 39370, 38323, 28209, 22701, 22701, 36921, 37600, 46215, 46215, 44118, 37653,
  /*  3750 */ 35586, 35586, 43645, 27856, 30825, 38323, 38323, 18415, 22602, 38164, 22620, 22701, 40356, 22641, 46215,
  /*  3765 */ 36375, 22661, 35586, 40120, 22682, 38323, 23517, 38323, 34063, 22700, 30749, 45982, 46215, 22718, 22754,
  /*  3780 */ 27856, 22734, 30446, 38323, 32342, 22773, 37436, 22796, 32067, 22727, 31368, 29853, 22815, 39809, 22846,
  /*  3795 */ 36649, 22883, 22902, 22920, 28205, 42762, 27795, 22922, 22495, 22780, 46276, 22492, 28358, 36376, 34297,
  /*  3810 */ 22799, 50605, 28402, 22938, 23009, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323,
  /*  3825 */ 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323,
  /*  3840 */ 21073, 38323, 38323, 38323, 38323, 49383, 38323, 38323, 38323, 47185, 19257, 38323, 38323, 38323, 38323,
  /*  3855 */ 38323, 47151, 47163, 23068, 38323, 38323, 38323, 26403, 38323, 38323, 41016, 38323, 38323, 38323, 38323,
  /*  3870 */ 38323, 38323, 38323, 28208, 22701, 46213, 35139, 35586, 23105, 22325, 38323, 38323, 38323, 26352, 38323,
  /*  3885 */ 38323, 18360, 38323, 38323, 38323, 38323, 38323, 28210, 22701, 22701, 22701, 22701, 22385, 46215, 46215,
  /*  3900 */ 46215, 39549, 35586, 35586, 35586, 35586, 40524, 22426, 38323, 38323, 38323, 38323, 38323, 28780, 38323,
  /*  3915 */ 38323, 38323, 38323, 38323, 38164, 22701, 22701, 22701, 22701, 38170, 22585, 46215, 46215, 46215, 46215,
  /*  3930 */ 28695, 35586, 35586, 35586, 35586, 35586, 32887, 22488, 38323, 38323, 38323, 38323, 38323, 38323, 38323,
  /*  3945 */ 38323, 38323, 38323, 38166, 22701, 22701, 22701, 22701, 30391, 22584, 46215, 46215, 46215, 46215, 22387,
  /*  3960 */ 30159, 35586, 35586, 35586, 35586, 27855, 41406, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 36754,
  /*  3975 */ 22701, 22701, 22701, 22701, 30392, 22583, 46215, 46215, 46215, 46215, 30151, 35586, 35586, 35586, 35586,
  /*  3990 */ 34371, 41409, 38323, 38323, 38323, 38323, 38323, 28209, 22701, 22701, 22701, 37600, 46215, 46215, 46215,
  /*  4005 */ 37653, 35586, 35586, 35586, 27856, 22734, 38323, 38323, 38323, 38323, 38164, 22701, 22701, 40356, 46215,
  /*  4020 */ 46215, 36375, 35586, 35586, 40120, 38323, 38323, 38323, 38323, 38169, 22701, 28357, 46215, 46215, 36378,
  /*  4035 */ 35586, 27856, 22734, 41022, 38323, 38168, 42763, 46215, 28378, 35586, 22727, 36650, 38164, 28358, 28377,
  /*  4050 */ 30161, 36649, 38168, 46214, 35585, 28205, 42762, 27795, 22922, 28211, 40355, 36377, 22492, 28358, 36376,
  /*  4065 */ 34297, 22799, 50605, 28402, 22938, 23009, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323,
  /*  4080 */ 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323,
  /*  4095 */ 38323, 21073, 23133, 38323, 38323, 38323, 22021, 38323, 38323, 38323, 38323, 19257, 40742, 23155, 23189,
  /*  4110 */ 23177, 23210, 40741, 23161, 20949, 38323, 38323, 38323, 26403, 38323, 38323, 51374, 34408, 38323, 43188,
  /*  4125 */ 38323, 38323, 38323, 38323, 26331, 20476, 20741, 20610, 20743, 18975, 25647, 18275, 46788, 18301, 18323,
  /*  4140 */ 38323, 38323, 18360, 38323, 32181, 21570, 18380, 18411, 18395, 18572, 19445, 18431, 20166, 18457, 25678,
  /*  4155 */ 18484, 18506, 18946, 18463, 25684, 18490, 18512, 20573, 18528, 38323, 49890, 38323, 38323, 38323, 43058,
  /*  4170 */ 23466, 43689, 38323, 18551, 44369, 18562, 20172, 24520, 20128, 20476, 23948, 18987, 19862, 18588, 18608,
  /*  4185 */ 18993, 18468, 18991, 19866, 18592, 18612, 19074, 25632, 25648, 38323, 18628, 18665, 18687, 42424, 18671,
  /*  4200 */ 18722, 38323, 30299, 46032, 18741, 18769, 19205, 18757, 19818, 25296, 18785, 18857, 18908, 18935, 19585,
  /*  4215 */ 18962, 18785, 18857, 18908, 18935, 19585, 19009, 25641, 33669, 19090, 19125, 20852, 47209, 19141, 42123,
  /*  4230 */ 19175, 20138, 20837, 19054, 19191, 19233, 19280, 25588, 19676, 19303, 18892, 19273, 25581, 19669, 19296,
  /*  4245 */ 18885, 19326, 19355, 44208, 19389, 35906, 19411, 28985, 19431, 19461, 19039, 19540, 19571, 19603, 19621,
  /*  4260 */ 19639, 19555, 19601, 19619, 19637, 19655, 19926, 19692, 19708, 19724, 19749, 19771, 19808, 19475, 19489,
  /*  4275 */ 19883, 19900, 19834, 19882, 19899, 19916, 19942, 19979, 20016, 20047, 20116, 20154, 19786, 20188, 20210,
  /*  4290 */ 19792, 20194, 20216, 20504, 20232, 43219, 20261, 20277, 20306, 20293, 20309, 20325, 20341, 20357, 24531,
  /*  4305 */ 20712, 20401, 20440, 20474, 20742, 20743, 19024, 20492, 20520, 20547, 20636, 23957, 18813, 20667, 20683,
  /*  4320 */ 20699, 20728, 20759, 20796, 20806, 20822, 19503, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323,
  /*  4335 */ 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323,
  /*  4350 */ 38323, 38323, 21073, 23234, 38323, 38323, 38323, 49383, 38323, 38323, 38323, 23089, 19257, 38323, 38323,
  /*  4365 */ 38323, 38323, 38323, 49177, 23251, 23281, 38323, 38323, 38323, 26403, 38323, 38323, 23318, 38323, 38323,
  /*  4380 */ 38323, 38323, 38323, 38323, 38323, 28208, 22701, 46213, 35139, 35586, 23340, 22325, 38323, 38323, 38323,
  /*  4395 */ 26352, 38323, 38323, 23392, 38323, 38323, 38323, 38323, 38323, 28210, 22701, 22701, 22701, 22701, 22385,
  /*  4410 */ 46215, 46215, 46215, 39549, 35586, 35586, 35586, 35586, 40524, 23423, 23462, 38323, 38323, 38323, 38323,
  /*  4425 */ 37736, 23482, 38323, 38323, 38323, 38323, 38164, 22701, 22701, 22701, 22701, 38170, 22585, 46215, 46215,
  /*  4440 */ 46215, 46215, 28695, 35586, 35586, 35586, 35586, 35586, 32887, 23503, 23436, 38323, 38323, 38323, 38323,
  /*  4455 */ 38323, 23545, 38323, 38323, 38323, 38166, 22701, 22701, 22701, 22701, 50631, 22584, 46215, 46215, 46215,
  /*  4470 */ 46215, 47739, 30159, 35586, 35586, 35586, 35586, 27855, 35646, 23566, 38323, 38323, 38323, 38323, 38323,
  /*  4485 */ 38323, 36754, 22701, 22701, 22701, 22701, 29722, 22583, 46215, 46215, 46215, 46215, 32017, 35586, 35586,
  /*  4500 */ 35586, 35586, 34371, 41409, 38323, 38323, 38323, 38323, 38323, 28209, 22701, 22701, 22701, 46090, 46215,
  /*  4515 */ 46215, 46215, 31986, 35586, 35586, 35586, 27856, 22734, 38323, 38323, 38323, 38323, 38164, 22701, 22701,
  /*  4530 */ 40356, 46215, 46215, 36375, 35586, 35586, 40120, 38323, 38323, 38323, 38323, 38169, 22701, 28357, 46215,
  /*  4545 */ 46215, 36378, 35586, 27856, 22734, 41022, 38323, 38168, 42763, 46215, 28378, 35586, 22727, 36650, 38164,
  /*  4560 */ 28358, 28377, 30161, 36649, 38168, 46214, 35585, 28205, 42762, 27795, 22922, 28211, 40355, 36377, 22492,
  /*  4575 */ 28358, 36376, 34297, 22799, 50605, 28402, 22938, 23009, 38323, 38323, 38323, 38323, 38323, 38323, 38323,
  /*  4590 */ 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323,
  /*  4605 */ 38323, 38323, 38323, 21073, 42285, 38323, 38323, 38323, 22333, 41824, 38323, 38323, 23586, 19257, 36150,
  /*  4620 */ 30440, 23623, 23628, 23644, 38323, 50221, 23668, 23705, 38323, 38323, 39392, 23722, 38323, 51374, 38323,
  /*  4635 */ 38323, 38323, 38323, 38323, 38323, 38323, 35180, 20476, 25069, 24101, 24039, 25134, 25098, 18275, 46788,
  /*  4650 */ 18301, 23740, 38323, 38323, 18360, 38323, 32181, 21570, 18380, 18411, 18395, 18572, 19445, 18431, 20166,
  /*  4665 */ 23789, 24128, 23814, 23854, 24373, 23896, 23918, 23973, 24063, 23986, 24015, 38323, 49890, 38323, 38323,
  /*  4680 */ 38323, 43058, 23466, 43689, 38323, 18551, 44369, 18562, 20172, 24520, 20128, 20476, 23948, 25146, 24755,
  /*  4695 */ 24366, 24724, 24730, 25151, 24038, 24478, 24911, 24055, 23902, 25019, 25035, 38323, 18628, 18665, 18687,
  /*  4710 */ 42424, 18671, 18722, 38323, 30299, 46032, 18741, 18769, 19205, 18757, 19818, 25296, 24079, 23999, 23869,
  /*  4725 */ 24117, 23880, 24144, 24193, 24417, 24296, 24254, 24307, 24281, 25028, 33669, 19090, 19125, 20852, 47209,
  /*  4740 */ 19141, 42123, 19175, 20138, 20837, 19054, 19191, 19233, 24323, 24339, 24355, 24094, 24389, 24433, 24223,
  /*  4755 */ 24490, 24464, 23838, 24506, 24547, 44208, 19389, 35906, 19411, 28985, 19431, 19461, 19039, 19540, 24573,
  /*  4770 */ 24631, 24645, 24661, 24677, 24238, 24811, 24693, 24709, 24833, 19692, 19708, 19724, 19749, 19771, 19808,
  /*  4785 */ 19475, 20371, 24746, 24587, 20385, 24771, 24208, 24823, 19942, 19979, 20016, 20047, 20116, 20154, 20651,
  /*  4800 */ 24615, 24601, 24797, 24896, 24265, 25196, 20232, 43219, 20261, 24849, 24865, 24881, 24781, 24927, 20341,
  /*  4815 */ 20357, 19217, 23798, 24943, 24959, 20474, 25070, 25010, 23933, 25057, 25086, 25121, 20636, 18441, 23828,
  /*  4830 */ 24448, 25167, 24404, 25183, 25212, 25249, 25265, 25281, 25326, 38323, 38323, 38323, 38323, 38323, 38323,
  /*  4845 */ 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323,
  /*  4860 */ 38323, 38323, 38323, 38323, 21073, 23487, 38323, 38323, 38323, 49383, 25370, 38323, 38323, 25365, 31396,
  /*  4875 */ 39079, 25386, 25386, 25386, 25394, 23302, 39082, 20949, 38323, 38323, 38323, 26403, 38323, 38323, 51374,
  /*  4890 */ 38323, 38323, 38323, 38323, 38323, 38323, 38323, 26331, 20476, 20741, 20610, 20743, 18975, 25647, 18275,
  /*  4905 */ 46788, 18301, 18323, 38323, 38323, 18360, 38323, 32181, 21570, 18380, 18411, 18395, 18572, 19445, 18431,
  /*  4920 */ 20166, 18457, 25678, 18484, 18506, 18946, 18463, 25684, 18490, 18512, 20573, 18528, 38323, 49890, 38323,
  /*  4935 */ 38323, 38323, 43058, 25418, 43689, 38323, 18551, 44369, 18562, 20172, 24520, 20128, 20476, 23948, 18987,
  /*  4950 */ 19862, 18588, 18608, 18993, 18468, 18991, 19866, 18592, 18612, 19074, 25632, 20620, 25434, 18628, 18665,
  /*  4965 */ 18687, 42424, 18671, 25460, 38323, 30299, 46032, 18741, 18769, 19205, 18757, 19818, 25296, 18785, 18857,
  /*  4980 */ 18908, 18935, 19585, 18962, 18785, 18857, 18908, 18935, 19585, 19009, 19339, 25484, 19090, 19125, 20852,
  /*  4995 */ 47209, 19141, 42123, 19175, 20138, 20837, 19054, 19191, 25509, 25572, 25588, 19676, 19303, 18892, 25604,
  /*  5010 */ 25581, 19669, 19296, 18885, 19326, 19355, 44208, 19389, 35906, 19411, 28985, 19431, 19461, 19039, 19540,
  /*  5025 */ 25664, 19603, 19621, 19639, 25700, 19601, 19619, 19637, 19655, 19926, 19692, 19708, 19724, 19749, 19771,
  /*  5040 */ 19808, 19475, 19489, 19883, 19900, 19834, 19882, 19899, 19916, 19942, 19979, 20016, 20047, 20116, 20154,
  /*  5055 */ 19786, 20188, 20210, 19792, 20194, 20216, 20504, 20232, 43219, 20261, 20277, 20306, 20293, 20309, 20325,
  /*  5070 */ 20341, 20357, 24531, 20712, 20401, 20440, 20474, 20742, 20743, 19024, 20492, 20520, 20547, 20636, 23957,
  /*  5085 */ 18813, 20667, 20683, 20699, 20728, 20759, 20796, 20806, 20822, 19503, 38323, 38323, 38323, 38323, 38323,
  /*  5100 */ 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323,
  /*  5115 */ 38323, 38323, 38323, 38323, 38323, 21073, 38323, 38323, 38323, 38323, 49383, 38323, 38323, 38323, 38323,
  /*  5130 */ 21503, 24978, 25716, 25716, 25716, 24986, 36323, 36335, 20949, 38323, 38323, 38323, 26403, 38323, 38323,
  /*  5145 */ 51374, 38323, 38323, 25945, 38323, 38323, 38323, 38323, 26331, 20476, 20741, 20610, 20743, 20560, 25647,
  /*  5160 */ 18275, 46788, 18301, 18323, 38323, 38323, 18360, 38323, 32181, 21570, 18380, 18411, 18395, 18572, 19445,
  /*  5175 */ 18431, 20166, 18457, 25678, 18484, 18506, 18946, 18463, 25684, 18490, 18512, 20573, 18528, 38323, 49890,
  /*  5190 */ 38323, 38323, 38323, 43058, 23466, 43689, 38323, 18551, 44369, 18562, 20172, 24520, 20128, 20476, 23948,
  /*  5205 */ 18987, 19862, 18588, 18608, 18993, 18468, 18991, 19866, 18592, 18612, 19074, 25632, 25648, 38323, 18628,
  /*  5220 */ 18665, 18687, 42424, 18671, 18722, 38323, 30299, 46032, 18741, 18769, 19205, 18757, 19818, 25296, 18785,
  /*  5235 */ 18857, 18908, 18935, 19585, 18962, 18785, 18857, 18908, 18935, 19585, 19009, 25641, 33669, 19090, 19125,
  /*  5250 */ 20852, 47209, 19141, 42123, 19175, 20138, 20837, 19054, 19191, 19233, 19280, 25588, 19676, 19303, 18892,
  /*  5265 */ 19273, 25581, 19669, 19296, 18885, 19326, 19355, 44208, 19389, 35906, 19411, 28985, 19431, 19461, 19039,
  /*  5280 */ 19540, 19571, 19603, 19621, 19639, 19555, 19601, 19619, 19637, 19655, 19926, 19692, 19708, 19724, 19749,
  /*  5295 */ 19771, 19808, 19475, 19489, 19883, 19900, 19834, 19882, 19899, 19916, 19942, 19979, 20016, 20047, 20116,
  /*  5310 */ 20154, 19786, 20188, 20210, 19792, 20194, 20216, 20504, 20232, 43219, 20261, 20277, 20306, 20293, 20309,
  /*  5325 */ 20325, 20341, 20357, 24531, 20712, 20401, 20440, 20474, 20742, 20743, 19024, 20492, 20520, 20547, 20636,
  /*  5340 */ 23957, 18813, 20667, 20683, 20699, 20728, 20759, 20796, 20806, 20822, 19503, 38323, 38323, 38323, 38323,
  /*  5355 */ 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323,
  /*  5370 */ 38323, 38323, 38323, 38323, 38323, 38323, 51272, 19753, 38323, 38323, 38323, 49383, 38323, 38323, 38323,
  /*  5385 */ 38323, 19257, 36276, 25732, 25732, 25732, 25740, 19755, 36278, 20949, 25764, 38323, 38323, 26403, 38323,
  /*  5400 */ 38323, 51374, 38323, 38323, 45130, 38323, 38323, 38323, 38323, 21043, 20476, 20741, 20610, 20743, 18800,
  /*  5415 */ 25647, 18275, 46788, 18301, 18323, 38323, 38323, 18360, 38323, 32181, 21570, 18380, 18411, 18395, 18572,
  /*  5430 */ 19445, 18431, 20166, 18457, 25678, 18484, 18506, 18946, 18463, 25684, 18490, 18512, 20573, 18528, 38323,
  /*  5445 */ 49890, 38323, 38323, 38323, 43058, 23466, 43689, 38323, 18551, 44369, 18562, 20172, 24520, 20128, 20476,
  /*  5460 */ 23948, 18987, 19862, 18588, 18608, 18993, 18468, 18991, 19866, 18592, 18612, 19074, 25632, 25648, 38323,
  /*  5475 */ 18628, 18665, 18687, 42424, 18671, 18722, 38323, 30299, 46032, 18741, 18769, 19205, 18757, 19818, 25296,
  /*  5490 */ 18785, 18857, 18908, 18935, 19585, 18962, 18785, 18857, 18908, 18935, 19585, 19009, 25641, 33669, 19090,
  /*  5505 */ 19125, 20852, 47209, 19141, 42123, 19175, 20138, 20837, 19054, 19191, 19233, 19280, 25588, 19676, 19303,
  /*  5520 */ 18892, 19273, 25581, 19669, 19296, 18885, 19326, 19355, 44208, 19389, 35906, 19411, 28985, 19431, 19461,
  /*  5535 */ 19039, 19540, 19571, 19603, 19621, 19639, 19555, 19601, 19619, 19637, 19655, 19926, 19692, 19708, 19724,
  /*  5550 */ 19749, 19771, 19808, 19475, 19489, 19883, 19900, 19834, 19882, 19899, 19916, 19942, 19979, 20016, 20047,
  /*  5565 */ 20116, 20154, 19786, 20188, 20210, 19792, 20194, 20216, 20504, 20232, 43219, 20261, 20277, 20306, 20293,
  /*  5580 */ 20309, 20325, 20341, 20357, 24531, 20712, 20401, 20440, 20474, 20742, 20743, 19024, 20492, 20520, 20547,
  /*  5595 */ 20636, 23957, 18813, 20667, 20683, 20699, 20728, 20759, 20796, 20806, 20822, 19503, 38323, 38323, 38323,
  /*  5610 */ 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323,
  /*  5625 */ 38323, 38323, 38323, 38323, 38323, 38323, 38323, 51174, 51183, 38323, 38323, 38323, 22105, 38323, 38323,
  /*  5640 */ 38323, 38323, 19257, 40191, 25782, 25782, 25782, 25790, 21113, 40193, 25814, 38323, 38323, 38323, 26403,
  /*  5655 */ 38323, 38323, 51374, 38323, 38323, 23550, 38323, 38323, 38323, 38323, 26331, 20476, 20741, 20610, 20743,
  /*  5670 */ 18975, 18823, 18275, 46788, 18301, 18323, 38323, 38323, 18360, 38323, 32181, 21570, 18380, 18411, 18395,
  /*  5685 */ 18572, 19445, 18431, 20166, 18457, 25678, 18484, 18506, 18946, 18463, 25684, 18490, 18512, 20573, 18528,
  /*  5700 */ 38323, 49890, 38323, 38323, 38323, 43058, 23466, 43689, 38323, 18551, 44369, 18562, 20172, 24520, 20128,
  /*  5715 */ 20476, 23948, 18987, 19862, 18588, 18608, 18993, 18468, 18991, 19866, 18592, 18612, 19074, 25632, 25648,
  /*  5730 */ 38323, 18628, 18665, 18687, 42424, 18671, 18722, 38323, 30299, 46032, 18741, 18769, 19205, 18757, 19818,
  /*  5745 */ 25296, 18785, 18857, 18908, 18935, 19585, 18962, 18785, 18857, 18908, 18935, 19585, 19009, 25641, 33669,
  /*  5760 */ 19090, 19125, 20852, 47209, 19141, 42123, 19175, 20138, 20837, 19054, 19191, 19233, 19280, 25588, 19676,
  /*  5775 */ 19303, 18892, 19273, 25581, 19669, 19296, 18885, 19326, 19355, 44208, 19389, 35906, 19411, 28985, 19431,
  /*  5790 */ 19461, 19039, 19540, 19571, 19603, 19621, 19639, 19555, 19601, 19619, 19637, 19655, 19926, 19692, 19708,
  /*  5805 */ 19724, 19749, 19771, 19808, 19475, 19489, 19883, 19900, 19834, 19882, 19899, 19916, 19942, 19979, 20016,
  /*  5820 */ 20047, 20116, 20154, 19786, 20188, 20210, 19792, 20194, 20216, 20504, 20232, 43219, 20261, 20277, 20306,
  /*  5835 */ 20293, 20309, 20325, 20341, 20357, 24531, 20712, 20401, 25830, 20474, 20742, 20743, 19024, 20492, 20520,
  /*  5850 */ 20547, 20636, 23957, 18813, 20667, 20683, 20699, 20728, 20759, 20796, 20806, 20822, 19503, 38323, 38323,
  /*  5865 */ 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323,
  /*  5880 */ 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 25864, 38323, 38323, 38323, 38323, 49383, 26101,
  /*  5895 */ 38323, 38323, 22454, 32283, 38323, 38323, 38323, 25908, 38323, 22452, 26104, 25924, 38323, 38323, 38323,
  /*  5910 */ 26403, 38323, 38323, 51374, 20873, 38323, 38323, 38323, 38323, 38323, 38323, 26331, 20476, 20741, 20610,
  /*  5925 */ 20743, 25619, 25647, 18275, 46788, 18301, 18323, 38323, 38323, 18360, 38323, 32181, 21570, 18380, 18411,
  /*  5940 */ 18395, 18572, 19445, 18431, 20166, 18457, 25678, 18484, 18506, 18946, 18463, 25684, 18490, 18512, 20573,
  /*  5955 */ 18528, 38323, 49890, 38323, 38323, 38323, 43058, 23466, 43689, 38323, 18551, 44369, 18562, 20172, 24520,
  /*  5970 */ 20128, 20476, 23948, 18987, 19862, 18588, 18608, 18993, 18468, 18991, 19866, 18592, 18612, 19074, 25632,
  /*  5985 */ 25648, 38323, 18628, 18665, 18687, 42424, 18671, 18722, 38323, 30299, 46032, 18741, 18769, 19205, 18757,
  /*  6000 */ 19818, 25296, 18785, 18857, 18908, 18935, 19585, 18962, 18785, 18857, 18908, 18935, 19585, 19009, 25641,
  /*  6015 */ 33669, 19090, 19125, 20852, 47209, 19141, 42123, 19175, 20138, 20837, 19054, 19191, 19233, 19280, 25588,
  /*  6030 */ 19676, 19303, 18892, 19273, 25581, 19669, 19296, 18885, 19326, 19355, 44208, 19389, 35906, 19411, 28985,
  /*  6045 */ 19431, 19461, 19039, 19540, 19571, 19603, 19621, 19639, 19555, 19601, 19619, 19637, 19655, 19926, 19692,
  /*  6060 */ 19708, 19724, 19749, 19771, 19808, 19475, 19489, 19883, 19900, 19834, 19882, 19899, 19916, 19942, 19979,
  /*  6075 */ 20016, 20047, 20116, 20154, 19786, 20188, 20210, 19792, 20194, 20216, 20504, 20232, 43219, 20261, 20277,
  /*  6090 */ 20306, 20293, 20309, 20325, 20341, 20357, 24531, 20712, 20401, 20440, 20474, 20742, 20743, 19024, 20492,
  /*  6105 */ 20520, 20547, 20636, 23957, 18813, 20667, 20683, 20699, 20728, 20759, 20796, 20806, 20822, 19503, 38323,
  /*  6120 */ 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323,
  /*  6135 */ 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 21073, 38323, 38323, 38323, 38323, 49383,
  /*  6150 */ 38323, 38323, 38323, 38323, 19257, 38323, 38323, 38323, 38323, 38323, 34555, 25961, 20949, 38323, 38323,
  /*  6165 */ 38323, 26403, 38323, 38323, 51374, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 26331, 20476, 20741,
  /*  6180 */ 20610, 20743, 18975, 25647, 18275, 46788, 18301, 18323, 38323, 38323, 18360, 38323, 32181, 21570, 18380,
  /*  6195 */ 18411, 18395, 18572, 19445, 18431, 20166, 18457, 25678, 18484, 18506, 18946, 18463, 25684, 18490, 18512,
  /*  6210 */ 20573, 18528, 38323, 49890, 38323, 38323, 38323, 43058, 23466, 43689, 38323, 18551, 44369, 18562, 20172,
  /*  6225 */ 24520, 20128, 20476, 23948, 18987, 19862, 18588, 18608, 18993, 18468, 18991, 19866, 18592, 18612, 19074,
  /*  6240 */ 25632, 25648, 38323, 18628, 18665, 18687, 42424, 18671, 18722, 38323, 30299, 46032, 18741, 18769, 19205,
  /*  6255 */ 18757, 19818, 25296, 18785, 18857, 18908, 18935, 19585, 18962, 18785, 18857, 18908, 18935, 19585, 19009,
  /*  6270 */ 25641, 33669, 19090, 19125, 20852, 47209, 19141, 42123, 19175, 20138, 20837, 19054, 19191, 19233, 19280,
  /*  6285 */ 25588, 19676, 19303, 18892, 19273, 25581, 19669, 19296, 18885, 19326, 19355, 44208, 19389, 35906, 19411,
  /*  6300 */ 28985, 19431, 19461, 19039, 19540, 19571, 19603, 19621, 19639, 19555, 19601, 19619, 19637, 19655, 19926,
  /*  6315 */ 19692, 19708, 19724, 19749, 19771, 19808, 19475, 19489, 19883, 19900, 19834, 19882, 19899, 19916, 19942,
  /*  6330 */ 19979, 20016, 20047, 20116, 20154, 19786, 20188, 20210, 19792, 20194, 20216, 20504, 20232, 43219, 20261,
  /*  6345 */ 20277, 20306, 20293, 20309, 20325, 20341, 20357, 24531, 20712, 20401, 20440, 20474, 20742, 20743, 19024,
  /*  6360 */ 20492, 20520, 20547, 20636, 23957, 18813, 20667, 20683, 20699, 20728, 20759, 20796, 20806, 20822, 19503,
  /*  6375 */ 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323,
  /*  6390 */ 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 25991, 38323, 38323, 38323, 38323,
  /*  6405 */ 20905, 38323, 38323, 38323, 38323, 19257, 38323, 38323, 38323, 38323, 44551, 49747, 27583, 26016, 38323,
  /*  6420 */ 38323, 38323, 26403, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 28208, 22701,
  /*  6435 */ 46213, 35139, 35586, 34683, 26053, 38323, 38323, 38323, 26352, 38323, 38323, 38323, 38323, 38323, 38323,
  /*  6450 */ 38323, 38323, 28210, 22701, 22701, 22701, 22701, 27407, 46215, 46215, 46215, 36217, 35586, 35586, 35586,
  /*  6465 */ 35586, 40524, 22426, 38323, 38323, 38323, 38323, 38323, 38323, 23545, 38323, 38323, 38323, 38323, 38164,
  /*  6480 */ 22701, 22701, 22701, 22701, 38170, 22585, 46215, 46215, 46215, 46215, 28695, 35586, 35586, 35586, 35586,
  /*  6495 */ 35586, 32887, 26087, 26120, 38323, 38323, 38323, 38323, 38323, 23545, 38323, 38323, 38323, 38166, 22701,
  /*  6510 */ 22701, 22701, 22701, 30391, 22584, 46215, 46215, 46215, 46215, 22387, 30159, 35586, 35586, 35586, 35586,
  /*  6525 */ 27855, 35646, 23566, 38323, 38323, 38323, 38323, 26146, 38323, 36754, 22701, 22701, 22701, 22701, 22886,
  /*  6540 */ 22583, 46215, 46215, 46215, 46215, 30777, 35586, 35586, 35586, 35586, 34371, 41409, 38323, 38323, 38323,
  /*  6555 */ 38323, 38323, 28209, 22701, 22701, 22701, 46090, 46215, 46215, 46215, 31986, 35586, 35586, 35586, 27856,
  /*  6570 */ 22734, 38323, 38323, 18642, 38323, 38164, 22701, 22701, 40356, 46215, 46215, 36375, 35586, 35586, 40120,
  /*  6585 */ 38323, 38323, 38323, 38323, 38169, 22701, 28357, 46215, 46215, 36378, 35586, 27856, 22734, 41022, 38323,
  /*  6600 */ 38168, 42763, 46215, 28378, 35586, 22727, 36650, 38164, 28358, 28377, 30161, 36649, 38168, 46214, 35585,
  /*  6615 */ 28205, 42762, 27795, 22922, 28211, 40355, 36377, 22492, 28358, 36376, 34297, 22799, 50605, 28402, 22938,
  /*  6630 */ 23009, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323,
  /*  6645 */ 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 25991, 38323, 38323, 38323,
  /*  6660 */ 38323, 20905, 38323, 38323, 38323, 38323, 19257, 38323, 38323, 38323, 38323, 44551, 49747, 27583, 26016,
  /*  6675 */ 38323, 38323, 38323, 26403, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 28208,
  /*  6690 */ 22701, 46213, 35139, 35586, 34683, 26053, 38323, 38323, 38323, 26352, 38323, 38323, 38323, 38323, 38323,
  /*  6705 */ 38323, 38323, 38323, 28210, 22701, 22701, 22701, 22701, 27407, 46215, 46215, 46215, 36217, 35586, 35586,
  /*  6720 */ 35586, 35586, 40524, 22426, 38323, 38323, 38323, 38323, 38323, 38323, 23545, 38323, 38323, 38323, 38323,
  /*  6735 */ 38164, 22701, 22701, 22701, 22701, 38170, 22585, 46215, 46215, 46215, 46215, 28695, 35586, 35586, 35586,
  /*  6750 */ 35586, 35586, 32887, 26087, 26120, 38323, 38323, 38323, 38323, 38323, 23545, 38323, 38323, 38323, 38166,
  /*  6765 */ 22701, 22701, 22701, 22701, 30391, 22584, 46215, 46215, 46215, 46215, 22387, 30159, 35586, 35586, 35586,
  /*  6780 */ 35586, 27855, 35646, 23566, 38323, 38323, 38323, 38323, 38323, 38323, 36754, 22701, 22701, 22701, 22701,
  /*  6795 */ 22886, 22583, 46215, 46215, 46215, 46215, 30777, 35586, 35586, 35586, 35586, 34371, 41409, 38323, 38323,
  /*  6810 */ 38323, 38323, 38323, 28209, 22701, 22701, 22701, 46090, 46215, 46215, 46215, 31986, 35586, 35586, 35586,
  /*  6825 */ 27856, 22734, 38323, 38323, 38323, 38323, 38164, 22701, 22701, 40356, 46215, 46215, 36375, 35586, 35586,
  /*  6840 */ 40120, 38323, 38323, 38323, 38323, 38169, 22701, 28357, 46215, 46215, 36378, 35586, 27856, 22734, 41022,
  /*  6855 */ 38323, 38168, 42763, 46215, 28378, 35586, 22727, 36650, 38164, 28358, 28377, 30161, 36649, 38168, 46214,
  /*  6870 */ 35585, 28205, 42762, 27795, 22922, 28211, 40355, 36377, 22492, 28358, 36376, 34297, 22799, 50605, 28402,
  /*  6885 */ 22938, 23009, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323,
  /*  6900 */ 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 25991, 38323, 38323,
  /*  6915 */ 38323, 38323, 20905, 38323, 38323, 38323, 38323, 19257, 38323, 38323, 38323, 38323, 44551, 49747, 27583,
  /*  6930 */ 26016, 38323, 38323, 38323, 26403, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323,
  /*  6945 */ 28208, 22701, 46213, 35139, 35586, 34683, 26053, 38323, 38323, 38323, 26352, 38323, 38323, 38323, 38323,
  /*  6960 */ 38323, 38323, 38323, 38323, 28210, 22701, 22701, 22701, 22701, 27407, 46215, 46215, 46215, 36217, 35586,
  /*  6975 */ 35586, 35586, 35586, 40524, 22426, 38323, 38323, 38323, 38323, 38323, 38323, 23545, 26164, 38323, 38323,
  /*  6990 */ 38323, 38164, 22701, 22701, 22701, 22701, 38170, 22585, 46215, 46215, 46215, 46215, 28695, 35586, 35586,
  /*  7005 */ 35586, 35586, 35586, 32887, 26087, 26120, 38323, 38323, 38323, 38323, 38323, 23545, 38323, 38323, 38323,
  /*  7020 */ 38166, 22701, 22701, 22701, 22701, 30391, 22584, 46215, 46215, 46215, 46215, 22387, 30159, 35586, 35586,
  /*  7035 */ 35586, 35586, 27855, 35646, 23566, 38323, 38323, 38323, 38323, 38323, 38323, 36754, 22701, 22701, 22701,
  /*  7050 */ 22701, 22886, 22583, 46215, 46215, 46215, 46215, 30777, 35586, 35586, 35586, 35586, 34371, 41409, 38323,
  /*  7065 */ 38323, 38323, 38323, 38323, 28209, 22701, 22701, 22701, 46090, 46215, 46215, 46215, 31986, 35586, 35586,
  /*  7080 */ 35586, 27856, 22734, 38323, 38323, 38323, 38323, 38164, 22701, 22701, 40356, 46215, 46215, 36375, 35586,
  /*  7095 */ 35586, 40120, 38323, 38323, 38323, 38323, 38169, 22701, 28357, 46215, 46215, 36378, 35586, 27856, 22734,
  /*  7110 */ 41022, 38323, 38168, 42763, 46215, 28378, 35586, 22727, 36650, 38164, 28358, 28377, 30161, 36649, 38168,
  /*  7125 */ 46214, 35585, 28205, 42762, 27795, 22922, 28211, 40355, 36377, 22492, 28358, 36376, 34297, 22799, 50605,
  /*  7140 */ 28402, 22938, 23009, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323,
  /*  7155 */ 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 25991, 38323,
  /*  7170 */ 38323, 38323, 38323, 20905, 38323, 38323, 38323, 38323, 19257, 38323, 38323, 38323, 38323, 44551, 49747,
  /*  7185 */ 27583, 26016, 38323, 38323, 38323, 26403, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323,
  /*  7200 */ 38323, 28208, 22701, 46213, 35139, 35586, 34683, 26053, 38323, 38323, 38323, 26352, 38323, 38323, 38323,
  /*  7215 */ 38323, 38323, 38323, 38323, 38323, 28210, 22701, 22701, 22701, 22701, 27407, 46215, 46215, 46215, 36217,
  /*  7230 */ 35586, 35586, 35586, 35586, 40524, 22426, 38323, 38323, 38323, 38323, 38323, 38323, 23545, 38323, 38323,
  /*  7245 */ 38323, 38323, 38164, 22701, 22701, 22701, 22701, 38170, 22585, 46215, 46215, 46215, 46215, 28695, 35586,
  /*  7260 */ 35586, 35586, 35586, 35586, 32887, 26087, 26120, 38323, 38323, 38323, 38323, 38323, 26184, 38323, 38323,
  /*  7275 */ 38323, 38166, 22701, 22701, 22701, 22701, 30391, 22584, 46215, 46215, 46215, 46215, 22387, 30159, 35586,
  /*  7290 */ 35586, 35586, 35586, 27855, 35646, 23566, 38323, 38323, 38323, 38323, 38323, 38323, 36754, 22701, 22701,
  /*  7305 */ 22701, 22701, 22886, 22583, 46215, 46215, 46215, 46215, 30777, 35586, 35586, 35586, 35586, 34371, 41409,
  /*  7320 */ 38323, 38323, 38323, 38323, 38323, 28209, 22701, 22701, 22701, 46090, 46215, 46215, 46215, 31986, 35586,
  /*  7335 */ 35586, 35586, 27856, 22734, 38323, 38323, 38323, 38323, 38164, 22701, 22701, 40356, 46215, 46215, 36375,
  /*  7350 */ 35586, 35586, 40120, 38323, 38323, 38323, 38323, 38169, 22701, 28357, 46215, 46215, 36378, 35586, 27856,
  /*  7365 */ 22734, 41022, 38323, 38168, 42763, 46215, 28378, 35586, 22727, 36650, 38164, 28358, 28377, 30161, 36649,
  /*  7380 */ 38168, 46214, 35585, 28205, 42762, 27795, 22922, 28211, 40355, 36377, 22492, 28358, 36376, 34297, 22799,
  /*  7395 */ 50605, 28402, 22938, 23009, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323,
  /*  7410 */ 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 25991,
  /*  7425 */ 38323, 38323, 38323, 38323, 20905, 38323, 38323, 38323, 38323, 19257, 38323, 38323, 38323, 38323, 44551,
  /*  7440 */ 49747, 27583, 26016, 38323, 38323, 38323, 26403, 38323, 38323, 44820, 38323, 38323, 38323, 38323, 38323,
  /*  7455 */ 38323, 38323, 28208, 22701, 46213, 35139, 35586, 34683, 26053, 38323, 38323, 38323, 26352, 38323, 38323,
  /*  7470 */ 44822, 38323, 38323, 38323, 38323, 38323, 28210, 22701, 22701, 22701, 22701, 27407, 46215, 46215, 46215,
  /*  7485 */ 36217, 35586, 35586, 35586, 35586, 40524, 22426, 38323, 38323, 38323, 38323, 38323, 38323, 23545, 38323,
  /*  7500 */ 38323, 38323, 38323, 38164, 22701, 22701, 22701, 22701, 38170, 22585, 46215, 46215, 46215, 46215, 28695,
  /*  7515 */ 35586, 35586, 35586, 35586, 35586, 32887, 26087, 26120, 38323, 38323, 38323, 38323, 38323, 23545, 38323,
  /*  7530 */ 38323, 38323, 38166, 22701, 22701, 22701, 22701, 30391, 22584, 46215, 46215, 46215, 46215, 22387, 30159,
  /*  7545 */ 35586, 35586, 35586, 35586, 27855, 35646, 23566, 38323, 38323, 38323, 38323, 38323, 38323, 36754, 22701,
  /*  7560 */ 22701, 22701, 22701, 22886, 22583, 46215, 46215, 46215, 46215, 30777, 35586, 35586, 35586, 35586, 34371,
  /*  7575 */ 41409, 38323, 38323, 38323, 38323, 38323, 28209, 22701, 22701, 22701, 46090, 46215, 46215, 46215, 31986,
  /*  7590 */ 35586, 35586, 35586, 27856, 22734, 38323, 38323, 38323, 38323, 38164, 22701, 22701, 40356, 46215, 46215,
  /*  7605 */ 36375, 35586, 35586, 40120, 38323, 38323, 38323, 38323, 38169, 22701, 28357, 46215, 46215, 36378, 35586,
  /*  7620 */ 27856, 22734, 41022, 38323, 38168, 42763, 46215, 28378, 35586, 22727, 36650, 38164, 28358, 28377, 30161,
  /*  7635 */ 36649, 38168, 46214, 35585, 28205, 42762, 27795, 22922, 28211, 40355, 36377, 22492, 28358, 36376, 34297,
  /*  7650 */ 22799, 50605, 28402, 22938, 23009, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323,
  /*  7665 */ 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323,
  /*  7680 */ 25991, 38323, 38323, 38323, 38323, 20905, 38323, 38323, 38323, 38323, 19257, 38323, 38323, 38323, 38323,
  /*  7695 */ 44551, 49747, 27583, 26016, 38323, 38323, 38323, 26403, 38323, 38323, 38323, 38323, 38323, 38323, 38323,
  /*  7710 */ 38323, 38323, 38323, 28208, 22701, 46213, 35139, 35586, 34683, 26053, 38323, 38323, 38323, 26352, 38323,
  /*  7725 */ 38323, 38323, 38323, 38323, 38323, 38323, 38323, 28210, 22701, 22701, 22701, 22701, 27407, 46215, 46215,
  /*  7740 */ 46215, 36217, 35586, 35586, 35586, 35586, 40524, 22426, 38323, 38323, 38323, 38323, 38323, 38323, 38323,
  /*  7755 */ 38323, 38323, 38323, 38323, 38164, 22701, 22701, 22701, 22701, 38170, 22585, 46215, 46215, 46215, 46215,
  /*  7770 */ 28695, 35586, 35586, 35586, 35586, 35586, 32887, 22488, 38323, 38323, 38323, 38323, 38323, 38323, 38323,
  /*  7785 */ 38323, 38323, 38323, 38166, 22701, 22701, 22701, 22701, 30391, 22584, 46215, 46215, 46215, 46215, 22387,
  /*  7800 */ 30159, 35586, 35586, 35586, 35586, 27855, 41406, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 36754,
  /*  7815 */ 22701, 22701, 22701, 22701, 30392, 22583, 46215, 46215, 46215, 46215, 30151, 35586, 35586, 35586, 35586,
  /*  7830 */ 34371, 41409, 38323, 38323, 38323, 38323, 38323, 28209, 22701, 22701, 22701, 37600, 46215, 46215, 46215,
  /*  7845 */ 37653, 35586, 35586, 35586, 27856, 22734, 38323, 38323, 38323, 38323, 38164, 22701, 22701, 40356, 46215,
  /*  7860 */ 46215, 36375, 35586, 35586, 40120, 38323, 38323, 38323, 38323, 38169, 22701, 28357, 46215, 46215, 36378,
  /*  7875 */ 35586, 27856, 22734, 41022, 38323, 38168, 42763, 46215, 28378, 35586, 22727, 36650, 38164, 28358, 28377,
  /*  7890 */ 30161, 36649, 38168, 46214, 35585, 28205, 42762, 27795, 22922, 28211, 40355, 36377, 22492, 28358, 36376,
  /*  7905 */ 34297, 22799, 50605, 28402, 22938, 23009, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323,
  /*  7920 */ 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323,
  /*  7935 */ 38323, 25991, 38323, 38323, 38323, 38323, 20905, 38323, 38323, 38323, 38323, 19257, 38323, 38323, 38323,
  /*  7950 */ 38323, 44551, 49747, 27583, 26016, 38323, 38323, 38323, 26403, 38323, 38323, 38323, 38323, 38323, 38323,
  /*  7965 */ 38323, 38323, 38323, 38323, 28208, 22701, 46213, 35139, 35586, 34683, 26227, 38323, 38323, 38323, 26352,
  /*  7980 */ 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 28210, 22701, 22701, 22701, 22701, 27407, 46215,
  /*  7995 */ 46215, 46215, 36217, 35586, 35586, 35586, 35586, 40524, 22426, 38323, 38323, 38323, 38323, 38323, 38323,
  /*  8010 */ 38323, 38323, 38323, 38323, 38323, 38164, 22701, 22701, 22701, 22701, 38170, 22585, 46215, 46215, 46215,
  /*  8025 */ 46215, 28695, 35586, 35586, 35586, 35586, 35586, 32887, 22488, 38323, 38323, 38323, 38323, 38323, 38323,
  /*  8040 */ 38323, 38323, 38323, 38323, 38166, 22701, 22701, 22701, 22701, 30391, 22584, 46215, 46215, 46215, 46215,
  /*  8055 */ 22387, 30159, 35586, 35586, 35586, 35586, 27855, 41406, 38323, 38323, 38323, 38323, 38323, 38323, 38323,
  /*  8070 */ 36754, 22701, 22701, 22701, 22701, 30392, 22583, 46215, 46215, 46215, 46215, 30151, 35586, 35586, 35586,
  /*  8085 */ 35586, 34371, 41409, 38323, 38323, 38323, 38323, 38323, 28209, 22701, 22701, 22701, 37600, 46215, 46215,
  /*  8100 */ 46215, 37653, 35586, 35586, 35586, 27856, 22734, 38323, 38323, 38323, 38323, 38164, 22701, 22701, 40356,
  /*  8115 */ 46215, 46215, 36375, 35586, 35586, 40120, 38323, 38323, 38323, 38323, 38169, 22701, 28357, 46215, 46215,
  /*  8130 */ 36378, 35586, 27856, 22734, 41022, 38323, 38168, 42763, 46215, 28378, 35586, 22727, 36650, 38164, 28358,
  /*  8145 */ 28377, 30161, 36649, 38168, 46214, 35585, 28205, 42762, 27795, 22922, 28211, 40355, 36377, 22492, 28358,
  /*  8160 */ 36376, 34297, 22799, 50605, 28402, 22938, 23009, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323,
  /*  8175 */ 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323,
  /*  8190 */ 38323, 38323, 25991, 38323, 38323, 38323, 38323, 20905, 38323, 38323, 38323, 38323, 19257, 38323, 38323,
  /*  8205 */ 38323, 38323, 44551, 49747, 27583, 26261, 38323, 38323, 38323, 26403, 38323, 38323, 38323, 38323, 38323,
  /*  8220 */ 38323, 38323, 38323, 38323, 38323, 28208, 22701, 46213, 35139, 35586, 34683, 26053, 38323, 38323, 38323,
  /*  8235 */ 26352, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 28210, 22701, 22701, 22701, 22701, 27407,
  /*  8250 */ 46215, 46215, 46215, 36217, 35586, 35586, 35586, 35586, 40524, 22426, 38323, 38323, 38323, 38323, 38323,
  /*  8265 */ 38323, 38323, 38323, 38323, 38323, 38323, 38164, 22701, 22701, 22701, 22701, 38170, 22585, 46215, 46215,
  /*  8280 */ 46215, 46215, 28695, 35586, 35586, 35586, 35586, 35586, 32887, 22488, 38323, 38323, 38323, 38323, 38323,
  /*  8295 */ 38323, 38323, 38323, 38323, 38323, 38166, 22701, 22701, 22701, 22701, 30391, 22584, 46215, 46215, 46215,
  /*  8310 */ 46215, 22387, 30159, 35586, 35586, 35586, 35586, 27855, 41406, 38323, 38323, 38323, 38323, 38323, 38323,
  /*  8325 */ 38323, 36754, 22701, 22701, 22701, 22701, 30392, 22583, 46215, 46215, 46215, 46215, 30151, 35586, 35586,
  /*  8340 */ 35586, 35586, 34371, 41409, 38323, 38323, 38323, 38323, 38323, 28209, 22701, 22701, 22701, 37600, 46215,
  /*  8355 */ 46215, 46215, 37653, 35586, 35586, 35586, 27856, 22734, 38323, 38323, 38323, 38323, 38164, 22701, 22701,
  /*  8370 */ 40356, 46215, 46215, 36375, 35586, 35586, 40120, 38323, 38323, 38323, 38323, 38169, 22701, 28357, 46215,
  /*  8385 */ 46215, 36378, 35586, 27856, 22734, 41022, 38323, 38168, 42763, 46215, 28378, 35586, 22727, 36650, 38164,
  /*  8400 */ 28358, 28377, 30161, 36649, 38168, 46214, 35585, 28205, 42762, 27795, 22922, 28211, 40355, 36377, 22492,
  /*  8415 */ 28358, 36376, 34297, 22799, 50605, 28402, 22938, 23009, 38323, 38323, 38323, 38323, 38323, 38323, 38323,
  /*  8430 */ 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323,
  /*  8445 */ 38323, 38323, 38323, 25991, 38323, 38323, 38323, 38323, 20905, 38323, 38323, 38323, 38323, 19257, 37177,
  /*  8460 */ 38323, 38323, 38323, 44551, 49747, 27583, 26016, 38323, 38323, 38323, 26403, 38323, 38323, 38323, 38323,
  /*  8475 */ 38323, 38323, 38323, 38323, 38323, 38323, 28208, 22701, 46213, 35139, 35586, 34683, 26053, 38323, 38323,
  /*  8490 */ 38323, 26352, 38323, 38323, 38323, 28574, 38323, 38323, 38323, 38323, 28210, 22701, 22701, 22701, 22701,
  /*  8505 */ 27407, 46215, 46215, 46215, 36217, 35586, 35586, 35586, 35586, 40524, 22426, 38323, 38323, 38323, 38323,
  /*  8520 */ 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38164, 22701, 22701, 22701, 22701, 38170, 22585, 46215,
  /*  8535 */ 46215, 46215, 46215, 28695, 35586, 35586, 35586, 35586, 35586, 32887, 22488, 38323, 38323, 38323, 38323,
  /*  8550 */ 38323, 38323, 38323, 38323, 38323, 38323, 38166, 22701, 22701, 22701, 22701, 30391, 22584, 46215, 46215,
  /*  8565 */ 46215, 46215, 22387, 30159, 35586, 35586, 35586, 35586, 27855, 41406, 38323, 38323, 38323, 38323, 38323,
  /*  8580 */ 38323, 38323, 36754, 22701, 22701, 22701, 22701, 30392, 22583, 46215, 46215, 46215, 46215, 30151, 35586,
  /*  8595 */ 35586, 35586, 35586, 34371, 41409, 38323, 38323, 38323, 38323, 38323, 28209, 22701, 22701, 22701, 37600,
  /*  8610 */ 46215, 46215, 46215, 37653, 35586, 35586, 35586, 27856, 22734, 38323, 38323, 38323, 38323, 38164, 22701,
  /*  8625 */ 22701, 40356, 46215, 46215, 36375, 35586, 35586, 40120, 38323, 38323, 38323, 38323, 38169, 22701, 28357,
  /*  8640 */ 46215, 46215, 36378, 35586, 27856, 22734, 41022, 38323, 38168, 42763, 46215, 28378, 35586, 22727, 36650,
  /*  8655 */ 38164, 28358, 28377, 30161, 36649, 38168, 46214, 35585, 28205, 42762, 27795, 22922, 28211, 40355, 36377,
  /*  8670 */ 22492, 28358, 36376, 34297, 22799, 50605, 28402, 22938, 23009, 38323, 38323, 38323, 38323, 38323, 38323,
  /*  8685 */ 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323,
  /*  8700 */ 38323, 38323, 38323, 38323, 25991, 38323, 38323, 38323, 38323, 20905, 38323, 38323, 38323, 38323, 19257,
  /*  8715 */ 38323, 38323, 38323, 38323, 20424, 26298, 26310, 26016, 38323, 38323, 38323, 26403, 38323, 38323, 38323,
  /*  8730 */ 38323, 38323, 38323, 38323, 38323, 38323, 38323, 28208, 22701, 46213, 35139, 35586, 34683, 26053, 38323,
  /*  8745 */ 38323, 38323, 26352, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 28210, 22701, 22701, 22701,
  /*  8760 */ 22701, 27407, 46215, 46215, 46215, 36217, 35586, 35586, 35586, 35586, 40524, 22426, 38323, 38323, 38323,
  /*  8775 */ 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38164, 22701, 22701, 22701, 22701, 38170, 22585,
  /*  8790 */ 46215, 46215, 46215, 46215, 28695, 35586, 35586, 35586, 35586, 35586, 32887, 22488, 38323, 38323, 38323,
  /*  8805 */ 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38166, 22701, 22701, 22701, 22701, 30391, 22584, 46215,
  /*  8820 */ 46215, 46215, 46215, 22387, 30159, 35586, 35586, 35586, 35586, 27855, 41406, 38323, 38323, 38323, 38323,
  /*  8835 */ 38323, 38323, 38323, 36754, 22701, 22701, 22701, 22701, 30392, 22583, 46215, 46215, 46215, 46215, 30151,
  /*  8850 */ 35586, 35586, 35586, 35586, 34371, 41409, 38323, 38323, 38323, 38323, 38323, 28209, 22701, 22701, 22701,
  /*  8865 */ 37600, 46215, 46215, 46215, 37653, 35586, 35586, 35586, 27856, 22734, 38323, 38323, 38323, 38323, 38164,
  /*  8880 */ 22701, 22701, 40356, 46215, 46215, 36375, 35586, 35586, 40120, 38323, 38323, 38323, 38323, 38169, 22701,
  /*  8895 */ 28357, 46215, 46215, 36378, 35586, 27856, 22734, 41022, 38323, 38168, 42763, 46215, 28378, 35586, 22727,
  /*  8910 */ 36650, 38164, 28358, 28377, 30161, 36649, 38168, 46214, 35585, 28205, 42762, 27795, 22922, 28211, 40355,
  /*  8925 */ 36377, 22492, 28358, 36376, 34297, 22799, 50605, 28402, 22938, 23009, 38323, 38323, 38323, 38323, 38323,
  /*  8940 */ 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323,
  /*  8955 */ 38323, 38323, 38323, 38323, 38323, 25991, 38323, 38323, 38323, 38323, 20905, 38323, 38323, 38323, 38323,
  /*  8970 */ 19257, 38323, 38323, 38323, 38323, 44551, 49747, 27583, 26016, 38323, 38323, 38323, 26403, 38323, 38323,
  /*  8985 */ 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 28208, 22701, 46213, 35139, 35586, 34683, 26053,
  /*  9000 */ 38323, 38323, 38323, 26352, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 28210, 22701, 22701,
  /*  9015 */ 22701, 22701, 27407, 46215, 46215, 46215, 36217, 35586, 35586, 35586, 35586, 40524, 22426, 38323, 38323,
  /*  9030 */ 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38164, 22701, 22701, 22701, 22701, 38170,
  /*  9045 */ 22585, 46215, 46215, 46215, 46215, 28695, 35586, 35586, 35586, 35586, 35586, 32887, 22488, 38323, 38323,
  /*  9060 */ 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38166, 22701, 22701, 22701, 22701, 30391, 22584,
  /*  9075 */ 46215, 46215, 46215, 46215, 22387, 30159, 35586, 35586, 35586, 35586, 27855, 41406, 38323, 38323, 38323,
  /*  9090 */ 38323, 38323, 38323, 38323, 36754, 22701, 22701, 22701, 22701, 30392, 22583, 46215, 46215, 46215, 46215,
  /*  9105 */ 30151, 35586, 35586, 35586, 35586, 34371, 41409, 38323, 38323, 38323, 26326, 38323, 28209, 22701, 22701,
  /*  9120 */ 22701, 37600, 46215, 46215, 46215, 37653, 35586, 35586, 35586, 27856, 22734, 38323, 38323, 38323, 38323,
  /*  9135 */ 38164, 22701, 22701, 40356, 46215, 46215, 36375, 35586, 35586, 40120, 38323, 38323, 38323, 38323, 38169,
  /*  9150 */ 22701, 28357, 46215, 46215, 36378, 35586, 27856, 22734, 41022, 38323, 38168, 42763, 46215, 28378, 35586,
  /*  9165 */ 22727, 36650, 38164, 28358, 28377, 30161, 36649, 38168, 46214, 35585, 28205, 42762, 27795, 22922, 28211,
  /*  9180 */ 40355, 36377, 22492, 28358, 36376, 34297, 22799, 50605, 28402, 22938, 23009, 38323, 38323, 38323, 38323,
  /*  9195 */ 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323,
  /*  9210 */ 38323, 38323, 38323, 38323, 38323, 38323, 26347, 38323, 38323, 38323, 38323, 20905, 38323, 38323, 38323,
  /*  9225 */ 38323, 19257, 38323, 38323, 38323, 38323, 44551, 49747, 27583, 26016, 38323, 38323, 38323, 26403, 38323,
  /*  9240 */ 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 28208, 22701, 46213, 35139, 35586, 34683,
  /*  9255 */ 26053, 38323, 38323, 38323, 26352, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 28210, 22701,
  /*  9270 */ 22701, 22701, 22701, 27407, 46215, 46215, 46215, 36217, 35586, 35586, 35586, 35586, 40524, 22426, 38323,
  /*  9285 */ 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38164, 22701, 22701, 22701, 22701,
  /*  9300 */ 38170, 22585, 46215, 46215, 46215, 46215, 28695, 35586, 35586, 35586, 35586, 35586, 32887, 22488, 38323,
  /*  9315 */ 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38166, 22701, 22701, 22701, 22701, 30391,
  /*  9330 */ 22584, 46215, 46215, 46215, 46215, 22387, 30159, 35586, 35586, 35586, 35586, 27855, 41406, 38323, 38323,
  /*  9345 */ 38323, 38323, 38323, 38323, 38323, 36754, 22701, 22701, 22701, 22701, 30392, 22583, 46215, 46215, 46215,
  /*  9360 */ 46215, 30151, 35586, 35586, 35586, 35586, 34371, 41409, 38323, 38323, 38323, 38323, 38323, 28209, 22701,
  /*  9375 */ 22701, 22701, 37600, 46215, 46215, 46215, 37653, 35586, 35586, 35586, 27856, 22734, 38323, 38323, 38323,
  /*  9390 */ 38323, 38164, 22701, 22701, 40356, 46215, 46215, 36375, 35586, 35586, 40120, 38323, 38323, 38323, 38323,
  /*  9405 */ 38169, 22701, 28357, 46215, 46215, 36378, 35586, 27856, 22734, 41022, 38323, 38168, 42763, 46215, 28378,
  /*  9420 */ 35586, 22727, 36650, 38164, 28358, 28377, 30161, 36649, 38168, 46214, 35585, 28205, 42762, 27795, 22922,
  /*  9435 */ 28211, 40355, 36377, 22492, 28358, 36376, 34297, 22799, 50605, 28402, 22938, 23009, 38323, 38323, 38323,
  /*  9450 */ 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323,
  /*  9465 */ 38323, 38323, 38323, 38323, 38323, 38323, 38323, 21073, 38323, 38323, 38323, 38323, 49383, 38323, 38323,
  /*  9480 */ 38323, 38323, 19257, 40984, 26368, 26398, 26386, 26419, 40985, 26370, 20949, 38323, 38323, 38323, 26403,
  /*  9495 */ 38323, 38323, 51374, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 26331, 20476, 20741, 20610, 20743,
  /*  9510 */ 18975, 25647, 18275, 46788, 18301, 18323, 38323, 38323, 18360, 31425, 32181, 21570, 18380, 18411, 18395,
  /*  9525 */ 18572, 19445, 18431, 20166, 18457, 25678, 18484, 18506, 18946, 18463, 25684, 18490, 18512, 20573, 18528,
  /*  9540 */ 38323, 49890, 38323, 38323, 38323, 43058, 23466, 43689, 38323, 18551, 44369, 18562, 20172, 24520, 20128,
  /*  9555 */ 20476, 23948, 18987, 19862, 18588, 18608, 18993, 18468, 18991, 19866, 18592, 18612, 19074, 25632, 25648,
  /*  9570 */ 38323, 18628, 18665, 18687, 42424, 18671, 18722, 38323, 30299, 46032, 18741, 18769, 19205, 18757, 19818,
  /*  9585 */ 25296, 18785, 18857, 18908, 18935, 19585, 18962, 18785, 18857, 18908, 18935, 19585, 19009, 25641, 33669,
  /*  9600 */ 19090, 19125, 20852, 47209, 19141, 42123, 19175, 20138, 20837, 19054, 19191, 19233, 19280, 25588, 19676,
  /*  9615 */ 19303, 18892, 19273, 25581, 19669, 19296, 18885, 19326, 19355, 44208, 19389, 35906, 19411, 28985, 19431,
  /*  9630 */ 19461, 19039, 19540, 19571, 19603, 19621, 19639, 19555, 19601, 19619, 19637, 19655, 19926, 19692, 19708,
  /*  9645 */ 19724, 19749, 19771, 19808, 19475, 19489, 19883, 19900, 19834, 19882, 19899, 19916, 19942, 19979, 26443,
  /*  9660 */ 20047, 20116, 20154, 19786, 20188, 20210, 19792, 20194, 20216, 20504, 20232, 43219, 20261, 20277, 20306,
  /*  9675 */ 20293, 20309, 20325, 20341, 20357, 24531, 20712, 20401, 20440, 20474, 20742, 20743, 19024, 20492, 20520,
  /*  9690 */ 20547, 20636, 23957, 18813, 20667, 20683, 20699, 20728, 20759, 20796, 20806, 20822, 19503, 38323, 38323,
  /*  9705 */ 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323,
  /*  9720 */ 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 21073, 38323, 38323, 38323, 38323, 49383, 38323,
  /*  9735 */ 38323, 38323, 38323, 19257, 38323, 38323, 38323, 38323, 38323, 38323, 29037, 20949, 38323, 38323, 38323,
  /*  9750 */ 26403, 38323, 38323, 51374, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 26331, 20476, 20741, 20610,
  /*  9765 */ 20743, 18975, 25647, 18275, 46788, 18301, 18323, 38323, 38323, 18360, 38323, 32181, 21570, 18380, 18411,
  /*  9780 */ 18395, 18572, 19445, 18431, 20166, 18457, 25678, 18484, 18506, 18946, 18463, 25684, 18490, 18512, 20573,
  /*  9795 */ 18528, 38323, 49890, 38323, 38323, 38323, 43058, 23466, 43689, 38323, 18551, 44369, 18562, 20172, 24520,
  /*  9810 */ 20128, 20476, 23948, 18987, 19862, 18588, 18608, 18993, 18468, 18991, 19866, 18592, 18612, 19074, 25632,
  /*  9825 */ 25648, 38323, 18628, 18665, 18687, 42424, 18671, 18722, 38323, 30299, 46032, 18741, 18769, 19205, 18757,
  /*  9840 */ 19818, 25296, 18785, 18857, 18908, 18935, 19585, 18962, 18785, 18857, 18908, 18935, 19585, 19009, 25641,
  /*  9855 */ 33669, 19090, 19125, 20852, 47209, 19141, 42123, 19175, 20138, 20837, 19054, 19191, 19233, 19280, 25588,
  /*  9870 */ 19676, 19303, 18892, 19273, 25581, 19669, 19296, 18885, 19326, 19355, 44208, 19389, 35906, 19411, 28985,
  /*  9885 */ 19431, 19461, 19039, 19540, 19571, 19603, 19621, 19639, 19555, 19601, 19619, 19637, 19655, 19926, 19692,
  /*  9900 */ 19708, 19724, 19749, 19771, 19808, 19475, 19489, 19883, 19900, 19834, 19882, 19899, 19916, 19942, 19979,
  /*  9915 */ 20016, 20047, 20116, 20154, 19786, 20188, 20210, 19792, 20194, 20216, 20504, 20232, 43219, 20261, 20277,
  /*  9930 */ 20306, 20293, 20309, 20325, 20341, 20357, 24531, 20712, 20401, 20440, 20474, 20742, 20743, 19024, 20492,
  /*  9945 */ 20520, 20547, 20636, 23957, 18813, 20667, 20683, 20699, 20728, 20759, 20796, 20806, 20822, 19503, 38323,
  /*  9960 */ 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323,
  /*  9975 */ 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 21073, 38323, 38323, 38323, 38323, 49383,
  /*  9990 */ 38323, 38323, 38323, 38323, 19257, 37119, 38323, 26494, 26499, 26515, 26994, 46056, 20949, 38323, 38323,
  /* 10005 */ 38323, 26403, 38323, 38323, 51374, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 26331, 20476, 20741,
  /* 10020 */ 20610, 20743, 18975, 25647, 18275, 46788, 18301, 18323, 38323, 38323, 18360, 38323, 32181, 21570, 18380,
  /* 10035 */ 18411, 18395, 18572, 19445, 18431, 20166, 18457, 25678, 18484, 18506, 18946, 18463, 25684, 18490, 18512,
  /* 10050 */ 20573, 18528, 38323, 49890, 38323, 38323, 38323, 43058, 23466, 43689, 38323, 18551, 44369, 18562, 20172,
  /* 10065 */ 24520, 20128, 20476, 23948, 18987, 19862, 18588, 18608, 18993, 18468, 18991, 19866, 18592, 18612, 19074,
  /* 10080 */ 25632, 25648, 38323, 18628, 18665, 18687, 42424, 18671, 18722, 38323, 30299, 46032, 18741, 18769, 19205,
  /* 10095 */ 18757, 19818, 25296, 18785, 18857, 18908, 18935, 19585, 18962, 18785, 18857, 18908, 18935, 19585, 19009,
  /* 10110 */ 25641, 33669, 19090, 19125, 20852, 47209, 19141, 42123, 19175, 20138, 20837, 19054, 19191, 19233, 19280,
  /* 10125 */ 25588, 19676, 19303, 18892, 19273, 25581, 19669, 19296, 18885, 19326, 19355, 44208, 19389, 35906, 19411,
  /* 10140 */ 28985, 19431, 19461, 19039, 19540, 19571, 19603, 19621, 19639, 19555, 19601, 19619, 19637, 19655, 19926,
  /* 10155 */ 19692, 19708, 19724, 19749, 19771, 19808, 19475, 19489, 19883, 19900, 19834, 19882, 19899, 19916, 19942,
  /* 10170 */ 19979, 20016, 20047, 20116, 20154, 19786, 20188, 20210, 19792, 20194, 20216, 20504, 26539, 43219, 20261,
  /* 10185 */ 20277, 20306, 20293, 20309, 20325, 26581, 20357, 24531, 20712, 20401, 26597, 20474, 20742, 20743, 19024,
  /* 10200 */ 20492, 20520, 20547, 20636, 23957, 18813, 20667, 20683, 20699, 20728, 20759, 20796, 20806, 20822, 19503,
  /* 10215 */ 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323,
  /* 10230 */ 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 25991, 29589, 38323, 38323, 38323,
  /* 10245 */ 20905, 26631, 26662, 30353, 26647, 26679, 26717, 26725, 26741, 26755, 26771, 26787, 26799, 26016, 50161,
  /* 10260 */ 38323, 26815, 20245, 26833, 19365, 26876, 26923, 26943, 26979, 32304, 27010, 26992, 27026, 27042, 46593,
  /* 10275 */ 45268, 27058, 40235, 46247, 27108, 27124, 38323, 38323, 26352, 27141, 36122, 38323, 27167, 48390, 20774,
  /* 10290 */ 38323, 27188, 31474, 22701, 22701, 22701, 27209, 27407, 46215, 46215, 45783, 36217, 35586, 35586, 35586,
  /* 10305 */ 37033, 40524, 22426, 38323, 27228, 35841, 38323, 27249, 27269, 27286, 38323, 38323, 33796, 42393, 27314,
  /* 10320 */ 27334, 22701, 22701, 27369, 27392, 27425, 35132, 46215, 30499, 27498, 27545, 27574, 27599, 35586, 35771,
  /* 10335 */ 38532, 46004, 27618, 26120, 27648, 38323, 22309, 38323, 31756, 23545, 38323, 19159, 27668, 27689, 27705,
  /* 10350 */ 34270, 22701, 27749, 22993, 44455, 27768, 45876, 46215, 27793, 39528, 30785, 27811, 37471, 35586, 27853,
  /* 10365 */ 40299, 27872, 27888, 27911, 27928, 38323, 27951, 48381, 27972, 36754, 30741, 27991, 22701, 37845, 33041,
  /* 10380 */ 28011, 30089, 46215, 35324, 42651, 30777, 28069, 35586, 35586, 42010, 28085, 31609, 28114, 29898, 26694,
  /* 10395 */ 35227, 29087, 41468, 22965, 28148, 22701, 46090, 49340, 39775, 28164, 31986, 48851, 47856, 28181, 27856,
  /* 10410 */ 28200, 27084, 38323, 51400, 38323, 38164, 41763, 43571, 40356, 37627, 37980, 36375, 50935, 44495, 40120,
  /* 10425 */ 38323, 38323, 38323, 38323, 38169, 22701, 28357, 46215, 46215, 36378, 35586, 27856, 22734, 41022, 38323,
  /* 10440 */ 38168, 42763, 46215, 28378, 35586, 22727, 36650, 38164, 28358, 28377, 30161, 28227, 28271, 36599, 28293,
  /* 10455 */ 28314, 28352, 28374, 28394, 25340, 40355, 36377, 44706, 28358, 36376, 34297, 22799, 50605, 28402, 22938,
  /* 10470 */ 23009, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323,
  /* 10485 */ 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 25991, 38323, 28418, 38323,
  /* 10500 */ 38323, 20905, 38323, 38323, 38323, 38323, 47236, 28437, 38323, 28461, 28466, 28482, 28498, 28510, 26016,
  /* 10515 */ 38323, 38323, 38323, 26403, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 28208,
  /* 10530 */ 41771, 46213, 28526, 50943, 34683, 26053, 38323, 38323, 38323, 26352, 38323, 38323, 38323, 38323, 38323,
  /* 10545 */ 38323, 38323, 38323, 28210, 22701, 22701, 22701, 22701, 27407, 46215, 46215, 46215, 36217, 35586, 35586,
  /* 10560 */ 35586, 35586, 40524, 22426, 38323, 38323, 38323, 38323, 38323, 28552, 23545, 28573, 43491, 38323, 38323,
  /* 10575 */ 38164, 22701, 22701, 22701, 44430, 28590, 22585, 46215, 46215, 46215, 40459, 28695, 35586, 35586, 35586,
  /* 10590 */ 35586, 41134, 32887, 26087, 26120, 38323, 38323, 38323, 38323, 38323, 23545, 38323, 38323, 38323, 38166,
  /* 10605 */ 22701, 22701, 22701, 22701, 30391, 22584, 46215, 46215, 46215, 46215, 22387, 30159, 35586, 35586, 35586,
  /* 10620 */ 35586, 27855, 35646, 23566, 38323, 47944, 38323, 38323, 28621, 48355, 36754, 28640, 22701, 22701, 22701,
  /* 10635 */ 28659, 28675, 46215, 46215, 46215, 37453, 30777, 28711, 35586, 35586, 35586, 44145, 41409, 38323, 38323,
  /* 10650 */ 38323, 38323, 38323, 28209, 22701, 22701, 22701, 46090, 46215, 46215, 46215, 31986, 35586, 35586, 35586,
  /* 10665 */ 27856, 22734, 38323, 38323, 38323, 38323, 38164, 22701, 22701, 40356, 46215, 46215, 36375, 35586, 35586,
  /* 10680 */ 40120, 38323, 38323, 38323, 38323, 38169, 22701, 28357, 46215, 46215, 36378, 35586, 27856, 22734, 41022,
  /* 10695 */ 38323, 38168, 42763, 46215, 28378, 35586, 22727, 36650, 38164, 28358, 28377, 30161, 36649, 38168, 46214,
  /* 10710 */ 35585, 23022, 31844, 44099, 40263, 28211, 40355, 36377, 22492, 28358, 36376, 34297, 22799, 50605, 28402,
  /* 10725 */ 22938, 23009, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323,
  /* 10740 */ 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 25991, 38323, 28733,
  /* 10755 */ 38323, 38323, 20905, 38323, 28778, 38323, 28796, 23529, 28815, 28823, 28839, 28854, 28870, 28886, 28898,
  /* 10770 */ 26016, 38323, 38323, 29741, 27193, 38323, 23235, 38323, 38323, 28914, 38323, 38323, 38323, 50170, 38323,
  /* 10785 */ 28934, 44072, 46213, 28956, 22666, 37718, 29001, 38323, 29035, 38323, 26352, 29053, 31140, 38323, 34235,
  /* 10800 */ 29072, 32324, 38323, 31254, 27151, 37377, 22701, 22701, 22701, 29110, 29134, 46215, 46215, 48755, 29159,
  /* 10815 */ 29175, 35586, 35586, 40524, 22426, 27895, 38323, 38323, 29094, 38323, 19109, 23545, 29916, 29194, 38323,
  /* 10830 */ 38323, 38164, 29229, 38089, 22701, 29268, 38170, 34695, 33314, 38410, 38571, 46215, 28695, 42263, 29287,
  /* 10845 */ 29308, 48475, 35586, 32887, 26087, 26120, 38323, 38323, 42372, 38323, 48538, 23545, 38323, 38323, 38323,
  /* 10860 */ 38166, 22701, 22701, 38667, 29513, 30391, 22584, 46215, 46215, 49623, 48591, 22387, 30159, 35586, 35586,
  /* 10875 */ 47783, 47074, 27855, 35646, 29329, 38323, 38323, 38323, 29356, 38323, 29376, 36754, 22701, 22701, 22701,
  /* 10890 */ 44046, 22886, 22583, 46215, 46215, 49532, 46215, 30777, 35586, 35586, 35586, 29397, 34371, 41409, 38323,
  /* 10905 */ 38323, 50470, 38323, 50561, 29416, 22701, 45628, 22701, 46090, 46215, 33137, 46215, 31986, 35586, 48495,
  /* 10920 */ 35586, 27856, 29443, 29471, 38323, 45471, 22472, 38164, 29492, 29509, 46149, 46215, 29529, 36375, 29549,
  /* 10935 */ 29566, 40120, 38323, 38323, 38323, 29587, 38169, 22701, 29605, 46215, 51022, 36378, 35586, 50327, 22734,
  /* 10950 */ 41022, 38323, 38168, 42763, 46215, 28378, 35586, 22727, 36650, 38164, 28358, 28377, 30161, 36649, 38168,
  /* 10965 */ 46214, 35585, 29628, 29648, 29664, 29680, 28211, 40355, 36377, 22492, 28358, 36376, 34297, 22799, 50605,
  /* 10980 */ 41337, 29704, 23009, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323,
  /* 10995 */ 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 25991, 38323,
  /* 11010 */ 27975, 38323, 38323, 20905, 38323, 29738, 46811, 38323, 46551, 29757, 29765, 29781, 29795, 29803, 29819,
  /* 11025 */ 29831, 26016, 38323, 38323, 38323, 26403, 38323, 38323, 38323, 38323, 38323, 38323, 47721, 47719, 38323,
  /* 11040 */ 47710, 29847, 48045, 29612, 35139, 29869, 34683, 26053, 38323, 23766, 29889, 26352, 38323, 29950, 41249,
  /* 11055 */ 38323, 38323, 29970, 29994, 30010, 30026, 22625, 34070, 30062, 19524, 30105, 48618, 30126, 30177, 30196,
  /* 11070 */ 29550, 22567, 47534, 28184, 40524, 22426, 38323, 38323, 38323, 35209, 38323, 30245, 23545, 38323, 38323,
  /* 11085 */ 38323, 23773, 38164, 22701, 22701, 22701, 32408, 38170, 22585, 46215, 46215, 46215, 37269, 28695, 35586,
  /* 11100 */ 35586, 35586, 35586, 30265, 50497, 30285, 30335, 38323, 38323, 38323, 30351, 30369, 23545, 38323, 38323,
  /* 11115 */ 38644, 42810, 30389, 30408, 22701, 22701, 30426, 30462, 30498, 30515, 46215, 46215, 30141, 50985, 30532,
  /* 11130 */ 30549, 35586, 35586, 30566, 35646, 23566, 38323, 38323, 38323, 38323, 38323, 30606, 36754, 30629, 22701,
  /* 11145 */ 22701, 30649, 22886, 30668, 46215, 46215, 33492, 46215, 32739, 35586, 35586, 42879, 35586, 34371, 41409,
  /* 11160 */ 45932, 38323, 30710, 38323, 47645, 28209, 29271, 22701, 30730, 46090, 50037, 46215, 30765, 31986, 35586,
  /* 11175 */ 30801, 48318, 27856, 22734, 23607, 38323, 38323, 38323, 38164, 22701, 22701, 40356, 46215, 46215, 36375,
  /* 11190 */ 35586, 35586, 40120, 38323, 19395, 38323, 38323, 38169, 22701, 34586, 46215, 42984, 36378, 35586, 39223,
  /* 11205 */ 22734, 41022, 38323, 38168, 42763, 46215, 35576, 35586, 30818, 36650, 38164, 28358, 28377, 30161, 27073,
  /* 11220 */ 32619, 47101, 30841, 30581, 30072, 33078, 41689, 28211, 40355, 36377, 22492, 28358, 36376, 34297, 22799,
  /* 11235 */ 50605, 28402, 22938, 23009, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323,
  /* 11250 */ 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 25991,
  /* 11265 */ 38323, 38324, 30865, 38323, 20905, 42709, 30884, 38323, 30907, 31088, 30931, 30941, 30957, 30971, 30987,
  /* 11280 */ 31003, 31015, 26016, 38323, 31031, 21459, 31074, 31104, 31120, 44820, 26236, 43248, 31156, 31175, 31190,
  /* 11295 */ 31228, 31244, 32711, 31278, 39744, 31294, 31310, 41900, 31350, 27092, 31384, 34893, 31412, 26842, 31448,
  /* 11310 */ 31466, 19994, 38323, 38323, 28124, 38323, 28210, 31490, 48050, 42673, 44016, 31530, 31559, 49458, 32462,
  /* 11325 */ 49360, 42632, 31583, 34855, 49766, 31599, 22426, 20081, 32937, 31625, 35467, 31662, 20091, 31699, 20071,
  /* 11340 */ 21334, 31734, 31772, 31788, 31832, 31860, 31884, 31900, 31936, 31967, 35750, 32002, 41540, 47482, 32041,
  /* 11355 */ 32057, 32083, 27837, 32099, 32132, 47038, 32161, 26120, 32197, 38323, 29934, 38323, 32233, 32255, 32271,
  /* 11370 */ 32299, 32320, 32340, 32358, 22701, 34910, 32424, 29427, 22584, 32448, 46215, 47565, 50885, 42862, 30159,
  /* 11385 */ 32478, 35586, 37489, 38269, 43406, 32521, 23566, 42365, 32537, 32557, 42948, 32585, 19101, 32606, 31913,
  /* 11400 */ 32657, 47398, 32644, 32682, 32727, 41936, 46215, 32755, 32782, 30777, 32817, 32836, 46997, 32857, 32883,
  /* 11415 */ 41409, 38323, 21373, 40411, 38323, 38323, 32903, 35307, 44052, 27715, 46090, 46925, 50398, 32801, 31986,
  /* 11430 */ 44180, 37754, 43805, 27856, 22734, 50776, 51429, 32924, 25310, 32953, 33001, 33028, 33057, 33102, 33118,
  /* 11445 */ 33153, 33192, 33226, 33256, 20061, 31359, 34454, 33272, 22952, 47353, 44608, 44582, 33293, 33330, 45822,
  /* 11460 */ 35352, 22734, 44846, 33391, 38168, 47376, 46215, 49846, 35586, 33412, 34439, 32908, 28358, 33435, 33456,
  /* 11475 */ 30211, 38168, 33508, 39819, 31325, 39732, 44892, 33524, 33540, 33556, 33592, 33621, 28358, 36376, 33240,
  /* 11490 */ 33643, 50605, 28402, 22938, 23009, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323,
  /* 11505 */ 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323,
  /* 11520 */ 25991, 38323, 38323, 33694, 38323, 20905, 33715, 33733, 27253, 31204, 33758, 33788, 38323, 33774, 33812,
  /* 11535 */ 33820, 33836, 33848, 26016, 38323, 38323, 33864, 26403, 38323, 38323, 38323, 38323, 23706, 38323, 38323,
  /* 11550 */ 23402, 38323, 33885, 23407, 48081, 37962, 37634, 33902, 34683, 26053, 38323, 33922, 38323, 26352, 33922,
  /* 11565 */ 38323, 38323, 38323, 33939, 33923, 32541, 38323, 28210, 33955, 22701, 22701, 22701, 33979, 34013, 46215,
  /* 11580 */ 46215, 36217, 47027, 35586, 35586, 35586, 40524, 22426, 38323, 38323, 38323, 38323, 38323, 38323, 23545,
  /* 11595 */ 38323, 38323, 36004, 38323, 38164, 22701, 22701, 22701, 41983, 38170, 22585, 46215, 46215, 46215, 42599,
  /* 11610 */ 28695, 35586, 35586, 35586, 35586, 34030, 32887, 26087, 26120, 38323, 38323, 38323, 38323, 38323, 23545,
  /* 11625 */ 38323, 23296, 38323, 38166, 22701, 22701, 30039, 22701, 30391, 22584, 46215, 46215, 43622, 46215, 22387,
  /* 11640 */ 30159, 35586, 35586, 43778, 35586, 27855, 35646, 23566, 38323, 38323, 38323, 38323, 38323, 21812, 36754,
  /* 11655 */ 22701, 22701, 22701, 36959, 22886, 22583, 46215, 46215, 49550, 46215, 30777, 35586, 35586, 35586, 48653,
  /* 11670 */ 34371, 41409, 38323, 38323, 38323, 38323, 38323, 28209, 22701, 22701, 22701, 46090, 46215, 46215, 46215,
  /* 11685 */ 31986, 35586, 35586, 35586, 27856, 22734, 38323, 38323, 38323, 38323, 38164, 22701, 22701, 40356, 46215,
  /* 11700 */ 46215, 36375, 35586, 35586, 40120, 31710, 38323, 38323, 38323, 36439, 22701, 28357, 33131, 46215, 49853,
  /* 11715 */ 35586, 27856, 22734, 41022, 38323, 38168, 42763, 46215, 28378, 35586, 22727, 36650, 38164, 28358, 28377,
  /* 11730 */ 30161, 36649, 38168, 46214, 35585, 28205, 42762, 27795, 22922, 28211, 40355, 36377, 22492, 28358, 36376,
  /* 11745 */ 44656, 48164, 50605, 29688, 34049, 23009, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323,
  /* 11760 */ 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323,
  /* 11775 */ 38323, 25991, 38323, 38323, 38323, 38323, 20905, 38323, 23218, 38323, 38323, 42538, 34086, 34094, 34110,
  /* 11790 */ 34115, 34131, 34147, 34159, 26016, 38323, 38323, 38323, 26403, 38323, 38323, 31159, 38323, 38323, 38323,
  /* 11805 */ 38323, 38323, 38323, 38323, 28208, 22701, 46213, 35139, 35586, 34683, 34175, 41643, 38323, 38323, 26352,
  /* 11820 */ 38323, 38323, 38323, 38323, 34191, 38323, 38323, 38323, 28210, 22701, 22701, 22701, 22701, 27407, 46215,
  /* 11835 */ 46215, 46215, 36217, 35586, 35586, 35586, 35586, 40524, 22426, 38323, 38323, 38323, 38323, 38323, 38323,
  /* 11850 */ 38323, 38323, 34209, 38323, 29925, 38164, 22701, 22701, 22701, 22701, 38170, 41662, 46215, 46215, 46215,
  /* 11865 */ 46215, 46111, 35586, 35586, 35586, 35586, 35586, 32887, 22488, 38323, 38323, 38323, 30221, 38323, 34230,
  /* 11880 */ 39279, 38323, 38323, 39284, 34251, 22701, 22701, 34269, 22701, 30391, 22584, 46215, 34014, 46215, 46215,
  /* 11895 */ 22387, 30159, 35586, 42476, 35586, 35586, 27855, 34286, 38323, 38323, 38323, 34330, 38323, 38323, 38323,
  /* 11910 */ 36754, 22701, 22701, 22701, 22701, 30392, 22583, 46215, 46215, 46215, 46215, 30151, 35586, 35586, 35586,
  /* 11925 */ 35586, 34371, 41409, 38323, 38323, 29205, 38323, 34348, 28209, 22701, 22701, 38552, 37600, 46215, 46215,
  /* 11940 */ 50910, 37653, 35586, 35586, 35586, 34369, 22734, 34387, 18364, 34424, 34470, 19517, 41089, 32373, 34491,
  /* 11955 */ 34497, 31543, 34513, 44341, 49759, 34536, 21204, 38323, 19415, 34402, 29718, 34571, 24177, 36604, 33306,
  /* 11970 */ 34609, 41146, 34631, 22734, 23324, 20780, 35540, 39179, 38402, 34649, 34668, 22727, 36650, 38164, 28358,
  /* 11985 */ 28377, 30161, 36649, 38168, 46214, 35585, 28205, 42762, 27795, 22922, 28211, 40355, 36377, 22492, 28358,
  /* 12000 */ 36376, 34297, 22799, 46316, 34711, 22938, 23009, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323,
  /* 12015 */ 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323,
  /* 12030 */ 38323, 38323, 25991, 38323, 38323, 38323, 38323, 20905, 38323, 38323, 38323, 38323, 19257, 38323, 38323,
  /* 12045 */ 38323, 38323, 44551, 49747, 27583, 26016, 23652, 38323, 38323, 34739, 38323, 38323, 38323, 18282, 38323,
  /* 12060 */ 18285, 38323, 38323, 34780, 34769, 36519, 22701, 34796, 27777, 35587, 47894, 34819, 38323, 38323, 36716,
  /* 12075 */ 26352, 22222, 39466, 38323, 38127, 38323, 38323, 38323, 38323, 28210, 22701, 22701, 43002, 22701, 27407,
  /* 12090 */ 46215, 46215, 30686, 36217, 35586, 35586, 35586, 34853, 40524, 22426, 38323, 38323, 38323, 38323, 38323,
  /* 12105 */ 38323, 38323, 38323, 36104, 38323, 34871, 38164, 22701, 22701, 22701, 22701, 50859, 22585, 46215, 46215,
  /* 12120 */ 46215, 46215, 38509, 35586, 35586, 35586, 35586, 35586, 41397, 22488, 38323, 34891, 38323, 38323, 38323,
  /* 12135 */ 38323, 38323, 38323, 38323, 45492, 38166, 34909, 22701, 22701, 22701, 30391, 46631, 46215, 46215, 46215,
  /* 12150 */ 46215, 22387, 32025, 35586, 35586, 35586, 35586, 27855, 41406, 38323, 38323, 38323, 25939, 38323, 38323,
  /* 12165 */ 38323, 36754, 22701, 22701, 22701, 45949, 30392, 22583, 46215, 46215, 46215, 33990, 30151, 35586, 35586,
  /* 12180 */ 35586, 41790, 34371, 41409, 38323, 38323, 49949, 38323, 38323, 28209, 22701, 22701, 22701, 37600, 46215,
  /* 12195 */ 46215, 46215, 37653, 35586, 35586, 35586, 27856, 22734, 38323, 38323, 38323, 38323, 38164, 22701, 22701,
  /* 12210 */ 40356, 46215, 46215, 36375, 35586, 35586, 40120, 38323, 21147, 38323, 23724, 38169, 22701, 28357, 46215,
  /* 12225 */ 46215, 36378, 35586, 27856, 34926, 41022, 25766, 38168, 46848, 46215, 41869, 35586, 43352, 36650, 38164,
  /* 12240 */ 28358, 28377, 30161, 36649, 38168, 46214, 35585, 28205, 42762, 27795, 22922, 28211, 40355, 36377, 22492,
  /* 12255 */ 28358, 36376, 34297, 22799, 50605, 28402, 22938, 23009, 38323, 38323, 38323, 38323, 38323, 38323, 38323,
  /* 12270 */ 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323,
  /* 12285 */ 38323, 38323, 38323, 25991, 38323, 38323, 31748, 38323, 20905, 31450, 19963, 25233, 26468, 26478, 38958,
  /* 12300 */ 38966, 34947, 34962, 34978, 34994, 35006, 26016, 38323, 38323, 38323, 25493, 19151, 38323, 38323, 38323,
  /* 12315 */ 47139, 23446, 38323, 19373, 35022, 35060, 33396, 35103, 35122, 29143, 35155, 37308, 35171, 38323, 38323,
  /* 12330 */ 38323, 35196, 38323, 26851, 35270, 38323, 38323, 33886, 48399, 32210, 28210, 48827, 48006, 22701, 35287,
  /* 12345 */ 47429, 37277, 35323, 34803, 35340, 43880, 35368, 35586, 35402, 35437, 22426, 38323, 35463, 21034, 36868,
  /* 12360 */ 35496, 35483, 38323, 41193, 41270, 38323, 35519, 35536, 48014, 22701, 42573, 29252, 37004, 22585, 37974,
  /* 12375 */ 46215, 49329, 35556, 47521, 35586, 35603, 35586, 35621, 27522, 35637, 22488, 38323, 38323, 38323, 38323,
  /* 12390 */ 35662, 38636, 35698, 38323, 38323, 38323, 33356, 36915, 22701, 22701, 27353, 38214, 35741, 45778, 46215,
  /* 12405 */ 46215, 48571, 49286, 28035, 35766, 35586, 35586, 39573, 49717, 35787, 38323, 47308, 35806, 35836, 35857,
  /* 12420 */ 37351, 35886, 26963, 35922, 47330, 35939, 35958, 35982, 36020, 46215, 36041, 32766, 47923, 23364, 35586,
  /* 12435 */ 50423, 41598, 36057, 36073, 33176, 45205, 46754, 36103, 36120, 36138, 28557, 36174, 46581, 49090, 36195,
  /* 12450 */ 36550, 27464, 37244, 43851, 36233, 39909, 49647, 23376, 37517, 38323, 38323, 42129, 36256, 38068, 42565,
  /* 12465 */ 42736, 40531, 37872, 48563, 33086, 43872, 50019, 40120, 38323, 40832, 38323, 36294, 38169, 22701, 28357,
  /* 12480 */ 46215, 46215, 36378, 35586, 27856, 36418, 36311, 38323, 28327, 45257, 36351, 36371, 36394, 36411, 36650,
  /* 12495 */ 36434, 28358, 28377, 30161, 42070, 35044, 45085, 36455, 36516, 42762, 27795, 22922, 28211, 40355, 36377,
  /* 12510 */ 22492, 36535, 36571, 34297, 22799, 50605, 28402, 36620, 36636, 38323, 38323, 38323, 38323, 38323, 38323,
  /* 12525 */ 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323,
  /* 12540 */ 38323, 38323, 38323, 38323, 25991, 38323, 38323, 48529, 38323, 20905, 38323, 38323, 38323, 38323, 19257,
  /* 12555 */ 38323, 45176, 48537, 48709, 33678, 36666, 36678, 26016, 38323, 38323, 38323, 26403, 38323, 38323, 38323,
  /* 12570 */ 38323, 38323, 38323, 38323, 38323, 38323, 38323, 28208, 22701, 46213, 35139, 35586, 34683, 26053, 38323,
  /* 12585 */ 38323, 38323, 26352, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 28210, 22701, 22701, 41976,
  /* 12600 */ 22701, 27407, 46215, 46216, 46215, 36217, 35586, 35586, 34520, 35586, 40524, 22426, 38323, 38323, 38323,
  /* 12615 */ 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38164, 22701, 22701, 22701, 22701, 38170, 22585,
  /* 12630 */ 46215, 46215, 46215, 46215, 28695, 35586, 35586, 35586, 35586, 35586, 32887, 22488, 38323, 38323, 38323,
  /* 12645 */ 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38166, 22701, 22701, 22701, 22701, 30391, 22584, 46215,
  /* 12660 */ 46215, 46215, 46215, 22387, 30159, 35586, 35586, 35586, 35586, 27855, 41406, 38323, 38323, 38323, 38323,
  /* 12675 */ 38323, 38323, 38323, 36754, 22701, 22701, 22701, 22701, 30392, 22583, 46215, 46215, 46215, 46215, 30151,
  /* 12690 */ 35586, 35586, 35586, 35586, 34371, 41409, 38323, 38323, 38323, 38323, 38323, 28209, 22701, 22701, 22701,
  /* 12705 */ 37600, 46215, 46215, 46215, 37653, 35586, 35586, 35586, 27856, 22734, 38323, 38323, 38323, 38323, 38164,
  /* 12720 */ 22701, 22701, 40356, 46215, 46215, 36375, 35586, 35586, 40120, 38323, 38323, 38323, 38323, 38169, 22701,
  /* 12735 */ 28357, 46215, 46215, 36378, 35586, 27856, 22734, 41022, 38323, 38168, 42763, 46215, 28378, 35586, 22727,
  /* 12750 */ 36650, 38164, 28358, 28377, 30161, 36649, 38168, 46214, 35585, 28205, 42762, 27795, 22922, 28211, 40355,
  /* 12765 */ 36377, 22492, 28358, 36376, 34297, 22799, 50605, 28402, 22938, 23009, 38323, 38323, 38323, 38323, 38323,
  /* 12780 */ 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323,
  /* 12795 */ 38323, 38323, 38323, 38323, 38323, 25991, 38323, 38323, 21925, 38323, 20905, 38323, 38323, 38323, 38323,
  /* 12810 */ 19257, 38323, 38323, 38323, 38323, 44551, 49747, 27583, 26016, 38323, 38323, 38323, 26403, 38323, 38323,
  /* 12825 */ 36694, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 28208, 22701, 46213, 35139, 35586, 34683, 26053,
  /* 12840 */ 38323, 38323, 38323, 26352, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 28210, 22701, 22701,
  /* 12855 */ 22701, 22701, 27407, 46215, 46215, 46215, 36217, 35586, 35586, 35586, 35586, 40524, 22426, 38323, 38323,
  /* 12870 */ 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38164, 22701, 22701, 22701, 22701, 38170,
  /* 12885 */ 22585, 46215, 46215, 46215, 46215, 28695, 35586, 35586, 35586, 35586, 35586, 32887, 22488, 38323, 36713,
  /* 12900 */ 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 46193, 22701, 22701, 22701, 22701, 30391, 31514,
  /* 12915 */ 46215, 46215, 46215, 46215, 22387, 30482, 35586, 35586, 35586, 35586, 27855, 41406, 38323, 38323, 38323,
  /* 12930 */ 38323, 38323, 38323, 38323, 36754, 22701, 22701, 22701, 22701, 30392, 22583, 46215, 46215, 46215, 46215,
  /* 12945 */ 30151, 35586, 35586, 35586, 35586, 34371, 41409, 38323, 38323, 38323, 38323, 38323, 28209, 22701, 22701,
  /* 12960 */ 22701, 37600, 46215, 46215, 46215, 37653, 35586, 35586, 35586, 27856, 22734, 38323, 38323, 38323, 38323,
  /* 12975 */ 38164, 22701, 22701, 40356, 46215, 46215, 36375, 35586, 35586, 40120, 38323, 38323, 38323, 38323, 38169,
  /* 12990 */ 22701, 28357, 46215, 46215, 36378, 35586, 27856, 22734, 41022, 38323, 38168, 42763, 46215, 28378, 35586,
  /* 13005 */ 22727, 36650, 38164, 28358, 28377, 30161, 36649, 38168, 46214, 35585, 28205, 42762, 27795, 22922, 28211,
  /* 13020 */ 40355, 36377, 22492, 28358, 36376, 34297, 22799, 50605, 28402, 22938, 23009, 38323, 38323, 38323, 38323,
  /* 13035 */ 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323,
  /* 13050 */ 38323, 38323, 38323, 38323, 38323, 38323, 25991, 38323, 38323, 26282, 38323, 20905, 38323, 46737, 38323,
  /* 13065 */ 51221, 36732, 36770, 36782, 36798, 36803, 36819, 36835, 36847, 26016, 38323, 36863, 38323, 26403, 38323,
  /* 13080 */ 39118, 21887, 38323, 38323, 36885, 38323, 23689, 25402, 36884, 36901, 36937, 43908, 37020, 37055, 39604,
  /* 13095 */ 37091, 37107, 38323, 38323, 26552, 38323, 38323, 20867, 24969, 38323, 37143, 18535, 37163, 18259, 49102,
  /* 13110 */ 37199, 43517, 48939, 37217, 37233, 46215, 37260, 46330, 39871, 49494, 35421, 37293, 47547, 37344, 34875,
  /* 13125 */ 38323, 38323, 38323, 38323, 21107, 38323, 38323, 38323, 38323, 38323, 38164, 37367, 35966, 22701, 37393,
  /* 13140 */ 39413, 37414, 37430, 27476, 46215, 37452, 30694, 29571, 37469, 37487, 38591, 35586, 37505, 22488, 38323,
  /* 13155 */ 38323, 37544, 38323, 38323, 35236, 44411, 38323, 38323, 38323, 38166, 22701, 22701, 27345, 37560, 37595,
  /* 13170 */ 22584, 46215, 46215, 40452, 37616, 37650, 30159, 35586, 35586, 37680, 37669, 37703, 41406, 38323, 37734,
  /* 13185 */ 38323, 38323, 26031, 38323, 38323, 36754, 22701, 43316, 22701, 22701, 30392, 22583, 43628, 46215, 46215,
  /* 13200 */ 46215, 30151, 35586, 37752, 35586, 35586, 34371, 41409, 37770, 25548, 38323, 51380, 37790, 28209, 37826,
  /* 13215 */ 22701, 22701, 46622, 37861, 46215, 46215, 45347, 49139, 35586, 35586, 48659, 22734, 51004, 38323, 38323,
  /* 13230 */ 37895, 38164, 43322, 22701, 40356, 45303, 46215, 36375, 48775, 35586, 40120, 38323, 22684, 38323, 38323,
  /* 13245 */ 38169, 22701, 37914, 46215, 45670, 36378, 35586, 40114, 22734, 41022, 38323, 38168, 42763, 46215, 28378,
  /* 13260 */ 35586, 22727, 36650, 38164, 28358, 28377, 30161, 36649, 38168, 46214, 35585, 28205, 42762, 27795, 22922,
  /* 13275 */ 28211, 37934, 46172, 22738, 33366, 42908, 34297, 22799, 49317, 37950, 22938, 23009, 38323, 38323, 38323,
  /* 13290 */ 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323,
  /* 13305 */ 38323, 38323, 38323, 38323, 38323, 38323, 38323, 25991, 38323, 38323, 26168, 38323, 20905, 38323, 28799,
  /* 13320 */ 38323, 38323, 35820, 39014, 39022, 37996, 38010, 38018, 38034, 38046, 26261, 38323, 28253, 38323, 26403,
  /* 13335 */ 38323, 30868, 38323, 38323, 38323, 28255, 38323, 28248, 24994, 28254, 38062, 38084, 50613, 35139, 38105,
  /* 13350 */ 34683, 26053, 38323, 38323, 38125, 26352, 38323, 29978, 22433, 25105, 38323, 38323, 38323, 38143, 38160,
  /* 13365 */ 37572, 22701, 38186, 38206, 28605, 46215, 29533, 40065, 38230, 42017, 35586, 48468, 38258, 32145, 38292,
  /* 13380 */ 38340, 20964, 28762, 38323, 38323, 38323, 38323, 21297, 38323, 38323, 38323, 38164, 31816, 22701, 38361,
  /* 13395 */ 22701, 38170, 22585, 38381, 28165, 46215, 46215, 28695, 29178, 32108, 32841, 35586, 35586, 32887, 22488,
  /* 13410 */ 38323, 30613, 38323, 38426, 38323, 41736, 38323, 38444, 38323, 38323, 38166, 45435, 22701, 22701, 38479,
  /* 13425 */ 30410, 22584, 33375, 46215, 46215, 38502, 22904, 30159, 39934, 35586, 35586, 38525, 27855, 41406, 38323,
  /* 13440 */ 38323, 38323, 38323, 38323, 38323, 38323, 36754, 22701, 22701, 22701, 22701, 30392, 22583, 46215, 46215,
  /* 13455 */ 46215, 46215, 30151, 35586, 35586, 35586, 35586, 34371, 41409, 38323, 38323, 38323, 38323, 38323, 28209,
  /* 13470 */ 22701, 22701, 22701, 37600, 46215, 46215, 46215, 37653, 35586, 35586, 35586, 27856, 33419, 38323, 38323,
  /* 13485 */ 38323, 38323, 38164, 38548, 22701, 40356, 38568, 46215, 36375, 38587, 35586, 40120, 38323, 38323, 38323,
  /* 13500 */ 38323, 38169, 22701, 28357, 46215, 38607, 36378, 49570, 27856, 22734, 41022, 38323, 38168, 42763, 46215,
  /* 13515 */ 28378, 35586, 22727, 36267, 38164, 45078, 41309, 45710, 38626, 38660, 22860, 38683, 28205, 42762, 27795,
  /* 13530 */ 22922, 28211, 40355, 36377, 22492, 28358, 38706, 38727, 22799, 50605, 28402, 22938, 23009, 38323, 38323,
  /* 13545 */ 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323,
  /* 13560 */ 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 25991, 38323, 38323, 28421, 38323, 22278, 38323,
  /* 13575 */ 27956, 38769, 36158, 38807, 38846, 38870, 38886, 38854, 38900, 38916, 38928, 26016, 38323, 19246, 40886,
  /* 13590 */ 38944, 39048, 21805, 38323, 38982, 18833, 39000, 39038, 39064, 26245, 39098, 39134, 39164, 45558, 39203,
  /* 13605 */ 39239, 34683, 26053, 29954, 38323, 38323, 31262, 37898, 26956, 26860, 25840, 39269, 39307, 31432, 39303,
  /* 13620 */ 39323, 32978, 39343, 48086, 22701, 31951, 22645, 46215, 49616, 36217, 47863, 47776, 30533, 35586, 33605,
  /* 13635 */ 39363, 29907, 42228, 38323, 39386, 38323, 38323, 37147, 38323, 38323, 38323, 21564, 39327, 36977, 22701,
  /* 13650 */ 39408, 22701, 38170, 23352, 39696, 46215, 39429, 46215, 28695, 27829, 39446, 38109, 35586, 35586, 32887,
  /* 13665 */ 22488, 38323, 38323, 38323, 38323, 32217, 38323, 38323, 40403, 39463, 39482, 45426, 22701, 22701, 50441,
  /* 13680 */ 22701, 39499, 39520, 46215, 46215, 38610, 46215, 39544, 39565, 35586, 35586, 32820, 35586, 39589, 41406,
  /* 13695 */ 49589, 39620, 44515, 49909, 38323, 39651, 35254, 39667, 38190, 39717, 33012, 32966, 30392, 22583, 39760,
  /* 13710 */ 39796, 27438, 39835, 30151, 40496, 39853, 39887, 39925, 34633, 44698, 49431, 39950, 35218, 39992, 50820,
  /* 13725 */ 18307, 48275, 40008, 40027, 40047, 39430, 40081, 41931, 40100, 35586, 40136, 49710, 39253, 22734, 31046,
  /* 13740 */ 38323, 38323, 20458, 40157, 39347, 47996, 30081, 50840, 41530, 44900, 45530, 28536, 40120, 40182, 38323,
  /* 13755 */ 21343, 23600, 45230, 32388, 28357, 40209, 49279, 40251, 40291, 40315, 34546, 25041, 40333, 27318, 42763,
  /* 13770 */ 47452, 28378, 40489, 22727, 20100, 38164, 40353, 40372, 38242, 40393, 40427, 33470, 40475, 33345, 49225,
  /* 13785 */ 48109, 33210, 28211, 40355, 36377, 22492, 28358, 36376, 40275, 40512, 50605, 28402, 22938, 40547, 38323,
  /* 13800 */ 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323,
  /* 13815 */ 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 25991, 38323, 38323, 38323, 40576, 20905,
  /* 13830 */ 38323, 51144, 40597, 38323, 43286, 40617, 40625, 40641, 40655, 40663, 40679, 40691, 26016, 40772, 40707,
  /* 13845 */ 40723, 40758, 25748, 40788, 38323, 40856, 40872, 40908, 40959, 40975, 41001, 41038, 41053, 41069, 34723,
  /* 13860 */ 41105, 41121, 48195, 41162, 38323, 26130, 27125, 27233, 38323, 41188, 26607, 41209, 41246, 38323, 38323,
  /* 13875 */ 41265, 28210, 22701, 31802, 41286, 33963, 27407, 39837, 49350, 33484, 41325, 35586, 32116, 41353, 41384,
  /* 13890 */ 40524, 22426, 38323, 27935, 38323, 42967, 38323, 35675, 41425, 38323, 41450, 50477, 41644, 31334, 22701,
  /* 13905 */ 41484, 41500, 22701, 36087, 41519, 43749, 43917, 46215, 46215, 41556, 36493, 37039, 41587, 35586, 29400,
  /* 13920 */ 32887, 41614, 41630, 38323, 29213, 44390, 38323, 38323, 38323, 38323, 38323, 35245, 38166, 22701, 23044,
  /* 13935 */ 43731, 22701, 30391, 22584, 46215, 44296, 36555, 46215, 22387, 30159, 35586, 35379, 49499, 35586, 27855,
  /* 13950 */ 41406, 38323, 38323, 21003, 38323, 47637, 38323, 38323, 36754, 22701, 22701, 22701, 22701, 18344, 41660,
  /* 13965 */ 46215, 46215, 46215, 46215, 41679, 35586, 35586, 35586, 35586, 50665, 41409, 48237, 45464, 38323, 38323,
  /* 13980 */ 38323, 29340, 22701, 37837, 22701, 45649, 46215, 47915, 46215, 45689, 35586, 45733, 35586, 27856, 28976,
  /* 13995 */ 41713, 38323, 38323, 38323, 48258, 30652, 22701, 37918, 44474, 46215, 33440, 45395, 35586, 40120, 41732,
  /* 14010 */ 38323, 38323, 38323, 38169, 22701, 28357, 46215, 46215, 36378, 35586, 27856, 43359, 41022, 38323, 41752,
  /* 14025 */ 40031, 37321, 27482, 41787, 22727, 41806, 30590, 41840, 41885, 41916, 33657, 41952, 49268, 41999, 28205,
  /* 14040 */ 42762, 27795, 22922, 28211, 40355, 36377, 22492, 28358, 36376, 32492, 22799, 42033, 28402, 22938, 42057,
  /* 14055 */ 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323,
  /* 14070 */ 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 25991, 38323, 38323, 38323, 32175,
  /* 14085 */ 20905, 38323, 38323, 42086, 45605, 42108, 42145, 38323, 29056, 42167, 42181, 42197, 42209, 26016, 38323,
  /* 14100 */ 38323, 20029, 26403, 38323, 38323, 38323, 42225, 34193, 38323, 38323, 41223, 20031, 38323, 27652, 31868,
  /* 14115 */ 49527, 42244, 30849, 34683, 26053, 38323, 42279, 38323, 26352, 38323, 33869, 28746, 38323, 30714, 38323,
  /* 14130 */ 38323, 28759, 48217, 41964, 32432, 36179, 36968, 42301, 31981, 42317, 32794, 42336, 38276, 30269, 30550,
  /* 14145 */ 29313, 33166, 42352, 42388, 38323, 42409, 38323, 38345, 40581, 19957, 38323, 38323, 38323, 38323, 38164,
  /* 14160 */ 22701, 22701, 36995, 22701, 38170, 22585, 46215, 46215, 46920, 46215, 28695, 35586, 35586, 35586, 42475,
  /* 14175 */ 35586, 32887, 42492, 42527, 36295, 38323, 38323, 38323, 38305, 35503, 38782, 45151, 38323, 38166, 22701,
  /* 14190 */ 42554, 22701, 22701, 37201, 22584, 46215, 42589, 46215, 46215, 27409, 30159, 35586, 42622, 35586, 35586,
  /* 14205 */ 27855, 41406, 38323, 41460, 38323, 38323, 38323, 26276, 38323, 36754, 22701, 22701, 50715, 22701, 22369,
  /* 14220 */ 22583, 46215, 46215, 42648, 46215, 30474, 35586, 35586, 35386, 35586, 34371, 41409, 38323, 38323, 38323,
  /* 14235 */ 38323, 38323, 28209, 22701, 22701, 22701, 37600, 46215, 46215, 46215, 37653, 35586, 35586, 35586, 27856,
  /* 14250 */ 22734, 38323, 35682, 38323, 38323, 42667, 22701, 22701, 40356, 46215, 46215, 36375, 35586, 35586, 48681,
  /* 14265 */ 38323, 38323, 38323, 38323, 38169, 22701, 28357, 46215, 46215, 36378, 35586, 27856, 22734, 41022, 38323,
  /* 14280 */ 38168, 42763, 46215, 28378, 35586, 46285, 42689, 42725, 32666, 30110, 30161, 40560, 42760, 46214, 35585,
  /* 14295 */ 28205, 42762, 27795, 22922, 28211, 40355, 36377, 22492, 28358, 36376, 34297, 22799, 50605, 28402, 22938,
  /* 14310 */ 23009, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323,
  /* 14325 */ 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 25991, 38323, 38323, 38323,
  /* 14340 */ 38323, 20905, 38323, 38323, 38323, 38323, 19257, 38323, 38323, 38323, 38323, 44551, 49747, 27583, 26016,
  /* 14355 */ 38323, 38323, 38323, 26403, 38323, 38323, 39287, 38323, 38323, 38323, 42783, 42786, 26523, 42779, 42802,
  /* 14370 */ 42826, 42844, 29118, 42878, 42895, 42931, 42947, 38323, 38323, 26352, 38323, 38323, 38323, 38323, 38323,
  /* 14385 */ 38323, 38323, 38323, 28210, 22701, 22701, 22701, 22701, 27407, 46215, 46215, 46215, 36217, 35586, 35586,
  /* 14400 */ 35586, 35586, 40524, 22426, 38323, 38323, 38323, 42964, 38323, 38323, 38323, 38323, 38323, 38323, 38323,
  /* 14415 */ 38164, 22701, 22701, 22701, 22701, 38170, 42983, 46215, 46215, 46215, 46215, 33576, 35586, 35586, 35586,
  /* 14430 */ 35586, 35586, 32887, 22488, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38166,
  /* 14445 */ 22701, 22701, 22701, 22701, 30391, 22584, 46215, 46215, 46215, 46215, 22387, 30159, 35586, 35586, 35586,
  /* 14460 */ 35586, 27855, 41406, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 36754, 22701, 22701, 22701, 22701,
  /* 14475 */ 30392, 22583, 46215, 46215, 46215, 46215, 30151, 35586, 35586, 35586, 35586, 34371, 41409, 38323, 38323,
  /* 14490 */ 38323, 38323, 38323, 28209, 22701, 22701, 22701, 37600, 46215, 46215, 46215, 37653, 35586, 35586, 35586,
  /* 14505 */ 27856, 22734, 38323, 38323, 38323, 38323, 38164, 22701, 22701, 40356, 46215, 46215, 36375, 35586, 35586,
  /* 14520 */ 40120, 38323, 38323, 38323, 38323, 38169, 43000, 28357, 43594, 46215, 36378, 43018, 27856, 22734, 41022,
  /* 14535 */ 38323, 38168, 42763, 46215, 28378, 35586, 22727, 36650, 38164, 28358, 28377, 30161, 36649, 38168, 46214,
  /* 14550 */ 35585, 28205, 42762, 27795, 22922, 28211, 40355, 36377, 22492, 28358, 36376, 34297, 22799, 50605, 28402,
  /* 14565 */ 22938, 23009, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323,
  /* 14580 */ 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 25991, 38323, 38323,
  /* 14595 */ 38323, 49881, 51449, 38323, 38323, 48967, 38323, 43960, 43038, 43145, 43074, 43087, 43095, 43111, 43123,
  /* 14610 */ 26016, 38323, 26899, 18697, 26403, 31683, 43139, 43161, 20450, 43181, 42703, 23753, 43204, 43275, 24557,
  /* 14625 */ 33277, 43302, 49835, 43338, 43375, 43836, 43422, 38323, 38323, 38323, 21610, 43447, 42439, 43471, 43489,
  /* 14640 */ 31638, 38323, 38323, 48408, 43507, 22701, 43533, 30046, 43551, 43587, 42606, 46215, 43610, 40223, 43644,
  /* 14655 */ 43661, 27602, 49152, 27558, 43682, 38323, 38323, 38323, 28132, 35520, 38323, 38323, 43705, 38984, 38323,
  /* 14670 */ 35899, 28940, 22701, 43726, 22701, 49110, 44249, 47906, 46215, 43747, 46215, 45570, 43765, 43800, 33906,
  /* 14685 */ 35586, 35586, 43821, 43896, 22488, 38323, 38323, 30891, 38323, 43933, 43949, 38323, 45915, 43976, 43988,
  /* 14700 */ 44004, 22701, 39148, 44032, 44068, 30633, 44088, 46215, 22830, 45323, 44115, 40084, 44134, 35586, 44161,
  /* 14715 */ 45896, 44177, 34033, 41406, 42511, 38323, 38323, 25556, 44196, 49928, 38323, 44224, 27752, 44265, 22984,
  /* 14730 */ 22701, 30392, 22583, 44286, 42320, 46215, 46215, 30151, 28717, 44319, 44336, 35586, 40317, 44357, 38323,
  /* 14745 */ 44385, 44406, 38323, 38323, 28209, 44427, 22701, 22701, 44446, 44471, 46215, 46215, 28024, 44490, 35586,
  /* 14760 */ 35586, 49683, 22734, 38323, 44511, 38323, 38323, 18336, 22701, 22701, 34307, 46215, 50961, 22521, 35586,
  /* 14775 */ 44320, 40120, 38323, 43455, 38323, 38323, 38169, 22701, 28357, 46215, 46215, 36378, 35586, 27856, 22734,
  /* 14790 */ 41022, 38323, 38168, 42763, 46215, 28378, 35586, 22727, 44531, 24158, 39682, 49791, 44567, 36649, 38168,
  /* 14805 */ 46214, 35585, 47586, 44603, 44624, 44644, 38455, 40355, 36377, 22492, 28358, 36376, 36585, 44672, 44722,
  /* 14820 */ 41697, 22938, 23009, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323,
  /* 14835 */ 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 25991, 38323,
  /* 14850 */ 38323, 38323, 47967, 20905, 44760, 34753, 44792, 44746, 44777, 44838, 44862, 44916, 44930, 44946, 44962,
  /* 14865 */ 44974, 26016, 44990, 28918, 38323, 44806, 38323, 38323, 29381, 38323, 26663, 38323, 45009, 45028, 29360,
  /* 14880 */ 45035, 45051, 48933, 38740, 50892, 45101, 34683, 26053, 45122, 45146, 28445, 26352, 26565, 38323, 38323,
  /* 14895 */ 38323, 38323, 45167, 45192, 38323, 45221, 45246, 27376, 22701, 22701, 45284, 45319, 45339, 46215, 36217,
  /* 14910 */ 45363, 22757, 45393, 35586, 40524, 22426, 38428, 38323, 38323, 45411, 45451, 38323, 38323, 38323, 38323,
  /* 14925 */ 38323, 45487, 38164, 47673, 36986, 22701, 22701, 37579, 22585, 45508, 45298, 46215, 46215, 45580, 35605,
  /* 14940 */ 35586, 45527, 35586, 35586, 45546, 22488, 38323, 38323, 35995, 40601, 38323, 36002, 19957, 45596, 40733,
  /* 14955 */ 39483, 45621, 22701, 22701, 40166, 32402, 45644, 45665, 46215, 46215, 42853, 28690, 45686, 45705, 35586,
  /* 14970 */ 35586, 43397, 45726, 45749, 28098, 42506, 25227, 38323, 43051, 38323, 42452, 44761, 25848, 22701, 22701,
  /* 14985 */ 23052, 45799, 30392, 22583, 46215, 48442, 44303, 46215, 30151, 35586, 35586, 46660, 45819, 34371, 41409,
  /* 15000 */ 38323, 48996, 45838, 26615, 38323, 28209, 22701, 45856, 43564, 48886, 46215, 45874, 45974, 39780, 35586,
  /* 15015 */ 45892, 46667, 27856, 22734, 38323, 38323, 45912, 43259, 38164, 22701, 22701, 40356, 46215, 46215, 36375,
  /* 15030 */ 35586, 35586, 28966, 22604, 45931, 41230, 37528, 45948, 22701, 45965, 46215, 34314, 36378, 35586, 45998,
  /* 15045 */ 46020, 41022, 46048, 46072, 42763, 46106, 44628, 46127, 32867, 36650, 38164, 46146, 46165, 45377, 36649,
  /* 15060 */ 38168, 46214, 35585, 34931, 35106, 22548, 22922, 46188, 46209, 46232, 46344, 46263, 47766, 34297, 22799,
  /* 15075 */ 50605, 28402, 22938, 23009, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323,
  /* 15090 */ 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 25991,
  /* 15105 */ 38323, 38323, 38323, 26927, 20905, 38323, 38323, 47611, 38323, 46301, 46360, 46373, 46389, 46405, 46421,
  /* 15120 */ 46437, 46449, 26016, 46465, 50197, 33717, 26403, 40936, 25798, 46485, 37127, 22350, 46499, 46515, 46524,
  /* 15135 */ 46540, 46496, 46567, 46609, 32505, 46647, 46683, 41368, 46728, 50179, 21245, 26456, 26352, 46753, 38323,
  /* 15150 */ 34214, 46770, 43234, 46804, 46827, 46864, 46874, 46890, 31920, 27733, 43535, 46906, 47109, 46941, 46966,
  /* 15165 */ 47491, 46989, 47013, 47054, 47070, 47090, 47125, 47179, 47201, 35271, 38323, 47225, 47252, 38323, 38323,
  /* 15180 */ 47270, 47287, 47303, 47324, 47346, 47369, 47392, 29493, 47414, 23117, 47468, 47507, 47563, 36025, 28695,
  /* 15195 */ 36240, 37687, 42915, 35586, 28044, 28053, 47581, 38323, 21918, 40337, 50378, 47602, 45012, 47627, 23083,
  /* 15210 */ 38144, 18725, 38166, 47661, 29242, 22701, 44270, 47696, 47737, 47755, 41852, 46215, 39701, 47799, 47825,
  /* 15225 */ 47845, 43388, 35586, 38711, 47879, 41406, 40840, 47939, 38323, 46780, 47960, 38323, 50056, 29010, 47983,
  /* 15240 */ 38365, 48030, 48066, 30392, 48102, 48125, 48143, 47444, 36210, 47809, 22529, 36500, 48180, 43666, 34371,
  /* 15255 */ 35447, 48211, 50544, 38323, 50694, 48233, 48253, 45065, 48274, 22701, 31505, 27451, 48291, 46215, 46950,
  /* 15270 */ 50740, 48334, 35586, 46712, 22734, 38323, 48350, 48371, 38323, 29019, 22975, 48424, 39187, 41861, 48440,
  /* 15285 */ 48458, 37075, 48491, 48511, 32697, 38323, 31646, 37183, 38463, 25349, 48554, 48587, 48607, 48640, 45106,
  /* 15300 */ 48675, 48798, 48697, 48725, 44237, 32628, 48748, 38753, 48771, 48791, 36650, 38164, 28358, 28377, 30161,
  /* 15315 */ 36649, 38168, 46214, 35585, 28205, 42762, 45511, 46130, 48814, 40442, 48843, 48867, 41301, 48902, 44685,
  /* 15330 */ 22799, 50605, 28402, 48918, 23009, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323,
  /* 15345 */ 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323,
  /* 15360 */ 25991, 38323, 38323, 38323, 38323, 48955, 38323, 38323, 48992, 38323, 35087, 50114, 50122, 49012, 50122,
  /* 15375 */ 50130, 49028, 49040, 26016, 38323, 38323, 38323, 27172, 38323, 29476, 38323, 38323, 38323, 38323, 29475,
  /* 15390 */ 38323, 49056, 38323, 28208, 49076, 34593, 36483, 49126, 36470, 49168, 18253, 38323, 38323, 26352, 38323,
  /* 15405 */ 38323, 30373, 49193, 38323, 38323, 38323, 41716, 28210, 49218, 22701, 22701, 22702, 49241, 46215, 46215,
  /* 15420 */ 46215, 31567, 46695, 35586, 35586, 35586, 49257, 49302, 49376, 38323, 49399, 49426, 38323, 38323, 43473,
  /* 15435 */ 35870, 38323, 34475, 31718, 38164, 45858, 40011, 42744, 35301, 28336, 22585, 48624, 33997, 38393, 49447,
  /* 15450 */ 48305, 35586, 46705, 39216, 49480, 33203, 49515, 22488, 38323, 43710, 38323, 37803, 38323, 38323, 38323,
  /* 15465 */ 39976, 38323, 38323, 38166, 38486, 22701, 22701, 22701, 30391, 49548, 22867, 46215, 46215, 46215, 22387,
  /* 15480 */ 49566, 38690, 35586, 35586, 35586, 27855, 41406, 23683, 38323, 49586, 38323, 38323, 38323, 38323, 44544,
  /* 15495 */ 41083, 22701, 22701, 22701, 30392, 49605, 46215, 46215, 46215, 46215, 30151, 49639, 35586, 35586, 35586,
  /* 15510 */ 34371, 35790, 38323, 38323, 47271, 28242, 38323, 29632, 36950, 22701, 22701, 39504, 35567, 46215, 46215,
  /* 15525 */ 49663, 49699, 35586, 35586, 49733, 22734, 26907, 38323, 38323, 38323, 38164, 22701, 22701, 40356, 46215,
  /* 15540 */ 46215, 36375, 35586, 35586, 40120, 38323, 38323, 38323, 38323, 38169, 22701, 28357, 46215, 46215, 36378,
  /* 15555 */ 35586, 27856, 22734, 41022, 38323, 34253, 42763, 46973, 28378, 37067, 22727, 36650, 38164, 28358, 28377,
  /* 15570 */ 30161, 36649, 38168, 46214, 35585, 28205, 42762, 27795, 22922, 35037, 49782, 49807, 22492, 28358, 36376,
  /* 15585 */ 34297, 34652, 44877, 49823, 22938, 23009, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323,
  /* 15600 */ 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323,
  /* 15615 */ 38323, 25991, 38323, 38323, 38323, 38323, 49869, 49906, 50086, 49925, 38323, 49410, 38323, 50084, 49944,
  /* 15630 */ 28624, 19733, 49965, 49977, 26016, 38323, 38323, 38323, 26403, 38323, 38323, 38323, 38323, 38323, 38323,
  /* 15645 */ 38323, 38323, 38323, 38323, 28208, 49993, 42041, 35139, 50011, 34683, 26053, 38323, 34332, 30249, 26352,
  /* 15660 */ 38323, 38323, 38323, 38323, 38323, 18649, 38323, 38323, 28210, 27724, 22701, 37398, 22701, 27407, 50035,
  /* 15675 */ 46215, 33069, 36217, 29292, 35586, 30802, 35586, 40524, 22426, 38323, 38323, 38323, 38323, 38323, 44993,
  /* 15690 */ 38323, 38323, 38323, 21453, 38323, 38164, 22701, 49995, 22701, 22701, 38170, 22585, 46215, 49464, 46215,
  /* 15705 */ 46215, 28695, 35586, 35586, 50319, 35586, 35586, 32887, 22488, 38323, 38323, 38323, 38323, 38323, 38323,
  /* 15720 */ 38323, 38323, 38323, 38323, 38166, 22701, 22701, 22701, 22701, 30391, 22584, 46215, 46215, 46215, 46215,
  /* 15735 */ 22387, 30159, 35586, 35586, 35586, 35586, 27855, 41406, 38323, 38323, 38323, 38323, 38323, 38323, 38323,
  /* 15750 */ 36754, 22701, 22701, 22701, 22701, 30392, 22583, 46215, 46215, 46215, 46215, 30151, 35586, 35586, 35586,
  /* 15765 */ 35586, 34371, 41409, 38323, 38323, 50053, 38323, 38323, 28209, 22701, 22701, 22701, 37600, 46215, 46215,
  /* 15780 */ 46215, 37653, 35586, 35586, 35586, 27856, 22734, 38323, 31677, 38323, 38323, 38164, 22701, 22701, 40356,
  /* 15795 */ 46215, 46215, 36375, 35586, 35586, 40120, 38323, 38323, 38323, 38323, 38169, 22701, 28357, 46215, 46215,
  /* 15810 */ 36378, 35586, 27856, 22734, 50072, 38323, 38168, 42763, 46215, 28378, 35586, 22727, 36650, 38164, 28358,
  /* 15825 */ 28377, 30161, 36649, 38168, 46214, 35585, 28205, 42762, 27795, 22922, 28211, 40355, 36377, 22492, 28358,
  /* 15840 */ 36376, 34297, 22799, 50605, 28402, 22938, 23009, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323,
  /* 15855 */ 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323,
  /* 15870 */ 38323, 38323, 25991, 38323, 38323, 38323, 38323, 50102, 38323, 21587, 38323, 48732, 50146, 50213, 38323,
  /* 15885 */ 50237, 50251, 50265, 50281, 50293, 26016, 38323, 38323, 38323, 26403, 38323, 38323, 38323, 38323, 38323,
  /* 15900 */ 38323, 38323, 38323, 38323, 38323, 28208, 45803, 46213, 50309, 28298, 41571, 50343, 38323, 38323, 38323,
  /* 15915 */ 26352, 38323, 38323, 38323, 38323, 24022, 38323, 38323, 38323, 28210, 22701, 22701, 22701, 22701, 27407,
  /* 15930 */ 46215, 46215, 46215, 36217, 35586, 35586, 35586, 35586, 40524, 22426, 38323, 38323, 38323, 38323, 38323,
  /* 15945 */ 38323, 38323, 38323, 38323, 38323, 38323, 38164, 22701, 22701, 22701, 22701, 38170, 22585, 46215, 46215,
  /* 15960 */ 46215, 46215, 28695, 35586, 35586, 35586, 35586, 35586, 32887, 22488, 38323, 38323, 38323, 38323, 38323,
  /* 15975 */ 38323, 50376, 38323, 38323, 38323, 46842, 22701, 22701, 22701, 22701, 30391, 50394, 46215, 46215, 46215,
  /* 15990 */ 46215, 22387, 50414, 35586, 35586, 35586, 35586, 27855, 41406, 38323, 38323, 41816, 38323, 38323, 38323,
  /* 16005 */ 38323, 36754, 22701, 22701, 50439, 22701, 50457, 22583, 46215, 48155, 46215, 37328, 30151, 35586, 47829,
  /* 16020 */ 35586, 35586, 50493, 41409, 38323, 38323, 38323, 38323, 38323, 28209, 22701, 22701, 22701, 37600, 46215,
  /* 16035 */ 46215, 46215, 37653, 35586, 35586, 35586, 27856, 22734, 38323, 38323, 38323, 38323, 38164, 22701, 22701,
  /* 16050 */ 40356, 46215, 46215, 36375, 35586, 35586, 40120, 38323, 38323, 38323, 38323, 38169, 22701, 28357, 46215,
  /* 16065 */ 46215, 36378, 35586, 27856, 22734, 41022, 38323, 38168, 42763, 46215, 28378, 35586, 22727, 36650, 38164,
  /* 16080 */ 28358, 28377, 30161, 36649, 38168, 46214, 35585, 28205, 42762, 27795, 22922, 28211, 40355, 36377, 22492,
  /* 16095 */ 28358, 36376, 34297, 22799, 50605, 28402, 22938, 23009, 38323, 38323, 38323, 38323, 38323, 38323, 38323,
  /* 16110 */ 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323,
  /* 16125 */ 38323, 38323, 38323, 26347, 38323, 38323, 38323, 38323, 20905, 38323, 38323, 38323, 38323, 19257, 38323,
  /* 16140 */ 38323, 38323, 38323, 34837, 50513, 50525, 26016, 38323, 38323, 38323, 26403, 50541, 38323, 50560, 38323,
  /* 16155 */ 38323, 38323, 50581, 38323, 26427, 50577, 50597, 50629, 44730, 35139, 50647, 34683, 26053, 38323, 38323,
  /* 16170 */ 38323, 50681, 27270, 27912, 30915, 38323, 38323, 38323, 38323, 38323, 28210, 22701, 42828, 22701, 50710,
  /* 16185 */ 27407, 46215, 30677, 30180, 36217, 35586, 35586, 50731, 27820, 40524, 50756, 50772, 38323, 38323, 38323,
  /* 16200 */ 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38164, 22701, 22701, 22701, 22701, 38170, 22585, 46215,
  /* 16215 */ 46215, 46215, 46215, 28695, 35586, 35586, 35586, 35586, 35586, 32887, 22488, 38323, 38323, 38323, 38323,
  /* 16230 */ 38323, 38323, 20977, 38323, 38323, 38323, 38166, 22701, 27995, 22701, 22701, 27212, 22584, 46215, 36355,
  /* 16245 */ 46215, 46215, 48127, 30159, 35586, 43022, 35586, 35586, 27855, 41406, 21076, 38323, 38323, 38323, 38323,
  /* 16260 */ 38323, 38323, 36754, 35923, 22701, 22701, 22701, 30392, 22583, 33571, 46215, 46215, 46215, 30151, 40141,
  /* 16275 */ 35586, 35586, 35586, 34371, 41409, 38323, 38323, 38323, 38323, 38323, 28209, 22701, 22701, 22701, 37600,
  /* 16290 */ 46215, 46215, 46215, 37653, 35586, 35586, 35586, 27856, 22734, 38323, 38323, 38323, 38323, 38164, 22701,
  /* 16305 */ 22701, 40356, 46215, 46215, 36375, 35586, 35586, 40120, 38323, 38323, 38323, 38323, 38169, 22701, 28357,
  /* 16320 */ 46215, 46215, 36378, 35586, 27856, 22734, 41022, 38323, 38168, 42763, 46215, 28378, 35586, 22727, 36650,
  /* 16335 */ 38164, 28358, 28377, 30161, 36649, 38168, 46214, 35585, 28205, 42762, 27795, 22922, 28211, 40355, 36377,
  /* 16350 */ 22492, 28358, 36376, 34297, 22799, 50605, 28402, 22938, 23009, 38323, 38323, 38323, 38323, 38323, 38323,
  /* 16365 */ 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323,
  /* 16380 */ 38323, 38323, 38323, 38323, 25991, 38323, 38323, 38323, 38323, 20905, 38323, 38323, 38323, 38323, 19257,
  /* 16395 */ 38323, 38323, 38323, 38323, 44551, 49747, 27583, 26016, 30312, 38323, 38323, 26403, 38323, 38323, 26062,
  /* 16410 */ 38323, 38323, 38323, 38323, 26068, 38323, 38323, 50801, 35942, 46213, 27512, 29873, 45764, 50792, 38323,
  /* 16425 */ 36697, 38323, 26352, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 34353, 28210, 22701, 22701, 22701,
  /* 16440 */ 24170, 27407, 46215, 46215, 22586, 36217, 35586, 35586, 35586, 27529, 40524, 22426, 38323, 50817, 38323,
  /* 16455 */ 38323, 38323, 38323, 38323, 38323, 37774, 38323, 38323, 38164, 46082, 22701, 41503, 22701, 38170, 22585,
  /* 16470 */ 50836, 46215, 37879, 46215, 28695, 36395, 35586, 35586, 39900, 35586, 32887, 22488, 38323, 47254, 38323,
  /* 16485 */ 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38166, 22701, 50856, 22701, 22701, 30391, 50875, 30516,
  /* 16500 */ 50908, 46215, 46215, 22387, 49674, 39447, 50926, 35586, 35586, 27855, 41406, 38323, 38323, 38323, 38323,
  /* 16515 */ 38323, 38323, 18841, 36754, 22701, 22701, 47680, 22701, 28277, 22583, 46215, 46215, 50959, 46215, 50977,
  /* 16530 */ 35586, 35586, 50656, 35586, 43784, 41409, 38323, 38323, 26071, 38323, 38323, 28209, 22701, 22701, 22701,
  /* 16545 */ 37600, 46215, 46215, 46215, 37653, 35586, 35586, 35586, 27856, 48521, 38323, 38323, 21222, 38323, 33627,
  /* 16560 */ 22701, 22701, 22410, 46215, 46215, 40377, 35586, 35586, 40120, 38323, 38323, 51001, 38323, 38169, 28650,
  /* 16575 */ 28357, 46215, 51020, 36378, 34615, 27856, 22734, 41022, 38323, 38168, 42763, 46215, 28378, 35586, 22727,
  /* 16590 */ 36650, 38164, 28358, 28377, 30161, 36649, 38168, 46214, 35585, 28205, 42762, 27795, 22922, 28211, 40355,
  /* 16605 */ 36377, 22492, 28358, 36376, 34297, 22799, 50605, 28402, 22938, 23009, 38323, 38323, 38323, 38323, 38323,
  /* 16620 */ 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323,
  /* 16635 */ 38323, 38323, 38323, 38323, 38323, 25991, 38323, 38323, 38323, 38323, 20905, 38323, 38323, 38323, 38323,
  /* 16650 */ 19257, 39112, 38323, 38323, 38323, 44551, 49747, 27583, 26016, 38323, 38323, 38323, 26403, 38323, 38323,
  /* 16665 */ 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 28208, 22701, 46213, 35139, 35586, 34683, 26053,
  /* 16680 */ 38323, 38323, 38323, 26352, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 28210, 22701, 22701,
  /* 16695 */ 22701, 22701, 27407, 46215, 46215, 46215, 36217, 35586, 35586, 35586, 35586, 40524, 22426, 38323, 38323,
  /* 16710 */ 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38164, 22701, 22701, 22701, 22701, 38170,
  /* 16725 */ 22585, 46215, 46215, 46215, 46215, 28695, 35586, 35586, 35586, 35586, 35586, 32887, 22488, 38323, 38323,
  /* 16740 */ 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38166, 22701, 22701, 22701, 22701, 30391, 22584,
  /* 16755 */ 46215, 46215, 46215, 46215, 22387, 30159, 35586, 35586, 35586, 35586, 27855, 41406, 38323, 38323, 38323,
  /* 16770 */ 38323, 38323, 38323, 38323, 36754, 22701, 22701, 22701, 22701, 30392, 22583, 46215, 46215, 46215, 46215,
  /* 16785 */ 30151, 35586, 35586, 35586, 35586, 34371, 41409, 38323, 38323, 38323, 38323, 38323, 28209, 22701, 22701,
  /* 16800 */ 22701, 37600, 46215, 46215, 46215, 37653, 35586, 35586, 35586, 27856, 22734, 38323, 38323, 38323, 38323,
  /* 16815 */ 38164, 22701, 22701, 40356, 46215, 46215, 36375, 35586, 35586, 40120, 38323, 38323, 38323, 38323, 38169,
  /* 16830 */ 22701, 28357, 46215, 46215, 36378, 35586, 27856, 22734, 41022, 38323, 38168, 42763, 46215, 28378, 35586,
  /* 16845 */ 22727, 36650, 38164, 28358, 28377, 30161, 36649, 38168, 46214, 35585, 28205, 42762, 27795, 22922, 28211,
  /* 16860 */ 40355, 36377, 22492, 28358, 36376, 34297, 22799, 50605, 28402, 22938, 23009, 38323, 38323, 38323, 38323,
  /* 16875 */ 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323,
  /* 16890 */ 38323, 38323, 38323, 38323, 38323, 38323, 21073, 38323, 38323, 38323, 38323, 39962, 51045, 51043, 41171,
  /* 16905 */ 51038, 26211, 23137, 23139, 39974, 41172, 26198, 51061, 51073, 20949, 38323, 38323, 38323, 26403, 38323,
  /* 16920 */ 38323, 40803, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 26331, 20476, 19068, 20586, 20743, 18975,
  /* 16935 */ 25647, 18275, 46788, 18301, 18323, 38323, 38323, 18360, 38323, 32181, 21570, 18380, 18411, 18395, 18572,
  /* 16950 */ 19445, 18431, 20166, 51089, 25678, 18484, 18506, 19310, 18463, 25684, 18490, 18512, 20573, 18528, 38323,
  /* 16965 */ 49890, 38323, 38323, 38323, 43058, 23466, 43689, 38323, 18551, 44369, 18562, 20172, 24520, 20128, 20476,
  /* 16980 */ 23948, 18987, 19862, 18588, 18608, 18993, 18468, 18991, 19866, 18592, 18612, 19074, 25632, 25648, 38323,
  /* 16995 */ 18628, 18665, 18687, 42424, 18671, 18722, 38323, 30299, 46032, 18741, 18769, 19205, 18757, 19818, 25296,
  /* 17010 */ 18785, 18857, 18908, 18935, 19585, 18962, 18785, 18857, 18908, 18935, 19585, 19009, 25641, 33669, 19090,
  /* 17025 */ 19125, 20852, 47209, 19141, 42123, 19175, 20138, 20837, 19054, 19191, 19233, 19280, 25588, 19676, 19303,
  /* 17040 */ 18892, 19273, 25581, 19669, 19296, 18885, 19326, 19355, 44208, 19389, 35906, 19411, 28985, 19431, 19461,
  /* 17055 */ 19039, 19540, 19571, 19603, 19621, 19639, 19555, 19601, 19619, 19637, 19655, 19926, 19692, 19708, 19724,
  /* 17070 */ 19749, 19771, 19808, 19475, 19489, 19883, 19900, 19834, 19882, 19899, 19916, 19942, 19979, 20016, 20047,
  /* 17085 */ 20116, 20154, 19786, 20188, 20210, 19792, 20194, 20216, 20504, 20232, 43219, 20261, 20277, 20306, 20293,
  /* 17100 */ 20309, 20325, 20341, 20357, 24531, 20712, 20401, 20440, 20474, 20742, 20743, 19024, 20492, 20520, 20547,
  /* 17115 */ 20636, 23957, 18813, 20667, 20683, 20699, 20728, 20759, 20796, 20806, 20822, 19503, 38323, 38323, 38323,
  /* 17130 */ 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323,
  /* 17145 */ 38323, 38323, 38323, 38323, 38323, 38323, 38323, 21073, 38323, 38323, 38323, 38323, 49383, 38323, 38323,
  /* 17160 */ 26890, 38323, 19257, 50352, 50360, 51114, 51128, 51136, 26037, 51160, 20949, 38323, 38323, 38323, 26403,
  /* 17175 */ 38323, 38323, 51374, 38323, 38323, 38323, 25468, 38323, 38323, 25465, 26331, 20476, 20741, 20610, 20743,
  /* 17190 */ 18872, 25647, 18275, 46788, 18301, 18323, 38323, 38323, 18360, 38323, 32181, 21570, 18380, 18411, 18395,
  /* 17205 */ 18572, 19445, 18431, 20166, 18457, 25678, 18484, 18506, 18946, 18463, 25684, 18490, 18512, 20573, 18528,
  /* 17220 */ 38323, 49890, 38323, 38323, 38323, 43058, 23466, 43689, 38323, 18551, 44369, 18562, 20172, 24520, 20128,
  /* 17235 */ 20476, 23948, 18987, 19862, 18588, 18608, 18993, 18468, 18991, 19866, 18592, 18612, 19074, 25632, 25648,
  /* 17250 */ 38323, 18628, 18665, 18687, 42424, 18671, 18722, 38323, 30299, 46032, 18741, 18769, 19205, 18757, 19818,
  /* 17265 */ 25296, 18785, 18857, 18908, 18935, 19585, 18962, 18785, 18857, 18908, 18935, 19585, 19009, 25641, 33669,
  /* 17280 */ 19090, 19125, 20852, 47209, 19141, 42123, 19175, 20138, 20837, 19054, 19191, 19233, 19280, 25588, 19676,
  /* 17295 */ 19303, 18892, 19273, 25581, 19669, 19296, 18885, 19326, 19355, 44208, 19389, 35906, 19411, 28985, 19431,
  /* 17310 */ 19461, 19039, 19540, 19571, 19603, 19621, 19639, 19555, 19601, 19619, 19637, 19655, 19926, 19692, 19708,
  /* 17325 */ 19724, 19749, 19771, 19808, 19475, 19489, 19883, 19900, 19834, 19882, 19899, 19916, 19942, 19979, 20016,
  /* 17340 */ 20047, 20116, 20154, 19786, 20188, 20210, 19792, 20194, 20216, 20504, 20232, 43219, 20261, 20277, 20306,
  /* 17355 */ 20293, 20309, 20325, 20341, 20357, 24531, 20712, 20401, 20440, 20474, 20742, 20743, 19024, 20492, 20520,
  /* 17370 */ 20547, 20636, 23957, 18813, 20667, 20683, 20699, 20728, 20759, 20796, 20806, 20822, 19503, 38323, 38323,
  /* 17385 */ 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323,
  /* 17400 */ 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 21073, 38323, 38323, 38323, 38323, 41434, 38323,
  /* 17415 */ 38323, 38323, 38323, 27632, 31058, 51203, 51237, 51242, 51213, 21303, 51258, 20949, 38323, 38323, 38323,
  /* 17430 */ 26403, 38323, 38323, 39635, 38323, 38323, 26000, 38323, 38323, 38323, 25996, 26331, 20476, 20741, 20610,
  /* 17445 */ 20743, 18975, 25647, 18275, 46788, 18301, 18323, 38323, 38323, 18360, 38323, 32181, 21570, 18380, 18411,
  /* 17460 */ 18395, 18572, 19445, 18431, 20166, 51300, 25678, 18484, 18506, 18919, 18463, 25684, 18490, 18512, 20573,
  /* 17475 */ 18528, 38323, 49890, 38323, 38323, 38323, 43058, 23466, 43689, 38323, 18551, 44369, 18562, 20172, 24520,
  /* 17490 */ 20128, 20476, 23948, 18987, 19862, 18588, 18608, 18993, 18468, 18991, 19866, 18592, 18612, 19074, 25632,
  /* 17505 */ 25648, 38323, 18628, 18665, 18687, 42424, 18671, 18722, 38323, 30299, 46032, 18741, 18769, 19205, 18757,
  /* 17520 */ 19818, 25296, 18785, 18857, 18908, 18935, 19585, 18962, 18785, 18857, 18908, 18935, 19585, 19009, 25641,
  /* 17535 */ 33669, 19090, 19125, 20852, 47209, 19141, 42123, 19175, 20138, 20837, 19054, 19191, 19233, 19280, 25588,
  /* 17550 */ 19676, 19303, 18892, 19273, 25581, 19669, 19296, 18885, 19326, 19355, 44208, 19389, 35906, 19411, 28985,
  /* 17565 */ 19431, 19461, 19039, 19540, 19571, 19603, 19621, 19639, 19555, 19601, 19619, 19637, 19655, 19926, 19692,
  /* 17580 */ 19708, 19724, 19749, 19771, 19808, 19475, 19489, 19883, 19900, 19834, 19882, 19899, 19916, 19942, 19979,
  /* 17595 */ 20016, 20047, 20116, 20154, 19786, 20188, 20210, 19792, 20194, 20216, 20504, 20232, 43219, 20261, 20277,
  /* 17610 */ 20306, 20293, 20309, 20325, 20341, 20357, 24531, 20712, 20401, 20440, 20474, 20742, 20743, 19024, 20492,
  /* 17625 */ 20520, 20547, 20636, 23957, 18813, 20667, 20683, 20699, 20728, 20759, 20796, 20806, 20822, 19503, 38323,
  /* 17640 */ 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323,
  /* 17655 */ 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 21073, 38323, 38323, 38323, 38323, 49383,
  /* 17670 */ 38323, 38323, 38323, 38323, 19257, 38323, 38323, 38323, 38323, 38323, 38323, 29037, 26016, 38323, 38323,
  /* 17685 */ 38323, 26403, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 28208, 22701, 46213,
  /* 17700 */ 35139, 35586, 34683, 22325, 38323, 38323, 38323, 26352, 38323, 38323, 38323, 38323, 38323, 38323, 38323,
  /* 17715 */ 38323, 28210, 22701, 22701, 22701, 22701, 22385, 46215, 46215, 46215, 39549, 35586, 35586, 35586, 35586,
  /* 17730 */ 40524, 22426, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38164, 22701,
  /* 17745 */ 22701, 22701, 22701, 38170, 22585, 46215, 46215, 46215, 46215, 28695, 35586, 35586, 35586, 35586, 35586,
  /* 17760 */ 32887, 22488, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38166, 22701, 22701,
  /* 17775 */ 22701, 22701, 30391, 22584, 46215, 46215, 46215, 46215, 22387, 30159, 35586, 35586, 35586, 35586, 27855,
  /* 17790 */ 41406, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 36754, 22701, 22701, 22701, 22701, 30392, 22583,
  /* 17805 */ 46215, 46215, 46215, 46215, 30151, 35586, 35586, 35586, 35586, 34371, 41409, 38323, 38323, 38323, 38323,
  /* 17820 */ 38323, 28209, 22701, 22701, 22701, 37600, 46215, 46215, 46215, 37653, 35586, 35586, 35586, 27856, 22734,
  /* 17835 */ 38323, 38323, 38323, 38323, 38164, 22701, 22701, 40356, 46215, 46215, 36375, 35586, 35586, 40120, 38323,
  /* 17850 */ 38323, 38323, 38323, 38169, 22701, 28357, 46215, 46215, 36378, 35586, 27856, 22734, 41022, 38323, 38168,
  /* 17865 */ 42763, 46215, 28378, 35586, 22727, 36650, 38164, 28358, 28377, 30161, 36649, 38168, 46214, 35585, 28205,
  /* 17880 */ 42762, 27795, 22922, 28211, 40355, 36377, 22492, 28358, 36376, 34297, 22799, 50605, 28402, 22938, 23009,
  /* 17895 */ 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323,
  /* 17910 */ 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323,
  /* 17925 */ 38323, 38323, 38323, 26701, 38323, 38323, 32569, 51325, 51329, 51329, 51351, 26700, 51345, 51367, 38323,
  /* 17940 */ 38323, 38323, 38323, 38323, 38323, 51374, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 26331, 20476,
  /* 17955 */ 20741, 20610, 20743, 18975, 25647, 18275, 46788, 18301, 51396, 38323, 38323, 18360, 38323, 32181, 21570,
  /* 17970 */ 18380, 18411, 18395, 18572, 19445, 18431, 20166, 51089, 25678, 18484, 18506, 19310, 18463, 25684, 18490,
  /* 17985 */ 18512, 20573, 18528, 38323, 49890, 38323, 38323, 38323, 43058, 23466, 43689, 38323, 18551, 44369, 18562,
  /* 18000 */ 20172, 24520, 20128, 20476, 23948, 18987, 19862, 18588, 18608, 18993, 18468, 18991, 19866, 18592, 18612,
  /* 18015 */ 19074, 25632, 25648, 38323, 18628, 18665, 18687, 42424, 18671, 18722, 38323, 30299, 46032, 18741, 18769,
  /* 18030 */ 19205, 18757, 19818, 25296, 18785, 18857, 18908, 18935, 19585, 18962, 18785, 18857, 18908, 18935, 19585,
  /* 18045 */ 19009, 25641, 33669, 19090, 19125, 20852, 47209, 19141, 42123, 19175, 20138, 20837, 19054, 19191, 19233,
  /* 18060 */ 19280, 25588, 19676, 19303, 18892, 19273, 25581, 19669, 19296, 18885, 19326, 19355, 44208, 19389, 35906,
  /* 18075 */ 19411, 28985, 19431, 19461, 19039, 19540, 19571, 19603, 19621, 19639, 19555, 19601, 19619, 19637, 19655,
  /* 18090 */ 19926, 19692, 19708, 19724, 19749, 19771, 19808, 19475, 19489, 19883, 19900, 19834, 19882, 19899, 19916,
  /* 18105 */ 19942, 19979, 20016, 20047, 20116, 20154, 19786, 20188, 20210, 19792, 20194, 20216, 20504, 51416, 43219,
  /* 18120 */ 20261, 20277, 20306, 20293, 20309, 20325, 51465, 20357, 24531, 20712, 20401, 20416, 20474, 20742, 20743,
  /* 18135 */ 19024, 20492, 20520, 20547, 20636, 23957, 18813, 20667, 20683, 20699, 20728, 20759, 20796, 20806, 20822,
  /* 18150 */ 19503, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323,
  /* 18165 */ 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 38323, 94505, 94505, 90408, 90408,
  /* 18180 */ 94505, 94505, 94505, 94505, 94505, 94505, 94505, 94505, 94505, 94505, 94505, 94505, 94505, 94505, 94505,
  /* 18195 */ 94505, 1, 12290, 94505, 94505, 94505, 94505, 94505, 94505, 94505, 94505, 94505, 0, 94505, 90408, 94505,
  /* 18211 */ 94505, 94505, 94505, 94505, 94505, 94505, 94505, 94505, 364, 94505, 90408, 94505, 94505, 94505, 94505,
  /* 18226 */ 94505, 94505, 94505, 69632, 73728, 94505, 94505, 94505, 94505, 94505, 65536, 94505, 3, 0, 0, 2183168, 0,
  /* 18243 */ 0, 0, 90408, 94505, 298, 299, 0, 2134016, 302, 303, 0, 0, 0, 0, 0, 1097, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 18269 */ 541, 1272, 541, 541, 541, 541, 0, 0, 2424832, 2433024, 0, 0, 2457600, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 758,
  /* 18293 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2904064, 2908160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2807, 541, 541,
  /* 18321 */ 541, 541, 0, 0, 0, 3117056, 0, 0, 0, 0, 0, 0, 0, 364, 364, 0, 0, 0, 0, 0, 0, 541, 3027, 541, 541, 541,
  /* 18347 */ 541, 541, 541, 541, 541, 541, 2584, 541, 541, 541, 0, 0, 0, 0, 0, 0, 2138112, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 18373 */ 0, 0, 0, 0, 2991, 0, 0, 0, 2772992, 2805760, 2830336, 0, 2863104, 2920448, 0, 0, 0, 0, 0, 0, 0, 2805760,
  /* 18395 */ 2920448, 0, 0, 0, 0, 0, 0, 0, 2732032, 0, 2179072, 2179072, 2179072, 2179072, 2424832, 2433024, 0, 0, 0,
  /* 18414 */ 2920448, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3003, 0, 0, 2179072, 2830336, 2179072, 2179072, 2863104,
  /* 18436 */ 2179072, 2179072, 2179072, 2179072, 2920448, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072,
  /* 18447 */ 2126737, 2126737, 2126737, 2126737, 2126737, 2593681, 2126737, 2126737, 2126737, 2126737, 0, 914, 2125824,
  /* 18460 */ 2125824, 2125824, 2125824, 2125824, 2424832, 2433024, 2125824, 2125824, 2125824, 2125824, 2125824,
  /* 18471 */ 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 0, 0, 2125824, 2125824, 2125824,
  /* 18484 */ 2125824, 2723840, 2125824, 2732032, 2772992, 2125824, 2125824, 2125824, 2805760, 2125824, 2830336,
  /* 18495 */ 2125824, 2125824, 2863104, 2125824, 2125824, 2125824, 2125824, 2920448, 2125824, 2125824, 2125824,
  /* 18506 */ 2125824, 2125824, 2920448, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824,
  /* 18517 */ 2125824, 2125824, 2125824, 3117056, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824,
  /* 18528 */ 2125824, 2457600, 2125824, 2125824, 2125824, 2125824, 2183168, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1102, 0, 0,
  /* 18548 */ 0, 0, 0, 2408448, 0, 0, 2584576, 0, 0, 0, 0, 2838528, 0, 0, 2838528, 0, 0, 0, 0, 0, 2179072, 2179072,
  /* 18570 */ 2179072, 2408448, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072,
  /* 18581 */ 2179072, 2179072, 2179072, 2179072, 2625536, 2179072, 2179072, 2125824, 2125824, 2125824, 2125824,
  /* 18592 */ 2125824, 2125824, 2662400, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824,
  /* 18603 */ 2125824, 2125824, 2125824, 2801664, 2813952, 2125824, 2125824, 2801664, 2813952, 2125824, 2838528,
  /* 18614 */ 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824,
  /* 18625 */ 2125824, 2125824, 2125824, 2461696, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2600960, 0, 0, 0, 0, 0, 0, 2997,
  /* 18649 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1236, 0, 0, 0, 0, 0, 2768896, 2777088, 2781184, 0, 2822144, 0, 0, 2883584,
  /* 18673 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3055616, 0, 0, 0, 3080192, 3100672, 3104768, 0, 0, 0, 0, 3186688, 0,
  /* 18698 */ 0, 0, 0, 0, 0, 0, 680, 681, 0, 0, 0, 0, 0, 0, 0, 302, 302, 302, 302, 0, 302, 302, 302, 302, 0, 0, 3133440,
  /* 18725 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2155, 0, 0, 0, 0, 0, 2179072, 2179072, 2179072, 2179072,
  /* 18749 */ 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2461696, 2465792, 2179072, 2768896, 2777088,
  /* 18760 */ 2781184, 2797568, 2822144, 2179072, 2179072, 2179072, 2883584, 2179072, 2912256, 2179072, 2179072,
  /* 18771 */ 2179072, 2179072, 2179072, 2179072, 2523136, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072,
  /* 18782 */ 2179072, 2179072, 2600960, 0, 0, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824,
  /* 18795 */ 2125824, 2125824, 2125824, 2461696, 2465792, 2125824, 0, 0, 0, 2179072, 2125824, 2125824, 2179072,
  /* 18808 */ 2179072, 2179072, 2179072, 2179072, 241664, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824,
  /* 18820 */ 2125824, 2125824, 2592768, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 0, 0, 180224, 0,
  /* 18834 */ 0, 0, 0, 0, 0, 0, 772, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2507, 0, 0, 0, 0, 0, 0, 2125824, 2125824, 2125824,
  /* 18860 */ 2125824, 2125824, 2523136, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824,
  /* 18871 */ 2600960, 2125824, 0, 1142784, 0, 2179072, 2125824, 2125824, 2179072, 2179072, 2179072, 2179072, 2179072,
  /* 18884 */ 0, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 3035136, 2125824, 2125824, 3072000,
  /* 18896 */ 2125824, 2125824, 2125824, 3121152, 2125824, 2125824, 3141632, 2125824, 2125824, 2125824, 3170304,
  /* 18907 */ 2125824, 2125824, 2125824, 2125824, 2641920, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824,
  /* 18918 */ 2719744, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 0, 0, 987,
  /* 18931 */ 2125824, 2125824, 2125824, 2125824, 2768896, 2777088, 2781184, 2797568, 2822144, 2125824, 2125824,
  /* 18942 */ 2125824, 2883584, 2125824, 2912256, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824,
  /* 18953 */ 2125824, 2125824, 0, 0, 988, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 3133440, 2125824,
  /* 18966 */ 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 3207168, 2125824, 0, 0, 0,
  /* 18979 */ 2179072, 2125824, 2125824, 2179072, 2179072, 2179072, 2179072, 2179072, 0, 2125824, 2125824, 2125824,
  /* 18991 */ 2408448, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824,
  /* 19002 */ 2125824, 2125824, 2125824, 2125824, 2125824, 3125248, 2125824, 2125824, 2125824, 3133440, 2125824,
  /* 19013 */ 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 3207168, 2125824, 2179072,
  /* 19024 */ 2125824, 0, 2502656, 0, 0, 3010560, 0, 0, 0, 0, 0, 0, 0, 0, 2990080, 2179072, 2179072, 2179072, 2637824,
  /* 19043 */ 2179072, 2179072, 2179072, 2179072, 2727936, 2752512, 2179072, 2179072, 2179072, 2842624, 2846720,
  /* 19054 */ 2179072, 2179072, 2179072, 2707456, 2179072, 2736128, 2179072, 2179072, 2179072, 2179072, 2179072,
  /* 19065 */ 2179072, 2179072, 2887680, 2179072, 2179072, 2125824, 2126738, 2125824, 2125824, 2125824, 2125824,
  /* 19076 */ 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 3125248, 2125824, 2125824,
  /* 19087 */ 2125824, 2125824, 2125824, 0, 0, 0, 2605056, 0, 0, 0, 0, 2887680, 0, 2924544, 0, 0, 0, 0, 0, 0, 0, 2505,
  /* 19109 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 1662, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3162112, 3170304, 0, 0, 3219456, 3035136,
  /* 19135 */ 0, 0, 0, 0, 0, 3072000, 3190784, 0, 0, 0, 0, 0, 0, 0, 0, 2576384, 0, 0, 0, 0, 0, 0, 0, 710, 0, 0, 0, 0, 0,
  /* 19164 */ 0, 0, 0, 0, 2140, 2141, 0, 0, 2143, 0, 0, 3121152, 3141632, 0, 0, 0, 2924544, 0, 2682880, 0, 0, 0, 0, 0,
  /* 19188 */ 0, 3112960, 2387968, 2924544, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072,
  /* 19200 */ 2179072, 3035136, 2179072, 2179072, 3072000, 2179072, 2179072, 2179072, 2179072, 2641920, 2179072,
  /* 19211 */ 2179072, 2179072, 2179072, 2179072, 2179072, 2719744, 2179072, 2179072, 2179072, 2179072, 2179072,
  /* 19222 */ 2179072, 2179072, 3137536, 2126737, 2126737, 2499473, 2126737, 2126737, 2126737, 2556817, 2565009,
  /* 19233 */ 3121152, 2179072, 2179072, 3141632, 2179072, 2179072, 2179072, 3170304, 2179072, 2179072, 3190784,
  /* 19244 */ 3194880, 2179072, 0, 0, 0, 0, 0, 0, 663, 0, 0, 666, 667, 0, 0, 0, 0, 0, 0, 0, 69632, 73728, 0, 0, 0, 0, 0,
  /* 19271 */ 65536, 0, 2125824, 3190784, 3194880, 2125824, 0, 0, 0, 0, 0, 0, 2387968, 2125824, 2125824, 2125824,
  /* 19287 */ 2420736, 2125824, 2125824, 2125824, 2125824, 2125824, 2453504, 2125824, 2473984, 2125824, 2736128,
  /* 19298 */ 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2887680, 2125824, 2125824,
  /* 19309 */ 2924544, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 0, 0, 0,
  /* 19322 */ 2125824, 2125824, 2125824, 2125824, 2125824, 3141632, 2125824, 2125824, 2125824, 3170304, 2125824,
  /* 19333 */ 2125824, 3190784, 3194880, 2125824, 2179072, 2125824, 2125824, 2179072, 2179072, 2179072, 2179072,
  /* 19344 */ 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 298, 0, 299, 3112960, 3219456,
  /* 19357 */ 2125824, 2125824, 3112960, 3219456, 2125824, 2125824, 3112960, 3219456, 0, 0, 0, 0, 0, 0, 0, 726, 0, 0, 0,
  /* 19376 */ 0, 0, 0, 0, 0, 0, 813, 0, 0, 0, 0, 0, 0, 3022848, 0, 0, 3145728, 0, 3203072, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 19405 */ 0, 3176, 0, 0, 0, 0, 0, 0, 0, 3067904, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3188, 0, 0, 0, 0, 0,
  /* 19434 */ 2621440, 0, 3182592, 2899968, 0, 2961408, 0, 0, 2179072, 2179072, 2416640, 2179072, 2179072, 2179072,
  /* 19448 */ 2179072, 2699264, 2179072, 2715648, 2179072, 2723840, 2179072, 2732032, 2772992, 2179072, 2179072,
  /* 19459 */ 2179072, 2805760, 2179072, 2445312, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072,
  /* 19470 */ 2179072, 2179072, 2179072, 2179072, 2551808, 2179072, 2179072, 2179072, 2179072, 2928640, 2179072,
  /* 19481 */ 2179072, 2179072, 2998272, 2179072, 2179072, 2179072, 2179072, 3059712, 2179072, 2179072, 2179072,
  /* 19492 */ 2179072, 3178496, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2494464,
  /* 19503 */ 2125824, 2125824, 0, 2179072, 2125824, 2125824, 0, 2179072, 2125824, 2125824, 2985984, 2985984, 2985984,
  /* 19516 */ 2985984, 0, 0, 0, 0, 0, 0, 3026, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 1352, 541, 541, 541,
  /* 19538 */ 541, 541, 2895872, 2916352, 2179072, 2179072, 2945024, 2179072, 2179072, 2994176, 2179072, 3002368,
  /* 19550 */ 2179072, 2179072, 3022848, 2179072, 3067904, 3084288, 2125824, 3096576, 2125824, 2125824, 2125824,
  /* 19561 */ 2125824, 2125824, 2125824, 2125824, 3223552, 0, 0, 2125824, 2125824, 2416640, 3096576, 2179072, 2179072,
  /* 19574 */ 2179072, 2179072, 2179072, 2179072, 2179072, 3223552, 0, 0, 2125824, 2125824, 2416640, 2125824, 2125824,
  /* 19587 */ 2125824, 2125824, 2125824, 2125824, 2125824, 3039232, 2125824, 3063808, 2125824, 2125824, 2125824,
  /* 19598 */ 2125824, 2125824, 3100672, 2125824, 2125824, 2125824, 2445312, 2125824, 2125824, 2125824, 2125824,
  /* 19609 */ 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2551808, 2125824, 2125824, 2125824,
  /* 19620 */ 2125824, 2125824, 2125824, 2125824, 2637824, 2125824, 2125824, 2125824, 2125824, 2727936, 2752512,
  /* 19631 */ 2125824, 2125824, 2125824, 2125824, 2842624, 2846720, 2842624, 2846720, 2125824, 2895872, 2916352,
  /* 19642 */ 2125824, 2125824, 2945024, 2125824, 2125824, 2994176, 2125824, 3002368, 2125824, 2125824, 3022848,
  /* 19653 */ 2125824, 3067904, 2125824, 3067904, 3084288, 2125824, 3096576, 2125824, 2125824, 2125824, 2125824,
  /* 19664 */ 2125824, 2125824, 2125824, 3223552, 2179072, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824,
  /* 19675 */ 2605056, 2125824, 2629632, 2125824, 2125824, 2650112, 2125824, 2125824, 2125824, 2707456, 2125824,
  /* 19686 */ 2736128, 2125824, 2125824, 2125824, 2125824, 2125824, 2547712, 2596864, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 19705 */ 0, 0, 3178496, 2670592, 0, 2744320, 0, 0, 0, 0, 0, 2928640, 0, 0, 0, 3059712, 0, 2543616, 2666496, 0,
  /* 19725 */ 2633728, 0, 0, 0, 0, 0, 0, 2494464, 0, 0, 0, 0, 0, 0, 0, 0, 560, 583, 560, 583, 560, 560, 583, 560, 0, 0,
  /* 19751 */ 0, 2957312, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 249856, 0, 0, 0, 0, 0, 0, 3211264, 0, 0, 0, 2179072,
  /* 19778 */ 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2494464, 2179072, 2179072, 2179072,
  /* 19789 */ 3129344, 2179072, 2179072, 3153920, 3166208, 3174400, 2396160, 2400256, 2125824, 2125824, 2441216,
  /* 19800 */ 2125824, 2469888, 2125824, 2125824, 2125824, 2519040, 2125824, 2125824, 2179072, 2514944, 2179072,
  /* 19811 */ 2179072, 2179072, 2543616, 2547712, 2179072, 2179072, 2596864, 2179072, 2179072, 2179072, 2179072,
  /* 19822 */ 2179072, 2179072, 2179072, 2179072, 3039232, 2179072, 3063808, 2179072, 2179072, 2179072, 2179072,
  /* 19833 */ 3100672, 2125824, 2125824, 2125824, 2125824, 2125824, 3178496, 2125824, 2125824, 2125824, 2125824,
  /* 19844 */ 2125824, 2125824, 2125824, 2125824, 2494464, 2125824, 1060, 0, 0, 2179072, 2125824, 2125824, 2179072,
  /* 19857 */ 2179072, 2179072, 2179072, 2179072, 1060, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824,
  /* 19869 */ 2125824, 2125824, 2584576, 2125824, 2125824, 2125824, 2125824, 2125824, 2617344, 2125824, 2125824,
  /* 19880 */ 2125824, 2125824, 2125824, 2514944, 2125824, 2125824, 2125824, 2543616, 2547712, 2125824, 2125824,
  /* 19891 */ 2596864, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824,
  /* 19902 */ 2125824, 2125824, 2928640, 2125824, 2125824, 2125824, 2998272, 2125824, 2125824, 2125824, 2125824,
  /* 19913 */ 3059712, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 3178496, 2179072,
  /* 19924 */ 2125824, 2125824, 2179072, 2179072, 2125824, 2125824, 2125824, 2125824, 0, 0, 0, 0, 0, 0, 2510848,
  /* 19939 */ 2514944, 0, 0, 2441216, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2932736, 2965504, 0, 0, 3076096, 0, 0, 0, 0, 0, 1192,
  /* 19963 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 330, 381, 383, 0, 0, 0, 0, 2695168, 3174400, 2646016, 2613248, 2703360, 0,
  /* 19986 */ 0, 0, 0, 2977792, 0, 0, 3047424, 3129344, 0, 0, 0, 0, 0, 1202, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 111050, 0,
  /* 20013 */ 0, 0, 0, 2981888, 2396160, 0, 3153920, 0, 0, 0, 0, 0, 0, 0, 0, 2740224, 0, 0, 0, 0, 0, 0, 679, 0, 0, 0, 0,
  /* 20040 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 2793472, 0, 0, 0, 0, 0, 2469888, 2506752, 2756608, 0, 0, 2580480, 0, 0, 0, 0,
  /* 20065 */ 0, 0, 3164, 0, 0, 3167, 0, 0, 0, 0, 0, 0, 0, 1682, 0, 1684, 0, 0, 0, 0, 0, 0, 0, 1583, 0, 1585, 0, 0, 0,
  /* 20094 */ 0, 0, 0, 0, 1660, 1661, 0, 0, 0, 0, 0, 0, 0, 0, 3180, 0, 3388, 0, 0, 0, 0, 0, 0, 2396160, 2400256,
  /* 20119 */ 2179072, 2179072, 2441216, 2179072, 2469888, 2179072, 2179072, 2179072, 2519040, 2179072, 2179072,
  /* 20130 */ 2179072, 2179072, 2179072, 2179072, 2801664, 2813952, 2179072, 2838528, 2179072, 2179072, 2179072,
  /* 20141 */ 2179072, 2179072, 2179072, 2179072, 2179072, 2453504, 2179072, 2473984, 2482176, 2179072, 2179072,
  /* 20152 */ 2179072, 2179072, 2588672, 2179072, 2613248, 2646016, 2179072, 2179072, 2695168, 2756608, 2179072,
  /* 20163 */ 2179072, 2179072, 2932736, 2179072, 2179072, 2179072, 2179072, 2179072, 3117056, 2179072, 2179072,
  /* 20174 */ 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072,
  /* 20185 */ 2584576, 2179072, 2179072, 2125824, 2125824, 2125824, 2519040, 2125824, 2125824, 2125824, 2125824,
  /* 20196 */ 2588672, 2125824, 2613248, 2646016, 2125824, 2125824, 2695168, 2756608, 2125824, 2125824, 2125824,
  /* 20207 */ 2125824, 2932736, 2125824, 2125824, 2125824, 2125824, 2125824, 2932736, 2125824, 2125824, 2125824,
  /* 20218 */ 2125824, 2125824, 2125824, 2125824, 2125824, 3129344, 2125824, 2125824, 3153920, 3166208, 3174400,
  /* 20229 */ 2506752, 2506752, 2506752, 0, 3108864, 3198976, 0, 0, 3043328, 0, 3149824, 2936832, 0, 2760704, 3180,
  /* 20244 */ 2437120, 0, 0, 0, 0, 0, 0, 695, 0, 0, 0, 0, 364, 364, 364, 0, 0, 0, 3051520, 2179072, 2428928, 2437120,
  /* 20266 */ 2179072, 2486272, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2654208,
  /* 20277 */ 2678784, 2760704, 2764800, 2854912, 2969600, 2179072, 3006464, 2179072, 3018752, 2179072, 2179072,
  /* 20288 */ 2179072, 3149824, 2125824, 2428928, 2437120, 2969600, 2125824, 3006464, 2125824, 3018752, 2125824,
  /* 20299 */ 2125824, 2125824, 2125824, 3149824, 2125824, 2428928, 2437120, 2125824, 2486272, 2125824, 2125824,
  /* 20310 */ 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2654208, 2678784, 2760704, 2764800, 2785280,
  /* 20321 */ 2854912, 2969600, 2125824, 3006464, 2125824, 3018752, 2125824, 2125824, 2125824, 2125824, 3149824,
  /* 20332 */ 2179072, 3051520, 2125824, 3051520, 2125824, 3051520, 0, 2490368, 2498560, 0, 0, 0, 0, 2875392, 0, 0, 0,
  /* 20349 */ 3180, 0, 0, 0, 0, 0, 0, 2834432, 0, 3227648, 2568192, 2564096, 0, 2940928, 2179072, 2179072, 2498560,
  /* 20366 */ 2179072, 2179072, 2179072, 2555904, 2564096, 2179072, 2179072, 2179072, 2179072, 3178496, 2126737,
  /* 20377 */ 2126737, 2126737, 2126737, 2126737, 2126737, 2126737, 2126737, 2495377, 2126737, 2126737, 2126737,
  /* 20388 */ 2126737, 2126737, 3179409, 2126811, 2126811, 2126811, 2126811, 2126811, 2126811, 2126811, 2126811,
  /* 20399 */ 2495451, 2126811, 2125824, 2555904, 2564096, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824,
  /* 20410 */ 2125824, 2125824, 2125824, 2125824, 3137536, 2940928, 2940928, 0, 0, 0, 0, 0, 2748416, 2879488, 0, 0, 0,
  /* 20427 */ 0, 0, 0, 0, 0, 541, 564, 541, 564, 541, 541, 564, 541, 2940928, 0, 0, 0, 0, 0, 2748416, 2879488, 0, 3180,
  /* 20450 */ 0, 0, 0, 0, 0, 0, 0, 755, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3014, 0, 0, 0, 0, 0, 0, 0, 0, 2179072, 2179072,
  /* 20478 */ 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072,
  /* 20489 */ 2179072, 2179072, 2179072, 2179072, 2502656, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072,
  /* 20500 */ 2179072, 2179072, 2179072, 3010560, 2179072, 2179072, 2125824, 2125824, 2125824, 2125824, 0, 2486272, 0,
  /* 20513 */ 0, 0, 0, 0, 2678784, 2854912, 3006464, 2502656, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824,
  /* 20527 */ 2125824, 2125824, 2125824, 3010560, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824,
  /* 20538 */ 2125824, 2125824, 0, 0, 1453, 2125824, 2125824, 2125824, 2125824, 2502656, 2125824, 2125824, 2125824,
  /* 20551 */ 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 3010560, 2125824, 2125824, 2125824, 0, 0, 0,
  /* 20564 */ 2179072, 2125824, 2125824, 2179072, 2179072, 2179072, 2179072, 2179072, 237568, 2125824, 2125824, 2125824,
  /* 20576 */ 0, 2179072, 2125824, 2125824, 2457600, 2179072, 2179072, 2179072, 2179072, 2457600, 2125824, 2125824,
  /* 20588 */ 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 0, 2125824, 2126812, 2125824, 2125824,
  /* 20600 */ 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 0, 24576, 988, 2125824, 2125824, 2125824,
  /* 20613 */ 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 0, 2125824, 2125824, 2125824, 2125824, 2125824,
  /* 20625 */ 2125824, 298, 0, 0, 0, 298, 0, 299, 0, 0, 0, 0, 0, 2592768, 0, 0, 0, 0, 0, 0, 2179072, 2179072, 2179072,
  /* 20648 */ 2179072, 2179072, 2592768, 2179072, 2179072, 2179072, 3129344, 2179072, 2179072, 3153920, 3166208,
  /* 20659 */ 3174400, 2397073, 2401169, 2126737, 2126737, 2442129, 2126737, 2470801, 2125824, 2125824, 2449408, 0,
  /* 20671 */ 2535424, 3031040, 2859008, 0, 0, 0, 0, 0, 2179072, 2449408, 2179072, 2535424, 2179072, 2609152, 2179072,
  /* 20686 */ 2859008, 2179072, 2179072, 2179072, 3031040, 2125824, 2449408, 2125824, 2535424, 2125824, 2609152,
  /* 20697 */ 2125824, 2859008, 2125824, 2125824, 2125824, 3031040, 2125824, 2125824, 2449408, 2125824, 2535424,
  /* 20708 */ 2125824, 2609152, 2125824, 2859008, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824,
  /* 20719 */ 2125824, 2125824, 2125824, 3137536, 2125824, 2125824, 2498560, 2125824, 2125824, 3031040, 2125824,
  /* 20730 */ 2527232, 0, 0, 0, 0, 0, 2179072, 2527232, 2179072, 2179072, 2179072, 2179072, 2179072, 2125824, 2125824,
  /* 20745 */ 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824,
  /* 20756 */ 2125824, 2125824, 2125824, 2527232, 2125824, 2125824, 2125824, 2125824, 2125824, 3092480, 2125824,
  /* 20767 */ 2527232, 2125824, 2125824, 2125824, 2125824, 2125824, 3092480, 0, 0, 0, 0, 0, 1231, 0, 0, 0, 0, 0, 0, 0,
  /* 20787 */ 0, 0, 0, 0, 3316, 0, 0, 0, 0, 3026944, 0, 0, 0, 2404352, 2179072, 2179072, 2179072, 2179072, 3026944,
  /* 20806 */ 2404352, 2125824, 2125824, 2125824, 2125824, 3026944, 0, 2539520, 0, 2949120, 2179072, 2658304, 2973696,
  /* 20819 */ 2179072, 2125824, 2658304, 2973696, 2125824, 2125824, 2658304, 2973696, 2125824, 0, 2711552, 2560000,
  /* 20831 */ 2179072, 2560000, 2125824, 2560000, 2125824, 0, 2179072, 2179072, 2531328, 2179072, 2179072, 2179072,
  /* 20843 */ 2179072, 2179072, 2179072, 2179072, 2605056, 2179072, 2629632, 2179072, 2179072, 2650112, 0, 0, 2809856,
  /* 20856 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3088384, 0, 0, 0, 0, 0, 1185, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 245760, 0, 0,
  /* 20887 */ 0, 0, 111050, 111050, 111050, 111050, 111050, 111050, 111050, 111050, 111050, 111050, 111050, 111050,
  /* 20901 */ 111050, 111050, 111050, 111050, 0, 0, 0, 0, 0, 0, 0, 0, 0, 364, 0, 292, 0, 0, 0, 0, 111050, 111050,
  /* 20923 */ 111050, 458, 111050, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 458, 111050, 111050, 111050,
  /* 20940 */ 111050, 111050, 111050, 458, 111050, 111050, 111050, 111050, 458, 3, 0, 0, 2183168, 0, 0, 0, 0, 0, 298,
  /* 20959 */ 299, 0, 2134016, 302, 303, 0, 0, 0, 0, 0, 1597, 0, 0, 0, 577536, 0, 0, 1602, 0, 0, 0, 0, 0, 0, 2107, 0, 0,
  /* 20986 */ 0, 0, 0, 0, 0, 0, 0, 364, 0, 0, 0, 0, 155648, 0, 0, 302, 118784, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 21017 */ 2459, 0, 0, 0, 302, 0, 0, 0, 302, 119197, 73728, 0, 0, 0, 0, 0, 65536, 0, 0, 0, 0, 0, 1610, 0, 0, 1613, 0,
  /* 21044 */ 0, 0, 0, 0, 0, 0, 0, 217088, 0, 0, 0, 2179072, 2179072, 2179072, 2179072, 302, 302, 302, 302, 302, 302, 0,
  /* 21066 */ 0, 0, 0, 302, 0, 0, 302, 1, 12290, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2434, 0, 3, 0, 0, 2183168,
  /* 21096 */ 0, 0, 0, 0, 0, 33403, 299, 0, 2134016, 49791, 303, 0, 0, 0, 0, 0, 1658, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 21124 */ 254413, 0, 0, 0, 0, 122880, 122880, 122880, 122880, 122880, 122880, 122880, 122880, 122880, 122880,
  /* 21139 */ 122880, 122880, 122880, 122880, 122880, 122880, 0, 122880, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3177, 0, 0,
  /* 21162 */ 0, 0, 0, 0, 0, 122880, 122880, 122880, 122880, 122880, 122880, 0, 122880, 122880, 122880, 0, 0, 122880, 0,
  /* 21181 */ 122880, 122880, 122880, 0, 0, 0, 0, 0, 122880, 0, 122880, 0, 0, 122880, 0, 0, 0, 0, 0, 0, 0, 0, 122880, 0,
  /* 21205 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3168, 0, 0, 0, 0, 147456, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 21237 */ 3005, 1092, 0, 2424832, 2433024, 0, 0, 2457600, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1116, 0, 0, 0, 0, 0, 1823,
  /* 21262 */ 2125824, 2125824, 2125824, 2408448, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824,
  /* 21273 */ 2125824, 2125824, 2125824, 2125824, 0, 1919, 2125824, 2125824, 2125824, 0, 0, 0, 131072, 0, 0, 0, 69632,
  /* 21290 */ 73728, 0, 0, 0, 0, 0, 65536, 0, 0, 0, 0, 0, 1680, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1159168, 0, 0, 0, 0,
  /* 21319 */ 131072, 0, 0, 131072, 131072, 0, 0, 0, 0, 0, 0, 0, 131072, 0, 131072, 0, 0, 0, 0, 0, 1696, 1697, 1698,
  /* 21342 */ 1699, 0, 0, 0, 0, 0, 0, 0, 0, 3184, 0, 0, 0, 0, 0, 0, 0, 0, 111050, 111050, 111050, 111050, 111050,
  /* 21365 */ 111050, 111050, 111050, 1, 12290, 0, 135168, 135168, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2756, 0, 0,
  /* 21390 */ 0, 135168, 0, 135168, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 131072, 131072, 0, 0, 0, 0, 0, 135168, 0,
  /* 21415 */ 135168, 135168, 135168, 135168, 135168, 135168, 0, 135168, 135168, 135168, 135168, 135168, 135168, 0, 0,
  /* 21430 */ 0, 0, 135168, 0, 0, 135168, 1, 12290, 3, 0, 0, 2183168, 0, 0, 0, 0, 0, 636, 637, 0, 2134016, 640, 641, 0,
  /* 21454 */ 0, 0, 0, 0, 1709, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 683, 684, 685, 0, 0, 0, 0, 1361, 2125824, 2125824,
  /* 21479 */ 2125824, 2125824, 2125824, 2424832, 2433024, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824,
  /* 21490 */ 2125824, 0, 0, 0, 0, 0, 0, 299, 0, 0, 0, 303, 139264, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 225708, 0,
  /* 21519 */ 303, 303, 303, 303, 303, 303, 0, 0, 0, 0, 303, 0, 0, 303, 1, 12290, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 21548 */ 300, 3, 0, 0, 2183168, 0, 0, 0, 0, 0, 298, 33406, 0, 2134016, 302, 49794, 0, 0, 0, 0, 0, 1722, 0, 0, 0, 0,
  /* 21574 */ 0, 0, 0, 0, 0, 0, 0, 2625536, 0, 2699264, 2715648, 0, 61440, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 21602 */ 360, 0, 303, 2424832, 2433024, 0, 0, 2457600, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1145, 364, 364, 0, 0, 1148,
  /* 21626 */ 300, 300, 300, 143660, 370, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300,
  /* 21646 */ 300, 143660, 300, 300, 143660, 300, 300, 300, 143730, 300, 300, 300, 143730, 69632, 73728, 300, 300,
  /* 21663 */ 143660, 300, 300, 65536, 300, 300, 0, 0, 300, 300, 143660, 300, 300, 300, 300, 300, 300, 300, 300, 300,
  /* 21683 */ 365, 300, 0, 143660, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 143660, 300, 143660, 143660,
  /* 21702 */ 143660, 143660, 300, 143660, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 143730, 300, 300, 300,
  /* 21721 */ 300, 143660, 143660, 143660, 143660, 143660, 143660, 143660, 143660, 143660, 143660, 143660, 143660,
  /* 21734 */ 143660, 143660, 143660, 143660, 300, 300, 300, 300, 143660, 143660, 143660, 143660, 143660, 143660, 300,
  /* 21749 */ 143660, 143660, 143660, 300, 143660, 300, 143660, 143660, 143660, 143660, 143660, 300, 0, 300, 0, 300,
  /* 21765 */ 300, 300, 143660, 300, 143660, 143660, 143660, 143660, 143660, 143730, 143660, 143730, 143730, 143730,
  /* 21779 */ 143730, 143730, 143730, 143660, 143660, 143660, 143660, 143660, 143660, 143660, 143660, 1, 12290, 0, 0, 0,
  /* 21795 */ 3117056, 0, 0, 0, 0, 0, 0, 0, 2200252, 2200252, 0, 0, 0, 0, 0, 0, 725, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2508,
  /* 21823 */ 0, 0, 0, 0, 0, 0, 0, 0, 155648, 0, 155648, 155648, 155648, 155648, 155648, 155648, 155648, 155648, 155648,
  /* 21842 */ 155648, 155648, 155648, 155648, 155648, 155648, 155648, 155648, 155648, 155648, 155648, 155648, 155648,
  /* 21855 */ 155648, 155648, 0, 0, 0, 0, 155648, 0, 0, 0, 0, 0, 155648, 0, 155648, 155648, 155648, 0, 12290, 0, 0, 0,
  /* 21877 */ 0, 155648, 0, 155648, 0, 0, 0, 0, 0, 155648, 0, 0, 0, 0, 0, 0, 742, 0, 0, 0, 0, 742, 0, 748, 0, 0, 3, 0,
  /* 21905 */ 0, 2183168, 126976, 0, 0, 0, 0, 298, 299, 0, 2134016, 302, 303, 0, 0, 0, 0, 0, 2044, 2045, 0, 0, 0, 0, 0,
  /* 21930 */ 0, 0, 0, 0, 334, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3117056, 0, 0, 0, 0, 0, 0, 0, 364, 0, 0, 0, 0, 0, 0, 0, 69632,
  /* 21961 */ 73728, 0, 135168, 135168, 0, 0, 65536, 135168, 159744, 159744, 159744, 159744, 159744, 159744, 159744,
  /* 21976 */ 159744, 159744, 159744, 159744, 159744, 159744, 159744, 159744, 159744, 163840, 159744, 159744, 159744,
  /* 21989 */ 159744, 163840, 159744, 159744, 159744, 0, 159744, 0, 0, 0, 0, 0, 0, 0, 0, 0, 159744, 159744, 159744,
  /* 22008 */ 159744, 159744, 159744, 159744, 159744, 159744, 159744, 159744, 159744, 159744, 159744, 159744, 159744, 0,
  /* 22022 */ 0, 0, 0, 0, 0, 0, 0, 0, 364, 0, 304, 0, 0, 0, 0, 25162, 0, 0, 0, 159744, 0, 0, 0, 25162, 25162, 25162,
  /* 22048 */ 159744, 25162, 25162, 25162, 25162, 25162, 25162, 25162, 159744, 159744, 159744, 25162, 159744, 159744,
  /* 22062 */ 25162, 1, 12290, 167936, 167936, 167936, 167936, 167936, 167936, 167936, 167936, 167936, 167936, 167936,
  /* 22076 */ 167936, 167936, 167936, 167936, 167936, 1, 12290, 167936, 167936, 167936, 0, 167936, 0, 0, 0, 0, 0, 0, 0,
  /* 22095 */ 0, 0, 167936, 167936, 167936, 167936, 167936, 167936, 167936, 167936, 0, 0, 0, 0, 0, 0, 0, 0, 0, 364, 0,
  /* 22116 */ 253952, 0, 0, 0, 0, 0, 0, 0, 2138112, 1183, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 163840, 0, 0, 0, 172032,
  /* 22143 */ 172032, 0, 0, 172032, 0, 0, 172032, 0, 172032, 0, 0, 0, 0, 172032, 172032, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 22168 */ 172032, 0, 0, 0, 172032, 172032, 0, 172032, 172032, 172032, 172032, 172032, 172032, 172032, 172032,
  /* 22183 */ 172032, 172032, 172032, 172032, 172032, 172032, 172032, 172032, 172032, 172032, 172032, 172032, 172032,
  /* 22196 */ 172032, 172032, 172032, 0, 0, 0, 0, 0, 0, 0, 0, 0, 364, 299, 0, 0, 0, 0, 0, 1, 288, 3, 0, 0, 0, 294, 0, 0,
  /* 22224 */ 0, 0, 0, 0, 0, 0, 0, 0, 1158, 0, 0, 0, 0, 0, 176128, 176128, 176128, 176128, 176128, 176128, 176128,
  /* 22245 */ 176128, 176128, 176128, 176128, 176128, 176128, 176128, 176128, 176128, 1, 0, 176128, 176128, 176128, 0,
  /* 22260 */ 176128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 176128, 176128, 176128, 176128, 176128, 176128, 176128, 176128, 0, 0,
  /* 22280 */ 0, 0, 0, 0, 0, 0, 0, 364, 338, 292, 0, 0, 0, 0, 3, 78114, 78114, 292, 0, 634, 0, 0, 0, 298, 299, 0,
  /* 22306 */ 2134016, 302, 303, 0, 0, 0, 0, 0, 2067, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2076, 563, 563, 587, 587, 587, 587,
  /* 22331 */ 587, 78114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 366, 0, 0, 0, 0, 0, 0, 1164, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 22363 */ 0, 0, 644, 541, 541, 1308, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 0, 0, 2242, 0,
  /* 22386 */ 914, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 0, 0, 587, 587, 587, 1203, 541,
  /* 22408 */ 587, 563, 541, 541, 541, 541, 541, 563, 563, 563, 563, 563, 3071, 563, 563, 563, 563, 563, 563, 587, 587,
  /* 22429 */ 587, 587, 587, 1079, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1190, 0, 0, 0, 0, 0, 0, 0, 229376, 0, 0, 0, 0, 0, 0, 0,
  /* 22459 */ 0, 0, 0, 0, 0, 0, 0, 266240, 0, 0, 0, 0, 1691, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3020, 563,
  /* 22489 */ 563, 587, 587, 587, 587, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 541, 541, 541, 541, 3569, 541, 541, 0, 0, 563, 563,
  /* 22515 */ 563, 563, 563, 563, 563, 2251, 563, 563, 563, 563, 563, 563, 587, 3109, 587, 587, 587, 587, 587, 587, 587,
  /* 22536 */ 587, 2663, 587, 587, 587, 587, 587, 587, 587, 563, 563, 2288, 563, 563, 563, 563, 563, 563, 563, 563, 563,
  /* 22557 */ 563, 563, 563, 563, 563, 3541, 587, 587, 587, 2375, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587,
  /* 22578 */ 587, 587, 1497, 587, 587, 0, 0, 0, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563,
  /* 22600 */ 563, 1439, 0, 3007, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3170, 541, 541, 541, 541, 3038, 541, 541,
  /* 22627 */ 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 1300, 541, 541, 541, 563, 563, 563, 3078, 563, 563, 563,
  /* 22648 */ 563, 563, 563, 563, 563, 563, 563, 563, 563, 1401, 563, 563, 563, 587, 587, 587, 587, 3120, 587, 587, 587,
  /* 22669 */ 587, 587, 587, 587, 587, 587, 587, 587, 1042, 587, 587, 587, 587, 0, 3159, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 22694 */ 0, 0, 0, 0, 0, 3178, 3214, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541,
  /* 22717 */ 1359, 563, 563, 563, 587, 3259, 587, 587, 587, 3262, 587, 587, 587, 587, 587, 587, 587, 541, 541, 563,
  /* 22737 */ 563, 587, 587, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3609, 541, 541, 541, 587, 587, 3270, 587, 587, 587, 587, 587,
  /* 22762 */ 587, 587, 587, 587, 587, 587, 587, 587, 1498, 587, 587, 541, 541, 541, 3330, 3331, 541, 541, 541, 541,
  /* 22782 */ 541, 541, 541, 541, 563, 563, 563, 563, 3581, 563, 563, 563, 563, 563, 3349, 563, 563, 563, 563, 563, 563,
  /* 22803 */ 563, 563, 563, 587, 587, 587, 587, 587, 587, 587, 587, 0, 541, 541, 541, 3406, 541, 541, 541, 541, 563,
  /* 22824 */ 563, 563, 563, 563, 563, 3415, 563, 563, 563, 563, 2276, 563, 563, 563, 563, 563, 563, 2282, 563, 2284,
  /* 22844 */ 563, 2287, 587, 3431, 587, 587, 587, 587, 587, 587, 3437, 587, 587, 587, 3441, 587, 541, 563, 563, 563,
  /* 22864 */ 563, 3475, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 2267, 563, 563, 563, 563, 563, 563, 0, 0,
  /* 22885 */ 3456, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 0, 2586, 0, 541, 3471, 563, 563,
  /* 22906 */ 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 0, 2327, 563, 3487, 587, 587, 587, 587, 587,
  /* 22927 */ 587, 587, 587, 587, 587, 587, 587, 587, 587, 0, 0, 563, 563, 587, 587, 587, 587, 0, 0, 541, 541, 563, 563,
  /* 22950 */ 587, 587, 0, 541, 541, 541, 3205, 541, 541, 541, 541, 541, 541, 541, 3210, 541, 541, 541, 541, 541, 541,
  /* 22971 */ 2816, 541, 541, 2820, 541, 541, 541, 541, 541, 541, 541, 541, 3041, 541, 541, 541, 541, 541, 541, 541,
  /* 22991 */ 541, 2556, 541, 541, 541, 541, 541, 541, 541, 541, 2233, 541, 541, 541, 541, 541, 0, 0, 563, 587, 0, 541,
  /* 23013 */ 563, 587, 0, 541, 563, 587, 0, 541, 563, 587, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3510, 0, 0, 0, 0, 541, 541, 541,
  /* 23040 */ 541, 541, 541, 2166, 541, 541, 541, 541, 541, 541, 541, 2193, 541, 541, 541, 541, 541, 541, 541, 541, 541,
  /* 23061 */ 2557, 541, 541, 541, 541, 541, 541, 3, 78114, 78114, 292, 0, 0, 0, 0, 0, 298, 299, 0, 2134016, 302, 303,
  /* 23083 */ 0, 0, 0, 0, 0, 2122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 406, 0, 0, 0, 0, 0, 587, 0, 0, 188416, 541, 587, 563,
  /* 23112 */ 541, 541, 541, 541, 541, 0, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 1839, 563, 563, 0,
  /* 23134 */ 0, 0, 304, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1134592, 0, 0, 0, 0, 192971, 192971, 192971, 192971,
  /* 23159 */ 192971, 192971, 192971, 192971, 192971, 192971, 192971, 192971, 192971, 192971, 192971, 192971, 0, 192971,
  /* 23173 */ 192971, 0, 1, 12290, 0, 0, 0, 0, 192971, 192971, 192971, 192971, 192971, 192971, 0, 192971, 192971,
  /* 23190 */ 192971, 192971, 0, 192971, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 167936, 0, 0, 0, 192971, 192971, 192971,
  /* 23213 */ 192971, 192971, 192971, 192971, 192971, 0, 0, 0, 0, 0, 0, 0, 0, 0, 379, 0, 0, 0, 0, 0, 0, 301, 0, 0, 0, 0,
  /* 23239 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 734, 406, 406, 406, 406, 406, 406, 0, 0, 0, 0, 406, 0, 0, 406, 1, 12290,
  /* 23267 */ 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 139264, 299, 3, 78114, 78114, 292, 0, 0, 0, 0, 0, 298, 299, 0, 301,
  /* 23294 */ 302, 303, 0, 0, 0, 0, 0, 2138, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 221184, 0, 221184, 0, 0, 0, 0, 0, 0, 740,
  /* 23323 */ 406, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3180, 0, 0, 0, 3308, 587, 0, 0, 740, 541, 587, 563, 541, 541, 541,
  /* 23350 */ 541, 541, 0, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 1836, 563, 563, 563, 563, 0, 0, 0, 0, 0, 0,
  /* 23374 */ 587, 2654, 587, 587, 587, 587, 587, 587, 2946, 587, 587, 587, 587, 587, 587, 541, 587, 563, 0, 0, 0, 740,
  /* 23396 */ 1184, 0, 0, 0, 0, 1188, 0, 0, 0, 0, 0, 0, 0, 782, 0, 0, 0, 0, 0, 0, 0, 0, 0, 541, 843, 541, 541, 563, 587,
  /* 23425 */ 587, 587, 587, 587, 1079, 1559, 0, 0, 0, 1565, 0, 0, 0, 1571, 2034, 0, 0, 0, 0, 1577, 2036, 0, 0, 0, 0, 0,
  /* 23451 */ 0, 0, 791, 0, 0, 0, 0, 0, 0, 0, 795, 0, 0, 0, 1577, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2662400, 0,
  /* 23481 */ 2813952, 0, 0, 0, 1188, 1669, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 221184, 0, 0, 0, 563, 563, 587, 587,
  /* 23507 */ 587, 587, 1559, 2030, 0, 0, 0, 0, 1565, 2032, 0, 0, 0, 0, 0, 0, 3182, 0, 0, 0, 0, 3187, 0, 0, 0, 0, 0, 0,
  /* 23535 */ 0, 69632, 73728, 315, 316, 316, 421, 422, 65536, 429, 0, 0, 0, 0, 1669, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 23561 */ 0, 262144, 0, 0, 0, 0, 2034, 0, 2036, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 302, 0, 0, 0, 0, 306, 0, 306, 0,
  /* 23591 */ 0, 0, 0, 0, 0, 0, 0, 0, 306, 0, 0, 0, 0, 0, 0, 3196, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2977, 0, 0, 0, 0, 0, 0,
  /* 23624 */ 0, 0, 205106, 0, 205106, 205106, 205106, 205106, 205106, 205106, 205106, 205106, 205106, 205106, 205106,
  /* 23639 */ 205106, 205106, 205106, 205106, 205106, 205106, 205106, 205337, 205106, 205337, 205337, 205106, 205106, 0,
  /* 23653 */ 0, 0, 0, 0, 0, 0, 0, 0, 650, 0, 0, 0, 0, 0, 0, 3, 0, 0, 2183801, 0, 0, 0, 0, 0, 298, 299, 151552, 2134016,
  /* 23681 */ 302, 303, 0, 0, 0, 0, 0, 2427, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 661, 0, 0, 0, 0, 0, 212992, 0, 0, 0, 0, 0, 0,
  /* 23712 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 782, 0, 151552, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3201, 0, 0, 0,
  /* 23743 */ 3117056, 0, 0, 0, 0, 0, 0, 0, 0, 2200253, 0, 0, 0, 0, 0, 0, 807, 808, 0, 0, 0, 0, 808, 0, 0, 0, 0, 0, 0,
  /* 23772 */ 1113, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1726, 0, 0, 0, 0, 0, 0, 914, 2126737, 2126737, 2126737, 2126737,
  /* 23795 */ 2126737, 2425745, 2433937, 2126737, 2126737, 2126737, 2126737, 2126737, 2126737, 2126737, 2126737,
  /* 23806 */ 2126737, 2126737, 3138449, 2126811, 2126811, 2499547, 2126811, 2126811, 2126737, 2724753, 2126737,
  /* 23817 */ 2732945, 2773905, 2126737, 2126737, 2126737, 2806673, 2126737, 2831249, 2126737, 2126737, 2864017,
  /* 23828 */ 2126737, 2126737, 2126737, 2126737, 2126811, 2126811, 2126811, 2126811, 2126811, 2593755, 2126811,
  /* 23839 */ 2126811, 2126811, 2126811, 2126811, 2126811, 2126811, 3036123, 2126811, 2126811, 3072987, 2126811,
  /* 23850 */ 2126811, 2126811, 3122139, 2126811, 2126737, 2126737, 2921361, 2126737, 2126737, 2126737, 2126737,
  /* 23861 */ 2126737, 2126737, 2126737, 2126737, 2126737, 2126737, 2126737, 3117969, 2126737, 2126737, 2126737,
  /* 23872 */ 2642833, 2126737, 2126737, 2126737, 2126737, 2126737, 2126737, 2720657, 2126737, 2126737, 2126737,
  /* 23883 */ 2126737, 2126737, 2126737, 2126737, 3040145, 2126737, 3064721, 2126737, 2126737, 2126737, 2126737,
  /* 23894 */ 2126737, 3101585, 2126811, 2425819, 2434011, 2126811, 2126811, 2126811, 2126811, 2126811, 2126811,
  /* 23905 */ 2126811, 2126811, 2126811, 2126811, 2126811, 2126811, 2126811, 3126235, 2126811, 2126811, 2126811,
  /* 23916 */ 2126811, 2126811, 2626523, 2126811, 2126811, 2126811, 2126811, 2126811, 2126811, 2700251, 2126811,
  /* 23927 */ 2716635, 2126811, 2724827, 2126811, 2733019, 2773979, 2126811, 0, 2502656, 0, 0, 3010560, 0, 0, 0, 0, 0,
  /* 23944 */ 0, 0, 0, 2990080, 2179072, 2179072, 3125248, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072,
  /* 23957 */ 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2125824, 2125824, 2125824, 2125824, 2125824,
  /* 23968 */ 2592768, 2125824, 2125824, 2125824, 2125824, 2126811, 2126811, 2806747, 2126811, 2831323, 2126811,
  /* 23979 */ 2126811, 2864091, 2126811, 2126811, 2126811, 2126811, 2921435, 2126811, 2126811, 2126811, 0, 2179072,
  /* 23991 */ 2126811, 2126737, 2457600, 2179072, 2179072, 2179072, 2179072, 2458513, 2126737, 2126737, 2126737,
  /* 24002 */ 2126737, 2126737, 2524049, 2126737, 2126737, 2126737, 2126737, 2126737, 2126737, 2126737, 2126737,
  /* 24013 */ 2601873, 2126737, 2126737, 2458587, 2126811, 2126811, 2126811, 2126811, 2183168, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 24030 */ 0, 0, 1222, 0, 0, 0, 0, 0, 2409435, 2126811, 2126811, 2126811, 2126811, 2126811, 2126811, 2126811,
  /* 24046 */ 2126811, 2126811, 2126811, 2126811, 2126811, 2126811, 2126811, 2126811, 2126811, 2126811, 2839515,
  /* 24057 */ 2126811, 2126811, 2126811, 2126811, 2126811, 2126811, 2126811, 2126811, 2126811, 2126811, 2126811,
  /* 24068 */ 2126811, 2126811, 2126811, 3118043, 2126811, 2126811, 2126811, 2126811, 2126811, 2126811, 2126811, 0, 0,
  /* 24081 */ 2126737, 2126737, 2126737, 2126737, 2126737, 2126737, 2126737, 2126737, 2126737, 2126737, 2126737,
  /* 24092 */ 2462609, 2466705, 2126737, 2126737, 2126737, 2888593, 2126737, 2126737, 2925457, 2126737, 2126737,
  /* 24103 */ 2126737, 2126737, 2126737, 2126737, 2126737, 2126737, 2126737, 986, 2126811, 2126811, 2126811, 2126811,
  /* 24115 */ 2126811, 2126811, 2769809, 2778001, 2782097, 2798481, 2823057, 2126737, 2126737, 2126737, 2884497,
  /* 24126 */ 2126737, 2913169, 2126737, 2126737, 2126737, 2126737, 2126737, 2126737, 2626449, 2126737, 2126737,
  /* 24137 */ 2126737, 2126737, 2126737, 2126737, 2700177, 2126737, 2716561, 2126737, 2126737, 3134353, 2126737,
  /* 24148 */ 2126737, 2126737, 2126737, 2126737, 2126737, 2126737, 2126737, 2126737, 3208081, 2126737, 0, 0, 0, 0, 0,
  /* 24163 */ 0, 3395, 541, 541, 541, 541, 3399, 541, 541, 541, 541, 541, 541, 1347, 541, 541, 541, 541, 541, 541, 541,
  /* 24184 */ 541, 541, 563, 563, 3231, 563, 563, 563, 563, 0, 0, 2126811, 2126811, 2126811, 2126811, 2126811, 2126811,
  /* 24201 */ 2126811, 2126811, 2126811, 2126811, 2126811, 2462683, 2466779, 2126811, 2126811, 2126811, 2126811,
  /* 24212 */ 2126811, 2929627, 2126811, 2126811, 2126811, 2999259, 2126811, 2126811, 2126811, 2126811, 3060699,
  /* 24223 */ 2126811, 2126811, 2126811, 2126811, 2454491, 2126811, 2474971, 2483163, 2126811, 2126811, 2126811,
  /* 24234 */ 2126811, 2126811, 2126811, 2532315, 2126811, 2126811, 2126811, 2446299, 2126811, 2126811, 2126811,
  /* 24245 */ 2126811, 2126811, 2126811, 2126811, 2126811, 2126811, 2126811, 2126811, 2552795, 2769883, 2778075,
  /* 24256 */ 2782171, 2798555, 2823131, 2126811, 2126811, 2126811, 2884571, 2126811, 2913243, 2126811, 2126811,
  /* 24267 */ 2126811, 2126811, 2126811, 2126811, 2126811, 3130331, 2126811, 2126811, 3154907, 3167195, 3175387,
  /* 24278 */ 2506752, 2507739, 2507665, 2126811, 2126811, 3134427, 2126811, 2126811, 2126811, 2126811, 2126811,
  /* 24289 */ 2126811, 2126811, 2126811, 2126811, 3208155, 2126811, 2179072, 2126811, 2126811, 2126811, 2642907,
  /* 24300 */ 2126811, 2126811, 2126811, 2126811, 2126811, 2126811, 2720731, 2126811, 2126811, 2126811, 2126811,
  /* 24311 */ 2126811, 2126811, 2126811, 3040219, 2126811, 3064795, 2126811, 2126811, 2126811, 2126811, 2126811,
  /* 24322 */ 3101659, 0, 0, 0, 2388881, 2126737, 2126737, 2126737, 2421649, 2126737, 2126737, 2126737, 2126737,
  /* 24335 */ 2126737, 2454417, 2126737, 2474897, 2483089, 2126737, 2126737, 2126737, 2126737, 2126737, 2126737,
  /* 24346 */ 2532241, 2126737, 2126737, 2126737, 2126737, 2126737, 2126737, 2126737, 2605969, 2126737, 2630545,
  /* 24357 */ 2126737, 2126737, 2651025, 2126737, 2126737, 2126737, 2708369, 2126737, 2737041, 2126737, 2126737,
  /* 24368 */ 2126737, 2126737, 2126737, 2126737, 2663313, 2126737, 2126737, 2126737, 2126737, 2126737, 2126737,
  /* 24379 */ 2126737, 2126737, 2126737, 0, 0, 988, 2126811, 2126811, 2126811, 2126811, 3036049, 2126737, 2126737,
  /* 24392 */ 3072913, 2126737, 2126737, 2126737, 3122065, 2126737, 2126737, 3142545, 2126737, 2126737, 2126737,
  /* 24403 */ 3171217, 2126737, 2126737, 2126737, 3031953, 2126737, 2126811, 2450395, 2126811, 2536411, 2126811,
  /* 24414 */ 2610139, 2126811, 2859995, 2126811, 2126811, 2126811, 2126811, 2126811, 2524123, 2126811, 2126811,
  /* 24425 */ 2126811, 2126811, 2126811, 2126811, 2126811, 2126811, 2601947, 2126811, 2126737, 3191697, 3195793,
  /* 24436 */ 2126737, 0, 0, 0, 0, 0, 0, 2388955, 2126811, 2126811, 2126811, 2421723, 2126811, 2126811, 2449408, 0,
  /* 24452 */ 2535424, 3031040, 2859008, 0, 0, 0, 0, 0, 2179072, 2449408, 2179072, 2535424, 2126811, 2737115, 2126811,
  /* 24467 */ 2126811, 2126811, 2126811, 2126811, 2126811, 2126811, 2126811, 2888667, 2126811, 2126811, 2925531,
  /* 24478 */ 2126811, 2126811, 2126811, 2126811, 2126811, 2585563, 2126811, 2126811, 2126811, 2126811, 2126811,
  /* 24489 */ 2618331, 2126811, 2126811, 2126811, 2126811, 2126811, 2126811, 2606043, 2126811, 2630619, 2126811,
  /* 24500 */ 2126811, 2651099, 2126811, 2126811, 2126811, 2708443, 2126811, 3142619, 2126811, 2126811, 2126811,
  /* 24511 */ 3171291, 2126811, 2126811, 3191771, 3195867, 2126811, 2179072, 2126811, 2126737, 2179072, 2179072,
  /* 24522 */ 2179072, 2617344, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2662400, 2179072, 2179072,
  /* 24533 */ 2179072, 2179072, 2179072, 2179072, 2179072, 3137536, 2125824, 2125824, 2498560, 2125824, 2125824,
  /* 24544 */ 2125824, 2555904, 2564096, 3112960, 3219456, 2126737, 2126737, 3113873, 3220369, 2126811, 2126811,
  /* 24555 */ 3113947, 3220443, 0, 0, 0, 0, 0, 0, 0, 833, 0, 0, 0, 0, 0, 0, 808, 0, 3096576, 2179072, 2179072, 2179072,
  /* 24577 */ 2179072, 2179072, 2179072, 2179072, 3223552, 0, 0, 2126737, 2126737, 2417553, 2126737, 2126737, 2126737,
  /* 24590 */ 2126737, 2929553, 2126737, 2126737, 2126737, 2999185, 2126737, 2126737, 2126737, 2126737, 3060625,
  /* 24601 */ 2126737, 2126737, 2126737, 2126737, 2933649, 2126737, 2126737, 2126737, 2126737, 2126737, 2126737,
  /* 24612 */ 2126737, 2126737, 3130257, 2126737, 2126737, 2126737, 2519953, 2126737, 2126737, 2126737, 2126737,
  /* 24623 */ 2589585, 2126737, 2614161, 2646929, 2126737, 2126737, 2696081, 2757521, 2126737, 2446225, 2126737,
  /* 24634 */ 2126737, 2126737, 2126737, 2126737, 2126737, 2126737, 2126737, 2126737, 2126737, 2126737, 2552721,
  /* 24645 */ 2126737, 2126737, 2126737, 2638737, 2126737, 2126737, 2126737, 2126737, 2728849, 2753425, 2126737,
  /* 24656 */ 2126737, 2126737, 2126737, 2843537, 2847633, 2126737, 2896785, 2917265, 2126737, 2126737, 2945937,
  /* 24667 */ 2126737, 2126737, 2995089, 2126737, 3003281, 2126737, 2126737, 3023761, 2126737, 3068817, 3085201,
  /* 24678 */ 2126737, 3097489, 2126737, 2126737, 2126737, 2126737, 2126737, 2126737, 2126737, 3224465, 0, 0, 2126811,
  /* 24691 */ 2126811, 2417627, 2843611, 2847707, 2126811, 2896859, 2917339, 2126811, 2126811, 2946011, 2126811,
  /* 24702 */ 2126811, 2995163, 2126811, 3003355, 2126811, 2126811, 3023835, 2126811, 3068891, 3085275, 2126811,
  /* 24713 */ 3097563, 2126811, 2126811, 2126811, 2126811, 2126811, 2126811, 2126811, 3224539, 2179072, 2126811,
  /* 24724 */ 2126737, 2126737, 2802577, 2814865, 2126737, 2839441, 2126737, 2126737, 2126737, 2126737, 2126737,
  /* 24735 */ 2126737, 2126737, 2126737, 2126737, 2126737, 2126737, 2126737, 2126737, 2126737, 3126161, 2126737,
  /* 24746 */ 2515857, 2126737, 2126737, 2126737, 2544529, 2548625, 2126737, 2126737, 2597777, 2126737, 2126737,
  /* 24757 */ 2126737, 2126737, 2126737, 2126737, 2126737, 2126737, 2126737, 2585489, 2126737, 2126737, 2126737,
  /* 24768 */ 2126737, 2126737, 2618257, 2126811, 2515931, 2126811, 2126811, 2126811, 2544603, 2548699, 2126811,
  /* 24779 */ 2126811, 2597851, 2126811, 2126811, 2126811, 2126811, 2126811, 2126811, 2126811, 2655195, 2679771,
  /* 24790 */ 2761691, 2765787, 2786267, 2855899, 2970587, 2126811, 3007451, 3154833, 3167121, 3175313, 2397147,
  /* 24801 */ 2401243, 2126811, 2126811, 2442203, 2126811, 2470875, 2126811, 2126811, 2126811, 2520027, 2126811,
  /* 24812 */ 2126811, 2126811, 2126811, 2126811, 2638811, 2126811, 2126811, 2126811, 2126811, 2728923, 2753499,
  /* 24823 */ 2126811, 2126811, 2126811, 2126811, 2126811, 2126811, 3179483, 2179072, 2126811, 2126737, 2179072,
  /* 24834 */ 2179072, 2126737, 2126737, 2126811, 2126811, 0, 0, 0, 0, 0, 0, 2510848, 2514944, 0, 0, 2678784, 2760704,
  /* 24851 */ 2764800, 2854912, 2969600, 2179072, 3006464, 2179072, 3018752, 2179072, 2179072, 2179072, 3149824,
  /* 24862 */ 2126737, 2429841, 2438033, 2126737, 2487185, 2126737, 2126737, 2126737, 2126737, 2126737, 2126737,
  /* 24873 */ 2126737, 2126737, 2655121, 2679697, 2761617, 2765713, 2786193, 2855825, 2970513, 2126737, 3007377,
  /* 24884 */ 2126737, 3019665, 2126737, 2126737, 2126737, 2126737, 3150737, 2126811, 2429915, 2438107, 2126811,
  /* 24895 */ 2487259, 2126811, 2126811, 2589659, 2126811, 2614235, 2647003, 2126811, 2126811, 2696155, 2757595,
  /* 24906 */ 2126811, 2126811, 2126811, 2126811, 2933723, 2126811, 2126811, 2663387, 2126811, 2126811, 2126811,
  /* 24917 */ 2126811, 2126811, 2126811, 2126811, 2126811, 2126811, 2126811, 2126811, 2802651, 2814939, 2126811,
  /* 24928 */ 3019739, 2126811, 2126811, 2126811, 2126811, 3150811, 2179072, 3051520, 2126737, 3052433, 2126811,
  /* 24939 */ 3052507, 0, 2490368, 2498560, 2126811, 2556891, 2565083, 2126811, 2126811, 2126811, 2126811, 2126811,
  /* 24951 */ 2126811, 2126811, 2126811, 2126811, 2126811, 3138523, 2940928, 2941841, 2941915, 0, 0, 0, 0, 0, 2748416,
  /* 24966 */ 2879488, 0, 3180, 0, 0, 0, 0, 0, 0, 0, 1102, 1101, 0, 0, 0, 0, 0, 0, 0, 0, 225740, 225740, 225740, 225740,
  /* 24990 */ 225740, 225740, 225740, 225740, 0, 0, 0, 0, 0, 0, 0, 0, 0, 662, 0, 662, 0, 0, 0, 0, 2126737, 2126811,
  /* 25012 */ 2126811, 2126811, 2126811, 2126811, 2126811, 2126811, 2126811, 2126811, 2126811, 2126811, 2126811,
  /* 25023 */ 2126811, 2126811, 2126811, 2179072, 2126811, 2126737, 2179072, 2179072, 2179072, 2179072, 2126737,
  /* 25034 */ 2126737, 2126737, 2126737, 2126811, 2126811, 2126811, 2126811, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3180, 0,
  /* 25054 */ 3306, 0, 0, 2179072, 2502656, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072,
  /* 25067 */ 2179072, 3010560, 2179072, 2179072, 2126737, 2126737, 2126737, 2126737, 2126737, 2126737, 2126737,
  /* 25078 */ 2126737, 2126737, 2126737, 2126737, 2126737, 2126737, 2126737, 2126737, 2503569, 2126737, 2126737,
  /* 25089 */ 2126737, 2126737, 2126737, 2126737, 2126737, 2126737, 2126737, 3011473, 2126737, 2126737, 2126737,
  /* 25100 */ 2126811, 2126811, 2126811, 2126811, 2126811, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1206, 0, 1208, 0, 0, 0,
  /* 25121 */ 2503643, 2126811, 2126811, 2126811, 2126811, 2126811, 2126811, 2126811, 2126811, 2126811, 3011547,
  /* 25132 */ 2126811, 2126811, 2126811, 0, 0, 0, 2179072, 2126811, 2126737, 2179072, 2179072, 2179072, 2179072,
  /* 25145 */ 2179072, 0, 2126737, 2126737, 2126737, 2409361, 2126737, 2126737, 2126737, 2126737, 2126737, 2126737,
  /* 25157 */ 2126737, 2126737, 2126737, 2126737, 2126737, 0, 0, 2126811, 2126811, 2126811, 2179072, 2609152, 2179072,
  /* 25170 */ 2859008, 2179072, 2179072, 2179072, 3031040, 2126737, 2450321, 2126737, 2536337, 2126737, 2610065,
  /* 25181 */ 2126737, 2859921, 3032027, 2126811, 2527232, 0, 0, 0, 0, 0, 2179072, 2527232, 2179072, 2179072, 2179072,
  /* 25196 */ 2179072, 2179072, 2126737, 2126737, 2126811, 2126811, 0, 2486272, 0, 0, 0, 0, 0, 2678784, 2854912,
  /* 25211 */ 3006464, 2528145, 2126737, 2126737, 2126737, 2126737, 2126737, 3093393, 2126811, 2528219, 2126811,
  /* 25222 */ 2126811, 2126811, 2126811, 2126811, 3093467, 0, 0, 0, 0, 0, 2440, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 398, 0, 0,
  /* 25246 */ 0, 0, 0, 3026944, 0, 0, 0, 2404352, 2179072, 2179072, 2179072, 2179072, 3026944, 2405265, 2126737,
  /* 25261 */ 2126737, 2126737, 2126737, 3027857, 2405339, 2126811, 2126811, 2126811, 2126811, 3027931, 0, 2539520, 0,
  /* 25274 */ 2949120, 2179072, 2658304, 2973696, 2179072, 2126737, 2659217, 2974609, 2126737, 2126811, 2659291,
  /* 25285 */ 2974683, 2126811, 0, 2711552, 2560000, 2179072, 2560913, 2126737, 2560987, 2126811, 0, 2179072, 2179072,
  /* 25298 */ 3133440, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 3207168,
  /* 25309 */ 2179072, 0, 0, 0, 0, 0, 0, 3011, 0, 0, 0, 0, 3016, 3017, 0, 3019, 0, 2126737, 2126811, 0, 2179072,
  /* 25330 */ 2126737, 2126811, 0, 2179072, 2126737, 2126811, 2985984, 2985984, 2986897, 2986971, 0, 0, 0, 0, 0, 0,
  /* 25346 */ 3562, 0, 3564, 541, 541, 541, 541, 541, 541, 541, 541, 541, 3219, 541, 541, 541, 541, 541, 3224, 0,
  /* 25366 */ 221184, 221184, 0, 0, 0, 0, 0, 0, 0, 0, 0, 221184, 221184, 0, 0, 221184, 221184, 221184, 0, 0, 221184,
  /* 25387 */ 221184, 221184, 221184, 221184, 221184, 221184, 221184, 221184, 221184, 221184, 221184, 221184, 221184,
  /* 25400 */ 221184, 221184, 0, 0, 0, 0, 0, 0, 0, 0, 0, 661, 0, 661, 0, 0, 0, 0, 0, 0, 0, 98304, 0, 0, 0, 53248, 0, 0,
  /* 25428 */ 0, 0, 0, 2662400, 0, 2813952, 299, 0, 302, 0, 0, 0, 302, 0, 303, 0, 0, 0, 303, 0, 0, 0, 303, 69632,
  /* 25452 */ 139681, 0, 0, 0, 0, 0, 65536, 0, 0, 0, 3133440, 0, 98304, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1150976, 0,
  /* 25479 */ 0, 0, 0, 0, 0, 0, 302, 0, 303, 0, 0, 0, 2473984, 2478080, 0, 0, 0, 0, 0, 0, 0, 0, 697, 698, 0, 364, 364,
  /* 25506 */ 364, 0, 0, 3121152, 2179072, 2179072, 3141632, 2179072, 2179072, 2179072, 3170304, 2179072, 2179072,
  /* 25519 */ 3190784, 3194880, 2179072, 914, 0, 0, 0, 0, 0, 0, 122880, 122880, 122880, 122880, 0, 122880, 122880, 0,
  /* 25537 */ 2105631, 12290, 3, 0, 0, 293, 0, 0, 0, 0, 293, 0, 0, 0, 0, 0, 0, 0, 2749, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2467,
  /* 25566 */ 0, 0, 2470, 0, 0, 0, 0, 914, 0, 2387968, 2125824, 2125824, 2125824, 2420736, 2125824, 2125824, 2125824,
  /* 25583 */ 2125824, 2125824, 2453504, 2125824, 2473984, 2482176, 2125824, 2125824, 2125824, 2125824, 2125824,
  /* 25594 */ 2125824, 2531328, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2605056, 2125824,
  /* 25605 */ 3190784, 3194880, 2125824, 988, 0, 0, 0, 988, 0, 2387968, 2125824, 2125824, 2125824, 2420736, 2125824,
  /* 25620 */ 245760, 0, 0, 2179072, 2125824, 2125824, 2179072, 2179072, 2179072, 2179072, 2179072, 245760, 2125824,
  /* 25633 */ 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2179072, 2125824, 2125824, 2179072, 2179072,
  /* 25644 */ 2179072, 2179072, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 0, 0, 0, 0, 0,
  /* 25659 */ 0, 0, 0, 0, 0, 3096576, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 3223552, 914, 0,
  /* 25675 */ 2125824, 2125824, 2416640, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2625536, 2125824,
  /* 25686 */ 2125824, 2125824, 2125824, 2125824, 2125824, 2699264, 2125824, 2715648, 2125824, 2723840, 2125824,
  /* 25697 */ 2732032, 2772992, 2125824, 3084288, 2125824, 3096576, 2125824, 2125824, 2125824, 2125824, 2125824,
  /* 25708 */ 2125824, 2125824, 3223552, 988, 0, 2125824, 2125824, 2416640, 225740, 225740, 225740, 225740, 225740,
  /* 25721 */ 225740, 225740, 225740, 225740, 225740, 225740, 225740, 225740, 225740, 225740, 225740, 249856, 249856,
  /* 25734 */ 249856, 249856, 249856, 249856, 249856, 249856, 249856, 249856, 249856, 249856, 249856, 249856, 249856,
  /* 25747 */ 249856, 0, 0, 0, 0, 0, 0, 0, 0, 0, 712, 0, 0, 0, 716, 0, 0, 0, 217088, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 25778 */ 0, 0, 0, 3317, 254413, 254413, 254413, 254413, 254413, 254413, 254413, 254413, 254413, 254413, 254413,
  /* 25793 */ 254413, 254413, 254413, 254413, 254413, 0, 0, 0, 0, 0, 0, 0, 0, 0, 728, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 25817 */ 2183168, 0, 0, 270336, 0, 0, 298, 299, 0, 2134016, 302, 303, 200704, 2940928, 0, 0, 0, 0, 0, 2748416,
  /* 25837 */ 2879488, 0, 20480, 0, 0, 0, 0, 0, 0, 0, 1106, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2519, 0, 0, 0, 0, 0, 541, 1,
  /* 25865 */ 12290, 2113825, 0, 0, 0, 0, 0, 0, 295, 0, 0, 0, 295, 0, 0, 0, 0, 0, 0, 172032, 172032, 172032, 172032,
  /* 25888 */ 172032, 172032, 172032, 172032, 1, 12290, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 118784, 298, 0, 0, 266240,
  /* 25911 */ 0, 0, 0, 0, 0, 0, 0, 266240, 0, 0, 0, 0, 266240, 2113825, 0, 0, 2183168, 0, 0, 0, 0, 0, 298, 299, 0,
  /* 25936 */ 2134016, 302, 303, 0, 0, 0, 0, 0, 2463, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 237568, 0, 0, 0, 0, 274432,
  /* 25962 */ 274432, 274432, 274432, 274432, 274432, 0, 0, 0, 0, 274432, 0, 0, 274432, 1, 12290, 3, 0, 0, 0, 0, 0, 0,
  /* 25984 */ 0, 90408, 90408, 90408, 90408, 0, 94505, 1, 12290, 3, 78114, 292, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 26008 */ 1155072, 0, 0, 0, 0, 0, 0, 0, 3, 78114, 78114, 292, 0, 0, 0, 0, 0, 298, 299, 0, 0, 302, 303, 0, 0, 0, 0,
  /* 26035 */ 0, 2478, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1147354, 0, 0, 0, 0, 563, 563, 587, 587, 587, 587, 587, 78114,
  /* 26061 */ 1079, 0, 0, 0, 0, 0, 0, 0, 0, 743, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2770, 0, 0, 563, 563, 587, 587,
  /* 26091 */ 587, 587, 0, 2030, 0, 0, 0, 0, 0, 2032, 0, 0, 0, 0, 0, 0, 266240, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 12290,
  /* 26120 */ 0, 0, 0, 2034, 0, 0, 0, 0, 0, 2036, 0, 0, 0, 0, 0, 0, 0, 1114, 0, 0, 0, 0, 1118, 0, 0, 1121, 0, 2485, 0,
  /* 26149 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 155648, 0, 0, 0, 1678, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 337,
  /* 26181 */ 0, 0, 0, 0, 0, 0, 0, 1669, 0, 0, 0, 0, 0, 0, 0, 0, 2114, 0, 0, 0, 0, 0, 0, 1134592, 1134592, 0, 0,
  /* 26208 */ 1134592, 0, 0, 1134592, 0, 1134592, 0, 0, 0, 1134592, 1135007, 1135007, 0, 0, 0, 0, 0, 1135007, 0, 563,
  /* 26228 */ 563, 587, 587, 587, 587, 587, 290, 1079, 0, 0, 0, 0, 0, 0, 0, 0, 756, 0, 0, 0, 0, 0, 0, 0, 0, 788, 814, 0,
  /* 26256 */ 814, 809, 0, 0, 0, 3, 78114, 78456, 292, 0, 0, 0, 0, 0, 298, 299, 0, 0, 302, 303, 0, 0, 0, 0, 0, 2489, 0,
  /* 26283 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 335, 336, 0, 0, 0, 0, 588, 564, 564, 564, 564, 564, 564, 564, 588, 588, 588,
  /* 26309 */ 541, 588, 588, 588, 588, 588, 588, 588, 564, 564, 541, 588, 564, 564, 588, 1, 12290, 0, 0, 0, 0, 2775, 0,
  /* 26332 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2179072, 2179072, 2179072, 2179072, 1, 12290, 3, 78115, 292, 0, 0, 0, 0,
  /* 26356 */ 0, 0, 0, 0, 0, 0, 0, 364, 364, 0, 0, 0, 282624, 282624, 282624, 282624, 282624, 282624, 282624, 282624,
  /* 26376 */ 282624, 282624, 282624, 282624, 282624, 282624, 282624, 282624, 1, 12290, 0, 0, 0, 0, 282624, 282624,
  /* 26392 */ 282624, 282624, 282624, 282624, 0, 282624, 282624, 282624, 282624, 0, 282624, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 26412 */ 0, 0, 364, 364, 364, 0, 0, 282624, 282624, 282624, 282624, 282624, 282624, 282624, 282624, 0, 0, 0, 0, 0,
  /* 26432 */ 0, 0, 0, 0, 735, 0, 797, 0, 0, 0, 0, 2981888, 2396160, 0, 3153920, 3180, 0, 0, 0, 0, 0, 0, 0, 2740224, 0,
  /* 26457 */ 0, 0, 0, 0, 0, 1126, 0, 0, 0, 1130, 1131, 0, 0, 0, 0, 0, 0, 330, 0, 0, 0, 0, 0, 0, 0, 330, 0, 0, 69632,
  /* 26486 */ 73728, 0, 418, 418, 0, 0, 65536, 418, 0, 0, 0, 286720, 0, 286720, 286720, 286720, 286720, 286720, 286720,
  /* 26505 */ 286720, 286720, 286720, 286720, 286720, 286720, 286720, 286720, 286720, 286720, 286720, 286720, 286720,
  /* 26518 */ 286720, 286720, 286720, 286720, 286720, 0, 0, 0, 0, 0, 0, 0, 0, 0, 796, 0, 796, 0, 0, 0, 0, 0, 3108864,
  /* 26541 */ 3198976, 0, 0, 3043328, 0, 3149824, 2936832, 0, 2760704, 3305, 2437120, 0, 0, 0, 0, 0, 0, 1141, 0, 1143,
  /* 26561 */ 0, 0, 364, 364, 0, 0, 0, 0, 0, 0, 1154, 0, 0, 0, 0, 0, 1160, 0, 1162, 0, 0, 0, 0, 0, 2875392, 0, 0, 0,
  /* 26589 */ 3386, 0, 0, 0, 0, 0, 0, 2834432, 2940928, 0, 0, 0, 0, 0, 2748416, 2879488, 0, 3386, 0, 0, 0, 0, 0, 0, 0,
  /* 26614 */ 1135, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2780, 0, 0, 0, 0, 2785, 0, 0, 0, 0, 308, 0, 0, 0, 0, 0, 307, 0, 307, 308,
  /* 26644 */ 0, 307, 307, 0, 0, 0, 307, 307, 308, 308, 0, 0, 0, 0, 0, 0, 307, 407, 308, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 26673 */ 0, 0, 0, 0, 0, 783, 0, 0, 0, 308, 412, 0, 0, 69632, 73728, 0, 0, 0, 0, 0, 65536, 0, 0, 0, 0, 0, 2763, 0,
  /* 26701 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 106496, 0, 0, 0, 0, 0, 0, 0, 431, 0, 0, 0, 0, 448, 462, 462, 462, 462, 462,
  /* 26730 */ 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 488, 462, 488, 488, 488, 488, 488,
  /* 26751 */ 488, 488, 488, 513, 488, 488, 488, 488, 488, 488, 488, 488, 488, 488, 531, 488, 488, 488, 488, 531, 488,
  /* 26772 */ 488, 488, 488, 488, 488, 488, 488, 542, 565, 542, 565, 542, 542, 565, 542, 589, 565, 565, 565, 565, 565,
  /* 26793 */ 565, 565, 589, 589, 589, 542, 589, 589, 589, 589, 589, 589, 589, 565, 565, 542, 589, 565, 565, 589, 1,
  /* 26814 */ 12290, 0, 674, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 172032, 704, 0, 0, 0, 0, 0, 0, 0, 711, 0, 0,
  /* 26844 */ 0, 0, 0, 0, 0, 0, 1156, 0, 0, 0, 0, 0, 0, 0, 0, 1172, 0, 0, 0, 0, 0, 0, 0, 0, 1187, 0, 0, 0, 0, 0, 0,
  /* 26875 */ 1104, 0, 736, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 747, 0, 0, 0, 0, 0, 0, 1146880, 0, 1146880, 0, 0, 0, 0, 0,
  /* 26904 */ 0, 0, 664, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2976, 0, 0, 0, 0, 0, 0, 0, 0, 0, 645, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 26937 */ 0, 0, 353, 354, 355, 356, 0, 765, 0, 0, 768, 0, 0, 0, 0, 774, 0, 0, 778, 0, 0, 0, 0, 0, 0, 1170, 0, 0, 0,
  /* 26966 */ 0, 0, 0, 0, 0, 0, 0, 2520, 0, 0, 0, 0, 541, 0, 785, 0, 0, 0, 0, 789, 0, 0, 0, 0, 0, 0, 0, 793, 0, 0, 0, 0,
  /* 26998 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 286720, 0, 736, 0, 793, 0, 0, 0, 0, 648, 0, 0, 0, 0, 0, 0, 817, 0, 0,
  /* 27028 */ 648, 0, 0, 0, 0, 0, 834, 789, 0, 0, 0, 0, 0, 838, 839, 789, 0, 0, 0, 789, 789, 0, 0, 736, 789, 0, 541,
  /* 27055 */ 541, 849, 853, 563, 964, 563, 967, 563, 563, 981, 563, 563, 0, 587, 587, 587, 996, 1000, 587, 0, 0, 0, 0,
  /* 27078 */ 0, 0, 0, 0, 3180, 3448, 0, 0, 0, 0, 0, 0, 0, 2974, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1100, 0, 0, 0, 0, 0, 0, 563,
  /* 27109 */ 563, 996, 1075, 1041, 587, 587, 78114, 1079, 0, 0, 1081, 1085, 0, 0, 1089, 1093, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 27133 */ 0, 0, 0, 0, 0, 0, 0, 1135, 0, 0, 0, 0, 1152, 0, 0, 0, 0, 1157, 0, 0, 0, 0, 0, 0, 0, 1237, 0, 0, 541, 541,
  /* 27163 */ 1273, 541, 1276, 541, 0, 0, 0, 0, 1201, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 364, 364, 364, 0, 703, 0, 0, 0,
  /* 27191 */ 0, 1254, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 364, 364, 364, 702, 0, 541, 541, 1342, 541, 541, 541, 541, 541,
  /* 27217 */ 541, 541, 541, 541, 541, 541, 541, 541, 541, 2239, 0, 0, 0, 0, 0, 1596, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 27244 */ 364, 364, 1146, 0, 0, 0, 0, 0, 1640, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 399, 0, 0, 0, 1653, 0, 0, 0, 0,
  /* 27274 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1163, 0, 0, 0, 0, 1669, 0, 0, 0, 0, 0, 0, 1673, 0, 0, 0, 0, 0, 0, 0,
  /* 27305 */ 69632, 73728, 167936, 0, 0, 0, 0, 65536, 0, 0, 1729, 0, 0, 0, 0, 541, 541, 541, 541, 541, 541, 541, 541,
  /* 27328 */ 541, 541, 541, 3327, 541, 541, 1742, 541, 541, 541, 541, 541, 541, 541, 541, 541, 1755, 541, 541, 541,
  /* 27348 */ 541, 541, 541, 541, 2204, 541, 541, 541, 541, 541, 541, 541, 541, 541, 2220, 541, 541, 541, 541, 541, 541,
  /* 27369 */ 541, 541, 541, 1794, 541, 541, 1797, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 1314, 541, 541,
  /* 27389 */ 541, 1318, 541, 541, 1809, 541, 541, 541, 541, 541, 1814, 541, 541, 541, 541, 541, 541, 541, 1360, 914,
  /* 27409 */ 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 0, 2328, 1824, 563, 563, 563, 563,
  /* 27430 */ 563, 1831, 563, 563, 563, 563, 563, 1837, 563, 563, 563, 563, 563, 2627, 563, 563, 563, 563, 563, 563,
  /* 27450 */ 2635, 563, 563, 563, 563, 563, 2862, 563, 2865, 563, 563, 563, 563, 2870, 563, 563, 563, 563, 563, 2877,
  /* 27470 */ 2878, 563, 563, 563, 563, 2881, 563, 563, 563, 563, 563, 1863, 563, 563, 563, 563, 563, 563, 563, 563,
  /* 27490 */ 563, 563, 3356, 587, 587, 587, 587, 587, 563, 563, 1892, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563,
  /* 27511 */ 1905, 563, 563, 563, 563, 978, 563, 563, 563, 563, 0, 587, 587, 587, 587, 587, 587, 1997, 587, 587, 587,
  /* 27532 */ 587, 587, 587, 587, 587, 587, 1531, 587, 587, 587, 587, 587, 587, 563, 563, 563, 1910, 563, 563, 563, 563,
  /* 27553 */ 563, 563, 563, 26028, 1920, 587, 587, 587, 0, 541, 587, 563, 541, 1547, 541, 541, 1550, 563, 1551, 563,
  /* 27573 */ 563, 587, 587, 1927, 587, 587, 587, 587, 587, 1933, 587, 587, 587, 587, 587, 587, 587, 563, 563, 541, 587,
  /* 27594 */ 563, 563, 587, 1, 12290, 587, 587, 1946, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587,
  /* 27615 */ 1513, 587, 587, 563, 563, 2026, 587, 587, 587, 0, 2030, 0, 0, 0, 0, 0, 2032, 0, 0, 0, 0, 0, 0, 1159168,
  /* 27639 */ 416, 416, 0, 0, 0, 0, 0, 416, 0, 0, 0, 0, 2042, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 541, 846, 541, 541, 0,
  /* 27669 */ 2141, 0, 0, 2148, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 364, 364, 208896, 0, 0, 0, 0, 0, 2140, 541, 541, 541,
  /* 27696 */ 541, 541, 541, 541, 541, 541, 541, 541, 2170, 541, 541, 2173, 541, 541, 541, 541, 541, 541, 2181, 541,
  /* 27716 */ 541, 541, 541, 541, 541, 541, 541, 2841, 541, 541, 541, 541, 541, 541, 541, 541, 1294, 541, 541, 541, 541,
  /* 27737 */ 541, 541, 541, 541, 1327, 541, 541, 541, 1334, 1336, 541, 541, 541, 541, 2214, 541, 541, 541, 541, 541,
  /* 27757 */ 541, 541, 541, 541, 541, 541, 541, 541, 541, 2535, 541, 563, 2258, 563, 563, 563, 563, 563, 563, 2266,
  /* 27777 */ 563, 563, 563, 563, 563, 563, 563, 983, 563, 0, 587, 587, 587, 587, 1001, 587, 563, 2300, 563, 563, 563,
  /* 27798 */ 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 587, 587, 587, 2345, 587, 587, 587, 587, 587, 587,
  /* 27819 */ 2353, 587, 587, 587, 587, 587, 587, 587, 1529, 587, 587, 587, 587, 587, 587, 587, 587, 1932, 587, 587,
  /* 27839 */ 587, 587, 587, 587, 587, 587, 1965, 1966, 1968, 587, 587, 587, 587, 587, 587, 2387, 587, 587, 587, 587,
  /* 27859 */ 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 541, 587, 563, 2414, 541, 541, 541, 541, 563, 563, 563,
  /* 27880 */ 563, 587, 587, 587, 587, 2030, 0, 2032, 0, 2034, 0, 2036, 0, 0, 2428, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1586,
  /* 27906 */ 1587, 0, 0, 0, 0, 2436, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1179, 2449, 0, 0, 0, 0, 0, 2453, 0,
  /* 27936 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 1600, 1601, 0, 0, 0, 0, 0, 0, 0, 0, 2477, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 382,
  /* 27968 */ 0, 0, 0, 386, 0, 0, 2501, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 322, 323, 0, 541, 541, 541, 2539, 541,
  /* 27996 */ 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 2198, 541, 541, 0, 0, 0, 563, 563, 563, 563,
  /* 28018 */ 563, 563, 563, 563, 563, 2595, 563, 563, 563, 563, 563, 2898, 563, 563, 563, 563, 563, 0, 0, 587, 587,
  /* 28039 */ 587, 587, 587, 587, 2337, 587, 587, 587, 587, 587, 587, 587, 1999, 2000, 587, 587, 587, 587, 587, 587,
  /* 28059 */ 587, 2015, 2016, 2017, 541, 2019, 541, 541, 563, 2023, 587, 587, 587, 2661, 587, 587, 587, 587, 587, 587,
  /* 28079 */ 587, 587, 587, 587, 587, 2669, 587, 587, 587, 587, 2714, 587, 587, 587, 587, 587, 587, 541, 587, 563, 541,
  /* 28100 */ 541, 2417, 2418, 563, 563, 2421, 2422, 587, 587, 2425, 2426, 0, 1563, 0, 0, 0, 2735, 0, 0, 0, 0, 0, 0,
  /* 28123 */ 2740, 0, 0, 0, 0, 0, 0, 0, 1242, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1630, 0, 0, 0, 0, 0, 1636, 541, 541, 541, 541,
  /* 28152 */ 2829, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 2836, 2884, 563, 563, 563, 563, 563, 563, 563,
  /* 28172 */ 563, 563, 563, 563, 563, 563, 563, 563, 1874, 587, 587, 2933, 587, 587, 587, 587, 587, 587, 587, 587, 587,
  /* 28193 */ 587, 587, 587, 587, 1536, 587, 587, 2955, 541, 2957, 563, 2959, 587, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 28218 */ 0, 0, 541, 541, 541, 541, 541, 541, 541, 587, 3442, 0, 3444, 0, 0, 0, 0, 0, 3180, 0, 0, 0, 0, 3452, 0, 0,
  /* 28244 */ 0, 0, 0, 2776, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 662, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3454, 0, 541, 3457,
  /* 28275 */ 541, 3459, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 2585, 0, 0, 0, 563, 587, 3488, 587,
  /* 28297 */ 3490, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 1047, 587, 587, 587, 587, 587, 0, 0, 0, 3505,
  /* 28319 */ 0, 0, 0, 0, 0, 0, 0, 3512, 0, 0, 541, 541, 541, 541, 541, 541, 3322, 541, 541, 541, 541, 541, 541, 541,
  /* 28343 */ 541, 1816, 541, 541, 541, 541, 541, 541, 1360, 541, 541, 541, 3517, 541, 541, 541, 541, 541, 541, 541,
  /* 28363 */ 541, 541, 541, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 3530, 563, 563, 563, 563, 563, 563, 563,
  /* 28384 */ 563, 563, 563, 563, 587, 587, 587, 587, 587, 587, 587, 587, 3544, 587, 587, 587, 587, 587, 587, 587, 587,
  /* 28405 */ 587, 587, 587, 0, 0, 0, 0, 541, 541, 541, 541, 563, 563, 309, 310, 311, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 28432 */ 0, 0, 338, 339, 340, 0, 0, 0, 420, 0, 0, 0, 449, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1129, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 28463 */ 0, 449, 420, 449, 449, 449, 449, 449, 449, 449, 449, 449, 449, 449, 449, 449, 449, 536, 449, 536, 536,
  /* 28484 */ 536, 536, 536, 536, 536, 449, 543, 566, 543, 566, 543, 543, 566, 543, 590, 566, 566, 566, 566, 566, 566,
  /* 28505 */ 566, 590, 590, 590, 543, 590, 590, 590, 590, 590, 590, 590, 566, 566, 616, 590, 622, 622, 627, 1, 12290,
  /* 28526 */ 960, 563, 563, 563, 563, 563, 563, 563, 563, 0, 587, 587, 587, 587, 587, 587, 587, 3136, 587, 587, 3138,
  /* 28547 */ 587, 587, 587, 587, 587, 0, 0, 0, 0, 1657, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 541, 541, 541, 2809, 541,
  /* 28573 */ 1676, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1211, 541, 541, 541, 1810, 541, 541, 541, 541, 541,
  /* 28599 */ 541, 541, 541, 541, 541, 541, 1360, 914, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563,
  /* 28620 */ 1378, 0, 0, 2486, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 359, 0, 0, 541, 541, 541, 541, 2528, 541, 541,
  /* 28647 */ 541, 541, 2532, 541, 541, 541, 541, 541, 541, 541, 541, 3218, 541, 541, 541, 541, 541, 541, 541, 541,
  /* 28667 */ 2583, 541, 541, 541, 541, 0, 2586, 0, 0, 0, 0, 563, 563, 563, 563, 563, 563, 2592, 563, 563, 563, 563,
  /* 28689 */ 2596, 563, 563, 563, 563, 2303, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 26028, 0, 587, 587,
  /* 28710 */ 587, 2658, 587, 587, 587, 587, 2662, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 2665, 587, 587,
  /* 28730 */ 587, 587, 587, 0, 0, 0, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 0, 0, 0, 0, 0, 0, 1186, 0, 0, 0,
  /* 28756 */ 1191, 0, 0, 0, 0, 1107, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1618, 0, 0, 0, 312, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 28788 */ 0, 0, 0, 0, 0, 0, 0, 2142208, 0, 0, 315, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 385, 337, 0, 422, 430,
  /* 28817 */ 432, 421, 430, 0, 312, 450, 463, 463, 463, 463, 463, 463, 463, 463, 463, 463, 463, 463, 463, 463, 463,
  /* 28838 */ 463, 463, 463, 484, 489, 498, 489, 489, 489, 489, 489, 489, 489, 489, 489, 515, 515, 528, 528, 529, 529,
  /* 28859 */ 529, 529, 529, 529, 529, 515, 529, 529, 529, 529, 515, 529, 529, 529, 529, 529, 529, 529, 529, 544, 567,
  /* 28880 */ 544, 567, 544, 544, 567, 544, 591, 567, 567, 567, 567, 567, 567, 567, 591, 591, 591, 613, 591, 591, 591,
  /* 28901 */ 591, 591, 591, 614, 615, 615, 613, 614, 615, 615, 614, 1, 12290, 0, 0, 0, 767, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 28927 */ 0, 0, 0, 669, 0, 0, 0, 0, 702, 0, 0, 0, 702, 0, 0, 0, 0, 0, 0, 541, 541, 541, 541, 541, 541, 1738, 541,
  /* 28954 */ 541, 541, 563, 563, 563, 968, 563, 563, 563, 563, 563, 0, 587, 587, 587, 587, 587, 587, 587, 3150, 3151,
  /* 28975 */ 3152, 541, 541, 563, 563, 587, 587, 0, 0, 2963, 0, 0, 0, 0, 0, 0, 0, 0, 2445312, 0, 2842624, 0, 0, 0,
  /* 28999 */ 2637824, 0, 563, 563, 587, 587, 1042, 587, 587, 78114, 1079, 0, 0, 0, 0, 0, 0, 0, 0, 2518, 0, 0, 0, 0, 0,
  /* 29024 */ 0, 541, 541, 541, 3029, 541, 541, 541, 541, 541, 541, 0, 1108, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 29051 */ 1, 12290, 0, 1150, 1108, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 514, 521, 521, 1212, 0, 0, 0, 0, 0, 0, 0,
  /* 29080 */ 0, 0, 0, 0, 0, 0, 1225, 0, 0, 0, 0, 0, 2792, 2793, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1631, 0, 0, 0, 0, 0,
  /* 29110 */ 1360, 914, 563, 563, 1364, 563, 563, 1368, 563, 563, 563, 563, 563, 563, 563, 563, 985, 0, 587, 587, 587,
  /* 29131 */ 587, 587, 587, 1382, 563, 1387, 563, 563, 1391, 563, 563, 1394, 563, 563, 563, 563, 563, 563, 563, 984,
  /* 29151 */ 563, 0, 587, 587, 587, 587, 587, 1004, 587, 1460, 587, 587, 587, 587, 587, 587, 587, 587, 1474, 587, 1479,
  /* 29172 */ 587, 587, 1483, 587, 587, 1486, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 1939,
  /* 29192 */ 587, 587, 0, 1692, 0, 1694, 0, 0, 0, 0, 0, 0, 1701, 0, 0, 0, 0, 0, 0, 0, 2765, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 29222 */ 2058, 0, 0, 0, 0, 0, 0, 541, 541, 1745, 541, 541, 541, 541, 541, 541, 541, 541, 541, 1757, 541, 541, 541,
  /* 29245 */ 541, 541, 541, 2192, 541, 541, 2195, 541, 541, 541, 541, 541, 541, 541, 1798, 541, 541, 541, 541, 541,
  /* 29265 */ 541, 1806, 541, 541, 1792, 1793, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541,
  /* 29285 */ 2824, 541, 587, 587, 587, 587, 1948, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 1478, 587,
  /* 29305 */ 587, 587, 587, 587, 587, 587, 587, 1961, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 1533, 587,
  /* 29326 */ 587, 587, 587, 0, 2034, 0, 2036, 0, 0, 0, 0, 0, 0, 2430, 0, 0, 0, 0, 0, 0, 0, 2804, 0, 0, 0, 541, 2808,
  /* 29353 */ 541, 541, 541, 0, 0, 0, 2476, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 694, 0, 0, 0, 0, 0, 0, 2502, 2503, 0, 0,
  /* 29383 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 643, 0, 0, 0, 0, 587, 587, 2700, 587, 587, 587, 587, 587, 587, 587, 587, 587,
  /* 29409 */ 587, 587, 587, 587, 2004, 587, 587, 0, 0, 2802, 0, 0, 0, 0, 0, 0, 0, 2806, 541, 541, 541, 541, 541, 541,
  /* 29433 */ 541, 2232, 541, 541, 2235, 2236, 541, 541, 0, 0, 541, 2956, 563, 2958, 587, 2960, 0, 0, 0, 0, 0, 2966, 0,
  /* 29456 */ 0, 0, 0, 0, 0, 0, 69632, 73728, 172032, 0, 0, 0, 0, 65536, 0, 0, 0, 0, 2970, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 29485 */ 0, 0, 730, 0, 0, 0, 0, 3035, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541,
  /* 29508 */ 1807, 541, 541, 3050, 3051, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 2223, 2224,
  /* 29528 */ 541, 563, 3090, 563, 3092, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 1415, 563, 563,
  /* 29548 */ 563, 3117, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 1484, 587, 587,
  /* 29568 */ 3132, 587, 3134, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 1937, 1938, 587, 587, 587, 0,
  /* 29588 */ 3192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 307, 308, 541, 541, 541, 541, 3228, 541, 541, 541, 541,
  /* 29614 */ 563, 563, 563, 563, 563, 563, 563, 563, 563, 945, 563, 563, 563, 563, 587, 3503, 0, 3504, 0, 0, 0, 0, 0,
  /* 29637 */ 0, 0, 0, 0, 0, 0, 541, 541, 541, 541, 2810, 3515, 541, 3516, 541, 541, 541, 3520, 541, 541, 541, 541, 541,
  /* 29660 */ 541, 541, 563, 3528, 563, 3529, 563, 563, 563, 3533, 563, 563, 563, 563, 563, 563, 563, 563, 587, 3542,
  /* 29680 */ 587, 3543, 587, 587, 587, 3547, 587, 587, 587, 587, 587, 587, 587, 587, 0, 0, 0, 0, 3673, 541, 541, 541,
  /* 29702 */ 3675, 563, 563, 3676, 587, 587, 587, 3678, 0, 0, 541, 541, 563, 563, 587, 587, 0, 541, 541, 3204, 541,
  /* 29723 */ 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 2238, 2586, 0, 323, 323, 373, 0, 0, 0, 0, 0,
  /* 29746 */ 0, 0, 0, 0, 0, 0, 0, 0, 686, 0, 0, 0, 0, 433, 373, 0, 438, 444, 451, 464, 464, 464, 464, 464, 464, 464,
  /* 29772 */ 464, 464, 464, 464, 464, 464, 464, 464, 464, 464, 464, 464, 490, 499, 490, 490, 490, 490, 490, 490, 490,
  /* 29793 */ 490, 490, 516, 516, 516, 516, 516, 516, 516, 516, 516, 516, 516, 516, 516, 516, 516, 516, 545, 568, 545,
  /* 29814 */ 568, 545, 545, 568, 545, 592, 568, 568, 568, 568, 568, 568, 568, 592, 592, 592, 545, 592, 592, 592, 592,
  /* 29835 */ 592, 592, 592, 568, 568, 545, 592, 568, 568, 592, 1, 12290, 0, 0, 0, 0, 800, 0, 0, 0, 0, 0, 0, 0, 541,
  /* 29860 */ 541, 541, 541, 541, 541, 3400, 541, 541, 541, 587, 587, 587, 1019, 587, 587, 587, 587, 587, 587, 587, 587,
  /* 29881 */ 587, 587, 587, 587, 1052, 587, 587, 587, 1122, 0, 1124, 1125, 0, 0, 0, 1127, 1128, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 29906 */ 2750, 0, 0, 0, 0, 0, 0, 0, 0, 1584, 0, 0, 0, 0, 0, 0, 0, 0, 1683, 0, 0, 0, 0, 0, 0, 0, 0, 1724, 0, 0, 0,
  /* 29937 */ 0, 0, 0, 0, 0, 2070, 0, 0, 0, 0, 2074, 0, 0, 0, 0, 1166, 1167, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1103,
  /* 29967 */ 1104, 1105, 1106, 0, 0, 1228, 0, 0, 0, 0, 1233, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1173, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 29996 */ 0, 0, 1241, 0, 0, 0, 0, 1244, 0, 1194, 0, 1113, 0, 1250, 0, 0, 0, 1128, 0, 0, 0, 0, 0, 0, 0, 1233, 0, 0,
  /* 30024 */ 0, 1265, 1127, 0, 0, 0, 0, 0, 0, 0, 0, 0, 541, 541, 1274, 541, 541, 541, 541, 541, 541, 2203, 541, 541,
  /* 30048 */ 541, 541, 541, 541, 541, 541, 541, 541, 1329, 541, 541, 541, 541, 541, 541, 541, 1322, 541, 541, 1324,
  /* 30068 */ 541, 541, 541, 1328, 541, 541, 541, 541, 541, 541, 541, 541, 3522, 541, 541, 541, 541, 541, 563, 563,
  /* 30088 */ 3068, 563, 563, 563, 563, 563, 563, 563, 563, 2603, 563, 563, 563, 563, 563, 563, 563, 1360, 914, 563,
  /* 30108 */ 563, 1365, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 587, 3427, 587, 587, 3429, 563, 563,
  /* 30128 */ 563, 1405, 563, 563, 563, 563, 563, 563, 563, 1414, 563, 563, 1416, 563, 563, 563, 563, 2316, 563, 2318,
  /* 30148 */ 563, 563, 563, 563, 563, 563, 563, 0, 0, 0, 0, 0, 0, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587,
  /* 30171 */ 587, 587, 587, 587, 541, 563, 563, 563, 1420, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563,
  /* 30192 */ 563, 1437, 563, 563, 563, 563, 563, 1444, 563, 563, 563, 563, 563, 26028, 1360, 988, 587, 587, 1457, 587,
  /* 30212 */ 0, 0, 0, 0, 0, 0, 0, 3447, 3180, 0, 0, 0, 0, 0, 0, 0, 2069, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2048, 0, 0, 0, 0,
  /* 30243 */ 0, 0, 0, 0, 0, 1656, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1132, 0, 0, 0, 587, 587, 587, 1993, 587, 587,
  /* 30271 */ 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 1496, 587, 587, 587, 563, 2025, 587, 587, 587, 2029, 0,
  /* 30292 */ 2030, 0, 0, 0, 0, 0, 2032, 0, 0, 0, 0, 0, 0, 2912256, 0, 3207168, 2465792, 0, 0, 2719744, 0, 0, 0, 0, 0,
  /* 30317 */ 0, 647, 0, 0, 0, 0, 0, 0, 0, 0, 0, 364, 0, 0, 122880, 122880, 0, 0, 0, 0, 0, 2034, 0, 0, 0, 0, 0, 2036, 0,
  /* 30346 */ 0, 0, 0, 0, 2039, 0, 2078, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 308, 307, 0, 0, 0, 2092, 0, 0, 0, 0,
  /* 30377 */ 0, 0, 0, 0, 0, 0, 0, 0, 1193, 0, 0, 0, 541, 2172, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541,
  /* 30402 */ 541, 541, 541, 0, 0, 0, 541, 2188, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541,
  /* 30424 */ 0, 2240, 541, 541, 541, 541, 2229, 541, 2231, 541, 541, 541, 541, 541, 541, 541, 0, 0, 0, 0, 0, 305, 0, 0,
  /* 30448 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 3180, 0, 0, 3307, 0, 0, 0, 563, 563, 563, 563, 563, 563, 563, 563, 563, 2253,
  /* 30474 */ 563, 563, 563, 563, 0, 0, 2329, 0, 0, 0, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 2341, 587, 587,
  /* 30497 */ 587, 2257, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 1889, 2273, 563,
  /* 30517 */ 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 2272, 2344, 587, 587, 587, 587, 587,
  /* 30538 */ 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 1516, 2360, 587, 587, 587, 587, 587, 587, 587, 587, 587,
  /* 30559 */ 587, 587, 587, 587, 587, 587, 1517, 587, 587, 587, 587, 2403, 587, 2405, 587, 587, 587, 587, 587, 587,
  /* 30579 */ 587, 541, 587, 0, 0, 0, 0, 0, 0, 0, 3508, 0, 0, 0, 0, 0, 0, 541, 541, 541, 3397, 541, 541, 541, 541, 3401,
  /* 30605 */ 541, 2499, 0, 0, 0, 0, 0, 2504, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2049, 0, 0, 0, 0, 0, 541, 541, 2526, 2527,
  /* 30633 */ 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 2237, 0, 0, 541, 541, 2566, 541, 541,
  /* 30654 */ 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 3046, 541, 0, 0, 0, 563, 563, 563, 2590, 563,
  /* 30676 */ 2591, 563, 563, 563, 563, 563, 563, 563, 1411, 563, 563, 563, 563, 563, 563, 563, 563, 1429, 563, 563,
  /* 30696 */ 563, 563, 563, 563, 563, 563, 1916, 563, 563, 26028, 1921, 587, 587, 587, 0, 0, 0, 2761, 0, 0, 0, 0, 0, 0,
  /* 30720 */ 0, 0, 0, 0, 0, 0, 1223, 0, 0, 0, 541, 541, 2837, 541, 541, 541, 541, 541, 541, 541, 2843, 541, 541, 541,
  /* 30744 */ 541, 541, 541, 541, 2531, 541, 541, 541, 541, 541, 541, 541, 541, 541, 563, 3230, 563, 563, 563, 3233,
  /* 30764 */ 563, 563, 563, 563, 2885, 563, 563, 563, 563, 563, 563, 563, 2891, 563, 563, 563, 563, 0, 2652, 0, 0, 0,
  /* 30786 */ 0, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 2342, 587, 2920, 587, 587, 587, 587, 587,
  /* 30807 */ 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 1519, 587, 587, 587, 587, 3373, 587, 587, 541, 541, 563,
  /* 30828 */ 563, 587, 587, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2968, 563, 587, 587, 587, 587, 587, 587, 3493, 587, 587, 587,
  /* 30852 */ 587, 587, 587, 587, 587, 1036, 587, 587, 587, 587, 1054, 587, 587, 325, 326, 327, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 30876 */ 0, 0, 0, 0, 0, 732, 0, 0, 0, 0, 0, 324, 372, 327, 371, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2059, 2060, 0, 2062,
  /* 30905 */ 2063, 0, 324, 0, 0, 371, 371, 401, 0, 327, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1189, 0, 0, 0, 0, 0, 0, 0, 0, 324,
  /* 30934 */ 0, 326, 0, 0, 452, 465, 465, 465, 465, 465, 465, 465, 465, 478, 465, 465, 465, 465, 465, 465, 465, 465,
  /* 30956 */ 465, 465, 465, 465, 491, 465, 491, 491, 491, 506, 508, 491, 491, 506, 491, 517, 517, 517, 517, 517, 517,
  /* 30977 */ 517, 517, 517, 517, 532, 517, 517, 517, 517, 532, 517, 517, 517, 517, 517, 517, 517, 517, 546, 569, 546,
  /* 30998 */ 569, 546, 546, 569, 546, 593, 569, 569, 569, 569, 569, 569, 569, 593, 593, 593, 546, 593, 593, 593, 593,
  /* 31019 */ 593, 593, 593, 569, 569, 546, 593, 569, 569, 593, 1, 12290, 0, 658, 659, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 31044 */ 670, 671, 0, 0, 0, 0, 0, 2972, 2973, 0, 0, 0, 0, 2978, 0, 0, 0, 0, 0, 0, 0, 1159168, 0, 1159168, 0, 0, 0,
  /* 31071 */ 0, 1159168, 1159168, 689, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 364, 364, 364, 0, 0, 0, 0, 0, 327, 0, 69632,
  /* 31096 */ 73728, 0, 0, 0, 0, 0, 65536, 0, 0, 0, 0, 0, 707, 708, 0, 0, 0, 0, 0, 714, 0, 0, 0, 718, 0, 720, 0, 0, 0,
  /* 31125 */ 0, 0, 0, 727, 0, 0, 0, 731, 0, 0, 0, 0, 0, 0, 1203, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1174, 0, 0, 0, 0, 0,
  /* 31156 */ 784, 0, 786, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 748, 0, 0, 0, 798, 0, 803, 0, 806, 0, 0, 0, 0, 803,
  /* 31186 */ 806, 0, 0, 0, 806, 803, 0, 0, 0, 0, 0, 0, 0, 786, 0, 798, 0, 815, 0, 0, 0, 0, 0, 328, 0, 0, 0, 0, 0, 0, 0,
  /* 31217 */ 0, 0, 0, 0, 172032, 0, 0, 0, 0, 0, 0, 0, 0, 707, 0, 0, 0, 806, 823, 0, 0, 0, 0, 0, 823, 823, 826, 0, 0, 0,
  /* 31247 */ 786, 0, 0, 0, 0, 0, 835, 0, 0, 0, 0, 0, 0, 0, 1258, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1144, 0, 364, 364, 0, 1147,
  /* 31277 */ 0, 856, 541, 541, 869, 541, 541, 880, 541, 885, 541, 541, 893, 896, 901, 541, 909, 563, 563, 966, 969,
  /* 31298 */ 974, 563, 982, 563, 563, 0, 587, 587, 587, 997, 587, 1003, 587, 587, 1016, 587, 587, 1027, 587, 1032, 587,
  /* 31319 */ 587, 1040, 1043, 1048, 587, 1056, 587, 0, 0, 0, 0, 0, 0, 3507, 0, 0, 0, 0, 0, 0, 0, 541, 1734, 541, 541,
  /* 31344 */ 541, 541, 541, 541, 1740, 541, 974, 563, 997, 587, 1076, 1048, 587, 78114, 1079, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 31367 */ 3174, 0, 0, 0, 0, 0, 0, 0, 0, 3180, 0, 0, 3389, 0, 0, 0, 0, 0, 0, 0, 1110, 0, 0, 0, 0, 0, 0, 0, 1117, 0,
  /* 31397 */ 0, 0, 0, 0, 0, 0, 69632, 73728, 221184, 0, 0, 0, 0, 65536, 0, 0, 1137, 1138, 0, 0, 0, 0, 1142, 0, 0, 0,
  /* 31423 */ 364, 364, 0, 0, 0, 0, 0, 0, 1204, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1245, 0, 0, 0, 0, 0, 0, 1165, 0, 0, 0, 0,
  /* 31454 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 330, 0, 0, 0, 1182, 741, 0, 0, 0, 1134, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1231,
  /* 31484 */ 541, 541, 541, 541, 541, 541, 541, 541, 541, 1281, 541, 541, 541, 541, 541, 541, 1296, 541, 541, 541,
  /* 31504 */ 1301, 541, 541, 541, 541, 541, 2851, 541, 541, 541, 0, 0, 563, 563, 563, 563, 563, 563, 563, 563, 563,
  /* 31525 */ 563, 2254, 563, 563, 563, 1360, 914, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 1373, 563, 563,
  /* 31545 */ 563, 563, 563, 3093, 563, 563, 563, 563, 563, 563, 563, 563, 563, 3102, 563, 563, 563, 1388, 563, 563,
  /* 31565 */ 563, 1393, 563, 563, 563, 563, 563, 563, 563, 563, 1451, 26028, 1360, 988, 587, 587, 587, 587, 587, 1485,
  /* 31585 */ 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 1500, 1540, 587, 587, 0, 541, 587, 563,
  /* 31606 */ 541, 541, 541, 541, 541, 563, 563, 563, 563, 587, 587, 587, 587, 0, 0, 0, 0, 2731, 0, 0, 0, 1607, 1608,
  /* 31629 */ 1609, 0, 1611, 1612, 0, 0, 0, 0, 1617, 0, 0, 0, 0, 0, 0, 1218, 1219, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3185, 0,
  /* 31657 */ 0, 0, 0, 0, 0, 0, 0, 1639, 0, 0, 1642, 0, 1644, 0, 0, 0, 0, 0, 1650, 1651, 0, 0, 0, 0, 0, 2985, 0, 0, 0,
  /* 31686 */ 0, 0, 0, 0, 0, 0, 0, 713, 0, 0, 0, 0, 0, 0, 1667, 0, 0, 1669, 0, 0, 0, 0, 1671, 1672, 0, 0, 0, 0, 0, 0, 0,
  /* 31717 */ 3165, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1725, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1708, 0, 0, 1711, 0, 0, 0, 0, 0,
  /* 31747 */ 1715, 0, 0, 0, 0, 0, 330, 331, 332, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2098, 0, 2100, 0, 0, 0, 0, 0, 1719, 1720,
  /* 31775 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1711, 0, 0, 0, 1731, 1585, 1585, 1733, 541, 1735, 541, 1736, 1737,
  /* 31800 */ 541, 1739, 541, 541, 541, 541, 541, 1310, 541, 541, 541, 541, 541, 541, 541, 1317, 541, 541, 541, 541,
  /* 31820 */ 541, 1748, 541, 541, 541, 541, 541, 541, 541, 541, 541, 1759, 541, 1743, 541, 541, 541, 541, 541, 541,
  /* 31840 */ 541, 541, 541, 1756, 541, 541, 541, 541, 541, 541, 541, 3521, 541, 3523, 541, 541, 3525, 541, 563, 563,
  /* 31860 */ 1760, 541, 541, 541, 541, 1764, 541, 1766, 541, 541, 541, 541, 541, 541, 541, 541, 541, 889, 541, 541,
  /* 31880 */ 541, 541, 907, 541, 1774, 1775, 1777, 541, 541, 541, 541, 541, 541, 541, 1785, 1786, 1787, 541, 541, 1790,
  /* 31900 */ 1791, 541, 541, 541, 541, 541, 541, 541, 1799, 541, 541, 541, 1803, 541, 541, 541, 541, 541, 541, 2530,
  /* 31920 */ 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 1315, 541, 541, 541, 541, 1320, 541, 541, 541, 541,
  /* 31940 */ 1811, 541, 541, 541, 541, 541, 541, 541, 541, 541, 1822, 1360, 914, 563, 563, 563, 563, 563, 563, 563,
  /* 31960 */ 563, 563, 563, 563, 563, 563, 1379, 0, 1827, 563, 1829, 563, 1830, 563, 1832, 563, 1834, 563, 563, 563,
  /* 31980 */ 1838, 563, 563, 563, 563, 1390, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 2652, 0, 587, 587,
  /* 32001 */ 587, 563, 1859, 563, 1861, 563, 563, 563, 563, 563, 563, 563, 563, 1869, 1870, 1872, 563, 563, 563, 563,
  /* 32021 */ 2325, 2652, 0, 0, 0, 0, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 2343, 1907, 563,
  /* 32043 */ 563, 563, 563, 563, 563, 563, 563, 563, 1918, 26028, 0, 1923, 587, 1925, 587, 1926, 587, 1928, 587, 1930,
  /* 32063 */ 587, 587, 587, 1934, 587, 587, 587, 587, 587, 587, 587, 3366, 587, 587, 587, 587, 3367, 3368, 587, 587,
  /* 32083 */ 587, 587, 587, 1947, 587, 587, 587, 587, 1951, 587, 587, 587, 587, 1955, 587, 1957, 587, 587, 1976, 1977,
  /* 32103 */ 1978, 587, 587, 1981, 1982, 587, 587, 587, 587, 587, 587, 587, 1950, 587, 587, 587, 587, 587, 587, 587,
  /* 32123 */ 587, 1494, 587, 587, 587, 587, 587, 587, 587, 1990, 587, 587, 587, 1994, 587, 587, 587, 587, 587, 587,
  /* 32143 */ 587, 2003, 587, 587, 587, 0, 1286, 1470, 1378, 541, 541, 541, 1549, 541, 563, 563, 563, 1553, 2024, 563,
  /* 32163 */ 1982, 587, 2028, 587, 0, 2030, 0, 0, 0, 0, 0, 2032, 0, 0, 0, 0, 0, 346, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 32192 */ 2871296, 0, 0, 2424832, 0, 0, 0, 0, 0, 2043, 0, 0, 2046, 2047, 0, 0, 0, 2051, 0, 0, 0, 0, 0, 0, 1257, 0,
  /* 32218 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 2086, 2087, 0, 0, 0, 0, 2090, 0, 0, 0, 0, 2094, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 32249 */ 0, 122880, 0, 0, 0, 0, 0, 0, 0, 0, 1669, 0, 0, 0, 0, 0, 0, 0, 2113, 0, 0, 2116, 0, 0, 2119, 0, 0, 0, 0, 0,
  /* 32279 */ 0, 2126, 0, 2128, 0, 0, 0, 0, 0, 0, 0, 69632, 73728, 266240, 0, 0, 0, 0, 65536, 0, 0, 0, 0, 0, 2137, 0, 0,
  /* 32306 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 674, 0, 0, 0, 0, 0, 2047, 0, 2147, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1237, 0,
  /* 32338 */ 0, 0, 0, 2158, 0, 0, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 3329, 541, 541, 541,
  /* 32361 */ 2174, 541, 2176, 541, 541, 541, 541, 541, 541, 2184, 541, 2186, 541, 541, 541, 541, 541, 3052, 541, 541,
  /* 32381 */ 541, 541, 541, 541, 541, 541, 3060, 541, 541, 541, 541, 541, 3217, 541, 541, 541, 541, 541, 541, 541,
  /* 32401 */ 3222, 541, 541, 541, 541, 541, 2217, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 1802, 541,
  /* 32421 */ 541, 541, 541, 2212, 541, 541, 541, 541, 541, 541, 2219, 541, 541, 541, 541, 541, 541, 541, 541, 541,
  /* 32441 */ 1312, 541, 541, 541, 541, 541, 541, 563, 563, 2259, 563, 2261, 563, 563, 563, 563, 563, 563, 2269, 563,
  /* 32461 */ 2271, 563, 563, 563, 563, 1422, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 1438, 587, 587, 2346,
  /* 32481 */ 587, 2348, 587, 587, 587, 587, 587, 587, 2356, 587, 2358, 587, 587, 0, 0, 0, 3634, 0, 3636, 541, 541, 541,
  /* 32503 */ 541, 541, 541, 541, 563, 563, 921, 563, 563, 563, 563, 940, 944, 950, 563, 955, 563, 563, 2261, 541, 2416,
  /* 32524 */ 541, 541, 563, 2420, 563, 563, 587, 2424, 587, 587, 2030, 0, 2032, 0, 0, 0, 2452, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 32549 */ 0, 0, 0, 0, 1247, 0, 0, 0, 0, 0, 2461, 0, 0, 0, 0, 0, 2466, 0, 2468, 2469, 0, 0, 0, 0, 0, 0, 0, 106496, 0,
  /* 32578 */ 106496, 0, 0, 0, 0, 106496, 106496, 0, 0, 0, 0, 2488, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 759, 0, 0, 0, 0, 0,
  /* 32607 */ 0, 0, 0, 2516, 2468, 0, 0, 0, 0, 0, 2521, 0, 0, 0, 541, 541, 541, 541, 541, 541, 3462, 541, 541, 541, 541,
  /* 32632 */ 541, 541, 541, 541, 541, 3334, 541, 541, 541, 563, 563, 563, 2563, 541, 541, 541, 2568, 541, 541, 541,
  /* 32652 */ 541, 541, 541, 541, 2575, 541, 541, 541, 541, 541, 541, 2542, 541, 2544, 541, 541, 541, 541, 541, 541,
  /* 32672 */ 541, 541, 563, 3411, 563, 563, 3413, 563, 563, 563, 541, 541, 541, 541, 2580, 541, 541, 541, 541, 541,
  /* 32692 */ 541, 541, 541, 0, 2586, 0, 0, 0, 0, 0, 3163, 0, 0, 0, 0, 0, 0, 0, 3169, 0, 0, 0, 0, 0, 835, 0, 784, 0,
  /* 32720 */ 815, 835, 0, 541, 541, 850, 541, 0, 0, 0, 563, 563, 563, 563, 563, 563, 563, 563, 2594, 563, 563, 563,
  /* 32742 */ 563, 0, 2652, 0, 0, 0, 0, 587, 587, 587, 2656, 587, 2657, 563, 2624, 563, 563, 563, 563, 2628, 563, 563,
  /* 32764 */ 563, 2633, 563, 563, 563, 563, 563, 563, 2629, 563, 563, 563, 563, 563, 563, 2636, 563, 563, 563, 563,
  /* 32784 */ 2640, 563, 563, 563, 563, 563, 563, 563, 563, 2646, 563, 563, 563, 563, 563, 1425, 563, 563, 563, 563,
  /* 32804 */ 563, 563, 563, 563, 563, 563, 2889, 563, 563, 563, 563, 563, 563, 587, 587, 2660, 587, 587, 587, 587, 587,
  /* 32825 */ 587, 587, 587, 587, 587, 587, 587, 587, 2383, 587, 587, 587, 587, 2672, 587, 2674, 587, 587, 587, 587,
  /* 32845 */ 587, 587, 587, 587, 587, 587, 587, 1970, 587, 587, 587, 587, 587, 2699, 587, 587, 587, 587, 587, 587, 587,
  /* 32866 */ 2706, 587, 587, 587, 587, 587, 587, 587, 3375, 541, 3376, 563, 3377, 587, 0, 0, 0, 587, 587, 2712, 587,
  /* 32887 */ 587, 587, 587, 587, 587, 587, 587, 541, 587, 563, 541, 541, 541, 541, 563, 563, 2800, 2801, 0, 0, 0, 0, 0,
  /* 32910 */ 0, 0, 0, 0, 541, 541, 541, 541, 541, 541, 541, 541, 541, 3402, 2992, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 32936 */ 2992, 0, 0, 0, 0, 0, 0, 1598, 0, 0, 0, 0, 0, 0, 0, 0, 1604, 0, 3022, 0, 0, 0, 3025, 541, 541, 541, 541,
  /* 32963 */ 541, 541, 3032, 541, 541, 541, 541, 541, 541, 2570, 541, 541, 541, 541, 2574, 541, 541, 541, 541, 541,
  /* 32983 */ 541, 1287, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 2546, 541, 541, 541, 541, 541, 541, 541,
  /* 33003 */ 3036, 541, 541, 541, 541, 541, 541, 541, 3042, 541, 541, 541, 541, 541, 541, 541, 2555, 541, 541, 541,
  /* 33023 */ 541, 541, 541, 541, 2562, 3048, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 3057, 3059, 541, 541,
  /* 33043 */ 541, 541, 541, 541, 2582, 541, 541, 541, 541, 541, 541, 0, 2586, 0, 3062, 541, 3064, 3065, 541, 563, 563,
  /* 33064 */ 563, 563, 563, 563, 3072, 563, 563, 563, 563, 563, 1427, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563,
  /* 33085 */ 3535, 563, 563, 563, 563, 563, 563, 587, 587, 587, 587, 3112, 587, 587, 587, 587, 3116, 563, 3076, 563,
  /* 33105 */ 563, 563, 563, 563, 563, 563, 3082, 563, 563, 563, 563, 563, 3088, 563, 563, 3091, 563, 563, 563, 563,
  /* 33125 */ 563, 563, 563, 563, 3098, 3100, 563, 563, 563, 563, 563, 3238, 563, 563, 563, 563, 563, 563, 563, 563,
  /* 33145 */ 563, 563, 2880, 563, 563, 563, 563, 563, 563, 3104, 563, 3106, 3107, 563, 587, 587, 587, 587, 587, 587,
  /* 33165 */ 3114, 587, 587, 587, 0, 1288, 1472, 1380, 541, 541, 541, 541, 541, 563, 563, 563, 563, 587, 587, 587, 587,
  /* 33186 */ 0, 0, 2729, 0, 0, 0, 587, 587, 3118, 587, 587, 587, 587, 587, 587, 587, 3124, 587, 587, 587, 587, 587,
  /* 33208 */ 587, 1998, 587, 587, 587, 587, 587, 587, 587, 587, 587, 3551, 587, 587, 3553, 587, 0, 0, 3130, 587, 587,
  /* 33229 */ 3133, 587, 587, 587, 587, 587, 587, 587, 587, 3140, 3142, 587, 587, 0, 0, 3633, 0, 0, 0, 541, 541, 3638,
  /* 33251 */ 541, 541, 541, 3642, 563, 587, 587, 3146, 587, 3148, 3149, 587, 541, 587, 563, 541, 3154, 563, 3156, 587,
  /* 33271 */ 3158, 0, 0, 0, 3193, 3194, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 808, 541, 541, 852, 541, 563, 563, 563, 3248,
  /* 33297 */ 563, 563, 563, 563, 563, 563, 563, 563, 3256, 563, 563, 563, 563, 563, 3249, 563, 3251, 563, 563, 563,
  /* 33317 */ 563, 563, 563, 563, 563, 1852, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 587, 587, 587, 3261, 587,
  /* 33338 */ 587, 587, 587, 587, 587, 587, 3266, 587, 0, 0, 0, 0, 0, 3506, 0, 0, 3509, 0, 0, 0, 0, 0, 541, 541, 541,
  /* 33363 */ 541, 541, 2165, 541, 541, 541, 541, 541, 541, 541, 541, 3616, 563, 563, 563, 563, 563, 563, 563, 2265,
  /* 33383 */ 563, 563, 563, 563, 2270, 563, 563, 563, 0, 3310, 0, 0, 3313, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 836, 541,
  /* 33409 */ 541, 541, 541, 587, 587, 587, 3372, 587, 587, 587, 541, 541, 563, 563, 587, 587, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 33433 */ 2967, 0, 563, 3417, 563, 563, 563, 563, 563, 563, 563, 563, 563, 587, 587, 587, 587, 587, 587, 587, 3115,
  /* 33454 */ 587, 587, 587, 587, 587, 587, 3433, 587, 587, 587, 587, 587, 587, 587, 587, 587, 541, 563, 563, 3473, 563,
  /* 33475 */ 563, 563, 563, 3478, 563, 563, 563, 563, 3483, 563, 563, 563, 563, 1423, 563, 563, 1430, 563, 563, 563,
  /* 33495 */ 563, 563, 563, 563, 563, 2631, 563, 563, 563, 563, 563, 563, 563, 3470, 563, 563, 563, 563, 563, 563, 563,
  /* 33516 */ 563, 563, 563, 563, 563, 563, 563, 3485, 587, 587, 587, 587, 3546, 587, 587, 587, 587, 587, 587, 587, 587,
  /* 33537 */ 587, 3555, 3556, 0, 0, 0, 3559, 0, 0, 0, 0, 0, 3565, 3566, 3567, 541, 541, 541, 3570, 541, 3572, 541, 541,
  /* 33560 */ 541, 541, 3577, 3578, 3579, 563, 563, 563, 3582, 563, 3584, 563, 563, 563, 563, 2600, 563, 563, 563, 563,
  /* 33580 */ 563, 563, 563, 563, 563, 563, 563, 26028, 1922, 587, 587, 587, 563, 563, 563, 3589, 3590, 3591, 3592, 587,
  /* 33600 */ 587, 587, 3595, 587, 3597, 587, 587, 587, 0, 1544, 1545, 1546, 541, 541, 1548, 541, 541, 563, 563, 1552,
  /* 33620 */ 563, 587, 3602, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 541, 541, 541, 541, 541, 3031, 541, 541, 541, 541, 563,
  /* 33644 */ 3644, 563, 563, 563, 3648, 563, 587, 587, 3650, 587, 587, 587, 3654, 587, 0, 0, 0, 0, 0, 0, 0, 0, 3180, 0,
  /* 33668 */ 3449, 0, 0, 0, 0, 0, 0, 0, 2473984, 2478080, 0, 0, 0, 0, 0, 0, 0, 0, 550, 573, 550, 573, 550, 550, 573,
  /* 33693 */ 550, 0, 0, 0, 328, 329, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1159, 0, 0, 0, 0, 0, 368, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 33725 */ 0, 0, 0, 0, 0, 0, 687, 688, 0, 0, 0, 368, 0, 0, 0, 376, 378, 0, 0, 0, 0, 0, 0, 0, 0, 122880, 0, 122880,
  /* 33753 */ 122880, 122880, 122880, 122880, 0, 0, 0, 411, 0, 0, 0, 411, 69632, 73728, 0, 368, 368, 0, 423, 65536, 368,
  /* 33774 */ 0, 0, 368, 423, 500, 502, 502, 502, 507, 502, 502, 502, 507, 502, 423, 423, 0, 329, 423, 0, 0, 423, 0, 0,
  /* 33798 */ 0, 0, 0, 0, 0, 0, 0, 1712, 0, 0, 0, 0, 0, 0, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423,
  /* 33824 */ 423, 423, 423, 423, 547, 570, 547, 570, 547, 547, 570, 547, 594, 570, 570, 570, 570, 570, 570, 570, 594,
  /* 33845 */ 594, 594, 547, 594, 594, 594, 594, 594, 594, 594, 570, 570, 547, 594, 570, 570, 594, 1, 12290, 0, 0, 0, 0,
  /* 33868 */ 677, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1175, 0, 0, 0, 0, 782, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 33901 */ 1238, 587, 587, 587, 1020, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 1954, 587, 587,
  /* 33921 */ 587, 0, 0, 1109, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1215, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 33954 */ 1226, 541, 1279, 541, 541, 541, 541, 541, 1291, 541, 541, 541, 541, 541, 541, 541, 541, 541, 1351, 541,
  /* 33974 */ 541, 541, 541, 541, 541, 1360, 914, 563, 563, 563, 563, 563, 563, 563, 563, 1371, 563, 563, 563, 563, 563,
  /* 33995 */ 563, 2643, 563, 563, 563, 563, 563, 563, 563, 563, 563, 1866, 563, 563, 563, 563, 563, 563, 1383, 563,
  /* 34015 */ 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 2286, 587, 587, 1992, 587, 587, 587,
  /* 34036 */ 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 2411, 541, 587, 563, 563, 3677, 587, 587, 587, 0, 0,
  /* 34057 */ 541, 541, 563, 563, 587, 587, 0, 541, 3203, 541, 541, 541, 3206, 541, 541, 541, 541, 541, 541, 541, 541,
  /* 34078 */ 541, 541, 1313, 541, 541, 541, 541, 541, 424, 424, 0, 0, 424, 439, 0, 424, 466, 466, 466, 466, 466, 466,
  /* 34100 */ 466, 466, 466, 466, 466, 466, 466, 466, 466, 466, 466, 466, 466, 492, 466, 492, 492, 492, 492, 492, 492,
  /* 34121 */ 492, 492, 492, 492, 492, 492, 492, 492, 492, 492, 492, 492, 492, 492, 492, 492, 492, 492, 548, 571, 548,
  /* 34142 */ 571, 548, 548, 571, 548, 595, 571, 571, 571, 571, 571, 571, 571, 595, 595, 595, 548, 595, 595, 595, 595,
  /* 34163 */ 595, 595, 595, 571, 571, 548, 595, 571, 571, 595, 1, 12290, 563, 563, 587, 587, 587, 587, 587, 78114,
  /* 34183 */ 1079, 0, 0, 1082, 1086, 0, 0, 1090, 0, 1213, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 781, 0, 0, 0, 0, 0,
  /* 34213 */ 1695, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1192, 0, 1195, 0, 0, 0, 0, 0, 0, 2093, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 34244 */ 0, 0, 1207, 0, 0, 0, 0, 2157, 0, 0, 0, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 3328,
  /* 34268 */ 541, 2201, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 2200, 563, 2415,
  /* 34288 */ 541, 541, 541, 2419, 563, 563, 563, 2423, 587, 587, 587, 0, 0, 0, 0, 0, 0, 541, 541, 541, 541, 541, 541,
  /* 34311 */ 541, 563, 3067, 563, 563, 563, 563, 563, 563, 563, 563, 563, 3253, 563, 563, 563, 563, 563, 563, 0, 2460,
  /* 34332 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1120, 0, 0, 0, 0, 0, 2791, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 34364 */ 1262, 0, 0, 0, 0, 2943, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 541, 587, 563, 541,
  /* 34386 */ 541, 0, 0, 0, 0, 2971, 0, 0, 0, 2975, 0, 0, 0, 0, 0, 2981, 0, 0, 0, 0, 0, 3195, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 34417 */ 0, 0, 233472, 0, 0, 0, 0, 0, 0, 0, 2994, 0, 2996, 0, 0, 0, 0, 0, 0, 0, 0, 3004, 0, 0, 0, 0, 0, 3383, 3384,
  /* 34446 */ 0, 3180, 0, 0, 0, 0, 0, 3392, 0, 0, 0, 0, 0, 3181, 0, 3183, 0, 0, 0, 0, 0, 0, 0, 3190, 0, 0, 0, 0, 3009,
  /* 34475 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1606, 0, 0, 0, 0, 541, 3063, 541, 541, 541, 3066, 563, 563, 563, 563,
  /* 34501 */ 563, 563, 563, 563, 563, 563, 3083, 563, 563, 563, 563, 563, 563, 563, 3105, 563, 563, 563, 3108, 587,
  /* 34521 */ 587, 587, 587, 587, 587, 587, 587, 587, 1509, 587, 587, 587, 587, 587, 587, 3144, 587, 587, 3147, 587,
  /* 34541 */ 587, 587, 541, 587, 563, 541, 541, 563, 563, 587, 587, 0, 0, 3295, 0, 0, 0, 0, 0, 0, 0, 0, 274432, 274432,
  /* 34565 */ 274432, 0, 274432, 274432, 274432, 274432, 541, 541, 541, 541, 3216, 541, 541, 541, 541, 541, 541, 541,
  /* 34583 */ 3221, 541, 3223, 541, 541, 541, 541, 541, 3229, 541, 541, 541, 563, 563, 563, 563, 563, 563, 563, 941,
  /* 34603 */ 563, 563, 563, 563, 563, 563, 563, 563, 563, 587, 587, 3260, 587, 587, 587, 587, 587, 587, 587, 587, 587,
  /* 34624 */ 587, 3274, 587, 587, 587, 587, 587, 587, 3280, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 541,
  /* 34645 */ 587, 563, 541, 2722, 563, 3350, 563, 563, 563, 563, 563, 563, 563, 563, 587, 587, 587, 587, 587, 587, 587,
  /* 34666 */ 587, 3655, 587, 587, 587, 587, 3363, 587, 587, 587, 587, 587, 587, 587, 587, 587, 3369, 587, 0, 0, 0, 541,
  /* 34688 */ 587, 563, 541, 541, 541, 541, 541, 0, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563,
  /* 34709 */ 1840, 563, 587, 587, 3668, 3669, 587, 587, 0, 0, 0, 0, 541, 541, 541, 541, 563, 563, 563, 924, 928, 931,
  /* 34731 */ 563, 939, 563, 563, 563, 954, 956, 959, 0, 690, 691, 0, 0, 0, 0, 696, 0, 0, 0, 364, 364, 364, 0, 0, 0, 0,
  /* 34757 */ 0, 375, 0, 0, 0, 0, 367, 0, 384, 0, 350, 0, 0, 829, 0, 0, 0, 0, 0, 0, 0, 0, 0, 758, 0, 0, 0, 0, 0, 0, 758,
  /* 34788 */ 0, 0, 0, 0, 0, 758, 758, 0, 910, 541, 563, 563, 563, 563, 927, 563, 563, 563, 563, 563, 563, 563, 563,
  /* 34811 */ 563, 1432, 563, 563, 1436, 563, 563, 563, 563, 983, 587, 587, 587, 587, 1057, 78114, 1079, 0, 0, 0, 0, 0,
  /* 34833 */ 0, 0, 0, 159744, 0, 0, 0, 0, 0, 0, 0, 0, 562, 585, 562, 585, 562, 562, 585, 562, 587, 1521, 587, 587, 587,
  /* 34858 */ 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 1514, 587, 0, 0, 0, 1721, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 34883 */ 0, 0, 0, 0, 1588, 1589, 0, 0, 0, 2040, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1134, 0, 2171, 541, 541,
  /* 34912 */ 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 2211, 3288, 541, 3290, 563, 3292, 587, 0,
  /* 34933 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3514, 467, 467, 485, 493, 485, 493, 493, 493, 493, 493, 493, 493,
  /* 34959 */ 493, 493, 518, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 533, 526, 526, 526, 526, 533, 526, 526,
  /* 34980 */ 526, 526, 526, 526, 526, 526, 549, 572, 549, 572, 549, 549, 572, 549, 596, 572, 572, 572, 572, 572, 572,
  /* 35001 */ 572, 596, 596, 596, 549, 596, 596, 596, 596, 596, 596, 596, 572, 572, 549, 596, 572, 572, 596, 1, 12290,
  /* 35022 */ 818, 0, 795, 0, 0, 0, 0, 818, 0, 0, 0, 0, 0, 818, 818, 0, 0, 0, 0, 0, 3561, 0, 0, 0, 541, 541, 541, 541,
  /* 35050 */ 541, 541, 541, 541, 3464, 541, 3466, 3467, 541, 3469, 0, 0, 0, 795, 0, 0, 0, 0, 0, 0, 836, 791, 0, 0, 836,
  /* 35075 */ 0, 0, 0, 0, 0, 131072, 0, 0, 131072, 0, 0, 131072, 0, 0, 0, 0, 0, 0, 0, 69632, 73728, 0, 419, 419, 0, 0,
  /* 35101 */ 65536, 419, 857, 541, 865, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 3527,
  /* 35121 */ 563, 911, 541, 563, 563, 563, 563, 563, 930, 563, 938, 563, 563, 563, 563, 563, 563, 1850, 563, 563, 563,
  /* 35142 */ 563, 563, 563, 563, 563, 563, 0, 587, 587, 587, 587, 587, 587, 587, 1012, 587, 587, 587, 587, 587, 587,
  /* 35163 */ 587, 587, 587, 587, 587, 587, 587, 1058, 1072, 984, 587, 587, 587, 1077, 1058, 78114, 1079, 0, 0, 0, 0, 0,
  /* 35185 */ 0, 0, 0, 212992, 0, 0, 0, 2179072, 2179072, 2179072, 2179072, 0, 0, 0, 0, 1139, 1140, 0, 0, 0, 0, 0, 364,
  /* 35208 */ 364, 0, 0, 0, 0, 0, 0, 1627, 1628, 1629, 0, 0, 0, 0, 0, 0, 0, 0, 2766, 0, 0, 0, 0, 0, 0, 0, 0, 2779, 0, 0,
  /* 35238 */ 0, 0, 0, 0, 0, 0, 2097, 0, 0, 0, 0, 0, 0, 0, 0, 2151, 0, 0, 0, 0, 0, 0, 0, 0, 2506, 0, 0, 0, 0, 0, 2512,
  /* 35269 */ 0, 1180, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1620, 1340, 541, 541, 1344, 541, 541, 541, 541, 541,
  /* 35296 */ 1350, 541, 541, 541, 1357, 541, 541, 541, 541, 541, 1796, 541, 541, 541, 541, 541, 541, 541, 541, 541,
  /* 35316 */ 541, 541, 2822, 541, 541, 541, 541, 1403, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563,
  /* 35337 */ 563, 563, 2638, 563, 563, 1442, 563, 563, 563, 1449, 563, 563, 26028, 1360, 988, 587, 587, 587, 587, 587,
  /* 35357 */ 587, 3285, 587, 587, 587, 587, 587, 587, 541, 587, 563, 587, 587, 1487, 587, 587, 587, 587, 587, 587, 587,
  /* 35378 */ 1495, 587, 587, 587, 587, 587, 587, 2365, 587, 587, 587, 587, 587, 587, 587, 587, 587, 2691, 587, 587,
  /* 35398 */ 587, 587, 587, 587, 587, 587, 587, 1524, 587, 587, 1528, 587, 587, 587, 587, 587, 1534, 587, 587, 587,
  /* 35418 */ 587, 587, 1492, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 1510, 587, 587, 587, 587, 587, 1541,
  /* 35438 */ 587, 587, 0, 541, 587, 563, 541, 541, 541, 541, 541, 563, 563, 563, 563, 587, 587, 587, 587, 0, 0, 0,
  /* 35460 */ 2730, 0, 0, 0, 0, 0, 1595, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1633, 0, 0, 0, 0, 0, 1655, 0, 0, 0, 0, 0,
  /* 35491 */ 0, 0, 0, 0, 1664, 0, 0, 0, 0, 0, 0, 1643, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2111, 0, 0, 0, 0, 0, 1718, 0, 0,
  /* 35522 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1652, 1702, 0, 0, 0, 0, 0, 541, 541, 541, 541, 541, 541, 541, 541,
  /* 35550 */ 541, 541, 3326, 541, 541, 541, 563, 563, 563, 1893, 563, 563, 563, 563, 563, 563, 1901, 563, 563, 563,
  /* 35570 */ 563, 563, 563, 2864, 563, 2866, 563, 563, 563, 563, 563, 563, 563, 3354, 563, 563, 587, 587, 587, 587,
  /* 35590 */ 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 1057, 587, 1944, 587, 587, 587, 587, 587, 587,
  /* 35611 */ 587, 587, 587, 587, 587, 587, 587, 587, 1940, 587, 587, 1974, 587, 587, 587, 587, 1980, 587, 587, 587,
  /* 35631 */ 587, 587, 587, 587, 587, 1989, 2007, 2009, 587, 587, 587, 587, 587, 541, 587, 563, 541, 541, 541, 541,
  /* 35651 */ 563, 563, 563, 563, 587, 587, 587, 587, 2030, 0, 2032, 0, 0, 2079, 0, 0, 0, 2082, 0, 0, 0, 0, 0, 2088, 0,
  /* 35676 */ 0, 0, 0, 0, 0, 1659, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2989, 0, 0, 0, 0, 0, 2104, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 35708 */ 0, 0, 0, 0, 2115, 0, 0, 0, 0, 0, 131072, 0, 131072, 131072, 131072, 131072, 0, 131072, 131072, 131072,
  /* 35728 */ 131072, 131072, 131072, 0, 0, 0, 0, 131072, 0, 0, 131072, 1, 12290, 0, 0, 563, 563, 563, 563, 563, 563,
  /* 35749 */ 2250, 563, 563, 563, 563, 563, 563, 563, 1851, 563, 563, 563, 563, 1855, 563, 563, 563, 587, 587, 587,
  /* 35769 */ 587, 2349, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 1985, 587, 587, 1988, 587, 2262, 541,
  /* 35789 */ 541, 541, 541, 563, 563, 563, 563, 587, 587, 587, 587, 0, 0, 0, 0, 0, 2732, 0, 2450, 0, 0, 0, 0, 0, 0, 0,
  /* 35815 */ 0, 2455, 0, 0, 2458, 0, 0, 0, 0, 0, 385, 0, 69632, 73728, 0, 0, 0, 0, 0, 65536, 0, 0, 0, 0, 0, 2462, 0, 0,
  /* 35843 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 1616, 0, 0, 0, 0, 2473, 0, 0, 0, 0, 0, 0, 0, 2481, 0, 0, 0, 2483, 0, 0, 0, 0,
  /* 35874 */ 0, 0, 1681, 0, 0, 0, 0, 0, 0, 1687, 0, 1689, 0, 2500, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2510, 0, 0, 0, 0, 0,
  /* 35904 */ 0, 1723, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2727936, 0, 0, 0, 3084288, 0, 2524, 541, 541, 541, 541, 541, 541,
  /* 35929 */ 541, 541, 541, 541, 541, 541, 541, 541, 541, 2536, 541, 541, 2552, 541, 541, 541, 541, 541, 541, 541, 541,
  /* 35950 */ 541, 541, 541, 541, 541, 905, 541, 541, 2564, 541, 541, 541, 541, 541, 541, 2571, 541, 541, 541, 541, 541,
  /* 35971 */ 541, 541, 541, 541, 1768, 541, 541, 541, 541, 541, 541, 541, 2578, 541, 541, 541, 2581, 541, 541, 541,
  /* 35991 */ 541, 541, 541, 541, 0, 0, 0, 0, 0, 0, 2056, 0, 2057, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1716, 0, 0,
  /* 36021 */ 0, 0, 563, 2588, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 1903, 1904, 563, 563, 563, 2611,
  /* 36042 */ 563, 563, 563, 563, 563, 563, 2616, 563, 563, 563, 563, 563, 563, 563, 2622, 587, 587, 587, 587, 2702,
  /* 36062 */ 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 2710, 587, 587, 587, 2713, 587, 587, 587, 587, 587, 587,
  /* 36083 */ 587, 2718, 2719, 2720, 541, 541, 541, 541, 541, 1812, 541, 541, 541, 541, 541, 541, 541, 541, 541, 1360,
  /* 36103 */ 2758, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1705, 0, 2773, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 36135 */ 0, 1178, 0, 0, 0, 2789, 0, 0, 0, 0, 2794, 0, 0, 0, 2796, 0, 0, 0, 0, 0, 0, 0, 205106, 0, 0, 0, 0, 0, 0, 0,
  /* 36165 */ 0, 0, 386, 0, 0, 0, 0, 0, 386, 541, 541, 541, 541, 2814, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541,
  /* 36189 */ 541, 541, 1333, 541, 541, 541, 541, 541, 2848, 541, 541, 541, 541, 541, 541, 0, 0, 563, 563, 563, 2856,
  /* 36210 */ 563, 563, 563, 563, 2641, 2642, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 26028, 1360, 988, 587,
  /* 36230 */ 587, 587, 587, 2905, 587, 587, 587, 587, 587, 2910, 587, 587, 587, 587, 587, 587, 587, 587, 587, 1935,
  /* 36250 */ 587, 587, 587, 587, 1941, 587, 3006, 0, 0, 0, 0, 3010, 0, 0, 0, 0, 3015, 0, 0, 0, 0, 0, 0, 0, 3385, 3180,
  /* 36276 */ 0, 0, 0, 0, 0, 0, 0, 0, 249856, 249856, 249856, 249856, 249856, 249856, 249856, 249856, 1, 12290, 3191, 0,
  /* 36296 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2053, 3300, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3180, 0, 0, 0, 0, 0,
  /* 36328 */ 0, 0, 225890, 225890, 225890, 225890, 225740, 225890, 225890, 225890, 225890, 225890, 225890, 225740,
  /* 36342 */ 225740, 225740, 225740, 225901, 225740, 225740, 225901, 1, 12290, 563, 563, 563, 3340, 563, 563, 563, 563,
  /* 36359 */ 563, 563, 563, 563, 563, 563, 563, 563, 2283, 563, 563, 563, 563, 563, 563, 3351, 563, 563, 563, 563, 563,
  /* 36380 */ 563, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 3359, 587, 587, 587, 587, 587, 587,
  /* 36401 */ 587, 587, 587, 587, 587, 587, 587, 587, 587, 1942, 3370, 587, 587, 587, 587, 587, 587, 541, 541, 563, 563,
  /* 36422 */ 587, 587, 0, 0, 0, 0, 3297, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3394, 0, 541, 541, 541, 541, 541, 541, 541, 541,
  /* 36448 */ 541, 541, 541, 541, 3211, 541, 541, 3486, 587, 587, 587, 587, 587, 587, 587, 587, 3495, 587, 3497, 3498,
  /* 36468 */ 587, 3500, 587, 0, 0, 0, 541, 587, 563, 541, 541, 541, 904, 541, 0, 563, 563, 563, 563, 977, 563, 563,
  /* 36490 */ 563, 563, 0, 587, 587, 587, 587, 587, 587, 1931, 587, 587, 587, 587, 587, 587, 587, 587, 587, 2678, 587,
  /* 36511 */ 587, 587, 2681, 587, 587, 3502, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 541, 541, 541, 854, 541, 541,
  /* 36537 */ 3612, 541, 3613, 541, 541, 541, 563, 563, 563, 563, 563, 563, 3619, 563, 563, 563, 563, 2861, 563, 563,
  /* 36557 */ 563, 563, 563, 563, 563, 563, 563, 563, 563, 2294, 563, 563, 563, 563, 3620, 563, 563, 563, 563, 587, 587,
  /* 36578 */ 587, 587, 587, 587, 3627, 587, 3628, 587, 587, 0, 3632, 0, 0, 0, 0, 541, 541, 541, 541, 541, 3641, 541,
  /* 36600 */ 563, 3472, 563, 3474, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 3243, 563, 563, 563,
  /* 36620 */ 563, 563, 587, 587, 587, 587, 0, 0, 541, 541, 563, 563, 587, 587, 3683, 3684, 3685, 3686, 0, 541, 563,
  /* 36641 */ 587, 0, 541, 563, 587, 0, 541, 563, 587, 0, 0, 0, 0, 0, 0, 0, 0, 3180, 0, 0, 0, 0, 0, 0, 0, 597, 573, 573,
  /* 36669 */ 573, 573, 573, 573, 573, 597, 597, 597, 550, 597, 597, 597, 597, 597, 597, 597, 573, 573, 550, 597, 573,
  /* 36690 */ 573, 597, 1, 12290, 0, 0, 737, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1119, 0, 0, 0, 0, 2041, 0, 0, 0, 0,
  /* 36720 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 1133, 0, 0, 402, 0, 0, 0, 0, 380, 0, 69632, 73728, 0, 0, 0, 0, 425, 65536, 0,
  /* 36748 */ 0, 0, 0, 0, 155648, 155648, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 541, 425, 425, 0, 0, 425, 0, 445,
  /* 36777 */ 425, 468, 468, 468, 475, 468, 468, 468, 468, 468, 468, 468, 468, 475, 468, 468, 468, 468, 468, 468, 468,
  /* 36798 */ 468, 482, 468, 494, 468, 494, 494, 494, 494, 494, 494, 494, 494, 494, 494, 494, 494, 494, 494, 494, 494,
  /* 36819 */ 494, 494, 494, 494, 494, 494, 494, 538, 551, 574, 551, 574, 551, 551, 574, 551, 598, 574, 574, 574, 574,
  /* 36840 */ 574, 574, 574, 598, 598, 598, 551, 598, 598, 598, 598, 598, 598, 598, 574, 574, 551, 598, 574, 574, 598,
  /* 36861 */ 1, 12290, 0, 0, 0, 660, 661, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1632, 0, 0, 0, 0, 827, 0, 0, 0, 661, 0, 0,
  /* 36891 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 742, 661, 0, 0, 729, 0, 0, 0, 0, 0, 541, 844, 541, 541, 541, 541, 541,
  /* 36920 */ 2177, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 2845, 541, 541, 541, 541, 859, 541, 541,
  /* 36941 */ 541, 541, 541, 541, 541, 541, 541, 541, 897, 541, 541, 541, 541, 541, 541, 2817, 541, 2819, 541, 541, 541,
  /* 36962 */ 541, 541, 541, 541, 541, 2572, 541, 541, 541, 541, 541, 541, 541, 541, 1349, 541, 541, 541, 541, 541, 541,
  /* 36983 */ 541, 541, 1752, 541, 541, 541, 541, 541, 541, 541, 541, 1767, 541, 541, 541, 541, 541, 541, 541, 541,
  /* 37003 */ 1782, 541, 541, 541, 541, 541, 541, 541, 541, 1815, 1817, 541, 541, 541, 541, 541, 1360, 563, 563, 563,
  /* 37023 */ 970, 563, 563, 563, 563, 563, 0, 587, 587, 990, 587, 587, 587, 587, 587, 1526, 587, 587, 587, 587, 587,
  /* 37044 */ 587, 587, 587, 587, 587, 1953, 587, 587, 587, 587, 587, 1006, 587, 587, 587, 587, 587, 587, 587, 587, 587,
  /* 37065 */ 587, 1044, 587, 587, 587, 587, 587, 587, 3365, 587, 587, 587, 587, 587, 587, 587, 587, 587, 3123, 587,
  /* 37085 */ 587, 587, 587, 587, 587, 587, 563, 563, 587, 587, 1044, 587, 587, 290, 1079, 0, 0, 1082, 1086, 0, 0, 1090,
  /* 37107 */ 1094, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1101, 1102, 0, 0, 0, 0, 0, 0, 0, 286720, 0, 0, 0, 0, 0, 0, 0, 0, 0, 757,
  /* 37137 */ 0, 0, 0, 0, 762, 0, 0, 0, 0, 1229, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1674, 0, 0, 0, 0, 0, 1102, 0, 0, 0,
  /* 37169 */ 0, 0, 0, 1260, 1261, 0, 0, 1101, 0, 0, 0, 0, 0, 437, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3198, 3199, 0, 0, 0,
  /* 37199 */ 541, 1306, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 0, 2241, 1360, 914, 563,
  /* 37220 */ 1363, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 1377, 1384, 563, 563, 563, 563, 563, 563,
  /* 37240 */ 563, 563, 563, 1398, 563, 563, 563, 563, 563, 563, 2887, 563, 563, 563, 2890, 563, 2892, 563, 563, 563,
  /* 37260 */ 1418, 563, 563, 563, 563, 563, 563, 563, 1431, 563, 563, 563, 563, 563, 563, 563, 1897, 563, 563, 563,
  /* 37280 */ 563, 563, 563, 563, 563, 1395, 563, 563, 563, 563, 563, 563, 563, 587, 587, 1523, 587, 587, 587, 587, 587,
  /* 37301 */ 587, 587, 587, 587, 587, 587, 1537, 587, 0, 0, 0, 541, 587, 563, 541, 541, 541, 1067, 911, 0, 563, 563,
  /* 37323 */ 563, 563, 563, 3342, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 2645, 563, 563, 563, 563, 563, 563,
  /* 37344 */ 563, 587, 587, 1523, 587, 587, 1079, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2493, 2494, 0, 0, 2497, 0, 541, 541,
  /* 37369 */ 541, 1746, 1747, 541, 541, 541, 541, 1754, 541, 541, 541, 541, 541, 541, 541, 1290, 541, 1295, 541, 541,
  /* 37389 */ 1299, 541, 541, 1302, 541, 541, 541, 541, 1795, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541,
  /* 37409 */ 541, 1335, 541, 541, 541, 1825, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563,
  /* 37429 */ 1841, 1842, 563, 563, 563, 563, 1849, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 3347, 563, 563,
  /* 37449 */ 563, 563, 3348, 1890, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 2649,
  /* 37469 */ 587, 1945, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 2372, 587, 587, 1959,
  /* 37489 */ 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 2384, 2385, 587, 587, 587, 587,
  /* 37509 */ 2012, 587, 587, 541, 587, 563, 541, 541, 541, 541, 563, 563, 587, 587, 2961, 0, 0, 2964, 2965, 0, 0, 0, 0,
  /* 37532 */ 0, 0, 0, 3197, 0, 0, 0, 0, 0, 0, 3200, 0, 0, 0, 0, 2054, 0, 2055, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2064, 541,
  /* 37561 */ 541, 541, 541, 2216, 541, 541, 541, 541, 541, 541, 2221, 541, 541, 541, 541, 541, 541, 1286, 541, 541,
  /* 37581 */ 541, 541, 541, 541, 541, 541, 541, 541, 1818, 541, 541, 541, 541, 1360, 541, 2226, 541, 541, 541, 541,
  /* 37601 */ 541, 541, 541, 541, 541, 541, 541, 541, 0, 0, 563, 563, 563, 563, 563, 563, 563, 563, 2302, 563, 563, 563,
  /* 37623 */ 563, 563, 563, 2307, 563, 563, 563, 563, 563, 563, 3079, 563, 563, 563, 563, 563, 563, 563, 563, 563, 0,
  /* 37644 */ 587, 587, 989, 587, 587, 587, 563, 2313, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 0, 0,
  /* 37666 */ 587, 587, 587, 587, 587, 587, 2389, 587, 587, 587, 587, 587, 587, 2394, 587, 587, 587, 587, 587, 587,
  /* 37686 */ 2377, 587, 587, 587, 587, 587, 587, 587, 587, 587, 1952, 587, 587, 587, 587, 1956, 587, 587, 2400, 587,
  /* 37706 */ 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 541, 587, 0, 0, 0, 541, 587, 563, 541, 541, 895,
  /* 37728 */ 541, 541, 0, 563, 563, 968, 0, 2437, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1184, 1184, 587, 2671, 587,
  /* 37755 */ 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 2931, 587, 0, 0, 0, 2736, 0, 0, 0, 0, 0,
  /* 37779 */ 0, 0, 0, 0, 0, 0, 0, 1703, 0, 0, 0, 2787, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2797, 0, 0, 0, 0, 0, 0, 2068,
  /* 37810 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 364, 0, 0, 0, 0, 131072, 131072, 541, 541, 541, 2813, 541, 541, 541, 541, 541,
  /* 37835 */ 541, 2821, 541, 541, 541, 541, 541, 541, 541, 2832, 541, 541, 541, 541, 541, 541, 541, 541, 541, 2573,
  /* 37855 */ 541, 541, 541, 541, 541, 541, 563, 563, 563, 2860, 563, 563, 563, 563, 563, 563, 2868, 563, 563, 563, 563,
  /* 37876 */ 563, 563, 3080, 563, 563, 563, 563, 563, 563, 563, 563, 563, 1883, 563, 563, 563, 563, 563, 563, 0, 0,
  /* 37897 */ 3008, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1161, 0, 0, 541, 541, 3227, 541, 541, 541, 541, 541, 541,
  /* 37923 */ 563, 563, 563, 563, 563, 563, 563, 3073, 563, 563, 563, 3571, 541, 3573, 541, 541, 541, 563, 563, 563,
  /* 37943 */ 563, 563, 563, 563, 3583, 563, 3585, 587, 3667, 587, 587, 587, 587, 0, 0, 0, 0, 541, 541, 541, 541, 563,
  /* 37965 */ 563, 915, 563, 563, 563, 563, 563, 563, 946, 563, 563, 563, 563, 563, 1848, 563, 563, 563, 563, 563, 563,
  /* 37986 */ 563, 563, 563, 563, 3097, 563, 3099, 563, 563, 563, 469, 469, 469, 453, 469, 453, 453, 453, 453, 453, 453,
  /* 38007 */ 453, 453, 453, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 552, 575,
  /* 38028 */ 552, 575, 552, 552, 575, 552, 599, 575, 575, 575, 575, 575, 575, 575, 599, 599, 599, 552, 599, 599, 599,
  /* 38049 */ 599, 599, 599, 599, 575, 575, 552, 599, 575, 575, 599, 1, 12290, 0, 0, 0, 662, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 38074 */ 541, 541, 541, 541, 3030, 541, 541, 541, 541, 3034, 541, 860, 541, 541, 874, 541, 541, 541, 541, 541, 541,
  /* 38095 */ 541, 541, 541, 541, 541, 541, 1770, 541, 541, 541, 1007, 587, 587, 1021, 587, 587, 587, 587, 587, 587,
  /* 38115 */ 587, 587, 587, 587, 587, 587, 1971, 587, 587, 587, 0, 1123, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 38141 */ 1210, 0, 1251, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2145, 0, 0, 0, 1268, 0, 0, 0, 0, 0, 0, 541,
  /* 38171 */ 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 1360, 541, 541, 541, 1323, 541, 541,
  /* 38192 */ 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 2534, 541, 541, 541, 1341, 541, 541, 541, 541, 541,
  /* 38213 */ 1348, 541, 541, 541, 541, 541, 541, 541, 541, 541, 2234, 541, 541, 541, 541, 0, 0, 1440, 563, 563, 563,
  /* 38234 */ 563, 563, 563, 563, 563, 26028, 1360, 988, 587, 587, 587, 587, 587, 587, 3435, 587, 587, 587, 587, 587,
  /* 38254 */ 587, 587, 541, 563, 587, 587, 587, 587, 1525, 587, 587, 587, 587, 587, 1532, 587, 587, 587, 587, 587, 587,
  /* 38275 */ 2392, 587, 587, 587, 587, 587, 587, 587, 587, 587, 1472, 587, 587, 587, 587, 1482, 587, 563, 587, 587,
  /* 38295 */ 587, 1557, 587, 1079, 0, 1561, 0, 0, 0, 1567, 0, 0, 0, 0, 0, 0, 2095, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 38322 */ 131072, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 324, 1573, 0, 0, 0, 1579, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 38353 */ 0, 0, 0, 1648, 0, 0, 0, 0, 541, 541, 541, 1779, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541,
  /* 38376 */ 541, 541, 2548, 541, 541, 563, 1843, 563, 563, 563, 563, 563, 563, 563, 563, 563, 1854, 563, 563, 563,
  /* 38396 */ 563, 563, 1879, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 3344, 563, 563, 563, 563, 563, 563, 563,
  /* 38417 */ 563, 1865, 563, 563, 563, 563, 563, 563, 563, 2065, 2066, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1590,
  /* 38443 */ 1591, 2117, 0, 0, 2120, 2121, 0, 0, 0, 0, 0, 2127, 0, 0, 0, 0, 0, 0, 0, 3563, 0, 541, 541, 541, 541, 541,
  /* 38469 */ 541, 541, 541, 541, 3209, 541, 541, 541, 541, 541, 541, 2213, 541, 541, 541, 541, 2218, 541, 541, 541,
  /* 38489 */ 541, 541, 541, 541, 541, 541, 541, 2182, 541, 541, 541, 541, 541, 2299, 563, 563, 563, 563, 2304, 563,
  /* 38509 */ 563, 563, 563, 563, 563, 563, 563, 563, 563, 1917, 563, 26028, 0, 587, 587, 587, 2386, 587, 587, 587, 587,
  /* 38530 */ 2391, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 2001, 587, 587, 587, 587, 587, 2006, 541, 541,
  /* 38550 */ 541, 3037, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 2846, 541, 541, 563, 563,
  /* 38570 */ 3077, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 1887, 1888, 563, 587, 587, 587,
  /* 38590 */ 3119, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 1986, 587, 587, 587, 563, 563, 3247,
  /* 38610 */ 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 2296, 563, 563, 587, 0, 0, 0, 3445, 0, 0,
  /* 38633 */ 0, 0, 3180, 0, 0, 0, 0, 0, 0, 0, 2096, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2152, 0, 0, 0, 0, 0, 0, 0, 0, 541, 541,
  /* 38664 */ 541, 541, 3460, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 2207, 541, 541, 541, 541, 541, 563, 587,
  /* 38685 */ 587, 587, 587, 3491, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 2354, 587, 587, 587, 587, 587, 587,
  /* 38706 */ 563, 563, 563, 563, 3623, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 2395, 587, 587, 587, 587,
  /* 38727 */ 587, 3631, 0, 0, 0, 0, 0, 0, 541, 541, 541, 541, 541, 541, 541, 563, 563, 920, 563, 563, 563, 563, 563,
  /* 38750 */ 563, 949, 951, 563, 563, 563, 563, 563, 3352, 563, 563, 563, 563, 587, 587, 587, 587, 587, 3358, 387, 389,
  /* 38771 */ 339, 0, 0, 0, 0, 0, 0, 338, 0, 0, 339, 0, 0, 0, 0, 0, 0, 2123, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 167936,
  /* 38800 */ 167936, 167936, 167936, 167936, 167936, 167936, 167936, 0, 0, 0, 386, 0, 0, 0, 69632, 73728, 0, 0, 0, 0,
  /* 38820 */ 0, 65536, 0, 0, 0, 0, 0, 172032, 0, 172032, 0, 0, 0, 0, 0, 0, 0, 0, 0, 364, 298, 0, 0, 0, 0, 0, 0, 0, 434,
  /* 38849 */ 338, 0, 0, 446, 0, 470, 470, 470, 470, 470, 470, 470, 470, 470, 480, 470, 470, 481, 480, 470, 470, 470,
  /* 38871 */ 476, 470, 470, 470, 470, 470, 470, 470, 470, 470, 470, 470, 480, 470, 481, 480, 470, 470, 470, 476, 503,
  /* 38892 */ 503, 503, 503, 503, 503, 503, 503, 503, 470, 470, 470, 470, 470, 470, 470, 470, 553, 576, 553, 576, 553,
  /* 38913 */ 553, 576, 553, 600, 576, 576, 576, 576, 576, 576, 576, 600, 600, 600, 553, 600, 600, 600, 600, 600, 600,
  /* 38934 */ 600, 576, 576, 553, 600, 576, 576, 600, 1, 12290, 0, 0, 0, 0, 693, 0, 0, 0, 0, 0, 0, 364, 364, 364, 0, 0,
  /* 38960 */ 0, 0, 0, 440, 0, 331, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 0,
  /* 38983 */ 750, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1636, 0, 0, 0, 0, 663, 0, 788, 0, 0, 0, 0, 0, 0, 0, 792, 0,
  /* 39015 */ 0, 0, 0, 0, 441, 0, 453, 469, 469, 469, 469, 469, 469, 469, 469, 469, 479, 469, 469, 469, 469, 469, 469,
  /* 39038 */ 0, 0, 801, 0, 0, 0, 0, 0, 809, 0, 0, 0, 0, 706, 0, 0, 0, 0, 0, 0, 0, 0, 715, 0, 717, 0, 0, 0, 0, 0, 812,
  /* 39069 */ 0, 809, 792, 0, 0, 814, 0, 667, 0, 788, 0, 0, 0, 0, 0, 221184, 0, 221184, 221184, 221184, 221184, 221184,
  /* 39091 */ 221184, 221184, 221184, 221184, 221184, 1, 12290, 828, 0, 0, 0, 663, 831, 0, 788, 0, 0, 0, 0, 0, 837, 0,
  /* 39113 */ 0, 0, 0, 0, 443, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 729, 0, 0, 0, 0, 0, 0, 0, 792, 663, 841, 0, 0, 0, 0, 0, 0,
  /* 39145 */ 0, 541, 845, 541, 541, 541, 541, 541, 2191, 541, 541, 541, 541, 541, 541, 2197, 541, 2199, 541, 541, 861,
  /* 39166 */ 541, 541, 875, 541, 541, 541, 541, 888, 541, 541, 541, 541, 906, 541, 541, 541, 541, 541, 3332, 541, 541,
  /* 39187 */ 541, 541, 541, 541, 541, 563, 563, 563, 3069, 563, 563, 563, 563, 563, 563, 563, 961, 563, 563, 563, 563,
  /* 39208 */ 979, 563, 563, 563, 0, 587, 587, 991, 587, 587, 587, 587, 587, 1962, 587, 587, 587, 587, 587, 587, 587,
  /* 39229 */ 587, 587, 587, 3287, 587, 587, 587, 541, 587, 563, 1008, 587, 587, 1022, 587, 587, 587, 587, 1035, 587,
  /* 39249 */ 587, 587, 587, 1053, 587, 587, 587, 587, 587, 2945, 587, 587, 2948, 587, 587, 2951, 587, 2952, 2953, 2954,
  /* 39269 */ 0, 0, 0, 0, 1216, 0, 0, 0, 0, 1221, 0, 0, 0, 0, 0, 0, 0, 2108, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 749,
  /* 39301 */ 0, 0, 0, 1144, 1253, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1235, 0, 0, 0, 0, 0, 0, 0, 0, 1267, 0, 0, 0, 0, 0, 0,
  /* 39332 */ 0, 541, 541, 541, 541, 541, 541, 541, 541, 541, 1741, 541, 541, 541, 1309, 541, 541, 541, 541, 541, 541,
  /* 39353 */ 541, 541, 541, 541, 541, 541, 541, 3045, 541, 3047, 563, 587, 587, 1556, 587, 587, 1079, 0, 0, 0, 0, 0, 0,
  /* 39376 */ 0, 0, 0, 0, 2781, 0, 0, 0, 0, 0, 1621, 0, 0, 1624, 0, 1626, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2200253,
  /* 39404 */ 151552, 2200253, 0, 0, 541, 541, 541, 541, 1780, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541,
  /* 39424 */ 541, 1820, 541, 541, 1360, 1875, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563,
  /* 39444 */ 563, 2872, 1943, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 2359, 0, 0,
  /* 39465 */ 2135, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1177, 0, 0, 2146, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 39497 */ 0, 2156, 541, 541, 541, 2228, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 0, 0, 563, 563, 563, 563,
  /* 39519 */ 2857, 0, 0, 563, 563, 563, 2247, 563, 2249, 563, 563, 563, 563, 563, 563, 563, 563, 2320, 563, 563, 563,
  /* 39540 */ 563, 563, 0, 0, 563, 563, 563, 2315, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 0, 0, 988, 587,
  /* 39562 */ 587, 587, 587, 0, 0, 587, 587, 587, 2334, 587, 2336, 587, 587, 587, 587, 587, 587, 587, 587, 2393, 587,
  /* 39583 */ 587, 587, 587, 587, 587, 587, 587, 587, 587, 2402, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 541,
  /* 39604 */ 587, 0, 0, 0, 541, 587, 563, 541, 541, 897, 541, 541, 0, 563, 563, 970, 0, 0, 2438, 0, 0, 0, 0, 0, 0,
  /* 39629 */ 2443, 0, 0, 0, 2446, 2447, 0, 0, 0, 0, 0, 2134016, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1163264, 0, 0, 0, 2487, 0,
  /* 39656 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2498, 0, 0, 0, 2515, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2523, 0, 541, 541, 541, 541,
  /* 39686 */ 541, 3408, 541, 541, 3410, 563, 563, 563, 563, 3414, 563, 563, 563, 563, 1847, 563, 563, 563, 563, 563,
  /* 39706 */ 563, 563, 563, 563, 563, 563, 2308, 563, 563, 563, 563, 2537, 2538, 541, 541, 541, 541, 541, 2543, 541,
  /* 39726 */ 2545, 541, 541, 541, 541, 2549, 541, 541, 541, 541, 541, 3519, 541, 541, 541, 541, 541, 541, 541, 541,
  /* 39746 */ 563, 563, 563, 923, 563, 929, 563, 563, 942, 563, 563, 953, 563, 958, 563, 563, 2598, 563, 563, 2601,
  /* 39766 */ 2602, 563, 563, 563, 563, 563, 2607, 563, 2609, 563, 563, 563, 563, 2876, 563, 563, 563, 563, 563, 563,
  /* 39786 */ 563, 563, 563, 563, 563, 0, 2329, 587, 587, 587, 563, 563, 563, 2613, 563, 563, 563, 563, 563, 563, 563,
  /* 39807 */ 563, 2619, 563, 563, 563, 563, 563, 3421, 563, 563, 563, 3425, 563, 587, 587, 587, 587, 587, 587, 587,
  /* 39827 */ 587, 587, 587, 587, 587, 587, 587, 3501, 563, 2639, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563,
  /* 39848 */ 563, 563, 563, 1402, 563, 587, 587, 587, 2673, 587, 2675, 587, 587, 587, 587, 2679, 587, 587, 587, 587,
  /* 39868 */ 587, 587, 2676, 587, 587, 587, 587, 587, 587, 587, 587, 587, 1469, 1476, 587, 587, 587, 587, 587, 587,
  /* 39888 */ 587, 587, 2685, 587, 587, 587, 587, 587, 587, 587, 587, 2693, 587, 587, 587, 587, 587, 1979, 587, 587,
  /* 39908 */ 587, 587, 587, 587, 587, 587, 587, 587, 2926, 2927, 587, 587, 587, 587, 2930, 587, 587, 587, 587, 587,
  /* 39928 */ 2701, 587, 587, 587, 587, 2705, 587, 587, 587, 587, 587, 587, 587, 2352, 587, 587, 587, 587, 2357, 587,
  /* 39948 */ 587, 587, 0, 2745, 0, 0, 0, 0, 0, 0, 0, 2751, 2752, 2753, 0, 0, 0, 0, 0, 0, 0, 1134592, 0, 364, 0, 0, 0,
  /* 39975 */ 1134592, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2131, 0, 2772, 0, 2774, 0, 0, 0, 0, 2778, 0, 0, 0, 0,
  /* 40004 */ 2783, 0, 0, 2786, 541, 541, 2828, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 1771,
  /* 40025 */ 541, 541, 541, 541, 541, 2838, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 3337, 563,
  /* 40046 */ 563, 541, 2847, 541, 541, 2850, 541, 541, 2853, 541, 0, 0, 2854, 563, 563, 563, 563, 563, 2263, 563, 563,
  /* 40067 */ 563, 563, 563, 563, 563, 563, 563, 563, 1433, 563, 563, 563, 563, 563, 563, 563, 2875, 563, 563, 563, 563,
  /* 40088 */ 563, 563, 563, 563, 563, 563, 563, 563, 563, 2324, 0, 0, 563, 563, 563, 2896, 563, 563, 2899, 563, 563,
  /* 40109 */ 2902, 563, 0, 0, 2903, 587, 587, 587, 587, 587, 3284, 587, 587, 587, 587, 587, 587, 587, 541, 587, 563,
  /* 40130 */ 541, 541, 563, 563, 587, 587, 587, 2921, 587, 587, 2924, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587,
  /* 40151 */ 587, 2666, 587, 587, 587, 587, 3021, 0, 0, 3023, 0, 0, 541, 541, 3028, 541, 541, 541, 541, 541, 541, 541,
  /* 40173 */ 541, 2205, 2206, 541, 541, 541, 541, 541, 541, 0, 0, 3160, 0, 3162, 0, 0, 0, 3166, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 40199 */ 254413, 254413, 254413, 254413, 254413, 254413, 254413, 254413, 1, 12290, 3234, 3235, 563, 563, 563, 563,
  /* 40215 */ 3239, 3240, 563, 563, 563, 563, 563, 3244, 563, 563, 563, 563, 1446, 1447, 563, 563, 563, 26028, 1360,
  /* 40234 */ 988, 587, 587, 587, 587, 587, 1026, 587, 1031, 587, 1038, 587, 1041, 587, 587, 1055, 587, 563, 563, 563,
  /* 40254 */ 587, 587, 587, 587, 587, 587, 587, 3263, 3264, 587, 587, 587, 587, 587, 587, 3548, 587, 3550, 587, 587,
  /* 40274 */ 3552, 587, 587, 0, 0, 0, 0, 0, 0, 541, 541, 541, 3639, 3640, 541, 541, 563, 3268, 3269, 587, 587, 587,
  /* 40296 */ 587, 587, 3273, 587, 587, 587, 587, 587, 587, 587, 587, 2407, 587, 587, 587, 587, 587, 2412, 2413, 3279,
  /* 40316 */ 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 541, 587, 563, 2721, 541, 0, 0, 0, 3312, 0, 0,
  /* 40339 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2061, 0, 0, 0, 541, 3404, 541, 541, 541, 541, 541, 541, 563, 563, 563, 563,
  /* 40365 */ 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 3419, 563, 563, 563, 563, 563, 563, 563, 587, 587, 587,
  /* 40386 */ 587, 587, 3113, 587, 587, 587, 587, 587, 0, 3443, 0, 0, 3446, 0, 0, 0, 3180, 0, 0, 0, 0, 0, 0, 0, 2124, 0,
  /* 40412 */ 0, 0, 0, 0, 0, 0, 0, 0, 2767, 0, 0, 0, 0, 0, 0, 0, 0, 541, 541, 3458, 541, 541, 541, 541, 3463, 541, 541,
  /* 40439 */ 541, 541, 3468, 541, 541, 541, 541, 541, 3576, 563, 563, 563, 3580, 563, 563, 563, 563, 563, 563, 2290,
  /* 40459 */ 563, 563, 563, 563, 563, 563, 563, 563, 563, 1899, 563, 563, 563, 563, 563, 1906, 563, 587, 587, 3489,
  /* 40479 */ 587, 587, 587, 587, 3494, 587, 587, 587, 587, 3499, 587, 587, 587, 587, 587, 3364, 587, 587, 587, 587,
  /* 40499 */ 587, 587, 587, 587, 587, 587, 2664, 587, 587, 2667, 2668, 587, 587, 563, 563, 3645, 3646, 563, 563, 563,
  /* 40519 */ 587, 587, 587, 3651, 3652, 587, 587, 587, 0, 541, 587, 563, 541, 541, 541, 541, 541, 563, 563, 563, 563,
  /* 40540 */ 3070, 563, 563, 563, 563, 3074, 563, 563, 587, 0, 541, 563, 587, 3691, 3692, 3693, 3694, 0, 541, 563, 587,
  /* 40561 */ 0, 0, 0, 0, 0, 0, 0, 0, 3180, 0, 0, 0, 0, 0, 3453, 341, 342, 343, 344, 345, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 40591 */ 0, 1663, 0, 0, 0, 0, 0, 0, 0, 390, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2073, 0, 0, 0, 344, 344, 0, 345,
  /* 40621 */ 344, 0, 343, 454, 471, 471, 471, 471, 471, 471, 471, 471, 471, 471, 471, 471, 471, 471, 471, 471, 471,
  /* 40642 */ 471, 486, 495, 501, 495, 495, 505, 495, 495, 505, 505, 495, 505, 520, 520, 520, 520, 520, 520, 520, 520,
  /* 40663 */ 520, 520, 520, 520, 520, 520, 520, 520, 554, 577, 554, 577, 554, 554, 577, 554, 601, 577, 577, 577, 577,
  /* 40684 */ 577, 577, 577, 601, 601, 601, 554, 601, 601, 601, 601, 601, 601, 601, 577, 577, 554, 601, 577, 577, 601,
  /* 40705 */ 1, 12290, 657, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 672, 673, 0, 675, 676, 0, 0, 0, 0, 0, 682, 0, 0,
  /* 40735 */ 0, 0, 0, 0, 0, 2139, 0, 0, 0, 0, 0, 0, 0, 0, 0, 192971, 192971, 192971, 192971, 192971, 192971, 192971,
  /* 40757 */ 192971, 0, 0, 0, 692, 0, 0, 0, 0, 0, 0, 699, 364, 364, 364, 0, 0, 0, 0, 0, 646, 0, 0, 0, 0, 651, 652, 653,
  /* 40785 */ 654, 655, 656, 719, 0, 721, 0, 723, 0, 0, 0, 0, 0, 0, 0, 0, 0, 733, 0, 0, 0, 0, 0, 2134016, 0, 0, 0, 0, 0,
  /* 40814 */ 0, 0, 0, 1138688, 0, 0, 0, 0, 0, 2134016, 0, 0, 0, 0, 0, 0, 0, 746, 0, 0, 0, 0, 0, 0, 3172, 3173, 0, 0, 0,
  /* 40843 */ 0, 0, 0, 0, 0, 0, 2429, 0, 0, 0, 0, 0, 0, 0, 0, 0, 646, 752, 753, 754, 0, 0, 0, 0, 0, 760, 761, 0, 763,
  /* 40872 */ 764, 675, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 779, 780, 0, 0, 0, 0, 0, 678, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 40903 */ 2200252, 2200252, 2200252, 0, 0, 0, 761, 0, 0, 787, 0, 0, 0, 0, 0, 0, 0, 0, 0, 794, 0, 0, 0, 0, 0,
  /* 40928 */ 2134016, 0, 0, 0, 0, 0, 0, 57344, 0, 0, 0, 0, 0, 0, 709, 0, 0, 0, 0, 0, 0, 0, 0, 0, 299, 0, 0, 0, 0, 0, 0,
  /* 40959 */ 0, 0, 0, 0, 805, 0, 0, 692, 0, 0, 672, 0, 692, 0, 810, 675, 723, 0, 692, 811, 0, 0, 0, 0, 761, 0, 0, 0, 0,
  /* 40988 */ 0, 0, 0, 0, 282624, 282624, 282624, 282624, 282624, 282624, 282624, 282624, 282624, 0, 819, 0, 0, 0, 754,
  /* 41007 */ 822, 0, 0, 0, 754, 0, 0, 825, 699, 0, 0, 0, 0, 0, 2134756, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3180, 0, 0, 0,
  /* 41037 */ 0, 0, 0, 830, 0, 0, 0, 832, 0, 0, 0, 692, 699, 0, 0, 692, 830, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 692, 541,
  /* 41066 */ 541, 851, 855, 858, 541, 866, 541, 541, 541, 881, 883, 886, 541, 541, 541, 898, 902, 541, 541, 541, 541,
  /* 41087 */ 541, 2529, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 3043, 541, 541, 541, 541, 563, 563, 563,
  /* 41108 */ 971, 975, 563, 563, 563, 563, 0, 587, 587, 587, 998, 1002, 1005, 587, 1013, 587, 587, 587, 1028, 1030,
  /* 41128 */ 1033, 587, 587, 587, 1045, 1049, 587, 587, 587, 587, 587, 1995, 587, 587, 587, 587, 587, 2002, 587, 587,
  /* 41148 */ 587, 587, 587, 587, 3272, 587, 587, 587, 587, 587, 587, 587, 587, 3278, 975, 1073, 998, 587, 1045, 1049,
  /* 41168 */ 1078, 78114, 1079, 0, 0, 0, 0, 0, 0, 0, 0, 1134592, 0, 0, 1134592, 0, 0, 0, 0, 1134592, 0, 0, 0, 0, 1168,
  /* 41193 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1685, 1686, 0, 1688, 0, 0, 0, 1199, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1209,
  /* 41223 */ 0, 0, 0, 0, 0, 679, 751, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3186, 0, 0, 0, 3189, 0, 0, 0, 1214, 0, 0, 0, 0, 0,
  /* 41254 */ 0, 0, 0, 0, 0, 0, 0, 0, 1194, 1196, 0, 0, 0, 0, 0, 1255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1702, 0, 1704,
  /* 41284 */ 0, 0, 1321, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 1331, 541, 541, 1338, 541, 541, 541, 541,
  /* 41305 */ 541, 3614, 3615, 541, 563, 563, 563, 563, 563, 563, 563, 563, 3424, 563, 563, 587, 587, 587, 587, 587,
  /* 41325 */ 563, 563, 1443, 563, 563, 563, 563, 563, 563, 26028, 1360, 988, 587, 587, 587, 587, 587, 587, 3671, 0, 0,
  /* 41346 */ 0, 541, 541, 541, 3674, 563, 563, 1501, 587, 587, 1505, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587,
  /* 41367 */ 1515, 587, 0, 0, 0, 541, 587, 563, 541, 541, 899, 541, 541, 0, 563, 563, 972, 587, 1522, 587, 587, 587,
  /* 41389 */ 587, 587, 587, 587, 587, 587, 587, 1535, 587, 587, 587, 587, 587, 2013, 587, 541, 587, 563, 541, 541, 541,
  /* 41410 */ 541, 563, 563, 563, 563, 587, 587, 587, 587, 0, 0, 0, 0, 0, 0, 1666, 0, 1668, 0, 0, 0, 1670, 0, 748, 0, 0,
  /* 41436 */ 0, 0, 0, 0, 0, 0, 1159168, 364, 0, 0, 0, 0, 0, 0, 0, 0, 1693, 0, 0, 0, 0, 0, 0, 1700, 0, 0, 0, 0, 0, 0, 0,
  /* 41467 */ 2442, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2805, 0, 541, 541, 541, 541, 541, 541, 541, 1762, 541, 541, 541, 541,
  /* 41491 */ 541, 541, 541, 541, 1769, 541, 541, 541, 1773, 541, 541, 1778, 541, 541, 541, 541, 541, 541, 541, 541,
  /* 41511 */ 541, 541, 541, 541, 541, 1788, 541, 541, 0, 563, 1828, 563, 563, 563, 563, 563, 563, 563, 1835, 563, 563,
  /* 41532 */ 563, 563, 563, 563, 3094, 563, 563, 3096, 563, 563, 563, 563, 563, 563, 1880, 1881, 1882, 563, 563, 1885,
  /* 41552 */ 1886, 563, 563, 563, 563, 1908, 563, 563, 563, 563, 563, 563, 563, 563, 563, 26028, 0, 587, 1924, 587, 0,
  /* 41573 */ 0, 0, 541, 587, 563, 541, 541, 900, 541, 541, 0, 563, 563, 973, 587, 587, 587, 1960, 587, 587, 587, 1964,
  /* 41595 */ 587, 587, 1969, 587, 587, 587, 587, 587, 587, 2688, 587, 587, 587, 587, 587, 587, 2695, 587, 587, 563,
  /* 41615 */ 563, 587, 587, 587, 587, 0, 0, 0, 2031, 0, 1082, 0, 0, 0, 2033, 0, 1086, 0, 0, 0, 2035, 0, 1090, 0, 0, 0,
  /* 41641 */ 2037, 0, 1094, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1601, 2587, 0, 1825, 563, 563, 563, 563, 563,
  /* 41668 */ 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 2610, 2650, 563, 563, 563, 0, 0, 0, 2653, 0, 1921, 587,
  /* 41690 */ 587, 587, 587, 587, 587, 587, 3549, 587, 587, 587, 587, 587, 587, 0, 0, 3672, 0, 541, 541, 541, 541, 563,
  /* 41712 */ 563, 0, 0, 2969, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1197, 0, 0, 0, 0, 0, 3161, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 41744 */ 0, 0, 0, 0, 2101, 0, 0, 0, 0, 0, 3319, 541, 541, 541, 541, 541, 541, 541, 3324, 541, 541, 541, 541, 541,
  /* 41768 */ 541, 541, 3039, 541, 541, 541, 541, 541, 541, 541, 541, 541, 887, 541, 541, 541, 541, 541, 541, 587, 587,
  /* 41789 */ 3361, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 2709, 587, 587, 3379, 0, 0, 3382,
  /* 41810 */ 0, 0, 0, 0, 3180, 3387, 0, 0, 0, 0, 0, 0, 0, 2454, 0, 0, 0, 0, 0, 0, 0, 0, 306, 306, 306, 0, 0, 0, 0, 0,
  /* 41840 */ 541, 541, 541, 541, 3407, 541, 541, 541, 563, 563, 563, 3412, 563, 563, 563, 563, 563, 2277, 563, 563,
  /* 41860 */ 2280, 563, 563, 563, 563, 563, 563, 563, 3081, 563, 563, 563, 563, 563, 563, 563, 563, 3355, 563, 587,
  /* 41880 */ 587, 587, 587, 587, 587, 3416, 563, 563, 563, 563, 563, 3422, 563, 563, 563, 563, 587, 587, 587, 3428,
  /* 41900 */ 587, 0, 0, 0, 541, 587, 563, 850, 541, 1066, 901, 541, 0, 923, 563, 1071, 587, 587, 587, 3432, 587, 587,
  /* 41922 */ 587, 587, 587, 3438, 587, 587, 587, 587, 541, 563, 563, 563, 563, 2886, 563, 563, 563, 563, 563, 563, 563,
  /* 41943 */ 563, 563, 563, 563, 2606, 563, 2608, 563, 563, 0, 0, 541, 541, 541, 541, 541, 3461, 541, 541, 541, 3465,
  /* 41964 */ 541, 541, 541, 541, 541, 541, 1288, 541, 541, 541, 541, 1298, 541, 541, 541, 541, 541, 541, 1325, 541,
  /* 41984 */ 541, 541, 541, 541, 541, 541, 541, 541, 541, 1801, 541, 541, 541, 541, 541, 563, 587, 587, 587, 587, 587,
  /* 42005 */ 3492, 587, 587, 587, 3496, 587, 587, 587, 587, 587, 587, 2704, 587, 587, 587, 587, 587, 587, 587, 587,
  /* 42025 */ 587, 1470, 587, 587, 587, 587, 587, 587, 0, 0, 3657, 0, 541, 541, 541, 541, 541, 541, 563, 563, 563, 563,
  /* 42047 */ 563, 563, 936, 563, 563, 563, 563, 563, 563, 563, 563, 587, 3687, 3688, 3689, 3690, 0, 541, 563, 587, 0,
  /* 42068 */ 541, 563, 587, 0, 0, 0, 0, 0, 0, 0, 0, 3180, 0, 0, 3450, 3451, 0, 0, 388, 0, 0, 0, 392, 388, 0, 0, 0, 0,
  /* 42096 */ 0, 0, 0, 0, 0, 0, 302, 302, 0, 0, 0, 0, 0, 0, 0, 404, 0, 346, 0, 69632, 73728, 0, 0, 0, 0, 0, 65536, 0, 0,
  /* 42125 */ 0, 0, 0, 2387968, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3001, 0, 0, 0, 0, 0, 0, 435, 0, 0, 442, 0, 0, 0, 0, 0,
  /* 42156 */ 0, 0, 0, 0, 0, 303, 303, 0, 0, 0, 0, 521, 521, 521, 521, 0, 0, 0, 0, 0, 0, 521, 0, 0, 0, 521, 521, 521,
  /* 42184 */ 521, 521, 521, 521, 521, 555, 578, 555, 578, 555, 555, 578, 555, 602, 578, 578, 578, 578, 578, 578, 578,
  /* 42205 */ 602, 602, 602, 555, 602, 602, 602, 602, 602, 602, 602, 578, 578, 617, 602, 623, 623, 628, 1, 12290, 0, 0,
  /* 42227 */ 751, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1603, 0, 0, 962, 563, 563, 563, 563, 980, 563, 563, 563, 0,
  /* 42254 */ 587, 587, 992, 587, 587, 587, 587, 587, 2350, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 1936, 587,
  /* 42275 */ 587, 587, 587, 587, 1107, 0, 0, 0, 0, 1112, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 305, 306, 0, 0, 0, 0, 1360, 914,
  /* 42303 */ 563, 563, 563, 1366, 563, 563, 563, 563, 563, 563, 563, 563, 563, 1380, 563, 563, 1404, 563, 563, 563,
  /* 42323 */ 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 2620, 563, 563, 563, 1441, 563, 563, 563, 563, 563, 563,
  /* 42344 */ 563, 26028, 1360, 988, 587, 587, 587, 1458, 563, 587, 587, 587, 587, 587, 1079, 0, 1562, 0, 0, 0, 1568, 0,
  /* 42366 */ 0, 0, 0, 0, 0, 2441, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2071, 0, 0, 0, 0, 0, 1574, 0, 0, 0, 1580, 0, 0, 0, 0,
  /* 42397 */ 0, 0, 0, 0, 0, 0, 0, 1727, 0, 0, 1728, 0, 1605, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1619, 0, 0, 0, 0,
  /* 42428 */ 0, 2797568, 0, 0, 0, 0, 0, 0, 0, 2850816, 2867200, 0, 0, 0, 0, 0, 1169, 0, 1171, 0, 0, 0, 0, 1176, 0, 0,
  /* 42454 */ 0, 0, 0, 0, 2490, 0, 0, 0, 0, 0, 0, 0, 0, 0, 298, 0, 0, 0, 0, 0, 0, 1973, 587, 587, 587, 587, 587, 587,
  /* 42482 */ 587, 587, 587, 587, 587, 587, 587, 587, 587, 2373, 563, 563, 587, 587, 587, 587, 0, 0, 1563, 0, 0, 0, 0,
  /* 42505 */ 0, 1569, 0, 1575, 0, 1581, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2431, 2432, 0, 0, 0, 0, 0, 0, 0, 1575, 0, 0,
  /* 42534 */ 0, 0, 0, 1581, 0, 0, 0, 0, 0, 0, 0, 69632, 73728, 0, 0, 0, 0, 424, 65536, 0, 541, 541, 541, 2190, 541,
  /* 42559 */ 541, 541, 541, 2194, 541, 2196, 541, 541, 541, 541, 541, 541, 541, 3040, 541, 541, 541, 541, 541, 541,
  /* 42579 */ 541, 541, 541, 1783, 541, 541, 541, 541, 1789, 541, 563, 563, 2275, 563, 563, 563, 563, 2279, 563, 2281,
  /* 42599 */ 563, 563, 563, 563, 563, 563, 1896, 563, 563, 563, 563, 563, 563, 563, 563, 563, 1397, 1399, 563, 563,
  /* 42619 */ 563, 563, 563, 587, 587, 2362, 587, 587, 587, 587, 2366, 587, 2368, 587, 587, 587, 587, 587, 587, 1465,
  /* 42639 */ 587, 587, 587, 587, 587, 587, 1480, 587, 587, 563, 563, 2625, 563, 563, 563, 563, 563, 563, 563, 563, 563,
  /* 42660 */ 563, 563, 563, 563, 2648, 563, 563, 0, 0, 0, 0, 3024, 0, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541,
  /* 42683 */ 541, 1330, 541, 541, 541, 541, 0, 3380, 0, 0, 0, 0, 0, 0, 3180, 0, 0, 0, 0, 3391, 0, 0, 0, 0, 0, 680, 0,
  /* 42710 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 371, 0, 0, 372, 0, 0, 3393, 0, 0, 0, 0, 0, 541, 3396, 541, 541, 3398, 541, 541,
  /* 42738 */ 541, 541, 541, 541, 541, 3054, 541, 541, 541, 541, 541, 541, 541, 541, 541, 1784, 541, 541, 541, 541, 541,
  /* 42759 */ 541, 0, 3455, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 563, 563, 563, 0, 0,
  /* 42781 */ 0, 0, 796, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 796, 0, 0, 0, 0, 0, 0, 0, 0, 796, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 42814 */ 541, 541, 541, 541, 541, 541, 541, 541, 2168, 541, 541, 541, 541, 862, 541, 541, 541, 541, 541, 541, 541,
  /* 42835 */ 541, 541, 541, 541, 541, 541, 541, 1319, 541, 541, 912, 563, 563, 563, 563, 563, 563, 935, 563, 563, 563,
  /* 42856 */ 563, 563, 563, 563, 2291, 2292, 563, 563, 563, 563, 563, 563, 563, 2319, 563, 563, 2322, 2323, 563, 563,
  /* 42876 */ 0, 0, 1009, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 2697, 1059, 0, 0,
  /* 42898 */ 0, 541, 587, 563, 541, 541, 541, 541, 541, 0, 563, 563, 563, 563, 563, 3624, 587, 587, 587, 587, 587, 587,
  /* 42920 */ 587, 587, 587, 587, 1967, 587, 587, 587, 1972, 587, 587, 563, 563, 587, 587, 587, 587, 587, 78114, 1079,
  /* 42940 */ 0, 0, 1083, 1087, 0, 0, 1091, 1095, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2484, 0, 0, 1623, 0, 0,
  /* 42969 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1634, 0, 0, 1826, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563,
  /* 42995 */ 563, 563, 563, 563, 3258, 541, 3215, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541,
  /* 43016 */ 1337, 541, 587, 587, 587, 3271, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 2370, 587,
  /* 43036 */ 587, 587, 347, 347, 0, 349, 347, 0, 0, 347, 0, 0, 0, 0, 348, 0, 0, 0, 0, 0, 0, 2464, 0, 0, 0, 0, 0, 0, 0,
  /* 43065 */ 0, 0, 0, 2801664, 0, 0, 0, 0, 2142208, 0, 0, 0, 347, 349, 347, 347, 347, 347, 347, 347, 347, 512, 347,
  /* 43088 */ 347, 347, 347, 347, 347, 347, 347, 347, 347, 347, 347, 347, 347, 347, 347, 556, 579, 556, 579, 556, 556,
  /* 43109 */ 579, 556, 603, 579, 579, 579, 579, 579, 579, 579, 603, 603, 603, 556, 603, 603, 603, 603, 603, 603, 603,
  /* 43130 */ 579, 579, 556, 603, 579, 579, 603, 1, 12290, 0, 0, 0, 722, 0, 724, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 348, 0,
  /* 43157 */ 0, 0, 0, 0, 0, 0, 0, 739, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2129, 0, 0, 0, 0, 0, 766, 0, 0, 0, 771, 0,
  /* 43189 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 196608, 0, 0, 0, 0, 0, 0, 0, 808, 0, 0, 807, 0, 0, 0, 0, 0, 755, 0, 0, 816, 0,
  /* 43220 */ 0, 0, 0, 0, 2953216, 0, 0, 2826240, 3158016, 2428928, 0, 3018752, 2764800, 2572288, 0, 0, 0, 0, 0, 1217,
  /* 43240 */ 0, 0, 0, 0, 0, 0, 0, 1224, 0, 0, 0, 0, 0, 769, 0, 0, 0, 775, 776, 0, 0, 0, 0, 0, 0, 0, 3012, 3013, 0, 0,
  /* 43270 */ 0, 0, 3018, 0, 0, 0, 0, 0, 0, 820, 0, 0, 0, 816, 0, 664, 0, 0, 0, 0, 0, 0, 0, 69632, 73728, 0, 0, 0, 345,
  /* 43299 */ 344, 65536, 343, 541, 541, 541, 870, 541, 541, 541, 541, 541, 890, 892, 541, 541, 903, 541, 541, 541, 541,
  /* 43320 */ 541, 2541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 3044, 541, 541, 541, 963, 965, 563,
  /* 43341 */ 563, 976, 563, 563, 563, 563, 0, 587, 587, 993, 999, 587, 587, 587, 587, 587, 3374, 587, 541, 541, 563,
  /* 43362 */ 563, 587, 587, 0, 0, 0, 0, 0, 0, 3299, 0, 0, 0, 587, 587, 1017, 587, 587, 587, 587, 587, 1037, 1039, 587,
  /* 43386 */ 587, 1050, 587, 587, 587, 587, 587, 2364, 587, 587, 2367, 587, 587, 587, 587, 587, 587, 587, 2378, 2379,
  /* 43406 */ 587, 587, 587, 587, 587, 587, 587, 2406, 587, 587, 2409, 2410, 587, 587, 2176, 2348, 976, 563, 999, 1039,
  /* 43426 */ 587, 1050, 587, 78114, 1079, 0, 0, 0, 0, 0, 0, 0, 303, 303, 303, 303, 0, 303, 303, 303, 303, 0, 0, 0,
  /* 43450 */ 1151, 0, 1153, 0, 1155, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3175, 0, 0, 0, 0, 0, 0, 0, 1181, 0, 0, 0, 0, 0, 0, 0,
  /* 43480 */ 0, 0, 0, 0, 0, 0, 0, 1675, 0, 0, 1198, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1676, 0, 0, 1266, 0, 0,
  /* 43511 */ 0, 0, 0, 0, 0, 1181, 541, 541, 541, 541, 541, 541, 541, 1326, 541, 541, 541, 541, 541, 541, 541, 1339,
  /* 43533 */ 1305, 1307, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 1358, 541, 541, 541,
  /* 43553 */ 1343, 541, 541, 541, 541, 541, 541, 541, 541, 1354, 1355, 541, 541, 541, 541, 541, 541, 2840, 541, 541,
  /* 43573 */ 541, 541, 541, 541, 541, 541, 541, 541, 3056, 541, 3058, 541, 541, 541, 1360, 914, 563, 563, 563, 563,
  /* 43593 */ 1367, 563, 563, 563, 563, 563, 563, 563, 563, 563, 3242, 563, 563, 563, 563, 563, 563, 563, 563, 563,
  /* 43613 */ 1421, 563, 563, 563, 563, 563, 563, 563, 1435, 563, 563, 563, 563, 563, 2289, 563, 563, 563, 563, 563,
  /* 43633 */ 563, 563, 563, 563, 563, 2605, 563, 563, 563, 563, 563, 1459, 587, 587, 587, 587, 587, 587, 587, 587, 587,
  /* 43654 */ 587, 587, 587, 587, 587, 587, 2942, 587, 587, 587, 1489, 1491, 587, 587, 587, 587, 587, 587, 587, 587,
  /* 43674 */ 587, 587, 587, 2707, 2708, 587, 587, 587, 1554, 587, 1555, 587, 587, 1558, 1079, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 43697 */ 0, 0, 2375680, 0, 0, 0, 0, 0, 0, 1677, 0, 0, 1679, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2050, 0, 0, 0, 0, 541,
  /* 43727 */ 541, 541, 541, 1763, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 2208, 541, 541, 541,
  /* 43747 */ 1858, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 1857, 563, 563, 563,
  /* 43767 */ 1909, 563, 563, 563, 563, 1915, 563, 563, 563, 26028, 0, 587, 587, 587, 587, 587, 2376, 587, 587, 587,
  /* 43787 */ 587, 587, 587, 587, 587, 587, 587, 2717, 541, 587, 563, 541, 541, 587, 587, 587, 587, 1929, 587, 587, 587,
  /* 43808 */ 587, 587, 587, 587, 587, 587, 587, 587, 2938, 587, 587, 587, 587, 587, 1991, 587, 587, 587, 1996, 587,
  /* 43828 */ 587, 587, 587, 587, 587, 587, 587, 2005, 587, 0, 0, 0, 541, 587, 563, 852, 892, 541, 903, 541, 0, 925,
  /* 43850 */ 965, 563, 563, 563, 563, 2897, 563, 563, 563, 563, 563, 563, 0, 0, 587, 587, 587, 587, 587, 587, 587,
  /* 43871 */ 2338, 587, 587, 587, 587, 587, 587, 587, 3122, 587, 587, 587, 587, 587, 587, 587, 587, 1468, 587, 587,
  /* 43891 */ 587, 587, 587, 587, 587, 587, 587, 587, 2011, 587, 587, 587, 541, 587, 563, 541, 541, 541, 541, 563, 563,
  /* 43912 */ 916, 563, 563, 563, 932, 563, 563, 563, 563, 563, 563, 563, 1864, 563, 563, 563, 1868, 563, 563, 1873,
  /* 43932 */ 563, 2077, 0, 0, 0, 0, 0, 0, 0, 0, 2085, 0, 0, 0, 0, 0, 2089, 0, 0, 2091, 0, 0, 0, 0, 0, 0, 0, 2099, 0, 0,
  /* 43962 */ 0, 0, 0, 0, 0, 69632, 73728, 0, 0, 0, 349, 347, 65536, 0, 2133, 2134, 0, 2136, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 43989 */ 0, 2144, 0, 0, 2149, 2150, 0, 0, 0, 0, 0, 2154, 0, 0, 0, 0, 0, 0, 0, 2160, 541, 541, 541, 541, 541, 541,
  /* 44015 */ 2167, 541, 541, 541, 541, 541, 541, 1346, 541, 541, 541, 541, 541, 541, 1356, 541, 541, 2202, 541, 541,
  /* 44035 */ 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 2209, 541, 541, 541, 541, 541, 2569, 541, 541, 541, 541,
  /* 44056 */ 541, 541, 541, 541, 541, 541, 541, 541, 2835, 541, 541, 541, 541, 541, 541, 2215, 541, 541, 541, 541, 541,
  /* 44077 */ 541, 541, 541, 541, 541, 541, 541, 895, 541, 541, 541, 0, 0, 2244, 563, 563, 563, 563, 563, 563, 563,
  /* 44098 */ 2252, 563, 563, 563, 563, 563, 563, 3534, 563, 3536, 563, 563, 3538, 563, 563, 587, 587, 563, 563, 2301,
  /* 44118 */ 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 2893, 563, 563, 0, 0, 2331, 587, 587,
  /* 44139 */ 587, 587, 587, 587, 587, 2339, 587, 587, 587, 587, 587, 587, 2715, 587, 587, 587, 587, 541, 587, 563, 541,
  /* 44160 */ 541, 587, 587, 587, 587, 2363, 587, 587, 587, 587, 587, 587, 2369, 587, 2371, 587, 2374, 587, 587, 2388,
  /* 44180 */ 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 2918, 587, 587, 0, 2474, 0, 0, 0, 0, 0,
  /* 44203 */ 0, 0, 0, 0, 2482, 0, 0, 0, 0, 0, 0, 0, 2818048, 2846720, 0, 2916352, 0, 0, 3002368, 0, 0, 0, 0, 2514, 0,
  /* 44228 */ 0, 0, 0, 0, 0, 0, 0, 0, 2522, 0, 0, 541, 541, 541, 541, 541, 3321, 541, 541, 541, 3325, 541, 541, 541,
  /* 44252 */ 541, 541, 541, 1813, 541, 541, 541, 541, 1819, 541, 541, 541, 1360, 541, 541, 541, 541, 2540, 541, 541,
  /* 44272 */ 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 2222, 541, 541, 541, 563, 563, 563, 2599, 563, 563, 563,
  /* 44293 */ 563, 563, 2604, 563, 563, 563, 563, 563, 563, 2278, 563, 563, 563, 563, 563, 563, 563, 563, 563, 2632,
  /* 44313 */ 563, 563, 563, 563, 563, 563, 2670, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587,
  /* 44334 */ 587, 3143, 587, 587, 587, 587, 2686, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 3125, 587,
  /* 44354 */ 587, 587, 587, 541, 541, 2723, 563, 563, 563, 2725, 587, 587, 587, 2727, 2728, 0, 0, 0, 0, 0, 0, 0,
  /* 44376 */ 2891776, 0, 0, 0, 0, 2392064, 2412544, 0, 0, 0, 0, 2746, 0, 2747, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2072,
  /* 44402 */ 0, 0, 0, 0, 0, 0, 0, 0, 2762, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2112, 0, 0, 0, 0, 2811, 541, 2812, 541,
  /* 44431 */ 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 1804, 541, 541, 541, 541, 541, 2849, 541, 541,
  /* 44452 */ 541, 541, 541, 0, 0, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 2255, 563, 2858, 563,
  /* 44473 */ 2859, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 3086, 563, 563, 587, 587, 2907,
  /* 44493 */ 587, 2908, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 3139, 587, 3141, 587, 587, 0, 0, 0,
  /* 44514 */ 2983, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2457, 0, 0, 0, 0, 0, 3381, 0, 0, 0, 0, 0, 3180, 0, 0, 0, 3390,
  /* 44544 */ 0, 0, 0, 0, 0, 0, 2517, 0, 0, 0, 0, 0, 0, 0, 0, 541, 563, 541, 563, 541, 541, 563, 541, 3430, 587, 587,
  /* 44570 */ 587, 587, 587, 587, 587, 587, 587, 3439, 587, 587, 587, 541, 563, 563, 563, 563, 3237, 563, 563, 563, 563,
  /* 44591 */ 563, 563, 563, 563, 563, 563, 563, 1400, 563, 563, 563, 563, 541, 541, 541, 541, 3518, 541, 541, 541, 541,
  /* 44612 */ 541, 541, 541, 541, 541, 563, 563, 563, 3232, 563, 563, 563, 563, 563, 563, 3531, 563, 563, 563, 563, 563,
  /* 44633 */ 563, 563, 563, 563, 563, 587, 587, 587, 3357, 587, 587, 587, 587, 587, 3545, 587, 587, 587, 587, 587, 587,
  /* 44654 */ 587, 587, 587, 587, 0, 0, 0, 0, 0, 0, 3637, 541, 541, 541, 541, 541, 541, 3643, 563, 563, 563, 563, 3647,
  /* 44677 */ 563, 563, 587, 587, 587, 587, 587, 3653, 587, 587, 0, 0, 0, 0, 3635, 0, 541, 541, 541, 541, 541, 541, 541,
  /* 44700 */ 563, 2724, 563, 563, 587, 2726, 587, 587, 0, 0, 0, 0, 0, 0, 0, 0, 3607, 0, 541, 541, 541, 541, 0, 3656, 0,
  /* 44725 */ 3658, 541, 541, 541, 541, 541, 541, 563, 563, 563, 563, 563, 563, 937, 563, 563, 563, 563, 563, 563, 563,
  /* 44746 */ 400, 0, 0, 0, 0, 0, 367, 375, 403, 0, 0, 0, 0, 0, 367, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2513,
  /* 44777 */ 408, 410, 0, 0, 367, 375, 0, 69632, 73728, 0, 0, 0, 0, 426, 65536, 0, 0, 0, 0, 393, 394, 0, 395, 0, 0, 0,
  /* 44803 */ 0, 0, 395, 0, 0, 0, 0, 0, 694, 0, 0, 0, 0, 0, 364, 364, 364, 0, 0, 0, 0, 0, 741, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 44834 */ 0, 0, 0, 0, 426, 426, 436, 0, 426, 0, 410, 455, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3304, 0, 3180, 0, 0, 0, 0, 367,
  /* 44863 */ 0, 0, 395, 0, 0, 0, 0, 0, 350, 0, 0, 367, 0, 395, 0, 0, 0, 0, 541, 541, 541, 541, 3662, 541, 563, 563,
  /* 44889 */ 563, 563, 3666, 563, 563, 563, 563, 3532, 563, 563, 563, 563, 563, 563, 563, 563, 563, 587, 587, 3110,
  /* 44909 */ 587, 587, 587, 587, 587, 587, 587, 0, 408, 0, 496, 0, 496, 496, 496, 496, 496, 496, 496, 496, 496, 522,
  /* 44931 */ 522, 522, 522, 455, 455, 455, 455, 530, 455, 534, 535, 455, 455, 522, 534, 522, 522, 522, 522, 522, 522,
  /* 44952 */ 522, 539, 557, 580, 557, 580, 557, 557, 580, 557, 604, 580, 580, 580, 580, 580, 580, 580, 604, 604, 604,
  /* 44973 */ 557, 604, 604, 604, 604, 604, 604, 604, 580, 580, 618, 604, 624, 624, 629, 1, 12290, 0, 0, 643, 0, 0, 0,
  /* 44996 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1665, 0, 0, 0, 0, 802, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2102, 0, 0, 0,
  /* 45029 */ 0, 0, 0, 802, 0, 0, 783, 0, 0, 0, 0, 802, 0, 0, 0, 0, 0, 0, 0, 802, 0, 0, 0, 0, 783, 0, 802, 0, 0, 0, 0,
  /* 45060 */ 0, 0, 0, 541, 847, 541, 541, 541, 541, 541, 2815, 541, 2818, 541, 541, 541, 541, 2823, 541, 541, 541, 541,
  /* 45082 */ 541, 541, 3409, 541, 563, 563, 563, 563, 563, 563, 563, 563, 3479, 563, 3481, 3482, 563, 3484, 563, 587,
  /* 45102 */ 587, 587, 1023, 1025, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 3275, 587, 587, 587, 587, 0,
  /* 45123 */ 0, 0, 0, 1096, 0, 0, 1098, 0, 0, 0, 0, 0, 0, 0, 0, 0, 114688, 0, 241664, 258048, 0, 0, 0, 0, 0, 0, 0,
  /* 45150 */ 1111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2142, 0, 0, 0, 0, 1098, 1227, 0, 0, 0, 0, 0, 0, 1234, 0, 0, 0, 0,
  /* 45180 */ 0, 0, 0, 333, 0, 0, 0, 0, 0, 333, 0, 333, 1239, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1239, 1248, 0, 0, 0, 0, 0,
  /* 45210 */ 0, 2739, 0, 0, 0, 0, 0, 0, 0, 2743, 0, 0, 0, 0, 0, 1239, 1269, 1270, 0, 1239, 0, 541, 541, 541, 541, 541,
  /* 45236 */ 541, 541, 3207, 3208, 541, 541, 541, 541, 3212, 3213, 1278, 541, 541, 541, 1282, 541, 541, 1293, 541, 541,
  /* 45256 */ 1297, 541, 541, 541, 541, 541, 541, 541, 3333, 541, 541, 541, 541, 541, 563, 563, 563, 922, 926, 563, 563,
  /* 45277 */ 563, 563, 563, 563, 952, 563, 957, 1360, 914, 563, 563, 563, 563, 563, 563, 563, 1370, 563, 563, 563,
  /* 45297 */ 1374, 563, 563, 563, 563, 1862, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 3084, 563, 563,
  /* 45317 */ 563, 563, 1385, 563, 563, 1389, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 2295, 563,
  /* 45337 */ 563, 563, 563, 563, 563, 1406, 563, 563, 563, 1410, 563, 563, 563, 563, 563, 563, 563, 563, 2901, 563,
  /* 45357 */ 563, 0, 0, 587, 587, 587, 587, 587, 587, 1462, 587, 587, 587, 1466, 587, 587, 1477, 587, 587, 1481, 587,
  /* 45378 */ 587, 587, 587, 587, 3434, 587, 3436, 587, 587, 587, 587, 587, 587, 541, 563, 587, 1502, 587, 587, 587,
  /* 45398 */ 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 3128, 587, 0, 1622, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 45423 */ 0, 0, 1635, 0, 0, 0, 0, 541, 541, 541, 2163, 2164, 541, 541, 541, 541, 541, 541, 541, 541, 2180, 541, 541,
  /* 45446 */ 541, 541, 2185, 541, 541, 1637, 0, 0, 0, 1641, 0, 0, 0, 1645, 0, 0, 0, 1649, 0, 0, 0, 0, 0, 0, 2748, 0, 0,
  /* 45473 */ 0, 0, 0, 0, 0, 0, 0, 0, 3000, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1591, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2153, 0,
  /* 45505 */ 0, 0, 0, 563, 563, 1844, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 3540, 587, 587,
  /* 45527 */ 1958, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 3127, 587, 3129, 587,
  /* 45547 */ 587, 2010, 587, 587, 587, 587, 1749, 1940, 1844, 541, 541, 541, 541, 563, 563, 917, 563, 563, 563, 934,
  /* 45567 */ 563, 563, 948, 563, 563, 563, 563, 563, 1895, 563, 563, 563, 1900, 563, 563, 563, 563, 563, 563, 1914,
  /* 45587 */ 563, 563, 563, 563, 26028, 0, 587, 587, 587, 0, 2118, 0, 0, 0, 0, 0, 0, 2125, 0, 0, 0, 0, 0, 0, 0, 346, 0,
  /* 45614 */ 404, 0, 0, 0, 0, 0, 404, 0, 0, 2159, 0, 541, 541, 2162, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541,
  /* 45638 */ 2833, 541, 541, 541, 541, 541, 541, 541, 2227, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 0,
  /* 45659 */ 0, 563, 2855, 563, 563, 563, 0, 0, 563, 563, 2246, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563,
  /* 45681 */ 3255, 563, 563, 563, 563, 563, 563, 2314, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 0, 0,
  /* 45702 */ 587, 2904, 587, 0, 0, 587, 587, 2333, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 3440, 587,
  /* 45723 */ 587, 541, 563, 587, 587, 587, 587, 2390, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 2928, 587,
  /* 45744 */ 587, 587, 587, 587, 587, 587, 587, 2401, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 541, 587,
  /* 45765 */ 0, 0, 0, 541, 587, 563, 1064, 541, 541, 905, 541, 0, 1069, 563, 563, 563, 563, 2262, 563, 563, 563, 563,
  /* 45787 */ 563, 563, 563, 563, 563, 563, 563, 1434, 563, 563, 563, 563, 541, 541, 541, 2567, 541, 541, 541, 541, 541,
  /* 45808 */ 541, 541, 541, 541, 541, 541, 541, 900, 541, 541, 541, 2698, 587, 587, 587, 587, 587, 587, 587, 587, 587,
  /* 45829 */ 587, 587, 587, 587, 587, 587, 3277, 587, 587, 0, 2759, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2038, 0,
  /* 45856 */ 541, 2827, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 1758, 541, 563, 2874,
  /* 45876 */ 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 2285, 563, 587, 587, 587, 2923, 587,
  /* 45897 */ 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 2382, 587, 587, 587, 0, 0, 2993, 0, 0, 0, 0, 0, 0,
  /* 45921 */ 0, 0, 0, 0, 0, 0, 0, 2130, 0, 2132, 3171, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2744, 3202, 541,
  /* 45950 */ 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 2577, 3225, 541, 541, 541, 541, 541,
  /* 45971 */ 541, 541, 541, 563, 563, 563, 563, 563, 563, 563, 2888, 563, 563, 563, 563, 563, 563, 563, 563, 3241, 563,
  /* 45992 */ 563, 563, 563, 563, 563, 563, 587, 587, 587, 3282, 587, 587, 587, 587, 587, 587, 587, 587, 587, 541, 587,
  /* 46013 */ 563, 2018, 541, 541, 541, 2022, 563, 541, 3289, 563, 3291, 587, 3293, 3294, 0, 0, 0, 0, 3298, 0, 0, 0, 0,
  /* 46036 */ 0, 0, 0, 3014656, 3207168, 0, 2691072, 0, 0, 3215360, 0, 0, 0, 0, 3311, 0, 0, 0, 0, 3315, 0, 0, 0, 0, 0,
  /* 46061 */ 0, 0, 0, 0, 286720, 0, 286720, 286720, 286720, 1, 12290, 3318, 0, 541, 541, 541, 3320, 541, 541, 541,
  /* 46081 */ 3323, 541, 541, 541, 541, 541, 541, 541, 1751, 541, 541, 541, 541, 541, 541, 541, 541, 541, 2586, 0, 563,
  /* 46102 */ 563, 563, 563, 563, 3338, 563, 563, 563, 3341, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563,
  /* 46122 */ 26028, 1921, 587, 587, 587, 587, 3360, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587,
  /* 46142 */ 587, 3554, 0, 0, 3403, 541, 3405, 541, 541, 541, 541, 541, 563, 563, 563, 563, 563, 563, 563, 563, 563,
  /* 46163 */ 563, 3075, 563, 563, 3418, 563, 3420, 563, 563, 563, 563, 563, 563, 587, 587, 587, 587, 587, 587, 587,
  /* 46183 */ 3596, 587, 3598, 587, 587, 0, 0, 0, 0, 3560, 0, 0, 0, 0, 541, 541, 541, 541, 541, 541, 541, 541, 541,
  /* 46206 */ 2169, 541, 541, 541, 541, 541, 3574, 541, 541, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563,
  /* 46227 */ 563, 563, 563, 563, 1417, 3586, 563, 563, 563, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 3599,
  /* 46247 */ 587, 0, 0, 0, 853, 1000, 926, 849, 1065, 894, 541, 541, 0, 922, 1070, 967, 3611, 541, 541, 541, 541, 541,
  /* 46269 */ 541, 541, 563, 563, 3617, 563, 3618, 563, 563, 563, 563, 587, 587, 587, 587, 3594, 587, 587, 587, 587,
  /* 46289 */ 587, 587, 587, 541, 541, 563, 563, 587, 587, 3378, 0, 0, 409, 355, 0, 0, 0, 0, 0, 69632, 73728, 0, 0, 0,
  /* 46313 */ 0, 0, 65536, 0, 0, 0, 0, 541, 541, 3660, 3661, 541, 541, 563, 563, 3664, 3665, 563, 563, 563, 563, 1445,
  /* 46335 */ 563, 563, 563, 563, 26028, 1360, 988, 587, 1455, 587, 587, 0, 3603, 0, 0, 0, 0, 0, 0, 0, 0, 541, 541,
  /* 46358 */ 3610, 541, 0, 0, 353, 0, 0, 0, 355, 0, 472, 472, 472, 472, 472, 472, 472, 472, 477, 472, 472, 472, 472,
  /* 46381 */ 472, 472, 472, 472, 472, 472, 477, 472, 472, 483, 472, 0, 472, 0, 0, 0, 0, 0, 0, 0, 0, 0, 523, 523, 527,
  /* 46406 */ 527, 527, 527, 472, 472, 472, 472, 472, 472, 523, 477, 472, 472, 527, 523, 527, 527, 527, 527, 527, 527,
  /* 46427 */ 527, 540, 558, 581, 558, 581, 558, 558, 581, 558, 605, 581, 581, 581, 581, 581, 581, 581, 605, 605, 605,
  /* 46448 */ 558, 605, 605, 605, 605, 605, 605, 605, 581, 581, 619, 605, 625, 625, 630, 1, 12290, 0, 0, 0, 644, 0, 0,
  /* 46471 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2495, 0, 0, 0, 0, 0, 738, 0, 0, 0, 644, 738, 0, 744, 745, 644, 0, 0, 0, 0,
  /* 46501 */ 0, 0, 0, 0, 790, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 799, 0, 804, 0, 0, 0, 0, 0, 0, 804, 0, 0, 0, 0, 0, 644, 0,
  /* 46533 */ 0, 0, 799, 0, 804, 0, 790, 0, 0, 0, 665, 0, 821, 0, 0, 0, 0, 821, 0, 0, 0, 0, 0, 0, 0, 69632, 73728, 0, 0,
  /* 46562 */ 0, 373, 0, 65536, 0, 0, 790, 644, 0, 0, 790, 790, 0, 0, 804, 842, 0, 541, 848, 541, 541, 541, 541, 541,
  /* 46586 */ 2830, 2831, 541, 541, 541, 541, 2834, 541, 541, 541, 541, 541, 541, 879, 541, 884, 541, 891, 541, 894,
  /* 46606 */ 541, 541, 908, 541, 541, 867, 871, 877, 541, 882, 541, 541, 541, 541, 541, 899, 541, 541, 541, 541, 541,
  /* 46627 */ 541, 2852, 541, 541, 0, 0, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 2256, 563,
  /* 46648 */ 563, 563, 972, 563, 563, 563, 563, 563, 0, 587, 587, 995, 587, 587, 587, 587, 587, 2687, 587, 587, 587,
  /* 46669 */ 587, 587, 587, 587, 587, 587, 587, 2937, 587, 587, 587, 587, 587, 587, 587, 1014, 1018, 1024, 587, 1029,
  /* 46689 */ 587, 587, 587, 587, 587, 1046, 587, 587, 587, 587, 587, 1464, 587, 587, 587, 1473, 587, 587, 587, 587,
  /* 46709 */ 587, 587, 1949, 587, 587, 587, 587, 587, 587, 587, 587, 587, 2949, 587, 587, 587, 541, 587, 563, 563, 563,
  /* 46730 */ 587, 587, 1046, 587, 587, 78114, 1079, 0, 0, 0, 0, 0, 0, 0, 377, 0, 380, 0, 0, 0, 380, 0, 0, 1149, 0, 0,
  /* 46756 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2757, 0, 0, 0, 1200, 0, 0, 0, 0, 0, 1205, 0, 0, 0, 0, 0, 0, 0,
  /* 46787 */ 2465, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2732032, 0, 0, 0, 0, 0, 0, 1099, 0, 0, 0, 1230, 0, 1232, 0, 0, 0, 0, 0,
  /* 46816 */ 0, 0, 0, 0, 323, 397, 0, 0, 0, 323, 0, 1240, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1246, 0, 1249, 1200, 0, 0, 0,
  /* 46845 */ 0, 541, 2161, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 3336, 541, 563, 563, 563, 1230, 1252,
  /* 46866 */ 0, 0, 0, 1256, 0, 0, 0, 1130, 0, 0, 0, 0, 1264, 0, 0, 1149, 1264, 0, 1271, 541, 541, 541, 541, 1277, 541,
  /* 46891 */ 541, 541, 541, 1283, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 1304, 1360, 914, 1362, 563, 563,
  /* 46911 */ 563, 563, 563, 1369, 563, 563, 563, 563, 1375, 563, 563, 563, 563, 1877, 563, 563, 563, 563, 563, 563,
  /* 46931 */ 563, 563, 563, 563, 563, 2869, 563, 563, 563, 563, 563, 563, 563, 1407, 563, 563, 563, 563, 1412, 563,
  /* 46951 */ 563, 563, 563, 563, 563, 563, 2900, 563, 563, 563, 0, 0, 587, 587, 587, 563, 1419, 563, 563, 563, 1426,
  /* 46972 */ 1428, 563, 563, 563, 563, 563, 563, 563, 563, 563, 3346, 563, 563, 563, 563, 563, 563, 587, 587, 1461,
  /* 46992 */ 587, 587, 587, 587, 1467, 587, 587, 587, 587, 587, 587, 587, 587, 2690, 587, 587, 587, 587, 2694, 587,
  /* 47012 */ 587, 587, 587, 1488, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 1499, 587, 587, 587, 587, 1463,
  /* 47032 */ 587, 587, 587, 587, 587, 1475, 587, 587, 587, 587, 587, 587, 2014, 541, 587, 563, 1791, 541, 2020, 541,
  /* 47052 */ 1886, 563, 587, 587, 1504, 587, 587, 587, 587, 587, 587, 587, 587, 1511, 587, 587, 587, 1518, 1520, 587,
  /* 47072 */ 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 2396, 2397, 2398, 587, 587, 1542,
  /* 47092 */ 587, 0, 541, 587, 563, 541, 541, 541, 541, 541, 563, 563, 563, 563, 563, 563, 3477, 563, 563, 563, 563,
  /* 47113 */ 563, 563, 563, 563, 1396, 563, 563, 563, 563, 563, 563, 563, 563, 587, 587, 587, 587, 587, 1079, 0, 0,
  /* 47134 */ 1563, 0, 0, 0, 1569, 0, 0, 0, 0, 0, 770, 0, 0, 773, 0, 0, 777, 0, 0, 0, 0, 0, 0, 0, 184725, 184932,
  /* 47160 */ 184932, 184932, 0, 184932, 184932, 184932, 184932, 184932, 184932, 0, 0, 0, 0, 184932, 0, 0, 184932, 1,
  /* 47178 */ 12290, 0, 1575, 0, 0, 0, 1581, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 405, 0, 0, 0, 0, 0, 1592, 1593, 0, 0, 0, 0,
  /* 47207 */ 0, 1599, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2686976, 2736128, 0, 0, 2531328, 2707456, 0, 0, 1638, 0, 0, 0, 0, 0,
  /* 47232 */ 0, 0, 1646, 1647, 0, 0, 0, 0, 0, 0, 0, 69632, 73728, 0, 0, 0, 420, 0, 65536, 0, 0, 1654, 0, 0, 0, 0, 0, 0,
  /* 47260 */ 0, 0, 0, 0, 0, 0, 0, 0, 2052, 0, 1690, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2771, 0, 1706, 1707,
  /* 47290 */ 0, 0, 0, 1710, 0, 0, 0, 0, 0, 1714, 0, 0, 1717, 0, 0, 0, 0, 1714, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2444,
  /* 47320 */ 2445, 0, 0, 2448, 0, 0, 1730, 0, 1732, 1706, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 2547,
  /* 47342 */ 541, 541, 541, 541, 541, 1744, 541, 541, 541, 541, 1750, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541,
  /* 47363 */ 3220, 541, 541, 541, 541, 541, 541, 1761, 541, 541, 541, 541, 1765, 541, 541, 541, 541, 541, 541, 541,
  /* 47383 */ 541, 541, 541, 3335, 541, 541, 563, 563, 563, 541, 1776, 541, 541, 541, 1781, 541, 541, 541, 541, 541,
  /* 47403 */ 541, 541, 541, 541, 541, 541, 2559, 541, 541, 541, 541, 1808, 541, 541, 541, 541, 541, 541, 541, 541, 541,
  /* 47424 */ 541, 541, 541, 541, 541, 1360, 914, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 1376, 563,
  /* 47445 */ 563, 563, 563, 2626, 563, 563, 2630, 563, 563, 563, 563, 563, 563, 563, 563, 3345, 563, 563, 563, 563,
  /* 47465 */ 563, 563, 563, 563, 563, 1845, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 1856, 563, 563, 563, 563,
  /* 47486 */ 1894, 563, 563, 563, 1898, 563, 563, 563, 563, 563, 563, 563, 1450, 563, 26028, 1360, 988, 1454, 587, 587,
  /* 47506 */ 587, 563, 563, 1860, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 1871, 563, 563, 563, 563, 1911,
  /* 47526 */ 1913, 563, 563, 563, 563, 563, 26028, 0, 587, 587, 587, 587, 587, 1506, 587, 587, 1508, 587, 587, 587,
  /* 47546 */ 1512, 587, 587, 587, 0, 1285, 1469, 1377, 541, 541, 1339, 541, 541, 563, 563, 1431, 563, 563, 1876, 563,
  /* 47566 */ 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 2297, 2298, 563, 563, 587, 2027, 587,
  /* 47586 */ 587, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3511, 0, 3513, 0, 541, 0, 0, 0, 2080, 2081, 0, 0, 2083, 2084, 0, 0, 0,
  /* 47614 */ 0, 0, 0, 0, 396, 0, 0, 0, 0, 0, 396, 0, 0, 0, 0, 0, 2106, 0, 0, 0, 0, 2109, 2110, 0, 0, 0, 0, 0, 0, 0,
  /* 47644 */ 2480, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2795, 0, 0, 0, 0, 0, 0, 541, 541, 541, 541, 2175, 541, 541, 2179, 541,
  /* 47670 */ 541, 541, 2183, 541, 541, 541, 541, 541, 541, 1749, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541,
  /* 47690 */ 2558, 541, 541, 541, 541, 541, 2225, 541, 541, 541, 541, 2230, 541, 541, 541, 541, 541, 541, 541, 541, 0,
  /* 47711 */ 0, 0, 0, 0, 800, 0, 0, 0, 0, 0, 0, 0, 800, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2242, 0, 563, 563, 563,
  /* 47742 */ 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 2325, 0, 563, 563, 563, 2260, 563, 563, 2264, 563,
  /* 47763 */ 563, 563, 2268, 563, 563, 563, 563, 563, 587, 587, 3625, 587, 3626, 587, 587, 587, 587, 587, 587, 1493,
  /* 47783 */ 587, 587, 587, 587, 587, 587, 587, 587, 587, 2380, 587, 587, 587, 587, 587, 587, 2312, 563, 563, 563, 563,
  /* 47804 */ 2317, 563, 563, 563, 563, 563, 563, 563, 563, 0, 0, 0, 0, 0, 0, 587, 587, 2655, 587, 587, 587, 2329, 0,
  /* 47827 */ 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 2680, 587, 587, 587, 587, 587, 587,
  /* 47848 */ 2347, 587, 587, 2351, 587, 587, 587, 2355, 587, 587, 587, 587, 587, 587, 2925, 587, 587, 587, 587, 587,
  /* 47868 */ 587, 587, 587, 587, 1471, 587, 587, 587, 587, 587, 587, 2399, 587, 587, 587, 587, 2404, 587, 587, 587,
  /* 47888 */ 587, 587, 587, 587, 587, 541, 587, 0, 0, 0, 854, 1001, 927, 541, 541, 541, 541, 910, 0, 563, 563, 563,
  /* 47910 */ 563, 563, 563, 563, 1833, 563, 563, 563, 563, 563, 563, 563, 2879, 563, 563, 563, 563, 563, 563, 563, 563,
  /* 47931 */ 2644, 563, 563, 563, 2647, 563, 563, 563, 0, 0, 0, 0, 2439, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2456, 0, 0,
  /* 47958 */ 0, 0, 0, 0, 2475, 0, 0, 0, 2479, 0, 0, 0, 0, 0, 0, 0, 0, 0, 350, 351, 352, 0, 0, 0, 0, 541, 2525, 541,
  /* 47986 */ 541, 541, 541, 541, 541, 541, 541, 541, 541, 2533, 541, 541, 541, 541, 541, 541, 3053, 541, 541, 3055,
  /* 48006 */ 541, 541, 541, 541, 541, 541, 541, 1311, 541, 541, 541, 541, 541, 541, 541, 541, 541, 1753, 541, 541, 541,
  /* 48027 */ 541, 541, 541, 541, 2551, 541, 541, 2553, 541, 2554, 541, 541, 541, 541, 541, 541, 541, 2561, 541, 541,
  /* 48047 */ 541, 541, 872, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 1316, 541, 541, 541, 541, 2565,
  /* 48068 */ 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 2576, 541, 541, 541, 541, 873, 541, 541, 541,
  /* 48089 */ 541, 541, 541, 541, 541, 541, 541, 541, 541, 1332, 541, 541, 541, 0, 0, 0, 563, 563, 2589, 563, 563, 563,
  /* 48111 */ 563, 563, 563, 563, 563, 563, 563, 3537, 563, 563, 3539, 563, 587, 587, 563, 2597, 563, 563, 563, 563,
  /* 48131 */ 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 2326, 0, 563, 563, 2612, 563, 563, 563, 2615, 563, 563,
  /* 48152 */ 2617, 563, 2618, 563, 563, 563, 563, 563, 2614, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 3649,
  /* 48172 */ 587, 587, 587, 587, 587, 587, 587, 0, 2683, 587, 2684, 587, 587, 587, 587, 587, 587, 587, 587, 2692, 587,
  /* 48193 */ 587, 2696, 587, 0, 0, 0, 1061, 1062, 1063, 851, 541, 898, 902, 1068, 0, 924, 563, 971, 2733, 2734, 0, 0,
  /* 48215 */ 2737, 2738, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 541, 541, 541, 1275, 541, 541, 0, 2788, 0, 2790, 0, 0, 0, 0, 0,
  /* 48242 */ 0, 0, 0, 0, 0, 0, 0, 2742, 0, 0, 0, 0, 0, 0, 0, 2803, 0, 0, 0, 0, 0, 0, 541, 541, 541, 541, 541, 541, 541,
  /* 48271 */ 3033, 541, 541, 2826, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 2825,
  /* 48291 */ 2873, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 2883, 563, 563, 563, 563, 1912, 563,
  /* 48311 */ 563, 563, 563, 563, 563, 26028, 0, 587, 587, 587, 587, 587, 2934, 587, 587, 587, 587, 587, 587, 587, 2940,
  /* 48332 */ 587, 587, 587, 587, 2922, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 2932, 0, 2982, 0, 0,
  /* 48354 */ 2984, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2509, 0, 0, 0, 0, 0, 0, 0, 0, 2995, 0, 0, 2998, 0, 2999, 0, 0, 0,
  /* 48384 */ 0, 0, 0, 0, 2491, 2492, 0, 0, 0, 0, 0, 0, 0, 0, 1220, 0, 0, 0, 0, 0, 0, 0, 0, 1243, 0, 0, 0, 0, 0, 0, 0,
  /* 48415 */ 0, 1259, 0, 0, 0, 1263, 0, 0, 0, 541, 3049, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541,
  /* 48438 */ 541, 3061, 3089, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 2621, 563,
  /* 48458 */ 3103, 563, 563, 563, 563, 563, 587, 587, 587, 3111, 587, 587, 587, 587, 587, 587, 1507, 587, 587, 587,
  /* 48478 */ 587, 587, 587, 587, 587, 587, 1983, 1984, 587, 587, 587, 587, 587, 587, 3131, 587, 587, 587, 587, 587,
  /* 48498 */ 587, 587, 587, 587, 587, 587, 587, 587, 587, 2929, 587, 587, 587, 587, 3145, 587, 587, 587, 587, 587, 541,
  /* 48519 */ 587, 563, 541, 541, 563, 563, 587, 587, 0, 2962, 0, 0, 0, 0, 0, 0, 0, 0, 333, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 48547 */ 0, 0, 0, 0, 0, 0, 2103, 541, 3226, 541, 541, 541, 541, 541, 541, 541, 563, 563, 563, 563, 563, 563, 563,
  /* 48570 */ 3095, 563, 563, 563, 563, 563, 563, 563, 563, 2306, 563, 563, 563, 563, 563, 563, 563, 563, 563, 3236,
  /* 48590 */ 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 2309, 2310, 2311, 563, 563, 3246, 563,
  /* 48610 */ 563, 563, 563, 563, 563, 3252, 563, 3254, 563, 563, 563, 563, 563, 1392, 563, 563, 563, 563, 563, 563,
  /* 48630 */ 563, 563, 563, 563, 1853, 563, 563, 563, 563, 563, 563, 563, 563, 587, 587, 587, 587, 587, 587, 587, 587,
  /* 48651 */ 587, 3265, 587, 587, 587, 587, 587, 2703, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 2950, 587,
  /* 48671 */ 587, 541, 587, 563, 587, 587, 3281, 587, 3283, 587, 587, 587, 587, 587, 587, 587, 587, 541, 587, 563,
  /* 48691 */ 3153, 541, 3155, 563, 3157, 587, 0, 0, 0, 3301, 0, 0, 0, 0, 0, 0, 0, 3180, 0, 0, 0, 0, 0, 0, 333, 0, 0,
  /* 48718 */ 333, 0, 0, 333, 333, 0, 0, 3309, 0, 0, 0, 0, 0, 3314, 0, 0, 0, 0, 0, 0, 0, 0, 0, 360, 0, 0, 0, 0, 0, 360,
  /* 48748 */ 563, 563, 3339, 563, 563, 563, 3343, 563, 563, 563, 563, 563, 563, 563, 563, 563, 26028, 1360, 988, 587,
  /* 48768 */ 587, 1456, 587, 587, 587, 587, 3362, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 3126,
  /* 48788 */ 587, 587, 587, 587, 587, 3371, 587, 587, 587, 587, 541, 541, 563, 563, 587, 587, 0, 0, 0, 3296, 0, 0, 0,
  /* 48811 */ 0, 0, 0, 3557, 3558, 0, 0, 0, 0, 0, 0, 0, 541, 541, 541, 3568, 541, 541, 541, 541, 541, 1284, 541, 541,
  /* 48835 */ 541, 541, 541, 541, 541, 541, 541, 1303, 563, 563, 3588, 563, 587, 587, 587, 3593, 587, 587, 587, 587,
  /* 48855 */ 587, 587, 587, 587, 2912, 587, 587, 2916, 587, 587, 587, 587, 3601, 587, 0, 0, 0, 0, 0, 3604, 3605, 3606,
  /* 48877 */ 0, 3608, 541, 541, 541, 541, 541, 541, 2178, 541, 541, 541, 541, 541, 541, 541, 541, 541, 0, 2242, 563,
  /* 48898 */ 563, 563, 563, 563, 563, 3621, 3622, 563, 563, 587, 587, 587, 587, 587, 587, 587, 587, 587, 3629, 3630,
  /* 48918 */ 563, 563, 587, 587, 587, 587, 3679, 0, 541, 3680, 563, 3681, 587, 3682, 0, 541, 541, 541, 541, 876, 878,
  /* 48939 */ 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 1353, 541, 541, 541, 541, 357, 358, 0, 0, 0, 0, 0,
  /* 48962 */ 0, 0, 364, 0, 292, 0, 0, 0, 0, 0, 0, 347, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 176128, 176128, 176128, 176128,
  /* 48988 */ 176128, 176128, 176128, 176128, 0, 0, 0, 391, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2754, 0, 0, 0, 473, 473,
  /* 49014 */ 487, 0, 487, 0, 358, 358, 358, 509, 358, 358, 358, 358, 473, 473, 606, 582, 582, 582, 582, 582, 582, 582,
  /* 49036 */ 606, 606, 606, 559, 606, 606, 606, 606, 606, 606, 606, 582, 582, 559, 606, 582, 582, 606, 1, 12290, 0, 0,
  /* 49058 */ 0, 703, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2769, 0, 0, 0, 541, 541, 868, 541, 541, 541, 541, 541, 541,
  /* 49085 */ 541, 541, 541, 541, 904, 541, 541, 541, 541, 541, 2839, 541, 541, 541, 2842, 541, 2844, 541, 541, 541,
  /* 49105 */ 541, 541, 541, 1285, 1292, 541, 541, 541, 541, 541, 541, 541, 541, 541, 1800, 541, 541, 541, 1805, 541,
  /* 49125 */ 541, 587, 1015, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 1051, 587, 587, 587, 587, 587, 2909,
  /* 49145 */ 587, 587, 587, 587, 587, 587, 2917, 587, 587, 587, 587, 587, 1527, 587, 587, 587, 587, 587, 587, 587, 587,
  /* 49166 */ 1538, 1539, 977, 563, 587, 587, 587, 1051, 587, 78114, 1079, 0, 0, 0, 0, 0, 0, 0, 406, 406, 406, 406, 0,
  /* 49189 */ 406, 406, 406, 406, 1197, 0, 0, 0, 0, 0, 0, 0, 1197, 0, 0, 0, 0, 0, 0, 0, 414, 414, 0, 0, 0, 0, 0, 414, 0,
  /* 49218 */ 541, 541, 1280, 541, 541, 541, 1289, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 3524, 541, 541,
  /* 49238 */ 3526, 563, 563, 1360, 914, 563, 563, 563, 563, 563, 563, 563, 563, 563, 1372, 563, 563, 563, 1381, 587,
  /* 49258 */ 587, 1543, 0, 1289, 1473, 1381, 541, 541, 541, 541, 541, 563, 563, 563, 563, 563, 3476, 563, 563, 563,
  /* 49278 */ 3480, 563, 563, 563, 563, 563, 563, 3250, 563, 563, 563, 563, 563, 563, 563, 563, 563, 2321, 563, 563,
  /* 49298 */ 563, 563, 0, 0, 563, 587, 587, 587, 587, 587, 1079, 0, 0, 0, 1564, 0, 0, 0, 1570, 0, 0, 0, 0, 541, 3659,
  /* 49323 */ 541, 541, 541, 541, 563, 3663, 563, 563, 563, 563, 563, 1878, 563, 563, 563, 563, 1884, 563, 563, 563,
  /* 49343 */ 563, 563, 563, 2863, 563, 563, 2867, 563, 563, 563, 563, 563, 563, 1409, 563, 563, 1413, 563, 563, 563,
  /* 49363 */ 563, 563, 563, 1448, 563, 563, 26028, 1360, 988, 587, 587, 587, 587, 0, 0, 1576, 0, 0, 0, 1582, 0, 0, 0,
  /* 49386 */ 0, 0, 0, 0, 0, 0, 364, 0, 0, 0, 0, 0, 0, 0, 1606, 0, 0, 0, 0, 0, 0, 0, 1614, 1615, 0, 0, 0, 0, 0, 0, 0,
  /* 49417 */ 69632, 73728, 0, 369, 369, 0, 0, 65536, 369, 0, 0, 0, 0, 1625, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2741, 0,
  /* 49444 */ 0, 0, 0, 563, 1891, 563, 563, 563, 563, 563, 563, 563, 563, 1902, 563, 563, 563, 563, 563, 1408, 563, 563,
  /* 49466 */ 563, 563, 563, 563, 563, 563, 563, 563, 1867, 563, 563, 563, 563, 563, 587, 1975, 587, 587, 587, 587, 587,
  /* 49487 */ 587, 587, 587, 587, 587, 587, 1987, 587, 587, 587, 587, 1490, 587, 587, 587, 587, 587, 587, 587, 587, 587,
  /* 49508 */ 587, 587, 2381, 587, 587, 587, 587, 2008, 587, 587, 587, 587, 587, 587, 541, 587, 563, 541, 541, 541, 541,
  /* 49529 */ 563, 563, 918, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 2634, 563, 563, 563, 563, 0, 2243,
  /* 49550 */ 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 2637, 563, 0, 2330, 587, 587, 587,
  /* 49571 */ 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 3276, 587, 587, 587, 0, 0, 2451, 0, 0, 0, 0, 0, 0,
  /* 49595 */ 0, 0, 0, 0, 0, 0, 0, 2433, 0, 2435, 0, 0, 0, 563, 563, 563, 563, 563, 563, 563, 2593, 563, 563, 563, 563,
  /* 49620 */ 563, 1424, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 2293, 563, 563, 563, 563, 563, 563, 587,
  /* 49640 */ 2659, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 2936, 587, 587, 587, 2939,
  /* 49660 */ 587, 2941, 587, 563, 2895, 563, 563, 563, 563, 563, 563, 563, 563, 563, 0, 0, 587, 587, 587, 587, 2335,
  /* 49681 */ 587, 587, 587, 587, 587, 587, 587, 587, 587, 2947, 587, 587, 587, 587, 587, 541, 587, 563, 587, 2906, 587,
  /* 49702 */ 587, 587, 587, 587, 587, 2913, 587, 2915, 587, 587, 587, 587, 587, 587, 2935, 587, 587, 587, 587, 587,
  /* 49722 */ 587, 587, 587, 587, 2408, 587, 587, 587, 587, 2177, 2349, 587, 587, 587, 2944, 587, 587, 587, 587, 587,
  /* 49742 */ 587, 587, 587, 587, 541, 587, 563, 563, 563, 563, 563, 563, 563, 587, 587, 587, 541, 587, 587, 587, 587,
  /* 49763 */ 587, 587, 3135, 587, 587, 587, 587, 587, 587, 587, 587, 587, 1530, 587, 587, 587, 587, 587, 587, 541, 541,
  /* 49784 */ 541, 541, 3575, 541, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 3423, 563, 563, 563, 3426, 587,
  /* 49804 */ 587, 587, 587, 563, 3587, 563, 563, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 3600, 587, 587,
  /* 49825 */ 587, 587, 3670, 587, 0, 0, 0, 0, 541, 541, 541, 541, 563, 563, 919, 925, 563, 563, 563, 563, 943, 563,
  /* 49847 */ 563, 563, 563, 563, 563, 3353, 563, 563, 563, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587,
  /* 49868 */ 3267, 0, 0, 359, 0, 0, 0, 0, 0, 0, 364, 0, 292, 0, 0, 0, 0, 0, 0, 347, 348, 349, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 49898 */ 2617344, 0, 0, 0, 0, 0, 2789376, 0, 0, 0, 369, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2471, 0, 2472, 0, 0,
  /* 49927 */ 359, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2496, 0, 0, 359, 0, 369, 0, 369, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 49959 */ 0, 2768, 0, 0, 0, 0, 607, 583, 583, 583, 583, 583, 583, 583, 607, 607, 607, 560, 607, 607, 607, 607, 607,
  /* 49982 */ 607, 607, 583, 583, 560, 607, 583, 583, 607, 1, 12290, 541, 863, 541, 541, 541, 541, 541, 541, 541, 541,
  /* 50003 */ 541, 541, 541, 541, 541, 541, 1772, 541, 1010, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587,
  /* 50024 */ 587, 587, 587, 3137, 587, 587, 587, 587, 587, 587, 587, 563, 1386, 563, 563, 563, 563, 563, 563, 563, 563,
  /* 50045 */ 563, 563, 563, 563, 563, 563, 2871, 563, 0, 0, 2760, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2511, 0, 0, 0,
  /* 50073 */ 0, 0, 0, 3302, 0, 3303, 0, 0, 0, 0, 3180, 0, 0, 0, 0, 0, 0, 374, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 50105 */ 360, 361, 362, 363, 0, 0, 364, 0, 292, 0, 0, 0, 0, 0, 0, 447, 0, 473, 473, 473, 473, 473, 473, 473, 473,
  /* 50130 */ 473, 473, 473, 473, 473, 473, 473, 473, 559, 582, 559, 582, 559, 559, 582, 559, 0, 361, 0, 360, 0, 0, 0,
  /* 50153 */ 69632, 73728, 0, 0, 0, 0, 427, 65536, 0, 0, 0, 0, 645, 0, 0, 648, 649, 0, 0, 0, 0, 0, 0, 0, 0, 824, 0, 0,
  /* 50181 */ 0, 0, 0, 0, 0, 0, 1099, 0, 0, 0, 0, 0, 0, 0, 0, 1115, 0, 0, 0, 0, 0, 0, 0, 0, 665, 0, 0, 668, 0, 0, 0, 0,
  /* 50213 */ 427, 427, 0, 0, 427, 0, 361, 456, 0, 0, 0, 0, 0, 0, 0, 0, 305, 205106, 0, 205106, 205337, 205106, 1,
  /* 50236 */ 12290, 0, 0, 0, 497, 0, 497, 504, 504, 504, 504, 510, 511, 504, 504, 524, 524, 524, 524, 456, 456, 456,
  /* 50258 */ 456, 456, 456, 524, 456, 456, 456, 524, 524, 524, 524, 524, 524, 524, 524, 561, 584, 561, 584, 561, 561,
  /* 50279 */ 584, 561, 608, 584, 584, 584, 584, 584, 584, 584, 608, 608, 608, 561, 608, 608, 608, 608, 608, 608, 608,
  /* 50300 */ 584, 584, 620, 608, 626, 626, 631, 1, 12290, 563, 563, 563, 973, 563, 563, 563, 563, 563, 0, 587, 587,
  /* 50321 */ 587, 587, 587, 587, 1963, 587, 587, 587, 587, 587, 587, 587, 587, 587, 3286, 587, 587, 587, 587, 541, 587,
  /* 50342 */ 563, 563, 563, 587, 587, 1047, 587, 587, 78114, 1079, 0, 0, 0, 0, 0, 0, 0, 457, 1147354, 1147354, 1147354,
  /* 50363 */ 1147354, 1147354, 1147354, 1147354, 1147354, 1147354, 1147354, 1147354, 1147354, 1147354, 1147354,
  /* 50374 */ 1147354, 1147354, 0, 2105, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2075, 0, 0, 0, 563, 2245, 563, 563,
  /* 50400 */ 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 2882, 563, 563, 563, 0, 0, 587, 2332, 587, 587, 587,
  /* 50421 */ 587, 587, 587, 587, 587, 587, 587, 587, 587, 2677, 587, 587, 587, 587, 587, 587, 2682, 587, 2550, 541,
  /* 50441 */ 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 2210, 541, 541, 541, 2579, 541, 541,
  /* 50462 */ 541, 541, 541, 541, 541, 541, 541, 541, 0, 0, 0, 0, 0, 0, 2764, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1713, 0, 0,
  /* 50490 */ 0, 0, 0, 2711, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 541, 587, 563, 541, 541, 541, 2021, 563,
  /* 50512 */ 563, 609, 585, 585, 585, 585, 585, 585, 585, 609, 609, 609, 562, 609, 609, 609, 609, 609, 609, 609, 585,
  /* 50533 */ 585, 562, 609, 585, 585, 609, 1, 12290, 0, 0, 705, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2755, 0, 0, 735,
  /* 50561 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2799, 0, 0, 0, 0, 797, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 50594 */ 797, 0, 0, 0, 0, 0, 840, 0, 0, 0, 0, 0, 0, 0, 0, 541, 541, 541, 541, 541, 541, 563, 563, 563, 563, 563,
  /* 50620 */ 563, 933, 563, 563, 947, 563, 563, 563, 563, 541, 864, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541,
  /* 50641 */ 541, 541, 541, 541, 2238, 0, 1011, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587,
  /* 50662 */ 587, 2689, 587, 587, 587, 587, 587, 587, 587, 587, 2716, 587, 587, 587, 541, 587, 563, 541, 541, 1136, 0,
  /* 50683 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 364, 364, 0, 0, 0, 0, 0, 0, 2777, 0, 0, 0, 0, 0, 0, 2784, 0, 0, 541, 541, 541,
  /* 50713 */ 541, 1345, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 2560, 541, 541, 541, 587, 1503,
  /* 50733 */ 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 2911, 587, 2914, 587, 587, 587, 587,
  /* 50754 */ 2919, 587, 563, 587, 587, 587, 587, 587, 1079, 1560, 0, 0, 0, 1566, 0, 0, 0, 1572, 0, 0, 0, 1578, 0, 0, 0,
  /* 50779 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 2979, 0, 0, 0, 978, 563, 1074, 587, 587, 1052, 587, 78114, 1079, 0, 0, 0, 0, 0,
  /* 50806 */ 0, 0, 647, 0, 0, 0, 743, 541, 541, 541, 541, 0, 0, 1594, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2798, 0,
  /* 50835 */ 0, 563, 563, 563, 1846, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 3085, 563, 3087, 563,
  /* 50856 */ 2187, 541, 2189, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 1821, 541, 1360, 0, 0,
  /* 50877 */ 563, 563, 563, 563, 2248, 563, 563, 563, 563, 563, 563, 563, 563, 563, 2305, 563, 563, 563, 563, 563, 563,
  /* 50898 */ 563, 563, 563, 0, 587, 587, 994, 587, 587, 587, 563, 2274, 563, 563, 563, 563, 563, 563, 563, 563, 563,
  /* 50919 */ 563, 563, 563, 563, 563, 2894, 563, 587, 2361, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587,
  /* 50940 */ 587, 587, 3121, 587, 587, 587, 587, 587, 587, 587, 587, 1034, 587, 587, 587, 587, 587, 587, 587, 2623,
  /* 50960 */ 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 3101, 563, 563, 563, 563, 2651,
  /* 50981 */ 0, 0, 0, 0, 0, 0, 587, 587, 587, 587, 587, 587, 587, 587, 587, 2340, 587, 587, 587, 587, 0, 0, 3179, 0, 0,
  /* 51006 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2980, 0, 0, 3245, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563,
  /* 51032 */ 563, 563, 563, 563, 3257, 563, 0, 0, 0, 0, 1134592, 0, 0, 0, 0, 0, 0, 1134592, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 51059 */ 0, 1134592, 0, 1134592, 1134592, 0, 0, 0, 0, 1135203, 1135203, 1135203, 1135203, 1134592, 1135203,
  /* 51074 */ 1135203, 1135203, 1135203, 1135203, 1135203, 0, 1134592, 1134592, 1134592, 1135203, 1134592, 1134592,
  /* 51086 */ 1135203, 1, 12290, 0, 0, 2125824, 2125824, 2125824, 2125824, 2125824, 2424832, 2433024, 2125824, 2125824,
  /* 51100 */ 2125824, 2125824, 2125824, 2125824, 2125824, 0, 0, 0, 0, 1080, 1084, 0, 0, 1088, 1147354, 1147354,
  /* 51116 */ 1147354, 457, 1147354, 457, 457, 457, 457, 457, 457, 457, 457, 457, 1147405, 1147405, 1147405, 1147405,
  /* 51132 */ 1147405, 1147405, 1147405, 1147405, 1147405, 1147405, 1147405, 1147405, 1147405, 1147405, 1147405,
  /* 51143 */ 1147405, 0, 0, 0, 0, 0, 0, 0, 0, 342, 0, 0, 0, 0, 0, 0, 0, 457, 0, 0, 0, 0, 0, 1147354, 1147354, 1147354,
  /* 51169 */ 1147405, 1147354, 1147405, 1147405, 1147405, 1, 12290, 3, 0, 0, 0, 0, 0, 253952, 0, 0, 0, 253952, 0, 0, 0,
  /* 51190 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 303, 0, 0, 0, 0, 0, 1159168, 0, 1159168, 1159168, 0, 1159168, 1159168, 0,
  /* 51213 */ 1159168, 1159168, 1159168, 1159168, 1159168, 1159168, 1159168, 1159168, 0, 0, 0, 0, 0, 0, 0, 0, 402, 0, 0,
  /* 51232 */ 0, 0, 0, 0, 0, 1159168, 1159168, 0, 1159168, 0, 1159168, 1159168, 1159168, 1159168, 1159168, 1159168,
  /* 51248 */ 1159168, 1159168, 1159168, 1159168, 1159168, 1159168, 1159168, 1159168, 1159168, 1159168, 0, 1159168, 0,
  /* 51261 */ 0, 1159168, 1159168, 1159168, 1159168, 1159168, 1159168, 1159168, 1159168, 1159168, 1159168, 1, 12290, 3,
  /* 51275 */ 0, 0, 0, 0, 249856, 0, 0, 0, 249856, 0, 0, 0, 0, 0, 0, 0, 69632, 73728, 163840, 0, 0, 0, 0, 65536, 0, 0,
  /* 51301 */ 913, 2125824, 2125824, 2125824, 2125824, 2125824, 2424832, 2433024, 2125824, 2125824, 2125824, 2125824,
  /* 51313 */ 2125824, 2125824, 2125824, 0, 0, 0, 298, 0, 0, 0, 302, 0, 0, 106496, 106496, 0, 106496, 106496, 106496,
  /* 51332 */ 106496, 106496, 106496, 106496, 106496, 106496, 106496, 106496, 106496, 106496, 106496, 106496, 106496, 0,
  /* 51346 */ 0, 106496, 0, 0, 106496, 106496, 106496, 106496, 106496, 106496, 106496, 106496, 106496, 0, 0, 0, 0, 0, 0,
  /* 51365 */ 0, 0, 0, 0, 0, 2183168, 0, 0, 0, 0, 0, 0, 0, 0, 2134016, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2782, 0, 0, 0,
  /* 51395 */ 0, 0, 0, 0, 3117056, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3002, 0, 0, 0, 0, 3108864, 3198976, 0, 0,
  /* 51421 */ 3043328, 0, 3149824, 2936832, 0, 2760704, 0, 2437120, 0, 0, 0, 0, 0, 0, 2986, 2987, 0, 2988, 0, 2990, 0,
  /* 51442 */ 0, 0, 0, 0, 0, 0, 155648, 0, 0, 0, 0, 0, 0, 0, 0, 0, 364, 0, 292, 0, 0, 0, 347, 0, 0, 0, 0, 2875392, 0, 0,
  /* 51472 */ 0, 0, 0, 0, 0, 0, 0, 0, 2834432
];

XQueryParser.EXPECTED =
[
  /*    0 */ 1039, 1047, 1048, 1046, 1042, 1052, 1056, 1060, 1064, 1068, 1094, 1364, 3115, 1074, 2733, 1094, 2226, 1080,
  /*   18 */ 1190, 1089, 1093, 1214, 1094, 1099, 1094, 1094, 2539, 1162, 1110, 1115, 2333, 1200, 1200, 1121, 1125, 1094,
  /*   36 */ 1543, 1130, 1094, 2175, 1162, 1162, 1139, 1115, 1115, 1083, 1200, 1200, 1145, 1149, 1094, 1094, 1155, 1094,
  /*   54 */ 1161, 1162, 1178, 1115, 1115, 1116, 1200, 1200, 1192, 1167, 1094, 1094, 1239, 1176, 1162, 2329, 1115, 1115,
  /*   72 */ 1141, 1200, 1200, 1184, 1094, 1151, 2806, 1162, 1163, 1115, 1196, 1200, 1201, 1213, 2735, 2175, 1162, 2332,
  /*   90 */ 1117, 1200, 1205, 1151, 1312, 1163, 1115, 1199, 1211, 1724, 2540, 1221, 1085, 2326, 1111, 1236, 1218, 1225,
  /*  108 */ 1180, 1229, 1233, 1187, 1244, 1248, 1252, 1256, 1260, 1262, 1267, 1263, 1271, 1275, 1279, 1283, 1287, 1094,
  /*  126 */ 1371, 1094, 1451, 1436, 1094, 1094, 1291, 1094, 1296, 2054, 1094, 1094, 1094, 2433, 1094, 1094, 1094, 1094,
  /*  144 */ 1094, 1094, 1094, 1094, 1366, 1094, 1094, 1094, 1094, 2805, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
  /*  162 */ 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
  /*  180 */ 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
  /*  198 */ 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
  /*  216 */ 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1300, 1304, 2753,
  /*  234 */ 1310, 2782, 1316, 1319, 1323, 1327, 1331, 1094, 1094, 3001, 1630, 1338, 1342, 1346, 1409, 1410, 1350, 1333,
  /*  252 */ 1094, 1094, 2287, 2155, 1354, 1361, 1094, 1475, 1094, 1878, 1370, 1094, 1375, 1381, 1094, 2856, 2902, 1387,
  /*  270 */ 1839, 1450, 1094, 2216, 1094, 1094, 1873, 1094, 1094, 1094, 1393, 1094, 1554, 1885, 1403, 1407, 1094, 1463,
  /*  288 */ 1414, 1094, 1463, 1414, 1094, 1094, 1377, 1094, 2857, 1076, 2678, 1094, 1292, 1420, 1094, 1464, 1426, 1094,
  /*  306 */ 2925, 1094, 1806, 1431, 1450, 1549, 1450, 1917, 1435, 1094, 1440, 2323, 1445, 1094, 1449, 1579, 1094, 2495,
  /*  324 */ 2373, 1455, 2014, 1548, 1462, 1585, 2141, 1468, 1383, 1959, 2364, 3049, 2397, 2264, 2991, 2365, 1472, 1479,
  /*  342 */ 3047, 1486, 1489, 1094, 1094, 2532, 1094, 1891, 2716, 1357, 1493, 1497, 1501, 1505, 1106, 2048, 2192, 1510,
  /*  360 */ 1514, 1518, 1522, 1910, 1526, 2320, 1104, 1450, 2167, 1530, 1534, 1538, 1542, 1547, 1094, 2685, 1094, 1678,
  /*  378 */ 1094, 2320, 2406, 1553, 1558, 1975, 1567, 1571, 3029, 1094, 1094, 1903, 1094, 1094, 3030, 1094, 1662, 2253,
  /*  396 */ 1577, 1583, 1648, 1589, 2545, 1593, 1094, 2427, 1599, 1094, 2427, 1599, 1094, 2091, 1605, 1611, 1617, 1621,
  /*  414 */ 1627, 1094, 2416, 1634, 1094, 2795, 1640, 1416, 2844, 1646, 1652, 1754, 1094, 1754, 1094, 2833, 1094, 2118,
  /*  432 */ 1966, 1656, 2138, 1856, 1757, 2138, 1422, 1660, 1666, 1948, 1947, 2827, 2116, 1682, 1686, 1690, 2152, 2125,
  /*  450 */ 1701, 1705, 1709, 1713, 1717, 3103, 1721, 1730, 1734, 1738, 1742, 1746, 1094, 2900, 2769, 1751, 1762, 1766,
  /*  468 */ 1769, 1773, 1775, 1896, 1562, 1779, 1786, 2825, 2248, 1790, 1794, 2185, 2186, 1094, 1560, 3040, 1798, 1810,
  /*  486 */ 2093, 1817, 1821, 1825, 2389, 1830, 1094, 2274, 1094, 1094, 2915, 2099, 2697, 1836, 1843, 1094, 1847, 1094,
  /*  504 */ 1094, 1852, 1094, 1094, 1848, 1094, 1094, 1607, 3023, 1860, 1864, 1870, 2748, 1877, 1094, 2205, 1854, 1094,
  /*  522 */ 2205, 1854, 1094, 2434, 2110, 1882, 1813, 1094, 1889, 1094, 2221, 1895, 1094, 3127, 1094, 2055, 1900, 1907,
  /*  540 */ 1916, 1921, 1094, 1921, 1094, 1934, 1094, 1458, 1944, 1094, 1952, 2422, 1094, 1952, 1157, 2665, 2421, 1094,
  /*  558 */ 1958, 1963, 1623, 1973, 1982, 1979, 2504, 1482, 2371, 1396, 2285, 2863, 1988, 2380, 1992, 1998, 2005, 2008,
  /*  576 */ 2012, 1094, 1826, 2018, 2023, 2027, 2031, 2035, 2039, 2043, 2047, 2181, 1427, 2052, 2059, 2068, 2072, 2522,
  /*  594 */ 2913, 2076, 1094, 1094, 2183, 1399, 2080, 2084, 2088, 2097, 1172, 1094, 2355, 2103, 1094, 2108, 1094, 1094,
  /*  612 */ 2114, 2122, 2129, 2145, 2149, 1094, 2164, 1094, 1094, 2173, 1094, 1855, 2179, 1094, 1094, 2190, 3100, 2789,
  /*  630 */ 2196, 1094, 1389, 1094, 1094, 3007, 1094, 1094, 3007, 1094, 1094, 1170, 2663, 2200, 2232, 1641, 2204, 1094,
  /*  648 */ 1674, 1094, 1094, 1672, 1094, 1133, 2209, 2213, 1094, 2220, 1094, 2225, 1094, 1676, 2233, 2672, 2230, 2390,
  /*  666 */ 1094, 2238, 1135, 2104, 1930, 2245, 1669, 1642, 1855, 2252, 2257, 2870, 2484, 2776, 2261, 2268, 2298, 2271,
  /*  684 */ 2652, 2291, 2293, 2297, 2302, 2132, 1094, 1094, 1094, 1094, 1573, 2708, 2478, 2816, 2306, 2310, 2314, 2317,
  /*  702 */ 1094, 2499, 1601, 2337, 2342, 2346, 2350, 1506, 2846, 2847, 2354, 2497, 1450, 2359, 2234, 2369, 2377, 1094,
  /*  720 */ 2988, 1094, 1832, 1094, 2019, 2384, 2388, 1563, 1094, 2394, 2694, 2401, 2405, 1855, 2410, 1094, 1758, 2415,
  /*  738 */ 1094, 1912, 2411, 2420, 1747, 2426, 2431, 2438, 3097, 1094, 1693, 1094, 1094, 2135, 1094, 1094, 2135, 1636,
  /*  756 */ 1747, 2445, 1969, 2449, 1983, 2955, 1094, 1094, 2453, 1094, 1305, 1695, 2461, 2465, 2475, 2482, 1070, 1094,
  /*  774 */ 1726, 1094, 1207, 2455, 2488, 2492, 2503, 1102, 1095, 1094, 2508, 2515, 2519, 2526, 2159, 2530, 2981, 2457,
  /*  792 */ 2536, 2158, 2544, 2549, 2553, 2557, 2561, 2573, 2577, 1940, 2723, 2581, 2564, 2585, 2589, 2593, 2597, 1094,
  /*  810 */ 1937, 2602, 2606, 2610, 2614, 2618, 2622, 1094, 2253, 2626, 2630, 1613, 2634, 2638, 2642, 2646, 2656, 2660,
  /*  828 */ 1094, 2764, 2511, 2669, 2682, 2691, 2706, 1855, 2714, 1094, 2720, 1094, 3055, 2730, 1094, 2739, 2743, 2710,
  /*  846 */ 1782, 2687, 1094, 1953, 2747, 1094, 1595, 2752, 1094, 1954, 2779, 1094, 3061, 2757, 2761, 2280, 2768, 1094,
  /*  864 */ 2773, 1094, 1094, 2786, 1094, 1094, 2786, 2793, 3084, 2799, 2468, 2803, 1094, 2810, 1094, 1094, 2831, 1094,
  /*  882 */ 2169, 2837, 3078, 2441, 1804, 1094, 1924, 1094, 2841, 1094, 3090, 2881, 2851, 2277, 1984, 2855, 1927, 2160,
  /*  900 */ 2861, 2867, 2283, 1866, 1334, 2874, 2879, 2885, 1994, 1306, 2064, 2362, 2889, 2726, 3109, 2893, 2567, 2569,
  /*  918 */ 2897, 2906, 2910, 2919, 2923, 1094, 1094, 1094, 2929, 2933, 2937, 2941, 2945, 2949, 2953, 1094, 2963, 2959,
  /*  936 */ 2001, 2649, 2822, 2967, 1240, 2971, 2975, 2979, 1094, 2985, 2471, 2995, 2999, 3005, 1094, 2598, 1094, 1094,
  /*  954 */ 3011, 1094, 3017, 3021, 1094, 3027, 2338, 3034, 3121, 1094, 1094, 2240, 1094, 1094, 3135, 1094, 1094, 2241,
  /*  972 */ 3038, 1094, 3044, 3072, 3140, 3053, 1094, 1094, 3059, 1094, 1094, 3059, 1094, 1094, 3065, 1094, 3069, 2813,
  /*  990 */ 3152, 1094, 1094, 3076, 1094, 1441, 3082, 1094, 1697, 3088, 3094, 2675, 3107, 1094, 3113, 1094, 3119, 1094,
  /* 1008 */ 3125, 3131, 3139, 2700, 3146, 1094, 3144, 2702, 3013, 3150, 1094, 3156, 1801, 2875, 3158, 2062, 2470, 3133,
  /* 1026 */ 2961, 2819, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1126, 3162, 4163, 3187, 3199, 3204,
  /* 1044 */ 3199, 3207, 3198, 3199, 3199, 3199, 3199, 3194, 3190, 3211, 3200, 3215, 3230, 3233, 3221, 3224, 3226, 3236,
  /* 1062 */ 3218, 3240, 3244, 3248, 3251, 3255, 3271, 3284, 3302, 3302, 3174, 5037, 3301, 3799, 3302, 3302, 3369, 3302,
  /* 1080 */ 3434, 3434, 4458, 4459, 3328, 3308, 3308, 3389, 3449, 3313, 3325, 3334, 4020, 3338, 3302, 3302, 3302, 3302,
  /* 1098 */ 3177, 3352, 3359, 3419, 3302, 3177, 3302, 3302, 4911, 4915, 3783, 3302, 3434, 3434, 4459, 4459, 4462, 4459,
  /* 1116 */ 4459, 4459, 4459, 3319, 3308, 3373, 4457, 3377, 3407, 3381, 3302, 3302, 3302, 3303, 3385, 4653, 3799, 3302,
  /* 1134 */ 3182, 3302, 3302, 4837, 4802, 3434, 4640, 4459, 4459, 3320, 3308, 3389, 3395, 3399, 3406, 4022, 4023, 3302,
  /* 1152 */ 3302, 3420, 3302, 5810, 3798, 3302, 3302, 3426, 4504, 4455, 3434, 3434, 3434, 3434, 3318, 3316, 3403, 3411,
  /* 1170 */ 3302, 3183, 3302, 3302, 4702, 4706, 3302, 5335, 3434, 3434, 3434, 3435, 4459, 3319, 3308, 3391, 3397, 3418,
  /* 1188 */ 4455, 3434, 4459, 3329, 3308, 3308, 3308, 3445, 4459, 4459, 4459, 4462, 3308, 3308, 3308, 3308, 3390, 3389,
  /* 1206 */ 3439, 3302, 3302, 3427, 5085, 3308, 3390, 3440, 3302, 3302, 3302, 3343, 4639, 3434, 3318, 4459, 4459, 4459,
  /* 1224 */ 3444, 4463, 3308, 3451, 5335, 3308, 4464, 3302, 3433, 3435, 4459, 3320, 3308, 3309, 3451, 3800, 3302, 3302,
  /* 1242 */ 3302, 3339, 4461, 3308, 3418, 4640, 4460, 3330, 4455, 4458, 4464, 4456, 3321, 3457, 3464, 3466, 4540, 3470,
  /* 1260 */ 3477, 3481, 3498, 3498, 3498, 3498, 3544, 3499, 3485, 3489, 3493, 3497, 3503, 3507, 3511, 3473, 3515, 3519,
  /* 1278 */ 3521, 3525, 3527, 3531, 3535, 3539, 3542, 3548, 3552, 3556, 3560, 4074, 3567, 3902, 3302, 3302, 3302, 3366,
  /* 1296 */ 3302, 5663, 5029, 5570, 4818, 4820, 3302, 3597, 3601, 3302, 3302, 3302, 3452, 5523, 4014, 3607, 3302, 3302,
  /* 1314 */ 3433, 3434, 3626, 3630, 3634, 3636, 3637, 3641, 3645, 3649, 3653, 3656, 3660, 3663, 3667, 3671, 3675, 4823,
  /* 1332 */ 4771, 3599, 3302, 3302, 3302, 3563, 3302, 5158, 3302, 4733, 3692, 4734, 3302, 4708, 3302, 5318, 3700, 3706,
  /* 1350 */ 3722, 3729, 3302, 4771, 4929, 4929, 5451, 4387, 4350, 4798, 3965, 3758, 3766, 3782, 3302, 3293, 3302, 3302,
  /* 1368 */ 3365, 3302, 3794, 3302, 3302, 3302, 3576, 3811, 3363, 3302, 3302, 3460, 3302, 3817, 3602, 3302, 3302, 3680,
  /* 1386 */ 3919, 3368, 4861, 3302, 3302, 3702, 4750, 3302, 5184, 3945, 3302, 3303, 4478, 3302, 3355, 4603, 3945, 3775,
  /* 1404 */ 3302, 3302, 5304, 3761, 3852, 3302, 3302, 3714, 3302, 3302, 3856, 3864, 3302, 3302, 3742, 3302, 3873, 3769,
  /* 1422 */ 3302, 3302, 3744, 4911, 3860, 3302, 3302, 3302, 3581, 5402, 5778, 3676, 3762, 4315, 3302, 3302, 3302, 3590,
  /* 1440 */ 4632, 3302, 3302, 3302, 3593, 4499, 5778, 3894, 3901, 4312, 3783, 3302, 3302, 3302, 3580, 5776, 4310, 4314,
  /* 1458 */ 3302, 3425, 3622, 4486, 4313, 3302, 3302, 3302, 3603, 3856, 3919, 3302, 3302, 3937, 3302, 5118, 4346, 3302,
  /* 1476 */ 3603, 3790, 3795, 5015, 3302, 5016, 5116, 3302, 3302, 5735, 4348, 3302, 3582, 4452, 3302, 3354, 3582, 3969,
  /* 1494 */ 3970, 3974, 3976, 3980, 3984, 3984, 3984, 3987, 3988, 3992, 3988, 3996, 3302, 3302, 3302, 3610, 3302, 5163,
  /* 1512 */ 4007, 3710, 4192, 5588, 3302, 5727, 4220, 3586, 5765, 4000, 3165, 4972, 3302, 4011, 4033, 3302, 3302, 4033,
  /* 1530 */ 4651, 3302, 3302, 4045, 4051, 4107, 3845, 5276, 4058, 3302, 5031, 3168, 5295, 3302, 3302, 3302, 3616, 4067,
  /* 1548 */ 3302, 3302, 3302, 3676, 3762, 3952, 3302, 3302, 3302, 3677, 4220, 3302, 3302, 3822, 4965, 3302, 3302, 3302,
  /* 1566 */ 3738, 4078, 4192, 5285, 5725, 5030, 3897, 3302, 3302, 3882, 3886, 4095, 5060, 3302, 3302, 3894, 3901, 3302,
  /* 1584 */ 5652, 3302, 3302, 3906, 3302, 4191, 5284, 5340, 4255, 4114, 4098, 3302, 3302, 3921, 3925, 4143, 4121, 3302,
  /* 1602 */ 3302, 3931, 4919, 4047, 4133, 3302, 3302, 3946, 3302, 4220, 3302, 3302, 3824, 4367, 3302, 4741, 3708, 4107,
  /* 1620 */ 4193, 5286, 5062, 3302, 3302, 3947, 3304, 3801, 4141, 4145, 3302, 3684, 5342, 5530, 4149, 4153, 3302, 3302,
  /* 1638 */ 3947, 4982, 4099, 3302, 3302, 3302, 3716, 4854, 5652, 3302, 3824, 3302, 4668, 4105, 4174, 4192, 5799, 4160,
  /* 1656 */ 4173, 4191, 4848, 4202, 4190, 4040, 3302, 3302, 4082, 3302, 3345, 4193, 4200, 3302, 3716, 4770, 3302, 3718,
  /* 1674 */ 3302, 3302, 4775, 4770, 3302, 3302, 4788, 4071, 4136, 3302, 4370, 4074, 4955, 4391, 4213, 5450, 3302, 5429,
  /* 1692 */ 4218, 3302, 3724, 5036, 3783, 3302, 3302, 4839, 5804, 5430, 4219, 5429, 4218, 4817, 4214, 3302, 3414, 4795,
  /* 1710 */ 3413, 4228, 3847, 5449, 3847, 5449, 3414, 3280, 3848, 5450, 4226, 3287, 4219, 5447, 3302, 3799, 3302, 3302,
  /* 1728 */ 3428, 5086, 5448, 4808, 4074, 4806, 4804, 3302, 3289, 5687, 5474, 4235, 4235, 4175, 4499, 4500, 4242, 4244,
  /* 1746 */ 4248, 3302, 3302, 3302, 3736, 5141, 4956, 4252, 3302, 3801, 4990, 4117, 3302, 3302, 3302, 3725, 4997, 4259,
  /* 1764 */ 3826, 4413, 4263, 4267, 4271, 4271, 4274, 4278, 4281, 4284, 4281, 4288, 4288, 4289, 3302, 5728, 4533, 4293,
  /* 1782 */ 3302, 3801, 5375, 5380, 3695, 4449, 3688, 4298, 4308, 5471, 4319, 5582, 5747, 5000, 3302, 4327, 4294, 3302,
  /* 1800 */ 3696, 3302, 3801, 5829, 3302, 3802, 3302, 5733, 4194, 3302, 4814, 4398, 3302, 4376, 3302, 4444, 4195, 4815,
  /* 1818 */ 5669, 3302, 3585, 5778, 3302, 3813, 4340, 4344, 3302, 3302, 3302, 3747, 4356, 4361, 3302, 3302, 4156, 5012,
  /* 1836 */ 4396, 3302, 4764, 3302, 3821, 3831, 3839, 3302, 5758, 3302, 4196, 3302, 5713, 4404, 4442, 3302, 3302, 5715,
  /* 1854 */ 4406, 3302, 3302, 3302, 3801, 3258, 4386, 3302, 5110, 5057, 5221, 4374, 3302, 3302, 4186, 3302, 4410, 3302,
  /* 1872 */ 4417, 3302, 3835, 3839, 3783, 4434, 3302, 3302, 3302, 3789, 3302, 5110, 4017, 3302, 3845, 3302, 3367, 5703,
  /* 1890 */ 5707, 3302, 3302, 4220, 3956, 4441, 3302, 3302, 3302, 3822, 3302, 5284, 4468, 3302, 3909, 3913, 3796, 5110,
  /* 1908 */ 3302, 4375, 3302, 4027, 3302, 3302, 3801, 5035, 5339, 3302, 3302, 3302, 3890, 3302, 5050, 4477, 3302, 4029,
  /* 1926 */ 5465, 3302, 4035, 5491, 3302, 4041, 3302, 4828, 3302, 5049, 4476, 3302, 4061, 4597, 3302, 4101, 3302, 4101,
  /* 1944 */ 4450, 5115, 4374, 3302, 4110, 4209, 3302, 3302, 5493, 3302, 3302, 3302, 3923, 3927, 5350, 3302, 3302, 3302,
  /* 1962 */ 3944, 3302, 5349, 3615, 3302, 4122, 3302, 4653, 3364, 3302, 4796, 3302, 5118, 3302, 3302, 4304, 3801, 4508,
  /* 1980 */ 3302, 3302, 5518, 3426, 3302, 3302, 3302, 4035, 3302, 5732, 3302, 5732, 3677, 3302, 3678, 3302, 3302, 5147,
  /* 1998 */ 5118, 5734, 5732, 3302, 4123, 4823, 3583, 3678, 5116, 3678, 5734, 5790, 5733, 5734, 4514, 4516, 3302, 3302,
  /* 2016 */ 4310, 4314, 4596, 3302, 3302, 3302, 4155, 4797, 3302, 3302, 4400, 4526, 4598, 4530, 5081, 3778, 4538, 4544,
  /* 2034 */ 4548, 4555, 4551, 4559, 4563, 4565, 4571, 4569, 4575, 4578, 4581, 4580, 4582, 4586, 3302, 3302, 3302, 4221,
  /* 2052 */ 4602, 3180, 4072, 3302, 3302, 3302, 3423, 4817, 4677, 4934, 4388, 5115, 3302, 3302, 5835, 5792, 4607, 5118,
  /* 2070 */ 3302, 4613, 4619, 4623, 4629, 3827, 4663, 3302, 3302, 4663, 4073, 3302, 4819, 4723, 5781, 4666, 4676, 4349,
  /* 2088 */ 5343, 4681, 4690, 3302, 4127, 3302, 3302, 3940, 3302, 3171, 4698, 3302, 3302, 4380, 4384, 4713, 3302, 3302,
  /* 2106 */ 3302, 4370, 4831, 4712, 3302, 3302, 4380, 4427, 4717, 4740, 3302, 3302, 4443, 3745, 4912, 4167, 4450, 4493,
  /* 2124 */ 4497, 3302, 4137, 3279, 4336, 3347, 3302, 4721, 5292, 3302, 5781, 3302, 4155, 5072, 3302, 4179, 4183, 3302,
  /* 2142 */ 3685, 3348, 3680, 5336, 4922, 4481, 4169, 4684, 3302, 4510, 3302, 4213, 5450, 3302, 3751, 5157, 3302, 3265,
  /* 2160 */ 3302, 3302, 3302, 5548, 3801, 4728, 4732, 3302, 4222, 3302, 3302, 3801, 5455, 5768, 4730, 3302, 3302, 4454,
  /* 2178 */ 3434, 5770, 4732, 3302, 3302, 4594, 3945, 3302, 3302, 4334, 3302, 3302, 3746, 4738, 3302, 3302, 4650, 3302,
  /* 2196 */ 4921, 4480, 4781, 4745, 4820, 5293, 4390, 4763, 4769, 3302, 3302, 3302, 4423, 4041, 3302, 4817, 5779, 4389,
  /* 2214 */ 4922, 4780, 3302, 4230, 3837, 3841, 4785, 3302, 3302, 3302, 4431, 4776, 3302, 3302, 3302, 4455, 3961, 4921,
  /* 2232 */ 3453, 3302, 3302, 3302, 4373, 4970, 3716, 4854, 3302, 3302, 4837, 5721, 5729, 5337, 4923, 4836, 3302, 4302,
  /* 2250 */ 4609, 3879, 4853, 3302, 3302, 3302, 4817, 4795, 4759, 4843, 4847, 3302, 5138, 4845, 3302, 4346, 3302, 4346,
  /* 2268 */ 5291, 3302, 3302, 5294, 3302, 5294, 3302, 4355, 4360, 3302, 3802, 3676, 3302, 3804, 5381, 3302, 3804, 5734,
  /* 2286 */ 3302, 3679, 3302, 3733, 4445, 3302, 5779, 3302, 5292, 3302, 5294, 5291, 3302, 5780, 3302, 4351, 5781, 5780,
  /* 2304 */ 3302, 5294, 4872, 4876, 4883, 4884, 4879, 4888, 4892, 4902, 4906, 4894, 4896, 4896, 4898, 4910, 3302, 4419,
  /* 2322 */ 4039, 3302, 3676, 4193, 3302, 3422, 4454, 3434, 3434, 3434, 4641, 4459, 4459, 4459, 3329, 5746, 3302, 3302,
  /* 2340 */ 3302, 4819, 4794, 4949, 3302, 4928, 3302, 5734, 3806, 4933, 4938, 4944, 4953, 4960, 5534, 3302, 3302, 3302,
  /* 2358 */ 4832, 5697, 3825, 3296, 3302, 4446, 3302, 3302, 5015, 3302, 5015, 3366, 3302, 3302, 5734, 3302, 3677, 4194,
  /* 2376 */ 3302, 4868, 4976, 4994, 3302, 4478, 3302, 5735, 5011, 3302, 3302, 5018, 5023, 3302, 3302, 3302, 4837, 4793,
  /* 2394 */ 4672, 3302, 3365, 3302, 4479, 3302, 5013, 5042, 3302, 3754, 4054, 5027, 3302, 3302, 3302, 4914, 5035, 3572,
  /* 2412 */ 3302, 3302, 5017, 5037, 3302, 3302, 3302, 5177, 5019, 3302, 3302, 3302, 5350, 3302, 3740, 3302, 3302, 3302,
  /* 2430 */ 5423, 4670, 4653, 3297, 3302, 3302, 3302, 3424, 4794, 4588, 3302, 5041, 5459, 5476, 3785, 3740, 3302, 3302,
  /* 2448 */ 3932, 4590, 3302, 3302, 5066, 3801, 5071, 3930, 3302, 4084, 3426, 5567, 4651, 4491, 3425, 3302, 5376, 3740,
  /* 2466 */ 3302, 4724, 3825, 4369, 3302, 3806, 3302, 3302, 4821, 3364, 4371, 4589, 3302, 4532, 4129, 4859, 3302, 5076,
  /* 2484 */ 3302, 3302, 4852, 3302, 3302, 5090, 3302, 3933, 3296, 4370, 4588, 3302, 4631, 3302, 3302, 3801, 3884, 3783,
  /* 2502 */ 3302, 5291, 3426, 3302, 3302, 4351, 3302, 5098, 3302, 3423, 3366, 3302, 5269, 4086, 5043, 3796, 4392, 3361,
  /* 2520 */ 4795, 5079, 3302, 4636, 4645, 4659, 5744, 3302, 3302, 4072, 3302, 5103, 3302, 3302, 4913, 3951, 4372, 5080,
  /* 2538 */ 5107, 3302, 4639, 3434, 3434, 4641, 3263, 3302, 3302, 3302, 5572, 5122, 4979, 4350, 4370, 3687, 5745, 4100,
  /* 2556 */ 3783, 3302, 5129, 3302, 4522, 5135, 4387, 5154, 3302, 4649, 4647, 3302, 4654, 3302, 5558, 5538, 3302, 5129,
  /* 2574 */ 4478, 5162, 4478, 5162, 4471, 5167, 4521, 4518, 3302, 4519, 4472, 3277, 5175, 5190, 4520, 5173, 4518, 3274,
  /* 2592 */ 5181, 5188, 5194, 5197, 5198, 3295, 3302, 3302, 3302, 5691, 3421, 3302, 3946, 5654, 4824, 5202, 5341, 5209,
  /* 2610 */ 5206, 3822, 5215, 5225, 5230, 5228, 5234, 5238, 5242, 5245, 5249, 5253, 5259, 5257, 5260, 5264, 4063, 3302,
  /* 2628 */ 3422, 3426, 5517, 5268, 5273, 5282, 3302, 5290, 3302, 5299, 3772, 3783, 5303, 3303, 3302, 5468, 5308, 5312,
  /* 2646 */ 3302, 5487, 3783, 3302, 4693, 5783, 5782, 3302, 5782, 5779, 4940, 3302, 3302, 4940, 3302, 5322, 5330, 3302,
  /* 2664 */ 4758, 3302, 3302, 4765, 3302, 5421, 5283, 4650, 3302, 4759, 3302, 4823, 3302, 4693, 3302, 4231, 3858, 3783,
  /* 2682 */ 5334, 3302, 5499, 3302, 4789, 3302, 3302, 3867, 3302, 3302, 5381, 3807, 3302, 4795, 4615, 3302, 4482, 5115,
  /* 2700 */ 3688, 3302, 3302, 3302, 5823, 3302, 3867, 5347, 3302, 3302, 4947, 3302, 4652, 4368, 5354, 5358, 3302, 3302,
  /* 2718 */ 4985, 3960, 3302, 5366, 3571, 3302, 4812, 4100, 3302, 4655, 3302, 5682, 3302, 5371, 5370, 3302, 4816, 3302,
  /* 2736 */ 3302, 3419, 3302, 3302, 5510, 5395, 3799, 5029, 5041, 5678, 5461, 5385, 3302, 3302, 3302, 5714, 3929, 3302,
  /* 2754 */ 3302, 3302, 5728, 3947, 4855, 5736, 5680, 5399, 3823, 4367, 3302, 4817, 4063, 3797, 4322, 3302, 3302, 3302,
  /* 2772 */ 5731, 3801, 5410, 3876, 3302, 4817, 4802, 3302, 4321, 5389, 3302, 4330, 3614, 3620, 5150, 5414, 3876, 3302,
  /* 2790 */ 4818, 5291, 4388, 3867, 3869, 3302, 3302, 4988, 4143, 5029, 5676, 5680, 4418, 5427, 3676, 4303, 3302, 3302,
  /* 2808 */ 3302, 3432, 3302, 5434, 5439, 3302, 4822, 3584, 3302, 4865, 5748, 5338, 3302, 3302, 3302, 4373, 4821, 3302,
  /* 2826 */ 4374, 3302, 3302, 4109, 4208, 5435, 5444, 3302, 3302, 4989, 4116, 5440, 3302, 5389, 4323, 3302, 5150, 5481,
  /* 2844 */ 3302, 4914, 3302, 3302, 4003, 3302, 5533, 3366, 5737, 5341, 3784, 5498, 3302, 3302, 3302, 5733, 4924, 5497,
  /* 2862 */ 4237, 3679, 3302, 5117, 3676, 5486, 5503, 5509, 5114, 3302, 4817, 4793, 4122, 3302, 3302, 3302, 5828, 3562,
  /* 2880 */ 5491, 4238, 3302, 3302, 5485, 5514, 4445, 4448, 3805, 3427, 5149, 3302, 5522, 4090, 3302, 4090, 5527, 4654,
  /* 2898 */ 3302, 5559, 3302, 4963, 3302, 3302, 4091, 3302, 5560, 4448, 3302, 5547, 4088, 3302, 5552, 3302, 5003, 3302,
  /* 2916 */ 3302, 4365, 3302, 5557, 3846, 5556, 5114, 5112, 3302, 3302, 3302, 5061, 3602, 5094, 5144, 5564, 4966, 4204,
  /* 2934 */ 4741, 5576, 5580, 5220, 5586, 5592, 5596, 5600, 5604, 5608, 5612, 5616, 5619, 5626, 5630, 5622, 5634, 5637,
  /* 2952 */ 5641, 5645, 5649, 3302, 3302, 5070, 3929, 5504, 3302, 3805, 3302, 3302, 3302, 5092, 3261, 5658, 4625, 3302,
  /* 2970 */ 5315, 5662, 3302, 5278, 3685, 3302, 5278, 5667, 5325, 5326, 3302, 3302, 3302, 5102, 3302, 5092, 5673, 5505,
  /* 2988 */ 3302, 5007, 4006, 3302, 4479, 3302, 4347, 4451, 3302, 5335, 4447, 4677, 3302, 3302, 3302, 5125, 4746, 5686,
  /* 3006 */ 4418, 3302, 3302, 5211, 4754, 5361, 3685, 3302, 3302, 5218, 3803, 3302, 5360, 5695, 5730, 5798, 3302, 3302,
  /* 3024 */ 3302, 5284, 4382, 5093, 5754, 3302, 3801, 3911, 3915, 3302, 4453, 3302, 4693, 4195, 5741, 3302, 3302, 3302,
  /* 3042 */ 5284, 4534, 4443, 5752, 5756, 3302, 5016, 5014, 3302, 4450, 4349, 3302, 5774, 3302, 3302, 5365, 3570, 4838,
  /* 3060 */ 5787, 3302, 3302, 5393, 4437, 4838, 5787, 5285, 5796, 4686, 5754, 3302, 3803, 3302, 3302, 5762, 4838, 5803,
  /* 3078 */ 3302, 3302, 5418, 3302, 5808, 3302, 3302, 3302, 5418, 3799, 5741, 5731, 3302, 3302, 5480, 4122, 3267, 5756,
  /* 3096 */ 3806, 3302, 5047, 5054, 3302, 4489, 4495, 3302, 4226, 3302, 4810, 5131, 3302, 3302, 3302, 5541, 3302, 5405,
  /* 3114 */ 3685, 3302, 3302, 5543, 5169, 3592, 5815, 3302, 3302, 5701, 5711, 3801, 5814, 3302, 3302, 5705, 4436, 3302,
  /* 3132 */ 5819, 3302, 3804, 3302, 3302, 5719, 5723, 4818, 3302, 4389, 4449, 3301, 5406, 3302, 3302, 3302, 5824, 3302,
  /* 3150 */ 4819, 3302, 4694, 3302, 3686, 5735, 3592, 5042, 3302, 3302, 5833, 3302, 6444, 6412, 5839, 5843, 5841, 5841,
  /* 3168 */ 5843, 5843, 6594, 5843, 5843, 6603, 5843, 5843, 6629, 5932, 6508, 6213, 5840, 6448, 5843, 5843, 6122, 6432,
  /* 3186 */ 5843, 5867, 6347, 6533, 5993, 5868, 5993, 5874, 6432, 6132, 6532, 5869, 5870, 5993, 5993, 5993, 5993, 6530,
  /* 3204 */ 5966, 6531, 5869, 5993, 5873, 5993, 5993, 5876, 5993, 5993, 5886, 5909, 5914, 5915, 5922, 5923, 5923, 5921,
  /* 3222 */ 5918, 5918, 5919, 5919, 5919, 5919, 5924, 5921, 5917, 5913, 5912, 5921, 5921, 5912, 5912, 5911, 5921, 5910,
  /* 3240 */ 5926, 5938, 5940, 5942, 5944, 5947, 5945, 5948, 5950, 5953, 5950, 5950, 5952, 5951, 5955, 5958, 5957, 5956,
  /* 3258 */ 6444, 5897, 6246, 6389, 6650, 5843, 5843, 6508, 6148, 5843, 5843, 6389, 5901, 6412, 6582, 5840, 6377, 6433,
  /* 3276 */ 5843, 6377, 6433, 5843, 6678, 5843, 6215, 5843, 5887, 5888, 6647, 5933, 5843, 5934, 5971, 6008, 5843, 5843,
  /* 3294 */ 6678, 6679, 5843, 5843, 5843, 6592, 5843, 6383, 5843, 5843, 5843, 5843, 5840, 5843, 5981, 5981, 5981, 5981,
  /* 3312 */ 5961, 5900, 6773, 5980, 5960, 5988, 5961, 5898, 5898, 5898, 5981, 5981, 5843, 5988, 5988, 5901, 5898, 5896,
  /* 3330 */ 5981, 5981, 5981, 5900, 5898, 5981, 5981, 5968, 6386, 5843, 5843, 5843, 5849, 5843, 6678, 6433, 5843, 5933,
  /* 3348 */ 5843, 5843, 5843, 6391, 5843, 6773, 5881, 5843, 5843, 5881, 6026, 6578, 6388, 6589, 5843, 6592, 5843, 6578,
  /* 3366 */ 5843, 5843, 5843, 5901, 6238, 5843, 6726, 5981, 5900, 5980, 5960, 5899, 5981, 5981, 6769, 6386, 6386, 6386,
  /* 3384 */ 5933, 5843, 6578, 6579, 6388, 5981, 5981, 5981, 5987, 5982, 5988, 5982, 5988, 5988, 5898, 5898, 5981, 5981,
  /* 3402 */ 5903, 5899, 5981, 6400, 5903, 5903, 5903, 5903, 6770, 6770, 6386, 5933, 5843, 5843, 6473, 5881, 5981, 5843,
  /* 3420 */ 5843, 5843, 5859, 5843, 5843, 5843, 5853, 5843, 5843, 5843, 5854, 5930, 5843, 6767, 5988, 5988, 5988, 5988,
  /* 3438 */ 5898, 5982, 5988, 5898, 5981, 5843, 5898, 5981, 5981, 5981, 5980, 5961, 5899, 5900, 5843, 5843, 5843, 5878,
  /* 3456 */ 5843, 5988, 5898, 5981, 6767, 6242, 6163, 6448, 5899, 6767, 5899, 6767, 5899, 5843, 6011, 6214, 6016, 6353,
  /* 3474 */ 6038, 6065, 6067, 6034, 6353, 6358, 6036, 6042, 6040, 6353, 6353, 6047, 6356, 6359, 6354, 6355, 6005, 6049,
  /* 3492 */ 6052, 6043, 6039, 6353, 6353, 6050, 6353, 6353, 6353, 6353, 6045, 5999, 6058, 6353, 6353, 6435, 6353, 6000,
  /* 3510 */ 6060, 6063, 6353, 6062, 6037, 6070, 6070, 6068, 6071, 6069, 6073, 6072, 6072, 6072, 6072, 6077, 6077, 6078,
  /* 3528 */ 6078, 6080, 6080, 6080, 6075, 6075, 6075, 6082, 6075, 6084, 6086, 6088, 6090, 6075, 5859, 6359, 6357, 6353,
  /* 3546 */ 6054, 6056, 6360, 6888, 6093, 6095, 6101, 6097, 6100, 6100, 6098, 6103, 6105, 6074, 6107, 6091, 5843, 5843,
  /* 3564 */ 5844, 5855, 6156, 6001, 5843, 6237, 6768, 6128, 6425, 5840, 5843, 5843, 5843, 6807, 5843, 6004, 6885, 5843,
  /* 3582 */ 5843, 5843, 5881, 5843, 5843, 5843, 5882, 5843, 6109, 6250, 5843, 5843, 5844, 6016, 5897, 5843, 6428, 6219,
  /* 3600 */ 6127, 6130, 6453, 5843, 5843, 5843, 5927, 6650, 6123, 6211, 5843, 5843, 6685, 6687, 6428, 6650, 5843, 5843,
  /* 3618 */ 5843, 5931, 6140, 6145, 5843, 6210, 6440, 5843, 6236, 5843, 6152, 6447, 6421, 6446, 6154, 6248, 6149, 6166,
  /* 3636 */ 6168, 6168, 6168, 6168, 6170, 6174, 6171, 6171, 6171, 6172, 6171, 6175, 6177, 6182, 6182, 6182, 6181, 6182,
  /* 3654 */ 6180, 6179, 6179, 6184, 6186, 6186, 6188, 6187, 6190, 6190, 6191, 6195, 6196, 6195, 6199, 6195, 6198, 6195,
  /* 3672 */ 6192, 6193, 6201, 6202, 5843, 5843, 5843, 5934, 5843, 5843, 5843, 5971, 6452, 6413, 5843, 5843, 5843, 5974,
  /* 3690 */ 5843, 5843, 5843, 6608, 6209, 5843, 5843, 6691, 5881, 6445, 5843, 6606, 5843, 5843, 5844, 6411, 6275, 6260,
  /* 3708 */ 5843, 5843, 5844, 6433, 5843, 6365, 6259, 6261, 5843, 5843, 5844, 6444, 6633, 6515, 6265, 6266, 5843, 5843,
  /* 3726 */ 5844, 6466, 6630, 6675, 5843, 5843, 6267, 5843, 6446, 6155, 5843, 5843, 6700, 6385, 6162, 6148, 5843, 5843,
  /* 3744 */ 6350, 6351, 5843, 5843, 5843, 6244, 5927, 5901, 6270, 6274, 5843, 5843, 6773, 6448, 6764, 6766, 5843, 5927,
  /* 3762 */ 6292, 6581, 6768, 6024, 6631, 6113, 6768, 6378, 6028, 6148, 5843, 5843, 6776, 5843, 5843, 6777, 5843, 5843,
  /* 3780 */ 6780, 5933, 6280, 5840, 5843, 5843, 5843, 5996, 5843, 5927, 6631, 6112, 6114, 6271, 6271, 6279, 6148, 5843,
  /* 3798 */ 5843, 5843, 6001, 5843, 5843, 5843, 5844, 5843, 5843, 5843, 5845, 5843, 5843, 6164, 6158, 5843, 5843, 5844,
  /* 3816 */ 6521, 5843, 6767, 6220, 6130, 6891, 5843, 5843, 5843, 6021, 5843, 5843, 5843, 6025, 5843, 6765, 5927, 6286,
  /* 3834 */ 6390, 5901, 6474, 6648, 6217, 5979, 6271, 6290, 6213, 5840, 5843, 5843, 6413, 5843, 5843, 5854, 6246, 6478,
  /* 3852 */ 6378, 6128, 6213, 5840, 6292, 6217, 5979, 6271, 6818, 6213, 5840, 5843, 6432, 6129, 6148, 5843, 5843, 6793,
  /* 3870 */ 5843, 6793, 5843, 6474, 6382, 6581, 6768, 6621, 6426, 5843, 5843, 6881, 5843, 5844, 6002, 5904, 6481, 6147,
  /* 3888 */ 5840, 5843, 5934, 6292, 6581, 6768, 5843, 6474, 6581, 6219, 6448, 5843, 6376, 6693, 5843, 5843, 5843, 6119,
  /* 3906 */ 5843, 6469, 6448, 5843, 5844, 6396, 5985, 6382, 5965, 6838, 6727, 6148, 5843, 6023, 5840, 5843, 5843, 5844,
  /* 3924 */ 6806, 6624, 6771, 6803, 6620, 6028, 6426, 5843, 5843, 5843, 6514, 5881, 6589, 5975, 6581, 6469, 5843, 5844,
  /* 3942 */ 6412, 6126, 6377, 6448, 5843, 5843, 5843, 6026, 5843, 6018, 6028, 5840, 5843, 5843, 5843, 6381, 6301, 6148,
  /* 3960 */ 5853, 6116, 5843, 5843, 5989, 6440, 6586, 6304, 6308, 6288, 6311, 6311, 6311, 6311, 6310, 6311, 6311, 6311,
  /* 3978 */ 6313, 6316, 6314, 6314, 6314, 6314, 6318, 6318, 6318, 6318, 6320, 6320, 6320, 6320, 6320, 6320, 6321, 6320,
  /* 3996 */ 6322, 6322, 6322, 6322, 5843, 6593, 6329, 5843, 5844, 6686, 6688, 5843, 5843, 5843, 6459, 6392, 6393, 6339,
  /* 4014 */ 5843, 5845, 6122, 6122, 6029, 5843, 6583, 5903, 5903, 6386, 6386, 6386, 5843, 5990, 6342, 5843, 5843, 5844,
  /* 4032 */ 6815, 6341, 6343, 5843, 5843, 5844, 6822, 6364, 5843, 5843, 5843, 6214, 6154, 6584, 5905, 5843, 5843, 5846,
  /* 4050 */ 5879, 6440, 5905, 6367, 5843, 5846, 6350, 6691, 5843, 6350, 5994, 5843, 5846, 6404, 6271, 6432, 6448, 5991,
  /* 4068 */ 6462, 6283, 6729, 6728, 5843, 5843, 5843, 6215, 5843, 5843, 6433, 5843, 6215, 6583, 5906, 5907, 5843, 5843,
  /* 4086 */ 5853, 5853, 5843, 5843, 5855, 6413, 5843, 5843, 5856, 5879, 6245, 6380, 6692, 6284, 5843, 5843, 5843, 6220,
  /* 4104 */ 5840, 5844, 6433, 5843, 6370, 5843, 5843, 5846, 6466, 6246, 5984, 6588, 6382, 6255, 6896, 6214, 5843, 6727,
  /* 4122 */ 6214, 5843, 5843, 5843, 6242, 6418, 6419, 5843, 5843, 5877, 5975, 6245, 6380, 6621, 5843, 5846, 6473, 5881,
  /* 4140 */ 5843, 6455, 5927, 6587, 6389, 6703, 6838, 6284, 5843, 6406, 6588, 6382, 6255, 6711, 6214, 5843, 5843, 5878,
  /* 4158 */ 5902, 6702, 5843, 6767, 5865, 5843, 5864, 6348, 6131, 6246, 6018, 5843, 5843, 5878, 6583, 5843, 6367, 5843,
  /* 4176 */ 6215, 5843, 6237, 6442, 6458, 5927, 6588, 5964, 6838, 6147, 5843, 5878, 6824, 6214, 6246, 5843, 5843, 5843,
  /* 4194 */ 6262, 5843, 5843, 5843, 6111, 6391, 6650, 6350, 5843, 6219, 5843, 5843, 5888, 6583, 6246, 5977, 6471, 6214,
  /* 4212 */ 5843, 5846, 6473, 5976, 6211, 6008, 5977, 6368, 5843, 5843, 5843, 6299, 6324, 5843, 5843, 6473, 5971, 6368,
  /* 4230 */ 5843, 5843, 5901, 6474, 6390, 5843, 6477, 5843, 5843, 5934, 5934, 5934, 6215, 5843, 6391, 5843, 6391, 5843,
  /* 4248 */ 5843, 6391, 6391, 6391, 6481, 6819, 5840, 5843, 5882, 6767, 5865, 5843, 6440, 6797, 6025, 5843, 6831, 6344,
  /* 4266 */ 6830, 6345, 6026, 6346, 6344, 6484, 6484, 6484, 6484, 6486, 6488, 6489, 6491, 6489, 6493, 6495, 6495, 6495,
  /* 4284 */ 6495, 6497, 6495, 6496, 6499, 6499, 6499, 6499, 5843, 6215, 5989, 6214, 5840, 5843, 6780, 5843, 5843, 6460,
  /* 4302 */ 6135, 6592, 5843, 5843, 5843, 5905, 5843, 6501, 5843, 5843, 5934, 6294, 5979, 6024, 5840, 5843, 5843, 5857,
  /* 4320 */ 6503, 5843, 5843, 5934, 6592, 5843, 5843, 5889, 5891, 5893, 5843, 5973, 5843, 6427, 5890, 5892, 5843, 5843,
  /* 4338 */ 5969, 5843, 5962, 6649, 6582, 6126, 6680, 6020, 5843, 5843, 5975, 6349, 5843, 5843, 5843, 6154, 5843, 6442,
  /* 4356 */ 6522, 5963, 5978, 6461, 6461, 6127, 6019, 5843, 5843, 6021, 5853, 5843, 5843, 5995, 5843, 5843, 5843, 6678,
  /* 4374 */ 5843, 5843, 5843, 6272, 5843, 5843, 5843, 6650, 6003, 5843, 6437, 6481, 6299, 6154, 5843, 5843, 5843, 5989,
  /* 4392 */ 5843, 5843, 5843, 5994, 6780, 5843, 6384, 6583, 5843, 5843, 5975, 6026, 5983, 6407, 6429, 6159, 6781, 5843,
  /* 4410 */ 5843, 6350, 6592, 5843, 5974, 6025, 5974, 6111, 6391, 5843, 5843, 5843, 6363, 5846, 6352, 5897, 6397, 6523,
  /* 4428 */ 5989, 6214, 5840, 5846, 6244, 5983, 6649, 6334, 6621, 6448, 5843, 5843, 6001, 6620, 6781, 5843, 5843, 5843,
  /* 4446 */ 6350, 5843, 5843, 6445, 5843, 5843, 5843, 5975, 5843, 5843, 5843, 5988, 5988, 5898, 5898, 5898, 5898, 5899,
  /* 4464 */ 5981, 5981, 5981, 5843, 6003, 6215, 6482, 6154, 5843, 6678, 5843, 6122, 6649, 6681, 5843, 5843, 5843, 6377,
  /* 4482 */ 5843, 5843, 5843, 6160, 6481, 6214, 5840, 5843, 5975, 5843, 5853, 5843, 5853, 6214, 6578, 6157, 6446, 5843,
  /* 4500 */ 5843, 6237, 5843, 5843, 6210, 6440, 6767, 6154, 5843, 6397, 5843, 5843, 5995, 6133, 6349, 5934, 5843, 5934,
  /* 4518 */ 5843, 6377, 6433, 5843, 5843, 6377, 6479, 5843, 6299, 6613, 6535, 6453, 5843, 6448, 5843, 5843, 6003, 5843,
  /* 4536 */ 5901, 6215, 6780, 6613, 5843, 5843, 6007, 6214, 6443, 6111, 5846, 6403, 6450, 6801, 6539, 6541, 6541, 6550,
  /* 4554 */ 6546, 6545, 6541, 6541, 6548, 6541, 6542, 6542, 6543, 6552, 6555, 6553, 6553, 6557, 6562, 6562, 6559, 6562,
  /* 4572 */ 6562, 6561, 6558, 6562, 6562, 6563, 6565, 6567, 6566, 6569, 6569, 6569, 6569, 6566, 6569, 6569, 5843, 5843,
  /* 4590 */ 6122, 5972, 5843, 5843, 6244, 5927, 6124, 6432, 6448, 5843, 5843, 6678, 6026, 6299, 5843, 6335, 5840, 5843,
  /* 4608 */ 6571, 5843, 5843, 6134, 5843, 6361, 6573, 5843, 5843, 6141, 5843, 6575, 5843, 6518, 6519, 5843, 6577, 5843,
  /* 4626 */ 5843, 6150, 6884, 5843, 6598, 5843, 5843, 6219, 6453, 5843, 5843, 6434, 6133, 5843, 5988, 5988, 5988, 5961,
  /* 4644 */ 5898, 5843, 6438, 5843, 5843, 6220, 5843, 5843, 5843, 6589, 5843, 5843, 5843, 5855, 6263, 5843, 6439, 5843,
  /* 4662 */ 6268, 5894, 6600, 6809, 5843, 5989, 5843, 6384, 5843, 5843, 5877, 5881, 6589, 5843, 6146, 5843, 5843, 5843,
  /* 4680 */ 6383, 6022, 6573, 5843, 6517, 5860, 5843, 5843, 6244, 6389, 5862, 5843, 6612, 5843, 5989, 5843, 6445, 5843,
  /* 4698 */ 5843, 6605, 5843, 6605, 5998, 5897, 6611, 6581, 6296, 6222, 5843, 5843, 6224, 6209, 6615, 6808, 6638, 6448,
  /* 4716 */ 5843, 6350, 5897, 6618, 6125, 5847, 5843, 6111, 5843, 5843, 5843, 6379, 6623, 6467, 6216, 6295, 6297, 5843,
  /* 4734 */ 5843, 5843, 6414, 5843, 6894, 6125, 6451, 5843, 5843, 5843, 6384, 5861, 5843, 5843, 5843, 6420, 5897, 5971,
  /* 4752 */ 6378, 6297, 6627, 6241, 6515, 6448, 6026, 6299, 5843, 5840, 5843, 6306, 5843, 5843, 6377, 6008, 5843, 6378,
  /* 4770 */ 6516, 5843, 5843, 5843, 6428, 5843, 6442, 6629, 6378, 6516, 6349, 5843, 5844, 6445, 5843, 6442, 6635, 6515,
  /* 4788 */ 5843, 5990, 5992, 6374, 6728, 6637, 5843, 5843, 5843, 6433, 5843, 5843, 5843, 6305, 6629, 6516, 5843, 5843,
  /* 4806 */ 6246, 6616, 5843, 5843, 5934, 5881, 6433, 5843, 5974, 5843, 6780, 5843, 5843, 5843, 5846, 5843, 5843, 5843,
  /* 4824 */ 5847, 5843, 5843, 6715, 5847, 5843, 6691, 5843, 5997, 6002, 6610, 6615, 5878, 5843, 5843, 5843, 6442, 6002,
  /* 4842 */ 5902, 5847, 5843, 6116, 5843, 6767, 5843, 5843, 6650, 6350, 5843, 6444, 6640, 5843, 5843, 5843, 6437, 6431,
  /* 4860 */ 6008, 5843, 5843, 6282, 5843, 5843, 6767, 6578, 5843, 6009, 6448, 6014, 6510, 5929, 6642, 6509, 6511, 6644,
  /* 4878 */ 5935, 5935, 5936, 5935, 6596, 6646, 5935, 5935, 5935, 6646, 6653, 6655, 6654, 6656, 6658, 6660, 6660, 6660,
  /* 4896 */ 6666, 6666, 6666, 6666, 6667, 6667, 6662, 6662, 6662, 6661, 6664, 6660, 6660, 6660, 6668, 5843, 5843, 5843,
  /* 4914 */ 6444, 6002, 6246, 6018, 6028, 6670, 6021, 5843, 5843, 6306, 5843, 5843, 5843, 6413, 6394, 5843, 5843, 5843,
  /* 4932 */ 6448, 6595, 5843, 5843, 5843, 6449, 5843, 6672, 5843, 5843, 6325, 6789, 6674, 5847, 6677, 5843, 6011, 5843,
  /* 4950 */ 5843, 6254, 5843, 5843, 6683, 6262, 5843, 6210, 5843, 5897, 5843, 6651, 5853, 5843, 6021, 6027, 5843, 5843,
  /* 4968 */ 5843, 6333, 6122, 6142, 5843, 5843, 6337, 6227, 5846, 6350, 6683, 5843, 6026, 6026, 6026, 5843, 6026, 5843,
  /* 4986 */ 6026, 6589, 5843, 5844, 6455, 5927, 6588, 6382, 6413, 5843, 6695, 5843, 6116, 5881, 5843, 5884, 6506, 5843,
  /* 5004 */ 5895, 6601, 6810, 5844, 6466, 6701, 6697, 6702, 6698, 5843, 5843, 5843, 6468, 5843, 5843, 5843, 6121, 5843,
  /* 5022 */ 6121, 6120, 5843, 5843, 6121, 5843, 6413, 6026, 5843, 5843, 5843, 5883, 6249, 6466, 6630, 6705, 6221, 6425,
  /* 5040 */ 5840, 5843, 6437, 5843, 5843, 5843, 6481, 5843, 6774, 5843, 5843, 6350, 6456, 6649, 5856, 6839, 5853, 5843,
  /* 5058 */ 6122, 5843, 6029, 5843, 5843, 5843, 6219, 6448, 6773, 5843, 6350, 6839, 5844, 6629, 6707, 6508, 6028, 6426,
  /* 5076 */ 5843, 6710, 5852, 5843, 6124, 5843, 5843, 5843, 6537, 5930, 6216, 6508, 6028, 6426, 6481, 6148, 5843, 5843,
  /* 5094 */ 6350, 6459, 6389, 6429, 5975, 6713, 6212, 6148, 5843, 6713, 6372, 5840, 5843, 5843, 6691, 5853, 5843, 6160,
  /* 5112 */ 5854, 5843, 5843, 5854, 5843, 5843, 5843, 6349, 5843, 5843, 6507, 6372, 5840, 5843, 6204, 5843, 6235, 6220,
  /* 5130 */ 5840, 5843, 5843, 6405, 5843, 5843, 6381, 5853, 5843, 6214, 5840, 5843, 6003, 5843, 6025, 5843, 6333, 5843,
  /* 5148 */ 5878, 6826, 5843, 5843, 5843, 6805, 6433, 5843, 6895, 5843, 6215, 6110, 5843, 5843, 6479, 5843, 5843, 5843,
  /* 5166 */ 6585, 6122, 6116, 5843, 5843, 6408, 5843, 6433, 6678, 5843, 6122, 5843, 5843, 6410, 5897, 6433, 6433, 6122,
  /* 5184 */ 5843, 6219, 6212, 6163, 6220, 5843, 6220, 5843, 5843, 6377, 6220, 6433, 6678, 6678, 6679, 6679, 6679, 6679,
  /* 5202 */ 6784, 5843, 5843, 6784, 5859, 6720, 5843, 6017, 6717, 5843, 5843, 6410, 6244, 5843, 6388, 6725, 6589, 6437,
  /* 5220 */ 5843, 5843, 6583, 5843, 5843, 6721, 6733, 6733, 6733, 6738, 6733, 6732, 6736, 6733, 6737, 6740, 6734, 6734,
  /* 5238 */ 6722, 6723, 6722, 6722, 6742, 6744, 6744, 6749, 6748, 6746, 6749, 6745, 6744, 6744, 6744, 6751, 6753, 6753,
  /* 5256 */ 6755, 6757, 6757, 6754, 6757, 6757, 6757, 6757, 6757, 6758, 6760, 6761, 5843, 6715, 6625, 5843, 6350, 6350,
  /* 5274 */ 5843, 6717, 5843, 6225, 5843, 5843, 5848, 5850, 6237, 6012, 5843, 5843, 5843, 6650, 5843, 5856, 6031, 5843,
  /* 5292 */ 5843, 5843, 6691, 5843, 5843, 5843, 6392, 6718, 5840, 5843, 6763, 6030, 5843, 5843, 5843, 6726, 6779, 6032,
  /* 5310 */ 5843, 6811, 6783, 5843, 6786, 5843, 6228, 6516, 5843, 6230, 6232, 6253, 5843, 6730, 6332, 5843, 6233, 5843,
  /* 5328 */ 5843, 6234, 6330, 6332, 5843, 6331, 5996, 5843, 5843, 5843, 6767, 5843, 5843, 5843, 5856, 5843, 5843, 5843,
  /* 5346 */ 5858, 5843, 6422, 5843, 5843, 6440, 6397, 6650, 6796, 5932, 6423, 6371, 6129, 6426, 5843, 5843, 6442, 6890,
  /* 5364 */ 6402, 5843, 6795, 6624, 6524, 6768, 6591, 5843, 6590, 6592, 5843, 6772, 5843, 5843, 5843, 6770, 5843, 6691,
  /* 5382 */ 5840, 5843, 5843, 6218, 6620, 6028, 6426, 5934, 6592, 5934, 6592, 5843, 6800, 6619, 6378, 6448, 5843, 6240,
  /* 5400 */ 5843, 6008, 5843, 6237, 6583, 5843, 5844, 6016, 5902, 5843, 6806, 6624, 6387, 6390, 6002, 5932, 6389, 6581,
  /* 5418 */ 5843, 6800, 5871, 5843, 6240, 5843, 5843, 6410, 6416, 5843, 6813, 5843, 5843, 6444, 6246, 5977, 5843, 6805,
  /* 5436 */ 5880, 6389, 6581, 6218, 6621, 6148, 5843, 5843, 6115, 6213, 5840, 5843, 6246, 6478, 6008, 5843, 5843, 5843,
  /* 5454 */ 6277, 6806, 6588, 6390, 5979, 5930, 6029, 5843, 5856, 6384, 6391, 6580, 6424, 6214, 5843, 6251, 6256, 5843,
  /* 5472 */ 6225, 6205, 5843, 5934, 6391, 5843, 6021, 5843, 6805, 6588, 6581, 6424, 6214, 5843, 6817, 5843, 5843, 5843,
  /* 5490 */ 6788, 6156, 6214, 5843, 5843, 6456, 6649, 6247, 6213, 5843, 5843, 5843, 6791, 5843, 6437, 5843, 5929, 5843,
  /* 5508 */ 5843, 6243, 5843, 5843, 5843, 6800, 5843, 6514, 5843, 5901, 5843, 5843, 5843, 6595, 5854, 6412, 6214, 5843,
  /* 5526 */ 5843, 5856, 5843, 6445, 5843, 6257, 6207, 5843, 5843, 6690, 5843, 6689, 5843, 6350, 5843, 5854, 5856, 5843,
  /* 5544 */ 5843, 6475, 5843, 5855, 5843, 5843, 5843, 6821, 5854, 6412, 5843, 6445, 6413, 6445, 5843, 5843, 5854, 6412,
  /* 5562 */ 5843, 6350, 5843, 6437, 6583, 5843, 6299, 5840, 5843, 6137, 5843, 5843, 5844, 6399, 5843, 6441, 5843, 6592,
  /* 5580 */ 6607, 6333, 5843, 5843, 6504, 5843, 6384, 6333, 5843, 6384, 6226, 5843, 6430, 6239, 5843, 6828, 6829, 6834,
  /* 5598 */ 5975, 6833, 5931, 5843, 6161, 6798, 6836, 6463, 6464, 6842, 6463, 6837, 6842, 6841, 6837, 6843, 6842, 6842,
  /* 5616 */ 6845, 6847, 6847, 6849, 6851, 6849, 6853, 6853, 6853, 6861, 6853, 6853, 6856, 6859, 6856, 6855, 6857, 6854,
  /* 5634 */ 6863, 6865, 6864, 6864, 6865, 6863, 6866, 6867, 6868, 6867, 6867, 6872, 6867, 6873, 6875, 6869, 6877, 6870,
  /* 5652 */ 5843, 6299, 5843, 5843, 5859, 6437, 6879, 5843, 5843, 6143, 5851, 5843, 5843, 5843, 6880, 6413, 5994, 5843,
  /* 5670 */ 5843, 6513, 5843, 6389, 6650, 5843, 5901, 5843, 5843, 5929, 5970, 6029, 5843, 5856, 5843, 5854, 6138, 5843,
  /* 5688 */ 5843, 5928, 6215, 5844, 6887, 6401, 6708, 6402, 6413, 5843, 5843, 6514, 6670, 5843, 6882, 5843, 5843, 6528,
  /* 5706 */ 5897, 6397, 6429, 6621, 6448, 5928, 6391, 5843, 5843, 6528, 6002, 5983, 6407, 5843, 6442, 6893, 5930, 6216,
  /* 5724 */ 6413, 5843, 5843, 6529, 5843, 5843, 5843, 6210, 5843, 5843, 5843, 5928, 5843, 5843, 5843, 5929, 6625, 6210,
  /* 5742 */ 5843, 6210, 5843, 6302, 5843, 5843, 5843, 6578, 5843, 6578, 6459, 6389, 6650, 5901, 5843, 5888, 5843, 5843,
  /* 5760 */ 6526, 5843, 5847, 5843, 5881, 5843, 6327, 5842, 5843, 5844, 6623, 6627, 6216, 6295, 6013, 5934, 6237, 5843,
  /* 5778 */ 6025, 5843, 5843, 5843, 6116, 5843, 5843, 5843, 6117, 5902, 5932, 6708, 5843, 6349, 5843, 5928, 5928, 5928,
  /* 5796 */ 6650, 5843, 6650, 5843, 6210, 5843, 6350, 5902, 5932, 6413, 5843, 5843, 5930, 6287, 5843, 5843, 6579, 5843,
  /* 5814 */ 6016, 5902, 6413, 5843, 5843, 5843, 6589, 6437, 5929, 5843, 6442, 6436, 5888, 5843, 5844, 6016, 6437, 5843,
  /* 5832 */ 5843, 5843, 6589, 5843, 5844, 5855, 6263, 1048576, 1073741824, 0, -872415232, 0, 0, 1, 0, 2, 0, 3, 240,
  /* 5851 */ 19456, 262144, 8192, 0, 4, 8, 0, 5, 16, 0, 6, 0, 7, 1075838976, 2097152, 0x80000000, 4194560, 4196352,
  /* 5869 */ -2143289344, -2143289344, 4194304, 0x80000000, 4198144, 4196352, 276901888, 8540160, 4194304, 1, 4, 16,
  /* 5881 */ 1024, 0, 40, 0, 41, 8425488, 4194304, 128, 0, 59, 140224, 5505024, -1887436800, 0, 63, 64, 32, 64, 64, 96,
  /* 5901 */ 0, 64, 128, 128, 512, 0, 110, 110, 742391808, 239075328, 171966464, -1371537408, 775946240, -1405091840,
  /* 5915 */ 742391808, 742391808, -1405091840, 775946240, 171966464, 171966464, 775946240, 775946240, 239075328,
  /* 5924 */ 775946240, -1371537408, 4718592, 64, 256, 0, 128, 1024, 1024, 2048, 0, 256, 256, 257, 4718592, 2097216,
  /* 5940 */ 4720640, 541589504, 4194368, 541589504, 4194400, 4194368, -2143289280, 541065280, 4194368, -2143285440,
  /* 5950 */ -2143285408, -2143285408, -2109730976, -2143285408, 776470528, 775946336, 775946304, -1908404384,
  /* 5958 */ 775946304, 776470528, 64, 524288, 64, 896, 8192, 229376, 4194304, 4194432, 96, 262144, 131072, 1024, 65536,
  /* 5973 */ 131072, 32768, 0, 1024, 98304, 131072, 262144, 524288, 96, 96, 64, 384, 512, 5120, 96, 524288, 524288, 0,
  /* 5991 */ 999, 259072, 4194304, 4194304, 0, 12, 0, 15, 16, 28, 0, 16, 32, 0, 24, 560, 2048, 268435456, 0, 1792, 0,
  /* 6012 */ 268435456, 49152, 0, 2304, 2, 16, 8192, 33554432, -1946157056, 0, 4096, 262144, 2097152, 67108864, 0, 8192,
  /* 6028 */ 67108864, 134217728, 0, 12289, 0, 12305, 2, 536936448, 80, 528, 528, 2097168, 2097168, 268435472, 524304,
  /* 6043 */ 1048592, 2097168, 16, 262160, 16, 536936448, 48, 2097680, 1048592, 3145744, 1048592, 20, 560, 48, 3146256,
  /* 6058 */ 2097552, 3146256, 2, 2098064, 163577856, 17, 21, 16, 3277360, -161430188, -161429680, -161429676,
  /* 6070 */ -161430188, -161430188, -161429676, -161429676, -160905388, -160249996, -160249996, -161429675, -160300496,
  /* 6079 */ -160300496, -160299152, -160299152, -160299088, -160249996, -160250000, -160299084, -160250000, -160249996,
  /* 6088 */ -159725712, -160249996, -159725708, -159725708, -17680587, 53, 146804757, 146812949, 146862101, 146863421,
  /* 6098 */ 148960541, 146863421, 146863389, 146863389, -161429676, 148960541, 148960541, -161429740, -161429676,
  /* 6107 */ -18860267, -160249996, 32768, 100663296, 0, 16384, 98304, 393216, 524288, 33554432, 0, 17408, 1572864, 0,
  /* 6121 */ 24576, 0, 32768, 32768, 65536, 4194304, 8388608, 16777216, 100663296, 134217728, 268435456, 4194432,
  /* 6133 */ 3145728, 0, 9, 4456448, 243269632, 0, 57344, 1, 32768, 196608, 0, 58624, 131328, 131072, 268435456,
  /* 6148 */ 536870912, 1073741824, 8, 124160, 0, 1073741825, 0, 1073741824, 262144, 134217728, 1073741824, 8388608,
  /* 6160 */ 33554432, 1024, 524288, 268435456, 1073741824, 1073741824, 16777216, 1226014816, 100665360, 100665360,
  /* 6170 */ -2046818288, 1091799136, 1091799136, 1091803360, -2044196848, 1091799136, 1158908000, 1158908001,
  /* 6178 */ 1192462432, 1200851056, 1200851056, 1091799393, 1192462448, 1192462448, 1200851056, 1192462448, 1870638912,
  /* 6187 */ 1870655296, 1870638912, 1870638912, 1870655296, 1870655296, 1870655312, 1870655312, 1879027568, 1870655316,
  /* 6196 */ 1870655316, 1870638928, 1870655316, 1870655317, 1870655348, 1870655316, 1879043952, 1879043956, 131328, 0,
  /* 6206 */ 82432, 1048576, 1224736768, 1090519040, 0, 131072, 16777216, 134217728, 536870912, 0, 2048, 16384, 65536,
  /* 6219 */ 524288, 2097152, 16777216, 67108864, 0x80000000, 235712, 0, 139264, 1275068416, 0, 148480, 0, 1157627904,
  /* 6232 */ 1191182336, 0, 150528, 0, 164096, 0, 65536, 1048576, 512, 65536, 2097152, 134217728, 8, 32, 256, 1024,
  /* 6248 */ 262144, 2621440, -1073741824, 0, 12545, 231744, 0, 229376, 25165824, 0, 229440, 520000, 7864320,
  /* 6261 */ 1862270976, 0, 262144, 536870912, 1862270976, 1862270976, 16252928, 0, 284672, 98304, 1048576, 2097152,
  /* 6273 */ 268435456, 150994944, 0, 503616, 128, 6144, 4194304, 251658240, 536870912, 2048, 100663296, 402653184,
  /* 6285 */ 536870912, 1536, 2048, 262144, 1275208192, 4194304, 117440512, 1536, 8192, 1536, 65536, 7340032, 50331648,
  /* 6298 */ 0x80000000, 0, 536870912, 9216, 33554432, 8192, 50331649, 9476, 512, 131072, 134218240, 1050624, 541065224,
  /* 6311 */ 4194312, 4194312, 4194344, -869654016, -869654016, 4203820, -869654016, 1279402504, 1279402504, 2143549415,
  /* 6321 */ 2143549415, 2143549423, 2143549423, 9216, 0, 867391, 512, 2760704, 4203520, 0, 867647, 1066401792, 0,
  /* 6334 */ 1048576, 8388608, 134217728, 520, 4333568, 0, 1275068416, 999, 29619200, 2113929216, 0, 1049088, 1049088,
  /* 6347 */ 270532608, 2097152, 2097152, 0, 8, 8, 16, 16, 17, 20, 16, 20, 48, 16, 21, 266240, 1007, 1007, 0, 1050624,
  /* 6367 */ 1, 16777216, 268435456, 2048, 1048576, 16777216, 536870912, 25165824, 100663296, 44, 0, 2097152, 4194304,
  /* 6380 */ 1024, 8192, 8192, 16384, 0, 512, 2048, 2048, 4096, 4096, 8192, 65536, 0, 520, 0, 576, 102, 384, 8192, 6,
  /* 6400 */ 96, 128, 3072, 16384, 16384, 32768, 256, 512, 8192, 8392704, 1, 6, 8, 262144, 0, -2046820352, 96, 384, 104,
  /* 6419 */ 104, 0, 2621440, 0, 77824, 524288, 134217728, 805306368, 1073741824, 32768, 131072, 1048576, 4096, 4194304,
  /* 6433 */ 16777216, 0, 28, 16, 64, 0, 29, 0, 32, 1, 2, 2, 4, 0, 0x80000000, 0x80000000, 0, -2113929216, 16777216,
  /* 6452 */ 0x80000000, 1073741824, 0x80000000, 6, 32, 384, 4, 32, 512, 1048576, 4194304, 25165824, 25165824, 26214400,
  /* 6466 */ 4, 64, 1024, 2097152, 1073741824, 25165824, 268435456, 4, 256, 1536, 1792, 256, 65536, 16777216,
  /* 6480 */ 1073741824, 2048, 524288, 536870912, 12845065, 12845065, 147193865, 5505537, 147202057, 5587457, 5587457,
  /* 6491 */ 5591557, 5587465, 5591557, 5587457, 13894153, 13894153, 81003049, 13894153, -1881791493, -1881791493, 1,
  /* 6502 */ 5505024, 86528, 9, 8388608, 75497472, 0, 3145728, 16777216, 1073743872, 268435968, 229376, 81920, 0,
  /* 6515 */ 4194304, 50331648, 0, 5242880, -2080374784, 268288, 2, 56, 64, 2048, 339968, 8, 8388608, 2, 8, 4194304,
  /* 6531 */ 37748736, 541065216, 541065216, -2143289344, 4194304, 134217728, 2048, 134217728, 268567040, 2113544,
  /* 6541 */ 68423701, 68423701, -2079059883, 68425749, 68423701, 68489237, 72618005, 68423701, 85200917, 68423701,
  /* 6551 */ 68423765, 68423703, 69488664, 69488664, 85200919, 69488664, 70537244, 70537245, -2076946339, -2076946339,
  /* 6561 */ 70537309, 70537245, 70537245, 70539293, -2022351745, -2022351617, -2022351745, -2022351745, -2022351617,
  /* 6570 */ -2022351617, 131584, 268435456, 1048576, 67108864, 331776, 83886080, 23, 0, 8388608, 4096, 65536, 262144,
  /* 6583 */ 1048576, 0, 260, 512, 512, 1024, 4096, 0, 288, 8388608, 0, 300, 0, 384, -1879046336, 24, 282624, 192,
  /* 6601 */ 351232, 7340032, 12, 3145728, 13, 0, 9437184, 0, 231488, 192, 3072, 20480, 0, 8396800, 20480, 65536,
  /* 6617 */ 268435456, 256, 32768, 1048576, 33554432, 134217728, 14, 32, 1024, 134217728, 192, 1024, 4, 128, 3584,
  /* 6632 */ 8192, 128, 2097152, 4, 2097152, 4, 50331648, 67108864, 128, 50331648, 268435968, 268435968, 128, 268436032,
  /* 6646 */ 536871168, 256, 2048, 8192, 131072, 0, 832, 1073744256, -1879046334, -1879046334, -1879046326, -1879046326,
  /* 6658 */ -1845491902, -1878784182, 268444480, 268444480, 268436288, 268436288, 268436289, 268436288, 2100318149,
  /* 6667 */ 2100318149, 2100326341, 2100326341, 1, 1024, 1856, 0x80000000, 2432, 0, 16252928, 1864, 0, 16777216,
  /* 6680 */ 16777216, 33554432, 0x80000000, 0, 301989888, 1, 4036, 19939328, 2080374784, 0, 19947520, 0, 33554432,
  /* 6693 */ 67108864, 1073741824, 768, 8192, 16384, 19922944, 2080374784, 1, 128, 3840, 16384, 229376, 16384, 3145728,
  /* 6707 */ 3584, 16384, 262144, 8, 33554432, 402653184, 2048, 3145728, 128, 131072, 66048, 0, 50331648, 268500992,
  /* 6721 */ 4243456, 12289, 12289, 1073754113, 1048588, 0, 67108864, 402653184, 1610612736, 0, 605503, 1124073488,
  /* 6733 */ 1124073472, 1124073472, 12289, 1124073472, 1258292224, 1124073472, 1124073474, 1124073472, 1392574464,
  /* 6742 */ 1098920193, 1098920193, 1132474625, 1132474625, 1098920209, 1258304513, 1124085777, 1124085761, 1124085761,
  /* 6751 */ 1132474625, 1400975617, 2132360255, 2132622399, 2132360255, 2132360255, 2132622399, 2132622399, 2140749119,
  /* 6760 */ 2132622399, 2141011263, 2141011263, 184549376, 0, 83886080, 117440512, 0, 524288, 1048576, 128, 2048,
  /* 6772 */ 12288, 0, 1536, 0x80000000, 318767104, 0, 100663296, 58720256, 0, 134217728, 0x80000000, 13313, 0,
  /* 6785 */ 134218752, 78081, 327155712, 605247, 1058013184, 1073741824, 1, 12288, 256, 8388608, 1, 30, 32, 4100,
  /* 6799 */ 100680704, 2, 16384, 524288, 327680, 524288, 1, 14, 16, 262144, 7340032, -2030043136, 0, 12561, 33554432,
  /* 6814 */ 1073741824, 14, 1024, 16384, 4194304, 67108864, 536870912, 1, 12, 1024, 8, 134217728, 8, 536870912,
  /* 6828 */ 68157440, 137363456, 0, 134348800, 134348800, 137363456, 66, 66, 25165824, 92274688, 25165824, 33554432,
  /* 6840 */ 262144, 25165952, 92274688, 92274688, 93323264, 92274720, 93323264, 25165890, 100721664, 100721928,
  /* 6850 */ 100721928, 100787464, 100853000, 125977600, 125977600, 127026176, 125846528, 125846528, 125846560,
  /* 6859 */ 125846528, 126895104, 127026176, 127026176, 281843, 281843, 1330419, 281843, 5524723, 5524723, 93605107,
  /* 6870 */ 127290611, 131484915, 39079155, 72633587, 72633587, 92556531, 93605107, 97799411, 127290611, 58368, 0,
  /* 6881 */ 142606336, 0, 49152, 189696, 0, 159383552, 2, 112, 21, 112, 128, 4096, 48, 64, 32768, 33554432, 268435456
];

XQueryParser.TOKEN =
[
  "(0)",
  "PragmaContents",
  "DirCommentContents",
  "DirPIContents",
  "CDataSection",
  "Wildcard",
  "EQName",
  "URILiteral",
  "IntegerLiteral",
  "DecimalLiteral",
  "DoubleLiteral",
  "StringLiteral",
  "PredefinedEntityRef",
  "'\"\"'",
  "EscapeApos",
  "ElementContentChar",
  "QuotAttrContentChar",
  "AposAttrContentChar",
  "PITarget",
  "NCName",
  "QName",
  "S",
  "S",
  "CharRef",
  "CommentContents",
  "EOF",
  "'!'",
  "'!='",
  "'\"'",
  "'#'",
  "'#)'",
  "'$'",
  "'%'",
  "''''",
  "'('",
  "'(#'",
  "'(:'",
  "')'",
  "'*'",
  "'*'",
  "'+'",
  "','",
  "'-'",
  "'-->'",
  "'.'",
  "'..'",
  "'/'",
  "'//'",
  "'/>'",
  "':'",
  "':)'",
  "'::'",
  "':='",
  "';'",
  "'<'",
  "'<!--'",
  "'</'",
  "'<<'",
  "'<='",
  "'<?'",
  "'='",
  "'>'",
  "'>='",
  "'>>'",
  "'?'",
  "'?>'",
  "'@'",
  "'NaN'",
  "'['",
  "']'",
  "'after'",
  "'all'",
  "'allowing'",
  "'ancestor'",
  "'ancestor-or-self'",
  "'and'",
  "'any'",
  "'append'",
  "'array'",
  "'as'",
  "'ascending'",
  "'at'",
  "'attribute'",
  "'base-uri'",
  "'before'",
  "'boundary-space'",
  "'break'",
  "'by'",
  "'case'",
  "'cast'",
  "'castable'",
  "'catch'",
  "'check'",
  "'child'",
  "'collation'",
  "'collection'",
  "'comment'",
  "'constraint'",
  "'construction'",
  "'contains'",
  "'content'",
  "'context'",
  "'continue'",
  "'copy'",
  "'copy-namespaces'",
  "'count'",
  "'decimal-format'",
  "'decimal-separator'",
  "'declare'",
  "'default'",
  "'delete'",
  "'descendant'",
  "'descendant-or-self'",
  "'descending'",
  "'diacritics'",
  "'different'",
  "'digit'",
  "'distance'",
  "'div'",
  "'document'",
  "'document-node'",
  "'element'",
  "'else'",
  "'empty'",
  "'empty-sequence'",
  "'encoding'",
  "'end'",
  "'entire'",
  "'eq'",
  "'every'",
  "'exactly'",
  "'except'",
  "'exit'",
  "'external'",
  "'first'",
  "'following'",
  "'following-sibling'",
  "'for'",
  "'foreach'",
  "'foreign'",
  "'from'",
  "'ft-option'",
  "'ftand'",
  "'ftnot'",
  "'ftor'",
  "'function'",
  "'ge'",
  "'greatest'",
  "'group'",
  "'grouping-separator'",
  "'gt'",
  "'idiv'",
  "'if'",
  "'import'",
  "'in'",
  "'index'",
  "'infinity'",
  "'inherit'",
  "'insensitive'",
  "'insert'",
  "'instance'",
  "'integrity'",
  "'intersect'",
  "'into'",
  "'is'",
  "'item'",
  "'json'",
  "'json-item'",
  "'key'",
  "'language'",
  "'last'",
  "'lax'",
  "'le'",
  "'least'",
  "'let'",
  "'levels'",
  "'loop'",
  "'lowercase'",
  "'lt'",
  "'minus-sign'",
  "'mod'",
  "'modify'",
  "'module'",
  "'most'",
  "'namespace'",
  "'namespace-node'",
  "'ne'",
  "'next'",
  "'no'",
  "'no-inherit'",
  "'no-preserve'",
  "'node'",
  "'nodes'",
  "'not'",
  "'object'",
  "'occurs'",
  "'of'",
  "'on'",
  "'only'",
  "'option'",
  "'or'",
  "'order'",
  "'ordered'",
  "'ordering'",
  "'paragraph'",
  "'paragraphs'",
  "'parent'",
  "'pattern-separator'",
  "'per-mille'",
  "'percent'",
  "'phrase'",
  "'position'",
  "'preceding'",
  "'preceding-sibling'",
  "'preserve'",
  "'previous'",
  "'processing-instruction'",
  "'relationship'",
  "'rename'",
  "'replace'",
  "'return'",
  "'returning'",
  "'revalidation'",
  "'same'",
  "'satisfies'",
  "'schema'",
  "'schema-attribute'",
  "'schema-element'",
  "'score'",
  "'self'",
  "'sensitive'",
  "'sentence'",
  "'sentences'",
  "'skip'",
  "'sliding'",
  "'some'",
  "'stable'",
  "'start'",
  "'stemming'",
  "'stop'",
  "'strict'",
  "'strip'",
  "'structured-item'",
  "'switch'",
  "'text'",
  "'then'",
  "'thesaurus'",
  "'times'",
  "'to'",
  "'treat'",
  "'try'",
  "'tumbling'",
  "'type'",
  "'typeswitch'",
  "'union'",
  "'unique'",
  "'unordered'",
  "'updating'",
  "'uppercase'",
  "'using'",
  "'validate'",
  "'value'",
  "'variable'",
  "'version'",
  "'weight'",
  "'when'",
  "'where'",
  "'while'",
  "'wildcards'",
  "'window'",
  "'with'",
  "'without'",
  "'word'",
  "'words'",
  "'xquery'",
  "'zero-digit'",
  "'{'",
  "'{{'",
  "'{|'",
  "'|'",
  "'||'",
  "'|}'",
  "'}'",
  "'}}'"
];

                                                            // line 1269 "XQueryParser.ebnf"
                                                            });
                                                            // line 34193 "XQueryParser.js"
// End
