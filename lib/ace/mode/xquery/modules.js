define(function(require, exports, module) {
"use strict";

    
exports.Modules = {
  "http://expath.org/ns/error" : {
    "description" : " This module defines all errors for the http-client module.\n", 
    "functions" : {

    }
  }, 
  "http://expath.org/ns/file" : {
    "description" : " This module implements the file API EXPath specification available at http://expath.org/spec/file\n", 
    "functions" : {
      "append-binary" : [ {
        "description" : " Appends a sequence of Base64 items as binary to a file. If the file pointed\n by $file does not exist, a new file will be created.\n", 
        "params" : [ "$file", "$content" ]
      } ], 
      "append-text" : [ {
        "description" : " Appends a sequence of string items to a file.\n", 
        "params" : [ "$file", "$content", "$encoding" ]
      }, {
        "description" : " Appends a sequence of string items to a file.\n", 
        "params" : [ "$file", "$content" ]
      } ], 
      "append-text-lines" : [ {
        "description" : " Appends a sequence of string items to a file, each followed by a\n platform-dependent newline character(s).\n", 
        "params" : [ "$file", "$content", "$encoding" ]
      }, {
        "description" : " Appends a sequence of string to a file, each followed by a\n platform-dependent newline character(s), using the UTF-8 character encoding.\n", 
        "params" : [ "$file", "$content" ]
      } ], 
      "base-name" : [ {
        "description" : " Returns the last component from the $path, deleting any\n trailing directory-separator characters. If $path consists\n entirely directory-separator characters, the empty string is returned. If\n $path is the empty string, the string \".\" is returned,\n signifying the current directory.\n No path existence check is made.\n", 
        "params" : [ "$path" ]
      }, {
        "description" : " Returns the last component from the $path, deleting any\n trailing directory-separator characters and the $suffix. If path\n consists entirely directory-separator characters, the empty string is\n returned. If path is the empty string, the string \".\" is\n returned, signifying the current directory.\n No path existence check is made.\n The $suffix can be used for example to eliminate file extensions.\n", 
        "params" : [ "$path", "$suffix" ]
      } ], 
      "copy" : [ {
        "description" : " Copies a file or a directory given a source and a destination path/URI.\n", 
        "params" : [ "$source", "$destination" ]
      } ], 
      "create-directory" : [ {
        "description" : " Creates a directory.\n The operation is will create all the missing parent directories from the\n given path.\n", 
        "params" : [ "$dir" ]
      } ], 
      "delete" : [ {
        "description" : " Deletes a file or a directory from the file system.\n If $path points to a directory the directory will be deleted\n recursively.\n", 
        "params" : [ "$path" ]
      } ], 
      "directory-separator" : [ {
        "description" : " This function returns the value of the operating system specific directory\n separator. For example, / on Unix-based systems and \\\n on Windows systems.\n", 
        "params" : [  ]
      } ], 
      "dir-name" : [ {
        "description" : " This function is the converse of file:base-name. It returns a\n string denoting the parent directory of the $path. Any trailing\n directory-separator characters are not counted as part of the directory\n name. If path is the empty string or contains no directory-separator string,\n \".\" is returned, signifying the current directory.\n No path existence check is made.\n", 
        "params" : [ "$path" ]
      } ], 
      "exists" : [ {
        "description" : " Tests if a path/URI is already used in the file system.\n", 
        "params" : [ "$path", "$follow-symlinks" ]
      }, {
        "description" : " Tests if a path/URI is already used in the file system.\n", 
        "params" : [ "$path" ]
      } ], 
      "glob-to-regex" : [ {
        "description" : " A helper function that performs a trivial (not complete) glob to regex\n pattern translation.\n", 
        "params" : [ "$pattern" ]
      } ], 
      "is-directory" : [ {
        "description" : " Tests if a path/URI points to a directory. On Unix-based systems, the root\n and the volume roots are considered directories.\n", 
        "params" : [ "$path" ]
      } ], 
      "is-file" : [ {
        "description" : " Tests if a path/URI points to a file.\n", 
        "params" : [ "$path" ]
      } ], 
      "is-symlink" : [ {
        "description" : " Tests if a path/URI points to symbolic link.  This works on all Unix-based\n systems as well as Windows Vista or later.\n", 
        "params" : [ "$path" ]
      } ], 
      "last-modified" : [ {
        "description" : " Retrieves the timestamp of the last modification of the file system item\n pointed by the path/URI.\n", 
        "params" : [ "$path" ]
      } ], 
      "list" : [ {
        "description" : " Lists the file system items in a certain directory.\n The operation is equivalent to calling:\n file:list($dir, fn:false()).\n", 
        "params" : [ "$dir" ]
      }, {
        "description" : " Lists the file system items in a certain directory. The order of the items\n in the resulting sequence is not defined. The \".\" and \"..\" items are not\n returned. The returned paths are relative to the provided $path.\n If $recursive evaluates to fn:true(), the operation\n will recurse in the subdirectories.\n", 
        "params" : [ "$path", "$recursive" ]
      }, {
        "description" : " Lists all files matching the given pattern in a given directory.\n The order of the items in the result is not defined.\n The \".\" and \"..\" items are not considered for the match.\n The file paths are relative to the provided $path.\n The pattern is a glob expression supporting:\n \n   * for matching any number of unknown characters\n   ? for matching one unknown character\n \n", 
        "params" : [ "$path", "$recursive", "$pattern" ]
      } ], 
      "move" : [ {
        "description" : " Moves a file or directory given a source and a destination paths/URIs.\n", 
        "params" : [ "$source", "$destination" ]
      } ], 
      "path-separator" : [ {
        "description" : " This function returns the value of the operating system specific path\n separator. For example, : on Unix-based systems and ;\n on Windows systems.\n", 
        "params" : [  ]
      } ], 
      "path-to-native" : [ {
        "description" : " Transforms a URI, an absolute path, or relative path to a native path on the\n running platform.\n No path existence check is made.\n", 
        "params" : [ "$path" ]
      } ], 
      "path-to-uri" : [ {
        "description" : " Transforms a file system path into a URI with the file:// scheme. If the\n path is relative, it is first resolved against the current working\n directory.\n No path existence check is made.\n", 
        "params" : [ "$path" ]
      } ], 
      "read-binary" : [ {
        "description" : " Reads the content of a file and returns a Base64 representation of the\n content.\n", 
        "params" : [ "$file" ]
      } ], 
      "read-text" : [ {
        "description" : " Reads the content of a file using the specified encoding and returns a\n string representation of the content.\n", 
        "params" : [ "$file", "$encoding" ]
      }, {
        "description" : " Reads the content of a file and returns a string representation of the\n content.\n The operation is equivalent to calling:\n file:read-text($file, \"UTF-8\").\n", 
        "params" : [ "$file" ]
      } ], 
      "read-text-lines" : [ {
        "description" : " Reads the content of a file and returns a sequence of strings representing\n the lines in the content of the file.\n The operation is equivalent to calling:\n file:read-text-lines($file, \"UTF-8\").\n", 
        "params" : [ "$file" ]
      }, {
        "description" : " Reads the content of a file using the specified encoding and returns a\n sequence of strings representing the lines in the content of the file.\n This implementation considers the LF (\n) character as the line\n separator. If a resulting line ends with the CR (&#xD;) character, this is\n trimmed as well. This implementation will uniformly treat LF and CRLF as\n line separators.\n", 
        "params" : [ "$file", "$encoding" ]
      } ], 
      "resolve-path" : [ {
        "description" : " Transforms a relative path/URI into an absolute operating system path by\n resolving it against the current working directory.\n No path existence check is made.\n", 
        "params" : [ "$path" ]
      } ], 
      "size" : [ {
        "description" : " Retrieves the size of a file.\n", 
        "params" : [ "$file" ]
      } ], 
      "write-binary" : [ {
        "description" : " Writes a sequence of Base64 items as binary to a file.\n", 
        "params" : [ "$file", "$content" ]
      } ], 
      "write-text" : [ {
        "description" : " Writes a sequence of strings to a file.\n", 
        "params" : [ "$file", "$content", "$encoding" ]
      }, {
        "description" : " Writes a sequence of strings to a file using the UTF-8 character encoding.\n", 
        "params" : [ "$file", "$content" ]
      } ], 
      "write-text-lines" : [ {
        "description" : " Writes a sequence of strings to a file, each followed by a\n platform-dependent newline character(s).\n", 
        "params" : [ "$file", "$content", "$encoding" ]
      }, {
        "description" : " Writes a sequence of strings to a file, each followed by a\n platform-dependent newline character(s), using the UTF-8 character encoding.\n", 
        "params" : [ "$file", "$content" ]
      } ], 
      "copy-file-impl" : [ {
        "description" : " Copies a file given a source and a destination path/URI.\n", 
        "params" : [ "$sourceFile", "$destination" ]
      } ], 
      "copy-directory-impl" : [ {
        "description" : " Copies a source directory recursively to a destination path/URI.\n", 
        "params" : [ "$sourceDir", "$destination" ]
      } ], 
      "copy-directory" : [ {
        "description" : " This is an internal function that copies an entire source directory to an\n destination directory. The caller to this function must make sure that both\n the source and destination point to existing directories.\n", 
        "params" : [ "$sourceDir", "$destinationDir" ]
      } ], 
      "copy-directory-content" : [ {
        "description" : " Copies the content of a given directory to an existing destination\n directory.\n", 
        "params" : [ "$sourceDir", "$destination" ]
      } ], 
      "delete-file-impl" : [ {
        "description" : " Deletes a file from the file system.\n", 
        "params" : [ "$file" ]
      } ], 
      "delete-directory-impl" : [ {
        "description" : " Deletes a directory from the file system.\n", 
        "params" : [ "$dir" ]
      } ]
    }
  }, 
  "http://expath.org/ns/geo" : {
    "description" : " Function library providing geo processing using Simple Features api API GMLSF format.\n It uses the GEOS third party library, license LGPL. Version 3.2.2 or above is required.\n \n The data format supported is GML SF profile 0/1.\n This is a subset of GML, and covers the basic geometries of Point, Line and Surface and collections of those.\n GMLSF nodes have the namespace \"http://www.opengis.net/gml\".\n \n Possible GMLSF geometric structures are:\n \n  Point\n  &lt;gml:Point [srsDimension='2|3']?&gt;\n    &lt;gml:pos [srsDimension='2|3']?&gt;double_x double_y &lt;/gml:pos&gt;\n  &lt;/gml:Point&gt;\n  LineString\n  &lt;gml:LineString [srsDimension='2|3']?&gt;\n    &lt;gml:posList [srsDimension='2|3']?&gt; double_x1 double_y1 double_x2 double_y2 ... &lt;/gml:posList&gt;\n  &lt;/gml:LineString&gt;\n  Curve\n  &lt;gml:Curve [srsDimension='2|3']?&gt;\n    &lt;gml:segments&gt;\n    [&lt;gml:LineStringSegment interpolation=\"linear\" [srsDimension='2|3']?&gt;\n       &lt;gml:posList [srsDimension='2|3']?&gt; double_x1 double_y1 double_x2 double_y2 ... &lt;/gml:posList&gt;;\n     &lt;gml:LineStringSegment&gt;]*\n    &lt;/gml:segments&gt;\n  &lt;/gml:Curve&gt;\n  LinearRing\n  &lt;gml:LinearRing [srsDimension='2|3']?&gt;\n    &lt;gml:posList [srsDimension='2|3']?&gt; double_x1 double_y1 double_x2 double_y2 ... &lt;/gml:posList&gt;\n  &lt;/gml:LinearRing&gt;\n  Surface\n  &lt;gml:Surface [srsDimension='2|3']?&gt;\n    &lt;gml:patches&gt;\n    [&lt;gml:PolygonPatch [srsDimension='2|3']?&gt;\n       &lt;gml:exterior&gt;\n         &lt;gml:LinearRing&gt; ... &lt;/gml:LinearRing&gt;\n       &lt;/gml:exterior&gt;\n       &lt;gml:interior&gt;\n         &lt;gml:LinearRing&gt; ... &lt;/gml:LinearRing&gt;\n       &lt;/gml:interior&gt;]*\n     &lt;/gml:PolygonPatch&gt;]*\n    &lt;/gml:patches&gt;\n  &lt;/gml:Surface&gt;\n  Polygon\n  &lt;gml:Polygon [srsDimension='2|3']?&gt;\n    &lt;gml:exterior&gt;\n      &lt;gml:LinearRing&gt; ... &lt;/gml:LinearRing&gt;\n    &lt;/gml:exterior&gt;\n    [&lt;gml:interior&gt;\n       &lt;gml:LinearRing&gt; ... &lt;/gml:LinearRing&gt;\n     &lt;/gml:interior&gt;]*\n  &lt;/gml:Polygon&gt;\n  MultiPoint\n  &lt;gml:MultiPoint [srsDimension='2|3']?&gt;\n    [&lt;gml:Point&gt; ... &lt;/gml:Point&gt;]*\n  &lt;/gml:MultiPoint&gt;\n  MultiCurve\n  &lt;gml:MultiCurve [srsDimension='2|3']?&gt;\n    [&lt;gml:LineString&gt; ... &lt;/gml:LineString&gt;]*\n  &lt;/gml:MultiCurve&gt;\n  MultiSurface\n  &lt;gml:MultiSurface [srsDimension='2|3']?&gt;\n    [&lt;gml:Polygon&gt; ... &lt;/gml:Polygon&gt;]*\n  &lt;/gml:MultiSurface&gt;\n  \n  MultiGeometry (this is from GML 3 schema)\n  &lt;gml:MultiGeometry [srsDimension='2|3']?&gt;\n     [&lt;gml:geometryMember&gt;\n          ...one geometry...\n     &lt;/gml:geometryMember&gt;]*\n    [&lt;gml:geometryMembers&gt;\n      ...a list of geometries...\n    &lt;/gml:geometryMembers&gt;]?\n  &lt;/gml:MultiGeometry&gt;\n \n Note: When using gml:posList, it is possible to replace this element with a list of gml:pos.\n Note: XLink referencing is not supported.\n Note: The srsDimension optional attribute specifies the coordinate dimension. The default value is 2 (for 2D).\n    Another possible value is 3 (for 3D) in which case every point has to have three double values (x, y, z).\n    This is an extension borrowed from GML 3 spec.\n The operations made on 3D objects work only on x-y coordinates, the z coordinate is not taken into account.\n When returning the result, the original z-coordinates of the points are preserved.\n For computed points, the z-coordinate is interpolated.\n \n The coordinates values have to be in cartesian coordinates, not in polar coordinates.\n Converting between coordinate systems and doing projections from polar to cartesian is outside the scope of this geo module.\n \n For operations between two geometries, the DE-9IM matrix is used. The DE-9IM matrix is defined like this:\n \n\t\n\t\t \n\t\t Interior\n\t\t Boundary\n\t\t Exterior\n\t\t\n\t\t\n\t\t Interior\n\t\t dim(intersection of interior1 and interior2)\n\t\t dim(intersection of interior1 and boundary2)\n\t\t dim(intersection of interior1 and exterior2)\n\t\t\n\t\t\n\t\t Boundary\n\t\t dim(intersection of boundary1 and interior2)\n\t\t dim(intersection of boundary1 and boundary2)\n\t\t dim(intersection of boundary1 and exterior2)\n\t\t\n\t\t\n\t\t Exterior\n\t\t dim(intersection of exterior1 and interior2)\n\t\t dim(intersection of exterior1 and boundary2)\n\t\t dim(intersection of exterior1 and exterior2)\n\t\t\n\t\n\t\n\tThe values in the DE-9IM can be T, F, *, 0, 1, 2.\n  - T means the intersection gives a non-empty result.\n  - F means the intersection gives an empty result.\n  - * means any result.\n  - 0, 1, 2 gives the expected dimension of the result (point, curve, surface)\n  \n", 
    "functions" : {
      "dimension" : [ {
        "description" : " Return the dimension of the geo object.\n", 
        "params" : [ "$geometry" ]
      } ], 
      "coordinate-dimension" : [ {
        "description" : " Return the coordinate dimension of the geo object, as specified in the srsDimension attribute.\n Only two-dimensional and three-dimensional coordinates are supported.\n", 
        "params" : [ "$geometry" ]
      } ], 
      "geometry-type" : [ {
        "description" : " Return the qname type of geo object.\n Returns empty sequence if the geometry is not recognized.\n", 
        "params" : [ "$geometry" ]
      } ], 
      "srid" : [ {
        "description" : " Return the srid URI of geo object.\n SRID is contained in the srsName attribute in the geo element, or one of the parents,\n or in the boundedBy/Envelope element in one of the parents.\n This function searches recursively from this element up to the top-most parent.\n", 
        "params" : [ "$geometry" ]
      } ], 
      "num-geometries" : [ {
        "description" : " Return the number of geometries in the collection, or 1 for non-collection.\n For gml:Point, gml:LineString, gml:LinearRing, gml:Polygon, return 1.\n For gml:Curve and gml:Surface, they are treated as geometric collections.\n", 
        "params" : [ "$geometry" ]
      } ], 
      "geometry-n" : [ {
        "description" : " Return the n-th geometry in the collection.\n Return this geometry if it is not a collection.\n For gml:Point, gml:LineString, gml:LinearRing, gml:Polygon, return this item if n is zero, otherwise error.\n For gml:Curve and gml:Surface, they are treated as geometric collections.\n", 
        "params" : [ "$geometry", "$n" ]
      } ], 
      "envelope" : [ {
        "description" : " The envelope is the minimum bounding box of this geometry.\n", 
        "params" : [ "$geometry" ]
      } ], 
      "as-text" : [ {
        "description" : " Return the Well-known Text Representation of Geometry.\n This is defined in the Simple Features spec from OGC.\n gml:Curve is represented as MultiLineString.\n gml:Surface is represented as MultiPolygon.\n", 
        "params" : [ "$geometry" ]
      } ], 
      "as-binary" : [ {
        "description" : " Return the Well-known Binary Representation of Geometry.\n This is defined in the Simple Features spec from OGC.\n gml:Curve is represented as MultiLineString.\n gml:Surface is represented as MultiPolygon.\n", 
        "params" : [ "$geometry" ]
      } ], 
      "is-empty" : [ {
        "description" : " Checks if the argument is empty or not and if it is a valid geometry or not.\n A geometry is considered empty if it has no points.\n", 
        "params" : [ "$geometry" ]
      } ], 
      "is-simple" : [ {
        "description" : " Checks if this geometric object has no anomalous geometric points, such\n\tas self intersection or self tangency.\n Does not work for gml:Surface and gml:MultiGeometry.\n", 
        "params" : [ "$geometry" ]
      } ], 
      "is-3d" : [ {
        "description" : " Checks if this geometric object is 2D or 3D, as specified in srsDimension optional attribute.\n", 
        "params" : [ "$geometry" ]
      } ], 
      "is-measured" : [ {
        "description" : " Checks if this geometric object has measurements.\n Measurements is not supported in this geo module, so the function returns false.\n", 
        "params" : [ "$geometry" ]
      } ], 
      "boundary" : [ {
        "description" : " A boundary is a set that represents the limit of an geometry.\n For a Point or MultiPoint, the boundary is the empty geometry, nothing is returned.\n For a LineString, the boundary is the MultiPoint set of start point and end point.\n For a LinearRing, the boundary is empty MultiPoint.\n For a Curve, it is treated as a MultiCurve.\n For a Polygon, the boundary is the MultiCurve set of exterior and interior rings.\n For a Surface, the boundary is the MultiCurve set formed from the exterior ring of all patches\n  seen as a single surface and all the interior rings from all patches.\n For MultiCurve, the boundary is the MultiPoint set of all start and end points that appear\n  in an odd number of linestrings.\n For MultiGeometry, a sequence of boundaries is returned, corresponding to each child geometry.\n", 
        "params" : [ "$geometry" ]
      } ], 
      "equals" : [ {
        "description" : " Checks if the two geometries are equal.\n \n Note: Does not work for gml:Surface and gml:MultiSurface if they have multiple Polygons.\n", 
        "params" : [ "$geometry1", "$geometry2" ]
      } ], 
      "covers" : [ {
        "description" : " Checks if geometry1 covers geometry2.\n It has to fulfill one of these conditions:\n  - every point of geometry2 is a point of geometry1.\n  - the DE-9IM Intersection Matrix for the two geometries is\n     T*****FF* or *T****FF* or ***T**FF* or ****T*FF*.\n Unlike contains it does not distinguish between points in the boundary and in the interior of geometries.\n", 
        "params" : [ "$geometry1", "$geometry2" ]
      } ], 
      "disjoint" : [ {
        "description" : " Checks if geometry1 does not touch or intersects geometry2.\n It has to fulfill these conditions:\n  - they have no point in common\n  - the DE-9IM Intersection Matrix for the two geometries is\n     FF*FF****.\n  - geometry1 does not intersect geometry2.\n", 
        "params" : [ "$geometry1", "$geometry2" ]
      } ], 
      "intersects" : [ {
        "description" : " Checks if geometry1 intersects geometry2.\n This is true if disjoint returns false.\n", 
        "params" : [ "$geometry1", "$geometry2" ]
      } ], 
      "touches" : [ {
        "description" : " Checks if geometry1 touches geometry2.\n Returns true if the DE-9IM intersection matrix for the two\n geometries is FT*******, F**T***** or F***T****.\n", 
        "params" : [ "$geometry1", "$geometry2" ]
      } ], 
      "crosses" : [ {
        "description" : " Checks if geometry1 crosses geometry2.\n That is if the geometries have some but not all interior points in common.\n Returns true if the DE-9IM intersection matrix for the two\n geometries is:\n T*T****** (for P/L, P/A, and L/A situations).\n T*****T** (for L/P, A/P, and A/L situations).\n 0******** (for L/L situations).\n This applies for situations:  P/L, P/A, L/L, L/A, L/P, A/P and A/L.\n For other situations it returns false.\n", 
        "params" : [ "$geometry1", "$geometry2" ]
      } ], 
      "within" : [ {
        "description" : " Checks if geometry1 is within geometry2.\n Returns true if the DE-9IM intersection matrix for the two\n  geometries is T*F**F***.\n", 
        "params" : [ "$geometry1", "$geometry2" ]
      } ], 
      "contains" : [ {
        "description" : " Checks if geometry1 contains geometry2.\n Returns true if within(geometry2, geometry1) is true.\n", 
        "params" : [ "$geometry1", "$geometry2" ]
      } ], 
      "overlaps" : [ {
        "description" : " Checks if geometry1 overlaps with geometry2.\n Returns true if DE-9IM intersection matrix for the two\n geometries is T*T***T** (for two points or two surfaces)\n\t or * 1*T***T** (for two curves).\n", 
        "params" : [ "$geometry1", "$geometry2" ]
      } ], 
      "relate" : [ {
        "description" : " Checks if geometry1 relates with geometry2 relative to a DE-9IM matrix.\n The DE-9IM matrix is defined like this:\n \n\t\n\t\t \n\t\t Interior\n\t\t Boundary\n\t\t Exterior\n\t\t\n\t\t\n\t\t Interior\n\t\t dim(intersection of interior1 and interior2)\n\t\t dim(intersection of interior1 and boundary2)\n\t\t dim(intersection of interior1 and exterior2)\n\t\t\n\t\t\n\t\t Boundary\n\t\t dim(intersection of boundary1 and interior2)\n\t\t dim(intersection of boundary1 and boundary2)\n\t\t dim(intersection of boundary1 and exterior2)\n\t\t\n\t\t\n\t\t Exterior\n\t\t dim(intersection of exterior1 and interior2)\n\t\t dim(intersection of exterior1 and boundary2)\n\t\t dim(intersection of exterior1 and exterior2)\n\t\t\n\t\n\tThe values in the DE-9IM can be T, F, *, 0, 1, 2 .\n  - T means the intersection gives a non-empty result.\n  - F means the intersection gives an empty result.\n  - * means any result.\n  - 0, 1, 2 gives the expected dimension of the result (point, curve, surface)\n For example, the matrix of \"T*T***T**\" checks for intersections of interior1 with interior2,\n interior1 with exterior2 and exterior1 with interior2.\n", 
        "params" : [ "$geometry1", "$geometry2", "$intersection_matrix" ]
      } ], 
      "distance" : [ {
        "description" : " Compute the shortest distance between any two Points in geometry1 and geometry2.\n", 
        "params" : [ "$geometry1", "$geometry2" ]
      } ], 
      "buffer" : [ {
        "description" : " Returns a polygon that represents all Points whose distance\n   from this geometric object is less than or equal to distance.\n", 
        "params" : [ "$geometry", "$distance" ]
      } ], 
      "convex-hull" : [ {
        "description" : " Returns the smallest convex Polygon that contains all the points in the Geometry.\n Actually returns the object of smallest dimension possible (possible Point or LineString).\n", 
        "params" : [ "$geometry" ]
      } ], 
      "intersection" : [ {
        "description" : " Returns a geometric object that represents the Point set intersection of\n    geometry1 and geometry2.\n For intersection of two polygons interiors, returns a polygon.\n If intersection is void, empty sequence is returned.\n", 
        "params" : [ "$geometry1", "$geometry2" ]
      } ], 
      "union" : [ {
        "description" : " Returns a geometric object that represents the Point set union of\n    geometry1 and geometry2.\n", 
        "params" : [ "$geometry1", "$geometry2" ]
      } ], 
      "difference" : [ {
        "description" : " Returns a geometric object that represents the Point set difference of\n    geometry1 and geometry2. Points that are in geometry1 and are not in geometry2.\n If difference is empty geometry, empty sequence is returned.\n", 
        "params" : [ "$geometry1", "$geometry2" ]
      } ], 
      "sym-difference" : [ {
        "description" : " Returns a geometric object that represents the Point set symmetric difference of\n    geometry1 and geometry2. Points that are in geometry1 and are not in geometry2\n    and points that are in geometry2 and are not in geometry1.\n If difference is empty geometry, empty sequence is returned.\n", 
        "params" : [ "$geometry1", "$geometry2" ]
      } ], 
      "area" : [ {
        "description" : " Returns the area of this geometry.\n Returns zero for Point and Lines.\n", 
        "params" : [ "$geometry" ]
      } ], 
      "length" : [ {
        "description" : " Returns the length of the lines of this geometry.\n Returns zero for Points.\n", 
        "params" : [ "$geometry" ]
      } ], 
      "is-within-distance" : [ {
        "description" : " Checks if geometry2 is within a certain distance of geometry1.\n", 
        "params" : [ "$geometry1", "$geometry2", "$distance" ]
      } ], 
      "centroid" : [ {
        "description" : " Returns a Point that is the mathematical centroid of this geometry.\n The result is not guaranteed to be on the surface.\n", 
        "params" : [ "$geometry" ]
      } ], 
      "point-on-surface" : [ {
        "description" : " Returns a Point that is interior of this geometry.\n If it cannot be inside the geometry, then it will be on the boundary.\n", 
        "params" : [ "$geometry" ]
      } ], 
      "x" : [ {
        "description" : " Returns the X coordinate of a Point.\n", 
        "params" : [ "$point" ]
      } ], 
      "y" : [ {
        "description" : " Returns the Y coordinate of a Point.\n", 
        "params" : [ "$point" ]
      } ], 
      "z" : [ {
        "description" : " Returns the Z coordinate of a Point, if is 3D.\n", 
        "params" : [ "$point" ]
      } ], 
      "m" : [ {
        "description" : " Should return the Measure of a Point, but is not implemented,\n because it is not specified in GMLSF.\n", 
        "params" : [ "$point" ]
      } ], 
      "start-point" : [ {
        "description" : " Returns the start Point of a line.\n", 
        "params" : [ "$line" ]
      } ], 
      "end-point" : [ {
        "description" : " Returns the end Point of a line.\n", 
        "params" : [ "$line" ]
      } ], 
      "is-closed" : [ {
        "description" : " Checks if the line is closed loop. That is, if the start Point is same with end Point.\n For gml:Curve, checks if the start point of the first segment is the same with the\n   last point of the last segment. It also checks that all the segments are connected together,\n   and returns false if they aren't.\n For gml:MultiCurve, checks recursively for each LineString.\n For gml:Surface, checks if the exterior boundary of each patch touches completely other patches,\n   so the Surface encloses a solid.\n   For this to happen there is a need for 3D objects, and full 3D processing is not supported in GEOS library,\n   so the function always returns false in this case.\n", 
        "params" : [ "$geom" ]
      } ], 
      "is-ring" : [ {
        "description" : " Checks if the line is a ring. That is, if the line is closed and simple.\n", 
        "params" : [ "$line" ]
      } ], 
      "num-points" : [ {
        "description" : " Return the number of Points in a line.\n", 
        "params" : [ "$line" ]
      } ], 
      "point-n" : [ {
        "description" : " Return the n-th Point in a line.\n", 
        "params" : [ "$line", "$n" ]
      } ], 
      "exterior-ring" : [ {
        "description" : " Return the exterior ring of a Polygon.\n", 
        "params" : [ "$polygon" ]
      } ], 
      "num-interior-ring" : [ {
        "description" : " Return the number of interior rings of a Polygon.\n", 
        "params" : [ "$polygon" ]
      } ], 
      "interior-ring-n" : [ {
        "description" : " Return the n-th interior ring of a Polygon.\n", 
        "params" : [ "$polygon", "$n" ]
      } ], 
      "num-patches" : [ {
        "description" : " Return the number of surface patches inside a gml:Surface.\n This function has the same effect as num-geometries(), only it is restricted to gml:Surface.\n", 
        "params" : [ "$polyhedral-surface" ]
      } ], 
      "patch-n" : [ {
        "description" : " Return the n-th Surface patch of a Surface.\n Only polygonal Surfaces are supported, so a gml:PolygonPatch is returned.\n The gml:PolygonPatch has the same content as gml:Polygon.\n This function has the same effect as geometry-n(), only it is restricted to gml:Surface.\n", 
        "params" : [ "$polyhedral-surface", "$n" ]
      } ], 
      "bounding-polygons" : [ {
        "description" : " Return the list of PolygonPatches that share a boundary with the given $polygon.\n The gml:PolygonPatch has the same content as gml:Polygon.\n This function tests the exterior ring of each polygon patch if it overlaps\n with the exterior ring of the given polygon.\n", 
        "params" : [ "$polyhedral-surface", "$polygon" ]
      } ]
    }
  }, 
  "http://expath.org/ns/http-client" : {
    "description" : " \n This module provides an implementation of the\n EXPath Http Client.\n It provides functions for making HTTP requests and is a superset of the\n module specified by EXPath.\n Specifically, it implements the http:send-request() functions\n as specified by EXPath. Moreover, it adds an additional function\n http:read() (with several arities for the sake of ease).\n \n \n In general, both functions take a description of the HTTP request to make\n as parameter, execute the request, and return a representation of the HTTP\n response. For instance, in the following code snippet, we fetch the Zorba\n home page:\n \n import module namespace http = \"http://expath.org/ns/http-client\";\n http:send-request(\n  &lt;http:request href=\"http://zorba.io\" method=\"get\" /&gt;\n )\n \n \n The http:send-request() functions are declared as sequential.\n Sequential functions are allowed to have side effects. For example, most probably,\n an HTTP POST request is a request that has side effects because it adds/changes\n a remote resource. Sequential functions are specified in the\n XQuery Scripting Extension.\n In contrast, the http:read() functions are not declared as sequential -\n they are declared as nondeterministic though, which\n means that several calls may return different results.\n HTTP requests performed using these functions are not allowed to have\n side effects.\n \n \n The response is returned as a sequence of one or more items. The first\n one is an http:response element with quite the same\n structure as an http:request, but without the content itself.\n The content is returned as the second item (or several items in case of\n a multipart response) as a string, a document node, or a binary item.\n This depends on the content-type returned.\n Specifically, the rules are as follows:\n \n  A document node is returned if the media type has a MIME type of\n     text/xml, application/xml, text/xml-external-parsed-entity, or\n     application/xml-external-parsed-entity, as defined in [RFC 3023]\n     (except that application/xml-dtd is considered a text media type).\n     MIME types ending by +xml are also XML media types.\n  A document node is returned if the media type has a MIME type of\n      text/html. In order to be able to make HTML parseable, tidy is automatically\n      invoked. If you want to prevent that, you can also set your own content-type\n      by setting the override-media-type attribute in the request element.\n       For tidying, the following options\n       will be used:\n       \n         TidyXmlOut=yes\n         TidyDoctypeMode=TidyDoctypeOmit\n         TidyQuoteNbsp=yes\n         TidyCharEncoding=\"utf8\"\n         TidyNewline=\"LF\"\n       \n  \n  An xs:string item is returned if the media type has a text MIME type,\n     i.e. beginning with text/.\n  An xs:base64Binary item is returned for all the other media types.\n \n \n \n The structure of a request element is defined in the schema that is imported\n by this module. The details are described in the\n specification.\n Analogously, the response element is also described in this\n specification.\n \n", 
    "functions" : {
      "send-request" : [ {
        "description" : " This function sends an HTTP request and returns the corresponding response.\n \n This function is declared as sequential (see XQuery Scripting).\n Sequential functions are allowed to have side effects. For example, most probably,\n an HTTP POST request is a request that has side effects because it adds/changes\n a remote resource.\n \n", 
        "params" : [ "$request", "$href", "$bodies" ]
      }, {
        "description" : " Function for convenience.\n Calling this function is equivalent to calling\n \n http:send-request($request, (), ())\n \n", 
        "params" : [ "$request" ]
      }, {
        "description" : " Function for convenience.\n Calling this function is equivalent to calling\n \n http:send-request($request, $href, ())\n \n", 
        "params" : [ "$request", "$href" ]
      } ], 
      "tidy-result" : [ {
        "description" : "", 
        "params" : [ "$result", "$override-media-type" ]
      } ]
    }
  }, 
  "http://jsoniq.org/errors" : {
    "description" : " This module contains one variable declaration for each diagnostic of the\n http://jsoniq.org/errors namespace.\n The variables serves as documentation for the errors but can also\n be used in the code. For example, one useful scenario is to compare\n an error caught in the catch clause of a try-catch expression with one of\n the variables.\n", 
    "functions" : {

    }
  }, 
  "http://jsoniq.org/function-library" : {
    "description" : " This module provides extensions to the JSONiq core function library.\n The module is always imported so you do not need to import it explicitly.\n Also, you do not need to fully qualify a function to invoke it.\n", 
    "functions" : {
      "accumulate" : [ {
        "description" : " This function dynamically builds an object, like the {||} syntax, except that\n it does not throw an error upon pair collision. Instead, it accumulates them\n into an array, if more than one.\n", 
        "params" : [ "$items" ]
      } ], 
      "descendant-arrays" : [ {
        "description" : " This function returns all arrays contained at any depth within a sequence of items.\n", 
        "params" : [ "$items" ]
      } ], 
      "descendant-arrays-priv" : [ {
        "description" : " Helper function for libjn:descendant-arrays()\n", 
        "params" : [ "$i" ]
      } ], 
      "descendant-objects" : [ {
        "description" : " This function returns all objects contained at any depth within a sequence of items.\n", 
        "params" : [ "$items" ]
      } ], 
      "descendant-objects-priv" : [ {
        "description" : " Helper function for libjn:descendant-objects()\n", 
        "params" : [ "$i" ]
      } ], 
      "descendant-pairs" : [ {
        "description" : " This function returns all pairs contained at any depth within an sequence of items.\n", 
        "params" : [ "$items" ]
      } ], 
      "descendant-pairs-priv" : [ {
        "description" : " Helper function for libjn:descendant-pairs()\n", 
        "params" : [ "$i" ]
      } ], 
      "intersect" : [ {
        "description" : " This function returns the intersection of the objects contained in the\n given sequence of items, aggregating values corresponding to the same key\n into an array.\n", 
        "params" : [ "$items" ]
      } ], 
      "values" : [ {
        "description" : " This functions returns all values of all objects contained in a sequence of items.\n", 
        "params" : [ "$items" ]
      } ]
    }
  }, 
  "http://jsoniq.org/functions" : {
    "description" : " This module provides the functions defined by the JSONiq specification,\n sections 1.7 (Functions) and 1.10 (Update Primitives). JSONiq extends\n the XQuery specification to also deal with JSON data natively. See\n     jsoniq.org\n for details.\n", 
    "functions" : {
      "decode-from-roundtrip" : [ {
        "description" : " This function decodes non-JSON types previously encoded with\n jn:encode-for-roundtrip.\n Calling this version of the function is equivalent to calling the\n 2 argument version of the function with the second argument\n   { \"prefix\" : \"Q{http://jsoniq.org/roundtrip}\" }\n", 
        "params" : [ "$items" ]
      }, {
        "description" : " This function decodes non-JSON types previously encoded with\n jn:encode-for-roundtrip.\n The $options parameter contains options for the decoding process.\n Currently the only supported option is \"prefix\". It specifies the prefix\n that determines if this function decodes an item.\n Example:\n   jn:decode-from-roundtrip(\n     { \"nan\" : { \"pre-type\" : \"xs:double\", \"pre-value\" : \"NaN\" } },\n     { \"prefix\" : \"pre-\" }\n   )\n returns the same instance that would be constructed by\n   { \"nan\" : xs:double(\"NaN\") }\n So\n   let $decoded := jn:decode-from-roundtrip(\n           { \"nan\" : { \"pre-type\" : \"xs:double\", \"pre-value\" : \"NaN\" } },\n           { \"prefix\" : \"pre-\" }\n       )\n   let $nan := $decoded(\"nan\")\n   return\n       ($nan instance of xs:double, $nan)\n returns\n   true NaN\n", 
        "params" : [ "$items", "$options" ]
      } ], 
      "encode-for-roundtrip" : [ {
        "description" : " This function recursively encodes non-JSON types in such a way that they\n can be serialized as JSON while keeping roundtrip capability.\n Calling this version of the function is equivalent to calling the\n 2 argument version of the function with the second argument\n  \n  {\n    \"prefix\" : \"Q{http://jsoniq.org/roundtrip}\"\n    \"serialization-parameters\" : \n  }\n  \n Note: The computations are made with respect to the static context of the\n caller, so that the schema type definitions are available.\n", 
        "params" : [ "$items" ]
      }, {
        "description" : " This function recursively encodes non-JSON types in such a way that they\n can be serialized as JSON while keeping roundtrip capability.\n Note: The computations are made with respect to the static context of the\n caller, so that the schema type definitions are available.\n Example:\n   jn:encode-for-roundtrip(\n     { \"nan\" : xs:double(\"NaN\") },\n     { \"prefix\" : \"pre-\" }\n   )\n returns\n   { \"nan\" : { \"pre-type\" : \"xs:double\", \"pre-value\" : \"NaN\" } }\n", 
        "params" : [ "$items", "$options" ]
      } ], 
      "parse-json" : [ {
        "description" : " This function parses a given string as JSON and returns a sequence\n of Objects or Arrays.\n Please note that this function allows to parse sequences of whitespace\n separated objects and arrays.\n", 
        "params" : [ "$j" ]
      }, {
        "description" : " This function parses a given string as JSON and returns a sequence\n of Objects or Arrays.\n", 
        "params" : [ "$j", "$o" ]
      } ], 
      "keys" : [ {
        "description" : " Returns the set of keys belonging to the objects found inside a given\n sequence of items. The keys are returned in an implementation-defined\n order. Duplicate keys are eliminated.\n", 
        "params" : [ "$o" ]
      } ], 
      "project" : [ {
        "description" : " For each item in the given sequence, this function returns the item itself,\n if it is not an object, or its \"projected\" copy if it is an object. Projecting\n an object by a set of keys means creating a new object from the specified pairs\n of the source object. Specifically, for each key in $keys, if the object has a\n pair with that key, then a copy of that pair is included in the new object.\n", 
        "params" : [ "$items", "$keys" ]
      } ], 
      "trim" : [ {
        "description" : " For each item in the given sequence, this function returns the item itself,\n if it is not an object, or its \"trimmed\" copy, if it is an object. Trimming\n an object by a set of keys means creating a new object containing all the\n pairs of the source object except the ones whose key appears in the given\n set of keys.\n", 
        "params" : [ "$items", "$keys" ]
      } ], 
      "size" : [ {
        "description" : " Returns the size of a JSON array, or the empty sequence if no array is given.\n The size of an Array is the number of members contained within it.\n", 
        "params" : [ "$a" ]
      } ], 
      "members" : [ {
        "description" : " Returns the items belonging to the arrays found inside a given sequence\n of items. The items are returned in an implementation-defined order.\n", 
        "params" : [ "$a" ]
      } ], 
      "flatten" : [ {
        "description" : " For each item in the given sequence, this function returns the item itself,\n if it is not an array, or a sequence of items \"flattened-out\" from the array.\n Flattening an array means replacing the array with its members, and recursively\n flattening any arrays in the members sequence.\n Note: The function is equivalent to\n   define function jn:flatten($args as item()*)\n   {\n     for $arg in args\n     return\n       if ($arg instance of array())\n       then\n         for $value in $arg[]\n         return\n           if ($value instance of array())\n           then jn:flatten($value[])\n           else $value\n       else\n         $arg\n   };\n", 
        "params" : [ "$items" ]
      } ], 
      "null" : [ {
        "description" : " Returns the JSON null.\n", 
        "params" : [  ]
      } ]
    }
  }, 
  "http://jsound.io/modules/validate" : {
    "description" : " JSound simple validator.\n This is a JSONiq implemenation of the JSound (the schema for JSON) validator.\n", 
    "functions" : {
      "jsd-valid" : [ {
        "description" : " Validates the $instance JSON item against the JSound type with name $name\n and namespace $ns, from the JSound schema definition $jsd.\n", 
        "params" : [ "$ns", "$name", "$instance" ]
      }, {
        "description" : " Validates the $instance JSON item against the JSound type with name $name\n and namespace $ns, from the JSound schema definition $jsd.\n", 
        "params" : [ "$jsd", "$name", "$ns", "$instance" ]
      } ], 
      "check-types" : [ {
        "description" : "", 
        "params" : [ "$jstypes", "$types" ]
      } ], 
      "check-type" : [ {
        "description" : "", 
        "params" : [ "$jstypes", "$type" ]
      } ], 
      "check-atomic-type" : [ {
        "description" : "", 
        "params" : [ "$jstypes", "$type" ]
      } ], 
      "check-object-type" : [ {
        "description" : "", 
        "params" : [ "$jstypes", "$type" ]
      } ], 
      "check-array-type" : [ {
        "description" : "", 
        "params" : [ "$jstypes", "$type" ]
      } ], 
      "check-union-type" : [ {
        "description" : "", 
        "params" : [ "$jstypes", "$type" ]
      } ], 
      "check-ref-type" : [ {
        "description" : "", 
        "params" : [ "$jstypes", "$type" ]
      } ], 
      "save-type" : [ {
        "description" : "", 
        "params" : [ "$jstypes", "$type" ]
      } ], 
      "validate-instance" : [ {
        "description" : "", 
        "params" : [ "$jstypes", "$name", "$instance" ]
      } ], 
      "validate-type" : [ {
        "description" : "", 
        "params" : [ "$jstypes", "$type", "$instance" ]
      } ], 
      "validate-type-ref" : [ {
        "description" : "", 
        "params" : [ "$jstypes", "$type", "$instance" ]
      } ], 
      "validate-atomic-type" : [ {
        "description" : "", 
        "params" : [ "$jstypes", "$type", "$instance" ]
      } ], 
      "validate-enumeration" : [ {
        "description" : "", 
        "params" : [ "$jstypes", "$type", "$instance" ]
      } ], 
      "validate-object-type" : [ {
        "description" : "", 
        "params" : [ "$jstypes", "$type", "$instance" ]
      } ], 
      "validate-array-type" : [ {
        "description" : "", 
        "params" : [ "$jstypes", "$type", "$instance" ]
      } ], 
      "validate-union-type" : [ {
        "description" : "", 
        "params" : [ "$jstypes", "$type", "$instance" ]
      } ], 
      "get-type-name" : [ {
        "description" : "", 
        "params" : [ "$type" ]
      } ], 
      "value-except" : [ {
        "description" : "", 
        "params" : [ "$arg1", "$arg2" ]
      } ]
    }
  }, 
  "http://jsound.io/modules/validate/map" : {
    "description" : " Map utility\n", 
    "functions" : {
      "set" : [ {
        "description" : " Inserts new key and value into the map or replaces value under the exiting key.\n Returns true all the time.\n", 
        "params" : [ "$map", "$key", "$value" ]
      } ], 
      "set-if-empty" : [ {
        "description" : " Only if key doesn't exist, inserts new key and value into the map and\n returns true. Otherwise returns false.\n", 
        "params" : [ "$map", "$key", "$value" ]
      } ], 
      "get" : [ {
        "description" : " Returns the value under the key.\n", 
        "params" : [ "$map", "$key" ]
      } ], 
      "has-key" : [ {
        "description" : " Returns true if $key exists in the map.\n", 
        "params" : [ "$map", "$key" ]
      } ]
    }
  }, 
  "http://www.28msec.com/modules/cloudant" : {
    "description" : " This module provides functionality for creating, reading, updating,\n deleting and searching data in Cloudant\n databases.\n Before issuing a request to Cloudant it is mandatory to create\n a new connection through one of the connect functions.\n These functions return a connection identifier which needs to be used\n to access data in Cloudant through the other functions.\n In these functions Cloudant databases will be identified through\n their names. By default, the functions will assume that the database is owned by\n the user for which the given connection has been created.\n To specify a different database owner, most functions accept an\n $options parameter that allows a database-owner\n option to specify a different database owner for a single request.\n Moreover, when connecting, it is possible to specify the default\n database owner using the connect#3 function.\n Additional information on the Cloudant APIs can be found\n on the Cloudant website.\n Important Notice Regarding Function Determinism\n The non side-effecting functions:\n \n   list-databases#1\n   list-databases#2\n   database-info#2\n   database-info#3\n   all-documents#2\n   all-documents#3\n   multiple-documents#3\n   multiple-documents#4\n   document#3\n   document#4\n   document-info#3\n   document-info#4\n   attachment#4\n   attachment#5\n   all-view-documents#4\n   all-view-documents#5\n   multiple-view-documents#5\n   multiple-view-documents#6\n   lucene-query#5\n   lucene-query#6\n \n are declared deterministic, which means that their results could be cached\n when invoked multiple times with the same arguments in the same query execution.\n To not use cached results you can use the following alternative functions:\n \n   list-databases-nondeterministic#1\n   list-databases-nondeterministic#2\n   database-info-nondeterministic#2\n   database-info-nondeterministic#3\n   all-documents-nondeterministic#2\n   all-documents-nondeterministic#3\n   multiple-documents-nondeterministic#3\n   multiple-documents-nondeterministic#4\n   document-nondeterministic#3\n   document-nondeterministic#4\n   document-info-nondeterministic#3\n   document-info-nondeterministic#4\n   attachment-nondeterministic#4\n   attachment-nondeterministic#5\n   all-view-documents-nondeterministic#4\n   all-view-documents-nondeterministic#5\n   multiple-view-documents-nondeterministic#5\n   multiple-view-documents-nondeterministic#6\n   lucene-query-nondeterministic#5\n   lucene-query-nondeterministic#6\n \n which have been declared as being non deterministic.\n", 
    "functions" : {
      "connect" : [ {
        "description" : " Opens a connection to Cloudant using the default credentials.\n The function returns an opaque URI that can represents the connection.\n This URI has to be passed to other functions of this module that require\n a $connection parameter as a first argument.\n This function requires to specify an options object.\n The following options are supported:\n \n   username: the username used for connecting (string, mandatory).\n   password: the password used for connecting (string, mandatory).\n   default-database-owner: the default database owner which will be\n       used when calling the other module functions (string).\n \n \n For example,\n cloudant:connect().\n \n", 
        "params" : [  ]
      }, {
        "description" : " Opens a connection to Cloudant using the specified credentials.\n The function returns an opaque URI that can represents the connection.\n This URI has to be passed to other functions of this module that require\n a $connection parameter as a first argument.\n The $credentials parameter is used to specify the connection information.\n If a string is used, then the function will interpret it as the name of\n a credential in the Cloudant category.\n If an object is used, then the function will open a connection using it.\n The object structure is the following:\n \n   username: the username used for connecting (string, mandatory).\n   password: the password used for connecting (string, mandatory).\n   default-database-owner: the default database owner which will be\n       used when calling the other module functions (string, optional).\n \n \n For example, using stored credential:\n cloudant:connect(\"credentials-name\")\n For example, specifying the connection information:\n cloudant:connect(\n   {\n     \"username\": \"user\",\n     \"password: \"pass\",\n     \"owner\": \"another-user\"\n   }).\n \n", 
        "params" : [ "$credentials" ]
      } ], 
      "list-databases" : [ {
        "description" : " Returns an array containing the names of all the user's databases.\n This function is declared as deterministic and should be used whenever result\n caching is acceptable.\n For example,\n cloudant:list-databases($connection).\n \n", 
        "params" : [ "$connection" ]
      }, {
        "description" : " Returns an array containing the names of all the user's databases.\n This function is declared as deterministic and should be used whenever result\n caching is acceptable.\n This function allows to specify an additional options object.\n The following options are supported:\n \n   database-owner: specifies the database owner (string, default: connection user).\n \n \n For example,\n cloudant:list-databases($connection, {\"database-owner\" : \"username\"}).\n \n", 
        "params" : [ "$connection", "$options" ]
      } ], 
      "list-databases-nondeterministic" : [ {
        "description" : " Returns an array containing the names of all the user's databases.\n This function has the same semantics as\n list-databases#1,\n but is declared as being non deterministic and thus should only be used when\n result caching is not desired.\n", 
        "params" : [ "$connection" ]
      }, {
        "description" : " Returns an array containing the names of all the user's databases.\n This function has the same semantics as\n list-databases#2,\n but is declared as being non deterministic and thus should only be used when\n result caching is not desired.\n", 
        "params" : [ "$connection", "$options" ]
      } ], 
      "database-info" : [ {
        "description" : " Returns information about a database.\n This function is declared as deterministic and should be used whenever result\n caching is acceptable.\n For example,\n cloudant:database-info($connection, \"db\").\n \n An object with the following format is returned:\n \n {\n   \"update_seq\": \"0-g1AAAADneJzLYWBg...\",\n   \"db_name\": \"db\",\n   \"purge_seq\": 0,\n   \"other\": {\n     \"data_size\": 0\n   },\n   \"doc_del_count\": 0,\n   \"doc_count\": 0,\n   \"disk_size\": 316,\n   \"disk_format_version\": 5,\n   \"compact_running\": false,\n   \"instance_start_time\": \"0\"\n }\n \n \n The fields have the following meaning:\n \n  compact_running: set to true if the database compaction routine is\n  operating on this database.\n  db_name: the name of the database.\n  disk_format_version: the version of the physical format used for the data\n  when it is stored on disk.\n  disk_size: size in bytes of the data as stored on the disk. Views indexes\n  are not included in the calculation.\n  doc_count: a count of the documents in the specified database.\n  doc_del_count: number of deleted documents.\n  instance_start_time: always 0.\n  purge_seq: the number of purge operations on the database.\n  update_seq: the current number of updates to the database.\n  other: JSON object containing a data_size field.\n \n \n", 
        "params" : [ "$connection", "$database" ]
      }, {
        "description" : " Returns information about a database.\n This function is declared as deterministic and should be used whenever result\n caching is acceptable.\n This function allows to specify an additional options object.\n The following options are supported:\n \n   database-owner: specifies the database owner (string, default: connection user).\n \n \n For example,\n cloudant:database-info($connection, \"db\", {\"database-owner\": \"username\"}).\n \n An object with the following format is returned:\n \n {\n   \"update_seq\": \"0-g1AAAADneJzLYWBg...\",\n   \"db_name\": \"db\",\n   \"purge_seq\": 0,\n   \"other\": {\n     \"data_size\": 0\n   },\n   \"doc_del_count\": 0,\n   \"doc_count\": 0,\n   \"disk_size\": 316,\n   \"disk_format_version\": 5,\n   \"compact_running\": false,\n   \"instance_start_time\": \"0\"\n }\n \n \n The fields have the following meaning:\n \n  compact_running: set to true if the database compaction routine is\n  operating on this database.\n  db_name: the name of the database.\n  disk_format_version: the version of the physical format used for the data\n  when it is stored on disk.\n  disk_size: size in bytes of the data as stored on the disk. Views indexes\n  are not included in the calculation.\n  doc_count: a count of the documents in the specified database.\n  doc_del_count: number of deleted documents.\n  instance_start_time: always 0.\n  purge_seq: the number of purge operations on the database.\n  update_seq: the current number of updates to the database.\n  other: JSON object containing a data_size field.\n \n \n", 
        "params" : [ "$connection", "$database", "$options" ]
      } ], 
      "database-info-nondeterministic" : [ {
        "description" : " Returns information about a database.\n This function has the same semantics as database-info#2,\n but is declared as being non deterministic and thus should only be used when\n result caching is not desired.\n", 
        "params" : [ "$connection", "$database" ]
      }, {
        "description" : " Returns information about a database.\n This function has the same semantics as\n database-info#3,\n but is declared as being non deterministic and thus should only be used when\n result caching is not desired.\n", 
        "params" : [ "$connection", "$database", "$options" ]
      } ], 
      "create-database" : [ {
        "description" : " Creates a new database.\n The database name must be composed of one or more of the following\n characters:\n \n  Lowercase characters (a-z).\n  Digits (0-9).\n  Any of the characters: _,$,(,),+,- and /.\n \n \n For example,\n cloudant:create-database($connection, \"db\").\n \n", 
        "params" : [ "$connection", "$database" ]
      } ], 
      "delete-database" : [ {
        "description" : " Deletes a database and all the documents and attachments contained in it.\n The database name must be composed of one or more of the following characters:\n \n  Lowercase characters (a-z).\n  Digits (0-9).\n  Any of the characters: _,$,(,),+,- and /.\n \n \n For example,\n cloudant:delete-database($connection, \"db\").\n \n", 
        "params" : [ "$connection", "$database" ]
      } ], 
      "all-documents" : [ {
        "description" : " Lists all the documents in a given database.\n This function is declared as deterministic and should be used whenever result\n caching is acceptable.\n The information is returned as a JSON structure containing meta information\n about the return structure, and the list of documents each with its ID, revision\n and key. The key is generated from the document ID.\n For example,\n cloudant:all-documents($connection, \"db\").\n \n An object with the following format is returned:\n \n {\n   \"total_rows\":3,\n   \"offset\":0,\n   \"rows\":[\n   {\n     \"id\":\"5a049246-179f-42ad-87ac-8f080426c17c\",\n     \"key\":\"5a049246-179f-42ad-87ac-8f080426c17c\",\n     \"value\":\n     {\n       \"rev\":\"2-9d5401898196997853b5ac4163857a29\"\n     }\n   },\n   {\n     \"id\":\"96f898f0-f6ff-4a9b-aac4-503992f31b01\",\n     \"key\":\"96f898f0-f6ff-4a9b-aac4-503992f31b01\",\n     \"value\":\n     {\n       \"rev\":\"2-ff7b85665c4c297838963c80ecf481a3\"\n      }\n   },\n   {\n     \"id\":\"d1f61e66-7708-4da6-aa05-7cbc33b44b7e\",\n     \"key\":\"d1f61e66-7708-4da6-aa05-7cbc33b44b7e\",\n     \"value\":\n     {\n       \"rev\":\"2-cbdef49ef3ddc127eff86350844a6108\"\n     }\n   }]\n }\n \n \n The fields have the following meaning:\n \n  offset: offset where the document list started.\n  rows: array of document objects, each containing id, key and revision number.\n  total_rows: number of documents in the database.\n  update_seq: current update sequence database.\n \n \n", 
        "params" : [ "$connection", "$database" ]
      }, {
        "description" : " Lists all the documents in a given database.\n This function is declared as deterministic and should be used whenever result\n caching is acceptable.\n The information is returned as a JSON structure containing meta information\n about the return structure, and the list of documents each with its ID, revision\n and key. The key is generated from the document ID.\n This function allows to specify an additional options object.\n The following options are supported:\n \n   descending: return the documents in descending by key order (boolean,\n   default: false).\n   endkey: stop returning records when the specified key is reached (string).\n   endkey_docid: stop returning records when the specified document ID is\n   reached (string).\n   group: group the results using the reduce function to a group or single\n   row (boolean, default: false).\n   group_level: specify the group level to be used (numeric).\n   include_docs: include the full content of the documents in the return\n   (boolean, default: false).\n   inclusive_end: specifies whether the specified end key should be included\n   in the result (boolean, default: true).\n   key: return only documents that match the specified key (string).\n   limit: limit the number of the returned documents to the specified number\n   (numeric).\n   reduce: use the reduction function (boolean, default: true).\n   skip: skip this number of records before starting to return the results\n   (numeric, default: 0).\n   stale: allow the results from a stale view to be used (string, allowed\n   value: \"ok\").\n   startkey: start returning records when the specified key is reached (string).\n   startkey_docid: start returning records when the specified document ID\n   is reached (string).\n   database-owner: specifies the database owner (string, default: connection\n   user).\n \n \n For example,\n cloudant:all-documents($connection, \"db\", {\"database-owner\": \"username\"}).\n \n An object with the following format is returned:\n \n {\n   \"total_rows\":3,\n   \"offset\":0,\n   \"rows\":[\n   {\n     \"id\":\"5a049246-179f-42ad-87ac-8f080426c17c\",\n     \"key\":\"5a049246-179f-42ad-87ac-8f080426c17c\",\n     \"value\":\n     {\n       \"rev\":\"2-9d5401898196997853b5ac4163857a29\"\n     }\n   },\n   {\n     \"id\":\"96f898f0-f6ff-4a9b-aac4-503992f31b01\",\n     \"key\":\"96f898f0-f6ff-4a9b-aac4-503992f31b01\",\n     \"value\":\n     {\n       \"rev\":\"2-ff7b85665c4c297838963c80ecf481a3\"\n      }\n   },\n   {\n     \"id\":\"d1f61e66-7708-4da6-aa05-7cbc33b44b7e\",\n     \"key\":\"d1f61e66-7708-4da6-aa05-7cbc33b44b7e\",\n     \"value\":\n     {\n       \"rev\":\"2-cbdef49ef3ddc127eff86350844a6108\"\n     }\n   }]\n }\n \n \n The fields have the following meaning:\n \n  offset: offset where the document list started.\n  rows: array of document objects, each containing id, key and revision number.\n  total_rows: number of documents in the database.\n  update_seq: current update sequence database.\n \n \n", 
        "params" : [ "$connection", "$database", "$options" ]
      } ], 
      "all-documents-nondeterministic" : [ {
        "description" : " Lists all the documents in a given database.\n This function has the same semantics as\n all-documents#2,\n but is declared as being non deterministic and thus should only be used when\n result caching is not desired.\n", 
        "params" : [ "$connection", "$database" ]
      }, {
        "description" : " Lists all the documents in a given database.\n This function has the same semantics as\n all-documents#3,\n but is declared as being non deterministic and thus should only be used when\n result caching is not desired.\n", 
        "params" : [ "$connection", "$database", "$options" ]
      } ], 
      "multiple-documents" : [ {
        "description" : " List the specified documents in a given database.\n This function is declared as deterministic and should be used whenever result\n caching is acceptable.\n The information is returned as a JSON structure containing meta information\n about the return structure, and the list of documents each with its ID, revision\n and key. The key is generated from the document ID.\n For example,\n cloudant:multiple-documents($connection, \"db\",\n   (\"5a049246-179f-42ad-87ac-8f080426c17c\",\n    \"d1f61e66-7708-4da6-aa05-7cbc33b44b7e\",\n    \"96f898f0-f6ff-4a9b-aac4-503992f31b01\")).\n \n An object with the following format is returned:\n \n {\n   \"total_rows\":3,\n   \"offset\":0,\n   \"rows\":[\n   {\n     \"id\":\"5a049246-179f-42ad-87ac-8f080426c17c\",\n     \"key\":\"5a049246-179f-42ad-87ac-8f080426c17c\",\n     \"value\":\n     {\n       \"rev\":\"2-9d5401898196997853b5ac4163857a29\"\n     }\n   },\n   {\n     \"id\":\"96f898f0-f6ff-4a9b-aac4-503992f31b01\",\n     \"key\":\"96f898f0-f6ff-4a9b-aac4-503992f31b01\",\n     \"value\":\n     {\n       \"rev\":\"2-ff7b85665c4c297838963c80ecf481a3\"\n      }\n   },\n   {\n     \"id\":\"d1f61e66-7708-4da6-aa05-7cbc33b44b7e\",\n     \"key\":\"d1f61e66-7708-4da6-aa05-7cbc33b44b7e\",\n     \"value\":\n     {\n       \"rev\":\"2-cbdef49ef3ddc127eff86350844a6108\"\n     }\n   }]\n }\n \n \n The fields have the following meaning:\n \n  offset: offset where the document list started.\n  rows: array of document objects, each containing id, key and revision number.\n  total_rows: number of documents in the database.\n  update_seq: current update sequence database.\n \n \n", 
        "params" : [ "$connection", "$database", "$keys" ]
      }, {
        "description" : " Lists the specified documents in a given database.\n This function is declared as deterministic and should be used whenever result\n caching is acceptable.\n The information is returned as a JSON structure containing meta information\n about the return structure, and the list of documents each with its ID, revision\n and key. The key is generated from the document ID.\n This function allows to specify an additional options object.\n The following options are supported:\n \n   descending: return the documents in descending by key order (boolean,\n   default: false).\n   endkey: stop returning records when the specified key is reached (string).\n   endkey_docid: stop returning records when the specified document ID is\n   reached (string).\n   group: group the results using the reduce function to a group or single\n   row (boolean, default: false).\n   group_level: specify the group level to be used (numeric).\n   include_docs: include the full content of the documents in the return\n   (boolean, default: false).\n   inclusive_end: specifies whether the specified end key should be included\n   in the result (boolean, default: true).\n   key: return only documents that match the specified key (string).\n   limit: limit the number of the returned documents to the specified number\n   (numeric).\n   reduce: use the reduction function (boolean, default: true).\n   skip: skip this number of records before starting to return the results\n   (numeric, default: 0).\n   stale: allow the results from a stale view to be used (string, allowed\n   value: \"ok\").\n   startkey: start returning records when the specified key is reached\n   (string).\n   startkey_docid: start returning records when the specified document ID\n   is reached (string).\n   database-owner: specifies the database owner (string, default: connection\n   user).\n \n \n For example,\n cloudant:multiple-documents($connection, \"db\",\n   (\"5a049246-179f-42ad-87ac-8f080426c17c\",\n    \"d1f61e66-7708-4da6-aa05-7cbc33b44b7e\",\n    \"96f898f0-f6ff-4a9b-aac4-503992f31b01\"),\n   {\"database-owner\": \"username\"}).\n \n An object with the following format is returned:\n \n {\n   \"total_rows\":3,\n   \"offset\":0,\n   \"rows\":[\n   {\n     \"id\":\"5a049246-179f-42ad-87ac-8f080426c17c\",\n     \"key\":\"5a049246-179f-42ad-87ac-8f080426c17c\",\n     \"value\":\n     {\n       \"rev\":\"2-9d5401898196997853b5ac4163857a29\"\n     }\n   },\n   {\n     \"id\":\"96f898f0-f6ff-4a9b-aac4-503992f31b01\",\n     \"key\":\"96f898f0-f6ff-4a9b-aac4-503992f31b01\",\n     \"value\":\n     {\n       \"rev\":\"2-ff7b85665c4c297838963c80ecf481a3\"\n      }\n   },\n   {\n     \"id\":\"d1f61e66-7708-4da6-aa05-7cbc33b44b7e\",\n     \"key\":\"d1f61e66-7708-4da6-aa05-7cbc33b44b7e\",\n     \"value\":\n     {\n       \"rev\":\"2-cbdef49ef3ddc127eff86350844a6108\"\n     }\n   }]\n }\n \n \n The fields have the following meaning:\n \n  offset: offset where the document list started.\n  rows: array of document objects, each containing id, key and revision number.\n  total_rows: number of documents in the database.\n  update_seq: current update sequence database.\n \n \n", 
        "params" : [ "$connection", "$database", "$keys", "$options" ]
      } ], 
      "multiple-documents-nondeterministic" : [ {
        "description" : " List the specified documents in a given database.\n This function has the same semantics as\n multiple-documents#3,\n but is declared as being non deterministic and thus should only be used when\n result caching is not desired.\n", 
        "params" : [ "$connection", "$database", "$keys" ]
      }, {
        "description" : " Lists the specified documents in a given database.\n This function has the same semantics as\n multiple-documents#4,\n but is declared as being non deterministic and thus should only be used when\n result caching is not desired.\n", 
        "params" : [ "$connection", "$database", "$keys", "$options" ]
      } ], 
      "bulk-crud" : [ {
        "description" : " Creates, updates or deletes multiple documents with a single request.\n When creating new documents the document ID is optional. For updating\n existing documents, you must provide the document ID, revision information,\n and new document values. To delete existing documents, you must provide the\n document ID, revision information and add a field _deleted having\n value true.\n \n For example,\n cloudant:bulk-crud($connection, \"db\",\n (\n   {\n     \"name\":\"Nicholas\",\n     \"age\":45,\n     \"gender\":\"male\",\n   },\n   {\n     \"name\":\"Taylor\",\n     \"age\":50,\n     \"gender\":\"male\",\n     \"_id\":\"5a049246-179f-42ad-87ac-8f080426c17c\",\n   },\n   {\n     \"name\":\"Owen\",\n     \"age\":51,\n     \"gender\":\"male\",\n     \"_id\":\"d1f61e66-7708-4da6-aa05-7cbc33b44b7e\",\n     \"_rev\":\"2-f29c836d0bedc4b4b95cfaa6d99e95df\",\n   },\n   {\n     \"_id\":\"b675e932-9bb6-4fc9-b889-50238ac3512b\",\n     \"_rev\":\"2-abd3942fdab3515bfed224abed2451feb\",\n     \"_deleted\": true\n   }\n ))\n \n requires to insert the first document with a system-generated identifier, to\n insert the second one with a user-specified identifier, to update the third\n one and, finally,to delete the last one.\n \n \n The JSON returned by the_bulk_docs operation consists of an array\n of JSON structures, one for each submitted document.\n The returned JSON structure should be examined to ensure that all of\n the documents submitted in the original request were successfully added\n to the database. When no errors are raised, the revision of the new\n document is reported for all documents.\n \n \n \n [{\n    \"id\":\"96f898f0-f6ff-4a9b-aac4-503992f31b01\",\n    \"rev\":\"2-ff7b85665c4c297838963c80ecf481a3\"\n  },\n  {\n    \"id\":\"5a049246-179f-42ad-87ac-8f080426c17c\",\n    \"rev\":\"2-9d5401898196997853b5ac4163857a29\"\n  },\n  {\n    \"id\":\"d1f61e66-7708-4da6-aa05-7cbc33b44b7e\",\n    \"rev\":\"2-cbdef49ef3ddc127eff86350844a6108\"\n  },\n  {\n    \"id\": \"b675e932-9bb6-4fc9-b889-50238ac3512b\",\n    \"rev\":\"2-12356bafb1232167befabb32127823943d\"\n  }]\n \n \n Cloudant will only guarantee that some of the documents will be\n saved when you send the request. The response will contain the list of\n documents successfully inserted or updated during the process.\n In the event of a crash, some of the documents may have been successfully\n saved, and some will have been lost.\n The response structure will indicate whether the document was updated by\n supplying the rev parameter indicating a new document revision\n was created. If the update failed, then you will get an error of type\n conflict.\n For example:\n \n [\n   {\n     \"id\":\"FishStew\",\n     \"error\":\"conflict\",\n     \"reason\":\"Document update conflict.\"\n   },\n   {\n     \"id\":\"LambStew\",\n     \"error\":\"conflict\",\n     \"reason\":\"Document update conflict.\"\n   },\n   {\n     \"id\":\"7f7638c86173eb440b8890839ff35433\",\n     \"error\":\"conflict\",\n     \"reason\":\"Document update conflict.\"\n   }\n ]\n \n In this case no new revision has been created and you will need to submit\n the document update with the correct revision tag, to update the document.\n \n The exact structure of each document in the returned array is:\n \n   id: the document ID\n   rev: the new document revision, if a new revision was created\n   error: the error type, if an error was raised\n   reason: a description of the raised error, if an error was raised\n \n \n The error type can either be conflict or forbidden. The first type means that\n the document as submitted is in conflict. The new revision has not been created\n and you will need to re-submit the document to the database. Entries with forbidden\n error type indicate that the validation routine applied to the document during submission\n has returned an error.\n", 
        "params" : [ "$connection", "$database", "$documents" ]
      }, {
        "description" : " Creates, updates or deletes multiple documents with a single request.\n When creating new documents the document ID is optional. For updating\n existing documents, you must provide the document ID, revision information,\n and new document values. To delete existing documents, you must provide the\n document ID, revision information and add a field _deleted having\n value true.\n \n This function allows to specify an additional options object.\n The following options are supported:\n \n   all_or_nothing: sets the database commit mode to use all-or-nothing\n   semantics (boolean, default: false).\n   database-owner: specifies the database owner (string, default: connection\n   user).\n \n \n For example,\n cloudant:bulk-crud($connection, \"db\",\n (\n   {\n     \"name\":\"Nicholas\",\n     \"age\":45,\n     \"gender\":\"male\",\n   },\n   {\n     \"name\":\"Taylor\",\n     \"age\":50,\n     \"gender\":\"male\",\n     \"_id\":\"5a049246-179f-42ad-87ac-8f080426c17c\",\n   },\n   {\n     \"name\":\"Owen\",\n     \"age\":51,\n     \"gender\":\"male\",\n     \"_id\":\"d1f61e66-7708-4da6-aa05-7cbc33b44b7e\",\n     \"_rev\":\"2-f29c836d0bedc4b4b95cfaa6d99e95df\",\n   },\n   {\n     \"_id\":\"b675e932-9bb6-4fc9-b889-50238ac3512b\",\n     \"_rev\":\"2-abd3942fdab3515bfed224abed2451feb\",\n     \"_deleted\": true\n   }\n ),{\"database-owner\": \"username\"})\n \n requires to insert the first document with a system-generated identifier, to\n insert the second one with a user-specified identifier, to update the third\n one and, finally, to delete the last one.\n \n \n The JSON returned by the_bulk_docs operation consists of an array\n of JSON structures, one for each document in the original submission.\n The returned JSON structure should be examined to ensure that all of\n the documents submitted in the original request were successfully added\n to the database. When no errors are raised, the revision of the new\n document is reported for all documents.\n \n \n \n [{\n    \"id\":\"96f898f0-f6ff-4a9b-aac4-503992f31b01\",\n    \"rev\":\"2-ff7b85665c4c297838963c80ecf481a3\"\n  },\n  {\n    \"id\":\"5a049246-179f-42ad-87ac-8f080426c17c\",\n    \"rev\":\"2-9d5401898196997853b5ac4163857a29\"\n  },\n  {\n    \"id\":\"d1f61e66-7708-4da6-aa05-7cbc33b44b7e\",\n    \"rev\":\"2-cbdef49ef3ddc127eff86350844a6108\"\n  },\n  {\n    \"id\": \"b675e932-9bb6-4fc9-b889-50238ac3512b\",\n    \"rev\":\"2-12356bafb1232167befabb32127823943d\"\n  }]\n \n \n Cloudant will only guarantee that some of the documents will be\n saved when you send the request. The response will contain the list of\n documents successfully inserted or updated during the process.\n In the event of a crash, some of the documents may have been successfully\n saved, and some will have been lost.\n The response structure will indicate whether the document was updated by\n supplying the rev parameter indicating a new document revision\n was created. If the update failed, then you will get an error of type\n conflict.\n For example:\n \n [\n   {\n     \"id\":\"FishStew\",\n     \"error\":\"conflict\",\n     \"reason\":\"Document update conflict.\"\n   },\n   {\n     \"id\":\"LambStew\",\n     \"error\":\"conflict\",\n     \"reason\":\"Document update conflict.\"\n   },\n   {\n     \"id\":\"7f7638c86173eb440b8890839ff35433\",\n     \"error\":\"conflict\",\n     \"reason\":\"Document update conflict.\"\n   }\n ]\n \n In this case no new revision has been created and you will need to submit\n the document update with the correct revision tag, to update the document.\n \n The exact structure of each document in the returned array is:\n \n   id: the document ID\n   rev: the new document revision, if a new revision was created\n   error: the error type, if an error was raised\n   reason: a description of the raised error, if an error was raised\n \n \n The error type can either be conflict or forbidden. The first type means that\n the document as submitted is in conflict. The new revision has not been created\n and you will need to re-submit the document to the database. Entries with forbidden\n error type indicate that the validation routine applied to the document during submission\n has returned an error.\n", 
        "params" : [ "$connection", "$database", "$documents", "$options" ]
      } ], 
      "commit-changes" : [ {
        "description" : " Commits any recent changes to the specified database to disk.\n For example,\n cloudant:commit-changes($connection, \"db\").\n \n An object with the following format is returned:\n \n {\n   \"ok\" : true,\n   \"instance_start_time\" : \"0\"\n }\n \n \n", 
        "params" : [ "$connection", "$database" ]
      }, {
        "description" : " Commits any recent changes to the specified database to disk.\n This function allows to specify an additional options object.\n The following options are supported:\n \n   database-owner: specifies the database owner (string, default: connection\n   user).\n \n \n For example,\n \n cloudant:commit-changes($connection, \"db\", {\"database-owner\": \"username\"})\n .\n \n An object with the following format is returned:\n \n {\n   \"ok\" : true,\n   \"instance_start_time\" : \"0\"\n }\n \n \n", 
        "params" : [ "$connection", "$database", "$options" ]
      } ], 
      "create-document" : [ {
        "description" : " Creates a new document in the specified database.\n Creates a new document in the specified database,\n using the supplied JSON document structure. If the JSON\n structure includes the _id field, then the document will\n be created with the specified document ID. If the _id\n field is not specified, a new unique ID will be generated.\n You can include one or more attachments with a given document\n by incorporating the attachment information within the JSON of\n the document. This provides a simpler alternative to loading\n documents with attachments than making a separate call.\n To do so add you can add the _attachments object\n field to the document. It can have one ore more fields, each\n defining a different attachment.\n The name of the field is the name of the attachment.\n Its value is an object containing the following fields:\n \n  content_type: MIME Content type string\n  data: File attachment content, Base64 encoded\n \n \n For example,\n cloudant:create-document($connection, \"db\",\n   {\n     \"_id\" : \"FishStew\",\n     \"servings\" : 4,\n     \"subtitle\" : \"Delicious with fresh bread\",\n     \"title\" : \"Fish Stew\"\n     \"_attachments\" : {\n       \"styling.css\" : {\n       \"content-type\" : \"text/css\",\n       \"data\" : \"cCB7IGZvbnQtc2l6ZTogMTJwdDsgfQo=\"\n       }\n     }\n   })\n \n creates a document with an attachment named styling.css.\n \n Creating a design document\n To create a design document the _id field must be present and must\n start with _design/.\n For example, the following expression creates a design document\n cloudant:create-document($connection, \"db\",\n   {\n     \"_id\": \"_design/DesDocID\",\n     \"views\": {\n       \"view1\": {\n       \"map\":\"function(doc){emit(doc.field, 1)}\",\n       \"reduce\": \"function(key, value, rereduce){return sum(values)}\"\n       }\n     },\n     \"indexes\": {\n       \"mysearch\" : {\n         \"analyzer\": {\"name\": \"portuguese\", \"stopwords\":[\"foo\", \"bar, \"baz\"]},\n         \"index\": \"function(doc){ ... }\"\n       },\n     }\n   }, {\"database-owner\": \"username\"})\n .\n \n Return value\n The returned JSON object will report the new document revision\n and has the following form:\n \n {\n   \"id\":\"64575eef70ab90a2b8d55fc09e00440d\",\n   \"ok\":true,\n   \"rev\":\"1-9c65296036141e575d32ba9c034dd3ee\"\n }\n \n \n", 
        "params" : [ "$connection", "$database", "$document" ]
      }, {
        "description" : " Creates a new document in the specified database\n Creates a new document in the specified database,\n using the supplied JSON document structure. If the JSON\n structure includes the _id field, then the document will\n be created with the specified document ID. If the _id\n field is not specified, a new unique ID will be generated.\n You can include one or more attachments with a given document\n by incorporating the attachment information within the JSON of\n the document. This provides a simpler alternative to loading\n documents with attachments than making a separate call.\n To do so add you can add the _attachments object\n field to the document. It can have one ore more fields, each\n defining a different attachment.\n The name of the field is the name of the attachment.\n Its value is an object containing the following fields:\n \n  content_type: MIME Content type string\n  data: File attachment content, Base64 encoded\n \n \n For example,\n cloudant:create-document($connection, \"db\",\n   {\n     \"_id\" : \"FishStew\",\n     \"servings\" : 4,\n     \"subtitle\" : \"Delicious with fresh bread\",\n     \"title\" : \"Fish Stew\"\n     \"_attachments\" : {\n       \"styling.css\" : {\n       \"content-type\" : \"text/css\",\n       \"data\" : \"cCB7IGZvbnQtc2l6ZTogMTJwdDsgfQo=\"\n       }\n     }\n   }, {\"database-owner\": \"username\"})\n \n creates a document with an attachment named styling.css.\n \n This function allows to specify an additional options object.\n The following options are supported:\n \n   batch: requires batch mode for insertions (string, allowed value: \"ok\")\n   database-owner: specifies the database owner (string, default: connection user).\n \n \n You can write documents to the database at a higher rate\n by using the batch option. This collects document writes\n together in memory (on a user-by-user basis) before they are\n committed to disk. This increases the risk of the documents\n not being stored in the event of a failure, since the documents\n are not written to disk immediately.\n Creating a design document\n To create a design document the _id field must be present and must\n start with _design/.\n For example, the following expression creates a design document\n cloudant:create-document($connection, \"db\",\n   {\n     \"_id\": \"_design/DesDocID\",\n     \"views\": {\n       \"view1\": {\n       \"map\":\"function(doc){emit(doc.field, 1)}\",\n       \"reduce\": \"function(key, value, rereduce){return sum(values)}\"\n       }\n     },\n     \"indexes\": {\n       \"mysearch\" : {\n         \"analyzer\": {\"name\": \"portuguese\", \"stopwords\":[\"foo\", \"bar, \"baz\"]},\n         \"index\": \"function(doc){ ... }\"\n       },\n     }\n   }, {\"database-owner\": \"username\"})\n .\n \n Return value\n The returned JSON object will report the new document revision\n and has the following form:\n \n {\n   \"id\":\"64575eef70ab90a2b8d55fc09e00440d\",\n   \"ok\":true,\n   \"rev\":\"1-9c65296036141e575d32ba9c034dd3ee\"\n }\n \n \n", 
        "params" : [ "$connection", "$database", "$document", "$options" ]
      } ], 
      "document" : [ {
        "description" : " Retrieves a document from the specified database.\n This function is declared as deterministic and should be used whenever result\n caching is acceptable.\n The latest revision of the document will be returned.\n If the document includes attachments, then the\n returned structure will contain a summary of the\n attachments associated with the document, but not the\n attachment data itself.\n For example,\n cloudant:document($connection, \"db\", \"DocID\").\n \n The returned JSON object will contain the document\n and has the following format:\n \n {\n   \"_id\": \"DocID\",\n   \"_rev\": \"2-f29c836d0bedc4b4b95cfaa6d99e95df\",\n   \"name\": \"Anna\",\n   \"age\": 89,\n   \"gender\": \"female\",\n   \"_attachments\": {\n     \"my attachment\": {\n       \"content_type\": \"application/json; charset=UTF-8\",\n       \"revpos\": 2,\n       \"digest\": \"md5-37IZysiyWLRWx31J/1WQHw==\",\n       \"length\": 12,\n       \"stub\": true\n       }\n     }\n   }\n \n \n \n The meaning of the fields in the returned object is the following:\n \n   _id: document ID\n   _rev: document revision\n   attachments: document attachments (optional), each field denotes the name\n       of a different attachment\n     \n       content_type: attachment MIME Content type string\n       length: attachment length in bytes\n       revpos: revision where this attachment exists\n       digest: MD5 checksum of the attachment\n       stub: indicates whether the attachment is a stub\n    \n  \n \n \n Retrieving a design document from the specified database\n To retrieve a design document the document id must start with\n _design/.\n For example,\n cloudant:document($connection, \"db\", \"_design/DesDocID\").\n \n A JSON object with the following format is returned:\n \n {\n  \"_id\": \"_design/DesDocID\",\n   \"views\": {\n     \"view1\": {\n       \"map\":\"function(doc){emit(doc.field, 1)}\",\n       \"reduce\": \"function(key, value, rereduce){return sum(values)}\"\n     }\n   },\n   \"indexes\": {\n     \"mysearch\" : {\n       \"analyzer\": {\"name\": \"portuguese\", \"stopwords\":[\"foo\", \"bar, \"baz\"]},\n       \"index\": \"function(doc){ ... }\"\n     },\n   }\n }\n \n \n \n The meaning of the fields in the returned object is the following:\n \n   _id: document ID\n   _rev: document revision\n   views: object defining the views. Each field defines a different view.\n       The field name is the name of the view and has the following content:\n     \n       map: view map function\n       reduce: view reduce function (optional)\n     \n   \n   indexes: object defining the view indexes. Each field defines a different index.\n       The field name is the name of the index and has the following content:\n     \n       analyzer: Name of the analyzer to be used or an object with the\n       following fields:\n         \n           name: Name of the analyzer\n           stopwords: An array of stop words. Stop words are words that\n           should not be indexed.\n         \n       \n       index: Function that handles the indexing\n     \n   \n \n \n", 
        "params" : [ "$connection", "$database", "$document-id" ]
      }, {
        "description" : " Retrieves a document from the specified database\n This function is declared as deterministic and should be used whenever result\n caching is acceptable.\n Unless you request a specific revision, the latest\n revision of the document will always be returned.\n This function allows to specify an additional options object.\n The following options are supported:\n \n   conflict: returns the conflict tree for the document (boolean)\n   rev: specifies the revision to return (string)\n   revs: return a list of the revisions for the document (boolean)\n   revs_info: return a list of detailed revision information for the document\n   (boolean, allowed value: true)\n   database-owner: specifies the database owner (string, default: connection user).\n \n \n If the document includes attachments, then the\n returned structure will contain a summary of the\n attachments associated with the document, but not the\n attachment data itself.\n For example,\n \n cloudant:document($connection, \"db\", \"DocID\", {\"database-owner\": \"username\"})\n .\n \n The returned JSON object will contain the document\n and has the following format:\n \n {\n   \"_id\": \"DocID\",\n   \"_rev\": \"2-f29c836d0bedc4b4b95cfaa6d99e95df\",\n   \"name\": \"Anna\",\n   \"age\": 89,\n   \"gender\": \"female\",\n   \"_attachments\": {\n     \"my attachment\": {\n       \"content_type\": \"application/json; charset=UTF-8\",\n       \"revpos\": 2,\n       \"digest\": \"md5-37IZysiyWLRWx31J/1WQHw==\",\n       \"length\": 12,\n       \"stub\": true\n       }\n     }\n   }\n \n \n \n The meaning of the fields in the returned object is the following:\n \n   _id: document ID\n   _rev: document revision\n   attachments: document attachments (optional), each field denotes the name\n       of a different attachment:\n   \n     content_type: attachment MIME Content type string\n     length: attachment length in bytes\n     revpos: revision where this attachment exists\n     digest: MD5 checksum of the attachment\n     stub: indicates whether the attachment is a stub\n  \n  \n \n \n Retrieving a design document from the specified database\n To retrieve a design document the document id must start with\n _design/.\n For example,\n cloudant:document($connection, \"db\", \"_design/DesDocID\", {\"database-owner\": \"username\"}).\n \n A JSON object with the following format is returned:\n \n {\n  \"_id\": \"_design/DesDocID\",\n  \"_rev\": \"2-f29c836d0bedc4b4b95cfaa6d99e95df\",\n   \"views\": {\n     \"view1\": {\n       \"map\":\"function(doc){emit(doc.field, 1)}\",\n       \"reduce\": \"function(key, value, rereduce){return sum(values)}\"\n     }\n   },\n   \"indexes\": {\n     \"mysearch\" : {\n       \"analyzer\": {\"name\": \"portuguese\", \"stopwords\":[\"foo\", \"bar, \"baz\"]},\n       \"index\": \"function(doc){ ... }\"\n     },\n   }\n }\n \n \n \n The meaning of the fields in the returned object is the following:\n \n   _id: document ID\n   _rev: document revision\n   views: object defining the views. Each field defines a different view.\n       The field name is the name of the view and has the following content:\n     \n       map: view map function\n       reduce: view reduce function (optional)\n     \n   \n   indexes: object defining the view indexes. Each field defines a different index.\n       The field name is the name of the index and has the following content:\n     \n       analyzer: Name of the analyzer to be used or an object with the\n       following fields:\n         \n           name: Name of the analyzer\n           stopwords: An array of stop words. Stop words are words that\n           should not be indexed.\n         \n       \n       index: Function that handles the indexing\n     \n   \n \n \n Getting a List of Revisions\n You can obtain a list of the revisions for a given document\n by the revs option.\n For example,\n cloudant:document($connection, \"db\", \"DocID\", {\"revs\": true}).\n \n The returned JSON object includes the original document and\n a _revisions structure that includes the revision\n information:\n \n {\n   \"servings\":4,\n   \"subtitle\":\"Delicious with a green salad\",\n   \"_id\":\"FishStew\",\n   \"title\":\"Irish Fish Stew\",\n   \"_revisions\":\n   {\n     \"ids\": [\n       \"a1a9b39ee3cc39181b796a69cb48521c\",\n       \"7c4740b4dcf26683e941d6641c00c39d\",\n       \"9c65296036141e575d32ba9c034dd3ee\"\n      ],\n     \"start\":3\n  },\n  \"_rev\":\"3-a1a9b39ee3cc39181b796a69cb48521c\"\n }\n \n \n The meaning of the additional fields is the following:\n \n   _revisions: document revisions\n   _ids: array of valid revision IDs, in reverse order (latest first)\n   start: prefix number for the latest revision\n \n \n Obtaining an Extended Revision History\n You can get additional information about the revisions for a given document\n with the revs_info option.\n For example,\n cloudant:document($connection, \"db\", \"DocID\", {\"revs_info\": true}).\n \n This returns extended revision information, including the availability and status\n of each revision:\n \n {\n   \"servings\":4,\n   \"subtitle\":\"Delicious with a green salad\",\n   \"_id\":\"FishStew\",\n   \"_revs_info\":[\n     {\n       \"status\":\"available\",\n       \"rev\":\"3-a1a9b39ee3cc39181b796a69cb48521c\"\n     },\n     {\n       \"status\":\"available\",\n       \"rev\":\"2-7c4740b4dcf26683e941d6641c00c39d\"\n     },\n     {\n       \"status\":\"available\",\n       \"rev\":\"1-9c65296036141e575d32ba9c034dd3ee\"\n     }\n   ],\n   \"title\":\"Irish Fish Stew\",\n   \"_rev\":\"3-a1a9b39ee3cc39181b796a69cb48521c\"\n }\n \n \n The meaning of the additional fields is the following:\n \n   _revs_info: document extended revision info\n   rev: revision ID\n   status: revision status\n \n \n", 
        "params" : [ "$connection", "$database", "$document-id", "$options" ]
      } ], 
      "document-nondeterministic" : [ {
        "description" : " Retrieves a document from the specified database.\n This function has the same semantics as document#3,\n but is declared as being non deterministic and thus should only be used when\n result caching is not desired.\n", 
        "params" : [ "$connection", "$database", "$document-id" ]
      }, {
        "description" : " Retrieves a document from the specified database\n This function has the same semantics as document#4,\n but is declared as being non deterministic and thus should only be used when\n result caching is not desired.\n", 
        "params" : [ "$connection", "$database", "$document-id", "$options" ]
      } ], 
      "document-info" : [ {
        "description" : " Returns the latest revision and size for a given document.\n This function is declared as deterministic and should be used whenever result\n caching is acceptable.\n For example,\n cloudant:document-info($connection, \"db\", \"DocID\").\n \n The format of the returned object is the following and contains\n the document id, latest revision and size.\n \n {\n   \"ok\": true,\n   \"id\": \"DocID\",\n   \"rev\": \"1-764b9b11845fd0b73cfa0e61acc74ecf\",\n   \"size\": 500\n }\n \n \n Returning the latest revision and size for a given design document\n To return the latest revision and size of a design document the document\n id must start with\n _design/.\n For example,\n cloudant:document-info($connection, \"db\", \"_design/DesDocID\").\n \n", 
        "params" : [ "$connection", "$database", "$document-id" ]
      }, {
        "description" : " Returns the latest revision and size for a given document.\n This function is declared as deterministic and should be used whenever result\n caching is acceptable.\n This function allows to specify an additional options object.\n The following options are supported:\n \n   database-owner: specifies the database owner (string, default: connection user).\n \n \n For example,\n \n cloudant:document-info($connection, \"db\", \"DocID\", {\"database-owner\": \"username\"})\n .\n \n The format of the returned object is the following and contains\n the document id, latest revision and size.\n \n {\n   \"ok\": true,\n   \"id\": \"DocID\",\n   \"rev\": \"1-764b9b11845fd0b73cfa0e61acc74ecf\",\n   \"size\": 500\n }\n \n \n Returning the latest revision and size for a given design document\n To return the latest revision and size of a design document the document\n id must start with _design/.\n For example,\n \n cloudant:document-info($connection, \"db\", \"_design/DesDocID\", {\"database-owner\": \"username\"})\n .\n \n", 
        "params" : [ "$connection", "$database", "$document-id", "$options" ]
      } ], 
      "document-info-nondeterministic" : [ {
        "description" : " Returns the latest revision and size for a given document.\n This function has the same semantics as\n document-info#3,\n but is declared as being non deterministic and thus should only be used when\n result caching is not desired.\n", 
        "params" : [ "$connection", "$database", "$document-id" ]
      }, {
        "description" : " Returns the latest revision and size for a given document.\n This function has the same semantics as\n document-info#4,\n but is declared as being non deterministic and thus should only be used when\n result caching is not desired.\n", 
        "params" : [ "$connection", "$database", "$document-id", "$options" ]
      } ], 
      "create-or-update-document" : [ {
        "description" : " Creates or updates a document.\n When creating a new document, the _id field must\n be specified.\n For example,\n cloudant:create-or-update-document($connection, \"db\",\n   {\n     \"name\":\"Hannah\",\n     \"age\":120,\n     \"gender\":\"female\",\n     \"_id\":\"DocID\"\n   }).\n \n When updating a document, the _id and the\n _rev field, which contains the last document revision,\n must be specified.\n For example,\n cloudant:create-or-update-document($connection, \"db\",\n   {\n     \"name\":\"Hannah\",\n     \"age\":40,\n     \"gender\":\"female\",\n     \"_id\":\"DocID\",\n     \"_rev\":\"1-764b9b11845fd0b73cfa0e61acc74ecf\"\n   }).\n \n Creating or updating a design document\n To create or update a design document the document id must\n start with _design/.\n For example, the following expression creates a design document\n cloudant:create-or-update-document($connection, \"db\",\n   {\n     \"_id\": \"_design/DesDocID\",\n     \"views\": {\n       \"view1\": {\n       \"map\":\"function(doc){emit(doc.field, 1)}\",\n       \"reduce\": \"function(key, value, rereduce){return sum(values)}\"\n       }\n     },\n     \"indexes\": {\n       \"mysearch\" : {\n         \"analyzer\": {\"name\": \"portuguese\", \"stopwords\":[\"foo\", \"bar, \"baz\"]},\n         \"index\": \"function(doc){ ... }\"\n       },\n     }\n   })\n .\n \n For example, the following expression updates a design document\n cloudant:create-or-update-document($connection, \"db\",\n   {\n     \"_id\": \"_design/DesDocID\",\n     \"_rev\": \"2-f29c836d0bedc4b4b95cfaa6d99e95df\",\n     \"views\": {\n       \"view1\": {\n       \"map\":\"function(doc){emit(doc.field, 1)}\",\n       \"reduce\": \"function(key, value, rereduce){return sum(values)}\"\n       }\n     },\n     \"indexes\": {\n       \"mysearch\" : {\n         \"analyzer\": {\"name\": \"portuguese\", \"stopwords\":[\"foo\", \"bar, \"baz\"]},\n         \"index\": \"function(doc){ ... }\"\n       },\n     }\n   })\n .\n \n The meaning of the fields in the design document is the following:\n \n   _id: document ID\n   _rev: document revision\n   views: object defining the views. Each field defines a different view.\n       The field name is the name of the view and has the following content:\n     \n       map: view map function\n       reduce: view reduce function (optional)\n     \n   \n   indexes: object defining the view indexes. Each field defines a different index.\n       The field name is the name of the index and has the following content:\n     \n       analyzer: Name of the analyzer to be used or an object with the\n       following fields:\n         \n           name: Name of the analyzer\n           stopwords: An array of stop words. Stop words are words that\n           should not be indexed.\n         \n       \n       index: Function that handles the indexing\n     \n   \n \n \n Return value\n The format of the returned object is the following and contains\n the document id and revision.\n \n {\n   \"ok\":true,\n   \"id\":\"DocID\",\n   \"rev\":\"1-764b9b11845fd0b73cfa0e61acc74ecf\"\n }\n \n \n", 
        "params" : [ "$connection", "$database", "$document" ]
      }, {
        "description" : " Creates or updates a document.\n When creating a new document, the _id field must\n be specified.\n For example,\n cloudant:create-or-update-document($connection, \"db\", \"DocID\",\n   {\n     \"name\":\"Hannah\",\n     \"age\":120,\n     \"gender\":\"female\",\n     \"_id\":\"DocID\"\n   }, {\"database-owner\": \"username\"}).\n \n When updating a document, the _id and the\n _rev field, which contains the last document revision,\n must be specified.\n For example,\n cloudant:create-or-update-document($connection, \"db\", \"DocID\",\n   {\n     \"name\":\"Hannah\",\n     \"age\":40,\n     \"gender\":\"female\",\n     \"_id\":\"DocID\",\n     \"_rev\":\"1-764b9b11845fd0b73cfa0e61acc74ecf\"\n   }, {\"database-owner\": \"username\"}).\n \n Creating or updating a design document\n To create or update a design document the document id must\n start with _design/.\n For example, the following expression creates a design document\n cloudant:create-or-update-document($connection, \"db\",\n   {\n     \"_id\": \"_design/DesDocID\",\n     \"views\": {\n       \"view1\": {\n       \"map\":\"function(doc){emit(doc.field, 1)}\",\n       \"reduce\": \"function(key, value, rereduce){return sum(values)}\"\n       }\n     },\n     \"indexes\": {\n       \"mysearch\" : {\n         \"analyzer\": {\"name\": \"portuguese\", \"stopwords\":[\"foo\", \"bar, \"baz\"]},\n         \"index\": \"function(doc){ ... }\"\n       },\n     }\n   }, {\"database-owner\": \"username\"})\n .\n \n cloudant:create-or-update-document($connection, \"db\",\n   {\n     \"_id\": \"_design/DesDocID\",\n     \"_rev\": \"2-f29c836d0bedc4b4b95cfaa6d99e95df\",\n     \"views\": {\n       \"view1\": {\n       \"map\":\"function(doc){emit(doc.field, 1)}\",\n       \"reduce\": \"function(key, value, rereduce){return sum(values)}\"\n       }\n     },\n     \"indexes\": {\n       \"mysearch\" : {\n         \"analyzer\": {\"name\": \"portuguese\", \"stopwords\":[\"foo\", \"bar, \"baz\"]},\n         \"index\": \"function(doc){ ... }\"\n       },\n     }\n   }, {\"database-owner\": \"username\"})\n .\n \n The meaning of the fields in the design document is the following:\n \n   _id: document ID\n   _rev: document revision\n   views: object defining the views. Each field defines a different view.\n       The field name is the name of the view and has the following content:\n     \n       map: view map function\n       reduce: view reduce function (optional)\n     \n   \n   indexes: object defining the view indexes. Each field defines a different index.\n       The field name is the name of the index and has the following content:\n     \n       analyzer: Name of the analyzer to be used or an object with the\n       following fields:\n         \n           name: Name of the analyzer\n           stopwords: An array of stop words. Stop words are words that\n           should not be indexed.\n         \n       \n       index: Function that handles the indexing\n     \n   \n \n \n Return value\n The format of the returned object is the following and contains\n the document id and revision.\n \n {\n   \"ok\":true,\n   \"id\":\"DocID\",\n   \"rev\":\"1-764b9b11845fd0b73cfa0e61acc74ecf\"\n }\n \n \n", 
        "params" : [ "$connection", "$database", "$document", "$options" ]
      } ], 
      "delete-document" : [ {
        "description" : " Deletes the specified document from a database.\n The latest document revision must be specified.\n For example,\n \n cloudant:delete-document($connection, \"db\", \"DocID\", \"3-7c4740b4dcf26683e941d6641c00c39d\")\n .\n \n Deleting a design document\n To delete a design document the document id must\n start with _design/.\n For example,\n \n cloudant:delete-document($connection, \"db\", \"_design/DesDocID\", \"3-7c4740b4dcf26683e941d6641c00c39d\")\n .\n \n Return value\n The returned object reports the document id and its\n new revision, as follows:\n \n {\n   \"id\":\"DocID\",\n   \"ok\":true,\n   \"rev\":\"4-2719fd41187c60762ff584761b714cfb\"\n }\n \n \n", 
        "params" : [ "$connection", "$database", "$document-id", "$document-rev" ]
      }, {
        "description" : " Deletes the specified document from a database.\n The latest document revision must be specified.\n This function allows to specify an additional options object.\n The following options are supported:\n \n   database-owner: specifies the database owner (string, default: connection user).\n \n \n For example,\n \n cloudant:delete-document($connection, \"db\", \"DocID\", \"3-7c4740b4dcf26683e941d6641c00c39d\",\n   {\"database-owner\": \"username\"})\n .\n \n Deleting a design document\n To delete a design document the document id must\n start with _design/.\n For example,\n \n cloudant:delete-document($connection, \"db\", \"_design/DesDocID\", \"3-7c4740b4dcf26683e941d6641c00c39d\",\n   {\"database-owner\": \"username\"})\n .\n \n Return value\n The returned object reports the document id and its\n new revision, as follows:\n \n {\n   \"id\":\"DocID\",\n   \"ok\":true,\n   \"rev\":\"4-2719fd41187c60762ff584761b714cfb\"\n }\n \n \n", 
        "params" : [ "$connection", "$database", "$document-id", "$document-rev", "$options" ]
      } ], 
      "attachment" : [ {
        "description" : " Retrieves the specified document attachment.\n This function is declared as deterministic and should be used whenever result\n caching is acceptable.\n For example,\n cloudant:attachment($connection, \"db\", \"DocID\", \"Attachment\").\n \n Retrieving a design document attachment.\n To retrieve a design document attachment the document id must\n start with _design/.\n For example,\n cloudant:attachment($connection, \"db\", \"_design/DocID\", \"Attachment\").\n \n Return value\n The returned object reports the media-type of the attachment as\n it was specified when the attachment was submitted to the database and\n its raw content.\n The format of the returned object is the following:\n \n {\n   \"media-type\": \"text/plain\",\n   \"content\" : \"Hello World\"\n }\n \n \n The type of the content field is determined by the media-type returned by the\n server. If the media-type indicates that the body content is textual,\n then the content has type string, base64Binary otherwise.\n Specifically, the body content is considered textual only if the MIME-type specified in\n the media-type is one of:\n \n   \"application/json\"\n   \"application/x-javascript\"\n   \"application/xml\"\n   \"application/xml-external-parsed-entity\"\n \n or if the MIME-type starts with \"text/\" or ends with \"+xml\".\n", 
        "params" : [ "$connection", "$database", "$document-id", "$attachment-name" ]
      }, {
        "description" : " Retrieves the specified document attachment.\n This function is declared as deterministic and should be used whenever result\n caching is acceptable.\n This function allows to specify an additional options object.\n The following options are supported:\n \n   database-owner: specifies the database owner (string, default: connection user).\n \n \n For example,\n cloudant:attachment($connection, \"db\", \"DocID\", \"Attachment\",\n   {\"database-owner\": \"username\"}).\n \n Retrieving a design document attachment.\n To retrieve a design document attachment the document id must\n start with _design/.\n For example,\n cloudant:attachment($connection, \"db\", \"_design/DocID\", \"Attachment\",\n   {\"database-owner\": \"username\"}).\n \n Return value\n The returned object reports the media-type of the attachment as\n it was specified when the attachment was submitted to the database and\n its raw content.\n The format of the returned object is the following:\n \n {\n   \"media-type\": \"text/plain\",\n   \"content\" : \"Hello World\"\n }\n \n \n The type of the content field is determined by the media-type returned by the\n server. If the media-type indicates that the body content is textual,\n then the content has type string, base64Binary otherwise.\n Specifically, the body content is considered textual only if the MIME-type specified in\n the media-type is one of:\n \n   \"application/json\"\n   \"application/x-javascript\"\n   \"application/xml\"\n   \"application/xml-external-parsed-entity\"\n \n or if the MIME-type starts with \"text/\" or ends with \"+xml\".\n", 
        "params" : [ "$connection", "$database", "$document-id", "$attachment-name", "$options" ]
      } ], 
      "attachment-nondeterministic" : [ {
        "description" : " Retrieves the specified document attachment.\n This function has the same semantics as\n attachment#4,\n but is declared as being non deterministic and thus should only be used when\n result caching is not desired.\n", 
        "params" : [ "$connection", "$database", "$document-id", "$attachment-name" ]
      }, {
        "description" : " Retrieves the specified document attachment.\n This function has the same semantics as attachment#5,\n but is declared as being non deterministic and thus should only be used when\n result caching is not desired.\n", 
        "params" : [ "$connection", "$database", "$document-id", "$attachment-name", "$options" ]
      } ], 
      "create-or-update-attachment" : [ {
        "description" : " Creates or updates a document attachment.\n The latest document revision must be specified.\n For example,\n cloudant:create-or-update-attachment($connection, \"db\", \"FishStew\",\n   \"8-7c4740b4dcf26683e941d6641c00c39d\", \"AttachmentName\", \"text/plain\",\n   \"AttachmentContent\").\n \n Creating or updating a design document attachment.\n To create or update a design document attachment the document id must\n start with _design/.\n For example,\n cloudant:create-or-update-attachment($connection, \"db\", \"_design/DesDocId\",\n   \"8-7c4740b4dcf26683e941d6641c00c39d\", \"AttachmentName\", \"text/plain\",\n   \"AttachmentContent\").\n \n Return value\n The returned object reports the document id and its new\n revision, as follows:\n \n {\n   \"id\":\"FishStew\",\n   \"ok\":true,\n   \"rev\":\"9-247bb19a41bfd9bfdaf5ee6e2e05be74\"\n }\n \n \n", 
        "params" : [ "$connection", "$database", "$document-id", "$document-rev", "$attachment-name", "$media-type", "$attachment" ]
      }, {
        "description" : " Creates or updates a document attachment.\n The latest document revision must be specified.\n This function allows to specify an additional options object.\n The following options are supported:\n \n   database-owner: specifies the database owner (string, default: connection user).\n \n \n For example,\n cloudant:create-or-update-attachment($connection, \"db\", \"FishStew\",\n   \"8-7c4740b4dcf26683e941d6641c00c39d\", \"AttachmentName\", \"text/plain\",\n   \"AttachmentContent\", {\"database-owner\": \"username\"}).\n \n Creating or updating a design document attachment.\n To create or update a design document attachment the document id must\n start with _design/.\n For example,\n cloudant:create-or-update-attachment($connection, \"db\", \"_design/DesDocId\",\n   \"8-7c4740b4dcf26683e941d6641c00c39d\", \"AttachmentName\", \"text/plain\",\n   \"AttachmentContent\", {\"database-owner\": \"username\"}).\n \n Return value\n The returned object reports the document id and its new\n revision, as follows:\n \n {\n   \"id\":\"FishStew\",\n   \"ok\":true,\n   \"rev\":\"9-247bb19a41bfd9bfdaf5ee6e2e05be74\"\n }\n \n \n", 
        "params" : [ "$connection", "$database", "$document-id", "$document-rev", "$attachment-name", "$media-type", "$attachment", "$options" ]
      } ], 
      "delete-attachment" : [ {
        "description" : " Deletes the specified attachment.\n The latest document revision must be specified.\n For example,\n cloudant:delete-attachment($connection, \"db\", \"FishStew\",\n   \"8-7c4740b4dcf26683e941d6641c00c39d\", \"AttachmentName\").\n \n Deleting a design document attachment.\n To delete a design document attachment the document id must\n start with _design/.\n For example,\n cloudant:delete-attachment($connection, \"db\", \"_design/DesDocId\",\n   \"8-7c4740b4dcf26683e941d6641c00c39d\",\n   \"AttachmentName\", \"text/plain\", \"AttachmentContent\").\n \n Return value\n The returned object reports the document id and its new\n revision, as follows:\n \n {\n   \"id\":\"FishStew\",\n   \"ok\":true,\n   \"rev\":\"9-247bb19a41bfd9bfdaf5ee6e2e05be74\"\n }\n \n \n", 
        "params" : [ "$connection", "$database", "$document-id", "$document-rev", "$attachment-name" ]
      }, {
        "description" : " Deletes the specified attachment.\n The latest document revision must be specified.\n This function allows to specify an additional options object.\n The following options are supported:\n \n   database-owner: specifies the database owner (string, default: connection user).\n \n \n For example,\n cloudant:delete-attachment($connection, \"db\", \"FishStew\",\n \"8-7c4740b4dcf26683e941d6641c00c39d\", \"AttachmentName\",\n {\"database-owner\": \"username\"}).\n \n Deleting a design document attachment.\n To delete a design document attachment the document id must\n start with _design/.\n For example,\n cloudant:delete-attachment($connection, \"db\", \"_design/DesDocId\",\n   \"8-7c4740b4dcf26683e941d6641c00c39d\", \"AttachmentName\", \"text/plain\",\n   \"AttachmentContent\", {\"database-owner\": \"username\"}).\n \n Return value\n The returned object reports the document id and its new\n revision, as follows:\n \n {\n   \"id\":\"FishStew\",\n   \"ok\":true,\n   \"rev\":\"9-247bb19a41bfd9bfdaf5ee6e2e05be74\"\n }\n \n \n", 
        "params" : [ "$connection", "$database", "$document-id", "$document-rev", "$attachment-name", "$options" ]
      } ], 
      "all-view-documents" : [ {
        "description" : " Returns a JSON object describing all the documents in a given view.\n This function is declared as deterministic and should be used whenever result\n caching is acceptable.\n The information is returned as a JSON structure containing meta information\n about the return structure, and the list of documents each with its ID, revision\n and key. The key is generated from the document ID.\n For example,\n cloudant:all-view-documents($connection, \"db\", \"recipes\", \"by_title\").\n \n An object with the following format is returned:\n \n {\n   \"offset\" : 0,\n   \"rows\" :\n   [\n     {\n       \"id\" : \"3-tiersalmonspinachandavocadoterrine\",\n       \"key\" : \"3-tier salmon, spinach and avocado terrine\",\n       \"value\" : [\"3-tier salmon, spinach and avocado terrine\"]\n     },\n     {\n       \"id\" : \"Aberffrawcake\",\n       \"key\" : \"Aberffraw cake\",\n       \"value\" : [\"Aberffraw cake\"]\n     },\n     {\n       \"id\" : \"Adukiandorangecasserole-microwave\",\n       \"key\" : \"Aduki and orange casserole - microwave\",\n       \"value\" : [\"Aduki and orange casserole - microwave\"]\n     }\n   ],\n   \"total_rows\" : 3\n }\n \n \n The fields have the following meaning:\n \n  offset: offset where the document list started.\n  rows: array of document objects, each containing id, key and revision number.\n  total_rows: number of documents in the database.\n \n \n", 
        "params" : [ "$connection", "$database", "$design-document", "$view" ]
      }, {
        "description" : " Returns a JSON object describing all the documents in a given view.\n This function is declared as deterministic and should be used whenever result\n caching is acceptable.\n The information is returned as a JSON structure containing meta information\n about the return structure, and the list of documents each with its ID, revision\n and key. The key is generated from the document ID.\n This function allows to specify an additional options object.\n The following options are supported:\n \n   descending: return the documents in descending by key order (boolean,\n   default: false)\n   endkey: stop returning records when the specified key is reached (string)\n   endkey_docid: stop returning records when the specified document ID is\n   reached (string)\n   group: group the results using the reduce function to a group or single\n   row (boolean, default: false)\n   group_level: specify the group level to be used (numeric)\n   include_docs: include the full content of the documents in the return\n   (boolean, default: false)\n   inclusive_end: specifies whether the specified end key should be included\n   in the result (boolean, default: true)\n   key: return only documents that match the specified key (string)\n   limit: limit the number of the returned documents to the specified number\n   (numeric)\n   reduce: use the reduction function (boolean, default: true)\n   skip: skip this number of records before starting to return the results\n   (numeric, default: 0)\n   stale: allow the results from a stale view to be used (string, allowed\n   value: \"ok\")\n   startkey: start returning records when the specified key is reached\n   (string)\n   startkey_docid: start returning records when the specified document ID\n   is reached (string)\n   database-owner: specifies the database owner (string, default:\n   connection user).\n \n \n For example,\n cloudant:all-view-documents($connection, \"db\", \"recipes\", \"by_title\",\n   {\"database-owner\" : \"username\"}).\n \n An object with the following format is returned:\n \n {\n   \"offset\" : 0,\n   \"rows\" :\n   [\n     {\n       \"id\" : \"3-tiersalmonspinachandavocadoterrine\",\n       \"key\" : \"3-tier salmon, spinach and avocado terrine\",\n       \"value\" : [\"3-tier salmon, spinach and avocado terrine\"]\n     },\n     {\n       \"id\" : \"Aberffrawcake\",\n       \"key\" : \"Aberffraw cake\",\n       \"value\" : [\"Aberffraw cake\"]\n     },\n     {\n       \"id\" : \"Adukiandorangecasserole-microwave\",\n       \"key\" : \"Aduki and orange casserole - microwave\",\n       \"value\" : [\"Aduki and orange casserole - microwave\"]\n     }\n   ],\n   \"total_rows\" : 3\n }\n \n \n The fields have the following meaning:\n \n  offset: offset where the document list started.\n  rows: array of document objects, each containing id, key and revision\n  number.\n  total_rows: number of documents in the database.\n \n \n", 
        "params" : [ "$connection", "$database", "$design-document", "$view", "$options" ]
      } ], 
      "all-view-documents-nondeterministic" : [ {
        "description" : " Returns a JSON object describing all the documents in a given view.\n This function has the same semantics as\n all-view-documents#4,\n but is declared as being non deterministic and thus should only be used when\n result caching is not desired.\n", 
        "params" : [ "$connection", "$database", "$design-document", "$view" ]
      }, {
        "description" : " Returns a JSON object describing all the documents in a given view.\n This function has the same semantics as\n all-view-documents#5,\n but is declared as being non deterministic and thus should only be used when\n result caching is not desired.\n", 
        "params" : [ "$connection", "$database", "$design-document", "$view", "$options" ]
      } ], 
      "multiple-view-documents" : [ {
        "description" : " List the specified documents in a given view.\n This function is declared as deterministic and should be used whenever result\n caching is acceptable.\n The information is returned as a JSON structure containing meta information\n about the return structure, and the list of documents each with its ID, revision\n and key. The key is generated from the document ID.\n For example,\n cloudant:multiple-view-documents($connection, \"db\", \"recipes\", \"by_ingredient\",\n (\"claret\", \"clear apple juice\"))\n .\n \n An object with the following format is returned:\n \n {\n   \"total_rows\" : 26484,\n   \"rows\" : [\n     {\n       \"value\" : [\"Scotch collops\"]],\n       \"id\" : \"Scotchcollops\",\n       \"key\" : \"claret\"\n     },\n     {\n       \"value\" : [\"Stand pie\"],\n       \"id\" : \"Standpie\",\n       \"key\" : \"clear apple juice\"\n     }\n   ],\n   \"offset\" : 6324\n }\n \n \n The fields have the following meaning:\n \n  offset: offset where the document list started.\n  rows: array of document objects, each containing id, key and revision\n  number.\n  total_rows: number of documents in the database.\n  update_seq: current update sequence database.\n \n \n", 
        "params" : [ "$connection", "$database", "$design-document", "$view", "$keys" ]
      }, {
        "description" : " Lists the specified documents in a given view.\n This function is declared as deterministic and should be used whenever result\n caching is acceptable.\n The information is returned as a JSON structure containing meta information\n about the return structure, and the list of documents each with its ID, revision\n and key. The key is generated from the document ID.\n This function allows to specify an additional options object.\n The following options are supported:\n \n   descending: return the documents in descending by key order (boolean,\n   default: false).\n   endkey: stop returning records when the specified key is reached (string).\n   endkey_docid: stop returning records when the specified document ID is\n   reached (string).\n   group: group the results using the reduce function to a group or single\n   row (boolean, default: false).\n   group_level: specify the group level to be used (numeric).\n   include_docs: include the full content of the documents in the return\n   (boolean, default: false).\n   inclusive_end: specifies whether the specified end key should be included\n   in the result (boolean, default: true).\n   key: return only documents that match the specified key (string).\n   limit: limit the number of the returned documents to the specified number\n   (numeric).\n   reduce: use the reduction function (boolean, default: true).\n   skip: skip this number of records before starting to return the results\n   (numeric, default: 0).\n   stale: allow the results from a stale view to be used (string, allowed\n   value: \"ok\").\n   startkey: start returning records when the specified key is reached\n   (string).\n   startkey_docid: start returning records when the specified document ID\n   is reached (string).\n   database-owner: specifies the database owner (string, default: connection\n   user).\n \n \n For example,\n cloudant:multiple-view-documents($connection, \"db\", \"recipes\",\n   \"by_ingredient\", (\"claret\", \"clear apple juice\"),\n   {\"database-owner\": \"username\"})\n .\n \n An object with the following format is returned:\n \n {\n   \"total_rows\" : 26484,\n   \"rows\" : [\n     {\n       \"value\" : [\"Scotch collops\"]],\n       \"id\" : \"Scotchcollops\",\n       \"key\" : \"claret\"\n     },\n     {\n       \"value\" : [\"Stand pie\"],\n       \"id\" : \"Standpie\",\n       \"key\" : \"clear apple juice\"\n     }\n   ],\n   \"offset\" : 6324\n }\n \n \n The fields have the following meaning:\n \n  offset: offset where the document list started.\n  rows: array of document objects, each containing id, key and revision number.\n  total_rows: number of documents in the database.\n  update_seq: current update sequence database.\n \n \n", 
        "params" : [ "$connection", "$database", "$design-document", "$view", "$keys", "$options" ]
      } ], 
      "multiple-view-documents-nondeterministic" : [ {
        "description" : " List the specified documents in a given view.\n This function has the same semantics as\n multiple-view-documents#5,\n but is declared as being non deterministic and thus should only be used when\n result caching is not desired.\n", 
        "params" : [ "$connection", "$database", "$design-document", "$view", "$keys" ]
      }, {
        "description" : " Lists the specified documents in a given view.\n This function has the same semantics as\n multiple-view-documents#6,\n but is declared as being non deterministic and thus should only be used when\n result caching is not desired.\n", 
        "params" : [ "$connection", "$database", "$design-document", "$view", "$keys", "$options" ]
      } ], 
      "lucene-query" : [ {
        "description" : " Executes a Lucene query against a view and returns the query result.\n This function is declared as deterministic and should be used whenever result\n caching is acceptable.\n This method searches for documents whose index fields match the Lucene query.\n Which fields of a document are indexed and how is determined by the index functions\n in the design document.\n The information is returned as a JSON structure containing meta information\n about the return structure, and the list of documents each with its ID, revision\n and key. The key is generated from the document ID.\n For example,\n cloudant:lucene-query($connection, \"db\", \"designdoc\", \"view\", \"a*\").\n \n An object with the following format is returned:\n \n {\n   \"total_rows\": 3,\n   \"bookmark\": \"g1AAAACWeJzLYWBgYMpgTmFQSElKzi9KdUhJMtbLTS3KLElMT9VLzskvTUnMK9HLSy3JAalMcgCSSfX____PAvPdQHwQSGTIIt6UPBaQlgNA6j_CJPsPcJOyANNEKzY\",\n   \"rows\":\n   [\n     {\n       \"id\": \"dd828eb4-c3f1-470f-aeff-c375ef70e4ad\",\n       \"order\": [0.0, 1],\n       \"fields\":\n       {\n         \"default\": \"aa\",\n         \"foo\": 0.0\n       }\n     },\n     {\n       \"id\": \"ea522cf1-eb8e-4477-aa92-d1fa459bb216\",\n       \"order\": [1.0, 0],\n       \"fields\":\n       {\n         \"default\": \"ab\",\n         \"foo\": 1.0\n       }\n     },\n     {\n       \"id\": \"c838baed-d573-43ea-9c34-621cf0f13301\",\n       \"order\": [2.0, 0],\n       \"fields\":\n       {\n         \"default\": \"ac\",\n         \"foo\": 2.0\n       }\n     }\n   ]\n }\n \n \n The fields have the following meaning:\n \n  total_rows: number of results returned.\n  bookmark: string to be submitted in the next query to page through results.\n      If this response contained no results, the bookmark will be the same as the\n      one used to obtain this response.\n  rows: array of document objects, each document contains the following fields:\n    \n      order: specifies the order with regard to the indexed fields.\n      fields: Object containing other search indexes.\n    \n  \n \n \n", 
        "params" : [ "$connection", "$database", "$design-document", "$index", "$query" ]
      }, {
        "description" : " Executes a Lucene query against a view and returns the query result.\n This function is declared as deterministic and should be used whenever result\n caching is acceptable.\n This method searches for documents whose index fields match the Lucene query.\n Which fields of a document are indexed and how is determined by the index functions\n in the design document.\n This function allows to specify an additional options object.\n The following options are supported:\n \n   bookmark: A bookmark that was received from a previous search. This\n   allows you to page through the results. If there are no more results after\n   the bookmark, you will get a response with an empty rows array and the\n   same bookmark. That way you can determine that you have reached the end\n   of the result list (string).\n   stale: allow the results from a stale view to be used (string, allowed\n   value: \"ok\").\n   limit: limit the number of the returned documents to the specified\n   number (numeric).\n   include_docs: include the full content of the documents in the return\n   (boolean, default: false).\n   sort: specifies the sort order of the results. A JSON string of the\n   form \"fieldname&lt;type&gt;\" or -fieldname&lt;type&gt;\n   for descending order, where fieldname is the name of a string or number field\n   and type is either number or string. The type part is optional and defaults\n   to number. Some examples are \"foo\", \"-foo\",\n   \"bar&lt;string&gt;\", \"-foo&lt;number&gt;\". String\n   fields used for sorting must not be analyzed fields. The field(s) used for\n   sorting must be indexed by the same indexer used for the search query.\n   Alternatively, a JSON array of such strings is allowed.\n \n \n The information is returned as a JSON structure containing meta information\n about the return structure, and the list of documents each with its ID, revision\n and key. The key is generated from the document ID.\n For example,\n cloudant:lucene-query($connection, \"db\", \"designdoc\", \"view\", \"a*\",\n {\"database-owner\": \"username\"}).\n \n An object with the following format is returned:\n \n {\n   \"total_rows\": 3,\n   \"bookmark\": \"g1AAAACWeJzLYWBgYMpgTmFQSElKzi9KdUhJMtbLTS3KLElMT9VLzskvTUnMK9HLSy3JAalMcgCSSfX____PAvPdQHwQSGTIIt6UPBaQlgNA6j_CJPsPcJOyANNEKzY\",\n   \"rows\":\n   [\n     {\n       \"id\": \"dd828eb4-c3f1-470f-aeff-c375ef70e4ad\",\n       \"order\": [0.0, 1],\n       \"fields\":\n       {\n         \"default\": \"aa\",\n         \"foo\": 0.0\n       }\n     },\n     {\n       \"id\": \"ea522cf1-eb8e-4477-aa92-d1fa459bb216\",\n       \"order\": [1.0, 0],\n       \"fields\":\n       {\n         \"default\": \"ab\",\n         \"foo\": 1.0\n       }\n     },\n     {\n       \"id\": \"c838baed-d573-43ea-9c34-621cf0f13301\",\n       \"order\": [2.0, 0],\n       \"fields\":\n       {\n         \"default\": \"ac\",\n         \"foo\": 2.0\n       }\n     }\n   ]\n }\n \n \n The fields have the following meaning:\n \n  total_rows: number of results returned.\n  bookmark: string to be submitted in the next query to page through results.\n      If this response contained no results, the bookmark will be the same as the\n      one used to obtain this response.\n  rows: array of document objects, each document contains the following fields:\n    \n      order: specifies the order with regard to the indexed fields.\n      fields: Object containing other search indexes.\n    \n  \n \n \n", 
        "params" : [ "$connection", "$database", "$design-document", "$index", "$query", "$options" ]
      } ], 
      "lucene-query-nondeterministic" : [ {
        "description" : " Executes a Lucene query against a view and returns the query result.\n This function has the same semantics as\n lucene-query#5,\n but is declared as being non deterministic and thus should only be used when\n result caching is not desired.\n", 
        "params" : [ "$connection", "$database", "$design-document", "$index", "$query" ]
      }, {
        "description" : " Executes a Lucene query against a view and returns the query result.\n This function has the same semantics as lucene-query#6,\n but is declared as being non deterministic and thus should only be used when\n result caching is not desired.\n", 
        "params" : [ "$connection", "$database", "$design-document", "$index", "$query", "$options" ]
      } ], 
      "encode-database-name" : [ {
        "description" : "", 
        "params" : [ "$database" ]
      } ], 
      "uri" : [ {
        "description" : "", 
        "params" : [ "$database-owner", "$api" ]
      } ], 
      "request" : [ {
        "description" : "", 
        "params" : [ "$connection", "$api", "$options" ]
      } ], 
      "error" : [ {
        "description" : "", 
        "params" : [ "$response" ]
      }, {
        "description" : "", 
        "params" : [ "$error-code", "$response" ]
      }, {
        "description" : "", 
        "params" : [ "$error-name", "$error-message", "$response" ]
      } ], 
      "string-parameter" : [ {
        "description" : "", 
        "params" : [ "$parameter-name", "$default-value", "$options" ]
      } ], 
      "mandatory-string-parameter" : [ {
        "description" : "", 
        "params" : [ "$parameter-name", "$options" ]
      } ], 
      "string-parameter-encoded" : [ {
        "description" : "", 
        "params" : [ "$parameter-name", "$default-value", "$options" ]
      } ], 
      "mandatory-string-document-parameter" : [ {
        "description" : "", 
        "params" : [ "$parameter-name", "$document" ]
      } ], 
      "parameter" : [ {
        "description" : "", 
        "params" : [ "$parameter-name", "$default-value", "$options" ]
      } ], 
      "query-arguments" : [ {
        "description" : "", 
        "params" : [ "$first-parameters", "$options" ]
      } ], 
      "send-request" : [ {
        "description" : "", 
        "params" : [ "$http-request" ]
      } ], 
      "send-request-nondeterministic" : [ {
        "description" : "", 
        "params" : [ "$http-request" ]
      } ], 
      "send-request-deterministic" : [ {
        "description" : "", 
        "params" : [ "$http-request" ]
      } ], 
      "parse-object" : [ {
        "description" : "", 
        "params" : [ "$serjson" ]
      } ], 
      "parse-array" : [ {
        "description" : "", 
        "params" : [ "$serjson" ]
      } ], 
      "prepare-document-id" : [ {
        "description" : "", 
        "params" : [ "$document-id" ]
      } ], 
      "store-connection" : [ {
        "description" : "", 
        "params" : [ "$default-owner", "$session-key" ]
      } ], 
      "retrieve-connection" : [ {
        "description" : "", 
        "params" : [ "$connection" ]
      } ]
    }
  }, 
  "http://www.28msec.com/modules/cloudsearch" : {
    "description" : " This module offers functionality to search, add, update and remove documents in\n an Amazon CloudSearch domain.\n For each functionality two methods are provided\n \n  one which accepts a single $options parameter. In this case the default\n      credentials for the \"CloudSearch\" category will be used to determine the\n      CloudSearch endpoint to use.\n  one which accepts both an $endpoint and an $options parameter.\n      In this case, if the $endpoint parameter is of type string, it will be\n      interpreted as the name of a credentials in the \"CloudSearch\" category.\n      Otherwise, if the $endpoint parameter is of type anyURI, it will be\n      interpreted as the endpoint URI.\n \n \n Important Notice Regarding Function Determinism\n The search functions (search#1 and\n search#2) are declared deterministic, which means that\n their results could be cached when invoked multiple times with the same arguments\n in the same query execution.\n To not use cached results you can use two alternative search functions\n (search-nondeterministic#1 and\n search-nondeterministic#2), which have\n been declared as being non deterministic.\n Search options\n The search settings are specified by means of an object whose form\n is described in the following. The two most important fields are the\n \"q\" and \"bq\" fields. At least one of them must be specified. If the \"bq\"\n field is specified in conjunction with the \"q\" parameter, the values\n are joined with a top-level AND.\n \n   bq: one or more match expressions that define a Boolean search. Multiple\n       expressions are joined with a top-level AND.\n       Type: string\n   \n   q: the string to search for. You use the q parameter to perform simple text\n       searches. This searches the default search field for the specified text.\n       Type: string\n   \n \n \n Additional documentation on the format of the query and boolean query strings can\n be found at:\n \n Expression Syntax for Boolean Queries.\n The following additional optional parameters can be specified.\n \n   facet: a comma-separated list of the fields for which you want to compute facets.\n       The specified fields must be numeric fields or defined as facet enabled in the\n       domain configuration.\n       Type: string\n   \n   facet-FIELD-constraints: the field values (facet constraints) that\n       you want to count for a particular field. FIELD is the name of the field.\n       Constraints are specified as a comma-separated list of ranges or\n       single-quoted strings. If you don't specify facet constraints, counts\n       are computed for all field values.\n       Type: string\n   \n   facet-FIELD-sort: how you want to sort facet values for a\n       particular field. FIELD is the name of the field. There are four sorting options:\n       \n         alpha: Sort the facet values alphabetically (in ascending order).\n         count: Sort the facet values by their counts (in descending order).\n         max: Sort the facet values according to the maximum values in the specified\n             field. This option is specified as max(FIELD). By default, the\n             facet values are sorted in ascending order. To sort in descending order,\n             prefix the sort option with - (minus): -max(FIELD).\n         \n         sum: Sort the facet values according to the sum of the values in the\n             specified field (in ascending order). This option is specified as\n             sum(FIELD).\n         \n       \n   \n   facet-FIELD-top-n: set the maximum number of facet constraints to\n       be included for the specified field in the search results. By default,\n       the results include counts for the top 40 constraints.\n        Type: integer\n   \n   no-cache: if false, a cached result can be returned. If true, a revalidation of the\n        results is forced. Default is false.\n        Type: boolean\n   \n   rank: a comma-separated list of fields or rank expressions to use for ranking. A\n        maximum of 10 fields and rank expressions can be specified. You can use any uint\n        field to rank results numerically. Any result-enabled text or literal field can be\n        used to rank results alphabetically. To rank results by relevance, you can specify\n        the name of a custom rank expression or text_relevance. Hits are ordered according\n        to the specified rank field(s). By default, hits are ranked in ascending order.\n        You can prefix a field name with a minus (-) to rank in descending order. If no\n        rank parameter is specified, it defaults to rank=-text_relevance, which\n        lists results according to their text_relevance scores with the highest-scoring\n        documents first.\n       Type: string\n   \n   rank-RANKNAME: define a rank expression that can be used with the\n       rank parameter. You can also specify the new rank expression as a return\n       field and use it to set thresholds for the search results with the\n       t-FIELD parameter. For more information about constructing\n       rank expressions, see\n       \n       Customizing Result Ranking with Amazon CloudSearch.\n       Type: string\n   \n   return-fields: the document fields to include in the response. Up to 2 KB\n       of data can be returned from a text field. If the field contents exceed\n       2 KB, only the first 2 KB is included in the results. Specified as a\n       comma-separated list of field names. If no return-fields are specified,\n       only the document ids of the hits are returned.\n       Type: string\n   \n   size: the maximum number of search hits to return. The default is 10.\n       Type: integer\n   \n   start: the offset of the first search hit you want to return. The default is 0\n       (the first hit).\n       Type: integer\n   \n   t-FIELD: restrict the match set used in subsequent post-processing\n       steps according to the specified rank expression. Only hits that have a\n       score within the specified range are included. Ranges are specified as\n       described in\n       \n       Expression Syntax for Boolean Queries.\n       Type: integer\n   \n \n For additional details on the search parameters you can refer to the\n \n Amazon CloudSearch search requests documentation.\n Search Results\n The format of the returned object is the following:\n \n {\n   \"rank\" : \"-text_relevance\",\n   \"match-expr\" : \"(label 'star wars')\",\n   \"hits\" :\n   {\n     \"found\" : 2,\n     \"start\" : 0,\n     \"hit\" :\n     [\n       {\n         \"id\" : \"tt1185834\",\n         \"data\" :\n         {\n           \"actor\" : [\"Abercrombie, Ian\",\"Baker, Dee\",\"Burton, Corey\"],\n           \"title\" : [\"Star Wars: The Clone Wars\"]\n         }\n       },\n       {\n         \"id\" :\"tt0121766\",\n         \"data\" :\n         {\n           \"actor\" : [\"Bai, Ling\",\"Bryant, Gene\",\"Castle-Hughes, Keisha\"],\n           \"title\" : [\"Star Wars: Episode III - Revenge of the Sith\"]\n         }\n       }\n     ]\n   },\n   \"info\" :\n   {\n     \"rid\" : \"b7c167f6c2da6d93531b9a7b314ad030b3a74803b4b7797edb905ba5a6a08\",\n     \"time-ms\" : 2,\n     \"cpu-time-ms\" : 0\n   }\n }\n \n \n The returned object fields have the following meaning:\n \n   match-expr: Shows the match expression constructed from the search\n       parameters.\n   hits: Contains hit statistics (found, start) and a hit array that lists\n       the document ids and data for each hit.\n   found: The total number of hits that match the search request after\n       Amazon CloudSearch finished processing the match set.\n   start: The index of the first hit returned in this response.\n   hit: An array that lists the document ids and data for each hit.\n   id: The unique identifier for a document.\n   data: A list of returned fields.\n   facets: Contains facet information and facet counts.\n   FacetFieldName: A field for which facets were calculated.\n   constraints: An array of the facet values and counts.\n   value: The facet value being counted.\n   count: The number of hits that contain the facet value in FacetFieldName.\n       \n   info: Contains information about the request processing.\n   rank: Lists the fields that were used to rank the search hits.\n   rid: The encrypted Resource ID.\n   time-ms: How long it took to process the search request in milliseconds.\n       \n   cpu-time-ms: The CPU time required to process the search request in\n       milliseconds.\n   messages: Contains any error messages returned by the search service.\n       The severity, code, and message properties are included for each item.\n   severity: The severity of the message. It is always warning, which indicates\n       a problem with the query string that did not prevent the request from being\n       processed.\n   code: The error code. The search service returns the following error codes:\n     \n       CS-InvalidFieldOrRankAliasInRankParameter: the specified ranking field\n           could not be found.\n       CS-RankExpressionParseError: one of the specified rank expressions could\n           not be parsed. No query-time rank expressions will be used. \n       CS-RankExpressionValidationError: one of the specified rank expressions\n           could not be validated. No query-time rank expressions will be used.\n       CS-UndefinedField: an unknown field was specified in the match\n           expression.\n       CS-UnknownFieldInMatchExpression: a field specified in the bq parameter\n           could not be found.\n       CS-WildcardTermLimit: more than 2000 terms matched the wildcard in the\n           search request. The number of terms matched was limited to 2000.\n     \n   \n   message: A description of the error that was returned by the search service.\n \n \n", 
    "functions" : {
      "add-document" : [ {
        "description" : " Adds or replaces a document in the specified Amazon CloudSearch domain.\n An add operation is applied only if a document with the same id is not\n present or if the version number specified in the operation is greater than\n the existing document's version number.\n The document to add or replace is specified through an object with\n the following form:\n \n {\n   \"id\" : \"tt0484562\",\n   \"version\" : 1,\n   \"lang\" : \"en\",\n   \"fields\" :\n   {\n     \"title\" : \"The Seeker: The Dark Is Rising\",\n     \"genre\" : [\"Adventure\",\"Drama\",\"Fantasy\",\"Thriller\"]\n   }\n }\n \n \n Specifically, the fields in the request object have the following meaning:\n \n   id: An alphanumeric string. Allowed characters are: a-z, 0-9, and _.\n       Document IDs cannot begin with an underscore. The max length is 128\n       characters.\n   version: Any non-negative number less than 2^32.\n   lang: An ISO-639-1 two-letter language code.\n   fields: An object containing one or more fields. Each field specifies\n       a field within the document being added. Field names must begin with a\n       lowercase letter and can contain the following characters: a-z, 0-9,\n       and _. Field names must be at least 3 and no more than 64 characters.\n       The names \"body\", \"docid\", and \"text_relevance\" are reserved names and\n       cannot be used as field names. To specify multiple values for a field,\n       you can specify an array of values instead of a single value.\n \n \n The returned object lists all warnings that were generated.\n \n {\n   \"status\" : \"success\",\n   \"warning\" :\n   [\n     {\"message\" : \"Warning message.\"}\n   ]\n }\n \n \n Specifically, the fields in the response object have the following meaning:\n \n   status: the result status, always \"success\". In case an error occurred\n       processing the request, an error is raised.\n   warning: provides information about warnings generated during parsing\n       or validation. The field is not present if no warning were generated.\n \n \n Example, specifying endpoint URI:\n \n cloudsearch:add-document(\n anyURI(\"http://doc-movies-h2pc7ftfnsdlqh6pqqawbftrhu.us-east-1.cloudsearch.amazonaws.com\"),\n {\n   \"id\" : \"tt0484562\",\n   \"version\" : 1,\n   \"lang\" : \"en\",\n   \"fields\" :\n   {\n     \"title\" : \"The Seeker: The Dark Is Rising\",\n     \"genre\" : [\"Adventure\",\"Drama\",\"Fantasy\",\"Thriller\"]\n   }\n });\n \n \n Example, using stored credentials:\n \n cloudsearch:add-document(\"movies\",\n {\n   \"id\" : \"tt0484562\",\n   \"version\" : 1,\n   \"lang\" : \"en\",\n   \"fields\" :\n   {\n     \"title\" : \"The Seeker: The Dark Is Rising\",\n     \"genre\" : [\"Adventure\",\"Drama\",\"Fantasy\",\"Thriller\"]\n   }\n });\n \n \n", 
        "params" : [ "$endpoint", "$options" ]
      }, {
        "description" : " Adds or replaces a document in the default Amazon CloudSearch domain.\n An add operation is applied only if a document with the same id is not\n present or if the version number specified in the operation is greater than\n the existing document's version number.\n The document to add or replace is specified through an object with\n the following form:\n \n {\n   \"id\" : \"tt0484562\",\n   \"version\" : 1,\n   \"lang\" : \"en\",\n   \"fields\" :\n   {\n     \"title\" : \"The Seeker: The Dark Is Rising\",\n     \"genre\" : [\"Adventure\",\"Drama\",\"Fantasy\",\"Thriller\"]\n   }\n }\n \n \n Specifically, the fields in the request object have the following meaning:\n \n   id: An alphanumeric string. Allowed characters are: a-z, 0-9, and _.\n       Document IDs cannot begin with an underscore. The max length is 128\n       characters.\n   version: Any non-negative number less than 2^32.\n   lang: An ISO-639-1 two-letter language code.\n   fields: An object containing one or more fields. Each field specifies\n       a field within the document being added. Field names must begin with a\n       lowercase letter and can contain the following characters: a-z, 0-9,\n       and _. Field names must be at least 3 and no more than 64 characters.\n       The names \"body\", \"docid\", and \"text_relevance\" are reserved names and\n       cannot be used as field names. To specify multiple values for a field,\n       you can specify an array of values instead of a single value.\n \n \n The returned object lists all warnings that were generated.\n \n {\n   \"status\" : \"success\",\n   \"warning\" :\n   [\n     {\"message\" : \"Warning message.\"}\n   ]\n }\n \n \n Specifically, the fields in the response object have the following meaning:\n \n   status: the result status, always \"success\". In case an error occurred\n       processing the request, an error is raised.\n   warning: provides information about warnings generated during parsing\n       or validation. The field is not present if no warning were generated.\n \n \n Example, specifying endpoint URI:\n \n cloudsearch:add-document(\n anyURI(\"http://doc-movies-h2pc7ftfnsdlqh6pqqawbftrhu.us-east-1.cloudsearch.amazonaws.com\"),\n {\n   \"id\" : \"tt0484562\",\n   \"version\" : 1,\n   \"lang\" : \"en\",\n   \"fields\" :\n   {\n     \"title\" : \"The Seeker: The Dark Is Rising\",\n     \"genre\" : [\"Adventure\",\"Drama\",\"Fantasy\",\"Thriller\"]\n   }\n });\n \n \n Example, using stored credentials:\n \n cloudsearch:add-document(\"movies\",\n {\n   \"id\" : \"tt0484562\",\n   \"version\" : 1,\n   \"lang\" : \"en\",\n   \"fields\" :\n   {\n     \"title\" : \"The Seeker: The Dark Is Rising\",\n     \"genre\" : [\"Adventure\",\"Drama\",\"Fantasy\",\"Thriller\"]\n   }\n });\n \n \n", 
        "params" : [ "$options" ]
      } ], 
      "delete-document" : [ {
        "description" : " Deletes a document from the specified Amazon CloudSearch domain.\n A delete operation is only applied to an existing document if the\n version number specified in the operation is greater than the existing\n document's version number.\n The document to remove is specified through an object with the\n following form:\n \n {\n   \"id\" : \"tt0484562\",\n   \"version\" : 2\n }\n \n \n Specifically, the fields in the request object have the following meaning:\n \n   id: An alphanumeric string. Allowed characters are: a-z, 0-9, and _.\n       Document IDs cannot begin with an underscore. The max length is 128\n       characters.\n   version: Any non-negative number less than 2^32.\n \n \n The response body lists any warning that was generated.\n \n {\n   \"status\" : \"success\",\n   \"warning\" :\n   [\n     {\"message\" : \"Warning message.\"}\n   ]\n }\n \n \n Specifically, the fields in the response object have the following meaning:\n \n   status: the result status, always \"success\". In case of errors an error is\n       raised.\n   warning: provides information about a warning generated during parsing or\n       validation. The field is not present if no warning was generated.\n \n \n Example, using specified endpoint URI:\n \n cloudsearch:delete-document(\n anyURI(\"http://doc-movies-h2pc7ftfnsdlqh6pqqawbftrhu.us-east-1.cloudsearch.amazonaws.com\"),\n {\n   \"id\" : \"tt0484562\",\n   \"version\" : 2\n });\n \n \n Example, using specified stored endpoing:\n \n cloudsearch:delete-document(\"movies\",\n {\n   \"id\" : \"tt0484562\",\n   \"version\" : 2\n });\n \n \n", 
        "params" : [ "$endpoint", "$options" ]
      }, {
        "description" : " Deletes a document from the default Amazon CloudSearch domain.\n A delete operation is only applied to an existing document if the\n version number specified in the operation is greater than the existing\n document's version number.\n The document to remove is specified through an object with the\n following form:\n \n {\n   \"id\" : \"tt0484562\",\n   \"version\" : 2\n }\n \n \n Specifically, the fields in the request object have the following meaning:\n \n   id: An alphanumeric string. Allowed characters are: a-z, 0-9, and _.\n       Document IDs cannot begin with an underscore. The max length is 128\n       characters.\n   version: Any non-negative number less than 2^32.\n \n \n The response body lists any warning that was generated.\n \n {\n   \"status\" : \"success\",\n   \"warning\" :\n   [\n     {\"message\" : \"Warning message.\"}\n   ]\n }\n \n \n Specifically, the fields in the response object have the following meaning:\n \n   status: the result status, always \"success\". In case of errors an error is\n       raised.\n   warning: provides information about a warning generated during parsing or\n       validation. The field is not present if no warning was generated.\n \n \n Example, using specified endpoint URI:\n \n cloudsearch:delete-document(\n anyURI(\"http://doc-movies-h2pc7ftfnsdlqh6pqqawbftrhu.us-east-1.cloudsearch.amazonaws.com\"),\n {\n   \"id\" : \"tt0484562\",\n   \"version\" : 2\n });\n \n \n Example, using specified stored endpoing:\n \n cloudsearch:delete-document(\"movies\",\n {\n   \"id\" : \"tt0484562\",\n   \"version\" : 2\n });\n \n \n", 
        "params" : [ "$options" ]
      } ], 
      "batch-document" : [ {
        "description" : " Adds, replaces or removes one or more documents from the specified Amazon\n CloudSearch domain.\n An add or delete operation is only applied to an existing document if the\n version number specified in the operation is greater than the existing document\n version number.\n If multiple add or delete operations for the same document are specified, the\n operation with the highest version number is applied. If multiple operations in\n a batch specify the same document and version number, the document service\n arbitrarily picks which one to apply.\n The documents to add, replace or delete can be specified through an array with\n the following form:\n \n [\n   {\n     \"type\" : \"add\",\n     \"id\" :   \"tt0484562\",\n     \"version\" : 1,\n     \"lang\" : \"en\",\n     \"fields\" :\n     {\n       \"title\" : \"The Seeker: The Dark Is Rising\",\n       \"genre\" : [\"Adventure\",\"Drama\",\"Fantasy\",\"Thriller\"],\n     }\n   },\n   {\n     \"type\" : \"delete\",\n     \"id\" :   \"tt0484575\",\n     \"version\" : 2\n   }\n ]\n \n \n Specifically, the fields in the request array have the following meaning:\n \n   type: The operation type, \"add\" or \"delete\".\n   id: An alphanumeric string. Allowed characters are: a-z, 0-9, and _.\n       Document IDs cannot begin with an underscore. The max length is 128\n       characters.\n   version: Any non-negative number less than 2^32.\n   lang: An ISO-639-1 two-letter language code.\n   fields: An object containing one or more fields. Each field specifies\n       a field within the document being added. Field names must begin with a\n       lowercase letter and can contain the following characters: a-z, 0-9,\n       and _. Field names must be at least 3 and no more than 64 characters.\n       The names \"body\", \"docid\", and \"text_relevance\" are reserved names and\n       cannot be used as field names. To specify multiple values for a field,\n       you can specify an array of values instead of a single value.\n \n \n The response body lists any warning that was generated.\n \n {\n   \"status\" : \"success\",\n   \"adds\" : 1,\n   \"deletes: 1,\n   \"warning\" :\n   [\n     {\"message\" : \"Warning message.\"}\n   ]\n }\n \n \n Specifically, the fields in the response object have the following meaning:\n \n   status: the result status, which is either success or error.\n   adds: the number of add document operations that were performed.\n   deletes: the number of delete document operations that were performed.\n   warning: provides information about a warning generated during parsing\n       or validation. The field is not present if no warning was generated.\n \n \n Example, using specified endpoint URI:\n \n cloudsearch:batch-document(\n anyURI(\"http://doc-movies-h2pc7ftfnsdlqh6pqqawbftrhu.us-east-1.cloudsearch.amazonaws.com\"),\n [\n   {\n     \"type\" : \"add\",\n     \"id\" :   \"tt0484562\",\n     \"version\" : 1,\n     \"lang\" : \"en\",\n     \"fields\" :\n     {\n       \"title\" : \"The Seeker: The Dark Is Rising\",\n       \"genre\" : [\"Adventure\",\"Drama\",\"Fantasy\",\"Thriller\"],\n     }\n   },\n   {\n     \"type\" : \"delete\",\n     \"id\" :   \"tt0484575\",\n     \"version\" : 2\n   }\n ]);\n \n \n Example, using specified endpoint URI:\n \n cloudsearch:batch-document(\"movies\",\n [\n   {\n     \"type\" : \"add\",\n     \"id\" :   \"tt0484562\",\n     \"version\" : 1,\n     \"lang\" : \"en\",\n     \"fields\" :\n     {\n       \"title\" : \"The Seeker: The Dark Is Rising\",\n       \"genre\" : [\"Adventure\",\"Drama\",\"Fantasy\",\"Thriller\"],\n     }\n   },\n   {\n     \"type\" : \"delete\",\n     \"id\" :   \"tt0484575\",\n     \"version\" : 2\n   }\n ]);\n \n \n", 
        "params" : [ "$endpoint", "$options" ]
      }, {
        "description" : " Adds, replaces or removes one or more documents from the default Amazon\n CloudSearch domain.\n An add or delete operation is only applied to an existing document if the\n version number specified in the operation is greater than the existing document\n version number.\n If multiple add or delete operations for the same document are specified, the\n operation with the highest version number is applied. If multiple operations in\n a batch specify the same document and version number, the document service\n arbitrarily picks which one to apply.\n The documents to add, replace or delete can be specified through an array with\n the following form:\n \n [\n   {\n     \"type\" : \"add\",\n     \"id\" :   \"tt0484562\",\n     \"version\" : 1,\n     \"lang\" : \"en\",\n     \"fields\" :\n     {\n       \"title\" : \"The Seeker: The Dark Is Rising\",\n       \"genre\" : [\"Adventure\",\"Drama\",\"Fantasy\",\"Thriller\"],\n     }\n   },\n   {\n     \"type\" : \"delete\",\n     \"id\" :   \"tt0484575\",\n     \"version\" : 2\n   }\n ]\n \n \n Specifically, the fields in the request array have the following meaning:\n \n   type: The operation type, \"add\" or \"delete\".\n   id: An alphanumeric string. Allowed characters are: a-z, 0-9, and _.\n       Document IDs cannot begin with an underscore. The max length is 128\n       characters.\n   version: Any non-negative number less than 2^32.\n   lang: An ISO-639-1 two-letter language code.\n   fields: An object containing one or more fields. Each field specifies\n       a field within the document being added. Field names must begin with a\n       lowercase letter and can contain the following characters: a-z, 0-9,\n       and _. Field names must be at least 3 and no more than 64 characters.\n       The names \"body\", \"docid\", and \"text_relevance\" are reserved names and\n       cannot be used as field names. To specify multiple values for a field,\n       you can specify an array of values instead of a single value.\n \n \n The response body lists any warning that was generated.\n \n {\n   \"status\" : \"success\",\n   \"adds\" : 1,\n   \"deletes: 1,\n   \"warning\" :\n   [\n     {\"message\" : \"Warning message.\"}\n   ]\n }\n \n \n Specifically, the fields in the response object have the following meaning:\n \n   status: the result status, which is either success or error.\n   adds: the number of add document operations that were performed.\n   deletes: the number of delete document operations that were performed.\n   warning: provides information about a warning generated during parsing\n       or validation. The field is not present if no warning was generated.\n \n \n Example, using specified endpoint URI:\n \n cloudsearch:batch-document(\n anyURI(\"http://doc-movies-h2pc7ftfnsdlqh6pqqawbftrhu.us-east-1.cloudsearch.amazonaws.com\"),\n [\n   {\n     \"type\" : \"add\",\n     \"id\" :   \"tt0484562\",\n     \"version\" : 1,\n     \"lang\" : \"en\",\n     \"fields\" :\n     {\n       \"title\" : \"The Seeker: The Dark Is Rising\",\n       \"genre\" : [\"Adventure\",\"Drama\",\"Fantasy\",\"Thriller\"],\n     }\n   },\n   {\n     \"type\" : \"delete\",\n     \"id\" :   \"tt0484575\",\n     \"version\" : 2\n   }\n ]);\n \n \n Example, using specified endpoint URI:\n \n cloudsearch:batch-document(\"movies\",\n [\n   {\n     \"type\" : \"add\",\n     \"id\" :   \"tt0484562\",\n     \"version\" : 1,\n     \"lang\" : \"en\",\n     \"fields\" :\n     {\n       \"title\" : \"The Seeker: The Dark Is Rising\",\n       \"genre\" : [\"Adventure\",\"Drama\",\"Fantasy\",\"Thriller\"],\n     }\n   },\n   {\n     \"type\" : \"delete\",\n     \"id\" :   \"tt0484575\",\n     \"version\" : 2\n   }\n ]);\n \n \n", 
        "params" : [ "$options" ]
      } ], 
      "search" : [ {
        "description" : " Searches the documents in the default Amazon CloudSearch domain.\n This function is declared as deterministic and should be used whenever result\n caching is acceptable.\n The format of the search options object and\n of the search results object is documented in\n the module introduction.\n Example:\n \n cloudsearch:search({\"q\" : \"star+wars\", \"return-fields\" : \"title\"})\n \n \n Example returned object:\n \n {\n   \"rank\" : \"-text_relevance\",\n   \"match-expr\" : \"(label 'star wars')\",\n   \"hits\" :\n   {\n     \"found\" : 2,\n     \"start\" : 0,\n     \"hit\" :\n     [\n       {\n         \"id\" : \"tt1185834\",\n         \"data\" :\n         {\n           \"actor\" : [\"Abercrombie, Ian\",\"Baker, Dee\",\"Burton, Corey\"],\n           \"title\" : [\"Star Wars: The Clone Wars\"]\n         }\n       },\n       {\n         \"id\" :\"tt0121766\",\n         \"data\" :\n         {\n           \"actor\" : [\"Bai, Ling\",\"Bryant, Gene\",\"Castle-Hughes, Keisha\"],\n           \"title\" : [\"Star Wars: Episode III - Revenge of the Sith\"]\n         }\n       }\n     ]\n   },\n   \"info\" :\n   {\n     \"rid\" : \"b7c167f6c2da6d93531b9a7b314ad030b3a74803b4b7797edb905ba5a6a08\",\n     \"time-ms\" : 2,\n     \"cpu-time-ms\" : 0\n   }\n }\n \n \n", 
        "params" : [ "$options" ]
      }, {
        "description" : " Searches the documents in the specified Amazon CloudSearch domain.\n This function is declared as deterministic and should be used whenever result\n caching is acceptable.\n The format of the search options object and\n of the search results object is documented in\n the module introduction.\n The following examples performs a simple text search for all documents\n containing both the word \"star\" and \"trek\" and returns the matching document\n title field.\n Example, using specified endpoint URI:\n \n cloudsearch:search(\n anyURI(\"http://doc-movies-h2pc7ftfnsdlqh6pqqawbftrhu.us-east-1.cloudsearch.amazonaws.com\"),\n {\"q\" : \"star+wars\", \"return-fields\" : \"title\"})\n \n \n Example, using a stored endpoint:\n \n cloudsearch:search(\"movies\",\n {\"q\" : \"star+wars\", \"return-fields\" : \"title\"})\n \n \n", 
        "params" : [ "$endpoint", "$options" ]
      } ], 
      "search-nondeterministic" : [ {
        "description" : " Searches the documents in the default Amazon CloudSearch domain.\n This function has the same semantics as search#1,\n but is declared as being non deterministic and thus should only be used when\n result caching is not desired.\n", 
        "params" : [ "$options" ]
      }, {
        "description" : " Searches the documents in the specified Amazon CloudSearch domain.\n This function has the same semantics as search#2,\n but is declared as being non deterministic and thus should only be used when\n result caching is not desired.\n", 
        "params" : [ "$endpoint", "$options" ]
      } ], 
      "add-document-impl" : [ {
        "description" : "", 
        "params" : [ "$endpoint", "$options" ]
      } ], 
      "delete-document-impl" : [ {
        "description" : "", 
        "params" : [ "$endpoint", "$options" ]
      } ], 
      "batch-document-impl" : [ {
        "description" : "", 
        "params" : [ "$endpoint", "$options" ]
      } ], 
      "search-request" : [ {
        "description" : "", 
        "params" : [ "$endpoint", "$options" ]
      } ], 
      "query-arguments" : [ {
        "description" : "", 
        "params" : [ "$options" ]
      } ], 
      "send-request" : [ {
        "description" : "", 
        "params" : [ "$request" ]
      } ], 
      "send-nondeterministic-request" : [ {
        "description" : "", 
        "params" : [ "$request" ]
      } ], 
      "send-deterministic-request" : [ {
        "description" : "", 
        "params" : [ "$request" ]
      } ], 
      "handle-response" : [ {
        "description" : "", 
        "params" : [ "$response" ]
      } ], 
      "search-error-messages" : [ {
        "description" : "", 
        "params" : [ "$response" ]
      } ], 
      "document-request" : [ {
        "description" : "", 
        "params" : [ "$request" ]
      } ], 
      "document-error-messages" : [ {
        "description" : "", 
        "params" : [ "$response" ]
      } ], 
      "integer-field" : [ {
        "description" : "", 
        "params" : [ "$obj", "$field-name" ]
      } ], 
      "string-field" : [ {
        "description" : "", 
        "params" : [ "$obj", "$field-name" ]
      } ], 
      "object-field" : [ {
        "description" : "", 
        "params" : [ "$obj", "$field-name" ]
      } ], 
      "endpoint" : [ {
        "description" : "", 
        "params" : [ "$endpoint", "$kind" ]
      }, {
        "description" : "", 
        "params" : [ "$kind" ]
      } ], 
      "validate-endpoint" : [ {
        "description" : "", 
        "params" : [ "$endpoint", "$kind" ]
      } ]
    }
  }, 
  "http://www.28msec.com/modules/collections" : {
    "description" : " This module provides functions to work with collections. For example,\n it contains functions to retrieve the content of a collection or the\n names of all collections.\n The module is always imported so you don't need to import it explicitly.\n Also, you don't need to fully qualify a function to invoke it.\n", 
    "functions" : {
      "collection" : [ {
        "description" : " The collection function returns the sequence of items that belong\n to the collection identified by the given name.\n Please note that the order of the items returned is not deterministic,\n i.e. it might change between invocations. You can use\n db:collection($name, 0) to get a deterministic order.\n", 
        "params" : [ "$name" ]
      }, {
        "description" : " The collection function returns the sequence of items that belong to\n the collection identified\n by the given name. The skip parameter allows to (efficiently) skip\n a given number of items.\n Note that the collections are generally unordered. However, there\n is an implicit deterministic ordering (i.e. sorting by the _id field\n in MongoDB) that is used by this function. This ordering is not present\n for the db:collection#1 function. In order to return items with\n a stable ordering, db:collection($name, 0) can be used.\n", 
        "params" : [ "$name", "$skip" ]
      }, {
        "description" : " The collection function returns the sequence of items that belong to\n the collection identified\n by the given name. The start parameter is a reference and determines\n the first item to return. The skip parameter allows to (efficiently) skip\n a given number of items starting at the item referenced by $start.\n The start parameter is useful for efficiently implementing pagination.\n Note that the collections are generally unordered. However, there\n is an implicit deterministic ordering (i.e. sorting by the _id field\n in MongoDB) that is used by this function. This ordering is not present\n for the db:collection#1 function. In order to return items with\n a stable ordering, db:collection($name, $start, 0) can be used.\n Example:\n \n import module namespace ref = \"http://zorba.io/modules/reference\";\n let $ref := ref:reference(db:collection(\"test\", 1)[1])\n return\n   db:collection(\"test\", $ref, 1)\n \n", 
        "params" : [ "$name", "$start", "$skip" ]
      } ], 
      "insert" : [ {
        "description" : " The insert function is an updating function that inserts copies of the given\n items into a collection.\n", 
        "params" : [ "$name", "$content" ]
      } ], 
      "apply-insert" : [ {
        "description" : " This function does the same as the insert function and it immediately applies\n the resulting pending updates and returns the items that have been inserted.\n Note that each item in the content sequence is copied before insertion. This\n function provides an efficient way to retrieve the actual copies that have\n been inserted.\n", 
        "params" : [ "$name", "$content" ]
      } ], 
      "delete" : [ {
        "description" : " The delete function is an updating function that deletes zero or more items\n (JSON objects, JSON arrays, or XML nodes) from a collection.\n Please note that the all of the items belong to the same collection\n (zerr:ZDDY0011).\n", 
        "params" : [ "$target" ]
      } ], 
      "edit" : [ {
        "description" : " The edit function is an updating function that edits the first supplied\n item so as to make it look exactly like a copy of the second supplied item,\n while retaining its original identity.\n", 
        "params" : [ "$target", "$content" ]
      } ], 
      "truncate" : [ {
        "description" : " The truncate function is an updating function that deletes the\n entire content of a given collection.\n Please note that applying this function can not be undone in case\n an error happens during the application of the containing PUL.\n", 
        "params" : [ "$name" ]
      } ], 
      "collection-name" : [ {
        "description" : " The collection-name function returns the name of the containing collection\n of the given item.\n", 
        "params" : [ "$o" ]
      } ], 
      "create" : [ {
        "description" : " The create function is an updating function that creates\n a new collection with the given name.\n It is not possible to create collections that start with\n \"system.\" or \"_28\" (zerr:ZDDY1000).\n Collections are identified by a name (string). Names are not allowed to\n contain the $ sign or exceed the length of 70 characters.\n This is consistent with the restrictions for names of collections in MongoDB.\n", 
        "params" : [ "$name" ]
      }, {
        "description" : " The create function is an updating function which creates\n a new collection with the given name. Moreover, it adds copies\n of the sequence $content to the new collection.\n It is not possible to create collections that start with\n \"system.\" or \"_28\" (zerr:ZDDY1000).\n Collections are identified by a name (string). Names are not allowed to\n contain the $ sign or exceed the length of 70 characters.\n This is consistent with the restrictions for names of collections in MongoDB.\n", 
        "params" : [ "$name", "$content" ]
      } ], 
      "drop" : [ {
        "description" : "", 
        "params" : [ "$name" ]
      } ], 
      "is-available-collection" : [ {
        "description" : " Determine if the collection with the given name exists.\n", 
        "params" : [ "$name" ]
      } ], 
      "available-collections" : [ {
        "description" : " Return the names of all existing collections.\n", 
        "params" : [  ]
      } ], 
      "lookup" : [ {
        "description" : "", 
        "params" : [ "$index-name", "$key" ]
      }, {
        "description" : "", 
        "params" : [ "$index-name", "$keys", "$skip" ]
      } ], 
      "index-keys" : [ {
        "description" : "", 
        "params" : [ "$index-name" ]
      } ], 
      "refresh" : [ {
        "description" : "", 
        "params" : [ "$index-name" ]
      } ]
    }
  }, 
  "http://www.28msec.com/modules/couchbase" : {
    "description" : " This module provides functionality to interact with the\n Couchbase NoSQL database.\n The module is built using the libcouchbase 2.0 C client library and\n exposes most of its functionality in JSONiq.\n Beyond just allowing for basic key-value store operations (e.g.\n put-/get-text or put-/get-binary, this module also allows to work\n with Couchbase views in order to allow for complex JSON query\n operations.\n", 
    "functions" : {
      "connect" : [ {
        "description" : " Connect to the Couchbase server.\n The function returns an opaque URI that represents the connection.\n This URI has to be passed to other functions of this module that require\n the $conn parameter as a first argument.\n Example:\n \n $conn := cb:connect(\"192.168.1.56:8091\", (), (), \"default\");\n \n", 
        "params" : [ "$host", "$username", "$password", "$bucket" ]
      }, {
        "description" : " Connect to the Couchbase server.\n The input to the function is an object that contains the connection\n information. Specifically, it allows for the following options:\n \n   host: the endpoint of the Couchbase server (mandatory)\n   user: the user used for connecting (optional)\n   password: the password used for connecting (optional)\n   bucket: name of an existing bucket (mandatory)\n \n Example:\n \n $conn := cb:connect({\n   \"host\" : \"192.168.1.56:8091\",\n   \"username\" : (),\n   \"password\" : (),\n   \"bucket\" : \"default\"\n });\n \n The function returns an opaque URI that represents the connection.\n This URI has to be passed to other functions of this module that require\n the $conn parameter as a first argument.\n", 
        "params" : [ "$options" ]
      } ], 
      "get-text" : [ {
        "description" : " Retrieve the values matching the given string keys, as string.\n Example:\n \n $result := cb:get-text($conn, \"35040\");\n \n", 
        "params" : [ "$conn", "$key" ]
      }, {
        "description" : " Retrieve the values matching the given string keys, as string.\n In addition, the function allows to specify several options:\n \n   expiration-time: integer value for refreshing the\n        expiration time in seconds\n       (default 0, which means values are kept indefinitely)\n   encoding: string name of the encoding of the\n        returned string (default UTF-8)\n \n Example:\n \n $result := cb:get-text($conn, \"35040\", { \"encoding\" : \"ASCII\" } );\n \n", 
        "params" : [ "$conn", "$key", "$options" ]
      } ], 
      "get-binary" : [ {
        "description" : " Retrieve the values matching the given string keys, as base64Binary.\n Example:\n \n $result := cb:get-binary($conn, \"image\");\n \n", 
        "params" : [ "$conn", "$key" ]
      }, {
        "description" : " Retrieve the values matching the given string keys, as base64Binary.\n In addition, the function allows to specify several options:\n \n   expiration-time: integer value for refreshing the\n        expiration time in seconds\n       (default 0, which means values are kept indefinitely)\n \n Example:\n \n $result := cb:get-binary($conn, \"image\",{ \"expiration-time\" : 60 * 60 });\n \n", 
        "params" : [ "$conn", "$key", "$options" ]
      } ], 
      "remove" : [ {
        "description" : " Remove the values matching the given string keys.\n Example:\n \n cb:remove($conn, \"35040\");\n \n", 
        "params" : [ "$conn", "$key" ]
      } ], 
      "put-text" : [ {
        "description" : " Store string values along with their string keys.\n The values are stored with the UTF-8 encoding and a default\n expiration time 0.\n Example:\n \n cb:put-text($conn, \"35040\", fn:serialize({\n                      \"city\" : \"CALERA\",\n                      \"loc\" : [ -86.755987, 33.1098 ],\n                      \"pop\" : 4675,\n                      \"state\" : \"AL\",\n                      \"_id\" : \"35040\"\n                    }));\n \n", 
        "params" : [ "$conn", "$key", "$value" ]
      }, {
        "description" : " Store string values along with their string keys.\n In addition, the function allows to specify several options:\n \n   expiration-time: integer value for refreshing the\n        expiration time in seconds\n       (default 0, which means values are kept indefinitely)\n   encoding: string name of the encoding of the\n        returned string (default UTF-8)\n   operation: add/replace/set/append/prepend type\n        of operation\n   wait: persist/false if the system should wait for\n        persistence of the keys\n \n Example:\n \n cb:put-text($conn, \"35040\", fn:serialize({\n                      \"city\" : \"CALERA\",\n                      \"loc\" : [ -86.755987, 33.1098 ],\n                      \"pop\" : 4675,\n                      \"state\" : \"AL\",\n                      \"_id\" : \"35040\"\n                    }), { \"expiration-time\" : 60 * 60 * 24 });\n \n", 
        "params" : [ "$conn", "$key", "$value", "$options" ]
      } ], 
      "put-binary" : [ {
        "description" : " Store base64binary values along with their string keys.\n Example:\n \n cb:put-binary($conn, \"image\",\n   http:get-binary(\"http://localhost:8091/images/couchbase_logo.png\")[2]);\n \n", 
        "params" : [ "$conn", "$key", "$value" ]
      }, {
        "description" : " Store base64Binary values along with their string keys.\n In addition, the function allows to specify several options:\n \n   expiration-time: integer value for refreshing the\n        expiration time in seconds\n       (default 0, which means values are kept indefinitely)\n   operation: add/replace/set/append/prepend type of\n       operation\n   wait: persist/false if the system should wait for\n        persistence of the keys\n \n Example:\n \n cb:put-binary($conn, \"image\",\n   http:get-binary(\"http://localhost:8091/images/couchbase_logo.png\")[2],\n   { \"expiration-time\" : 60 * 60 * 24 });\n \n", 
        "params" : [ "$conn", "$key", "$value", "$options" ]
      } ], 
      "flush" : [ {
        "description" : " Remove all values and their keys.\n Example:\n \n cb:flush($conn);\n \n", 
        "params" : [ "$conn" ]
      } ], 
      "touch" : [ {
        "description" : " Refresh the expiration time of the given string keys.\n Example:\n \n cb:touch($conn, \"35040\", 60 * 60 * 24);\n \n", 
        "params" : [ "$conn", "$key", "$exp-time" ]
      } ], 
      "view" : [ {
        "description" : " Retrieve the content of existing views. \n Example:\n \n $results := cb:view($conn, \"_design/zip/_view/bystate\");\n \n", 
        "params" : [ "$conn", "$path" ]
      }, {
        "description" : " Retrieve the content of existing views.\n Example:\n \n $results := cb:view($conn, \"_design/zip/_view/bystate\", { \"limit\": 100 });\n \n In addition, the function allows to specify several options:\n \n   encoding: string name of the encoding of the\n        returned string (default UTF-8)\n   stale: if the system should wait for persistence of the keys\n    \n      ok the view is not updated\n      false the view is updated before the function view is\n      executed, this options needs the key to be on disk before the call of\n      the function.\n      update_after the view is updated after the call\n      of the function.\n    \n   limit: integer how many rows qill be shown\n         (default all)\n \n", 
        "params" : [ "$conn", "$path", "$options" ]
      } ], 
      "create-view" : [ {
        "description" : " Create a document and views.\n If the document already exists, it is replaced.\n A document can hold several views that must be specified in the same call.\n Example:\n \n $views := cb:create-view($conn, \"zip\", (\"bystate\", \"bycity\"));\n \n", 
        "params" : [ "$conn", "$doc-name", "$view-names" ]
      }, {
        "description" : " Create a document and views.\n If the document already exists, it is replaced.\n A document can hold several views that must be specified in the same call.\n In addition, the function allows to specify several options:\n \n   key: string name of the value that will be used\n        as key in the view\n   values: string/array name of the value(s) that\n        will be used as values in the view\n   function: javascript function the map function\n        that will create the connection between key and value.\n        If function is specified, the key and\n        values options are ignored.\n \n Example:\n \n $views := cb:create-view($conn, \"zip\", \"bystate\", { \"key\": \"doc.state\", \"values\" : [\"doc.pop\", \"doc.city\"] });\n \n \n $views := cb:create-view($conn, \"zip\", \"bycity\", { \"function\": \"function(doc, meta) {  emit(doc.state, null); }\"});\n \n", 
        "params" : [ "$conn", "$doc-name", "$view-names", "$options" ]
      } ], 
      "delete-view" : [ {
        "description" : " Delete a document and its views.\n If the document doesn't exists, the function does nothing.\n All the views hold in the document are deleted.\n Example:\n \n cb:delete-view($conn, \"zip\");\n \n", 
        "params" : [ "$conn", "$doc" ]
      } ]
    }
  }, 
  "http://www.28msec.com/modules/credentials" : {
    "description" : " This module provides functionality for storing credentials\n using an AES-encrypted file the project configuration folder.\n Specifically, the credentials will be stored in the credentials\n file in the config folder in the project root folder.\n The credentials file is encrypted using 256bit AES encryption. The AES\n key is computed using the project seed. If the project seed is changed the\n credential store is re-encrypted transparently.\n Each credential has an associated name and category.\n Credentials can be retrieved specifying their name and category.\n For each category, it is possible to specify the default credentials.\n A category default credentials can then be easily retrieved. \n The name of credentials and categories can contain lowercase or\n uppercase letters, digits, and the following special characters: \"_\" , \"-\",\n \".\". Additionally it must not be empty and must start with a lowercase\n or uppercase letter.\n", 
    "functions" : {
      "add-credentials" : [ {
        "description" : " Adds the given credentials to the credential store.\n The credentials are not set as default.\n If credentials  with the given name and category are already present an\n error is raised.\n Example:\n \n import module namespace credentials = \"http://www.28msec.com/modules/credentials\";\n credentials:add-credentials(\"S3\", \"DataBucket\", { ... });\n \n \n", 
        "params" : [ "$category", "$name", "$credentials" ]
      }, {
        "description" : " Adds the given credentials to the credential store,\n either as default or not.\n If credentials  with the given name and category are already present an\n error is raised.\n Example:\n \n import module namespace credentials = \"http://www.28msec.com/modules/credentials\";\n credentials:add-credentials(\"S3\", \"DataBucket\", { ... }, true);\n \n \n", 
        "params" : [ "$category", "$name", "$credentials", "$default" ]
      } ], 
      "remove-credentials" : [ {
        "description" : " Removes the specified credentials from the credential store.\n If no credentials with the given name and category are present\n in the category store an error is raised.\n Example:\n \n import module namespace credentials = \"http://www.28msec.com/modules/credentials\";\n credentials:remove-credentials(\"S3\", \"DataBucket\");\n \n \n", 
        "params" : [ "$category", "$name" ]
      } ], 
      "make-default" : [ {
        "description" : " Makes the specified credentials the default for their category.\n It is not allowed to call this method on credentials in the \"MongoDB\" category.\n If the specified credentials are not present an error is raised.\n Example:\n \n import module namespace credentials = \"http://www.28msec.com/modules/credentials\";\n credentials:make-default(\"S3\", \"DataBucket\");\n \n \n", 
        "params" : [ "$category", "$name" ]
      } ], 
      "update-credentials" : [ {
        "description" : " Updates the specified credentials in the credential store.\n It is possible to specify whether the credentials should become or stop being the\n default credentials in their category, rename the credentials or change the credentials\n object. These three changes are specified by means of the $new-default, $new-name and\n $new-credentials parameter. If the corresponding parameter is the empty sequence the\n corresponding property will not be changed.\n For example the following query renames the \"DataBucket\" credentials in the \"S3\"\n category as \"Bucket\":\n \n import module namespace credentials = \"http://www.28msec.com/modules/credentials\";\n credentials:update-credentials(\"S3\", \"DataBucket\", (), \"Bucket\", () );\n \n \n", 
        "params" : [ "$category", "$name", "$new-default", "$new-name", "$new-credentials" ]
      } ], 
      "credentials" : [ {
        "description" : " Returns the given category's default credentials, if any.\n If no default credentials are present for the given category\n the empty sequence is returned.\n Example:\n \n import module namespace credentials = \"http://www.28msec.com/modules/credentials\";\n credentials:credentials(\"S3\")\n \n \n", 
        "params" : [ "$category" ]
      }, {
        "description" : " Returns the specified credentials, if present in the credential store.\n If the specified credentials are not present the empty sequence is returned.\n Example:\n \n import module namespace credentials = \"http://www.28msec.com/modules/credentials\";\n credentials:credentials(\"S3\", \"DataBucket\")\n \n \n", 
        "params" : [ "$category", "$name" ]
      } ], 
      "list-credentials" : [ {
        "description" : " Lists all the credentials in the credentials store.\n If no credentials are stored the empty sequence is returned.\n Example:\n \n import module namespace credentials = \"http://www.28msec.com/modules/credentials\";\n credentials:list-credentials()\n \n \n The returned array contains one object for each credential. Each object has\n the following structure:\n \n {\n   \"category\": \"category-name\",\n   \"name\": \"credential-name\",\n   \"default\": true\n }\n \n Specifically the fields of each object have the following meaning:\n \n  category: the name of the credentials category (string)\n  name: the name of the credentials (string)\n  default: whether the credentials are the default credentials in\n      their category (boolean)\n \n \n", 
        "params" : [  ]
      } ], 
      "list-categories" : [ {
        "description" : " Lists all the credentials categories in the credentials store.\n If no credentials are stored the empty sequence is returned.\n Example:\n \n import module namespace credentials = \"http://www.28msec.com/modules/credentials\";\n credentials:list-categories()\n \n \n The returned array contains the name of each distinct credential category.\n", 
        "params" : [  ]
      } ], 
      "list-category-credentials" : [ {
        "description" : " Lists all the credentials of the specified category in the\n credentials store.\n If no credentials for the given category are stored the empty\n sequence is returned.\n Example:\n \n import module namespace credentials = \"http://www.28msec.com/modules/credentials\";\n credentials:list-category-credentials(\"category-name\")\n \n \n The returned array contains one object for each credential. Each object has\n the following structure:\n \n {\n   \"category\": \"category-name\",\n   \"name\": \"credential-name\",\n   \"default\": true\n }\n \n Specifically the fields of each object have the following meaning:\n \n  category: the name of the credentials category (string)\n  name: the name of the credentials (string)\n  default: whether the credentials are the default credentials in\n      their category (boolean)\n \n \n", 
        "params" : [ "$category-name" ]
      } ], 
      "validate-category-name" : [ {
        "description" : "", 
        "params" : [ "$category-name" ]
      } ], 
      "validate-credentials-name" : [ {
        "description" : "", 
        "params" : [ "$credentials-name" ]
      } ], 
      "mandatory-string-field" : [ {
        "description" : "", 
        "params" : [ "$object", "$field" ]
      } ], 
      "optional-string-field" : [ {
        "description" : "", 
        "params" : [ "$object", "$field" ]
      } ], 
      "optional-boolean-field" : [ {
        "description" : "", 
        "params" : [ "$object", "$field" ]
      } ], 
      "check-mongo-result" : [ {
        "description" : "", 
        "params" : [ "$mongo-result" ]
      } ], 
      "validate-credentials" : [ {
        "description" : "", 
        "params" : [ "$category-name", "$credentials" ]
      } ], 
      "validate-mongodb-credentials" : [ {
        "description" : "", 
        "params" : [ "$credentials" ]
      } ], 
      "read-credentials-file" : [ {
        "description" : "", 
        "params" : [  ]
      } ], 
      "write-credentials-file" : [ {
        "description" : "", 
        "params" : [ "$credentials" ]
      } ], 
      "read-credentials-file-impl" : [ {
        "description" : "", 
        "params" : [  ]
      } ], 
      "write-credentials-file-impl" : [ {
        "description" : "", 
        "params" : [ "$credentials" ]
      } ]
    }
  }, 
  "http://www.28msec.com/modules/datetime" : {
    "description" : " This modules contains function that operate on items of type date, time,\n dateTime, and duration.\n The module is always imported so you don't need to import it explicitly.\n Also, you don't need to fully qualify a function to invoke it.\n", 
    "functions" : {
      "adjust-date-to-timezone" : [ {
        "description" : " Adjusts a date value to the implicit timezone.\n", 
        "params" : [ "$arg" ]
      }, {
        "description" : " Adjusts a date value to a specific timezone, or to no timezone at all.\n", 
        "params" : [ "$arg", "$timezone" ]
      } ], 
      "adjust-dateTime-to-timezone" : [ {
        "description" : " Adjusts a dateTime value to the implicit timezone.\n", 
        "params" : [ "$arg" ]
      }, {
        "description" : " Adjusts a dateTime value to the specified timezone, or to no timezone at all.\n", 
        "params" : [ "$arg", "$timezone" ]
      } ], 
      "adjust-time-to-timezone" : [ {
        "description" : " Adjusts a time value to an implicit timezone.\n", 
        "params" : [ "$arg" ]
      }, {
        "description" : " Adjusts a time value to a specific timezone, or to no timezone at all.\n", 
        "params" : [ "$arg", "$timezone" ]
      } ], 
      "dateTime" : [ {
        "description" : " Returns a dateTime value created by combining a date and a time.\n", 
        "params" : [ "$arg1", "$arg2" ]
      } ], 
      "day-from-date" : [ {
        "description" : " Returns the day component of a date.\n", 
        "params" : [ "$arg" ]
      } ], 
      "day-from-dateTime" : [ {
        "description" : " Returns the day component of a dateTime.\n", 
        "params" : [ "$arg" ]
      } ], 
      "days-from-duration" : [ {
        "description" : " Returns the number of days in a duration.\n", 
        "params" : [ "$arg" ]
      } ], 
      "format-date" : [ {
        "description" : " Returns a string containing a date value formatted for display.\n", 
        "params" : [ "$value", "$picture", "$language", "$calendar", "$place" ]
      }, {
        "description" : " Returns a string containing a date value formatted for display.\n", 
        "params" : [ "$value", "$picture" ]
      } ], 
      "format-dateTime" : [ {
        "description" : " Returns a string containing a dateTime value formatted for display.\n", 
        "params" : [ "$value", "$picture", "$language", "$calendar", "$place" ]
      }, {
        "description" : " Returns a string containing a dateTime value formatted for display.\n", 
        "params" : [ "$value", "$picture" ]
      } ], 
      "minutes-from-dateTime" : [ {
        "description" : " Returns the minute component of a dateTime.\n", 
        "params" : [ "$arg" ]
      } ], 
      "minutes-from-duration" : [ {
        "description" : " Returns the number of minutes in a duration.\n", 
        "params" : [ "$arg" ]
      } ], 
      "minutes-from-time" : [ {
        "description" : " Returns the minutes component of a time.\n", 
        "params" : [ "$arg" ]
      } ], 
      "month-from-date" : [ {
        "description" : " Returns the month component of a date.\n", 
        "params" : [ "$arg" ]
      } ], 
      "month-from-dateTime" : [ {
        "description" : " Returns the month component of a dateTime.\n", 
        "params" : [ "$arg" ]
      } ], 
      "months-from-duration" : [ {
        "description" : " Returns the number of months in a duration.\n", 
        "params" : [ "$arg" ]
      } ], 
      "hours-from-duration" : [ {
        "description" : " Returns the number of hours in a duration.\n", 
        "params" : [ "$arg" ]
      } ], 
      "hours-from-time" : [ {
        "description" : " Returns the hours component of a time.\n", 
        "params" : [ "$arg" ]
      } ], 
      "hours-from-dateTime" : [ {
        "description" : " Returns the hours component of a dateTime.\n", 
        "params" : [ "$arg" ]
      } ], 
      "seconds-from-dateTime" : [ {
        "description" : " Returns the seconds component of a dateTime.\n", 
        "params" : [ "$arg" ]
      } ], 
      "seconds-from-duration" : [ {
        "description" : " Returns the number of seconds in a duration.\n", 
        "params" : [ "$arg" ]
      } ], 
      "seconds-from-time" : [ {
        "description" : " Returns the seconds component of a time.\n", 
        "params" : [ "$arg" ]
      } ], 
      "timezone-from-date" : [ {
        "description" : " Returns the timezone component of a date.\n", 
        "params" : [ "$arg" ]
      } ], 
      "timezone-from-dateTime" : [ {
        "description" : " Returns the timezone component of a dateTime.\n", 
        "params" : [ "$arg" ]
      } ], 
      "timezone-from-time" : [ {
        "description" : " Returns the timezone component of a time.\n", 
        "params" : [ "$arg" ]
      } ], 
      "year-from-date" : [ {
        "description" : " Returns the year component of a date.\n", 
        "params" : [ "$arg" ]
      } ], 
      "year-from-dateTime" : [ {
        "description" : " Returns the year component of a dateTime.\n", 
        "params" : [ "$arg" ]
      } ], 
      "years-from-duration" : [ {
        "description" : " Returns the number of years in a duration.\n", 
        "params" : [ "$arg" ]
      } ], 
      "implicit-timezone" : [ {
        "description" : " Returns the value of the implicit timezone property set in the platform.\n", 
        "params" : [  ]
      } ], 
      "current-date" : [ {
        "description" : " Returns the current date.\n For a detailed description of the semantics of this function, please see\n current-date\n", 
        "params" : [  ]
      } ], 
      "current-dateTime" : [ {
        "description" : " Returns the current dateTime.\n For a detailed description of the semantics of this function, please see\n current-dateTime\n", 
        "params" : [  ]
      } ], 
      "current-time" : [ {
        "description" : " Returns the current time.\n For a detailed description of the semantics of this function, please see\n current-time\n", 
        "params" : [  ]
      } ]
    }
  }, 
  "http://www.28msec.com/modules/full-text" : {
    "description" : " This module provides an API to full-text functions such as tokenization,\n stemming, or stop word detection. The default language is set to english\n for all functions that don't take an explicit language parameter.\n Notes on stemming\n The stem() functions return the\n stem\n of a word.\n On 28.io,\n the stem of a word itself, however, is not guaranteed to be a word.\n It is best to consider a stem as an opaque byte sequence.\n All that is guaranteed about a stem is that,\n for a given word,\n the stem of that word will always be the same byte sequence.\n Hence,\n you sould never compare the result of one of the stem()\n functions against a non-stemmed string,\n for example:\n \n  if ( ft:stem( \"apples\" ) eq \"apple\" )             ** WRONG **\n \n Instead do:\n \n  if ( ft:stem( \"apples\" ) eq ft:stem( \"apple\" ) )  ** CORRECT **\n \n Notes on the thesaurus\n 28msec uses the\n WordNet lexical database version 3.0,\n In WordNet, the number of \"levels\" that two phrases are apart\n are how many hierarchical meanings apart they are.\n For example,\n \"canary\" is 5 levels away from \"vertebrate\"\n (carary &gt; finch &gt; oscine &gt; passerine &gt; bird &gt; vertebrate).\n \n When using the WordNet implementation,\n 28msec supports all of the relationships (and their abbreviations)\n specified by\n ISO 2788\n and\n ANSI/NISO Z39.19-2005\n with the exceptions of \"HN\" (history note)\n and \"X SN\" (see scope note for).\n These relationships are:\n  \n    \n      Rel.\n      Meaning\n      WordNet Rel.\n    \n    \n      BT\n      broader term\n      hypernym\n    \n    \n      BTG\n      broader term generic\n      hypernym\n    \n    \n      BTI\n      broader term instance\n      instance hypernym\n    \n    \n      BTP\n      broader term partitive\n      part meronym\n    \n    \n      NT\n      narrower term\n      hyponym\n    \n    \n      NTG\n      narrower term generic\n      hyponym\n    \n    \n      NTI\n      narrower term instance\n      instance hyponym\n    \n    \n      NTP\n      narrower term partitive\n      part holonym\n    \n    \n      RT\n      related term\n      also see\n    \n    \n      SN\n      scope note\n      n/a\n    \n    \n      TT\n      top term\n      hypernym\n    \n    \n      UF\n      non-preferred term\n      n/a\n    \n    \n      USE\n      preferred term\n      n/a\n    \n  \n Note that you can specify relationships\n either by their abbreviation\n or their meaning.\n Relationships are case-insensitive.\n In addition to the\n ISO 2788\n and\n ANSI/NISO Z39.19-2005\n relationships,\n 28msec also supports all of the relationships offered by WordNet.\n These relationships are:\n  \n    \n      Relationship\n      Meaning\n    \n    \n      also see\n      \n        A word that is related to another,\n        e.g., for \"varnished\" (furniture)\n        one should also see \"finished.\"\n      \n    \n    \n      antonym\n      \n        A word opposite in meaning to another,\n        e.g., \"light\" is an antonym for \"heavy.\"\n      \n    \n    \n      attribute\n      \n        A noun for which adjectives express values,\n        e.g., \"weight\" is an attribute\n        for which the adjectives \"light\" and \"heavy\"\n        express values.\n      \n    \n    \n      cause\n      \n        A verb that causes another,\n        e.g., \"show\" is a cause of \"see.\"\n      \n    \n    \n      derivationally related form\n      \n        A word that is derived from a root word,\n        e.g., \"metric\" is a derivationally related form of \"meter.\"\n      \n    \n    \n      derived from adjective\n      \n        An adverb that is derived from an adjective,\n        e.g., \"correctly\" is derived from the adjective \"correct.\"\n      \n    \n    \n      entailment\n      \n        A verb that presupposes another,\n        e.g., \"snoring\" entails \"sleeping.\"\n      \n    \n    \n      hypernym\n      \n        A word with a broad meaning that more specific words fall under,\n        e.g., \"meal\" is a hypernym of \"breakfast.\"\n      \n    \n    \n      hyponym\n      \n        A word of more specific meaning than a general term applicable to it,\n        e.g., \"breakfast\" is a hyponym of \"meal.\"\n      \n    \n    \n      instance hypernym\n      \n        A word that denotes a category of some specific instance,\n        e.g., \"author\" is an instance hypernym of \"Asimov.\"\n      \n    \n    \n      instance hyponym\n      \n        A term that donotes a specific instance of some general category,\n        e.g., \"Asimov\" is an instance hyponym of \"author.\"\n      \n    \n    \n      member holonym\n      \n        A word that denotes a collection of individuals,\n        e.g., \"faculty\" is a member holonym of \"professor.\"\n      \n    \n    \n      member meronym\n      \n        A word that denotes a member of a larger group,\n        e.g., a \"person\" is a member meronym of a \"crowd.\"\n      \n    \n    \n      part holonym\n      \n        A word that denotes a larger whole comprised of some part,\n        e.g., \"car\" is a part holonym of \"engine.\"\n      \n    \n    \n      part meronym\n      \n        A word that denotes a part of a larger whole,\n        e.g., an \"engine\" is part meronym of a \"car.\"\n      \n    \n    \n      participle of verb\n      \n        An adjective that is the participle of some verb,\n        e.g., \"breaking\" is the participle of the verb \"break.\"\n      \n    \n    \n      pertainym\n      \n        An adjective that classifies its noun,\n        e.g., \"musical\" is a pertainym in \"musical instrument.\"\n      \n    \n    \n      similar to\n      \n        Similar, though not necessarily interchangeable, adjectives.\n        For example, \"shiny\" is similar to \"bright\",\n        but they have subtle differences.\n      \n    \n    \n      substance holonym\n      \n        A word that denotes a larger whole containing some constituent\n        substance, e.g., \"bread\" is a substance holonym of \"flour.\"\n      \n    \n    \n      substance meronym\n      \n        A word that denotes a constituant substance of some larger whole,\n        e.g., \"flour\" is a substance meronym of \"bread.\"\n      \n    \n    \n      verb group\n      \n        A verb that is a member of a group of similar verbs,\n        e.g., \"live\" is in the verb group\n        of \"dwell\", \"live\", \"inhabit\", etc.\n      \n    \n  \n", 
    "functions" : {
      "is-stem-lang-supported" : [ {
        "description" : " Checks whether the given language is supported for stemming.\n", 
        "params" : [ "$lang" ]
      } ], 
      "is-stop-word" : [ {
        "description" : " Checks whether the given word is a stop-word.\n", 
        "params" : [ "$word", "$lang" ]
      }, {
        "description" : " Checks whether the given word is a stop-word.\n", 
        "params" : [ "$word" ]
      } ], 
      "is-stop-word-lang-supported" : [ {
        "description" : " Checks whether the given language\n is supported for stop words.\n", 
        "params" : [ "$lang" ]
      } ], 
      "is-thesaurus-lang-supported" : [ {
        "description" : " Checks whether the given language\n is supported for look-up using the Wordnet thesaurus.\n", 
        "params" : [ "$lang" ]
      } ], 
      "is-tokenizer-lang-supported" : [ {
        "description" : " Checks whether the given language\n is supported for tokenization.\n", 
        "params" : [ "$lang" ]
      } ], 
      "stem" : [ {
        "description" : " Stems the given word.\n", 
        "params" : [ "$word", "$lang" ]
      }, {
        "description" : " Stems the given word.\n", 
        "params" : [ "$word" ]
      } ], 
      "strip-diacritics" : [ {
        "description" : " Strips all diacritical marks from all characters.\n", 
        "params" : [ "$string" ]
      } ], 
      "thesaurus-lookup" : [ {
        "description" : " Looks-up the given phrase in the Wordnet thesaurus.\n", 
        "params" : [ "$phrase" ]
      }, {
        "description" : " Looks-up the given phrase in a thesaurus.\n", 
        "params" : [ "$phrase", "$relationship" ]
      }, {
        "description" : " Looks-up the given phrase in a thesaurus.\n", 
        "params" : [ "$phrase", "$relationship", "$level-least", "$level-most" ]
      } ], 
      "tokenize" : [ {
        "description" : " Tokenizes the given string.\n", 
        "params" : [ "$string", "$lang" ]
      }, {
        "description" : " Tokenizes the given string.\n", 
        "params" : [ "$string" ]
      } ]
    }
  }, 
  "http://www.28msec.com/modules/http-request" : {
    "description" : " The request module provides functions for accessing\n information contained in the HTTP request used to evaluate the current\n query. For example, the param-names function can be used to\n retrieve all the names of the parameters contained in a request.\n", 
    "functions" : {
      "params" : [ {
        "description" : " Returns an object containg the parameter names and values contained\n in the URL's query string or the body of a POST or PUT\n request.\n The structure of the object for the query string\n \"param1=value1;param2&amp;param2=value2\"\n \n {\n   \"param1\" : \"value1\",\n   \"param2\" : [ \"\", \"value2\" ]\n }\n \n \n Parameters are name-value pairs contained in the query string of the URL\n used to make this request. As defined in RFC 1738, the query string of a\n URL starts with a \"?\" character and ends with the character (if any).\n Additionally, such name-value pairs may be part of the request's body if\n it is a PUT or POST request and the content-type of the request is\n \"application/x-www-form-urlencoded\". Name-value pairs are separated\n using either the \"&amp;\" or the \";\" character.\n In general, the names and the values  are precent-encoded. This function\n does the decoding of the parameters, i.e. it returns the values being\n not percent-encoded.\n Also, the names and the values of each parameter (after being precent-decoded)\n are treated as UTF-8. Please see the http:params#1 function\n for retrieving parameters submitted using a encoding other than UTF-8.\n", 
        "params" : [  ]
      }, {
        "description" : " Returns an object containg the parameter names and values contained\n in the URL's query string or the body of a POST or PUT\n request.\n The structure of the object for the query string\n \"param1=value1;param2&amp;param2=value2\"\n \n {\n   \"param1\" : \"value1\",\n   \"param2\" : [ \"\", \"value2\" ]\n }\n \n \n Parameters are name-value pairs contained in the query string of the URL\n used to make this request. As defined in RFC 1738, the query string of a\n URL starts with a \"?\" character and ends with the character (if any).\n Additionally, such name-value pairs may be part of the request's body if\n it is a PUT or POST request and the content-type of the request is\n \"application/x-www-form-urlencoded\". Name-value pairs are separated\n using either the \"&amp;\" or the \";\" character.\n In general, the names and the values  are precent-encoded. This function\n does the decoding of the parameters, i.e. it returns the values being\n not percent-encoded.\n The name and value of each parameter (after being percent-decoded) are treated\n in the encoding given by the $encoding paramter.\n", 
        "params" : [ "$encoding" ]
      } ], 
      "param-values" : [ {
        "description" : " Returns a sequence of parameter values for the given parameter name\n which are contained in the URL's query string or the body of a POST or PUT\n request.\n Parameters are name-value pairs contained in the query string of the URL\n used to make this request. As defined in RFC 1738, the query string of a\n URL starts with a \"?\" character and ends with the character (if any).\n Additionally, such name-value pairs may be part of the request's body if\n it is a PUT or POST request and the content-type of the request is\n \"application/x-www-form-urlencoded\". Name-value pairs are separated\n using either the \"&amp;\" or the \";\" character.\n In general, the names and the values  are precent-encoded. This function\n does the decoding of the parameters, i.e. it returns the values being\n not percent-encoded.\n Also, the names and the values of each parameter (after being precent-decoded)\n are treated as UTF-8. Please see the http:param-values#3 function\n for retrieving parameters submitted using a encoding other than UTF-8.\n This function returns the empty-sequence if no parameter with the\n given name exists in this request. If you want the function to return\n a default value other than the empty sequence, use the\n http:param-values#2 function.\n A URL could contain the following query string:\n name1=value1&amp;name2=value2;name1=value3&amp;name3.\n name1=value1&amp;name2=value2&amp;name1=value3&amp;name3.\n The name value pairs in this query string are\n \n    name: name1; values: value1 and value3\n    name: name2; value: value2\n    name: name3; value: \n \n \n", 
        "params" : [ "$name" ]
      }, {
        "description" : " Returns a sequence of parameter values for the given parameter name\n which are contained in the URL's query string or the body of a POST or PUT\n request.\n This function is similar to the request:param-values#1 function.\n However, instead of returning the empty-sequence as a default value it returns\n the given default-values sequence if no parameter with the given name is found\n in this request.\n", 
        "params" : [ "$name", "$default-values" ]
      }, {
        "description" : " Returns a sequence of parameter values for the given parameter name\n which are contained in the URL's query string or the body of a POST or PUT\n request.\n This function is similar to the request:param-values#2 function.\n However, the names and values are treated (after precent-decoding) using the\n given encoding supplied as third parameter. For example, parameters might\n be encoded using the ISO-8859-1 encoding.\n", 
        "params" : [ "$name", "$default-values", "$encoding" ]
      } ], 
      "param-names" : [ {
        "description" : " Returns the names of the parameters contained in the current request.\n Parameters are name-value pairs contained in the query string of the URL\n used to make this request. As defined in RFC 1738, the query string of a\n URL starts with a \"?\" character and ends with the character (if any).\n Additionally, such name-value pairs may be part of the request's body if\n it is a PUT or POST request and the content-type of the request is\n \"application/x-www-form-urlencoded\". Name-value pairs are separated\n using either the \"&amp;\" or the \";\" character.\n In general, the names and the values  are precent-encoded. This function\n does the decoding of the parameters, i.e. it returns the values being\n not percent-encoded.\n Also, the names of each parameter (after being precent-decoded) are\n treated as UTF-8. Please see the http:param-names#1 function\n for retrieving parameter names submitted using a encoding other than UTF-8.\n \n", 
        "params" : [  ]
      }, {
        "description" : " Returns the names of the parameters contained in the current request.\n This function is similar to the request:param-names#0 function.\n However, the names are treated (after precent-decoding) using the\n given encoding supplied as parameter. For example, parameters might\n be encoded using the ISO-8859-1 encoding.\n", 
        "params" : [ "$encoding" ]
      } ], 
      "method" : [ {
        "description" : " Returns the name of the HTTP method used to make this request.\n", 
        "params" : [  ]
      } ], 
      "method-post" : [ {
        "description" : " Returns true if the HTTP method of this request is POST.\n", 
        "params" : [  ]
      } ], 
      "method-get" : [ {
        "description" : " Returns true if the HTTP method of this request is GET.\n", 
        "params" : [  ]
      } ], 
      "method-put" : [ {
        "description" : " Returns true if the HTTP method of this request is PUT.\n", 
        "params" : [  ]
      } ], 
      "method-delete" : [ {
        "description" : " Returns true if the HTTP method of this request is DELETE.\n", 
        "params" : [  ]
      } ], 
      "method-head" : [ {
        "description" : " Returns true if the HTTP method of this request is HEAD.\n", 
        "params" : [  ]
      } ], 
      "method-options" : [ {
        "description" : " Returns true if the HTTP method of this request is OPTION.\n", 
        "params" : [  ]
      } ], 
      "user-agent" : [ {
        "description" : " Returns the user agent that made to perform the current request.\n This function returns the value of the User-Agent header\n contained in the current request.\n", 
        "params" : [  ]
      } ], 
      "server-port" : [ {
        "description" : " Returns the sever port to which the client making the current request\n is connected.\n", 
        "params" : [  ]
      } ], 
      "server-name" : [ {
        "description" : " Returns the server name of the server running the application.\n The web server's hostname or IP address.\n", 
        "params" : [  ]
      } ], 
      "remote-port" : [ {
        "description" : " Returns the port of the client to which this request is connected.\n", 
        "params" : [  ]
      } ], 
      "remote-addr" : [ {
        "description" : " Returns the IP address of the client to which this request\n is connected.\n", 
        "params" : [  ]
      } ], 
      "uri" : [ {
        "description" : " Returns the URI that was used to make this request.\n The value returned contains the part of the URL starting\n from the path to the end or the starting of the fragment (i.e.\n the '#' character).\n", 
        "params" : [  ]
      } ], 
      "path" : [ {
        "description" : " Return the path component of the request URI. The path starts after the\n host and ends before the query string starts.\n", 
        "params" : [  ]
      } ], 
      "query" : [ {
        "description" : " Returns the query string that was used to make this request.\n The query string contains the part of the request URL that\n starts with the '?' character to the end or the starting of the\n fragment (i.e. the '#' character).\n", 
        "params" : [  ]
      } ], 
      "content-type" : [ {
        "description" : " Returns the content-type of the data sent with this request.\n Note that the content-type is only set for PUT and POST requests.\n", 
        "params" : [  ]
      } ], 
      "content-length" : [ {
        "description" : " Returns the length of the content in bytes.\n The value returned corresponds to the value of the HTTP\n content-length header. The function returns an empty sequence\n if this header does not exist in the request or its value\n could not be converted to item of type xs:integer.\n", 
        "params" : [  ]
      } ], 
      "text-content" : [ {
        "description" : " Returns the content of the request as string.\n The function returns the content of the request only\n if the content-type refers to a type that can be treated\n as text (e.g. text/* or application/xml). The function raises\n an error if the content cannot be treated as text.\n The text content is interpreted using the encoding/charset\n that is specified in the Content-Type header of the request. If\n no charset is specified, the default ISO-8859-1 is used. If a encoding\n other than the specified or default one should be used, the\n request:text-content#1 function should be used.\n", 
        "params" : [  ]
      }, {
        "description" : " Returns the content of the request as string interpreting\n it with the given encoding.\n The function returns the content of the request only\n if the content-type refers to a type that can be treated\n as text (e.g. text/* or application/xml). The function raises\n an error if the content cannot be treated as text.\n The text content is interpreted using the given encoding/charset.\n That is, the charset specified in the Content-Type header of the request\n is ignored. An error is raised if the given encoding is invalid\n or not supported.\n", 
        "params" : [ "$overwrite-encoding" ]
      } ], 
      "binary-content" : [ {
        "description" : " Returns the content of the request as base64Binary.\n", 
        "params" : [  ]
      } ], 
      "headers" : [ {
        "description" : " Returns an object containing the request's HTTP header names and\n values.\n Header fields are colon-separated name-value pairs, terminated\n by a carriage return (CR) and line feed (LF) character sequence. The\n names and values of each header are allowed to consist of US-ASCII\n characters only.\n The structure of the object is as shown in the following example:\n \n \n \n All headers having a name that starts with SAUSALITO_ are reserved\n and will not be returned by this function.\n", 
        "params" : [  ]
      } ], 
      "header-value" : [ {
        "description" : " Returns the value of the HTTP header with the given name.\n Header fields are colon-separated name-value pairs, terminated\n by a carriage return (CR) and line feed (LF) character sequence. The\n names and values of each header are allowed to consist of US-ASCII\n characters only.\n Please note that header names are considered case-insensitive.\n Also note, that only one value is returned if multiple headers with the\n same names exist in the request. This value is a comma-separated list\n of the values of the headers in the order in which the headers appeared\n in the request.\n All headers having a name that starts with SAUSALITO_ are reserved\n and will not be returned by this function.\n", 
        "params" : [ "$name" ]
      } ], 
      "header-names" : [ {
        "description" : " Returns the names of all the HTTP headers in this request.\n Header fields are colon-separated name-value pairs, terminated\n by a carriage return (CR) and line feed (LF) character sequence. The\n names and values of each header are allowed to consist of US-ASCII\n characters only.\n The names of the headers are returned using upper-case letters.\n If a header with the same name is contained multiple times in a request,\n its name is only returned once. The order of the names in the resulting\n sequence does not reflect the order of the headers in the request. If\n a header does not have a value, it is as if the header does not exist\n in the request.\n Note that the header names user-agent and content-type are not\n returned by this function. They are returned by the corresponding\n functions of this module module\n (e.g. user-agent).\n", 
        "params" : [  ]
      } ], 
      "header-accept" : [ {
        "description" : " Returns the values of the HTTP ACCEPT header.\n The data is returned as a sequence of objects\n as shown in the following example.\n \n {\n   \"type\" : \"text\",\n   \"subtype\" : \"html\",\n   \"quality\" : 1\n }\n \n", 
        "params" : [  ]
      } ], 
      "parts" : [ {
        "description" : " Returns the metadata of all parts contained in a multipart request.\n The metadata is returned as an object\n as shown in the following example.\n \n {\n   \"media-type\" : \"multipart/form-data; boundary=----------------------------93298e7a66a4\",\n   \"parts\" : [ {\n     \"headers\" : {\n       \"Content-Disposition\" : \"form-data; name=\\\"upload\\\"; filename=\\\"tmp.txt\\\"\",\n       \"Content-Type\" : \"text/plain\"\n     },\n     \"filename\" : \"tmp.txt\",\n     \"name\" : \"upload\",\n     \"src\" : \"urn:uuid:09be48d1-da0e-42c1-a115-a697e1779c45\",\n     \"size\" : \"153\"\n   }, {\n     \"headers\" : {\n       \"Content-Disposition\" : \"form-data; name=\\\"press\\\"\"\n     },\n     \"name\" : \"press\",\n     \"src\" : \"urn:uuid:c80e0609-b703-4d47-9171-441eb397a562\",\n     \"size\" : \"2\"\n   } ]\n }\n \n The media-type field describes the content-type as given in the\n request. Specifically, its value is equal to the value returned by\n request:header-values(\"Content-Type\")).\n Each of the array members of the parts field represents one\n part of the multipart request. Each such part contains a header field\n containing one field for each headers belonging to that part.\n The value of the src field can be used to retrieve the actual value\n of the part by passing it to the http:text-part or\n http:binary-part functions. The remaining fields represent a\n parameter of the Content-Disposition header as described in RFC 2183\n (e.g. filename, name, creation-date).\n Please note that recursive multipart content is not supported.\n", 
        "params" : [  ]
      } ], 
      "binary-part" : [ {
        "description" : " Returns the value of a part as base64Binary.\n A part is identified by a reference that is the value of a\n src field returned by the request:parts function.\n", 
        "params" : [ "$ref" ]
      } ], 
      "text-part" : [ {
        "description" : " Returns the value of a part as string\n A part is identified by a reference that is the value of a\n src field returned by the request:parts function.\n The value of the text part is interpreted using the encoding/charset\n given in the headers of the part. If no encoding is given, the default\n US-ASCII is assumed.\n", 
        "params" : [ "$ref" ]
      }, {
        "description" : " Returns the value of a part as string interpreting\n it with the given encoding.\n A part is identified by a reference that is the value of a\n src field returned by the request:parts function.\n", 
        "params" : [ "$ref", "$overwrite-encoding" ]
      } ]
    }
  }, 
  "http://www.28msec.com/modules/http-response" : {
    "description" : " The response module can be used to modify the HTTP response\n that will be send as a result. For example, the\n content-type function can be used to set the\n Content-Type header and determine the encoding of data in the\n response.\n", 
    "functions" : {
      "header" : [ {
        "description" : " Set a HTTP header in the response.\n If a header with the same name was already set, the\n value is overwritten and the function returns the old value. As defined\n in the HTTP specification, multiple headers with the same name\n can be combined into one header whose value is a comma-separated\n list of the values.\n The following headers must not be set using this function.\n Instead, other functions of this module should be used in order\n to implemented the required semantics:\n \n   Status: use status() instead\n   Content-Type: use content-type() instead\n \n \n", 
        "params" : [ "$name", "$value" ]
      } ], 
      "status" : [ {
        "description" : " Sets the status code of the HTTP response to code associated\n with the given string.\n For example,\n resp:status($http:no-content)\n will result in \"HTTP/1.1 204 No Content\".\n", 
        "params" : [ "$status" ]
      } ], 
      "status-code" : [ {
        "description" : " Sets the status code of the HTTP response to the integer given as\n parameter.\n For example,\n resp:status(204)\n will result in \"HTTP/1.1 204 No Content\".\n", 
        "params" : [ "$status" ]
      } ], 
      "content-type" : [ {
        "description" : " Sets the Content-Type header for the response.\n \n For example,\n resp:content-type(\"text/plain\") will cause the\n header\n Content-Type: text/plain to be added for the response.\n In addtion to setting the Content-Type header, the function also\n sets the serialization parameters to the default values for serialization\n method for the given content-type. For example, if the content-type is set to\n text/plain, the default serialization parameters for the text\n serialization method will be used.\n The functions resp:content-type-text/xml/html/xhtml/binary may be used\n to figure out which serialization method will be used for a specific\n content-type.\n If the given content-type contains a charset declaration (e.g.\n resp:content-type(\"text/plain;charset=ISO-8859-1\")), the\n content of the response will be transcoded to the given encoding.\n The default serialization parameters set by this function can\n be overwritten using the resp:serialization-parameters() function.\n", 
        "params" : [ "$type" ]
      }, {
        "description" : " Sets the Content-Type header for the response.\n For example,\n resp:content-type(\"text/plain\") will cause the\n header\n Content-Type: text/plain to be added for the response.\n In addition to the content-type, the function also allows to\n specify the serialization method and parameters that will be used\n for serializing the result. For details about this parameter, please\n refer to resp:serialization-parameters#1.\n If the content-type suggest using a binary serialization,\n resp:decode-binary#1 will be called and set to true except if\n the serialization method is specified at the same time. In this\n case, the serialization method will be used as specified.\n If the given content-type contains a charset declaration (e.g.\n resp:content-type(\"text/plain;charset=ISO-8859-1\")), the\n content of the response will be transcoded to the given encoding.\n If the serialization parameters also contain a charset declaration,\n the charset contained in the content-type will be used. to transcode\n the result.\n", 
        "params" : [ "$type", "$params" ]
      } ], 
      "encoding" : [ {
        "description" : " The function sets the output encoding that will be\n used for the payload of the response.\n For example,\n resp:encoding(\"ISO-8859-1\") will cause the\n content in the response to be encoded using ISO-8859-1.\n Please note that the encoding only applies to textual data.\n It is not used if the function decode-binary()\n was invoked passing true as parameter.\n", 
        "params" : [ "$encoding" ]
      } ], 
      "serializer-defaults-xml" : [ {
        "description" : " Returns an object that can be used to specify the\n settings of serialization parameters for the XML serialization\n method.\n The defaults are\n \n {\n  \"method\" : \"xml\",\n  \"encoding\" : \"UTF-8\",\n  \"indent\" : true,\n  \"omit-xml-declaration\" : true,\n  \"version\" : 1.0\n }\n \n \n For example, those defaults are used when setting\n the content-type to some XML content-type (e.g. application/atom+xml).\n", 
        "params" : [  ]
      } ], 
      "serializer-defaults-text" : [ {
        "description" : " Returns an object that can be used to specify the\n settings of serialization parameters for the text serialization\n method.\n The only default used is\n \n {\n  \"method\" : \"text\",\n  \"encoding\" : \"UTF-8\",\n }\n \n \n For example, this default is used when setting\n the content-type to some text content-type (e.g. text/plain).\n", 
        "params" : [  ]
      } ], 
      "serializer-defaults-xhtml" : [ {
        "description" : " Returns an object that can be used to specify the\n settings of serialization parameters for the XHTML serialization\n method.\n The defaults are\n \n {\n   \"encoding\" : \"UTF-8\",\n   \"indent\" : true,\n   \"method\" : \"xhtml\",\n   \"omit-xml-declaration\" : true,\n   \"version\" : \"1.0\",\n   \"doctype-system\" : \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\",\n   \"doctype-public\" : \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n }\n \n \n For example, those defaults are used when setting\n the content-type to some XHTML content-type (i.e. application/xhtml+xml).\n", 
        "params" : [  ]
      } ], 
      "serializer-defaults-html" : [ {
        "description" : " Returns an object that can be used to specify the\n settings of serialization parameters for the HTML serialization\n method.\n The defaults are\n \n {\n   \"encoding\" : \"UTF-8\",\n   \"indent\" : true,\n   \"method\" : \"html\",\n   \"version\" : \"4.01\",\n   \"doctype-system\" : \"http://www.w3.org/TR/html4/loose.dtd\",\n   \"doctype-public\" : \"-//W3C//DTD HTML 4.01 Transitional//EN\"\n }\n \n \n For example, those defaults are used when setting\n the content-type to some HTML content-type (i.e. text/html).\n", 
        "params" : [  ]
      } ], 
      "serializer-defaults-json-xml-hybrid" : [ {
        "description" : " Returns an object that can be used to specify the\n settings of serialization parameters for the json\n serialization method.\n The defaults are\n \n {\n   \"encoding\" : \"UTF-8\",\n   \"indent\" : \"yes\",\n   \"method\" : \"json\"\n }\n \n \n For example, those defaults are used when setting\n the content-type to some XML content-type (e.g. application/atom+xml).\n", 
        "params" : [  ]
      } ], 
      "content-type-text" : [ {
        "description" : " Test if a given content-type is a text content-type.\n A text content-type starts with \"text/\" or contains either of\n the strings \"xml\" or \"json\".\n", 
        "params" : [ "$type" ]
      } ], 
      "content-type-xml" : [ {
        "description" : " Test if a given content-type is a XML content-type\n A XML content-type is a content-type that is \"application/xml\"\n or ends : with the string \"+xml\".\n", 
        "params" : [ "$type" ]
      } ], 
      "content-type-html" : [ {
        "description" : " Test if a given content-type is a HTML content-type, i.e.\n the content-type is the string \"text/html\".\n", 
        "params" : [ "$type" ]
      } ], 
      "content-type-xhtml" : [ {
        "description" : " Test if a given content-type is a XHTML content-type, i.e.\n the content-type is the string \"application/xhtml+xml\".\n", 
        "params" : [ "$type" ]
      } ], 
      "content-type-json" : [ {
        "description" : " Test if a given content-type is a JSON content-type, i.e.\n the content-type is the string \"application/json\".\n", 
        "params" : [ "$type" ]
      } ], 
      "content-type-binary" : [ {
        "description" : " Test if a given content-type is a binary content-type. A\n content-type is considered to be binary if it's not a text\n content-type.\n", 
        "params" : [ "$type" ]
      } ], 
      "serialization-parameters" : [ {
        "description" : " Set the serialization parameters used for serializing the result\n of the request.\n The following example shows how to set several options\n for the JSON serialization method.\n \n {\n   \"method\" : \"json\",\n   \"indent\" : false,\n   \"encoding\" : \"UTF-16\"\n }\n \n \n Please note that serialization options set by this function can\n be overwritten by a subsequent call to resp:content-type. In this\n case, the options will be reset to the default for the given\n content-type. Also note, that the output encoding can be overwritten\n by subsequently calling the resp:encoding function.\n", 
        "params" : [ "$params" ]
      }, {
        "description" : " Returns the serialization parameters that are currently\n active, i.e. the ones that will be used to serialize the result\n of this request.\n This will either be the default, the defaults set when\n calling resp:content-type(), or the ones set by\n resp:serialization-parameters().\n", 
        "params" : [  ]
      } ], 
      "decode-binary" : [ {
        "description" : " If this function is invoked with true, the result of the request\n will not be serialized. Instead, the result will be the binary values\n of any item that is of type base64Binary. The values of all other\n items will not be part of the result.\n Please note that all serialization parameters which have been set using\n resp:serialization-parameters will be ignored. Also, the output encoding\n is ignored for binaries.\n", 
        "params" : [ "$decode" ]
      }, {
        "description" : " Returns the boolean indiciating whether base64Binary returned by\n this request will be decoded.\n The default if not modified using resp:decode-binary is false.\n", 
        "params" : [  ]
      } ], 
      "redirect" : [ {
        "description" : " This function sets the HTTP 302 redirect status code in the response. As\n a result, a redirect to the URL given as parameter will be made.\n", 
        "params" : [ "$url" ]
      } ], 
      "code-for-status" : [ {
        "description" : " Convert between the name of the HTTP status code and\n the integer value of that status code.\n", 
        "params" : [ "$status" ]
      } ], 
      "message-for-status" : [ {
        "description" : " Convert between the HTTP status code as string and\n the name/message of that status code.\n", 
        "params" : [ "$status" ]
      } ], 
      "valid-status" : [ {
        "description" : " Test whether the given name refers to a valid HTTP status code.\n", 
        "params" : [ "$status" ]
      } ]
    }
  }, 
  "http://www.28msec.com/modules/jdbc" : {
    "description" : " This module allows connecting, querying, and updating JDBC datasources.\n The results of a query are returned as a sequence of objects:\n  { column: value } .\n The type of the value depends on the type of the column in the database:\n \n   JDBC TypesJSONiq Type\n   integer, bigint, smallint, tinyintinteger\n   decimal, double, float, numeric, realdouble\n   boolean, bitboolean\n   char, blob, longvarchar, longnvarchar, nchar, nclob, nvarchar,\n  varchar, sqlxml, date, time, timestampstring\n   binary, blob, longvarbinary, varbinary, array, datalink,\n  java_object, other, refbase64Binary\n \n \n \n If the value of a column is null, it is mapped to the JSONiq null value.\n \n Connecting to a JDBC source requires the following options:\n \n   url: the JDBC connection URI (mandatory)\n   user: the user used for connecting (optional)\n   password: the password used for connecting (optional)\n \n Examples:\n \n  \n {\n   \"url\" : \"jdbc:mysql://localhost/testdb\",\n   \"user\" : \"root\",\n   \"password\" : \"\"\n }\n  \n {\n   \"url\" : \"jdbc:sqlserver://192.168.1.1;databaseName=testdb\",\n   \"user\" : \"sa\",\n   \"password\" : \"\"\n }\n  \n {\n   \"url\" : \"jdbc:postgresql://localhost/testdb\",\n   \"user\" : \"root\",\n   \"password\" : \"\"\n }\n \n Currently, the 28.io platform supports connections to\n \n   MySQL using the mariadb-java-client.jar version 1.1.2,\n   PostgreSQL using postgresql.jar version 9.2, and \n   Microsoft SQL Server using sqljdbc4.jar version 4.0.\n \n \n If you are interested in connecting to other JDBC datasources,\n please contact us at support@28.io.\n Important Notice Regarding Function Determinism\n The non side-effecting functions:\n \n   connect#0\n   connect#1\n   connect#2\n   execute-query#2\n   execute-query-prepared#1\n   tables#1\n   tables#4\n \n are declared deterministic, which means that their results could be cached\n when invoked multiple times with the same arguments in the same query execution.\n To not use cached results you can use the following alternative functions:\n \n   connect-notdeterministic#0\n   connect-notdeterministic#1\n   connect-notdeterministic#2\n   execute-query-notdeterministic#2\n   execute-query-prepared-notdeterministic#1\n   tables-notdeterministic#1\n   tables-notdeterministic#4\n \n which have been declared as being non deterministic.\n", 
    "functions" : {
      "connect" : [ {
        "description" : " Open a connection to a database using the default credentials.\n This function is declared as deterministic and should be used whenever result\n caching is acceptable.\n The function returns an opaque URI that can represents the connection.\n This URI has to be passed to other functions of this module that require\n the $conn parameter as a first argument.\n", 
        "params" : [  ]
      }, {
        "description" : " Open a connection to a database.\n This function is declared as deterministic and should be used whenever result\n caching is acceptable.\n The input to the function contains the connection information.\n If a string is used, then the function will interpret it as credential name\n and will connect using the JDBC credentials with the specified name.\n If an object is used, then the function will open a connection using it.\n The object's required structure is described in the module's description.\n The function returns an opaque URI that can represents the connection.\n This URI has to be passed to other functions of this module that require\n the $conn parameter as a first argument.\n", 
        "params" : [ "$connection-config" ]
      }, {
        "description" : " Open a connection to a database.\n This function is declared as deterministic and should be used whenever result\n caching is acceptable.\n The input to the function contains the connection information.\n If a string is used, then the function will interpret it as credential name\n and will connect using the JDBC credentials with the specified name.\n If an object is used, then the function will open a connection using it.\n The object's required structure is described in the module's description.\n In addition to the connection configuration, the function allows to\n specify several options:\n \n   autocommit: true/false turn on/off auto commit\n (default: true)\n   readonly: true/false configure readonly/write on this\n connection (default: false)\n   isolation-level: configure the isolation level for this connection\n     \n       READ-COMMITTED: set the isolation level read-committed\n       READ-UNCOMMITTED: set the isolation level read-uncommitted\n       READ-REPEATABLE: set the isolation level repeatable-read\n       SERIALIZABLE: set the isolation level serializable\n     \n   If no isolation level is provided by the user the connection will be created\n   with the default isolation level of the database.\n \n The function returns an opaque URI that represents the connection.\n This URI has to be passed to other functions of this module that require\n the $conn parameter as a first argument.\n", 
        "params" : [ "$connection-config", "$options" ]
      } ], 
      "connect-nondeterministic" : [ {
        "description" : " Open a connection to a database using the default credentials.\n This function has the same semantics as\n connect#0,\n but is declared as being non deterministic and thus should only be used when\n result caching is not desired.\n", 
        "params" : [  ]
      }, {
        "description" : " Open a connection to a database.\n This function has the same semantics as\n connect#1,\n but is declared as being non deterministic and thus should only be used when\n result caching is not desired.\n", 
        "params" : [ "$connection-config" ]
      }, {
        "description" : " Open a connection to a database.\n This function has the same semantics as\n connect#2,\n but is declared as being non deterministic and thus should only be used when\n result caching is not desired.\n", 
        "params" : [ "$connection-config", "$options" ]
      } ], 
      "is-connected" : [ {
        "description" : " Verify if a connection is still active.\n", 
        "params" : [ "$conn" ]
      } ], 
      "connection-options" : [ {
        "description" : " Return a set with options for a specified connection.\n The returned options are equal to the options specified in function jdbc:connect.\n Consequently, the options are specified as follows:\n \n   autocommit: true/false shows auto commit\n   readonly: true/false shows if the connection is readonly/write\n   isolation-level: shows the isolation level for this connection\n     \n       READ-COMMITTED: isolation level is read-committed\n       READ-UNCOMMITTED: isolation level is read-uncommitted\n       READ-REPEATABLE: isolation level is repeatable-read\n       SERIALIZABLE: isolation level is serializable\n     \n \n", 
        "params" : [ "$conn" ]
      } ], 
      "commit" : [ {
        "description" : " Commit current transaction from an active connection.\n", 
        "params" : [ "$conn" ]
      } ], 
      "rollback" : [ {
        "description" : " Rollback the current transaction of a connection.\n", 
        "params" : [ "$conn" ]
      } ], 
      "execute" : [ {
        "description" : " Execute any kind of SQL statement.\n", 
        "params" : [ "$conn", "$sql" ]
      } ], 
      "execute-query" : [ {
        "description" : " Execute non-updating SQL statements.\n This function is declared as deterministic and should be used whenever result\n caching is acceptable.\n Every row is represented by an object of column-value representation, as in\n the module description.\n", 
        "params" : [ "$conn", "$sql" ]
      } ], 
      "execute-query-nondeterministic" : [ {
        "description" : " Execute non-updating SQL statements.\n This function has the same semantics as\n execute-query#2,\n but is declared as being non deterministic and thus should only be used when\n result caching is not desired.\n", 
        "params" : [ "$conn", "$sql" ]
      } ], 
      "execute-update" : [ {
        "description" : " Execute updating SQL statements.\n", 
        "params" : [ "$conn", "$sql" ]
      } ], 
      "prepare-statement" : [ {
        "description" : " Create a prepared statement for multiple executions with diferent parameters.\n Example:\n \n jdbc:prepare-statement($connection, \"SELECT * FROM users WHERE id=? AND age&gt;?\")\n \n", 
        "params" : [ "$conn", "$sql" ]
      } ], 
      "set-numeric" : [ {
        "description" : " Set the value of the designated parameter with a numeric value.\n", 
        "params" : [ "$prepared-statement", "$parameter-index", "$value" ]
      } ], 
      "set-string" : [ {
        "description" : " Set the value of the designated parameter with a string value.\n", 
        "params" : [ "$prepared-statement", "$parameter-index", "$value" ]
      } ], 
      "set-boolean" : [ {
        "description" : " Set the value of the designated parameter with a boolean value.\n", 
        "params" : [ "$prepared-statement", "$parameter-index", "$value" ]
      } ], 
      "set-null" : [ {
        "description" : " Set the value of the designated parameter with a NULL value.\n", 
        "params" : [ "$prepared-statement", "$parameter-index" ]
      } ], 
      "set-value" : [ {
        "description" : " Set the value of the designated parameter with the given value.\n The function will try to cast the value to the correct data type and assign\n it to the parameter.\n", 
        "params" : [ "$prepared-statement", "$parameter-index", "$value" ]
      } ], 
      "clear-params" : [ {
        "description" : " Clear all the parameters of the statement.\n", 
        "params" : [ "$prepared-statement" ]
      } ], 
      "parameter-metadata" : [ {
        "description" : " Retrieve the names and types of the prepared statement parameters.\n The metadata returned has the following structure:\n   {\n     columns: [{\n       \"name\": string,\n       \"type\": string\n       }]\n   } \n", 
        "params" : [ "$prepared-statement" ]
      } ], 
      "execute-prepared" : [ {
        "description" : " Execute SQL statements prepared with jdbc:prepare-statement,\n after setting the parameters values accordingly and returns an identifier to\n a Dataset.\n", 
        "params" : [ "$prepared-statement" ]
      } ], 
      "execute-query-prepared" : [ {
        "description" : " Execute non-updating SQL statements prepared with jdbc:prepare-statement,\n after setting the parameters values accordingly.\n This function is declared as deterministic and should be used whenever result\n caching is acceptable.\n Every row is represented by an object of column-value representation, as\n in the module description.\n", 
        "params" : [ "$prepared-statement" ]
      } ], 
      "execute-query-prepared-nondeterministic" : [ {
        "description" : " Execute non-updating SQL statements prepared with jdbc:prepare-statement,\n after setting the parameters values accordingly.\n This function has the same semantics as\n execute-query-prepared#1,\n but is declared as being non deterministic and thus should only be used when\n result caching is not desired.\n", 
        "params" : [ "$prepared-statement" ]
      } ], 
      "execute-update-prepared" : [ {
        "description" : " Execute updating SQL statements prepared with jdbc:prepare-statement.\n", 
        "params" : [ "$prepared-statement" ]
      } ], 
      "result-set" : [ {
        "description" : " Extract the data rows from a non-updating DataSet.\n Every row is represented by an object of column-value representation, as in\n the module description.\n", 
        "params" : [ "$dataset" ]
      } ], 
      "metadata" : [ {
        "description" : " Return the metadata of the result of a DataSet.\n \n More in detail, it returns information about column names, types, and whether\n a column can contain a null value.\n The metadata information can only be returned for DataSets that have been\n executed explicitly using the jdbc:execute function.\n The metadata node returned has the following structure:\n {\n   \"columns\": [ {\n       \"name\": string,\n       \"type\": string,\n       \"autoincrement\"? = boolean,\n       \"nillable\"? = boolean } * ]\n }\n \n \n If the query is an updating query, then the result object will return the\n number of affected rows like:\n { \"affectedrows\": integer }\n \n", 
        "params" : [ "$dataset" ]
      } ], 
      "affected-rows" : [ {
        "description" : " Return the number of affected rows of an updating DataSet.\n", 
        "params" : [ "$dataset" ]
      } ], 
      "tables" : [ {
        "description" : " Return the list of tables from a connection.\n This function is declared as deterministic and should be used whenever result\n caching is acceptable.\n", 
        "params" : [ "$conn" ]
      }, {
        "description" : " Return the list of tables from a connection.\n This function is declared as deterministic and should be used whenever result\n caching is acceptable.\n", 
        "params" : [ "$conn", "$catalog", "$schema", "$table" ]
      } ], 
      "tables-nondeterministic" : [ {
        "description" : " Return the list of tables from a connection.\n This function has the same semantics as\n tables#1,\n but is declared as being non deterministic and thus should only be used when\n result caching is not desired.\n", 
        "params" : [ "$conn" ]
      }, {
        "description" : " Return the list of tables from a connection.\n This function has the same semantics as tables#4,\n but is declared as being non deterministic and thus should only be used when\n result caching is not desired.\n", 
        "params" : [ "$conn", "$catalog", "$schema", "$table" ]
      } ]
    }
  }, 
  "http://www.28msec.com/modules/maps" : {
    "description" : " This module defines a set of functions for working with maps. A map\n is identified by a string and can be created using the map:create function\n and dropped using the map:drop function.\n It is possible to create persistent and transient maps. The lifetime of a\n transient map is limited by the execution of the current query.\n A persistent map lives until it is explicitly dropped.\n Accordingly, it is also available to other requests.\n For example,\n map:create(\"my-map\", [\"string\", \"integer\"], { \"persistent\" : false })\n will create a transient map named my-map having two keys.\n The types of the keys are string and integer.\n \n The key of a particular entry in the map can consist of a tuple of\n atomic values (called key attributes). The actual type of each attribute\n is determined when the map is created. The value of each entry is a\n sequence of items. If an item in this sequence is a object or array,\n this item needs to belong to a collection, otherwise, an error is raised.\n For every persistent map, 28.io will create a new collection\n in your MongoDB database. The collection will have the prefix _28.map.\n For example, if your map is called foo, the according collection will\n be named _28.map.foo.\n", 
    "functions" : {
      "create" : [ {
        "description" : " Create a persistent map with a given name and type identifiers for the key\n attributes.\n If the map has only one key attribute, a single type identifier is given,\n for more than one key attribute an array of type identifiers is given.\n Calling this function is equivalent to calling create with the options\n { \"persistent\" : true }\n Note that the function is sequential and immediately creates the map.\n Each key-type should be specified as string (e.g. \"integer\",\n \"string\", \"boolean\", \"double\", or \"datetime\").\n For example,\n map:create(\"my-map\", \"string\") or\n map:create(\"my-map\", [\"string\", \"integer\"]).\n", 
        "params" : [ "$name", "$key-types" ]
      }, {
        "description" : " Create a map with a given name, type identifiers for the key attributes, and\n options.\n If the map has only one key attribute, a single type identifier is given,\n for more than one key attribute an array of type identifiers is given.\n Currently only one option is supported: To create a transient map the object\n { \"persistent\" : false }\n has to be passed to the $options parameter.\n Note that the function is sequential and immediately creates the map in the\n store.\n", 
        "params" : [ "$name", "$key-types", "$options" ]
      } ], 
      "drop" : [ {
        "description" : " Deletes the map with the given name.\n", 
        "params" : [ "$name" ]
      } ], 
      "insert" : [ {
        "description" : " Inserts a new entry into the map with the given name.\n If the map has only one key attribute, a single key value is given, for\n more than one key attribute an array of key values is given.\n If an entry with the given key already exists in the map, the value\n sequences of the existing entry and the sequence passed using $value\n argument are concatenated.\n If a map is persistent and if an item in the value sequence\n is an object or array, this item needs to belong to a collection,\n otherwise, an an error is raised.\n Note that it is possible to insert entries with empty key attributes\n or key attributes having the value null. However, as\n the comparison with an empty sequence or null always returns false,\n it is not possible to retrieve these entries.\n For example,\n map:insert(\"my-map\", \"key\", \"value\") or\n map:insert(\"my-map\", [ \"key1\", \"key2\" ] , (42, \"value\")).\n", 
        "params" : [ "$name", "$key", "$value" ]
      } ], 
      "get" : [ {
        "description" : " Returns the value of the entry with the given key from the map.\n If the map has only one key attribute, a single key value is given, for\n more than one key attribute an array of key values is given.\n Note that it is possible to insert entries with empty key attributes.\n However as the getting the entries is based on the \"eq\" comparison and\n as \"eq\" with an empty sequence always return false, it is not possible\n to retrieve these entries.\n For example,\n map:get(\"my-map\", \"key\") or\n map:get(\"my-map\", [ \"key1\", \"key2\" ]).\n", 
        "params" : [ "$name", "$key" ]
      } ], 
      "delete" : [ {
        "description" : " Removes an entry identified by the given key from the map.\n If the map has only one key attribute, a single key value is given, for\n more than one key attribute an array of key values is given.\n Note that it is possible to insert entries with empty key attributes.\n However as the removing the entries is based on the \"eq\" comparison and\n as \"eq\" with an empty sequence always return false, it is not possible\n to delete these entries.\n", 
        "params" : [ "$name", "$key" ]
      } ], 
      "keys" : [ {
        "description" : " Returns the keys of all entries of a map. The keys\n are returned as sequence of arrays.\n The following condition always holds:\n map:size($name) eq count(map:keys($name))\n", 
        "params" : [ "$name" ]
      } ], 
      "size" : [ {
        "description" : " The number of entries in a map.\n The following condition always holds:\n map:size($name) eq count(map:keys($name))\n", 
        "params" : [ "$name" ]
      } ], 
      "available-maps" : [ {
        "description" : " The function returns a sequence of names of the maps that are\n available (persistent and non-persistent). The sequence will be\n empty if there are no maps.\n", 
        "params" : [  ]
      } ], 
      "options" : [ {
        "description" : " The function returns the options that were passed during creation or the\n default options if no options were passed.\n", 
        "params" : [ "$name" ]
      } ]
    }
  }, 
  "http://www.28msec.com/modules/mongodb" : {
    "description" : " This module provides a driver to access a\n MongoDB database - similar to\n drivers for other high-level languages like e.g.\n PyMongo.\n Here is a simple example of how we can raise the salary of each\n developer by 10%.\n Starting with an employees collection in MongoDB that contains\n \n { \"name\" : \"Peter\", \"role\" : \"developer\" , \"salary\" : 80 }\n { \"name\" : \"Paul\",  \"role\" : \"developer\" , \"salary\" : 75 }\n { \"name\" : \"Mary\",  \"role\" : \"manager\"   , \"salary\" : 90 } \n we can get a connection\n \n variable $conn := mongo:connect(\"hostname\", 27017, \"db\", \"user\", \"password\");\n \n run this update\n \n for $emp in mongo:find($conn, \"employees\")\n where $emp(\"role\") = \"developer\"\n let $salary := $emp(\"salary\")\n return {\n   replace value of json $emp(\"salary\") with $salary * 1.1;\n   mongo:save($conn, \"employees\", $emp)\n };\n \n and get the names and the current salaries using\n \n mongo:find($conn, \"employees\", {}, { \"_id\" : false, \"role\" : false }, {}) \n In this query we have removed the _id and role fields from\n the results and get\n \n { \"name\" : \"Peter\", \"salary\" : 88   }\n { \"name\" : \"Paul\",  \"salary\" : 82.5 }\n { \"name\" : \"Mary\",  \"salary\" : 90   }\n \n \n Important Notice Regarding Function Determinism\n The non side-effecting functions:\n \n   connect#0\n   connect#1\n   connect#2\n   connect#5\n   collection-names#1\n   count#2\n   find#2\n   find#3\n   find#4\n   find#5\n \n are declared deterministic, which means that their results could be cached\n when invoked multiple times with the same arguments in the same query execution.\n To not use cached results you can use the following alternative functions:\n \n   connect-nondeterministic#0\n   connect-nondeterministic#1\n   connect-nondeterministic#2\n   connect-nondeterministic#5\n   collection-names-nondeterministic#1\n   count-nondeterministic#2\n   find-nondeterministic#2\n   find-nondeterministic#3\n   find-nondeterministic#4\n   find-nondeterministic#5\n \n which have been declared as being non deterministic.\n Three different functions have been defined to run mongo commands:\n \n   run-cmd#2\n   run-cmd-nondeterministic#2\n   run-cmd-deterministic#2\n \n If your application depends on the ordering of side-effects from commands issued\n through these functions you should use run-cmd#2,\n which has been declared as sequential.\n For non-side-effecting commands you can also use\n run-cmd-nondeterministic#2 and\n run-cmd-deterministic#2.\n The results of commands executed by means of\n run-cmd-deterministic#2 (which is\n declared deterministic) could be cached, whereas the results of\n commands executed by means of\n run-cmd-nondeterministic#2 (which is\n declared non-deterministic) are never cached.\n", 
    "functions" : {
      "connect" : [ {
        "description" : " Connect to a MongoDB database.\n This function is declared as deterministic and should be used whenever result\n caching is acceptable.\n", 
        "params" : [ "$host", "$port", "$db", "$user", "$pass" ]
      }, {
        "description" : " Connect to this project's default MongoDB database.\n This function is declared as deterministic and should be used whenever result\n caching is acceptable.\n", 
        "params" : [  ]
      }, {
        "description" : " Connect to a MongoDB database.\n This function is declared as deterministic and should be used whenever result\n caching is acceptable.\n The $connection-config parameter is used to specify the connection information.\n If a string is used, then the function will interpret it as the name of\n a credential in the MongoDB category.\n If an object is used, then the function will open a connection using it.\n The object structure is the following:\n \n   host (string; mandatory)\n   port (integer; default: 27017)\n   db (string; mandatory)\n   user (string)\n   pass (string)\n   timeout (decimal; default: 0)\n   pre-digested (boolean; default: false)\n \n \n For example, using stored credential:\n mongo:connect(\"credentials-name\")\n For example, specifying the connection information:\n mongo:connect(\n   {\n     \"host\": \"hostname\",\n     \"port\": 11011,\n     \"db\": \"mydb\",\n     \"user\": \"myuser\"\n     \"password: \"mypass\"\n   }).\n \n", 
        "params" : [ "$connection-config" ]
      }, {
        "description" : " Connect to a MongoDB database.\n This function is declared as deterministic and should be used whenever result\n caching is acceptable.\n The $credentials-name parameter is used to specify the connection information.\n If empty a connection will be opened to the project default MongoDB database.\n Otherwise, the function will use it to identify a credential in the MongoDB category.\n \n  The $options object can be used to specify connection options. The following\n fields are supported:\n \n   timeout (decimal; default: 0)\n \n \n For example, connecting to the project default MongoDB database:\n mongo:connect((), {\"timeout\": 10})\n \n For example, specifying the connection information:\n mongo:connect(\"credentials-name\", {\"timeout\": 10})\n \n", 
        "params" : [ "$credentials-name", "$options" ]
      } ], 
      "connect-nondeterministic" : [ {
        "description" : " Connect to a MongoDB database.\n This function has the same semantics as connect#5,\n but is declared as being non deterministic and thus should only be used when\n result caching is not desired.\n", 
        "params" : [ "$host", "$port", "$db", "$user", "$pass" ]
      }, {
        "description" : " Connect to this project's default MongoDB database.\n This function has the same semantics as connect#0,\n but is declared as being non deterministic and thus should only be used when\n result caching is not desired.\n", 
        "params" : [  ]
      }, {
        "description" : " Connect to a MongoDB database.\n This function has the same semantics as connect#1,\n but is declared as being non deterministic and thus should only be used when\n result caching is not desired.\n", 
        "params" : [ "$connection-config" ]
      }, {
        "description" : " Connect to a MongoDB database.\n This function has the same semantics as connect#2,\n but is declared as being non deterministic and thus should only be used when\n result caching is not desired.\n", 
        "params" : [ "$credentials-name", "$options" ]
      } ], 
      "disconnect" : [ {
        "description" : " Disconnect from a MongoDB database.\n", 
        "params" : [ "$db" ]
      } ], 
      "is-connected" : [ {
        "description" : " Checks if the given identifiers is valid and the corresponding\n connection is open.\n", 
        "params" : [ "$db" ]
      } ], 
      "collection-names" : [ {
        "description" : " Get a list of all the collection names in this database.\n This function is declared as deterministic and should be used whenever result\n caching is acceptable.\n", 
        "params" : [ "$db" ]
      } ], 
      "collection-names-nondeterministic" : [ {
        "description" : " Get a list of all the collection names in this database.\n This function has the same semantics as\n collection-names#1,\n but is declared as being non deterministic and thus should only be used when\n result caching is not desired.\n", 
        "params" : [ "$db" ]
      } ], 
      "drop-collection" : [ {
        "description" : " Drop a collection.\n", 
        "params" : [ "$db", "$coll" ]
      } ], 
      "save" : [ {
        "description" : " Save a sequence of documents in the given collection.\n If a document to be save already has an \"_id\" field, then an\n upsert operation is performed an any existing document with that\n id will be overwritten. Otherwise, an insert operation is performed\n and the \"_id\" generated for each document will be returned.\n Each safe operation will be checked and an error is raised if\n one of them fails.\n", 
        "params" : [ "$db", "$coll", "$doc" ]
      }, {
        "description" : " Save a sequence of documents in the given collection.\n If a document to be saved already has an \"_id\" field, then an\n upsert operation is performed and any existing document with that\n id will be overwritten. Otherwise, an insert operation is performed.\n If the manipulate option is set to true, an \"_id\" field will be\n added to the document. The new id will be returned. Otherwise,\n the \"_id\" field will be added by the server.\n If the safe options is set to true, each operation will wait for a\n response from the database and an error is raised if the operation\n fails. Otherwise, the operation will not wait for a response.\n", 
        "params" : [ "$db", "$coll", "$doc", "$options" ]
      } ], 
      "update" : [ {
        "description" : " Performs an update command on the given collection.\n The operation will be checked and an error is raised if\n one of them fails. Also, this function only modifies one\n document matching the query and does not do any upserts.\n", 
        "params" : [ "$db", "$coll", "$query", "$update" ]
      }, {
        "description" : " Performs an update operation on the given collection.\n \n \n   safe: If to true, the operation will wait for a response from\n    the database and an error is raised if the operation fails.\n    Otherwise, the operation will not wait for a response.\n  multi: indicates if all documents matching criteria should be updated\n  rather than just one.\n  upsert: if this should be an \"upsert\" operation; that is,\n  if the record(s) do not exist, insert one. Upsert only inserts a single document.\n \n \n", 
        "params" : [ "$db", "$coll", "$query", "$update", "$options" ]
      } ], 
      "remove" : [ {
        "description" : " Performs a remove operation on the given collection.\n The operation will be checked and an error is raised if\n one of them fails.\n", 
        "params" : [ "$db", "$coll", "$remove" ]
      }, {
        "description" : " Performs a remove operation on the given collection.\n \n \n   safe: If to true, the operation will wait for a response from\n    the database and an error is raised if the operation fails.\n    Otherwise, the operation will not wait for a response.\n  just-one: true if the operation should stop after a single match\n    has been found and deleted\n \n \n", 
        "params" : [ "$db", "$coll", "$remove", "$options" ]
      } ], 
      "count" : [ {
        "description" : " Counts the number of documents in the given collection.\n This function is declared as deterministic and should be used whenever result\n caching is acceptable.\n", 
        "params" : [ "$db", "$coll" ]
      } ], 
      "count-nondeterministic" : [ {
        "description" : " Counts the number of documents in the given collection.\n This function has the same semantics as count#2,\n but is declared as being non deterministic and thus should only be used when\n result caching is not desired.\n", 
        "params" : [ "$db", "$coll" ]
      } ], 
      "find" : [ {
        "description" : " Returns all objects of the given collection.\n This function is declared as deterministic and should be used whenever result\n caching is acceptable.\n", 
        "params" : [ "$db", "$coll" ]
      }, {
        "description" : " Performs a query operation on the given collection and\n returns all matches.\n This function is declared as deterministic and should be used whenever result\n caching is acceptable.\n", 
        "params" : [ "$db", "$coll", "$query" ]
      }, {
        "description" : " Performs a query operation on the given collection and\n returns all matches.\n This function is declared as deterministic and should be used whenever result\n caching is acceptable.\n", 
        "params" : [ "$db", "$coll", "$query", "$options" ]
      }, {
        "description" : " Performs a query operation on the given collection and\n returns all matches.\n This function is declared as deterministic and should be used whenever result\n caching is acceptable.\n Available options:\n \n   to-return: the maximum number of objects to return (0 = unlimited)\n   to-skip: start with the n-th object\n   batch-size: the number of objects to return in one batch\n   slave-ok: allow this query to be run against a replica secondary\n   await-data: the server will block for some extra time before returning,\n   waiting for more data to return\n   partial-results: return partial results if some shards are down instead\n   of returning an error\n \n \n", 
        "params" : [ "$db", "$coll", "$query", "$projection", "$options" ]
      } ], 
      "find-nondeterministic" : [ {
        "description" : " Returns all objects of the given collection.\n This function has the same semantics as find#2,\n but is declared as being non deterministic and thus should only be used when\n result caching is not desired.\n", 
        "params" : [ "$db", "$coll" ]
      }, {
        "description" : " Performs a query operation on the given collection and\n returns all matches.\n This function has the same semantics as find#3,\n but is declared as being non deterministic and thus should only be used when\n result caching is not desired.\n", 
        "params" : [ "$db", "$coll", "$query" ]
      }, {
        "description" : " Performs a query operation on the given collection and\n returns all matches.\n This function has the same semantics as find#4,\n but is declared as being non deterministic and thus should only be used when\n result caching is not desired.\n", 
        "params" : [ "$db", "$coll", "$query", "$options" ]
      }, {
        "description" : " Performs a query operation on the given collection and\n returns all matches.\n This function has the same semantics as find#5,\n but is declared as being non deterministic and thus should only be used when\n result caching is not desired.\n", 
        "params" : [ "$db", "$coll", "$query", "$projection", "$options" ]
      } ], 
      "run-cmd" : [ {
        "description" : " Executes a\n database command.\n This function is marked as sequential and should be used whenever the\n specified command has side-effects.\n", 
        "params" : [ "$db", "$cmd" ]
      } ], 
      "run-cmd-nondeterministic" : [ {
        "description" : " Executes a\n database command.\n This function is marked as non-deterministic and should be used whenever the\n specified command has no side-effects and result caching is undesired.\n", 
        "params" : [ "$db", "$cmd" ]
      } ], 
      "run-cmd-deterministic" : [ {
        "description" : " Executes a\n database command.\n This function is marked as deterministic and should be used whenever the\n specified command has no side-effects and result caching is desired.\n", 
        "params" : [ "$db", "$cmd" ]
      } ], 
      "copy" : [ {
        "description" : " Copies a MongoDB database. Be aware, you must call\n this function on the admin database.\n", 
        "params" : [ "$db", "$from-db", "$to-db" ]
      } ], 
      "connect-impl" : [ {
        "description" : "", 
        "params" : [ "$options" ]
      } ], 
      "connect-nondeterministic-impl" : [ {
        "description" : "", 
        "params" : [ "$options" ]
      } ], 
      "credentials" : [ {
        "description" : "", 
        "params" : [ "$name" ]
      } ]
    }
  }, 
  "http://www.28msec.com/modules/project" : {
    "description" : " This module contains functions to introspect a project.\n", 
    "functions" : {
      "name" : [ {
        "description" : " Returns the name of the project.\n", 
        "params" : [  ]
      } ], 
      "scheduler-host" : [ {
        "description" : " Returns the host of the scheduler.\n", 
        "params" : [  ]
      } ], 
      "has-seed" : [ {
        "description" : " Checks if the project has a seed file.\n", 
        "params" : [  ]
      } ], 
      "seed" : [ {
        "description" : " Returns the project seed.\n", 
        "params" : [  ]
      } ], 
      "create-seed" : [ {
        "description" : " Creates and return new random project seed.\n", 
        "params" : [  ]
      }, {
        "description" : " Creates a new project seed.\n The specified seed must be at least 8 characters long.\n", 
        "params" : [ "$seed" ]
      } ], 
      "read-or-create-seed" : [ {
        "description" : " Returns the project seed. If the project has no seed a new random one is created.\n", 
        "params" : [  ]
      } ], 
      "set-seed" : [ {
        "description" : " Sets a new random project seed.\n", 
        "params" : [  ]
      }, {
        "description" : " Sets the project seed.\n The specified seed must be at least 8 characters long.\n", 
        "params" : [ "$seed" ]
      } ], 
      "validate-seed" : [ {
        "description" : "", 
        "params" : [ "$seed" ]
      } ], 
      "create-seed-impl" : [ {
        "description" : "", 
        "params" : [ "$seed" ]
      } ], 
      "set-seed-impl" : [ {
        "description" : "", 
        "params" : [ "$seed" ]
      } ]
    }
  }, 
  "http://www.28msec.com/modules/s3" : {
    "description" : " This module provides functionality for managing S3 buckets and object.\n It is not possible to access buckets whose names are not DNS-compliant. For\n instance a bucket name which contains uppercase letters or is longer than 63\n characters is not DNS-compliant. For additional details on bucket naming\n conventions refer to\n \n Bucket Restrictions and Limitations.\n Authentication\n For each functionality two methods are provided:\n \n   one which allows to specify the credentials to use, by means of the\n   optional $credentials parameter (named). If the parameter is not specified,\n   the default credentials in the \"S3\" category will be used. If the parameter\n   is specified it must be either a string or an object. If it is a string it\n   will be interpreted as the name of a credentials in the \"S3\" category. If\n   it is an object it must have the following structure:\n   \n     accessKey: the AWS access key to use (string, mandatory).\n     secretKey: the AWS secret key to use (string, mandatory).\n     useHttps: whether to use secure HTTPS connections or not.\n     (boolean, optional). The default is false\n     defaultBucket: the default bucket name (string, optional).\n   \n   \n   one which does not allow to specify which credentials to use.\n   In this case the default credentials in the \"S3\" category will be used.\n \n \n Important Notice Regarding Function Determinism\n The non side-effecting functions:\n \n   list-buckets#0\n   list-buckets#1\n   list-bucket#0\n   list-bucket#1\n   list-bucket#2\n   list-bucket#3\n   list-bucket-versions#0\n   list-bucket-versions#1\n   list-bucket-versions#2\n   list-bucket-versions#3\n   read-text#1\n   read-text#2\n   read-binary#1\n   read-binary#2\n   read-object#1\n   read-object#2\n   object-metadata#1\n   object-metadata#2\n   object-torrent#1\n   object-torrent#2\n   object-permissions#1\n   object-permissions#2\n \n are declared deterministic, which means that their results could be cached\n when invoked multiple times with the same arguments in the same query execution.\n To not use cached results you can use the following alternative functions:\n \n   list-buckets-nondeterministic#0\n   list-buckets-nondeterministic#1\n   list-bucket-nondeterministic#0\n   list-bucket-nondeterministic#1\n   list-bucket-nondeterministic#2\n   list-bucket-nondeterministic#3\n   list-bucket-versions-nondeterministic#0\n   list-bucket-versions-nondeterministic#1\n   list-bucket-versions-nondeterministic#2\n   list-bucket-versions-nondeterministic#3\n   read-text-nondeterministic#1\n   read-text-nondeterministic#2\n   read-binary-nondeterministic#1\n   read-binary-nondeterministic#2\n   read-object-nondeterministic#1\n   read-object-nondeterministic#2\n   object-metadata-nondeterministic#1\n   object-metadata-nondeterministic#2\n   object-torrent-nondeterministic#1\n   object-torrent-nondeterministic#2\n   object-permissions-nondeterministic#1\n   object-permissions-nondeterministic#2\n \n which have been declared as being non deterministic.\n", 
    "functions" : {
      "create-bucket" : [ {
        "description" : " Creates a bucket using the default S3 credentials. The bucket owner will\n be the account of the default S3 credentials.\n The bucket is created with the S3 default bucket settings. Specifically,\n it is created in the US Standard region and the default credentials\n account becomes its owner. The bucket ACL permissions are set to \"private\",\n that is, the owner gets FULL_CONTROL, whereas no one else has access rights.\n The bucket name must comply with the following rules:\n \n   bucket names must be no more than 255 characters long.\n   bucket names must be a combination of uppercase letters, lowercase letters,\n   numbers, periods (.), dashes (-) and underscores (_).\n \n For more details, refer to the\n \n Amazon S3 Bucket Restrictions page.\n \n If the specified bucket already exists in the US Standard region and has\n the same owner, its permissions settings are reset and its contents are\n preserved. Otherwise, if the specified bucket already exists an s3:REQUEST\n error is raised.\n Example:\n \n s3:create-bucket(\"28msec\");\n \n \n", 
        "params" : [ "$bucket" ]
      }, {
        "description" : " Creates a bucket using the specified S3 credentials. The bucket owner will\n be the account of the specified S3 credentials.\n The bucket is created with the S3 default bucket settings. Specifically,\n it is created in the US Standard region and the specified credentials\n account becomes its owner. The bucket ACL permissions are set to \"private\",\n that is, the owner gets FULL_CONTROL, whereas no one else has access rights.\n The bucket name must comply with the following rules:\n \n   bucket names must be no more than 255 characters long.\n   bucket names must be a combination of uppercase letters, lowercase letters,\n   numbers, periods (.), dashes (-) and underscores (_).\n \n For more details, refer to the\n \n Amazon S3 Bucket Restrictions page.\n \n If the specified bucket already exists in the US Standard region and has\n the same owner, its permissions settings are reset and its contents are\n preserved. Otherwise, if the specified bucket already exists an s3:REQUEST\n error is raised.\n", 
        "params" : [ "$credentials", "$bucket" ]
      } ], 
      "delete-bucket" : [ {
        "description" : " Deletes a bucket using the default S3 credentials. The bucket must be owned\n by the account of the default S3 credentials.\n This operation will fail if the deleted bucket is not empty. All objects,\n object versions, and delete markers have to be deleted beforehand using this\n function.\n Example:\n \n s3:delete-bucket(\"28msec\");\n \n \n", 
        "params" : [ "$bucket" ]
      }, {
        "description" : " Deletes a bucket using the specified S3 credentials. The bucket must be owned\n by the account of the specified S3 credentials.\n This operation will fail if the deleted bucket is not empty. All objects,\n object versions, and delete markers have to be deleted beforehand using this\n function.\n Example:\n \n s3:delete-bucket(\"credentials\", \"28msec\");\n \n \n", 
        "params" : [ "$credentials", "$bucket" ]
      } ], 
      "list-buckets" : [ {
        "description" : " Lists all buckets owned by the account of the default S3 credentials.\n This function is declared as deterministic and should be used whenever result\n caching is acceptable.\n Example:\n \n s3:list-buckets()\n \n \n Example return object:\n \n {\n   \"owner\" :\n   {\n     \"id\": \"dfe08489302934392afe39239fe953039d9e2af0c94\",\n     \"displayName\": \"28msec\"\n   },\n   \"buckets\" :\n   [\n     {\n       \"name\": \"28msec\",\n       \"creationDate\": \"2010-11-03T17:42:45.000Z\",\n     }\n   ]\n }\n \n \n The fields in the returned object have the following meanings:\n \n   owner: an object which specifies the owner of the bucket (object,\n   mandatory). It has the following fields:\n   \n     id: the user identifier of the bucket owner (string, mandatory).\n     displayName: the screen name of the bucket owner (string, mandatory).\n   \n   \n   buckets: an array which contains an object for each owned bucket\n   (array, mandatory). Each object contains the following fields:\n   \n     name: the bucket name (string, mandatory).\n     creationDate: the bucket creation date. (dateTime, mandatory).\n   \n   \n \n \n", 
        "params" : [  ]
      }, {
        "description" : " Lists all buckets owned by the account of the specified S3 credentials.\n This function is declared as deterministic and should be used whenever result\n caching is acceptable.\n Example:\n \n s3:list-buckets(\"credentials\")\n \n \n Example return object:\n \n {\n   \"owner\" :\n   {\n     \"id\": \"dfe08489302934392afe39239fe953039d9e2af0c94\",\n     \"displayName\": \"28msec\"\n   },\n   \"buckets\" :\n   [\n     {\n       \"name\": \"28msec\",\n       \"creationDate\": \"2010-11-03T17:42:45.000Z\",\n     }\n   ]\n }\n \n \n The fields in the returned object have the following meanings:\n \n   owner: an object which specifies the owner of the bucket (object,\n   mandatory). It has the following fields:\n   \n     id: the user identifier of the bucket owner (string, mandatory).\n     displayName: the screen name of the bucket owner (string, mandatory).\n   \n   \n   buckets: an array which contains an object for each owned bucket\n   (array, mandatory). Each object contains the following fields:\n   \n     name: the bucket name (string, mandatory).\n     creationDate: the bucket creation date. (dateTime, mandatory).\n   \n   \n \n \n", 
        "params" : [ "$credentials" ]
      } ], 
      "list-buckets-nondeterministic" : [ {
        "description" : " Lists all buckets owned by the account of the default S3 credentials.\n This function has the same semantics as\n list-buckets#0,\n but is declared as being non deterministic and thus should only be used when\n result caching is not desired.\n", 
        "params" : [  ]
      }, {
        "description" : " Lists all buckets owned by the account of the specified S3 credentials.\n This function has the same semantics as\n list-buckets#1,\n but is declared as being non deterministic and thus should only be used when\n result caching is not desired.\n", 
        "params" : [ "$credentials" ]
      } ], 
      "list-bucket" : [ {
        "description" : " Lists the objects in the default bucket of the default S3 credentials.\n This function is declared as deterministic and should be used whenever result\n caching is acceptable.\n Example:\n \n s3:list-bucket(\"28msec\")\n \n \n Example return object:\n \n {\n   \"name\": \"28msec\",\n   \"prefix\": \"\",\n   \"marker\" : \"\",\n   \"nextMarker\": \"marker\",\n   \"maxKeys\": 1,\n   \"delimiter\": \"\",\n   \"isTruncated\": true,\n   \"contents\":\n   [\n     {\n       \"key\": \"image.jpg\",\n       \"lastModified\": \"2009-10-12T17:50:30.000Z\",\n       \"eTag\": \"\\\"fba9dede5f27731c9771645a39863328\\\"\",\n       \"size\": 434234,\n       \"storageClass\": \"STANDARD\"\n       \"owner\":\n       {\n         \"id\": \"75aa57f09aa0c8caeab4f8c24e99d10f8e7faeebf76c078efc7c6caea54ba06a\"\n         \"displayName\": \"mtd@amazon.com\"\n       }\n     }\n   ]\n }\n \n \n The fields in the returned object have the following meanings:\n \n   name: the bucket name (string, mandatory).\n   prefix: the used prefix (string, mandatory).\n   marker: indicates where in the bucket listing begins (string, mandatory).\n   nextMarker: when the response is truncated, you can use the key name\n   in this field as marker in the subsequent request to get next set of objects.\n   Amazon S3 lists objects in alphabetical order. This field is returned only\n   if you have specified the delimiter request parameter. If the response does\n   not include the nextMaker field and it is truncated, you can use the value\n   of the last Key in the response as the marker in the subsequent request to\n   get the next set of object keys. (string, optional)\n   maxKeys: the maximum number of keys returned in the response body\n   (integer, mandatory).\n   delimiter: the used delimiter (string, optional).\n   isTruncated: whether or not all of the results were returned. All of the\n   results may not be returned if the number of results exceeds that specified\n   by the maxKeys request parameter (boolean, mandatory).\n   contents: an array of objects listing the bucket content  (array, mandatory).\n   The fields of each contained object have the following meaning:\n   \n     key: the object key (string, mandatory).\n     lastModified: the object last modification date (dateTime, mandatory).\n     eTag: the entity tag is a hash of the object. The eTag only reflects\n     changes to the contents of an object, not its metadata. The eTag is determined\n     when an object is created. For objects created by the PUT Object operation\n     and the POST Object operation, the eTag is a quoted, 32-digit hexadecimal\n     string representing the MD5 digest of the object data. For other objects,\n     the eTag may or may not be an MD5 digest of the object data. If the eTag is\n     not an MD5 digest of the object data, it will contain one or more non-hexadecimal\n     characters and/or will consist of less than 32 or more than 32 hexadecimal\n     digits.(string, mandatory).\n     storageClass: the object storage class. One of \"STANDARD\",\n     \"REDUCED_REDUNDANCY\" or \"GLACIER\" (string, mandatory).\n     owner: an object which specifies the owner of the object (object,\n     optional). It has the following fields:\n     \n       id: the user identifier of the object owner (string, mandatory).\n       displayName: the screen name of the object owner (string, mandatory).\n     \n     \n   \n   \n \n \n", 
        "params" : [  ]
      }, {
        "description" : " Lists the objects in a bucket using the default S3 credentials.\n This function is declared as deterministic and should be used whenever result\n caching is acceptable.\n Example:\n \n s3:list-bucket(\"28msec\")\n \n \n Example return object:\n \n {\n   \"name\": \"28msec\",\n   \"prefix\": \"\",\n   \"marker\" : \"\",\n   \"nextMarker\": \"marker\",\n   \"maxKeys\": 1,\n   \"delimiter\": \"\",\n   \"isTruncated\": true,\n   \"contents\":\n   [\n     {\n       \"key\": \"image.jpg\",\n       \"lastModified\": \"2009-10-12T17:50:30.000Z\",\n       \"eTag\": \"\\\"fba9dede5f27731c9771645a39863328\\\"\",\n       \"size\": 434234,\n       \"storageClass\": \"STANDARD\"\n       \"owner\":\n       {\n         \"id\": \"75aa57f09aa0c8caeab4f8c24e99d10f8e7faeebf76c078efc7c6caea54ba06a\"\n         \"displayName\": \"mtd@amazon.com\"\n       }\n     }\n   ]\n }\n \n The meanings of the fields in the return object are the following:\n \n   name: the bucket name (string, mandatory).\n   prefix: the used prefix (string, mandatory).\n   marker: indicates where in the bucket listing begins (string, mandatory).\n   nextMarker: when the response is truncated, you can use the key name\n   in this field as marker in the subsequent request to get next set of objects.\n   Amazon S3 lists objects in alphabetical order. This field is returned only\n   if you have specified the delimiter request parameter. If the response does\n   not include the nextMaker field and it is truncated, you can use the value\n   of the last Key in the response as the marker in the subsequent request to\n   get the next set of object keys. (string, optional)\n   maxKeys: the maximum number of keys returned in the response body\n   (integer, mandatory).\n   delimiter: the used delimiter (string, optional).\n   isTruncated: whether or not all of the results were returned. All of the\n   results may not be returned if the number of results exceeds that specified\n   by the maxKeys request parameter (boolean, mandatory).\n   contents: an array of objects listing the bucket content  (array, mandatory).\n   The fields of each contained object have the following meaning:\n   \n     key: the object key (string, mandatory).\n     lastModified: the object last modification date (dateTime, mandatory).\n     eTag: the entity tag is a hash of the object. The eTag only reflects\n     changes to the contents of an object, not its metadata. The eTag is determined\n     when an object is created. For objects created by the PUT Object operation\n     and the POST Object operation, the eTag is a quoted, 32-digit hexadecimal\n     string representing the MD5 digest of the object data. For other objects,\n     the eTag may or may not be an MD5 digest of the object data. If the eTag is\n     not an MD5 digest of the object data, it will contain one or more non-hexadecimal\n     characters and/or will consist of less than 32 or more than 32 hexadecimal\n     digits.(string, mandatory).\n     storageClass: the object storage class. One of \"STANDARD\",\n     \"REDUCED_REDUNDANCY\" or \"GLACIER\" (string, mandatory).\n     owner: an object which specifies the owner of the object (object,\n     optional). It has the following fields:\n     \n       id: the user identifier of the object owner (string, mandatory).\n       displayName: the screen name of the object owner (string, mandatory).\n     \n     \n   \n   \n \n \n", 
        "params" : [ "$bucket" ]
      }, {
        "description" : " Lists the objects in a bucket using the default S3 credentials.\n This method allows the specification of additional listing options.\n This function is declared as deterministic and should be used whenever result\n caching is acceptable.\n Example:\n \n let $options :=\n {\n   \"delimiter\": \"/\",\n   \"marker\": \"\",\n   \"maxKeys\": 1,\n   \"prefix\": \"\"\n }\n return s3:list-bucket(\"credentials\", \"28msec\", $options)\n \n \n The options object must have the following structure:\n \n   delimiter: the delimiter marks where the listed results stop. For example,\n       a delimiter / lists all objects starting with $prefix plus arbitrary\n       characters but not / (string, optional). Default is the empty string,\n       that is, all objects are listed.\n   marker: specifies a key as starting point; following keys (lexicographically\n       greater than the marker) in alphabetical order are listed (string, optional).\n       Default is the empty string, that is, all objects are listed.\n   maxKeys: the maximum number of keys returned. If more keys than maxKeys\n       can be fetched, the result contains true\n       (integer, optional). Default is 1000.\n   prefix: only keys starting with the prefix are returned (string, optional).\n       Default is the empty string, that is, all objects are listed.\n \n \n Example return object:\n \n {\n   \"name\": \"bucket\",\n   \"prefix\": \"\",\n   \"marker\" : \"\",\n   \"nextMarker\": \"marker\",\n   \"maxKeys\": 1,\n   \"delimiter\": \"/\",\n   \"isTruncated\": true,\n   \"contents\":\n   [\n     {\n       \"key\": \"image.jpg\",\n       \"lastModified\": \"2009-10-12T17:50:30.000Z\",\n       \"eTag\": \"\\\"fba9dede5f27731c9771645a39863328\\\"\",\n       \"size\": 434234,\n       \"storageClass\": \"STANDARD\"\n       \"owner\":\n       {\n         \"id\": \"75aa57f09aa0c8caeab4f8c24e99d10f8e7faeebf76c078efc7c6caea54ba06a\"\n         \"displayName\": \"mtd@amazon.com\"\n       }\n     }\n   ],\n   \"commonPrefixes\": [\"photos/\"]\n }\n \n \n The fields in the returned object have the following meanings:\n \n   name: the bucket name (string, mandatory).\n   prefix: the used prefix (string, mandatory).\n   marker: indicates where in the bucket listing begins (string, mandatory).\n   nextMarker: when the response is truncated, you can use the key name\n   in this field as marker in the subsequent request to get next set of objects.\n   Amazon S3 lists objects in alphabetical order. This field is returned only\n   if you have specified the delimiter request parameter. If the response does\n   not include the nextMaker field and it is truncated, you can use the value\n   of the last Key in the response as the marker in the subsequent request to\n   get the next set of object keys. (string, optional)\n   maxKeys: the maximum number of keys returned in the response body\n   (integer, mandatory).\n   delimiter: the used delimiter (string, optional).\n   isTruncated: whether or not all of the results were returned. All of the\n   results may not be returned if the number of results exceeds that specified\n   by the maxKeys request parameter (boolean, mandatory).\n   contents: an array of objects listing the bucket content  (array, mandatory).\n   The fields of each contained object have the following meaning:\n   \n     key: the object key (string, mandatory).\n     lastModified: the object last modification date (dateTime, mandatory).\n     eTag: the entity tag is a hash of the object. The eTag only reflects\n     changes to the contents of an object, not its metadata. The eTag is determined\n     when an object is created. For objects created by the PUT Object operation\n     and the POST Object operation, the eTag is a quoted, 32-digit hexadecimal\n     string representing the MD5 digest of the object data. For other objects,\n     the eTag may or may not be an MD5 digest of the object data. If the eTag is\n     not an MD5 digest of the object data, it will contain one or more non-hexadecimal\n     characters and/or will consist of less than 32 or more than 32 hexadecimal\n     digits.(string, mandatory).\n     storageClass: the object storage class. One of \"STANDARD\",\n     \"REDUCED_REDUNDANCY\" or \"GLACIER\" (string, mandatory).\n     owner: an object which specifies the owner of the object (object,\n     optional). It has the following fields:\n     \n       id: the user identifier of the object owner (string, mandatory).\n       displayName: the screen name of the object owner (string, mandatory).\n     \n     \n   \n   \n   commonPrefixes: an array of strings which contains the list of the common\n   prefixes. It can be present only when the delimiter request parameter is\n   specified (array, optional).\n \n \n", 
        "params" : [ "$bucket", "$options" ]
      }, {
        "description" : " Lists the objects in a bucket using the specified credentials.\n This method allows the specification of additional listing options.\n This function is declared as deterministic and should be used whenever result\n caching is acceptable.\n Example:\n \n let $options :=\n {\n   \"delimiter\": \"/\",\n   \"marker\": \"\",\n   \"maxKeys\": 1,\n   \"prefix\": \"\"\n }\n return s3:list-bucket(\"credentials\", \"28msec\", $options)\n \n \n The options object must have the following structure:\n \n   delimiter: the delimiter marks where the listed results stop. For example,\n       a delimiter / lists all objects starting with $prefix plus arbitrary\n       characters but not / (string, optional). Default is the empty string,\n       that is, all objects are listed.\n   marker: specifies a key as starting point; following keys (lexicographically\n       greater than the marker) in alphabetical order are listed (string, optional).\n       Default is the empty string, that is, all objects are listed.\n   maxKeys: the maximum number of keys returned. If more keys than maxKeys\n       can be fetched, the result contains true\n       (integer, optional). Default is 1000.\n   prefix: only keys starting with the prefix are returned (string, optional).\n       Default is the empty string, that is, all objects are listed.\n \n \n Example result:\n \n {\n   \"name\": \"bucket\",\n   \"prefix\": \"\",\n   \"marker\" : \"\",\n   \"nextMarker\": \"marker\",\n   \"maxKeys\": 1,\n   \"delimiter\": \"/\",\n   \"isTruncated\": true,\n   \"contents\":\n   [\n     {\n       \"key\": \"image.jpg\",\n       \"lastModified\": \"2009-10-12T17:50:30.000Z\",\n       \"eTag\": \"\\\"fba9dede5f27731c9771645a39863328\\\"\",\n       \"size\": 434234,\n       \"storageClass\": \"STANDARD\"\n       \"owner\":\n       {\n         \"id\": \"75aa57f09aa0c8caeab4f8c24e99d10f8e7faeebf76c078efc7c6caea54ba06a\"\n         \"displayName\": \"mtd@amazon.com\"\n       }\n     }\n   ],\n   \"commonPrefixes\": [\"photos/\"]\n }\n \n \n The fields in the returned object have the following meanings:\n \n   name: the bucket name (string, mandatory).\n   prefix: the used prefix (string, mandatory).\n   marker: indicates where in the bucket listing begins (string, mandatory).\n   nextMarker: when the response is truncated, you can use the key name\n   in this field as marker in the subsequent request to get next set of objects.\n   Amazon S3 lists objects in alphabetical order. This field is returned only\n   if you have specified the delimiter request parameter. If the response does\n   not include the nextMaker field and it is truncated, you can use the value\n   of the last Key in the response as the marker in the subsequent request to\n   get the next set of object keys. (string, optional)\n   maxKeys: the maximum number of keys returned in the response body\n   (integer, mandatory).\n   delimiter: the used delimiter (string, optional).\n   isTruncated: whether or not all of the results were returned. All of the\n   results may not be returned if the number of results exceeds that specified\n   by the maxKeys request parameter (boolean, mandatory).\n   contents: an array of objects listing the bucket content  (array, mandatory).\n   The fields of each contained object have the following meaning:\n   \n     key: the object key (string, mandatory).\n     lastModified: the object last modification date (dateTime, mandatory).\n     eTag: the entity tag is a hash of the object. The eTag only reflects\n     changes to the contents of an object, not its metadata. The eTag is determined\n     when an object is created. For objects created by the PUT Object operation\n     and the POST Object operation, the eTag is a quoted, 32-digit hexadecimal\n     string representing the MD5 digest of the object data. For other objects,\n     the eTag may or may not be an MD5 digest of the object data. If the eTag is\n     not an MD5 digest of the object data, it will contain one or more non-hexadecimal\n     characters and/or will consist of less than 32 or more than 32 hexadecimal\n     digits.(string, mandatory).\n     storageClass: the object storage class. One of \"STANDARD\",\n     \"REDUCED_REDUNDANCY\" or \"GLACIER\" (string, mandatory).\n     owner: an object which specifies the owner of the object (object,\n     optional). It has the following fields:\n     \n       id: the user identifier of the object owner (string, mandatory).\n       displayName: the screen name of the object owner (string, mandatory).\n     \n     \n   \n   \n   commonPrefixes: an array of strings which contains the list of the common\n   prefixes. It can be present only when the delimiter request parameter is\n   specified (array, optional).\n \n \n", 
        "params" : [ "$credentials", "$bucket", "$options" ]
      } ], 
      "list-bucket-nondeterministic" : [ {
        "description" : " Lists the objects in the default bucket of the default S3 credentials.\n This function has the same semantics as\n list-bucket#0,\n but is declared as being non deterministic and thus should only be used when\n result caching is not desired.\n", 
        "params" : [  ]
      }, {
        "description" : " Lists the objects in a bucket using the default S3 credentials.\n This function has the same semantics as\n list-bucket#1,\n but is declared as being non deterministic and thus should only be used when\n result caching is not desired.\n", 
        "params" : [ "$bucket" ]
      }, {
        "description" : " Lists the objects in a bucket using the default S3 credentials.\n This method allows the specification of additional listing options.\n This function has the same semantics as\n list-bucket#2,\n but is declared as being non deterministic and thus should only be used when\n result caching is not desired.\n", 
        "params" : [ "$bucket", "$options" ]
      }, {
        "description" : " Lists the objects in a bucket using the specified credentials.\n This method allows the specification of additional listing options.\n This function has the same semantics as\n list-bucket#3,\n but is declared as being non deterministic and thus should only be used when\n result caching is not desired.\n", 
        "params" : [ "$credentials", "$bucket", "$options" ]
      } ], 
      "list-bucket-versions" : [ {
        "description" : " Lists the objects versions in the default bucket of the default S3\n credentials.\n This function is declared as deterministic and should be used whenever result\n caching is acceptable.\n Example:\n \n s3:list-bucket-versions()\n \n \n Example return object:\n \n {\n   \"name\": \"bucket\",\n   \"prefix\": \"\",\n   \"keyMarker\" : \"image.jpg\",\n   \"versionIdMarker\" : \"QUpfdndhfd8438MNFDN93jdnJFkdmqnh893\",\n   \"nextKeyMarker\": \"marker\",\n   \"nextVersionIdMarker\": \"UIORUnfndfhnw89493jJFJ\",\n   \"maxKeys\": 1,\n   \"delimiter\": \"/\",\n   \"isTruncated\": true,\n   \"revisions\":\n   [\n     {\n       \"kind\": \"Version\",\n       \"key\": \"image.jpg\",\n       \"versionId\": \"QUpfdndhfd8438MNFDN93jdnJFkdmqnh893\",\n       \"isLatest\": false,\n       \"lastModified\": \"2009-10-12T17:50:30.000Z\",\n       \"eTag\": \"\\\"fba9dede5f27731c9771645a39863328\\\"\",\n       \"size\": 434234,\n       \"storageClass\": \"STANDARD\",\n       \"owner\":\n       {\n         \"id\": \"75aa57f09aa0c8caeab4f8c24e99d10f8e7faeebf76c078efc7c6caea54ba06a\"\n         \"displayName\": \"mtd@amazon.com\"\n       }\n     },\n     {\n       \"kind\": \"DeleteMarker\",\n       \"key\": \"image.jpg\",\n       \"versionId\": \"03jpff543dhffds434rfdsFDN943fdsFkdmqnh892\",\n       \"isLatest\": true,\n       \"lastModified\": \"2009-10-12T17:50:30.000Z\",\n       \"owner\":\n       {\n         \"id\": \"75aa57f09aa0c8caeab4f8c24e99d10f8e7faeebf76c078efc7c6caea54ba06a\"\n         \"displayName\": \"mtd@amazon.com\"\n       }\n     }\n   ],\n   \"commonPrefixes\": [\"photos/\"]\n }\n \n \n The fields in the returned object have the following meanings:\n \n   name: the bucket name (string, mandatory).\n   prefix: the used prefix (string, mandatory).\n   keyMarker: indicates from which key in the listing begins\n   (string, mandatory).\n   versionMarker: indicates from which version  the listing begins\n   (string, optional).\n   nextKeyMarker: when the number of responses exceeds the value of maxKeys,\n   nextKeyMarker specifies the first key not returned that satisfies the search\n   criteria. Use this value for the keyMarker request parameter in a subsequent\n   request. (string, optional)\n   nextVersionMarker: when the number of responses exceeds the value of maxKeys,\n   nextVersionIdMarker specifies the first object version not returned that\n   satisfies the search criteria. Use this value for the versionMarker request\n   parameter in a subsequent request. (string, optional)\n   maxKeys: the maximum number of keys returned in the response body\n   (integer, mandatory).\n   delimiter: the used delimiter (string, optional).\n   isTruncated: whether or not all of the results were returned. All of the\n   results may not be returned if the number of results exceeds that specified\n   by the maxKeys request parameter (boolean, mandatory).\n   revisions: an array of objects listing the bucket object versions\n   (array, mandatory). The fields of each contained object have the following\n   meaning:\n   \n     kind: the revision kind. One of \"Version\" or \"DeleteMarker\" (string,\n     mandatory).\n     key: the object key (string, mandatory).\n     versionId: the object version id (string, mandatory).\n     lastModified: the object last modification date (dateTime, mandatory).\n     eTag: the entity tag is a hash of the object. The eTag only reflects\n     changes to the contents of an object, not its metadata. The eTag is determined\n     when an object is created. For objects created by the PUT Object operation\n     and the POST Object operation, the eTag is a quoted, 32-digit hexadecimal\n     string representing the MD5 digest of the object data. For other objects,\n     the eTag may or may not be an MD5 digest of the object data. If the eTag is\n     not an MD5 digest of the object data, it will contain one or more non-hexadecimal\n     characters and/or will consist of less than 32 or more than 32 hexadecimal\n     digits.(string, mandatory for \"Version\" objects, not present for\n     \"DeleteMarker\" objects).\n     size: the object size in bytes (integer, mandatory for \"Version\" objects,\n     not present for \"DeleteMarker\" objects).\n     storageClass: the object storage class. One of \"STANDARD\",\n     \"REDUCED_REDUNDANCY\" or \"GLACIER\" (string, mandatory for \"Version\" objects,\n     not present for \"DeleteMarker\" objects).\n     owner: an object which specifies the owner of the object (object,\n     optional). It has the following fields:\n     \n       id: the user identifier of the object owner (string, mandatory).\n       displayName: the screen name of the object owner (string, mandatory).\n     \n     \n   \n   \n   commonPrefixes: an array of strings which contains the list of the common\n   prefixes. It can be present only when the delimiter request parameter is\n   specified (array, optional).\n \n \n", 
        "params" : [  ]
      }, {
        "description" : " Lists the objects versions in a bucket using the default S3 credentials.\n This function is declared as deterministic and should be used whenever result\n caching is acceptable.\n Example:\n \n s3:list-bucket-versions(\"28msec\")\n \n \n Example return object:\n \n {\n   \"name\": \"bucket\",\n   \"prefix\": \"\",\n   \"keyMarker\" : \"image.jpg\",\n   \"versionIdMarker\" : \"QUpfdndhfd8438MNFDN93jdnJFkdmqnh893\",\n   \"nextKeyMarker\": \"marker\",\n   \"nextVersionIdMarker\": \"UIORUnfndfhnw89493jJFJ\",\n   \"maxKeys\": 1,\n   \"delimiter\": \"/\",\n   \"isTruncated\": true,\n   \"revisions\":\n   [\n     {\n       \"kind\": \"Version\",\n       \"key\": \"image.jpg\",\n       \"versionId\": \"QUpfdndhfd8438MNFDN93jdnJFkdmqnh893\",\n       \"isLatest\": false,\n       \"lastModified\": \"2009-10-12T17:50:30.000Z\",\n       \"eTag\": \"\\\"fba9dede5f27731c9771645a39863328\\\"\",\n       \"size\": 434234,\n       \"storageClass\": \"STANDARD\",\n       \"owner\":\n       {\n         \"id\": \"75aa57f09aa0c8caeab4f8c24e99d10f8e7faeebf76c078efc7c6caea54ba06a\"\n         \"displayName\": \"mtd@amazon.com\"\n       }\n     },\n     {\n       \"kind\": \"DeleteMarker\",\n       \"key\": \"image.jpg\",\n       \"versionId\": \"03jpff543dhffds434rfdsFDN943fdsFkdmqnh892\",\n       \"isLatest\": true,\n       \"lastModified\": \"2009-10-12T17:50:30.000Z\",\n       \"owner\":\n       {\n         \"id\": \"75aa57f09aa0c8caeab4f8c24e99d10f8e7faeebf76c078efc7c6caea54ba06a\"\n         \"displayName\": \"mtd@amazon.com\"\n       }\n     }\n   ],\n   \"commonPrefixes\": [\"photos/\"]\n }\n \n \n The fields in the returned object have the following meanings:\n \n   name: the bucket name (string, mandatory).\n   prefix: the used prefix (string, mandatory).\n   keyMarker: indicates from which key in the listing begins\n   (string, mandatory).\n   versionMarker: indicates from which version  the listing begins\n   (string, optional).\n   nextKeyMarker: when the number of responses exceeds the value of maxKeys,\n   nextKeyMarker specifies the first key not returned that satisfies the search\n   criteria. Use this value for the keyMarker request parameter in a subsequent\n   request. (string, optional)\n   nextVersionMarker: when the number of responses exceeds the value of maxKeys,\n   nextVersionIdMarker specifies the first object version not returned that\n   satisfies the search criteria. Use this value for the versionMarker request\n   parameter in a subsequent request. (string, optional)\n   maxKeys: the maximum number of keys returned in the response body\n   (integer, mandatory).\n   delimiter: the used delimiter (string, optional).\n   isTruncated: whether or not all of the results were returned. All of the\n   results may not be returned if the number of results exceeds that specified\n   by the maxKeys request parameter (boolean, mandatory).\n   revisions: an array of objects listing the bucket object versions\n   (array, mandatory). The fields of each contained object have the following\n   meaning:\n   \n     kind: the revision kind. One of \"Version\" or \"DeleteMarker\" (string,\n     mandatory).\n     key: the object key (string, mandatory).\n     versionId: the object version id (string, mandatory).\n     lastModified: the object last modification date (dateTime, mandatory).\n     eTag: the entity tag is a hash of the object. The eTag only reflects\n     changes to the contents of an object, not its metadata. The eTag is determined\n     when an object is created. For objects created by the PUT Object operation\n     and the POST Object operation, the eTag is a quoted, 32-digit hexadecimal\n     string representing the MD5 digest of the object data. For other objects,\n     the eTag may or may not be an MD5 digest of the object data. If the eTag is\n     not an MD5 digest of the object data, it will contain one or more non-hexadecimal\n     characters and/or will consist of less than 32 or more than 32 hexadecimal\n     digits.(string, mandatory for \"Version\" objects, not present for\n     \"DeleteMarker\" objects).\n     size: the object size in bytes (integer, mandatory for \"Version\" objects,\n     not present for \"DeleteMarker\" objects).\n     storageClass: the object storage class. One of \"STANDARD\",\n     \"REDUCED_REDUNDANCY\" or \"GLACIER\" (string, mandatory for \"Version\" objects,\n     not present for \"DeleteMarker\" objects).\n     owner: an object which specifies the owner of the object (object,\n     optional). It has the following fields:\n     \n       id: the user identifier of the object owner (string, mandatory).\n       displayName: the screen name of the object owner (string, mandatory).\n     \n     \n   \n   \n   commonPrefixes: an array of strings which contains the list of the common\n   prefixes. It can be present only when the delimiter request parameter is\n   specified (array, optional).\n \n \n", 
        "params" : [ "$bucket" ]
      }, {
        "description" : " Lists the objects versions in a bucket using the default S3 credentials.\n This method allows the specification of additional listing options.\n This function is declared as deterministic and should be used whenever result\n caching is acceptable.\n Example:\n \n let $options :=\n {\n   \"delimiter\": \"/\",\n   \"maxKeys\": 2,\n   \"keyMarker\": \"image.jpg\",\n   \"versionIdMarker\" : \"QUpfdndhfd8438MNFDN93jdnJFkdmqnh893\"\n }\n return s3:list-bucket-versions(\"28msec\", $options)\n \n \n The options object must have the following structure:\n \n   delimiter: the delimiter marks where the listed results stop. For example,\n       a delimiter / lists all objects starting with $prefix plus arbitrary\n       characters but not / (string, optional). Default is the empty string,\n       that is, all objects are listed.\n   keyMarker: specifies a key as starting point; following keys (lexicographically\n       greater than the marker) in alphabetical order are listed (string, optional).\n       Default is the empty string, that is, all objects are listed.\n   versionMarker: specifies the object version you want starting from;\n       following revisions (newer than the marker) are listed (string, optional).\n       By default all versions are listed. Empty string is not allowed.\n   maxKeys: the maximum number of keys returned. If more keys than maxKeys\n       can be fetched, the result contains true\n       (integer, optional). Default is 1000.\n   prefix: only keys starting with the prefix are returned (string, optional).\n       Default is the empty string, that is, all objects are listed.\n \n \n Example return object:\n \n {\n   \"name\": \"bucket\",\n   \"prefix\": \"\",\n   \"keyMarker\" : \"image.jpg\",\n   \"versionIdMarker\" : \"QUpfdndhfd8438MNFDN93jdnJFkdmqnh893\",\n   \"nextKeyMarker\": \"marker\",\n   \"nextVersionIdMarker\": \"UIORUnfndfhnw89493jJFJ\",\n   \"maxKeys\": 1,\n   \"delimiter\": \"/\",\n   \"isTruncated\": true,\n   \"revisions\":\n   [\n     {\n       \"kind\": \"Version\",\n       \"key\": \"image.jpg\",\n       \"versionId\": \"QUpfdndhfd8438MNFDN93jdnJFkdmqnh893\",\n       \"isLatest\": false,\n       \"lastModified\": \"2009-10-12T17:50:30.000Z\",\n       \"eTag\": \"\\\"fba9dede5f27731c9771645a39863328\\\"\",\n       \"size\": 434234,\n       \"storageClass\": \"STANDARD\",\n       \"owner\":\n       {\n         \"id\": \"75aa57f09aa0c8caeab4f8c24e99d10f8e7faeebf76c078efc7c6caea54ba06a\"\n         \"displayName\": \"mtd@amazon.com\"\n       }\n     },\n     {\n       \"kind\": \"DeleteMarker\",\n       \"key\": \"image.jpg\",\n       \"versionId\": \"03jpff543dhffds434rfdsFDN943fdsFkdmqnh892\",\n       \"isLatest\": true,\n       \"lastModified\": \"2009-10-12T17:50:30.000Z\",\n       \"owner\":\n       {\n         \"id\": \"75aa57f09aa0c8caeab4f8c24e99d10f8e7faeebf76c078efc7c6caea54ba06a\"\n         \"displayName\": \"mtd@amazon.com\"\n       }\n     }\n   ],\n   \"commonPrefixes\": [\"photos/\"]\n }\n \n \n The fields in the returned object have the following meanings:\n \n   name: the bucket name (string, mandatory).\n   prefix: the used prefix (string, mandatory).\n   keyMarker: indicates from which key in the listing begins\n   (string, mandatory).\n   versionMarker: indicates from which version  the listing begins\n   (string, optional).\n   nextKeyMarker: when the number of responses exceeds the value of maxKeys,\n   nextKeyMarker specifies the first key not returned that satisfies the search\n   criteria. Use this value for the keyMarker request parameter in a subsequent\n   request. (string, optional)\n   nextVersionMarker: when the number of responses exceeds the value of maxKeys,\n   nextVersionIdMarker specifies the first object version not returned that\n   satisfies the search criteria. Use this value for the versionMarker request\n   parameter in a subsequent request. (string, optional)\n   maxKeys: the maximum number of keys returned in the response body\n   (integer, mandatory).\n   delimiter: the used delimiter (string, optional).\n   isTruncated: whether or not all of the results were returned. All of the\n   results may not be returned if the number of results exceeds that specified\n   by the maxKeys request parameter (boolean, mandatory).\n   revisions: an array of objects listing the bucket object versions\n   (array, mandatory). The fields of each contained object have the following\n   meaning:\n   \n     kind: the revision kind. One of \"Version\" or \"DeleteMarker\" (string,\n     mandatory).\n     key: the object key (string, mandatory).\n     versionId: the object version id (string, mandatory).\n     lastModified: the object last modification date (dateTime, mandatory).\n     eTag: the entity tag is a hash of the object. The eTag only reflects\n     changes to the contents of an object, not its metadata. The eTag is determined\n     when an object is created. For objects created by the PUT Object operation\n     and the POST Object operation, the eTag is a quoted, 32-digit hexadecimal\n     string representing the MD5 digest of the object data. For other objects,\n     the eTag may or may not be an MD5 digest of the object data. If the eTag is\n     not an MD5 digest of the object data, it will contain one or more non-hexadecimal\n     characters and/or will consist of less than 32 or more than 32 hexadecimal\n     digits.(string, mandatory for \"Version\" objects, not present for\n     \"DeleteMarker\" objects).\n     size: the object size in bytes (integer, mandatory for \"Version\" objects,\n     not present for \"DeleteMarker\" objects).\n     storageClass: the object storage class. One of \"STANDARD\",\n     \"REDUCED_REDUNDANCY\" or \"GLACIER\" (string, mandatory for \"Version\" objects,\n     not present for \"DeleteMarker\" objects).\n     owner: an object which specifies the owner of the object (object,\n     optional). It has the following fields:\n     \n       id: the user identifier of the object owner (string, mandatory).\n       displayName: the screen name of the object owner (string, mandatory).\n     \n     \n   \n   \n   commonPrefixes: an array of strings which contains the list of the common\n   prefixes. It can be present only when the delimiter request parameter is\n   specified (array, optional).\n \n \n", 
        "params" : [ "$bucket", "$options" ]
      }, {
        "description" : " Lists the objects versions in a bucket using the specified credentials.\n This method allows the specification of additional listing options.\n This function is declared as deterministic and should be used whenever result\n caching is acceptable.\n Example:\n \n let $options :=\n {\n   \"delimiter\": \"/\",\n   \"maxKeys\": 2,\n   \"keyMarker\": \"image.jpg\",\n   \"versionIdMarker\": \"QUpfdndhfd8438MNFDN93jdnJFkdmqnh893\"\n }\n return s3:list-bucket-versions(\"credentials\", \"28msec\", $options)\n \n \n The options object must have the following structure:\n \n   delimiter: the delimiter marks where the listed results stop. For example,\n       a delimiter / lists all objects starting with $prefix plus arbitrary\n       characters but not / (string, optional). Default is the empty string,\n       that is, all objects are listed.\n   keyMarker: specifies a key as starting point; following keys (lexicographically\n       greater than the marker) in alphabetical order are listed (string, optional).\n       Default is the empty string, that is, all objects are listed.\n   versionMarker: specifies the object version you want starting from;\n       following revisions (newer than the marker) are listed (string, optional).\n       By default all versions are listed. Empty string is not allowed.\n   maxKeys: the maximum number of keys returned. If more keys than maxKeys\n       can be fetched, the result contains true\n       (integer, optional). Default is 1000.\n   prefix: only keys starting with the prefix are returned (string, optional).\n       Default is the empty string, that is, all objects are listed.\n \n \n Example return object:\n \n {\n   \"name\": \"bucket\",\n   \"prefix\": \"\",\n   \"keyMarker\" : \"image.jpg\",\n   \"VersionIdMarker\" : \"QUpfdndhfd8438MNFDN93jdnJFkdmqnh893\",\n   \"nextKeyMarker\": \"marker\",\n   \"nextVersionIdMarker\": \"UIORUnfndfhnw89493jJFJ\",\n   \"maxKeys\": 1,\n   \"delimiter\": \"/\",\n   \"isTruncated\": true,\n   \"revisions\":\n   [\n     {\n       \"kind\": \"Version\",\n       \"key\": \"image.jpg\",\n       \"versionId\": \"QUpfdndhfd8438MNFDN93jdnJFkdmqnh893\",\n       \"isLatest\": false,\n       \"lastModified\": \"2009-10-12T17:50:30.000Z\",\n       \"eTag\": \"\\\"fba9dede5f27731c9771645a39863328\\\"\",\n       \"size\": 434234,\n       \"storageClass\": \"STANDARD\",\n       \"owner\":\n       {\n         \"id\": \"75aa57f09aa0c8caeab4f8c24e99d10f8e7faeebf76c078efc7c6caea54ba06a\"\n         \"displayName\": \"mtd@amazon.com\"\n       }\n     },\n     {\n       \"kind\": \"DeleteMarker\",\n       \"key\": \"image.jpg\",\n       \"versionId\": \"03jpff543dhffds434rfdsFDN943fdsFkdmqnh892\",\n       \"isLatest\": true,\n       \"lastModified\": \"2009-10-12T17:50:30.000Z\",\n       \"owner\":\n       {\n         \"id\": \"75aa57f09aa0c8caeab4f8c24e99d10f8e7faeebf76c078efc7c6caea54ba06a\"\n         \"displayName\": \"mtd@amazon.com\"\n       }\n     }\n   ],\n   \"commonPrefixes\": [\"photos/\"]\n }\n \n \n The fields in the returned object have the following meanings:\n \n   name: the bucket name (string, mandatory).\n   prefix: the used prefix (string, mandatory).\n   keyMarker: indicates from which key in the listing begins\n   (string, mandatory).\n   versionMarker: indicates from which version  the listing begins\n   (string, optional).\n   nextKeyMarker: when the number of responses exceeds the value of maxKeys,\n   nextKeyMarker specifies the first key not returned that satisfies the search\n   criteria. Use this value for the keyMarker request parameter in a subsequent\n   request. (string, optional)\n   nextVersionMarker: when the number of responses exceeds the value of maxKeys,\n   nextVersionIdMarker specifies the first object version not returned that\n   satisfies the search criteria. Use this value for the versionMarker request\n   parameter in a subsequent request. (string, optional)\n   maxKeys: the maximum number of keys returned in the response body\n   (integer, mandatory).\n   delimiter: the used delimiter (string, optional).\n   isTruncated: whether or not all of the results were returned. All of the\n   results may not be returned if the number of results exceeds that specified\n   by the maxKeys request parameter (boolean, mandatory).\n   revisions: an array of objects listing the bucket object versions\n   (array, mandatory). The fields of each contained object have the following\n   meaning:\n   \n     kind: the revision kind. One of \"Version\" or \"DeleteMarker\" (string,\n     mandatory).\n     key: the object key (string, mandatory).\n     versionId: the object version id (string, mandatory).\n     lastModified: the object last modification date (dateTime, mandatory).\n     eTag: the entity tag is a hash of the object. The eTag only reflects\n     changes to the contents of an object, not its metadata. The eTag is determined\n     when an object is created. For objects created by the PUT Object operation\n     and the POST Object operation, the eTag is a quoted, 32-digit hexadecimal\n     string representing the MD5 digest of the object data. For other objects,\n     the eTag may or may not be an MD5 digest of the object data. If the eTag is\n     not an MD5 digest of the object data, it will contain one or more non-hexadecimal\n     characters and/or will consist of less than 32 or more than 32 hexadecimal\n     digits.(string, mandatory for \"Version\" objects, not present for\n     \"DeleteMarker\" objects).\n     size: the object size in bytes (integer, mandatory for \"Version\" objects,\n     not present for \"DeleteMarker\" objects).\n     storageClass: the object storage class. One of \"STANDARD\",\n     \"REDUCED_REDUNDANCY\" or \"GLACIER\" (string, mandatory for \"Version\" objects,\n     not present for \"DeleteMarker\" objects).\n     owner: an object which specifies the owner of the object (object,\n     optional). It has the following fields:\n     \n       id: the user identifier of the object owner (string, mandatory).\n       displayName: the screen name of the object owner (string, mandatory).\n     \n     \n   \n   \n   commonPrefixes: an array of strings which contains the list of the common\n   prefixes. It can be present only when the delimiter request parameter is\n   specified (array, optional).\n \n \n", 
        "params" : [ "$credentials", "$bucket", "$options" ]
      } ], 
      "list-bucket-versions-nondeterministic" : [ {
        "description" : " Lists the objects versions in the default bucket of the default S3\n credentials.\n This function has the same semantics as\n list-bucket-versions#0,\n but is declared as being non deterministic and thus should only be used when\n result caching is not desired.\n", 
        "params" : [  ]
      }, {
        "description" : " Lists the objects versions in a bucket using the default S3 credentials.\n This function has the same semantics as\n list-bucket-versions#1,\n but is declared as being non deterministic and thus should only be used when\n result caching is not desired.\n", 
        "params" : [ "$bucket" ]
      }, {
        "description" : " Lists the objects versions in a bucket using the default S3 credentials.\n This method allows the specification of additional listing options.\n This function has the same semantics as\n list-bucket-versions#2,\n but is declared as being non deterministic and thus should only be used when\n result caching is not desired.\n", 
        "params" : [ "$bucket", "$options" ]
      }, {
        "description" : " Lists the objects versions in a bucket using the specified credentials.\n This method allows the specification of additional listing options.\n This function has the same semantics as\n list-bucket-versions#3,\n but is declared as being non deterministic and thus should only be used when\n result caching is not desired.\n", 
        "params" : [ "$credentials", "$bucket", "$options" ]
      } ], 
      "delete-object" : [ {
        "description" : " Deletes an object or a specific object version from a bucket using the\n default S3 credentials.\n The S3 object is specified through the $s3-object parameter. Either a string\n or a JSON object can be used. If a string is specified, it is interpreted as\n key for an object in the default bucket of the default credentials. If no default\n bucket is present in the default credentials, the s3:BUCKET error\n is raised. If a JSON object is used, it must have the following structure:\n \n   key: the object key (string, mandatory).\n   bucket: the bucket name (string, optional). If this field is not present\n   and the default credentials do not have a default bucket, the\n   s3:BUCKET error is raised.\n   version: the object version (string, optional). If not specified, the\n   null version of the object is removed, if there is one. To remove a specific\n   version, this field must be specified.\n \n \n If the bucket is versioned a delete marker is inserted for the object. If\n mfa-deletion is enabled you will not be able to delete an object through\n this method. If the specified bucket exists, and the specified object does not\n exist no errors will be raised.\n Example:\n \n s3:delete-object(\n {\n   \"key\": \"test.xml\",\n   \"bucket\": \"28msec\",\n   \"version\": \"3/L4kqtJlcpXroDTDmJ+rmSpXd3dIbrHY+MTRCxf3vjVBH40Nr8X8gdRQBpUMLUo\"\n });\n \n \n", 
        "params" : [ "$s3-object" ]
      }, {
        "description" : " Deletes an object or a specific object version from a bucket using the\n specified S3 credentials.\n The S3 object is specified through the $s3-object parameter. Either a string\n or a JSON object can be used. If a string is specified, it is interpreted as\n key for an object in the default bucket of the specified credentials. If no default\n bucket is present in the specified credentials, the s3:BUCKET error\n is raised. If a JSON object is used, it must have the following structure:\n \n   key: the object key (string, mandatory).\n   bucket: the bucket name (string, optional). If this field is not present\n   and the specified credentials do not have a default bucket, the\n   s3:BUCKET error is raised.\n   version: the object version (string, optional). If not specified, the\n   null version of the object is removed, if there is one. To remove a specific\n   version, this field must be specified.\n \n \n If the bucket is versioned a delete marker is inserted for the object. If\n mfa-deletion is enabled you will not be able to delete an object through\n this method. If the specified bucket exists, and the specified object does not\n exist no errors will be raised.\n Example:\n \n s3:delete-object(\"credentials\",\n {\n   \"key\": \"test.xml\",\n   \"bucket\": \"28msec\",\n   \"version\": \"3/L4kqtJlcpXroDTDmJ+rmSpXd3dIbrHY+MTRCxf3vjVBH40Nr8X8gdRQBpUMLUo\"\n });\n \n \n", 
        "params" : [ "$credentials", "$s3-object" ]
      } ], 
      "read-text" : [ {
        "description" : " Retrieves the textual content of an S3 object using the default S3 credentials.\n The object content is forced to be interpreted as textual, with a UTF-8 charset\n and will be returned as string.\n This function is declared as deterministic and should be used whenever result\n caching is acceptable.\n The S3 object is specified through the $s3-object parameter. Either a string\n or a JSON object can be used. If a string is specified, it is interpreted as\n key for an object in the default bucket of the default credentials. If no default\n bucket is present in the default credentials, the s3:BUCKET error\n is raised. If a JSON object is used, it must have the following structure:\n \n   key: the object key (string, mandatory).\n   bucket: the bucket name (string, optional). If this field is not present\n   and the default credentials do not have a default bucket, the\n   s3:BUCKET error is raised.\n   version: the object version (string, optional). If versioning is enabled\n   for the specified object and no version is specified the latest version of\n   the object will be returned. If specified, only that particular version of\n   the object will be returned.\n \n \n Example:\n \n let $object :=\n {\n   \"key\": \"object\",\n   \"bucket\": \"28msec\",\n   \"version\": \"3/L4kqtJlcpXroDTDmJ+rmSpXd3dIbrHY+MTRCxf3vjVBH40Nr8X8gdRQBpUMLUo\"\n }\n return s3:read-text(\"credentials\", $object)\n \n \n", 
        "params" : [ "$s3-object" ]
      }, {
        "description" : " Retrieves the textual content of an S3 object using the specified S3 credentials.\n The object content is forced to be interpreted as textual, with a UTF-8 charset\n and will be returned as string.\n This function is declared as deterministic and should be used whenever result\n caching is acceptable.\n The S3 object is specified through the $s3-object parameter. Either a string\n or a JSON object can be used. If a string is specified, it is interpreted as\n key for an object in the default bucket of the specified credentials. If no default\n bucket is present in the specified credentials, the s3:BUCKET error\n is raised. If a JSON object is used, it must have the following structure:\n \n   key: the object key (string, mandatory).\n   bucket: the bucket name (string, optional). If this field is not present\n   and the specified credentials do not have a default bucket, the\n   s3:BUCKET error is raised.\n   version: the object version (string, optional). If versioning is enabled\n   for the specified object and no version is specified the latest version of\n   the object will be returned. If specified, only that particular version of\n   the object will be returned.\n \n \n Example:\n \n let $object :=\n {\n   \"key\": \"object\",\n   \"bucket\": \"28msec\",\n   \"version\": \"3/L4kqtJlcpXroDTDmJ+rmSpXd3dIbrHY+MTRCxf3vjVBH40Nr8X8gdRQBpUMLUo\"\n }\n return s3:read-text(\"credentials\", $object)\n \n \n", 
        "params" : [ "$credentials", "$s3-object" ]
      } ], 
      "read-text-nondeterministic" : [ {
        "description" : " Retrieves the textual content of an S3 object using the default S3 credentials.\n The object content is forced to be interpreted as textual, with a UTF-8 charset\n and will be returned as string.\n This function has the same semantics as\n read-text#1,\n but is declared as being non deterministic and thus should only be used when\n result caching is not desired.\n", 
        "params" : [ "$s3-object" ]
      }, {
        "description" : " Retrieves the textual content of an S3 object using the specified S3 credentials.\n The object content is forced to be interpreted as textual, with a UTF-8 charset\n and will be returned as string.\n This function has the same semantics as\n read-text#2,\n but is declared as being non deterministic and thus should only be used when\n result caching is not desired.\n", 
        "params" : [ "$credentials", "$s3-object" ]
      } ], 
      "read-binary" : [ {
        "description" : " Retrieves the binary content of an S3 object using the default S3 credentials.\n The object content is forced to be interpreted as binaryand will be returned\n as a base64Binary item.\n This function is declared as deterministic and should be used whenever result\n caching is acceptable.\n The S3 object is specified through the $s3-object parameter. Either a string\n or a JSON object can be used. If a string is specified, it is interpreted as\n key for an object in the default bucket of the default credentials. If no default\n bucket is present in the default credentials, the s3:BUCKET error\n is raised. If a JSON object is used, it must have the following structure:\n \n   key: the object key (string, mandatory).\n   bucket: the bucket name (string, optional). If this field is not present\n   and the default credentials do not have a default bucket, the\n   s3:BUCKET error is raised.\n   version: the object version (string, optional). If versioning is enabled\n   for the specified object and no version is specified the latest version of\n   the object will be returned. If specified, only that particular version of\n   the object will be returned.\n \n \n Example:\n \n let $object :=\n {\n   \"key\": \"object\",\n   \"bucket\": \"28msec\",\n   \"version\": \"3/L4kqtJlcpXroDTDmJ+rmSpXd3dIbrHY+MTRCxf3vjVBH40Nr8X8gdRQBpUMLUo\"\n }\n return s3:read-binary($object)\n \n \n", 
        "params" : [ "$s3-object" ]
      }, {
        "description" : " Retrieves the binary content of an S3 object using the specified S3 credentials.\n The object content is forced to be interpreted as binaryand will be returned\n as a base64Binary item.\n This function is declared as deterministic and should be used whenever result\n caching is acceptable.\n The S3 object is specified through the $s3-object parameter. Either a string\n or a JSON object can be used. If a string is specified, it is interpreted as\n key for an object in the default bucket of the specified credentials. If no default\n bucket is present in the specified credentials, the s3:BUCKET error\n is raised. If a JSON object is used, it must have the following structure:\n \n   key: the object key (string, mandatory).\n   bucket: the bucket name (string, optional). If this field is not present\n   and the specified credentials do not have a default bucket, the\n   s3:BUCKET error is raised.\n   version: the object version (string, optional). If versioning is enabled\n   for the specified object and no version is specified the latest version of\n   the object will be returned. If specified, only that particular version of\n   the object will be returned.\n \n \n Example:\n \n let $object :=\n {\n   \"key\": \"object\",\n   \"bucket\": \"28msec\",\n   \"version\": \"3/L4kqtJlcpXroDTDmJ+rmSpXd3dIbrHY+MTRCxf3vjVBH40Nr8X8gdRQBpUMLUo\"\n }\n return s3:read-binary(\"credentials\", $object)\n \n \n", 
        "params" : [ "$credentials", "$s3-object" ]
      } ], 
      "read-binary-nondeterministic" : [ {
        "description" : " Retrieves the binary content of an S3 object using the default S3 credentials.\n The object content is forced to be interpreted as binaryand will be returned\n as a base64Binary item.\n This function has the same semantics as\n read-binary#1,\n but is declared as being non deterministic and thus should only be used when\n result caching is not desired.\n", 
        "params" : [ "$s3-object" ]
      }, {
        "description" : " Retrieves the binary content of an S3 object using the specified S3 credentials.\n The object content is forced to be interpreted as binaryand will be returned\n as a base64Binary item.\n This function has the same semantics as\n read-binary#2,\n but is declared as being non deterministic and thus should only be used when\n result caching is not desired.\n", 
        "params" : [ "$credentials", "$s3-object" ]
      } ], 
      "read-object" : [ {
        "description" : " Retrieves an S3 object using the default S3 credentials.\n This function is declared as deterministic and should be used whenever result\n caching is acceptable.\n The S3 object is specified through the $s3-object parameter. Either a string\n or a JSON object can be used. If a string is specified, it is interpreted as\n key for an object in the default bucket of the default credentials. If no default\n bucket is present in the default credentials, the s3:BUCKET error\n is raised. If a JSON object is used, it must have the following structure:\n \n   key: the object key (string, mandatory).\n   bucket: the bucket name (string, optional). If this field is not present\n   and the default credentials do not have a default bucket, the\n   s3:BUCKET error is raised.\n   version: the object version (string, optional). If versioning is enabled\n   for the specified object and no version is specified the latest version of\n   the object will be returned. If specified, only that particular version of\n   the object will be returned.\n \n \n Example:\n \n let $object :=\n {\n   \"key\": \"object\",\n   \"bucket\": \"28msec\",\n   \"version\": \"3/L4kqtJlcpXroDTDmJ+rmSpXd3dIbrHY+MTRCxf3vjVBH40Nr8X8gdRQBpUMLUo\"\n }\n return s3:read-object($object)\n \n \n Example return object:\n \n {\n   \"key\": \"test.xml\",\n   \"bucket\": \"28msec\",\n   \"metadata\":\n   {\n     \"author\": \"28msec\"\n   },\n   \"missing-metadata\" : 1,\n   \"version\": \"3GL4kqtJlcpXroDTDm3vjVBH40Nr8X8g\",\n   \"expiration\": \"expiry-date=\\\"Fri, 21 Dec 2012 00:00:00 GMT\\\", rule-id=\\\"Rule for testfile.txt\\\"\"\n   \"restore\": \"x-amz-restore: ongoing-request=\\\"false\\\", expiry-date=\\\"Wed, 07 Nov 2012 00:00:00 GMT\\\"\"\n   \"serverSideEncryption\": \"AES256\",\n   \"lastModified\": \"Mon, 15 Oct 2012 21:58:07 GMT\",\n   \"eTag\": \"1accb31fcf202eba0c0f41fa2f09b4d7\",\n   \"mediaType\": \"text/plain\"\n   \"length\": \"28\",\n   \"content: \"1234567890123456789012345678\"\n }\n \n \n The fields in the returned object have the following meanings:\n \n   key: the object key (string, mandatory).\n   bucket: the bucket name (string, mandatory).\n   metadata: an object specifying additional metadata. Each metadata is a\n   name-value pair and is represented as different fields (object, optional).\n   missing-metadata: the number of metadata entries that were not returned\n   in the metadata object. This can happen if you create metadata using an API\n   like SOAP that supports more flexible metadata than the REST API. (integer,\n   optional).\n   version: the object version (string, optional). If versioning is enabled\n   for the specified object and no version is specified the permissions for the\n   latest version of the object will be returned. If specified, only the\n   permissions for that particular version of the object will be returned.\n   expiration: if the object expiration is configured (see\n   PUT Bucket lifecycle),\n   this field is present. It includes the expiry-date and rule-id key value\n   pairs providing object expiration information. The value of rule-id is URL\n   encoded.(string, optional).\n   restore: if the object is an archived object (an object whose storage\n   class is Glacier), the response includes this header if either the archive\n   restoration is in progress (see\n   POST Object restore),\n   or an archive copy is already restored.(string, optional).\n   serverSideEncryption: If the object is stored by using server-side\n   encryption, the response includes this header with a value of the encryption\n   algorithm that was used.(string, optional).\n   lastModified: the date in which the object was last modified (dateTime,\n   optional).\n   eTag: the entity tag is a hash of the object. The eTag only reflects\n   changes to the contents of an object, not its metadata. The eTag is determined\n   when an object is created. For objects created by the PUT Object operation\n   and the POST Object operation, the eTag is a quoted, 32-digit hexadecimal\n   string representing the MD5 digest of the object data. For other objects,\n   the eTag may or may not be an MD5 digest of the object data. If the eTag is\n   not an MD5 digest of the object data, it will contain one or more non-hexadecimal\n   characters and/or will consist of less than 32 or more than 32 hexadecimal\n   digits.(string, optional).\n   mediaType: the object media-type (string, mandatory).\n   length: the object content length (integer, optional).\n   content: the object content. (item, optional). The type of this field\n   is determined by the media-type returned by the server. If the media-type\n   indicates that the body content is textual, then the content has type string,\n   base64Binary otherwise. Specifically, the body content is considered textual\n   if and only if the MIME-type specified in the media-type is one of:\n   \n     \"application/json\"\n     \"application/x-javascript\"\n     \"application/xml\"\n     \"application/xml-external-parsed-entity\"\n   \n   or if the MIME-type starts with \"text/\" or ends with \"+xml\".\n \n \n", 
        "params" : [ "$s3-object" ]
      }, {
        "description" : " Retrieves an S3 object using the specified S3 credentials.\n This function is declared as deterministic and should be used whenever result\n caching is acceptable.\n The S3 object is specified through the $s3-object parameter. Either a string\n or a JSON object can be used. If a string is specified, it is interpreted as\n key for an object in the default bucket of the specified credentials. If no default\n bucket is present in the specified credentials, the s3:BUCKET error\n is raised. If a JSON object is used, it must have the following structure:\n \n   key: the object key (string, mandatory).\n   bucket: the bucket name (string, optional). If this field is not present\n   and the specified credentials do not have a default bucket, the\n   s3:BUCKET error is raised.\n   version: the object version (string, optional). If versioning is enabled\n   for the specified object and no version is specified the latest version of\n   the object will be returned. If specified, only that particular version of\n   the object will be returned.\n \n \n Example:\n \n let $object :=\n {\n   \"key\": \"object\",\n   \"bucket\": \"28msec\",\n   \"version\": \"3/L4kqtJlcpXroDTDmJ+rmSpXd3dIbrHY+MTRCxf3vjVBH40Nr8X8gdRQBpUMLUo\"\n }\n return s3:read-object($object)\n \n \n Example return object:\n \n {\n   \"key\": \"test.xml\",\n   \"bucket\": \"28msec\",\n   \"metadata\":\n   {\n     \"author\": \"28msec\"\n   },\n   \"missing-metadata\" : 1,\n   \"version\": \"3GL4kqtJlcpXroDTDm3vjVBH40Nr8X8g\",\n   \"expiration\": \"expiry-date=\\\"Fri, 21 Dec 2012 00:00:00 GMT\\\", rule-id=\\\"Rule for testfile.txt\\\"\"\n   \"restore\": \"x-amz-restore: ongoing-request=\\\"false\\\", expiry-date=\\\"Wed, 07 Nov 2012 00:00:00 GMT\\\"\"\n   \"serverSideEncryption\": \"AES256\",\n   \"lastModified\": \"Mon, 15 Oct 2012 21:58:07 GMT\",\n   \"eTag\": \"1accb31fcf202eba0c0f41fa2f09b4d7\",\n   \"mediaType\": \"text/plain\"\n   \"length\": \"28\",\n   \"content: \"1234567890123456789012345678\"\n }\n \n \n The fields in the returned object have the following meanings:\n \n   key: the object key (string, mandatory).\n   bucket: the bucket name (string, mandatory).\n   metadata: an object specifying additional metadata. Each metadata is a\n   name-value pair and is represented as different fields (object, optional).\n   missing-metadata: the number of metadata entries that were not returned\n   in the metadata object. This can happen if you create metadata using an API\n   like SOAP that supports more flexible metadata than the REST API. (integer,\n   optional).\n   version: the object version (string, optional). If versioning is enabled\n   for the specified object and no version is specified the permissions for the\n   latest version of the object will be returned. If specified, only the\n   permissions for that particular version of the object will be returned.\n   expiration: if the object expiration is configured (see\n   PUT Bucket lifecycle),\n   this field is present. It includes the expiry-date and rule-id key value\n   pairs providing object expiration information. The value of rule-id is URL\n   encoded.(string, optional).\n   restore: if the object is an archived object (an object whose storage\n   class is Glacier), the response includes this header if either the archive\n   restoration is in progress (see\n   POST Object restore),\n   or an archive copy is already restored.(string, optional).\n   serverSideEncryption: If the object is stored by using server-side\n   encryption, the response includes this header with a value of the encryption\n   algorithm that was used.(string, optional).\n   lastModified: the date in which the object was last modified (dateTime,\n   optional).\n   eTag: the entity tag is a hash of the object. The eTag only reflects\n   changes to the contents of an object, not its metadata. The eTag is determined\n   when an object is created. For objects created by the PUT Object operation\n   and the POST Object operation, the eTag is a quoted, 32-digit hexadecimal\n   string representing the MD5 digest of the object data. For other objects,\n   the eTag may or may not be an MD5 digest of the object data. If the eTag is\n   not an MD5 digest of the object data, it will contain one or more non-hexadecimal\n   characters and/or will consist of less than 32 or more than 32 hexadecimal\n   digits.(string, optional).\n   mediaType: the object media-type (string, mandatory).\n   length: the object content length (integer, optional).\n   content: the object content. (item, optional). The type of this field\n   is determined by the media-type returned by the server. If the media-type\n   indicates that the body content is textual,then the content has type string,\n   base64Binary otherwise. Specifically, the body content is considered textual\n   if and only if the MIME-type specified in the media-type is one of:\n   \n     \"application/json\"\n     \"application/x-javascript\"\n     \"application/xml\"\n     \"application/xml-external-parsed-entity\"\n   \n   or if the MIME-type starts with \"text/\" or ends with \"+xml\".\n \n \n", 
        "params" : [ "$credentials", "$s3-object" ]
      }, {
        "description" : "", 
        "params" : [ "$credentials", "$s3-object", "$override-media-type" ]
      } ], 
      "read-object-nondeterministic" : [ {
        "description" : " Retrieves an S3 object using the default S3 credentials.\n This function has the same semantics as\n read-object#1,\n but is declared as being non deterministic and thus should only be used when\n result caching is not desired.\n", 
        "params" : [ "$s3-object" ]
      }, {
        "description" : " Retrieves an S3 object using the specified S3 credentials.\n This function has the same semantics as\n read-object#2,\n but is declared as being non deterministic and thus should only be used when\n result caching is not desired.\n", 
        "params" : [ "$credentials", "$s3-object" ]
      }, {
        "description" : "", 
        "params" : [ "$credentials", "$s3-object", "$override-media-type" ]
      } ], 
      "object-metadata" : [ {
        "description" : " Retrieves an object metadata using the default S3 credentials.\n This function is declared as deterministic and should be used whenever result\n caching is acceptable.\n The S3 object is specified through the $s3-object parameter. Either a string\n or a JSON object can be used. If a string is specified, it is interpreted as\n key for an object in the default bucket of the default credentials. If no default\n bucket is present in the default credentials, the s3:BUCKET error\n is raised. If a JSON object is used, it must have the following structure:\n \n   key: the object key (string, mandatory).\n   bucket: the bucket name (string, optional). If this field is not present\n   and the default credentials do not have a default bucket, the\n   s3:BUCKET error is raised.\n   version: the object version (string, optional). If versioning is enabled\n   for the specified object and no version is specified the metadata of the\n   latest version of the object will be returned. If specified, only the\n   metadata of that particular version of the object will be returned.\n \n \n Example:\n \n let $object :=\n {\n   \"key\": \"object\",\n   \"bucket\": \"28msec\",\n   \"version\": \"3/L4kqtJlcpXroDTDmJ+rmSpXd3dIbrHY+MTRCxf3vjVBH40Nr8X8gdRQBpUMLUo\"\n }\n return s3:metadata-object($object)\n \n \n Example return object:\n \n {\n   \"key\": \"test.xml\",\n   \"bucket\": \"28msec\",\n   \"metadata\":\n   {\n     \"author\": \"28msec\"\n   },\n   \"missing-metadata\" : 1,\n   \"version\": \"3GL4kqtJlcpXroDTDm3vjVBH40Nr8X8g\",\n   \"expiration\": \"expiry-date=\\\"Fri, 21 Dec 2012 00:00:00 GMT\\\", rule-id=\\\"Rule for testfile.txt\\\"\"\n   \"restore\": \"x-amz-restore: ongoing-request=\\\"false\\\", expiry-date=\\\"Wed, 07 Nov 2012 00:00:00 GMT\\\"\"\n   \"serverSideEncryption\": \"AES256\",\n   \"lastModified\": \"Mon, 15 Oct 2012 21:58:07 GMT\",\n   \"eTag\": \"1accb31fcf202eba0c0f41fa2f09b4d7\",\n   \"mediaType\": \"text/plain\"\n   \"length\": \"28\"\n }\n \n \n The fields in the returned object have the following meanings:\n \n   key: the object key (string, mandatory).\n   bucket: the bucket name (string, mandatory).\n   metadata: an object specifying additional metadata. Each metadata is a\n   name-value pair and is represented as different fields (object, optional).\n   missing-metadata: the number of metadata entries that were not returned\n   in the metadata object. This can happen if you create metadata using an API\n   like SOAP that supports more flexible metadata than the REST API. (integer,\n   optional).\n   version: the object version (string, optional). If versioning is enabled\n   for the specified object and no version is specified the permissions for the\n   latest version of the object will be returned. If specified, only the\n   permissions for that particular version of the object will be returned.\n   expiration: if the object expiration is configured (see\n   PUT Bucket lifecycle),\n   this field is present. It includes the expiry-date and rule-id key value\n   pairs providing object expiration information. The value of rule-id is URL\n   encoded.(string, optional).\n   restore: if the object is an archived object (an object whose storage\n   class is Glacier), the response includes this header if either the archive\n   restoration is in progress (see\n   POST Object restore),\n   or an archive copy is already restored.(string, optional).\n   serverSideEncryption: If the object is stored by using server-side\n   encryption, the response includes this header with a value of the encryption\n   algorithm that was used.(string, optional).\n   lastModified: the date in which the object was last modified (dateTime,\n   optional).\n   eTag: the entity tag is a hash of the object. The eTag only reflects\n   changes to the contents of an object, not its metadata. The eTag is determined\n   when an object is created. For objects created by the PUT Object operation\n   and the POST Object operation, the eTag is a quoted, 32-digit hexadecimal\n   string representing the MD5 digest of the object data. For other objects,\n   the eTag may or may not be an MD5 digest of the object data. If the eTag is\n   not an MD5 digest of the object data, it will contain one or more non-hexadecimal\n   characters and/or will consist of less than 32 or more than 32 hexadecimal\n   digits.(string, optional).\n   mediaType: the object media-type (string, mandatory).\n   length: the object content length (integer, optional).\n \n \n", 
        "params" : [ "$s3-object" ]
      }, {
        "description" : " Retrieves an object metadata using the specified S3 credentials.\n This function is declared as deterministic and should be used whenever result\n caching is acceptable.\n The S3 object is specified through the $s3-object parameter. Either a string\n or a JSON object can be used. If a string is specified, it is interpreted as\n key for an object in the default bucket of the specified credentials. If no default\n bucket is present in the specified credentials, the s3:BUCKET error\n is raised. If a JSON object is used, it must have the following structure:\n \n   key: the object key (string, mandatory).\n   bucket: the bucket name (string, optional). If this field is not present\n   and the specified credentials do not have a default bucket, the\n   s3:BUCKET error is raised.\n   version: the object version (string, optional). If versioning is enabled\n   for the specified object and no version is specified the metadata of the\n   latest version of the object will be returned. If specified, only the\n   metadata of that particular version of the object will be returned.\n \n \n Example:\n \n let $object :=\n {\n   \"key\": \"object\",\n   \"bucket\": \"28msec\",\n   \"version\": \"3/L4kqtJlcpXroDTDmJ+rmSpXd3dIbrHY+MTRCxf3vjVBH40Nr8X8gdRQBpUMLUo\"\n }\n return s3:metadata-object(\"credentials\", $object)\n \n \n Example return object:\n \n {\n   \"key\": \"test.xml\",\n   \"bucket\": \"28msec\",\n   \"metadata\":\n   {\n     \"author\": \"28msec\"\n   },\n   \"missing-metadata\" : 1,\n   \"version\": \"3GL4kqtJlcpXroDTDm3vjVBH40Nr8X8g\",\n   \"expiration\": \"expiry-date=\\\"Fri, 21 Dec 2012 00:00:00 GMT\\\", rule-id=\\\"Rule for testfile.txt\\\"\"\n   \"restore\": \"x-amz-restore: ongoing-request=\\\"false\\\", expiry-date=\\\"Wed, 07 Nov 2012 00:00:00 GMT\\\"\"\n   \"serverSideEncryption\": \"AES256\",\n   \"lastModified\": \"Mon, 15 Oct 2012 21:58:07 GMT\",\n   \"eTag\": \"1accb31fcf202eba0c0f41fa2f09b4d7\",\n   \"mediaType\": \"text/plain\"\n   \"length\": \"28\"\n }\n \n \n The fields in the returned object have the following meanings:\n \n   key: the object key (string, mandatory).\n   bucket: the bucket name (string, mandatory).\n   metadata: an object specifying additional metadata. Each metadata is a\n   name-value pair and is represented as different fields (object, optional).\n   missing-metadata: the number of metadata entries that were not returned\n   in the metadata object. This can happen if you create metadata using an API\n   like SOAP that supports more flexible metadata than the REST API. (integer,\n   optional).\n   version: the object version (string, optional). If versioning is enabled\n   for the specified object and no version is specified the permissions for the\n   latest version of the object will be returned. If specified, only the\n   permissions for that particular version of the object will be returned.\n   expiration: if the object expiration is configured (see\n   PUT Bucket lifecycle),\n   this field is present. It includes the expiry-date and rule-id key value\n   pairs providing object expiration information. The value of rule-id is URL\n   encoded.(string, optional).\n   restore: if the object is an archived object (an object whose storage\n   class is Glacier), the response includes this header if either the archive\n   restoration is in progress (see\n   POST Object restore),\n   or an archive copy is already restored.(string, optional).\n   serverSideEncryption: If the object is stored by using server-side\n   encryption, the response includes this header with a value of the encryption\n   algorithm that was used.(string, optional).\n   lastModified: the date in which the object was last modified (dateTime,\n   optional).\n   eTag: the entity tag is a hash of the object. The eTag only reflects\n   changes to the contents of an object, not its metadata. The eTag is determined\n   when an object is created. For objects created by the PUT Object operation\n   and the POST Object operation, the eTag is a quoted, 32-digit hexadecimal\n   string representing the MD5 digest of the object data. For other objects,\n   the eTag may or may not be an MD5 digest of the object data. If the eTag is\n   not an MD5 digest of the object data, it will contain one or more non-hexadecimal\n   characters and/or will consist of less than 32 or more than 32 hexadecimal\n   digits.(string, optional).\n   mediaType: the object media-type (string, mandatory).\n   length: the object content length (integer, optional).\n \n \n", 
        "params" : [ "$credentials", "$s3-object" ]
      } ], 
      "object-metadata-nondeterministic" : [ {
        "description" : " Retrieves an object metadata using the default S3 credentials.\n This function has the same semantics as\n object-metadata#1,\n but is declared as being non deterministic and thus should only be used when\n result caching is not desired.\n", 
        "params" : [ "$s3-object" ]
      }, {
        "description" : " Retrieves an object metadata using the specified S3 credentials.\n This function has the same semantics as\n object-metadata#2,\n but is declared as being non deterministic and thus should only be used when\n result caching is not desired.\n", 
        "params" : [ "$credentials", "$s3-object" ]
      } ], 
      "object-torrent" : [ {
        "description" : " Returns a torrent file for a given object using the default S3 credentials.\n This function is declared as deterministic and should be used whenever result\n caching is acceptable.\n The S3 object is specified through the $s3-object parameter. Either a string\n or a JSON object can be used. If a string is specified, it is interpreted as\n key for an object in the default bucket of the default credentials. If no default\n bucket is present in the default credentials, the s3:BUCKET error\n is raised. If a JSON object is used, it must have the following structure:\n \n   key: the object key (string, mandatory).\n   bucket: the bucket name (string, optional). If this field is not present\n   and the default credentials do not have a default bucket, the\n   s3:BUCKET error is raised.\n \n \n Example:\n \n let $object :=\n {\n   \"key\": \"object\",\n   \"bucket\": \"28msec\"\n }\n return s3:object-torrent($object)\n \n \n", 
        "params" : [ "$s3-object" ]
      }, {
        "description" : " Returns a torrent file for a given object using the specified S3 credentials.\n This function is declared as deterministic and should be used whenever result\n caching is acceptable.\n The S3 object is specified through the $s3-object parameter. Either a string\n or a JSON object can be used. If a string is specified, it is interpreted as\n key for an object in the default bucket of the specified credentials. If no default\n bucket is present in the specified credentials, the s3:BUCKET error\n is raised. If a JSON object is used, it must have the following structure:\n \n   key: the object key (string, mandatory).\n   bucket: the bucket name (string, optional). If this field is not present\n   and the specified credentials do not have a default bucket, the\n   s3:BUCKET error is raised.\n \n \n Example:\n \n let $object :=\n {\n   \"key\": \"object\",\n   \"bucket\": \"28msec\"\n }\n return s3:object-torrent($object)\n \n \n", 
        "params" : [ "$credentials", "$s3-object" ]
      } ], 
      "object-torrent-nondeterministic" : [ {
        "description" : " Returns a torrent file for a given object using the default S3 credentials.\n This function has the same semantics as\n object-torrent#1,\n but is declared as being non deterministic and thus should only be used when\n result caching is not desired.\n", 
        "params" : [ "$s3-object" ]
      }, {
        "description" : " Returns a torrent file for a given object using the specified S3 credentials.\n This function has the same semantics as\n object-torrent#2,\n but is declared as being non deterministic and thus should only be used when\n result caching is not desired.\n", 
        "params" : [ "$credentials", "$s3-object" ]
      } ], 
      "write-text" : [ {
        "description" : " Writes a textual object in an S3 bucket using the default S3 credentials.\n If the object already exists it is overwritten.\n The S3 object is specified through the $s3-object parameter. Either a string\n or a JSON object can be used.\n If a string is specified, it is interpreted as\n key for an object in the default bucket of the default credentials. If no default\n bucket is present in the default credentials, the s3:BUCKET error\n is raised. The object media-type will be set to \"text/plain\", no metadata will\n be set for the object, the object will be stored on standard redundancy storage,\n and the object permission will be set to \"private\", that is, the owner gets\n FULL_CONTROL, and no one else has access rights.\n If a JSON object is used, it must have the following structure:\n \n   key: the object key (string, mandatory).\n   bucket: the bucket name (string, optional). If this field is not present\n   and the default credentials do not have a default bucket, the\n   s3:BUCKET error is raised.\n   mediaType: the media-type of the object (string, optional). If not specified,\n   \"text/plain\" is used.\n   metadata: an object specifying additional metadata. Each metadata is a\n   name-value pair and is represented as different fields (object, optional).\n   permission: the permission to set (string, optional). It must be one of\n   \"private\", \"public-read\", \"public-read-write\", \"authenticated-read\",\n   \"bucket-owner-read\", \"bucket-owner-full-control\". For your convenience the\n   following variables can be used: $s3:ACL-GRANT-PRIVATE,\n   $s3:ACL-GRANT-PUBLIC-READ, $s3:ACL-GRANT-PUBLIC-READ-WRITE,\n   $s3:ACL-GRANT-AUTHENTICATED-READ, $s3:ACL-GRANT-BUCKET-OWNER-READ,\n   $s3:ACL-GRANT-BUCKET-OWNER-FULL-CONTROL. If this field is not\n   specified, the \"private\" ACL is used, that is, the owner gets FULL_CONTROL,\n   and no one else has access rights.\n   reducedRedundancy: whether to use reduced-redundancy or not (bool,\n   optional). Default is false.\n \n \n Example:\n \n variable $s3-object :=\n {\n   \"key\": \"test.xml\",\n   \"bucket\": \"28msec\",\n   \"permission\": $const:ACL-GRANT-PUBLIC-READ,\n   \"metadata\": { \"author\": \"28msec\" },\n   \"mediaType\": \"text/xml\"\n }\n s3:write-text($s3-object, serialize())\n \n \n Example return object:\n \n {\n   \"expiration\": \"expiry-date=\\\"Fri, 23 Dec 2012 00:00:00 GMT\\\", rule-id=\\\"1\\\"\",\n   \"version\": \"3GL4kqtJlcpXroDTDm3vjVBH40Nr8X8g\",\n   \"eTag\": \"\\\"1b2cf535f27731c974343645a3985328\\\"\"\n }\n \n \n The fields in the returned object have the following meanings:\n \n   expiration: if the object expiration is configured, the response\n   includes this header. It includes the expiry-date and rule-id key-value\n   pairs providing object expiration information. The value of the rule-id is\n   URL encoded. (string, optional)\n   version: the version of the object. When you enable versioning,\n   Amazon S3 generates a random number for objects added to a bucket. The value\n   is UTF-8 encoded and URL ready. When you PUT an object in a bucket where\n   versioning has been suspended, the version ID is always null. (string, optional)\n   eTag: the entity tag is a hash of the object. The eTag only reflects\n   changes to the contents of an object, not its metadata. The eTag is determined\n   when an object is created. The eTag returned by this method is a quoted,\n   32-digit hexadecimal string representing the MD5 digest of the object data.\n   For other objects, the eTag may or may not be an MD5 digest of the object data.\n   (string, optional).\n \n \n", 
        "params" : [ "$object", "$text-content" ]
      }, {
        "description" : " Writes a text object in an S3 bucket using the specified S3 credentials.\n If the object already exists it is overwritten.\n The S3 object is specified through the $s3-object parameter. Either a string\n or a JSON object can be used.\n If a string is specified, it is interpreted as\n key for an object in the default bucket of the specified credentials. If no default\n bucket is present in the specified credentials, the s3:BUCKET error\n is raised. The object media-type will be set to \"text/plain\", no metadata will\n be set for the object, the object will be stored on standard redundancy storage,\n and the object permission will be set to \"private\", that is, the owner gets\n FULL_CONTROL, and no one else has access rights.\n If a JSON object is used, it must have the following structure:\n \n   key: the object key (string, mandatory).\n   bucket: the bucket name (string, optional). If this field is not present\n   and the specified credentials do not have a default bucket, the\n   s3:BUCKET error is raised.\n   mediaType: the media-type of the object (string, optional). If not specified,\n   \"text/plain\" is used.\n   metadata: an object specifying additional metadata. Each metadata is a\n   name-value pair and is represented as different fields (object, optional).\n   permission: the permission to set (string, optional). It must be one of\n   \"private\", \"public-read\", \"public-read-write\", \"authenticated-read\",\n   \"bucket-owner-read\", \"bucket-owner-full-control\". For your convenience the\n   following variables can be used: $s3:ACL-GRANT-PRIVATE,\n   $s3:ACL-GRANT-PUBLIC-READ, $s3:ACL-GRANT-PUBLIC-READ-WRITE,\n   $s3:ACL-GRANT-AUTHENTICATED-READ, $s3:ACL-GRANT-BUCKET-OWNER-READ,\n   $s3:ACL-GRANT-BUCKET-OWNER-FULL-CONTROL. If this field is not\n   specified, the \"private\" ACL is used, that is, the owner gets FULL_CONTROL,\n   and no one else has access rights.\n   reducedRedundancy: whether to use reduced-redundancy or not (bool,\n   optional). Default is false.\n \n \n Example:\n \n variable $s3-object :=\n {\n   \"key\": \"test.xml\",\n   \"bucket\": \"28msec\",\n   \"permission\": $const:ACL-GRANT-PUBLIC-READ,\n   \"metadata\": { \"author\": \"28msec\" },\n   \"mediaType\": \"text/xml\"\n }\n s3:write-text(\"credentials\", $s3-object, serialize())\n \n \n Example return object:\n \n {\n   \"expiration\": \"expiry-date=\\\"Fri, 23 Dec 2012 00:00:00 GMT\\\", rule-id=\\\"1\\\"\",\n   \"version\": \"3GL4kqtJlcpXroDTDm3vjVBH40Nr8X8g\",\n   \"eTag\": \"\\\"1b2cf535f27731c974343645a3985328\\\"\"\n }\n \n \n The fields in the returned object have the following meanings:\n \n   expiration: if the object expiration is configured, the response\n   includes this header. It includes the expiry-date and rule-id key-value\n   pairs providing object expiration information. The value of the rule-id is\n   URL encoded. (string, optional)\n   version: the version of the object. When you enable versioning,\n   Amazon S3 generates a random number for objects added to a bucket. The value\n   is UTF-8 encoded and URL ready. When you PUT an object in a bucket where\n   versioning has been suspended, the version ID is always null. (string, optional)\n   eTag: the entity tag is a hash of the object. The eTag only reflects\n   changes to the contents of an object, not its metadata. The eTag is determined\n   when an object is created. The eTag returned by this method is a quoted,\n   32-digit hexadecimal string representing the MD5 digest of the object data.\n   For other objects, the eTag may or may not be an MD5 digest of the object data.\n   (string, optional).\n \n \n", 
        "params" : [ "$credentials", "$object", "$text-content" ]
      } ], 
      "write-binary" : [ {
        "description" : " Writes a binary object in an S3 bucket using the default S3 credentials.\n If the object already exists it is overwritten.\n The S3 object is specified through the $s3-object parameter. Either a string\n or a JSON object can be used.\n If a string is specified, it is interpreted as\n key for an object in the default bucket of the default credentials. If no default\n bucket is present in the default credentials, the s3:BUCKET error\n is raised. The object media-type will be set to \"binary/octet-stream\", no metadata will\n be set for the object, the object will be stored on standard redundancy storage,\n and the object permission will be set to \"private\", that is, the owner gets\n FULL_CONTROL, and no one else has access rights.\n If a JSON object is used, it must have the following structure:\n \n   key: the object key (string, mandatory).\n   bucket: the bucket name (string, optional). If this field is not present\n   and the default credentials do not have a default bucket, the\n   s3:BUCKET error is raised.\n   mediaType: the media-type of the object (string, optional). If not specified,\n   \"binary/octet-stream\" is used.\n   metadata: an object specifying additional metadata. Each metadata is a\n   name-value pair and is represented as different fields (object, optional).\n   permission: the permission to set (string, optional). It must be one of\n   \"private\", \"public-read\", \"public-read-write\", \"authenticated-read\",\n   \"bucket-owner-read\", \"bucket-owner-full-control\". For your convenience the\n   following variables can be used: $s3:ACL-GRANT-PRIVATE,\n   $s3:ACL-GRANT-PUBLIC-READ, $s3:ACL-GRANT-PUBLIC-READ-WRITE,\n   $s3:ACL-GRANT-AUTHENTICATED-READ, $s3:ACL-GRANT-BUCKET-OWNER-READ,\n   $s3:ACL-GRANT-BUCKET-OWNER-FULL-CONTROL. If this field is not\n   specified, the \"private\" ACL is used, that is, the owner gets FULL_CONTROL,\n   and no one else has access rights.\n   reducedRedundancy: whether to use reduced-redundancy or not (bool,\n   optional). Default is false.\n \n \n Example:\n \n variable $s3-object :=\n {\n   \"key\": \"test.xml\",\n   \"bucket\": \"28msec\",\n   \"permission\": $const:ACL-GRANT-PUBLIC-READ,\n   \"metadata\": { \"author\": \"28msec\" },\n   \"mediaType\": \"application/octet-stream\"\n }\n s3:write-binary($s3-object, base64Binary(\"Mjhtc2Vj\"))\n \n Example Result:\n \n {\n   \"expiration\": \"expiry-date=\\\"Fri, 23 Dec 2012 00:00:00 GMT\\\", rule-id=\\\"1\\\"\",\n   \"version\": \"3GL4kqtJlcpXroDTDm3vjVBH40Nr8X8g\",\n   \"eTag\": \"\\\"1b2cf535f27731c974343645a3985328\\\"\"\n }\n \n \n The meaning of the fields in the result object is the following:\n \n   expiration: if the object expiration is configured, the response\n   includes this header. It includes the expiry-date and rule-id key-value\n   pairs providing object expiration information. The value of the rule-id is\n   URL encoded. (string, optional)\n   version: the version of the object. When you enable versioning,\n   Amazon S3 generates a random number for objects added to a bucket. The value\n   is UTF-8 encoded and URL ready. When you PUT an object in a bucket where\n   versioning has been suspended, the version ID is always null. (string, optional)\n   eTag: the entity tag is a hash of the object. The eTag only reflects\n   changes to the contents of an object, not its metadata. The eTag is determined\n   when an object is created. The eTag returned by this method is a quoted,\n   32-digit hexadecimal string representing the MD5 digest of the object data.\n   For other objects, the eTag may or may not be an MD5 digest of the object data.\n   (string, optional).\n \n \n", 
        "params" : [ "$object", "$binary-content" ]
      }, {
        "description" : " Writes a binary object in an S3 bucket using the specified S3 credentials.\n If the object already exists it is overwritten.\n The S3 object is specified through the $s3-object parameter. Either a string\n or a JSON object can be used.\n If a string is specified, it is interpreted as\n key for an object in the default bucket of the specified credentials. If no default\n bucket is present in the specified credentials, the s3:BUCKET error\n is raised. The object media-type will be set to \"binary/octet-stream\", no metadata will\n be set for the object, the object will be stored on standard redundancy storage,\n and the object permission will be set to \"private\", that is, the owner gets\n FULL_CONTROL, and no one else has access rights.\n If a JSON object is used, it must have the following structure:\n \n   key: the object key (string, mandatory).\n   bucket: the bucket name (string, optional). If this field is not present\n   and the specified credentials do not have a default bucket, the\n   s3:BUCKET error is raised.\n   mediaType: the media-type of the object (string, optional). If not specified,\n   \"binary/octet-stream\" is used.\n   metadata: an object specifying additional metadata. Each metadata is a\n   name-value pair and is represented as different fields (object, optional).\n   permission: the permission to set (string, optional). It must be one of\n   \"private\", \"public-read\", \"public-read-write\", \"authenticated-read\",\n   \"bucket-owner-read\", \"bucket-owner-full-control\". For your convenience the\n   following variables can be used: $s3:ACL-GRANT-PRIVATE,\n   $s3:ACL-GRANT-PUBLIC-READ, $s3:ACL-GRANT-PUBLIC-READ-WRITE,\n   $s3:ACL-GRANT-AUTHENTICATED-READ, $s3:ACL-GRANT-BUCKET-OWNER-READ,\n   $s3:ACL-GRANT-BUCKET-OWNER-FULL-CONTROL. If this field is not\n   specified, the \"private\" ACL is used, that is, the owner gets FULL_CONTROL,\n   and no one else has access rights.\n   reducedRedundancy: whether to use reduced-redundancy or not (bool,\n   optional). Default is false.\n \n \n Example:\n \n variable $s3-object :=\n {\n   \"key\": \"test.xml\",\n   \"bucket\": \"28msec\",\n   \"permission\": $const:ACL-GRANT-PUBLIC-READ,\n   \"metadata\": { \"author\": \"28msec\" },\n   \"mediaType\": \"application/octet-stream\"\n }\n s3:write-binary(\"credentials\", $s3-object, base64Binary(\"Mjhtc2Vj\"))\n \n \n Example return object:\n \n {\n   \"expiration\": \"expiry-date=\\\"Fri, 23 Dec 2012 00:00:00 GMT\\\", rule-id=\\\"1\\\"\",\n   \"version\": \"3GL4kqtJlcpXroDTDm3vjVBH40Nr8X8g\",\n   \"eTag\": \"\\\"1b2cf535f27731c974343645a3985328\\\"\"\n }\n \n \n The fields in the returned object have the following meanings:\n \n   expiration: if the object expiration is configured, the response\n   includes this header. It includes the expiry-date and rule-id key-value\n   pairs providing object expiration information. The value of the rule-id is\n   URL encoded. (string, optional)\n   version: the version of the object. When you enable versioning,\n   Amazon S3 generates a random number for objects added to a bucket. The value\n   is UTF-8 encoded and URL ready. When you PUT an object in a bucket where\n   versioning has been suspended, the version ID is always null. (string, optional)\n   eTag: the entity tag is a hash of the object. The eTag only reflects\n   changes to the contents of an object, not its metadata. The eTag is determined\n   when an object is created. The eTag returned by this method is a quoted,\n   32-digit hexadecimal string representing the MD5 digest of the object data.\n   For other objects, the eTag may or may not be an MD5 digest of the object data.\n   (string, optional).\n \n \n", 
        "params" : [ "$credentials", "$object", "$binary-content" ]
      } ], 
      "write-object" : [ {
        "description" : " Writes an object in an S3 bucket using the default S3 credentials.\n If the object already exists it is overwritten.\n The object to write and its contents are specified through the $s3-object\n parameter, which must have the following structure:\n \n   key: the object key (string, mandatory).\n   bucket: the bucket name (string, optional). If this field is not present\n   and the default credentials do not have a default bucket, the\n   s3:BUCKET error is raised.\n   content: the object content. It must either be a string or a base64Binary\n   atomic. (item, mandatory).\n   mediaType: the media-type of the object (string, optional). If not specified,\n   \"text/plain\" is used if the content field is of type string, \"binary/octet-stream\"\n   if it is of type base64Binary.\n   metadata: an object specifying additional metadata. Each metadata is a\n   name-value pair and is represented as different fields (object, optional).\n   permission: the permission to set (string, optional). It must be one of\n   \"private\", \"public-read\", \"public-read-write\", \"authenticated-read\",\n   \"bucket-owner-read\", \"bucket-owner-full-control\". For your convenience the\n   following variables can be used: $s3:ACL-GRANT-PRIVATE,\n   $s3:ACL-GRANT-PUBLIC-READ, $s3:ACL-GRANT-PUBLIC-READ-WRITE,\n   $s3:ACL-GRANT-AUTHENTICATED-READ, $s3:ACL-GRANT-BUCKET-OWNER-READ,\n   $s3:ACL-GRANT-BUCKET-OWNER-FULL-CONTROL. If this field is not\n   specified, the \"private\" ACL is used, that is, the owner gets FULL_CONTROL,\n   and no one else has access rights.\n   reducedRedundancy: whether to use reduced-redundancy or not (bool,\n   optional). Default is false.\n \n \n Example:\n \n variable $s3-object :=\n {\n   \"key\": \"test.xml\",\n   \"bucket\": \"28msec\",\n   \"permission\": $const:ACL-GRANT-PUBLIC-READ,\n   \"metadata\": { \"author\": \"28msec\" },\n   \"content\": serialize({ \"Hello\": \"World\" }),\n   \"mediaType\": \"application/xml\"\n }\n s3:write-object($s3-object)\n \n \n Example return object:\n \n {\n   \"expiration\": \"expiry-date=\\\"Fri, 23 Dec 2012 00:00:00 GMT\\\", rule-id=\\\"1\\\"\",\n   \"version\": \"3GL4kqtJlcpXroDTDm3vjVBH40Nr8X8g\",\n   \"eTag\": \"\\\"1b2cf535f27731c974343645a3985328\\\"\"\n }\n \n \n The fields in the returned object have the following meanings:\n \n   expiration: if the object expiration is configured, the response\n   includes this header. It includes the expiry-date and rule-id key-value\n   pairs providing object expiration information. The value of the rule-id is\n   URL encoded. (string, optional)\n   version: the version of the object. When you enable versioning,\n   Amazon S3 generates a random number for objects added to a bucket. The value\n   is UTF-8 encoded and URL ready. When you PUT an object in a bucket where\n   versioning has been suspended, the version ID is always null. (string, optional)\n   eTag: the entity tag is a hash of the object. The eTag only reflects\n   changes to the contents of an object, not its metadata. The eTag is determined\n   when an object is created. The eTag returned by this method is a quoted,\n   32-digit hexadecimal string representing the MD5 digest of the object data.\n   For other objects, the eTag may or may not be an MD5 digest of the object data.\n   (string, optional).\n \n \n", 
        "params" : [ "$s3-object" ]
      }, {
        "description" : " Writes an object in an S3 bucket using the specified credentials.\n If the object already exists it is overwritten.\n The object to write and its contents are specified through the $s3-object\n parameter, which must have the following structure:\n \n   key: the object key (string, mandatory).\n   bucket: the bucket name (string, optional). If this field is not present\n   and the specified credentials do not have a default bucket, the\n   s3:BUCKET error is raised.\n   content: the object content. It must either be a string or a base64Binary\n   atomic. (item, mandatory).\n   mediaType: the media-type of the object (string, optional). If not specified,\n   \"text/plain\" is used if the content field is of type string, \"binary/octet-stream\"\n   if it is of type base64Binary.\n   metadata: an object specifying additional metadata. Each metadata is a\n   name-value pair and is represented as different fields (object, optional).\n   permission: the permission to set (string, optional). It must be one of\n   \"private\", \"public-read\", \"public-read-write\", \"authenticated-read\",\n   \"bucket-owner-read\", \"bucket-owner-full-control\". For your convenience the\n   following variables can be used: $s3:ACL-GRANT-PRIVATE,\n   $s3:ACL-GRANT-PUBLIC-READ, $s3:ACL-GRANT-PUBLIC-READ-WRITE,\n   $s3:ACL-GRANT-AUTHENTICATED-READ, $s3:ACL-GRANT-BUCKET-OWNER-READ,\n   $s3:ACL-GRANT-BUCKET-OWNER-FULL-CONTROL. If this field is not\n   specified, the \"private\" ACL is used, that is, the owner gets FULL_CONTROL,\n   and no one else has access rights.\n   reducedRedundancy: whether to use reduced-redundancy or not (bool,\n   optional). Default is false.\n \n \n Example:\n \n variable $s3-object :=\n {\n   \"key\": \"test.xml\",\n   \"bucket\": \"28msec\",\n   \"permission\": $const:ACL-GRANT-PUBLIC-READ,\n   \"metadata\": { \"author\": \"28msec\" },\n   \"content\": serialize({ \"Hello\": \"World\" }),\n   \"mediaType\": \"application/xml\"\n }\n s3:write-object(\"s3\", $s3-object)\n \n \n Example return object:\n \n {\n   \"expiration\": \"expiry-date=\\\"Fri, 23 Dec 2012 00:00:00 GMT\\\", rule-id=\\\"1\\\"\",\n   \"version\": \"3GL4kqtJlcpXroDTDm3vjVBH40Nr8X8g\",\n   \"eTag\": \"\\\"1b2cf535f27731c974343645a3985328\\\"\"\n }\n \n \n The fields in the returned object have the following meanings:\n \n   expiration: if the object expiration is configured, the response\n   includes this header. It includes the expiry-date and rule-id key-value\n   pairs providing object expiration information. The value of the rule-id is\n   URL encoded. (string, optional)\n   version: the version of the object. When you enable versioning,\n   Amazon S3 generates a random number for objects added to a bucket. The value\n   is UTF-8 encoded and URL ready. When you PUT an object in a bucket where\n   versioning has been suspended, the version ID is always null. (string, optional)\n   eTag: the entity tag is a hash of the object. The eTag only reflects\n   changes to the contents of an object, not its metadata. The eTag is determined\n   when an object is created. The eTag returned by this method is a quoted,\n   32-digit hexadecimal string representing the MD5 digest of the object data.\n   For other objects, the eTag may or may not be an MD5 digest of the object data.\n   (string, optional).\n \n \n", 
        "params" : [ "$credentials", "$s3-object" ]
      }, {
        "description" : " Writes an object in an S3 bucket\n", 
        "params" : [ "$credentials", "$s3-object", "$media-type", "$content" ]
      } ], 
      "copy-object" : [ {
        "description" : " Copies an object already stored on s3 into a target bucket using the\n default credentials. If the target object already exists it will be overwritten.\n The source object metadata is copied to the target object, unless new\n metadata is specified. In this case the target object will possess only the\n specified metadata.\n Unless the permissions for the target are specified, the target object will\n have the \"private\" ACL, that is, the owner gets FULL_CONTROL, and no one else\n has access rights.\n The source S3 object is specified through the $s3-object-source parameter.\n Either a string or a JSON object can be used. If a string is specified, it is\n interpreted as key for an object in the default bucket of the default\n credentials. If no default bucket is present in the default credentials, the\n s3:BUCKET error is raised. If a JSON object is used, it must have\n the following structure:\n \n   key: the object key (string, mandatory).\n   bucket: the bucket name (string, optional). If this field is not present\n   and the default credentials do not have a default bucket, the\n   s3:BUCKET error is raised.\n   version: the object version (string, optional). If versioning is enabled\n   for the specified object and no version is specified the latest version of\n   the object will be copied. If specified, only that particular version of the\n   object will be copied.\n \n \n The target S3 object is specified through the $s3-object-target parameter.\n Either a string or a JSON object can be used. If a string is specified and the\n default credentials contain a default bucket, the object will be copied in\n the credentials default bucket. Otherwise, the object will be copied in the\n source object bucket. If a JSON object is used, it must have the following\n structure:\n \n   key: the object key (string, mandatory).\n   bucket: the bucket name (string, optional). If this field is not present\n   and the default credentials contain a default bucket, the object will be\n   copied in the credentials default bucket. Otherwise, the object will be\n   copied in the source object bucket.\n   metadata: an object specifying additional metadata. Each metadata is a\n   name-value pair and is represented as different fields (object, optional).\n   If not specified, the source object metadata will be copied to the target\n   object. Otherwise the target object metadata will be the specified one.\n   reducedRedundancy: whether to use reduced-redundancy or not (bool,\n   optional). Default is false.\n   permission: the permission to set (string, optional). It must be one of\n   \"private\", \"public-read\", \"public-read-write\", \"authenticated-read\",\n   \"bucket-owner-read\", \"bucket-owner-full-control\". For your convenience the\n   following variables can be used: $s3:ACL-GRANT-PRIVATE,\n   $s3:ACL-GRANT-PUBLIC-READ, $s3:ACL-GRANT-PUBLIC-READ-WRITE,\n   $s3:ACL-GRANT-AUTHENTICATED-READ, $s3:ACL-GRANT-BUCKET-OWNER-READ,\n   $s3:ACL-GRANT-BUCKET-OWNER-FULL-CONTROL. If this field is not\n   specified, the \"private\" ACL is used, that is, the owner gets FULL_CONTROL,\n   and no one else has access rights.\n \n \n Example:\n \n let $s3-object-source :=\n {\n   \"key\" : \"test.xml\",\n   \"bucket\": \"28msec\"\n }\n let $s3-object-target :=\n {\n   \"key\" : \"test-copy.xml\",\n   \"bucket\": \"28msec\",\n   \"permisstion\": $s3:ACL-GRANT-PUBLIC-READ\n   \"metadata\":\n   {\n     \"author\": \"28msec\"\n   }\n }\n return s3:copy-object($s3-object-source, $s3-object-target)\n \n \n Example return object:\n \n {\n   \"sourceVersion\": \"3/L4kqtJlcpXroDTDmJ+rmSpXd3dIbrHY+MTRCxf3vjVBH40Nr8X8gdRQBpUMLUo\",\n   \"version\": \"QUpfdndhfd8438MNFDN93jdnJFkdmqnh893\",\n   \"lastModified\": \"2009-10-28T22:32:00\",\n   \"eTag\": \"\\\"9b2cf535f27731c974343645a3985328\\\"\",\n   \"expiration\": \"expiry-date=\\\"Fri, 21 Dec 2012 00:00:00 GMT\\\", rule-id=\\\"Rule for testfile.txt\\\"\"\n }\n \n \n The fields in the returned object have the following meanings:\n \n   sourceVersion: the version of the copied object. When you enable versioning,\n   Amazon S3 generates a random number for objects added to a bucket. The value\n   is UTF-8 encoded and URL ready. When the soruce object is copied in a bucket where\n   versioning has been suspended, the version ID is always null. (string, optional)\n   version: the version of the copied object. When you enable versioning,\n   Amazon S3 generates a random number for objects added to a bucket. The value\n   is UTF-8 encoded and URL ready. When the soruce object is copied in a bucket where\n   versioning has been suspended, the version ID is always null. (string, optional)\n   lastModified: the last modification date of the target object. (dateTime, optional)\n   eTag: the entity tag is a hash of the copeid object. The eTag only reflects\n   changes to the contents of an object, not its metadata. The eTag is determined\n   when an object is created. The eTag returned by this method is a quoted,\n   32-digit hexadecimal string representing the MD5 digest of the object data.\n   For other objects, the eTag may or may not be an MD5 digest of the object data.\n   (string, optional).\n   expiration: if the object expiration is configured (see\n   PUT Bucket lifecycle),\n   this field is present. It includes the expiry-date and rule-id key value\n   pairs providing object expiration information. The value of rule-id is URL\n   encoded.(string, optional).\n \n \n", 
        "params" : [ "$s3-object-source", "$s3-object-target" ]
      }, {
        "description" : " Copies an object already stored on S3 into a target bucket using the\n specified credentials. If the target object already exists it will be overwritten.\n The source object metadata is copied to the target object, unless new\n metadata is specified. In this case the target object will possess only the\n specified metadata.\n Unless the permissions for the target are specified, the target object will\n have the \"private\" ACL, that is, the owner gets FULL_CONTROL, and no one else\n has access rights.\n The source S3 object is specified through the $s3-object-source parameter.\n Either a string or a JSON object can be used. If a string is specified, it is\n interpreted as key for an object in the default bucket of the specified\n credentials. If no default bucket is present in the specified credentials, the\n s3:BUCKET error is raised. If a JSON object is used, it must have\n the following structure:\n \n   key: the object key (string, mandatory).\n   bucket: the bucket name (string, optional). If this field is not present\n   and the specified credentials do not have a default bucket, the\n   s3:BUCKET error is raised.\n   version: the object version (string, optional). If versioning is enabled\n   for the specified object and no version is specified the latest version of\n   the object will be copied. If specified, only that particular version of the\n   object will be copied.\n \n \n The target S3 object is specified through the $s3-object-target parameter.\n Either a string or a JSON object can be used. If a string is specified and the\n specified credentials contain a default bucket, the object will be copied in\n the credentials default bucket. Otherwise, the object will be copied in the\n source object bucket. If a JSON object is used, it must have the following\n structure:\n \n   key: the object key (string, mandatory).\n   bucket: the bucket name (string, optional). If this field is not present\n   and the specified credentials contain a default bucket, the object will be\n   copied in the credentials default bucket. Otherwise, the object will be\n   copied in the source object bucket.\n   metadata: an object specifying additional metadata. Each metadata is a\n   name-value pair and is represented as different fields (object, optional).\n   If not specified, the source object metadata will be copied to the target\n   object. Otherwise the target object metadata will be the specified one.\n   reducedRedundancy: whether to use reduced-redundancy or not (bool,\n   optional). Default is false.\n   permission: the permission to set (string, optional). It must be one of\n   \"private\", \"public-read\", \"public-read-write\", \"authenticated-read\",\n   \"bucket-owner-read\", \"bucket-owner-full-control\". For your convenience the\n   following variables can be used: $s3:ACL-GRANT-PRIVATE,\n   $s3:ACL-GRANT-PUBLIC-READ, $s3:ACL-GRANT-PUBLIC-READ-WRITE,\n   $s3:ACL-GRANT-AUTHENTICATED-READ, $s3:ACL-GRANT-BUCKET-OWNER-READ,\n   $s3:ACL-GRANT-BUCKET-OWNER-FULL-CONTROL. If this field is not\n   specified, the \"private\" ACL is used, that is, the owner gets FULL_CONTROL,\n   and no one else has access rights.\n \n \n Example:\n \n let $s3-object-source :=\n {\n   \"key\" : \"test.xml\",\n   \"bucket\": \"28msec\"\n }\n let $s3-object-target :=\n {\n   \"key\" : \"test-copy.xml\",\n   \"bucket\": \"28msec\",\n   \"permisstion\": $s3:ACL-GRANT-PUBLIC-READ\n   \"metadata\":\n   {\n     \"author\": \"28msec\"\n   }\n }\n return s3:copy-object(\"credentials\", $s3-object-source, $s3-object-target)\n \n \n Example return object:\n \n {\n   \"sourceVersion\": \"3/L4kqtJlcpXroDTDmJ+rmSpXd3dIbrHY+MTRCxf3vjVBH40Nr8X8gdRQBpUMLUo\",\n   \"version\": \"QUpfdndhfd8438MNFDN93jdnJFkdmqnh893\",\n   \"lastModified\": \"2009-10-28T22:32:00\",\n   \"eTag\": \"\\\"9b2cf535f27731c974343645a3985328\\\"\",\n   \"expiration\": \"expiry-date=\\\"Fri, 21 Dec 2012 00:00:00 GMT\\\", rule-id=\\\"Rule for testfile.txt\\\"\"\n }\n \n \n The fields in the returned object have the following meanings:\n \n   sourceVersion: the version of the copied object. When you enable versioning,\n   Amazon S3 generates a random number for objects added to a bucket. The value\n   is UTF-8 encoded and URL ready. When the soruce object is copied in a bucket where\n   versioning has been suspended, the version ID is always null. (string, optional)\n   version: the version of the copied object. When you enable versioning,\n   Amazon S3 generates a random number for objects added to a bucket. The value\n   is UTF-8 encoded and URL ready. When the soruce object is copied in a bucket where\n   versioning has been suspended, the version ID is always null. (string, optional)\n   lastModified: the last modification date of the target object. (dateTime, optional)\n   eTag: the entity tag is a hash of the copeid object. The eTag only reflects\n   changes to the contents of an object, not its metadata. The eTag is determined\n   when an object is created. The eTag returned by this method is a quoted,\n   32-digit hexadecimal string representing the MD5 digest of the object data.\n   For other objects, the eTag may or may not be an MD5 digest of the object data.\n   (string, optional).\n \n \n", 
        "params" : [ "$credentials", "$s3-object-source", "$s3-object-target" ]
      } ], 
      "object-permissions" : [ {
        "description" : " Retrieves the access control list (ACL) of an S3 object using the default\n S3 credentials.\n This function is declared as deterministic and should be used whenever result\n caching is acceptable.\n The S3 object is specified through the $s3-object parameter. Either a string\n or a JSON object can be used. If a string is specified, it is interpreted as\n key for an object in the default bucket of the default credentials. If no default\n bucket is present in the default credentials, the s3:BUCKET error\n is raised. If a JSON object is used, it must have the following structure:\n \n   key: the object key (string, mandatory).\n   bucket: the bucket name (string, optional). If this field is not present\n   and the default credentials do not have a default bucket, the\n   s3:BUCKET error is raised.\n   version: the object version (string, optional). If versioning is enabled\n   for the specified object and no version is specified the permissions for the\n   latest version of the object will be returned. If specified, only the\n   permissions for that particular version of the object will be returned.\n \n \n Example:\n \n let $object :=\n {\n   \"key\": \"object\",\n   \"bucket\": \"28msec\",\n   \"version\": \"3/L4kqtJlcpXroDTDmJ+rmSpXd3dIbrHY+MTRCxf3vjVBH40Nr8X8gdRQBpUMLUo\"\n }\n return s3:object-permissions($object)\n \n \n Example return object:\n \n {\n   \"owner\" :\n   {\n     \"id\" : \"ea3617f5543e366a51bf51f440c221410b8001c34744e9d3a81acb79cff9d2ed\",\n     \"displayName\" : \"28msec\"\n   },\n   \"acl\" :\n   [\n     {\n       \"grantee\" :\n       {\n         \"type\" : \"CanonicalUser\",\n         \"id\" : \"ea3617f5543e366a51bf51f440c221410b8001c34744e9d3a81acb79cff9d2ed\",\n         \"displayName\" : \"28msec\"\n       },\n       \"permission\" : \"FULL_CONTROL\"\n     }\n   ]\n }\n \n \n The fields in the returned object have the following meanings:\n \n owner: an object which specifies the owner of the object (object,\n mandatory). It has the following fields:\n   \n     id: the user identifier of the object owner (string, mandatory).\n     displayName: the screen name of the object owner (string, mandatory).\n   \n \n acl: an array which contains an object for each grantee with the corresponding\n ACL settings (array, mandatory). Each object contains the following fields:\n   \n     grantee: specifies the permissions grantee (object, mandatory). It\n     contains the following fields:\n       \n         type: one of \"AmazonCustomerByEmail\", \"CanonicalUser\" or \"Group\".\n         emailAddress: the customer email address (string, present in all\n         and only AmazonCustomerByEmail grantees).\n         id: the user identifier (string, present in all and only CanonicalUser\n         grantees).\n         displayName: the user screen name (string, present in all and only\n         CanonicalUser grantees).\n         URI: the group URI (string, present in all and only Group grantees).\n       \n     \n     permission: the granted permissions. One of \"READ\", \"WRITE\", \"READ_ACP\",\n     \"WRITE_ACP\", \"FULL_CONTROL\". (string, mandatory).\n   \n \n \n \n", 
        "params" : [ "$s3-object" ]
      }, {
        "description" : " Retrieves the access control list (ACL) of an S3 object using the specified\n credentials.\n This function is declared as deterministic and should be used whenever result\n caching is acceptable.\n The S3 object is specified through the $s3-object parameter. Either a string\n or a JSON object can be used. If a string is specified, it is interpreted as\n key for an object in the default bucket of the specified credentials. If no default\n bucket is present in the specified credentials, the s3:BUCKET error\n is raised. If a JSON object is used, it must have the following structure:\n \n   key: the object key (string, mandatory).\n   bucket: the bucket name (string, optional). If this field is not present\n   and the specified credentials does not have a default bucket, the\n   s3:BUCKET error is raised.\n   version: the object version (string, optional). If versioning is enabled\n   for the specified object and no version is specified the permissions for the\n   latest version of the object will be returned. If specified, only the\n   permissions for that particular version of the object will be returned.\n \n \n Example:\n \n let $object :=\n {\n   \"key\": \"object\",\n   \"bucket\": \"28msec\",\n   \"version\": \"3/L4kqtJlcpXroDTDmJ+rmSpXd3dIbrHY+MTRCxf3vjVBH40Nr8X8gdRQBpUMLUo\"\n }\n return s3:object-permissions(\"credentials\", $object)\n \n \n Example return object:\n \n {\n   \"owner\" :\n   {\n     \"id\" : \"ea3617f5543e366a51bf51f440c221410b8001c34744e9d3a81acb79cff9d2ed\",\n     \"displayName\" : \"28msec\"\n   },\n   \"acl\" :\n   [\n     {\n       \"grantee\" :\n       {\n         \"type\" : \"CanonicalUser\",\n         \"id\" : \"ea3617f5543e366a51bf51f440c221410b8001c34744e9d3a81acb79cff9d2ed\",\n         \"displayName\" : \"28msec\"\n       },\n       \"permission\" : \"FULL_CONTROL\"\n     }\n   ]\n }\n \n \n The fields in the returned object have the following meanings:\n \n owner: an object which specifies the owner of the object (object,\n mandatory). It has the following fields:\n   \n     id: the user identifier of the object owner (string, mandatory).\n     displayName: the screen name of the object owner (string, mandatory).\n   \n \n acl: an array which contains an object for each grantee with the corresponding\n ACL settings (array, mandatory). Each object contains the following fields:\n   \n     grantee: specifies the permissions grantee (object, mandatory). It contains\n     the following fields:\n       \n         type: one of \"AmazonCustomerByEmail\", \"CanonicalUser\" or \"Group\".\n         emailAddress: the customer email address (string, present in all\n         and only AmazonCustomerByEmail grantees).\n         id: the user identifier (string, present in all and only CanonicalUser\n         grantees).\n         displayName: the user screen name (string, present in all and only\n         CanonicalUser grantees).\n         URI: the group URI (string, present in all and only Group grantees).\n       \n     \n     permission: the granted permissions. One of \"READ\", \"WRITE\", \"READ_ACP\",\n     \"WRITE_ACP\", \"FULL_CONTROL\". (string, mandatory).\n   \n \n \n \n", 
        "params" : [ "$credentials", "$s3-object" ]
      } ], 
      "object-permissions-nondeterministic" : [ {
        "description" : " Retrieves the access control list (ACL) of an S3 object using the default\n S3 credentials.\n This function has the same semantics as\n object-permissions#1,\n but is declared as being non deterministic and thus should only be used when\n result caching is not desired.\n", 
        "params" : [ "$s3-object" ]
      }, {
        "description" : " Retrieves the access control list (ACL) of an S3 object using the specified\n credentials.\n This function has the same semantics as\n object-permissions#2,\n but is declared as being non deterministic and thus should only be used when\n result caching is not desired.\n", 
        "params" : [ "$credentials", "$s3-object" ]
      } ], 
      "set-object-permissions" : [ {
        "description" : " Sets the access control list (ACL) of an S3 object using the default S3\n credentials.\n The S3 object is specified through the $s3-object parameter. Either a string\n or a JSON object can be used. If a string is specified, it is interpreted as\n key for an object in the default bucket of the default credentials. If no default\n bucket is present in the default credentials, the s3:BUCKET error\n is raised. If a JSON object is used, it must have the following structure:\n \n   key: the object key (string, mandatory).\n   bucket: the bucket name (string, optional). If this field is not present\n   and the default credentials do not have a default bucket, the\n   s3:BUCKET error is raised.\n   version: the object version (string, optional). If versioning is enabled\n   for the specified object and no version is specified the permissions for the\n   latest version of the object will be set. If specified, only the\n   permissions for that particular version of the object will be set.\n   permission: the permission to set (string, optional). It must be one of\n   \"private\", \"public-read\", \"public-read-write\", \"authenticated-read\",\n   \"bucket-owner-read\", \"bucket-owner-full-control\". For your convenience the\n   following variables can be used: $s3:ACL-GRANT-PRIVATE,\n   $s3:ACL-GRANT-PUBLIC-READ, $s3:ACL-GRANT-PUBLIC-READ-WRITE,\n   $s3:ACL-GRANT-AUTHENTICATED-READ, $s3:ACL-GRANT-BUCKET-OWNER-READ,\n   $s3:ACL-GRANT-BUCKET-OWNER-FULL-CONTROL. If this field is not\n   specified, the \"private\" ACL is used, that is, the owner gets FULL_CONTROL,\n   and no one else has access rights.\n \n \n Example:\n \n let $object :=\n {\n   \"key\": \"object\",\n   \"bucket\": \"28msec\",\n   \"version\": \"3/L4kqtJlcpXroDTDmJ+rmSpXd3dIbrHY+MTRCxf3vjVBH40Nr8X8gdRQBpUMLUo\",\n   \"permission\": $s3:ACL-GRANT-PUBLIC-READ\n }\n return s3:set-object-permissions($object)\n \n \n", 
        "params" : [ "$s3-object" ]
      }, {
        "description" : " Sets the access control list (ACL) of an S3 object using the specified S3\n credentials.\n The S3 object is specified through the $s3-object parameter. Either a string\n or a JSON object can be used. If a string is specified, it is interpreted as\n key for an object in the default bucket of the specified credentials. If no default\n bucket is present in the specified credentials, the s3:BUCKET error\n is raised. If a JSON object is used, it must have the following structure:\n \n   key: the object key (string, mandatory).\n   bucket: the bucket name (string, optional). If this field is not present\n   and the specified credentials do not have a default bucket, the\n   s3:BUCKET error is raised.\n   version: the object version (string, optional). If versioning is enabled\n   for the specified object and no version is specified the permissions for the\n   latest version of the object will be set. If specified, only the\n   permissions for that particular version of the object will be set.\n   permission: the permission to set (string, optional). It must be one of\n   \"private\", \"public-read\", \"public-read-write\", \"authenticated-read\",\n   \"bucket-owner-read\", \"bucket-owner-full-control\". For your convenience the\n   following variables can be used: $s3:ACL-GRANT-PRIVATE,\n   $s3:ACL-GRANT-PUBLIC-READ, $s3:ACL-GRANT-PUBLIC-READ-WRITE,\n   $s3:ACL-GRANT-AUTHENTICATED-READ, $s3:ACL-GRANT-BUCKET-OWNER-READ,\n   $s3:ACL-GRANT-BUCKET-OWNER-FULL-CONTROL. If this field is not\n   specified, the \"private\" ACL is used, that is, the owner gets FULL_CONTROL,\n   and no one else has access rights.\n \n \n Example:\n \n let $object :=\n {\n   \"key\": \"object\",\n   \"bucket\": \"28msec\",\n   \"version\": \"3/L4kqtJlcpXroDTDmJ+rmSpXd3dIbrHY+MTRCxf3vjVBH40Nr8X8gdRQBpUMLUo\",\n   \"permission\": $s3:ACL-GRANT-PUBLIC-READ\n }\n return s3:set-object-permissions($object)\n \n \n", 
        "params" : [ "$credentials", "$s3-object" ]
      } ], 
      "send-request" : [ {
        "description" : " Sends a signed S3 request\n", 
        "params" : [ "$credentials", "$request", "$bucket-name", "$object-key" ]
      } ], 
      "send-nondeterministic-request" : [ {
        "description" : " Sends a signed S3 request\n", 
        "params" : [ "$credentials", "$request", "$bucket-name", "$object-key" ]
      } ], 
      "send-deterministic-request" : [ {
        "description" : " Sends a signed S3 request\n", 
        "params" : [ "$credentials", "$request", "$bucket-name", "$object-key" ]
      } ], 
      "handle-s3-error" : [ {
        "description" : "", 
        "params" : [ "$response" ]
      } ], 
      "s3-object" : [ {
        "description" : " Validates and returns an S3 object.\n", 
        "params" : [ "$object" ]
      }, {
        "description" : "", 
        "params" : [ "$object", "$schema" ]
      } ], 
      "response-xml" : [ {
        "description" : "", 
        "params" : [ "$response" ]
      }, {
        "description" : " Parses the S3 response as XML.\n", 
        "params" : [ "$response", "$validate" ]
      } ], 
      "create-json" : [ {
        "description" : " Converts XML into JSON.\n", 
        "params" : [ "$elem" ]
      }, {
        "description" : " Converts XML into JSON.\n", 
        "params" : [ "$elem", "$include-empty" ]
      } ], 
      "sign-request" : [ {
        "description" : " Adds the Authorization header to the request according to\n \n Amazon S3 RESTAuthentication\n", 
        "params" : [ "$request", "$bucketname", "$object-key", "$accessKey", "$secretKey" ]
      } ], 
      "create" : [ {
        "description" : " Creates an HTTP request.\n", 
        "params" : [ "$method", "$href" ]
      }, {
        "description" : " Creates an HTTP request.\n", 
        "params" : [ "$method", "$href", "$parameters" ]
      }, {
        "description" : " Creates an HTTP request.\n", 
        "params" : [ "$method", "$href", "$parameters", "$headers" ]
      }, {
        "description" : " Creates an HTTP request.\n", 
        "params" : [ "$method", "$href", "$parameters", "$headers", "$media-type", "$content" ]
      } ], 
      "href" : [ {
        "description" : " Creates an HTTP request URL with the correct protocol provided by the\n $aws-credentials element.\n", 
        "params" : [ "$aws-credentials" ]
      }, {
        "description" : "", 
        "params" : [ "$aws-credentials", "$bucket" ]
      }, {
        "description" : "", 
        "params" : [ "$aws-credentials", "$bucket", "$key" ]
      } ], 
      "http-date" : [ {
        "description" : " Generates a date formated according to rfc822. Example: Fri, 15 Oct 10\n", 
        "params" : [  ]
      } ], 
      "x-amz-date" : [ {
        "description" : " Generates a date formated as required by S3.\n", 
        "params" : [  ]
      } ], 
      "timestamp" : [ {
        "description" : " Generates a date formated: \"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'.\n", 
        "params" : [  ]
      } ], 
      "bucket" : [ {
        "description" : " Returns the bucket to use. The bucket is mandatory.\n", 
        "params" : [ "$bucket", "$credentials" ]
      }, {
        "description" : " Returns the bucket to use. The $mandatory parameter specifies if the\n bucket is mandatory.\n", 
        "params" : [ "$bucket", "$credentials", "$mandatory" ]
      } ], 
      "credentials" : [ {
        "description" : " Returns and validate the specified credentials.\n", 
        "params" : [ "$credentials" ]
      } ], 
      "validate" : [ {
        "description" : " Validates a JSON object.\n", 
        "params" : [ "$object", "$schema", "$allow-extra-fields" ]
      } ], 
      "validate-field" : [ {
        "description" : "", 
        "params" : [ "$type", "$object", "$key" ]
      } ], 
      "metadata" : [ {
        "description" : "", 
        "params" : [ "$response" ]
      } ], 
      "headers" : [ {
        "description" : "", 
        "params" : [ "$headers", "$response" ]
      } ], 
      "s3-object-from-response" : [ {
        "description" : "", 
        "params" : [ "$s3-object", "$response" ]
      } ], 
      "uri-encode-key" : [ {
        "description" : "", 
        "params" : [ "$key" ]
      } ], 
      "list-bucket-versions-request" : [ {
        "description" : "", 
        "params" : [ "$aws-credentials", "$bucket", "$options" ]
      } ], 
      "list-bucket-versions-response" : [ {
        "description" : "", 
        "params" : [ "$response" ]
      } ], 
      "list-bucket-request" : [ {
        "description" : "", 
        "params" : [ "$aws-credentials", "$bucket", "$options" ]
      } ], 
      "list-bucket-response" : [ {
        "description" : "", 
        "params" : [ "$response" ]
      } ]
    }
  }, 
  "http://www.28msec.com/modules/sparql" : {
    "description" : " This module contains functions to interact with a SPARQL endpoint.\n Requests to an endpoint are made using HTTP.\n Specifically, this module allows SELECT, ASK, CONSTRUCT and DESCRIBE queries. Additionally, it also allows for UPDATE statements.\n Various result formats are supported (e.g. XML, JSON, CSV)\n Configuration\n For this module you may use a preconfigured default or named datasource of the SPARQL category.\n You can also provide a configuration object directly.\n As config parameter you can either pass a string that will be interpreted as a SPARQL endpoint datasource name or\n  an object with the following properties:\n \n  href: The URL of the SPARQL endpoint to use. Required.\n  auth_method: The HTTP authentication method to use.\n  username: The username to use for HTTP authentication.\n  password: The password to use for HTTP authentication.\n \n \n Options\n The options object that can be passed to plenty of the functions in this module. It may have the following properties:\n \n   default-graph-uri: A string or an array of strings with the graph URIs to be used by the query.\n   named-graph-uri: A string or an array of strings with the named graph URIs to be used by the query.\n   using-graph-uri: A string or an array of strings with the graph URIs to be used by an update statement.\n   using-named-graph-uri: A string or an array of strings with the named graph URIs to be used by an update statement.\n   method: The request method to be used. Available method values are $sparql:METHOD-GET, $sparql:METHOD-POST-URLENCODED or $sparql:METHOD-POST-SPARQL.\n   format : The result format to request. Possible format values are $sparql:FORMAT-XML, $sparql:FORMAT-JSON, $sparql:FORMAT-CSV, $sparql:FORMAT-TSV, $sparql:FORMAT-ANY. For CONSTRUCT or DESCRIBE queries $sparql:FORMAT-RDF is available.\n   parameters: Many SPARQL endpoints support additional parameters which are not part of the SPARQL endpoint specification. They can be provided here.\n   http-headers: object that will be used as the headers property for the requests made by the http-client.\n   http-options: object that will be used as the options property for the requests made by the http-client.\n  \n All those properties are optional.\n \n", 
    "functions" : {
      "query" : [ {
        "description" : " \n This function sends a SPARQL query to an endpoint and directly returns the corresponding HTTP response.\n \n \n   \n    The default-graph-uri and named-graph-uri properties of the options object may be used to pass default graph URIs or named graph URIs to the endpoint.\n    The method property of the options object may be used to set the request method to be used. GET will be used as default.\n    The format property of the options object may be used to request a specific result format. XML will be used as default. However, note that this function does not interpret the result.\n   \n \n", 
        "params" : [ "$config", "$query", "$options" ]
      }, {
        "description" : " \n This function sends a SPARQL query to an endpoint and directly returns the corresponding HTTP response.\n The default datasource for SPARQL will be used.\n \n \n   \n    The default-graph-uri and named-graph-uri properties of the options object may be used to pass default graph URIs or named graph URIs to the endpoint.\n    The method property of the options object may be used to set the request method to be used. GET will be used as default.\n    The format property of the options object may be used to request a specific result format. XML will be used as default. However, note that this function does not interpret the result.\n   \n \n", 
        "params" : [ "$query", "$options" ]
      }, {
        "description" : " \n This function sends a SPARQL query to an endpoint and directly returns the corresponding HTTP response.\n The default datasource for SPARQL will be used.\n \n", 
        "params" : [ "$query" ]
      } ], 
      "query-json" : [ {
        "description" : " \n This function sends a SPARQL SELECT or ASK query to an endpoint and returns the query response as SPARQL JSON format object.\n If the endpoint fails to deliver SPARQL JSON result format this function will try to convert the results to JSON if possible.\n \n Link to the specification of the result format at W3C: SPARQL 1.1 Query Results JSON Format\n \n   \n    The default-graph-uri and named-graph-uri properties of the options object may be used to pass default graph URIs or named graph URIs to the endpoint.\n    The method property of the options object may be used to set the request method to be used. GET will be used as default.\n    The format property of the options object will be ignored. \"application/sparql-results+json\" will be requested as result format. \n   \n \n", 
        "params" : [ "$config", "$query", "$options" ]
      }, {
        "description" : " \n This function sends a SPARQL SELECT or ASK query to an endpoint and returns the query response as SPARQL JSON format object.\n If the endpoint fails to deliver SPARQL JSON result format this function will try to convert the results to JSON if possible.\n The default datasource for SPARQL will be used.\n \n Link to the specification of the result format at W3C: SPARQL 1.1 Query Results JSON Format\n \n   \n    The default-graph-uri and named-graph-uri properties of the options object may be used to pass default graph URIs or named graph URIs to the endpoint.\n    The method property of the options object may be used to set the request method to be used. GET will be used as default.\n    The format property of the options object will be ignored. \"application/sparql-results+json\" will be requested as result format. \n   \n \n", 
        "params" : [ "$query", "$options" ]
      }, {
        "description" : " \n This function sends a SPARQL SELECT or ASK query to an endpoint and returns the query response as SPARQL JSON format object.\n If the endpoint fails to deliver SPARQL JSON result format this function will try to convert the results to JSON if possible.\n The default datasource for SPARQL will be used.\n \n Link to the specification of the result format at W3C: SPARQL 1.1 Query Results JSON Format\n", 
        "params" : [ "$query" ]
      } ], 
      "query-xml" : [ {
        "description" : " \n This function sends a SPARQL SELECT or ASK query to an endpoint and returns the query response as SPARQL XML format element.\n If the endpoint fails to deliver SPARQL XML result format this function will try to convert the results to XML if possible.\n \n Link to the specification of the result format at W3C: SPARQL Query Results XML Format\n \n   \n    The default-graph-uri and named-graph-uri properties of the options object may be used to pass default graph URIs or named graph URIs to the endpoint.\n    The method property of the options object may be used to set the request method to be used. GET will be used as default.\n    The format property of the options object will be ignored. \"application/sparql-results+xml\" will be requested as result format. \n   \n \n", 
        "params" : [ "$config", "$query", "$options" ]
      }, {
        "description" : " \n This function sends a SPARQL SELECT or ASK query to an endpoint and returns the query response as SPARQL XML format element.\n If the endpoint fails to deliver SPARQL XML result format this function will try to convert the results to XML if possible.\n The default datasource for SPARQL will be used.\n \n Link to the specification of the result format at W3C: SPARQL Query Results XML Format\n \n   \n    The default-graph-uri and named-graph-uri properties of the options object may be used to pass default graph URIs or named graph URIs to the endpoint.\n    The method property of the options object may be used to set the request method to be used. GET will be used as default.\n    The format property of the options object will be ignored. \"application/sparql-results+xml\" will be requested as result format. \n   \n \n", 
        "params" : [ "$query", "$options" ]
      }, {
        "description" : " \n This function sends a SPARQL SELECT or ASK query to an endpoint and returns the query response as SPARQL XML format element.\n If the endpoint fails to deliver SPARQL XML result format this function will try to convert the results to XML if possible.\n The default datasource for SPARQL will be used.\n \n Link to the specification of the result format at W3C: SPARQL Query Results XML Format\n", 
        "params" : [ "$query" ]
      } ], 
      "query-rdf" : [ {
        "description" : " \n This function sends a SPARQL CONSTRUCT or DESCRIBE query to an endpoint and returns the query response as RDF.\n \n Link to the specification of the result format at W3C: RDF/XML Syntax Specification\n \n   \n    The default-graph-uri and named-graph-uri properties of the options object may be used to pass default graph URIs or named graph URIs to the endpoint.\n    The method property of the options object may be used to set the request method to be used. GET will be used as default.\n    The format property of the options object will be ignored. \"application/rdf+xml\" will be requested as result format. \n   \n \n", 
        "params" : [ "$config", "$query", "$options" ]
      }, {
        "description" : " \n This function sends a SPARQL CONSTRUCT or DESCRIBE query to an endpoint and returns the query response as RDF.\n The default datasource for SPARQL will be used.\n \n Link to the specification of the result format at W3C: RDF/XML Syntax Specification\n \n   \n    The default-graph-uri and named-graph-uri properties of the options object may be used to pass default graph URIs or named graph URIs to the endpoint.\n    The method property of the options object may be used to set the request method to be used. GET will be used as default.\n    The format property of the options object will be ignored. \"application/rdf+xml\" will be requested as result format. \n   \n \n", 
        "params" : [ "$query", "$options" ]
      }, {
        "description" : " \n This function sends a SPARQL CONSTRUCT or DESCRIBE query to an endpoint and returns the query response as RDF.\n The default datasource for SPARQL will be used.\n \n Link to the specification of the result format at W3C: RDF/XML Syntax Specification\n", 
        "params" : [ "$query" ]
      } ], 
      "ask" : [ {
        "description" : " \n This function sends a SPARQL ASK query to an endpoint and returns the result as boolean value.\n \n \n   \n    The default-graph-uri and named-graph-uri properties of the options object may be used to pass default graph URIs or named graph URIs to the endpoint.\n    The method property of the options object may be used to set the request method to be used. GET will be used as default.\n    The format property of the options object may be used to request a specific result format. However this function will try to extract only the boolean answer from the result.\n   \n \n", 
        "params" : [ "$config", "$query", "$options" ]
      }, {
        "description" : " \n This function sends a SPARQL ASK query to an endpoint and returns the result as boolean value.\n The default datasource for SPARQL will be used.\n \n \n   \n    The default-graph-uri and named-graph-uri properties of the options object may be used to pass default graph URIs or named graph URIs to the endpoint.\n    The method property of the options object may be used to set the request method to be used. GET will be used as default.\n    The format property of the options object may be used to request a specific result format. However this function will try to extract only the boolean answer from the result.\n   \n \n", 
        "params" : [ "$query", "$options" ]
      }, {
        "description" : " \n This function sends a SPARQL ASK query to an endpoint and returns the result as boolean value.\n The default datasource for SPARQL will be used.\n \n", 
        "params" : [ "$query" ]
      } ], 
      "update" : [ {
        "description" : " \n This function sends a SPARQL update statement to an endpoint and directly returns the corresponding HTTP response.\n \n \n   \n    The using-graph-uri and using-named-graph-uri properties of the options object may be used to pass graph URIs or named graph URIs to the endpoint.\n    The method property of the options object may be used to set the request method to be used. POST-URLENCODED will be used as default.\n    The format property of the options object may be used to request a specific result format. XML will be used as default. However, note that this function does not interpret the result.\n   \n \n", 
        "params" : [ "$config", "$update-statement", "$options" ]
      }, {
        "description" : " \n This function sends a SPARQL update statement to an endpoint and directly returns the corresponding HTTP response.\n The default datasource for SPARQL will be used.\n \n \n   \n    The using-graph-uri and using-named-graph-uri properties of the options object may be used to pass graph URIs or named graph URIs to the endpoint.\n    The method property of the options object may be used to set the request method to be used. POST-URLENCODED will be used as default.\n    The format property of the options object may be used to request a specific result format. XML will be used as default. However, note that this function does not interpret the result.\n   \n \n", 
        "params" : [ "$update-statement", "$options" ]
      }, {
        "description" : " \n This function sends a SPARQL update statement to an endpoint and directly returns the corresponding HTTP response.\n The default datasource for SPARQL will be used.\n \n", 
        "params" : [ "$update-statement" ]
      } ], 
      "get-config" : [ {
        "description" : "", 
        "params" : [ "$config" ]
      } ], 
      "create-request" : [ {
        "description" : "", 
        "params" : [ "$config", "$query", "$request-method", "$result-format", "$is-update", "$options" ]
      } ], 
      "parse-result" : [ {
        "description" : "", 
        "params" : [ "$response" ]
      } ], 
      "check-result" : [ {
        "description" : "", 
        "params" : [ "$response" ]
      } ], 
      "xml-to-json" : [ {
        "description" : "", 
        "params" : [ "$xml-result" ]
      } ], 
      "json-to-xml" : [ {
        "description" : "", 
        "params" : [ "$json-result" ]
      } ], 
      "validate-options" : [ {
        "description" : "", 
        "params" : [ "$options" ]
      } ], 
      "validate-options-update" : [ {
        "description" : "", 
        "params" : [ "$options" ]
      } ], 
      "validate-config" : [ {
        "description" : "", 
        "params" : [ "$config" ]
      } ], 
      "validate" : [ {
        "description" : "", 
        "params" : [ "$obj", "$schema" ]
      } ]
    }
  }, 
  "http://www.28msec.com/modules/store" : {
    "description" : " This module provides functions to perform MongoDB query operations\n (i.e. find and aggregate) on the database associated with the\n project.\n The module is always imported so you don't need to import it explicitly.\n Also, you don't need to fully qualify the function if you want to invoke it.\n", 
    "functions" : {
      "collection-chunk-specs" : [ {
        "description" : "", 
        "params" : [ "$name" ]
      }, {
        "description" : "", 
        "params" : [ "$name", "$chunk-size" ]
      } ], 
      "collection-chunk" : [ {
        "description" : "", 
        "params" : [ "$name", "$chunk" ]
      } ], 
      "find" : [ {
        "description" : " Performs a MongoDB query operation on the given collection and\n returns all matches.\n", 
        "params" : [ "$coll", "$query" ]
      }, {
        "description" : " Performs a MongoDB query operation on the given collection and\n returns all matches.\n Available options:\n \n   to-return: the maximum number of objects to return (0 = unlimited)\n   to-skip: start with the n-th object\n   batch-size: the number of objects to return in one batch\n   slave-ok: allow this query to be run against a replica secondary\n   await-data: the server will block for some extra time before returning,\n   waiting for more data to return\n   partial-results: return partial results if some shards are down instead\n   of returning an error\n \n", 
        "params" : [ "$coll", "$query", "$options" ]
      } ], 
      "aggregate" : [ {
        "description" : " Performs a MongoDB aggregation framework job on the given collection.\n The $pipeline parameter needs to specify a valid aggregation\n framework pipeline. For example,\n \n  [\n    { $project : {\n       author : 1,\n       tags : 1,\n    } },\n    { $unwind : \"$tags\" },\n    { $group : {\n       _id : { tags : \"$tags\" },\n       authors : { $addToSet : \"$author\" }\n    } }\n ]\n \n The function returns the result as one object. The object contains\n the field named \"ok\" with value 0 if the execution failed or 1 if\n it succeeded. If it succeeded, the result is contained as an array\n in the result field. Otherwise, the errmsg field contains the description\n of the error. For exampl,e\n \n {\n   \"result\" : [ ... ],\n   \"ok\" : 1\n }\n \n", 
        "params" : [ "$collection", "$pipeline" ]
      } ], 
      "flush" : [ {
        "description" : "", 
        "params" : [  ]
      } ], 
      "flush-if" : [ {
        "description" : "", 
        "params" : [ "$cond" ]
      } ], 
      "clear" : [ {
        "description" : "", 
        "params" : [  ]
      } ], 
      "clear-if" : [ {
        "description" : "", 
        "params" : [ "$cond" ]
      } ]
    }
  }, 
  "http://www.functx.com" : {
    "description" : " --------------------------------\n The FunctX XQuery Function Library\n --------------------------------\n Copyright (C) 2007 Datypic\n This library is free software; you can redistribute it and/or\n modify it under the terms of the GNU Lesser General Public\n License as published by the Free Software Foundation; either\n version 2.1 of the License.\n This library is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n Lesser General Public License for more details.\n You should have received a copy of the GNU Lesser General Public\n License along with this library; if not, write to the Free Software\n Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n For more information on the FunctX XQuery library, contact contrib@functx.com.\n", 
    "functions" : {
      "add-attributes" : [ {
        "description" : " Adds attributes to XML elements\n", 
        "params" : [ "$elements", "$attrNames", "$attrValues" ]
      } ], 
      "add-months" : [ {
        "description" : " Adds months to a date\n", 
        "params" : [ "$date", "$months" ]
      } ], 
      "add-or-update-attributes" : [ {
        "description" : " Adds attributes to XML elements\n", 
        "params" : [ "$elements", "$attrNames", "$attrValues" ]
      } ], 
      "all-whitespace" : [ {
        "description" : " Whether a value is all whitespace or a zero-length string\n", 
        "params" : [ "$arg" ]
      } ], 
      "are-distinct-values" : [ {
        "description" : " Whether all the values in a sequence are distinct\n", 
        "params" : [ "$seq" ]
      } ], 
      "atomic-type" : [ {
        "description" : " The built-in type of an atomic value\n", 
        "params" : [ "$values" ]
      } ], 
      "avg-empty-is-zero" : [ {
        "description" : " The average, counting \"empty\" values as zero\n", 
        "params" : [ "$values", "$allNodes" ]
      } ], 
      "between-exclusive" : [ {
        "description" : " Whether a value is between two provided values\n", 
        "params" : [ "$value", "$minValue", "$maxValue" ]
      } ], 
      "between-inclusive" : [ {
        "description" : " Whether a value is between two provided values, or equal to one of them\n", 
        "params" : [ "$value", "$minValue", "$maxValue" ]
      } ], 
      "camel-case-to-words" : [ {
        "description" : " Turns a camelCase string into space-separated words\n", 
        "params" : [ "$arg", "$delim" ]
      } ], 
      "capitalize-first" : [ {
        "description" : " Capitalizes the first character of a string\n", 
        "params" : [ "$arg" ]
      } ], 
      "change-element-names-deep" : [ {
        "description" : " Changes the names of elements in an XML fragment\n", 
        "params" : [ "$nodes", "$oldNames", "$newNames" ]
      } ], 
      "change-element-ns-deep" : [ {
        "description" : " Changes the namespace of XML elements and its descendants\n", 
        "params" : [ "$nodes", "$newns", "$prefix" ]
      } ], 
      "change-element-ns" : [ {
        "description" : " Changes the namespace of XML elements\n", 
        "params" : [ "$elements", "$newns", "$prefix" ]
      } ], 
      "chars" : [ {
        "description" : " Converts a string to a sequence of characters\n", 
        "params" : [ "$arg" ]
      } ], 
      "contains-any-of" : [ {
        "description" : " Whether a string contains any of a sequence of strings\n", 
        "params" : [ "$arg", "$searchStrings" ]
      } ], 
      "contains-case-insensitive" : [ {
        "description" : " Whether one string contains another, without regard to case\n", 
        "params" : [ "$arg", "$substring" ]
      } ], 
      "contains-word" : [ {
        "description" : " Whether one string contains another, as a separate word\n", 
        "params" : [ "$arg", "$word" ]
      } ], 
      "copy-attributes" : [ {
        "description" : " Copies attributes from one element to another\n", 
        "params" : [ "$copyTo", "$copyFrom" ]
      } ], 
      "date" : [ {
        "description" : " Construct a date from a year, month and day\n", 
        "params" : [ "$year", "$month", "$day" ]
      } ], 
      "dateTime" : [ {
        "description" : " Construct a date/time from individual components\n", 
        "params" : [ "$year", "$month", "$day", "$hour", "$minute", "$second" ]
      } ], 
      "day-in-year" : [ {
        "description" : " The day of the year (a number between 1 and 366)\n", 
        "params" : [ "$date" ]
      } ], 
      "day-of-week-abbrev-en" : [ {
        "description" : " The abbreviated day of the week, from a date, in English\n", 
        "params" : [ "$date" ]
      } ], 
      "day-of-week-name-en" : [ {
        "description" : " The name of the day of the week, from a date, in English\n", 
        "params" : [ "$date" ]
      } ], 
      "day-of-week" : [ {
        "description" : " The day of the week, from a date\n", 
        "params" : [ "$date" ]
      } ], 
      "dayTimeDuration" : [ {
        "description" : " Construct a dayTimeDuration from a number of days, hours, etc.\n", 
        "params" : [ "$days", "$hours", "$minutes", "$seconds" ]
      } ], 
      "days-in-month" : [ {
        "description" : " Number of days in the month\n", 
        "params" : [ "$date" ]
      } ], 
      "depth-of-node" : [ {
        "description" : " The depth (level) of a node in an XML tree\n", 
        "params" : [ "$node" ]
      } ], 
      "distinct-attribute-names" : [ {
        "description" : " The distinct names of all attributes in an XML fragment\n", 
        "params" : [ "$nodes" ]
      } ], 
      "distinct-deep" : [ {
        "description" : " The XML nodes with distinct values, taking into account attributes and descendants\n", 
        "params" : [ "$nodes" ]
      } ], 
      "distinct-element-names" : [ {
        "description" : " The distinct names of all elements in an XML fragment\n", 
        "params" : [ "$nodes" ]
      } ], 
      "distinct-element-paths" : [ {
        "description" : " The distinct paths of all descendant elements in an XML fragment\n", 
        "params" : [ "$nodes" ]
      } ], 
      "distinct-nodes" : [ {
        "description" : " The distinct XML nodes in a sequence (by node identity)\n", 
        "params" : [ "$nodes" ]
      } ], 
      "duration-from-timezone" : [ {
        "description" : " Converts a timezone like \"-05:00\" or \"Z\" into xs:dayTimeDuration\n", 
        "params" : [ "$timezone" ]
      } ], 
      "dynamic-path" : [ {
        "description" : " Dynamically evaluates a simple XPath path\n", 
        "params" : [ "$parent", "$path" ]
      } ], 
      "escape-for-regex" : [ {
        "description" : " Escapes regex special characters\n", 
        "params" : [ "$arg" ]
      } ], 
      "exclusive-or" : [ {
        "description" : " Whether one (and only one) of two boolean values is true\n", 
        "params" : [ "$arg1", "$arg2" ]
      } ], 
      "first-day-of-month" : [ {
        "description" : " The first day of the month of a date\n", 
        "params" : [ "$date" ]
      } ], 
      "first-day-of-year" : [ {
        "description" : " The first day of the year of a date\n", 
        "params" : [ "$date" ]
      } ], 
      "first-node" : [ {
        "description" : " The XML node in a sequence that appears first in document order\n", 
        "params" : [ "$nodes" ]
      } ], 
      "follows-not-descendant" : [ {
        "description" : " Whether an XML node follows another without being its descendant\n", 
        "params" : [ "$a", "$b" ]
      } ], 
      "format-as-title-en" : [ {
        "description" : " Moves title words like \"the\" and \"a\" to the end of strings\n", 
        "params" : [ "$titles" ]
      } ], 
      "fragment-from-uri" : [ {
        "description" : " Returns the fragment from a URI\n", 
        "params" : [ "$uri" ]
      } ], 
      "get-matches-and-non-matches" : [ {
        "description" : " Splits a string into matching and non-matching regions\n", 
        "params" : [ "$string", "$regex" ]
      } ], 
      "get-matches" : [ {
        "description" : " Return the matching regions of a string\n", 
        "params" : [ "$string", "$regex" ]
      } ], 
      "has-element-only-content" : [ {
        "description" : " Whether an element has element-only content\n", 
        "params" : [ "$element" ]
      } ], 
      "has-empty-content" : [ {
        "description" : " Whether an element has empty content\n", 
        "params" : [ "$element" ]
      } ], 
      "has-mixed-content" : [ {
        "description" : " Whether an element has mixed content\n", 
        "params" : [ "$element" ]
      } ], 
      "has-simple-content" : [ {
        "description" : " Whether an element has simple content\n", 
        "params" : [ "$element" ]
      } ], 
      "id-from-element" : [ {
        "description" : " Gets the ID of an XML element\n", 
        "params" : [ "$element" ]
      } ], 
      "id-untyped" : [ {
        "description" : " Gets XML element(s) that have an attribute with a particular value\n", 
        "params" : [ "$node", "$id" ]
      } ], 
      "if-absent" : [ {
        "description" : " The first argument if it is not empty, otherwise the second argument\n", 
        "params" : [ "$arg", "$value" ]
      } ], 
      "if-empty" : [ {
        "description" : " The first argument if it is not blank, otherwise the second argument\n", 
        "params" : [ "$arg", "$value" ]
      } ], 
      "index-of-deep-equal-node" : [ {
        "description" : " The position of a node in a sequence, based on contents and attributes\n", 
        "params" : [ "$nodes", "$nodeToFind" ]
      } ], 
      "index-of-match-first" : [ {
        "description" : " The first position of a matching substring\n", 
        "params" : [ "$arg", "$pattern" ]
      } ], 
      "index-of-node" : [ {
        "description" : " The position of a node in a sequence, based on node identity\n", 
        "params" : [ "$nodes", "$nodeToFind" ]
      } ], 
      "index-of-string-first" : [ {
        "description" : " The first position of a substring\n", 
        "params" : [ "$arg", "$substring" ]
      } ], 
      "index-of-string-last" : [ {
        "description" : " The last position of a substring\n", 
        "params" : [ "$arg", "$substring" ]
      } ], 
      "index-of-string" : [ {
        "description" : " The position(s) of a substring\n", 
        "params" : [ "$arg", "$substring" ]
      } ], 
      "insert-string" : [ {
        "description" : " Inserts a string at a specified position\n", 
        "params" : [ "$originalString", "$stringToInsert", "$pos" ]
      } ], 
      "is-a-number" : [ {
        "description" : " Whether a value is numeric\n", 
        "params" : [ "$value" ]
      } ], 
      "is-absolute-uri" : [ {
        "description" : " Whether a URI is absolute\n", 
        "params" : [ "$uri" ]
      } ], 
      "is-ancestor" : [ {
        "description" : " Whether an XML node is an ancestor of another node\n", 
        "params" : [ "$node1", "$node2" ]
      } ], 
      "is-descendant" : [ {
        "description" : " Whether an XML node is a descendant of another node\n", 
        "params" : [ "$node1", "$node2" ]
      } ], 
      "is-leap-year" : [ {
        "description" : " Whether a date falls in a leap year\n", 
        "params" : [ "$date" ]
      } ], 
      "is-node-among-descendants-deep-equal" : [ {
        "description" : " Whether an XML node is among the descendants of a sequence, based on contents and attributes\n", 
        "params" : [ "$node", "$seq" ]
      } ], 
      "is-node-among-descendants" : [ {
        "description" : " Whether an XML node is among the descendants of a sequence, based on node identity\n", 
        "params" : [ "$node", "$seq" ]
      } ], 
      "is-node-in-sequence-deep-equal" : [ {
        "description" : " Whether an XML node is in a sequence, based on contents and attributes\n", 
        "params" : [ "$node", "$seq" ]
      } ], 
      "is-node-in-sequence" : [ {
        "description" : " Whether an XML node is in a sequence, based on node identity\n", 
        "params" : [ "$node", "$seq" ]
      } ], 
      "is-value-in-sequence" : [ {
        "description" : " Whether an atomic value appears in a sequence\n", 
        "params" : [ "$value", "$seq" ]
      } ], 
      "last-day-of-month" : [ {
        "description" : " The last day of the month of a date\n", 
        "params" : [ "$date" ]
      } ], 
      "last-day-of-year" : [ {
        "description" : " The last day of the month of a date\n", 
        "params" : [ "$date" ]
      } ], 
      "last-node" : [ {
        "description" : " The XML node in a sequence that is last in document order\n", 
        "params" : [ "$nodes" ]
      } ], 
      "leaf-elements" : [ {
        "description" : " All XML elements that don't have any child elements\n", 
        "params" : [ "$root" ]
      } ], 
      "left-trim" : [ {
        "description" : " Trims leading whitespace\n", 
        "params" : [ "$arg" ]
      } ], 
      "line-count" : [ {
        "description" : " The number of lines\n", 
        "params" : [ "$arg" ]
      } ], 
      "lines" : [ {
        "description" : " Split a string into separate lines\n", 
        "params" : [ "$arg" ]
      } ], 
      "max-depth" : [ {
        "description" : " The maximum depth of elements in an XML tree\n", 
        "params" : [ "$root" ]
      } ], 
      "max-determine-type" : [ {
        "description" : " The maximum value in a sequence, figuring out its type (numeric or string)\n", 
        "params" : [ "$seq" ]
      } ], 
      "max-line-length" : [ {
        "description" : " The maximum line length\n", 
        "params" : [ "$arg" ]
      } ], 
      "max-node" : [ {
        "description" : " The XML node whose typed value is the maximum\n", 
        "params" : [ "$nodes" ]
      } ], 
      "max-string" : [ {
        "description" : " The maximum of a sequence of values, treating them like strings\n", 
        "params" : [ "$strings" ]
      } ], 
      "min-determine-type" : [ {
        "description" : " The minimum value in a sequence, figuring out its type (numeric or string)\n", 
        "params" : [ "$seq" ]
      } ], 
      "min-node" : [ {
        "description" : " The XML node whose typed value is the minimum\n", 
        "params" : [ "$nodes" ]
      } ], 
      "min-non-empty-string" : [ {
        "description" : " The minimum of a sequence of strings, ignoring \"empty\" values\n", 
        "params" : [ "$strings" ]
      } ], 
      "min-string" : [ {
        "description" : " The minimum of a sequence of values, treating them like strings\n", 
        "params" : [ "$strings" ]
      } ], 
      "mmddyyyy-to-date" : [ {
        "description" : " Converts a string with format MMDDYYYY (with any delimiters) to a date\n", 
        "params" : [ "$dateString" ]
      } ], 
      "month-abbrev-en" : [ {
        "description" : " The month of a date as an abbreviated word (Jan, Feb, etc.)\n", 
        "params" : [ "$date" ]
      } ], 
      "month-name-en" : [ {
        "description" : " The month of a date as a word (January, February, etc.)\n", 
        "params" : [ "$date" ]
      } ], 
      "name-test" : [ {
        "description" : " Whether a name matches a list of names or name wildcards\n", 
        "params" : [ "$testname", "$names" ]
      } ], 
      "namespaces-in-use" : [ {
        "description" : " A list of namespaces used in element/attribute names in an XML fragment\n", 
        "params" : [ "$root" ]
      } ], 
      "next-day" : [ {
        "description" : " The next day\n", 
        "params" : [ "$date" ]
      } ], 
      "node-kind" : [ {
        "description" : " The XML node kind (element, attribute, text, etc.)\n", 
        "params" : [ "$nodes" ]
      } ], 
      "non-distinct-values" : [ {
        "description" : " Returns any values that appear more than once in a sequence\n", 
        "params" : [ "$seq" ]
      } ], 
      "number-of-matches" : [ {
        "description" : " The number of regions that match a pattern\n", 
        "params" : [ "$arg", "$pattern" ]
      } ], 
      "open-ref-document" : [ {
        "description" : " Resolves a relative URI and references it, returning an XML document\n", 
        "params" : [ "$refNode" ]
      } ], 
      "ordinal-number-en" : [ {
        "description" : " Reformats a number as an ordinal number, e.g. 1st, 2nd, 3rd.\n", 
        "params" : [ "$num" ]
      } ], 
      "pad-integer-to-length" : [ {
        "description" : " Pads an integer to a desired length by adding leading zeros\n", 
        "params" : [ "$integerToPad", "$length" ]
      } ], 
      "pad-string-to-length" : [ {
        "description" : " Pads a string to a desired length\n", 
        "params" : [ "$stringToPad", "$padChar", "$length" ]
      } ], 
      "path-to-node-with-pos" : [ {
        "description" : " A unique path to an XML node (or sequence of nodes)\n", 
        "params" : [ "$node" ]
      } ], 
      "path-to-node" : [ {
        "description" : " A path to an XML node (or sequence of nodes)\n", 
        "params" : [ "$nodes" ]
      } ], 
      "precedes-not-ancestor" : [ {
        "description" : " Whether an XML node precedes another without being its ancestor\n", 
        "params" : [ "$a", "$b" ]
      } ], 
      "previous-day" : [ {
        "description" : " The previous day\n", 
        "params" : [ "$date" ]
      } ], 
      "remove-attributes-deep" : [ {
        "description" : " Removes attributes from an XML fragment, based on name\n", 
        "params" : [ "$nodes", "$names" ]
      } ], 
      "remove-attributes" : [ {
        "description" : " Removes attributes from an XML element, based on name\n", 
        "params" : [ "$elements", "$names" ]
      } ], 
      "remove-elements-deep" : [ {
        "description" : " Removes descendant elements from an XML node, based on name\n", 
        "params" : [ "$nodes", "$names" ]
      } ], 
      "remove-elements-not-contents" : [ {
        "description" : " Removes descendant XML elements but keeps their content\n", 
        "params" : [ "$nodes", "$names" ]
      } ], 
      "remove-elements" : [ {
        "description" : " Removes child elements from an XML node, based on name\n", 
        "params" : [ "$elements", "$names" ]
      } ], 
      "repeat-string" : [ {
        "description" : " Repeats a string a given number of times\n", 
        "params" : [ "$stringToRepeat", "$count" ]
      } ], 
      "replace-beginning" : [ {
        "description" : " Replaces the beginning of a string, up to a matched pattern\n", 
        "params" : [ "$arg", "$pattern", "$replacement" ]
      } ], 
      "replace-element-values" : [ {
        "description" : " Updates the content of one or more elements\n", 
        "params" : [ "$elements", "$values" ]
      } ], 
      "replace-first" : [ {
        "description" : " Replaces the first match of a pattern\n", 
        "params" : [ "$arg", "$pattern", "$replacement" ]
      } ], 
      "replace-multi" : [ {
        "description" : " Performs multiple replacements, using pairs of replace parameters\n", 
        "params" : [ "$arg", "$changeFrom", "$changeTo" ]
      } ], 
      "reverse-string" : [ {
        "description" : " Reverses the order of characters\n", 
        "params" : [ "$arg" ]
      } ], 
      "right-trim" : [ {
        "description" : " Trims trailing whitespace\n", 
        "params" : [ "$arg" ]
      } ], 
      "scheme-from-uri" : [ {
        "description" : " Returns the scheme from a URI\n", 
        "params" : [ "$uri" ]
      } ], 
      "sequence-deep-equal" : [ {
        "description" : " Whether two sequences have the same XML node content and/or values\n", 
        "params" : [ "$seq1", "$seq2" ]
      } ], 
      "sequence-node-equal-any-order" : [ {
        "description" : " Whether two sequences contain the same XML nodes, regardless of order\n", 
        "params" : [ "$seq1", "$seq2" ]
      } ], 
      "sequence-node-equal" : [ {
        "description" : " Whether two sequences contain the same XML nodes, in the same order\n", 
        "params" : [ "$seq1", "$seq2" ]
      } ], 
      "sequence-type" : [ {
        "description" : " The sequence type that represents a sequence of nodes or values\n", 
        "params" : [ "$items" ]
      } ], 
      "siblings-same-name" : [ {
        "description" : " The siblings of an XML element that have the same name\n", 
        "params" : [ "$element" ]
      } ], 
      "siblings" : [ {
        "description" : " The siblings of an XML node\n", 
        "params" : [ "$node" ]
      } ], 
      "sort-as-numeric" : [ {
        "description" : " Sorts a sequence of numeric values or nodes\n", 
        "params" : [ "$seq" ]
      } ], 
      "sort-case-insensitive" : [ {
        "description" : " Sorts a sequence of values or nodes regardless of capitalization\n", 
        "params" : [ "$seq" ]
      } ], 
      "sort-document-order" : [ {
        "description" : " Sorts a sequence of nodes in document order\n", 
        "params" : [ "$seq" ]
      } ], 
      "sort" : [ {
        "description" : " Sorts a sequence of values or nodes\n", 
        "params" : [ "$seq" ]
      } ], 
      "substring-after-if-contains" : [ {
        "description" : " Performs substring-after, returning the entire string if it does not contain the delimiter\n", 
        "params" : [ "$arg", "$delim" ]
      } ], 
      "substring-after-last-match" : [ {
        "description" : " The substring after the last text that matches a regex\n", 
        "params" : [ "$arg", "$regex" ]
      } ], 
      "substring-after-last" : [ {
        "description" : " The substring after the last occurrence of a delimiter\n", 
        "params" : [ "$arg", "$delim" ]
      } ], 
      "substring-after-match" : [ {
        "description" : " The substring after the first text that matches a regex\n", 
        "params" : [ "$arg", "$regex" ]
      } ], 
      "substring-before-if-contains" : [ {
        "description" : " Performs substring-before, returning the entire string if it does not contain the delimiter\n", 
        "params" : [ "$arg", "$delim" ]
      } ], 
      "substring-before-last-match" : [ {
        "description" : " The substring after the first text that matches a regex\n", 
        "params" : [ "$arg", "$regex" ]
      } ], 
      "substring-before-last" : [ {
        "description" : " The substring before the last occurrence of a delimiter\n", 
        "params" : [ "$arg", "$delim" ]
      } ], 
      "substring-before-match" : [ {
        "description" : " The substring before the last text that matches a regex\n", 
        "params" : [ "$arg", "$regex" ]
      } ], 
      "time" : [ {
        "description" : " Construct a time from an hour, minute and second\n", 
        "params" : [ "$hour", "$minute", "$second" ]
      } ], 
      "timezone-from-duration" : [ {
        "description" : " Converts an xs:dayTimeDuration into a timezone like \"-05:00\" or \"Z\"\n", 
        "params" : [ "$duration" ]
      } ], 
      "total-days-from-duration" : [ {
        "description" : " The total number of days in a dayTimeDuration\n", 
        "params" : [ "$duration" ]
      } ], 
      "total-hours-from-duration" : [ {
        "description" : " The total number of hours in a dayTimeDuration\n", 
        "params" : [ "$duration" ]
      } ], 
      "total-minutes-from-duration" : [ {
        "description" : " The total number of minutes in a dayTimeDuration\n", 
        "params" : [ "$duration" ]
      } ], 
      "total-months-from-duration" : [ {
        "description" : " The total number of months in a yearMonthDuration\n", 
        "params" : [ "$duration" ]
      } ], 
      "total-seconds-from-duration" : [ {
        "description" : " The total number of seconds in a dayTimeDuration\n", 
        "params" : [ "$duration" ]
      } ], 
      "total-years-from-duration" : [ {
        "description" : " The total number of years in a yearMonthDuration\n", 
        "params" : [ "$duration" ]
      } ], 
      "trim" : [ {
        "description" : " Trims leading and trailing whitespace\n", 
        "params" : [ "$arg" ]
      } ], 
      "update-attributes" : [ {
        "description" : " Updates the attribute value of an XML element\n", 
        "params" : [ "$elements", "$attrNames", "$attrValues" ]
      } ], 
      "value-except" : [ {
        "description" : " The values in one sequence that aren't in another sequence\n", 
        "params" : [ "$arg1", "$arg2" ]
      } ], 
      "value-intersect" : [ {
        "description" : " The intersection of two sequences of values\n", 
        "params" : [ "$arg1", "$arg2" ]
      } ], 
      "value-union" : [ {
        "description" : " The union of two sequences of values\n", 
        "params" : [ "$arg1", "$arg2" ]
      } ], 
      "word-count" : [ {
        "description" : " The number of words\n", 
        "params" : [ "$arg" ]
      } ], 
      "words-to-camel-case" : [ {
        "description" : " Turns a string of words into camelCase\n", 
        "params" : [ "$arg" ]
      } ], 
      "wrap-values-in-elements" : [ {
        "description" : " Wraps a sequence of atomic values in XML elements\n", 
        "params" : [ "$values", "$elementName" ]
      } ], 
      "yearMonthDuration" : [ {
        "description" : " Construct a yearMonthDuration from a number of years and months\n", 
        "params" : [ "$years", "$months" ]
      } ]
    }
  }, 
  "http://www.w3.org/2005/xpath-functions" : {
    "description" : " This module contains all the functions specified in the\n W3C XPath and XQuery Functions and Operators 3.0.\n", 
    "functions" : {
      "QName" : [ {
        "description" : " Constructs an xs:QName value given a namespace URI and a lexical\n             QName.This function is deterministic, context-independent,  and focus-independent. The namespace URI in the returned QName is taken from $paramURI. If\n                $paramURI is the zero-length string or the empty sequence, it represents\n             \"no namespace\".The prefix (or absence of a prefix) in $paramQName is retained in the\n             returned xs:QName value.The local name in the result is taken from the local part of\n             $paramQName.A dynamic error is raised  if $paramQName does\n             not have the correct lexical form for an instance of xs:QName.A dynamic error is raised  if $paramURI is the\n             zero-length string or the empty sequence, and the value of $paramQName\n             contains a colon (:).A dynamic error may be raised  if $paramURI is not a valid URI (XML Namespaces 1.0) or\n             IRI (XML Namespaces 1.1). \n", 
        "params" : [ "$paramURI", "$paramQName" ]
      } ], 
      "abs" : [ {
        "description" : " Returns the absolute value of $arg.This function is deterministic, context-independent,  and focus-independent. General rules: see .If $arg is negative the function returns -$arg, otherwise it\n             returns $arg.If the type of $arg is one of the four numeric types xs:float,\n                xs:double, xs:decimal or xs:integer the type\n             of the result is the same as the type of $arg. If the type of\n                $arg is a type derived from one of the numeric types, the result is an\n             instance of the base numeric type.For xs:float and xs:double arguments, if the argument is\n             positive zero or negative zero, then positive zero is returned. If the argument is\n             positive or negative infinity, positive infinity is returned.For detailed type semantics, see [Formal Semantics].The expression fn:abs(10.5) returns 10.5.The expression fn:abs(-10.5) returns 10.5.\n", 
        "params" : [ "$arg" ]
      } ], 
      "adjust-date-to-timezone" : [ {
        "description" : " Adjusts an xs:date value to a specific timezone, or to no timezone\n             at all; the result is the date in the target timezone that contains the starting instant\n             of the supplied date.The one-argument form of this function is deterministic, context-dependent,  and focus-independent.  It depends on\n \t\timplicit timezone.\n \tThe two-argument form of this function is deterministic, context-independent,  and focus-independent.  If $timezone is not specified, then the effective value of\n                $timezone is the value of the implicit timezone in the dynamic\n             context. If $arg is the empty sequence, then the function returns the empty\n             sequence. If $arg does not have a timezone component and $timezone is\n             the empty sequence, then the result is the value of $arg. If $arg does not have a timezone component and $timezone is\n             not the empty sequence, then the result is $arg with $timezone\n             as the timezone component. If $arg has a timezone component and $timezone is the empty\n             sequence, then the result is the local value of $arg without its timezone\n             component. If $arg has a timezone component and $timezone is not the\n             empty sequence, then the function returns the value of the expression:Let $dt be the value of fn:dateTime($arg,\n                      xs:time('00:00:00')).Let $adt be the value of fn:adjust-dateTime-to-timezone($dt,\n                      $timezone)The function returns the value of xs:date($adt)A dynamic error is raised  if $timezone is less\n             than -PT14H or greater than PT14H or is not an integral number\n             of minutes.\n", 
        "params" : [ "$arg" ]
      }, {
        "description" : " Adjusts an xs:date value to a specific timezone, or to no timezone\n             at all; the result is the date in the target timezone that contains the starting instant\n             of the supplied date.The one-argument form of this function is deterministic, context-dependent,  and focus-independent.  It depends on\n \t\timplicit timezone.\n \tThe two-argument form of this function is deterministic, context-independent,  and focus-independent.  If $timezone is not specified, then the effective value of\n                $timezone is the value of the implicit timezone in the dynamic\n             context. If $arg is the empty sequence, then the function returns the empty\n             sequence. If $arg does not have a timezone component and $timezone is\n             the empty sequence, then the result is the value of $arg. If $arg does not have a timezone component and $timezone is\n             not the empty sequence, then the result is $arg with $timezone\n             as the timezone component. If $arg has a timezone component and $timezone is the empty\n             sequence, then the result is the local value of $arg without its timezone\n             component. If $arg has a timezone component and $timezone is not the\n             empty sequence, then the function returns the value of the expression:Let $dt be the value of fn:dateTime($arg,\n                      xs:time('00:00:00')).Let $adt be the value of fn:adjust-dateTime-to-timezone($dt,\n                      $timezone)The function returns the value of xs:date($adt)A dynamic error is raised  if $timezone is less\n             than -PT14H or greater than PT14H or is not an integral number\n             of minutes.\n", 
        "params" : [ "$arg", "$timezone" ]
      } ], 
      "adjust-dateTime-to-timezone" : [ {
        "description" : " Adjusts an xs:dateTime value to a specific timezone, or to no\n             timezone at all.The one-argument form of this function is deterministic, context-dependent,  and focus-independent.  It depends on\n \t\timplicit timezone.\n \tThe two-argument form of this function is deterministic, context-independent,  and focus-independent.  If $timezone is not specified, then the effective value of\n                $timezone is the value of the implicit timezone in the dynamic\n             context. If $arg is the empty sequence, then the function returns the empty\n             sequence. If $arg does not have a timezone component and $timezone is\n             the empty sequence, then the result is $arg. If $arg does not have a timezone component and $timezone is\n             not the empty sequence, then the result is $arg with $timezone\n             as the timezone component. If $arg has a timezone component and $timezone is the empty\n             sequence, then the result is the local value of $arg without its timezone\n             component. If $arg has a timezone component and $timezone is not the\n             empty sequence, then the result is the xs:dateTime value that is equal to\n                $arg and that has a timezone component equal to\n             $timezone. A dynamic error is raised  if $timezone is less\n             than -PT14H or greater than PT14H or is not an integral number\n             of minutes.\n", 
        "params" : [ "$arg" ]
      }, {
        "description" : " Adjusts an xs:dateTime value to a specific timezone, or to no\n             timezone at all.The one-argument form of this function is deterministic, context-dependent,  and focus-independent.  It depends on\n \t\timplicit timezone.\n \tThe two-argument form of this function is deterministic, context-independent,  and focus-independent.  If $timezone is not specified, then the effective value of\n                $timezone is the value of the implicit timezone in the dynamic\n             context. If $arg is the empty sequence, then the function returns the empty\n             sequence. If $arg does not have a timezone component and $timezone is\n             the empty sequence, then the result is $arg. If $arg does not have a timezone component and $timezone is\n             not the empty sequence, then the result is $arg with $timezone\n             as the timezone component. If $arg has a timezone component and $timezone is the empty\n             sequence, then the result is the local value of $arg without its timezone\n             component. If $arg has a timezone component and $timezone is not the\n             empty sequence, then the result is the xs:dateTime value that is equal to\n                $arg and that has a timezone component equal to\n             $timezone. A dynamic error is raised  if $timezone is less\n             than -PT14H or greater than PT14H or is not an integral number\n             of minutes.\n", 
        "params" : [ "$arg", "$timezone" ]
      } ], 
      "adjust-time-to-timezone" : [ {
        "description" : " Adjusts an xs:time value to a specific timezone, or to no timezone\n             at all.The one-argument form of this function is deterministic, context-dependent,  and focus-independent.  It depends on\n \t\timplicit timezone.\n \tThe two-argument form of this function is deterministic, context-independent,  and focus-independent.  If $timezone is not specified, then the effective value of\n                $timezone is the value of the implicit timezone in the dynamic\n             context. If $arg is the empty sequence, then the function returns the empty\n             sequence. If $arg does not have a timezone component and $timezone is\n             the empty sequence, then the result is $arg. If $arg does not have a timezone component and $timezone is\n             not the empty sequence, then the result is $arg with $timezone\n             as the timezone component. If $arg has a timezone component and $timezone is the empty\n             sequence, then the result is the localized value of $arg without its\n             timezone component. If $arg has a timezone component and $timezone is not the\n             empty sequence, then:Let $dt be the xs:dateTime value\n                      fn:dateTime(xs:date('1972-12-31'), $arg).Let $adt be the value of fn:adjust-dateTime-to-timezone($dt,\n                      $timezone)\n                The function returns the xs:time value\n                   xs:time($adt).A dynamic error is raised  if $timezone is less\n             than -PT14H or greater than PT14H or if does not contain an\n             integral number of minutes.\n", 
        "params" : [ "$arg" ]
      }, {
        "description" : " Adjusts an xs:time value to a specific timezone, or to no timezone\n             at all.The one-argument form of this function is deterministic, context-dependent,  and focus-independent.  It depends on\n \t\timplicit timezone.\n \tThe two-argument form of this function is deterministic, context-independent,  and focus-independent.  If $timezone is not specified, then the effective value of\n                $timezone is the value of the implicit timezone in the dynamic\n             context. If $arg is the empty sequence, then the function returns the empty\n             sequence. If $arg does not have a timezone component and $timezone is\n             the empty sequence, then the result is $arg. If $arg does not have a timezone component and $timezone is\n             not the empty sequence, then the result is $arg with $timezone\n             as the timezone component. If $arg has a timezone component and $timezone is the empty\n             sequence, then the result is the localized value of $arg without its\n             timezone component. If $arg has a timezone component and $timezone is not the\n             empty sequence, then:Let $dt be the xs:dateTime value\n                      fn:dateTime(xs:date('1972-12-31'), $arg).Let $adt be the value of fn:adjust-dateTime-to-timezone($dt,\n                      $timezone)\n                The function returns the xs:time value\n                   xs:time($adt).A dynamic error is raised  if $timezone is less\n             than -PT14H or greater than PT14H or if does not contain an\n             integral number of minutes.\n", 
        "params" : [ "$arg", "$timezone" ]
      } ], 
      "analyze-string" : [ {
        "description" : " Analyzes a string using a regular expression, returning an XML structure that\n             identifies which parts of the input string matched or failed to match the regular\n             expression, and in the case of matched substrings, which substrings matched each\n             capturing group in the regular expression.This function is nondeterministic, context-independent,  and focus-independent. The effect of calling the first version of this function (omitting the argument\n                $flags) is the same as the effect of calling the second version with the\n                $flags argument set to a zero-length string. Flags are defined in\n                .The $flags argument is interpreted in the same way as for the\n                fn:matches function.If $input is the empty sequence the function behaves as if\n                $input were the zero-length string. In this situation the result will be\n             an element node with no children.The function returns an element node whose local name is\n                analyze-string-result. This element and all its descendant elements have\n             the namespace URI http://www.w3.org/2005/xpath-functions. The namespace\n             prefix is . The children of this element are a\n             sequence of fn:match and fn:non-match elements. This sequence\n             is formed by breaking the $input string into a sequence of strings,\n             returning any substring that matches $pattern as the content of a\n                match element, and any intervening substring as the content of a\n                non-match element.More specifically, the function starts at the beginning of the input string and attempts\n             to find the first substring that matches the regular expression. If there are several\n             matches, the first match is defined to be the one whose starting position comes first in\n             the string. If several alternatives within the regular expression both match at the same\n             position in the input string, then the match that is chosen is the first alternative\n             that matches. For example, if the input string is The quick brown fox jumps\n             and the regular expression is jump|jumps, then the match that is chosen is\n                jump.Having found the first match, the instruction proceeds to find the second and subsequent\n             matches by repeating the search, starting at the first character that was not included in the previous match.The input string is thus partitioned into a sequence of substrings, some of which match\n             the regular expression, others which do not match it. Each substring will contain at\n             least one character. This sequence is represented in the result by the sequence of\n                fn:match and fn:non-match children of the returned element\n             node; the string value of the fn:match or fn:non-match element\n             will be the corresponding substring of $input, and the string value of the\n             returned element node will therefore be the same as $input.The content of an fn:non-match element is always a single text node.The content of a fn:match element, however, is in general a sequence of\n             text nodes and fn:group element children. An fn:group element\n             with a nr attribute having the integer value N identifies the\n             substring captured by the Nth parenthesized sub-expression in the regular\n             expression. For each capturing subexpression there will be at most one corresponding\n                fn:group element in each fn:match element in the\n             result.If the function is called twice with the same arguments, it is  whether the two calls return the same element node\n             or distinct (but deep equal) element nodes. In this respect it is\n             nondeterministic.The base URI of the element nodes in the result is\n          A schema is defined for the structure of the returned element, containing the\n             definitions below. The returned element and its descendants will have type annotations\n             obtained by validating the returned element against this schema, unless the function is\n             used in an environment where type annotations are not supported (for example, a Basic\n             XSLT Processor), in which case the elements will all be annotated as\n                xs:untyped and the attributes as xs:untypedAtomic.A free-standing copy of this schema can be found at analyze-string.xsd\n             &lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n &lt;xs:schema xmlns:xs=\"http://www.w3.org/2001/XMLSchema\"\n     targetNamespace=\"http://www.w3.org/2005/xpath-functions\"\n     xmlns:fn=\"http://www.w3.org/2005/xpath-functions\"\n     elementFormDefault=\"qualified\"&gt;\n     &lt;xs:element name=\"analyze-string-result\" type=\"fn:analyze-string-result-type\"/&gt;\n     &lt;xs:element name=\"match\" type=\"fn:match-type\"/&gt;\n     &lt;xs:element name=\"non-match\" type=\"xs:string\"/&gt;\n     &lt;xs:element name=\"group\" type=\"fn:group-type\"/&gt;\n     &lt;xs:complexType name=\"analyze-string-result-type\" mixed=\"true\"&gt;\n         &lt;xs:choice minOccurs=\"0\" maxOccurs=\"unbounded\"&gt;\n             &lt;xs:element ref=\"fn:match\"/&gt;\n             &lt;xs:element ref=\"fn:non-match\"/&gt;\n         &lt;/xs:choice&gt;\n     &lt;/xs:complexType&gt;\n     &lt;xs:complexType name=\"match-type\" mixed=\"true\"&gt;\n         &lt;xs:sequence&gt;\n             &lt;xs:element ref=\"fn:group\" minOccurs=\"0\" maxOccurs=\"unbounded\"/&gt;\n         &lt;/xs:sequence&gt;\n     &lt;/xs:complexType&gt;\n     &lt;xs:complexType name=\"group-type\" mixed=\"true\"&gt;\n         &lt;xs:sequence&gt;\n             &lt;xs:element ref=\"fn:group\" minOccurs=\"0\" maxOccurs=\"unbounded\"/&gt;\n         &lt;/xs:sequence&gt;\n         &lt;xs:attribute name=\"nr\" type=\"xs:positiveInteger\"/&gt;\n     &lt;/xs:complexType&gt;\n &lt;/xs:schema&gt;\n \n          A dynamic error is raised  if the value of\n                $pattern is invalid according to the rules described in section .A dynamic error is raised  if the value of\n                $flags is invalid according to the rules described in section .A dynamic error is raised  if the supplied\n                $pattern matches a zero-length string, that is, if fn:matches(\"\",\n                $pattern, $flags) returns true.\n", 
        "params" : [ "$input", "$pattern" ]
      }, {
        "description" : " Analyzes a string using a regular expression, returning an XML structure that\n             identifies which parts of the input string matched or failed to match the regular\n             expression, and in the case of matched substrings, which substrings matched each\n             capturing group in the regular expression.This function is nondeterministic, context-independent,  and focus-independent. The effect of calling the first version of this function (omitting the argument\n                $flags) is the same as the effect of calling the second version with the\n                $flags argument set to a zero-length string. Flags are defined in\n                .The $flags argument is interpreted in the same way as for the\n                fn:matches function.If $input is the empty sequence the function behaves as if\n                $input were the zero-length string. In this situation the result will be\n             an element node with no children.The function returns an element node whose local name is\n                analyze-string-result. This element and all its descendant elements have\n             the namespace URI http://www.w3.org/2005/xpath-functions. The namespace\n             prefix is . The children of this element are a\n             sequence of fn:match and fn:non-match elements. This sequence\n             is formed by breaking the $input string into a sequence of strings,\n             returning any substring that matches $pattern as the content of a\n                match element, and any intervening substring as the content of a\n                non-match element.More specifically, the function starts at the beginning of the input string and attempts\n             to find the first substring that matches the regular expression. If there are several\n             matches, the first match is defined to be the one whose starting position comes first in\n             the string. If several alternatives within the regular expression both match at the same\n             position in the input string, then the match that is chosen is the first alternative\n             that matches. For example, if the input string is The quick brown fox jumps\n             and the regular expression is jump|jumps, then the match that is chosen is\n                jump.Having found the first match, the instruction proceeds to find the second and subsequent\n             matches by repeating the search, starting at the first character that was not included in the previous match.The input string is thus partitioned into a sequence of substrings, some of which match\n             the regular expression, others which do not match it. Each substring will contain at\n             least one character. This sequence is represented in the result by the sequence of\n                fn:match and fn:non-match children of the returned element\n             node; the string value of the fn:match or fn:non-match element\n             will be the corresponding substring of $input, and the string value of the\n             returned element node will therefore be the same as $input.The content of an fn:non-match element is always a single text node.The content of a fn:match element, however, is in general a sequence of\n             text nodes and fn:group element children. An fn:group element\n             with a nr attribute having the integer value N identifies the\n             substring captured by the Nth parenthesized sub-expression in the regular\n             expression. For each capturing subexpression there will be at most one corresponding\n                fn:group element in each fn:match element in the\n             result.If the function is called twice with the same arguments, it is  whether the two calls return the same element node\n             or distinct (but deep equal) element nodes. In this respect it is\n             nondeterministic.The base URI of the element nodes in the result is\n          A schema is defined for the structure of the returned element, containing the\n             definitions below. The returned element and its descendants will have type annotations\n             obtained by validating the returned element against this schema, unless the function is\n             used in an environment where type annotations are not supported (for example, a Basic\n             XSLT Processor), in which case the elements will all be annotated as\n                xs:untyped and the attributes as xs:untypedAtomic.A free-standing copy of this schema can be found at analyze-string.xsd\n             &lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n &lt;xs:schema xmlns:xs=\"http://www.w3.org/2001/XMLSchema\"\n     targetNamespace=\"http://www.w3.org/2005/xpath-functions\"\n     xmlns:fn=\"http://www.w3.org/2005/xpath-functions\"\n     elementFormDefault=\"qualified\"&gt;\n     &lt;xs:element name=\"analyze-string-result\" type=\"fn:analyze-string-result-type\"/&gt;\n     &lt;xs:element name=\"match\" type=\"fn:match-type\"/&gt;\n     &lt;xs:element name=\"non-match\" type=\"xs:string\"/&gt;\n     &lt;xs:element name=\"group\" type=\"fn:group-type\"/&gt;\n     &lt;xs:complexType name=\"analyze-string-result-type\" mixed=\"true\"&gt;\n         &lt;xs:choice minOccurs=\"0\" maxOccurs=\"unbounded\"&gt;\n             &lt;xs:element ref=\"fn:match\"/&gt;\n             &lt;xs:element ref=\"fn:non-match\"/&gt;\n         &lt;/xs:choice&gt;\n     &lt;/xs:complexType&gt;\n     &lt;xs:complexType name=\"match-type\" mixed=\"true\"&gt;\n         &lt;xs:sequence&gt;\n             &lt;xs:element ref=\"fn:group\" minOccurs=\"0\" maxOccurs=\"unbounded\"/&gt;\n         &lt;/xs:sequence&gt;\n     &lt;/xs:complexType&gt;\n     &lt;xs:complexType name=\"group-type\" mixed=\"true\"&gt;\n         &lt;xs:sequence&gt;\n             &lt;xs:element ref=\"fn:group\" minOccurs=\"0\" maxOccurs=\"unbounded\"/&gt;\n         &lt;/xs:sequence&gt;\n         &lt;xs:attribute name=\"nr\" type=\"xs:positiveInteger\"/&gt;\n     &lt;/xs:complexType&gt;\n &lt;/xs:schema&gt;\n \n          A dynamic error is raised  if the value of\n                $pattern is invalid according to the rules described in section .A dynamic error is raised  if the value of\n                $flags is invalid according to the rules described in section .A dynamic error is raised  if the supplied\n                $pattern matches a zero-length string, that is, if fn:matches(\"\",\n                $pattern, $flags) returns true.\n", 
        "params" : [ "$input", "$pattern", "$flags" ]
      } ], 
      "available-environment-variables" : [ {
        "description" : " Returns a list of environment variable names that are suitable for passing to\n                fn:environment-variable, as a (possibly empty) sequence of strings.This function is deterministic, context-dependent,  and focus-independent.  It depends on\n \t\tenvironment variables.\n \tThe function returns a sequence of strings, being the names of the environment variables\n             in the dynamic context in some implementation-dependent order.The function is deterministic: that is, the\n             set of available environment variables does not vary during evaluation.The function returns a list of strings, containing no duplicates.It is intended that the strings in this list should be suitable for passing to\n                fn:environment-variable.See also the note on security under the definition of the\n                fn:environment-variable function. If access to environment variables has\n             been disabled, fn:available-environment-variables always returns the empty\n             sequence.\n", 
        "params" : [  ]
      }, {
        "description" : " Returns a list of environment variable names that are suitable for passing to\n                fn:environment-variable, as a (possibly empty) sequence of strings.This function is deterministic, context-dependent,  and focus-independent.  It depends on\n \t\tenvironment variables.\n \tThe function returns a sequence of strings, being the names of the environment variables\n             in the dynamic context in some implementation-dependent order.The function is deterministic: that is, the\n             set of available environment variables does not vary during evaluation.The function returns a list of strings, containing no duplicates.It is intended that the strings in this list should be suitable for passing to\n                fn:environment-variable.See also the note on security under the definition of the\n                fn:environment-variable function. If access to environment variables has\n             been disabled, fn:available-environment-variables always returns the empty\n             sequence.\n", 
        "params" : [  ]
      } ], 
      "avg" : [ {
        "description" : " Returns the average of the values in the input sequence $arg, that\n             is, the sum of the values divided by the number of values.This function is deterministic, context-independent,  and focus-independent. If $arg is the empty sequence, the empty sequence is returned.If $arg contains values of type xs:untypedAtomic they are cast\n             to xs:double. Duration values must either all be xs:yearMonthDuration values or must all\n             be xs:dayTimeDuration values. For numeric values, the numeric promotion\n             rules defined in  are used to promote all values to a single\n             common type. After these operations, $arg must contain items of a single\n             type, which must be one of the four numeric types, xs:yearMonthDuration or\n                xs:dayTimeDuration or one if its subtypes.The function returns the average of the values as sum($arg) div\n             count($arg); but the implementation may use an otherwise equivalent algorithm\n             that avoids arithmetic overflow.For detailed type semantics, see [Formal Semantics].A type error is raised  if the input sequence contains\n             items of incompatible types, as described above.\n", 
        "params" : [ "$arg" ]
      } ], 
      "boolean" : [ {
        "description" : " Computes the effective boolean value of the sequence $arg.The function computes the effective boolean value of a sequence, defined according to\n             the following rules. See also .If $arg is the empty sequence, fn:boolean returns\n                      false.If $arg is a sequence whose first item is a node,\n                      fn:boolean returns true.If $arg is a singleton value of type xs:boolean or a\n                   derived from xs:boolean, fn:boolean returns\n                      $arg.If $arg is a singleton value of type xs:string or a type\n                   derived from xs:string, xs:anyURI or a type derived from\n                      xs:anyURI or xs:untypedAtomic,\n                      fn:boolean returns false if the operand value has\n                   zero length; otherwise it returns true.If $arg is a singleton value of any numeric type or a type derived\n                   from a numeric type, fn:boolean returns false if the\n                   operand value is NaN or is numerically equal to zero; otherwise it\n                   returns true.In all other cases, fn:boolean raises a type error .The static semantics of this function are described in [Formal\n             Semantics].The result of this function is not necessarily the same as $arg cast as\n                xs:boolean. For example, fn:boolean(\"false\") returns the value\n                true whereas \"false\" cast as xs:boolean (which can also be\n             written xs:boolean(\"false\")) returns false.let $abc := (\"a\", \"b\", \"\")fn:boolean($abc) raises a type error .The expression fn:boolean($abc[1]) returns true().The expression fn:boolean($abc[0]) returns false().The expression fn:boolean($abc[3]) returns false().\n", 
        "params" : [ "$arg" ]
      } ], 
      "ceiling" : [ {
        "description" : " Rounds $arg upwards to a whole number.This function is deterministic, context-independent,  and focus-independent. General rules: see .The function returns the smallest (closest to negative infinity) number with no\n             fractional part that is not less than the value of $arg.If the type of $arg is one of the four numeric types xs:float,\n                xs:double, xs:decimal or xs:integer the type\n             of the result is the same as the type of $arg. If the type of\n                $arg is a type derived from one of the numeric types, the result is an\n             instance of the base numeric type.For xs:float and xs:double arguments, if the argument is\n             positive zero, then positive zero is returned. If the argument is negative zero, then\n             negative zero is returned. If the argument is less than zero and greater than -1,\n             negative zero is returned.For detailed type semantics, see [Formal Semantics].The expression fn:ceiling(10.5) returns 11.The expression fn:ceiling(-10.5) returns -10.\n", 
        "params" : [ "$arg" ]
      } ], 
      "codepoint-equal" : [ {
        "description" : " Returns true if two strings are equal, considered codepoint-by-codepoint.This function is deterministic, context-independent,  and focus-independent. If either argument is the empty sequence, the function returns the empty sequence. Otherwise, the function returns true or false depending on\n             whether the value of $comparand1 is equal to the value of\n                $comparand2, according to the Unicode codepoint collation\n                (http://www.w3.org/2005/xpath-functions/collation/codepoint).This function allows xs:anyURI values to be compared without having to\n             specify the Unicode codepoint collation.\n", 
        "params" : [ "$comparand1", "$comparand2" ]
      } ], 
      "codepoints-to-string" : [ {
        "description" : " Creates an xs:string from a sequence of codepoints.This function is deterministic, context-independent,  and focus-independent. The function returns the string made up from the characters whose Unicode codepoints are\n             supplied in $arg. This will be the zero-length string if $arg\n             is the empty sequence. A dynamic error is raised  if any of the codepoints in\n                $arg is not a permitted XML character.\n", 
        "params" : [ "$arg" ]
      }, {
        "description" : " Creates an xs:string from a sequence of codepoints.This function is deterministic, context-independent,  and focus-independent. The function returns the string made up from the characters whose Unicode codepoints are\n             supplied in $arg. This will be the zero-length string if $arg\n             is the empty sequence. A dynamic error is raised  if any of the codepoints in\n                $arg is not a permitted XML character.\n", 
        "params" : [ "$arg" ]
      } ], 
      "collection" : [ {
        "description" : " Returns a sequence of nodes representing a collection of documents indentified\n             by a collection URI; or a default collection if no URI is supplied.This function is deterministic, context-dependent,  and focus-independent.  It depends on\n \t\tavailable node collections, and static base uri.\n \tThis function takes an xs:string as argument and returns a sequence of\n             nodes obtained by interpreting $arg as an xs:anyURI and\n             resolving it according to the mapping specified in Available node collections\n             described in .If Available node collections provides a mapping from this string to a sequence\n             of nodes, the function returns that sequence. If Available node collections maps\n             the string to an empty sequence, then the function returns an empty sequence.If $arg is not specified, the function returns the sequence of the nodes in\n             the default node collection in the dynamic context. See . If the value of $arg is a relative xs:anyURI, it is resolved\n             against the value of the base-URI property from the static context. If $arg is the empty sequence, the function behaves as if it had been\n             called without an argument. See above.By default, this function is deterministic.\n             This means that repeated\n             calls on the function with the same argument will return the same result. However, for\n             performance reasons, implementations may provide a user option to evaluate the function\n             without a guarantee of determinism. The manner in which any such option is provided is\n                . If the user has not selected such an option,\n             a call to this function must either return a deterministic result or must raise a dynamic error\n                .There is no requirement that the returned nodes should be in document\n             order, nor is there a requirement that the result should contain no duplicates.For detailed type semantics, see [Formal Semantics].A dynamic error is raised  if no URI is supplied and the\n             value of the default collection is absent.A dynamic error is raised  if available\n                node collections provides no mapping for the absolutized URI.A dynamic error is raised  if $arg is not a\n             valid xs:anyURI.\n", 
        "params" : [  ]
      }, {
        "description" : " Returns a sequence of nodes representing a collection of documents indentified\n             by a collection URI; or a default collection if no URI is supplied.This function is deterministic, context-dependent,  and focus-independent.  It depends on\n \t\tavailable node collections, and static base uri.\n \tThis function takes an xs:string as argument and returns a sequence of\n             nodes obtained by interpreting $arg as an xs:anyURI and\n             resolving it according to the mapping specified in Available node collections\n             described in .If Available node collections provides a mapping from this string to a sequence\n             of nodes, the function returns that sequence. If Available node collections maps\n             the string to an empty sequence, then the function returns an empty sequence.If $arg is not specified, the function returns the sequence of the nodes in\n             the default node collection in the dynamic context. See . If the value of $arg is a relative xs:anyURI, it is resolved\n             against the value of the base-URI property from the static context. If $arg is the empty sequence, the function behaves as if it had been\n             called without an argument. See above.By default, this function is deterministic.\n             This means that repeated\n             calls on the function with the same argument will return the same result. However, for\n             performance reasons, implementations may provide a user option to evaluate the function\n             without a guarantee of determinism. The manner in which any such option is provided is\n                . If the user has not selected such an option,\n             a call to this function must either return a deterministic result or must raise a dynamic error\n                .There is no requirement that the returned nodes should be in document\n             order, nor is there a requirement that the result should contain no duplicates.For detailed type semantics, see [Formal Semantics].A dynamic error is raised  if no URI is supplied and the\n             value of the default collection is absent.A dynamic error is raised  if available\n                node collections provides no mapping for the absolutized URI.A dynamic error is raised  if $arg is not a\n             valid xs:anyURI.\n", 
        "params" : [ "$arg" ]
      } ], 
      "compare" : [ {
        "description" : " Returns -1, 0, or 1, depending on whether $comparand1 collates\n             before, equal to, or after $comparand2 according to the rules of a selected\n             collation.The two-argument form of this function is deterministic, context-dependent,  and focus-independent.  It depends on\n \t\tcollations.\n \tThe three-argument form of this function is deterministic, context-dependent,  and focus-independent.  It depends on\n \t\tcollations, and static base uri.\n \tReturns -1, 0, or 1, depending on whether the value of the $comparand1 is\n             respectively less than, equal to, or greater than the value of $comparand2,\n             according to the rules of the collation that is used. The collation used by this function is determined according to the rules in . If either $comparand1 or $comparand2 is the empty sequence,\n             the function returns the empty sequence.This function, called with the first signature, defines the semantics of the \"eq\", \"ne\",\n             \"gt\", \"lt\", \"le\" and \"ge\" operators on xs:string values.The expression fn:compare('abc', 'abc') returns 0.The expression fn:compare('Strasse', 'Straße') returns 0. (Assuming the default collation includes provisions that equate\n                      ss and the (German) character ß\n                      (sharp-s). Otherwise, the returned value depends on the\n                   semantics of the default collation.).The expression fn:compare('Strasse', 'Straße',\n                   'http://example.com/deutsch') returns 0. (Assuming the collation identified by the URI\n                      http://example.com/deutsch includes provisions that equate\n                      ss and the (German) character ß\n                      (sharp-s). Otherwise, the returned value depends on the\n                   semantics of that collation.).The expression fn:compare('Strassen', 'Straße') returns 1. (Assuming the default collation includes provisions that treat\n                   differences between ss and the (German) character ß\n                      (sharp-s) with less strength than the differences between the\n                   base characters, such as the final n. ).\n", 
        "params" : [ "$comparand1", "$comparand2" ]
      }, {
        "description" : " Returns -1, 0, or 1, depending on whether $comparand1 collates\n             before, equal to, or after $comparand2 according to the rules of a selected\n             collation.The two-argument form of this function is deterministic, context-dependent,  and focus-independent.  It depends on\n \t\tcollations.\n \tThe three-argument form of this function is deterministic, context-dependent,  and focus-independent.  It depends on\n \t\tcollations, and static base uri.\n \tReturns -1, 0, or 1, depending on whether the value of the $comparand1 is\n             respectively less than, equal to, or greater than the value of $comparand2,\n             according to the rules of the collation that is used. The collation used by this function is determined according to the rules in . If either $comparand1 or $comparand2 is the empty sequence,\n             the function returns the empty sequence.This function, called with the first signature, defines the semantics of the \"eq\", \"ne\",\n             \"gt\", \"lt\", \"le\" and \"ge\" operators on xs:string values.The expression fn:compare('abc', 'abc') returns 0.The expression fn:compare('Strasse', 'Straße') returns 0. (Assuming the default collation includes provisions that equate\n                      ss and the (German) character ß\n                      (sharp-s). Otherwise, the returned value depends on the\n                   semantics of the default collation.).The expression fn:compare('Strasse', 'Straße',\n                   'http://example.com/deutsch') returns 0. (Assuming the collation identified by the URI\n                      http://example.com/deutsch includes provisions that equate\n                      ss and the (German) character ß\n                      (sharp-s). Otherwise, the returned value depends on the\n                   semantics of that collation.).The expression fn:compare('Strassen', 'Straße') returns 1. (Assuming the default collation includes provisions that treat\n                   differences between ss and the (German) character ß\n                      (sharp-s) with less strength than the differences between the\n                   base characters, such as the final n. ).\n", 
        "params" : [ "$comparand1", "$comparand2", "$collation" ]
      } ], 
      "concat" : [ {
        "description" : " Returns the concatenation of the string values of the arguments.\n          The two-argument form of this function defines the semantics of the \"||\" operator.This function is deterministic, context-independent,  and focus-independent. This function accepts two or more xs:anyAtomicType arguments and casts each\n             one to xs:string. The function returns the xs:string that is\n             the concatenation of the values of its arguments after conversion. If any argument is\n             the empty sequence, that argument is treated as the zero-length string.The fn:concat function is specified to allow two or\n             more arguments, which are concatenated together. This is the only function specified in\n             this document that allows a variable number of arguments. This capability is retained\n             for compatibility with . \n", 
        "params" : [ "$arg1", "$arg2" ]
      } ], 
      "contains" : [ {
        "description" : " Returns true if the string $arg1 contains $arg2 as a\n             substring, taking collations into account.The two-argument form of this function is deterministic, context-dependent,  and focus-independent.  It depends on\n \t\tcollations.\n \tThe three-argument form of this function is deterministic, context-dependent,  and focus-independent.  It depends on\n \t\tcollations, and static base uri.\n \tIf the value of $arg1 or $arg2 is the empty sequence, or\n             contains only ignorable collation units, it is interpreted as the zero-length\n             string.If the value of $arg2 is the zero-length string, then the function returns\n                true.If the value of $arg1 is the zero-length string, the function returns\n                false.The collation used by this function is determined according to the rules in .The function returns an xs:boolean indicating whether or not the value of\n                $arg1 contains (at the beginning, at the end, or anywhere within) at\n             least one sequence of collation units that provides a minimal match to the\n             collation units in the value of $arg2, according to the collation that is\n             used.Minimal match is defined in . A dynamic error may be raised  if the\n             specified collation does not support collation units.\n", 
        "params" : [ "$arg1", "$arg2" ]
      }, {
        "description" : " Returns true if the string $arg1 contains $arg2 as a\n             substring, taking collations into account.The two-argument form of this function is deterministic, context-dependent,  and focus-independent.  It depends on\n \t\tcollations.\n \tThe three-argument form of this function is deterministic, context-dependent,  and focus-independent.  It depends on\n \t\tcollations, and static base uri.\n \tIf the value of $arg1 or $arg2 is the empty sequence, or\n             contains only ignorable collation units, it is interpreted as the zero-length\n             string.If the value of $arg2 is the zero-length string, then the function returns\n                true.If the value of $arg1 is the zero-length string, the function returns\n                false.The collation used by this function is determined according to the rules in .The function returns an xs:boolean indicating whether or not the value of\n                $arg1 contains (at the beginning, at the end, or anywhere within) at\n             least one sequence of collation units that provides a minimal match to the\n             collation units in the value of $arg2, according to the collation that is\n             used.Minimal match is defined in . A dynamic error may be raised  if the\n             specified collation does not support collation units.\n", 
        "params" : [ "$arg1", "$arg2", "$collation" ]
      } ], 
      "count" : [ {
        "description" : " Returns the number of items in a sequence.This function is deterministic, context-independent,  and focus-independent. The function returns the number of items in the value of $arg.Returns 0 if $arg is the empty sequence.\n", 
        "params" : [ "$arg" ]
      } ], 
      "dateTime" : [ {
        "description" : " Returns an xs:dateTime value created by combining an\n                xs:date and an xs:time.This function is deterministic, context-independent,  and focus-independent. If either $arg1 or $arg2 is the empty sequence the function\n             returns the empty sequence.Otherwise, the function returns an xs:dateTime whose date component is\n             equal to $arg1 and whose time component is equal to $arg2.The timezone of the result is computed as follows:If neither argument has a timezone, the result has no timezone.If exactly one of the arguments has a timezone, or if both arguments have the same\n                   timezone, the result has this timezone.A dynamic error is raised  if the two arguments both have\n             timezones and the timezones are different. \n", 
        "params" : [ "$arg1", "$arg2" ]
      } ], 
      "day-from-date" : [ {
        "description" : " Returns the day component of an xs:date.This function is deterministic, context-independent,  and focus-independent. If $arg is the empty sequence, the function returns the empty sequence.Otherwise, the function returns an xs:integer between 1 and 31, both\n             inclusive, representing the day component in the localized value of\n             $arg.The expression fn:day-from-date(xs:date(\"1999-05-31-05:00\")) returns 31.The expression fn:day-from-date(xs:date(\"2000-01-01+05:00\")) returns 1.\n", 
        "params" : [ "$arg" ]
      } ], 
      "days-from-duration" : [ {
        "description" : " Returns the number of days in a duration.This function is deterministic, context-independent,  and focus-independent. If $arg is the empty sequence, the function returns the empty sequence.Otherwise, the function returns an xs:integer representing the days\n             component in the value of $arg. The result is obtained by casting\n                $arg to an xs:dayTimeDuration (see ) and then computing the days component as described in\n                .If $arg is a negative duration then the result will be negative..If $arg is an xs:yearMonthDuration the function returns 0.The expression fn:days-from-duration(xs:dayTimeDuration(\"P3DT10H\")) returns 3.The expression fn:days-from-duration(xs:dayTimeDuration(\"P3DT55H\")) returns 5.The expression fn:days-from-duration(xs:yearMonthDuration(\"P3Y5M\")) returns 0.\n", 
        "params" : [ "$arg" ]
      } ], 
      "deep-equal" : [ {
        "description" : "  This function assesses whether two sequences are deep-equal to each other. To\n             be deep-equal, they must contain items that are pairwise deep-equal; and for two items\n             to be deep-equal, they must either be atomic values that compare equal, or nodes of the\n             same kind, with the same name, whose children are deep-equal.The two-argument form of this function is deterministic, context-dependent,  and focus-independent.  It depends on\n \t\tcollations, and implicit timezone.\n \tThe three-argument form of this function is deterministic, context-dependent,  and focus-independent.  It depends on\n \t\tcollations, and static base uri, and implicit timezone.\n \tThe $collation argument identifies a collation which is used at all levels\n             of recursion when strings are compared (but not when names are compared), according to\n             the rules in .If the two sequences are both empty, the function returns true.If the two sequences are of different lengths, the function returns\n             false.If the two sequences are of the same length, the function returns true if\n             and only if every item in the sequence $parameter1 is deep-equal to the\n             item at the same position in the sequence $parameter2. The rules for\n             deciding whether two items are deep-equal follow.Call the two items $i1 and $i2 respectively.If $i1 and $i2 are both atomic values, they are deep-equal if\n             and only if ($i1 eq $i2) is true, or if both values are\n                NaN. If the eq operator is not defined for $i1\n             and $i2, the function returns false. If one of the pair $i1 or $i2 is an atomic value and the\n             other is not,\n             \n             the function returns false.If $i1 and $i2 are both nodes, they are compared as described\n             below:If the two nodes are of different kinds, the result is false.If the two nodes are both document nodes then they are deep-equal if and only if\n                   the sequence $i1/(*|text()) is deep-equal to the sequence\n                      $i2/(*|text()). If the two nodes are both element nodes then they are deep-equal if and only if\n                   all of the following conditions are satisfied:The two nodes have the same name, that is (node-name($i1) eq\n                            node-name($i2)).Either both nodes are both annotated as having simple content or both nodes are\n                         annotated as having complex content. For this purpose \"simple content\" means either a simple\n                      type or a complex type with simple content; \"complex content\" means a complex type whose variety\n                      is mixed, element-only, or empty.It is a consequence of this rule that validating a document\n                      D against a schema will usually (but not necessarily) result in a document that is not deep-equal\n                         to D. The exception is when the schema allows all elements to have mixed content.The two nodes have the same number of attributes, and for every attribute\n                            $a1 in $i1/@* there exists an attribute\n                            $a2 in $i2/@* such that $a1 and\n                            $a2 are deep-equal. One of the following conditions holds:Both element nodes are annotated as having simple content\n                               (as defined in 3(b) above), and\n                               the typed value of $i1 is deep-equal to the typed value\n                               of $i2.Both element nodes have a type annotation that is a complex type with\n                               variety element-only, and the sequence $i1/* is\n                               deep-equal to the sequence $i2/*.Both element nodes have a type annotation that is a complex type with\n                               variety mixed, and the sequence $i1/(*|text()) is\n                               deep-equal to the sequence $i2/(*|text()).Both element nodes have a type annotation that is a complex type with\n                               variety empty.If the two nodes are both attribute nodes then they are deep-equal if and only if\n                   both the following conditions are satisfied:The two nodes have the same name, that is (node-name($i1) eq\n                            node-name($i2)).The typed value of $i1 is deep-equal to the typed value of\n                            $i2. If the two nodes are both processing instruction nodes or namespace bindings, then they are deep-equal if and\n                   only if both the following conditions are satisfied:The two nodes have the same name, that is (node-name($i1) eq\n                            node-name($i2)).The string value of $i1 is equal to the string value of\n                            $i2. If the two nodes are both namespace nodes, then they are deep-equal if and only\n                   if both the following conditions are satisfied:The two nodes either have the same name or are both nameless, that is\n                            fn:deep-equal(node-name($i1), node-name($i2)).The string value of $i1 is equal to the string value of\n                            $i2 when compared using the Unicode codepoint collation.If the two nodes are both text nodes or comment nodes, then they are deep-equal if\n                   and only if their string-values are equal.A type error is raised \n             if either input sequence contains a function item.\n             \n          \n", 
        "params" : [ "$parameter1", "$parameter2" ]
      }, {
        "description" : "  This function assesses whether two sequences are deep-equal to each other. To\n             be deep-equal, they must contain items that are pairwise deep-equal; and for two items\n             to be deep-equal, they must either be atomic values that compare equal, or nodes of the\n             same kind, with the same name, whose children are deep-equal.The two-argument form of this function is deterministic, context-dependent,  and focus-independent.  It depends on\n \t\tcollations, and implicit timezone.\n \tThe three-argument form of this function is deterministic, context-dependent,  and focus-independent.  It depends on\n \t\tcollations, and static base uri, and implicit timezone.\n \tThe $collation argument identifies a collation which is used at all levels\n             of recursion when strings are compared (but not when names are compared), according to\n             the rules in .If the two sequences are both empty, the function returns true.If the two sequences are of different lengths, the function returns\n             false.If the two sequences are of the same length, the function returns true if\n             and only if every item in the sequence $parameter1 is deep-equal to the\n             item at the same position in the sequence $parameter2. The rules for\n             deciding whether two items are deep-equal follow.Call the two items $i1 and $i2 respectively.If $i1 and $i2 are both atomic values, they are deep-equal if\n             and only if ($i1 eq $i2) is true, or if both values are\n                NaN. If the eq operator is not defined for $i1\n             and $i2, the function returns false. If one of the pair $i1 or $i2 is an atomic value and the\n             other is not,\n             \n             the function returns false.If $i1 and $i2 are both nodes, they are compared as described\n             below:If the two nodes are of different kinds, the result is false.If the two nodes are both document nodes then they are deep-equal if and only if\n                   the sequence $i1/(*|text()) is deep-equal to the sequence\n                      $i2/(*|text()). If the two nodes are both element nodes then they are deep-equal if and only if\n                   all of the following conditions are satisfied:The two nodes have the same name, that is (node-name($i1) eq\n                            node-name($i2)).Either both nodes are both annotated as having simple content or both nodes are\n                         annotated as having complex content. For this purpose \"simple content\" means either a simple\n                      type or a complex type with simple content; \"complex content\" means a complex type whose variety\n                      is mixed, element-only, or empty.It is a consequence of this rule that validating a document\n                      D against a schema will usually (but not necessarily) result in a document that is not deep-equal\n                         to D. The exception is when the schema allows all elements to have mixed content.The two nodes have the same number of attributes, and for every attribute\n                            $a1 in $i1/@* there exists an attribute\n                            $a2 in $i2/@* such that $a1 and\n                            $a2 are deep-equal. One of the following conditions holds:Both element nodes are annotated as having simple content\n                               (as defined in 3(b) above), and\n                               the typed value of $i1 is deep-equal to the typed value\n                               of $i2.Both element nodes have a type annotation that is a complex type with\n                               variety element-only, and the sequence $i1/* is\n                               deep-equal to the sequence $i2/*.Both element nodes have a type annotation that is a complex type with\n                               variety mixed, and the sequence $i1/(*|text()) is\n                               deep-equal to the sequence $i2/(*|text()).Both element nodes have a type annotation that is a complex type with\n                               variety empty.If the two nodes are both attribute nodes then they are deep-equal if and only if\n                   both the following conditions are satisfied:The two nodes have the same name, that is (node-name($i1) eq\n                            node-name($i2)).The typed value of $i1 is deep-equal to the typed value of\n                            $i2. If the two nodes are both processing instruction nodes or namespace bindings, then they are deep-equal if and\n                   only if both the following conditions are satisfied:The two nodes have the same name, that is (node-name($i1) eq\n                            node-name($i2)).The string value of $i1 is equal to the string value of\n                            $i2. If the two nodes are both namespace nodes, then they are deep-equal if and only\n                   if both the following conditions are satisfied:The two nodes either have the same name or are both nameless, that is\n                            fn:deep-equal(node-name($i1), node-name($i2)).The string value of $i1 is equal to the string value of\n                            $i2 when compared using the Unicode codepoint collation.If the two nodes are both text nodes or comment nodes, then they are deep-equal if\n                   and only if their string-values are equal.A type error is raised \n             if either input sequence contains a function item.\n             \n          \n", 
        "params" : [ "$parameter1", "$parameter2", "$collation" ]
      } ], 
      "distinct-values" : [ {
        "description" : " Returns the values that appear in a sequence, with duplicates eliminated.The one-argument form of this function is deterministic, context-dependent,  and focus-independent.  It depends on\n \t\tcollations, and implicit timezone.\n \tThe two-argument form of this function is deterministic, context-dependent,  and focus-independent.  It depends on\n \t\tcollations, and static base uri, and implicit timezone.\n \tThe function returns the sequence that results from removing from $arg all\n             but one of a set of values that are equal to one another. Values are compared using the\n                eq operator, subject to the caveats defined below.Values of type xs:untypedAtomic are compared as if they were of type\n                xs:string.Values that cannot be compared, because the eq operator is not defined for\n             their types, are considered to be distinct.The collation used by this function is determined according to the rules in . This collation is used when string comparison is\n             required.For xs:float and xs:double values, positive zero is equal to\n             negative zero and, although NaN does not equal itself, if $arg\n             contains multiple NaN values a single NaN is returned. If xs:dateTime, xs:date or xs:time values do not\n             have a timezone, they are considered to have the implicit timezone provided by the\n             dynamic context for the purpose of comparison. Note that xs:dateTime,\n                xs:date or xs:time values can compare equal even if their\n             timezones are different.The order in which the sequence of values is returned is .Which value of a set of values that compare equal is returned is . The static type of the result is a sequence of prime types as defined\n             in [Formal Semantics].\n             If the input sequence contains values of different numeric types that differ from\n                each other by small amounts, then the eq operator is not transitive, because of\n                rounding effects occurring during type promotion. In the situation where the input\n                contains three values A, B, and C such that\n                   A eq B, B eq C, but A ne C, then the number\n                of items in the result of the function (as well as the choice of which items are\n                returned) is , subject only to the\n                constraints that (a) no two items in the result sequence compare equal to each other,\n                and (b) every input item that does not appear in the result sequence compares equal\n                to some item that does appear in the result sequence.\n             For example, this arises when computing:\n                 distinct-values(\n             (xs:float('1.0'),\n             xs:decimal('1.0000000000100000000001',\n             xs:double( '1.00000000001'))\n             because the values of type xs:float and xs:double both\n                compare equal to the value of type xs:decimal but not equal to each\n                other. \n          If $arg is the empty sequence, the function returns the empty sequence.\n", 
        "params" : [ "$arg" ]
      }, {
        "description" : " Returns the values that appear in a sequence, with duplicates eliminated.The one-argument form of this function is deterministic, context-dependent,  and focus-independent.  It depends on\n \t\tcollations, and implicit timezone.\n \tThe two-argument form of this function is deterministic, context-dependent,  and focus-independent.  It depends on\n \t\tcollations, and static base uri, and implicit timezone.\n \tThe function returns the sequence that results from removing from $arg all\n             but one of a set of values that are equal to one another. Values are compared using the\n                eq operator, subject to the caveats defined below.Values of type xs:untypedAtomic are compared as if they were of type\n                xs:string.Values that cannot be compared, because the eq operator is not defined for\n             their types, are considered to be distinct.The collation used by this function is determined according to the rules in . This collation is used when string comparison is\n             required.For xs:float and xs:double values, positive zero is equal to\n             negative zero and, although NaN does not equal itself, if $arg\n             contains multiple NaN values a single NaN is returned. If xs:dateTime, xs:date or xs:time values do not\n             have a timezone, they are considered to have the implicit timezone provided by the\n             dynamic context for the purpose of comparison. Note that xs:dateTime,\n                xs:date or xs:time values can compare equal even if their\n             timezones are different.The order in which the sequence of values is returned is .Which value of a set of values that compare equal is returned is . The static type of the result is a sequence of prime types as defined\n             in [Formal Semantics].\n             If the input sequence contains values of different numeric types that differ from\n                each other by small amounts, then the eq operator is not transitive, because of\n                rounding effects occurring during type promotion. In the situation where the input\n                contains three values A, B, and C such that\n                   A eq B, B eq C, but A ne C, then the number\n                of items in the result of the function (as well as the choice of which items are\n                returned) is , subject only to the\n                constraints that (a) no two items in the result sequence compare equal to each other,\n                and (b) every input item that does not appear in the result sequence compares equal\n                to some item that does appear in the result sequence.\n             For example, this arises when computing:\n                 distinct-values(\n             (xs:float('1.0'),\n             xs:decimal('1.0000000000100000000001',\n             xs:double( '1.00000000001'))\n             because the values of type xs:float and xs:double both\n                compare equal to the value of type xs:decimal but not equal to each\n                other. \n          If $arg is the empty sequence, the function returns the empty sequence.\n", 
        "params" : [ "$arg", "$collation" ]
      } ], 
      "doc" : [ {
        "description" : " Retrieves a document using a URI supplied as an\n                xs:string, and returns the corresponding document node.This function is deterministic, context-dependent,  and focus-independent.  It depends on\n \t\tavailable documents, and static base uri.\n \tIf $uri is the empty sequence, the result is an empty sequence.If $uri is a relative URI reference, it is resolved\n             relative to the value of the Static Base URI property from the static context. The resulting\n             absolute URI is promoted to an xs:string.If the Available documents described in  provides a mapping from this string to a document\n             node, the function returns that document node.The URI may include a fragment identifier.By default, this function is deterministic. Two calls on this function\n             return the same document node if the same URI Reference (after resolution to an absolute\n             URI Reference) is supplied to both calls. Thus, the following expression (if it does not\n             raise an error) will always be true:doc(\"foo.xml\") is doc(\"foo.xml\")However, for performance reasons, implementations may provide a user option to evaluate\n             the function without a guarantee of determinism. The manner in which any such option is\n             provided is implementation-defined. If the user has not selected such an option, a call\n             of the function must either return a deterministic result or must raise a dynamic error\n                .For detailed type semantics, see [Formal Semantics].If $uri is read from a source document, it is generally appropriate to\n                resolve it relative to the base URI property of the relevant node in the source\n                document. This can be achieved by calling the fn:resolve-uri function,\n                and passing the resulting absolute URI as an argument to the fn:doc\n                function.If two calls to this function supply different absolute URI References as arguments, the\n             same document node may be returned if the implementation can determine that the two\n             arguments refer to the same resource. By defining the semantics of this function in terms of a string-to-document-node\n             mapping in the dynamic context, the specification is acknowledging that the results of\n             this function are outside the purview of the language specification itself, and depend\n             entirely on the run-time environment in which the expression is evaluated. This run-time\n             environment includes not only an unpredictable collection of resources (\"the web\"), but\n             configurable machinery for locating resources and turning their contents into document\n             nodes within the XPath data model. Both the set of resources that are reachable, and the\n             mechanisms by which those resources are parsed and validated, are . One possible processing model for this function is as follows. The resource identified\n             by the URI Reference is retrieved. If the resource cannot be retrieved, a dynamic error is\n             raised . The data resulting from the retrieval action\n             is then parsed as an XML document and a tree is constructed in accordance with the\n                . If the top-level media type is known and is\n             \"text\", the content is parsed in the same way as if the media type were text/xml;\n             otherwise, it is parsed in the same way as if the media type were application/xml. If\n             the contents cannot be parsed successfully, a dynamic error is raised . Otherwise, the result of the function is the document node at the root\n             of the resulting tree. This tree is then optionally validated against a schema.Various aspects of this processing are .\n             Implementations may provide external configuration options that allow any aspect of the\n             processing to be controlled by the user. In particular:The set of URI schemes that the implementation recognizes is\n                   implementation-defined. Implementations may allow the mapping of URIs to resources\n                   to be configured by the user, using mechanisms such as catalogs or user-written\n                   URI handlers.The handling of non-XML media types is implementation-defined. Implementations may\n                   allow instances of the data model to be constructed from non-XML resources, under\n                   user control.It is  whether DTD validation and/or schema\n                   validation is applied to the source document.Implementations may provide user-defined error handling options that allow\n                   processing to continue following an error in retrieving a resource, or in parsing\n                   and validating its content. When errors have been handled in this way, the\n                   function may return either an empty sequence, or a fallback document provided by\n                   the error handler.Implementations may provide user options that relax the requirement for the\n                   function to return deterministic results.A dynamic error may be raised  if $uri is not a valid URI.A dynamic error is raised  if the\n                available documents provides no mapping for the absolutized URI.A dynamic error is raised  if the resource cannot be\n             retrieved or cannot be parsed successfully as XML.A dynamic error is raised  if the implementation is not able\n             to guarantee that the result of the function will be deterministic, and the user has not\n             indicated that an unstable result is acceptable.\n", 
        "params" : [ "$uri" ]
      } ], 
      "doc-available" : [ {
        "description" : " The function returns true if and only if the function\n             call fn:doc($uri) would return a document node.This function is deterministic, context-dependent,  and focus-independent.  It depends on\n \t\tavailable documents, and static base uri.\n \tIf $uri is an empty sequence, this function returns\n                false.If a call on fn:doc($uri) would return a document\n             node, this function returns true.A dynamic error is raised  if\n                $uri is not a valid URI according to the rules applied by the\n             implementation of fn:doc.Otherwise, this function returns false.If this function returns true, then calling fn:doc($uri)\n             within the same  must return a document node. However,\n             if nondeterministic processing has been selected for the fn:doc function,\n             this guarantee is lost.\n", 
        "params" : [ "$uri" ]
      } ], 
      "element-with-id" : [ {
        "description" : "  Returns the sequence of element nodes that have an\n                ID value matching the value of one or more of the IDREF\n             values supplied in $arg.The one-argument form of this function is deterministic, context-dependent,  and focus-dependent. The two-argument form of this function is deterministic, context-independent,  and focus-independent. \n             The effect of this function is identical to fn:id in respect\n                   of elements that have an attribute with the is-id property. However,\n                   it behaves differently in respect of element nodes with the is-id\n                   property. Whereas the fn:id, for legacy reasons, returns the element\n                   that has the is-id property, this parent returns the element\n                   identified by the ID, which is the parent of the element having the\n                      is-id property.\n             The function returns a sequence, in document order with duplicates eliminated,\n                containing every element node E that satisfies all the following\n                conditions:\n             \n                      E is in the target document. The target document is the document\n                      containing $node, or the document containing the context item\n                         (.) if the second argument is omitted. The behavior of the\n                      function if $node is omitted is exactly the same as if the context\n                      item had been passed as $node.E has an ID value equal to one of the candidate\n                         IDREF values, where: An element has an ID value equal to V if\n                            either or both of the following conditions are true:The element has an child element node whose is-id\n                                  property (See .) is true and\n                                  whose typed value is equal to V under the rules of the\n                                     eq operator using the Unicode code point collation\n                                     (http://www.w3.org/2005/xpath-functions/collation/codepoint).The element has an attribute node whose is-id property\n                                  (See .) is true and whose\n                                  typed value is equal to V under the rules of the\n                                     eq operator using the Unicode code point collation\n                                     (http://www.w3.org/2005/xpath-functions/collation/codepoint).Each xs:string in $arg is parsed as if it were\n                            of type IDREFS, that is, each xs:string in\n                               $arg is treated as a whitespace-separated sequence of\n                            tokens, each acting as an IDREF. These tokens are then\n                            included in the list of candidate IDREFs. If any of the\n                            tokens is not a lexically valid IDREF (that is, if it is not\n                            lexically an xs:NCName), it is ignored. Formally, the\n                            candidate IDREF values are the strings in the sequence given\n                            by the expression:for $s in $arg return\n    fn:tokenize(fn:normalize-space($s), ' ')[. castable as xs:IDREF] If several elements have the same ID value, then E\n                      is the one that is first in document order.\n          \n             A dynamic error is raised  if\n                   $node, or the context item if the second argument is omitted, is a\n                   node in a tree whose root is not a document node.\n             The following errors may be raised when $node is omitted:\n             If the context\n                   item is absent, dynamic error\n                   If the context item is not a\n                   node, type error .\n          \n", 
        "params" : [ "$arg" ]
      }, {
        "description" : "  Returns the sequence of element nodes that have an\n                ID value matching the value of one or more of the IDREF\n             values supplied in $arg.The one-argument form of this function is deterministic, context-dependent,  and focus-dependent. The two-argument form of this function is deterministic, context-independent,  and focus-independent. \n             The effect of this function is identical to fn:id in respect\n                   of elements that have an attribute with the is-id property. However,\n                   it behaves differently in respect of element nodes with the is-id\n                   property. Whereas the fn:id, for legacy reasons, returns the element\n                   that has the is-id property, this parent returns the element\n                   identified by the ID, which is the parent of the element having the\n                      is-id property.\n             The function returns a sequence, in document order with duplicates eliminated,\n                containing every element node E that satisfies all the following\n                conditions:\n             \n                      E is in the target document. The target document is the document\n                      containing $node, or the document containing the context item\n                         (.) if the second argument is omitted. The behavior of the\n                      function if $node is omitted is exactly the same as if the context\n                      item had been passed as $node.E has an ID value equal to one of the candidate\n                         IDREF values, where: An element has an ID value equal to V if\n                            either or both of the following conditions are true:The element has an child element node whose is-id\n                                  property (See .) is true and\n                                  whose typed value is equal to V under the rules of the\n                                     eq operator using the Unicode code point collation\n                                     (http://www.w3.org/2005/xpath-functions/collation/codepoint).The element has an attribute node whose is-id property\n                                  (See .) is true and whose\n                                  typed value is equal to V under the rules of the\n                                     eq operator using the Unicode code point collation\n                                     (http://www.w3.org/2005/xpath-functions/collation/codepoint).Each xs:string in $arg is parsed as if it were\n                            of type IDREFS, that is, each xs:string in\n                               $arg is treated as a whitespace-separated sequence of\n                            tokens, each acting as an IDREF. These tokens are then\n                            included in the list of candidate IDREFs. If any of the\n                            tokens is not a lexically valid IDREF (that is, if it is not\n                            lexically an xs:NCName), it is ignored. Formally, the\n                            candidate IDREF values are the strings in the sequence given\n                            by the expression:for $s in $arg return\n    fn:tokenize(fn:normalize-space($s), ' ')[. castable as xs:IDREF] If several elements have the same ID value, then E\n                      is the one that is first in document order.\n          \n             A dynamic error is raised  if\n                   $node, or the context item if the second argument is omitted, is a\n                   node in a tree whose root is not a document node.\n             The following errors may be raised when $node is omitted:\n             If the context\n                   item is absent, dynamic error\n                   If the context item is not a\n                   node, type error .\n          \n", 
        "params" : [ "$arg", "$node" ]
      } ], 
      "empty" : [ {
        "description" : " Returns true if the argument is the empty sequence.This function is deterministic, context-independent,  and focus-independent. If the value of $arg is the empty sequence, the function returns\n                true; otherwise, the function returns false. The expression fn:empty((1,2,3)[10]) returns true().The expression fn:empty(fn:remove((\"hello\", \"world\"), 1)) returns false().\n", 
        "params" : [ "$arg" ]
      } ], 
      "ends-with" : [ {
        "description" : " Returns true if the string $arg1 contains $arg2 as a\n             trailing substring, taking collations into account.The two-argument form of this function is deterministic, context-dependent,  and focus-independent.  It depends on\n \t\tcollations.\n \tThe three-argument form of this function is deterministic, context-dependent,  and focus-independent.  It depends on\n \t\tcollations, and static base uri.\n \tIf the value of $arg1 or $arg2 is the empty sequence, or\n             contains only ignorable collation units, it is interpreted as the zero-length\n             string.If the value of $arg2 is the zero-length string, then the function returns\n                true. If the value of $arg1 is the zero-length string and\n             the value of $arg2 is not the zero-length string, then the function returns\n                false.The collation used by this function is determined according to the rules in .The function returns an xs:boolean indicating whether or not the value of\n                $arg1 starts with a sequence of collation units that provides a\n                match to the collation units of $arg2 according to the\n             collation that is used.\n                Match is defined in . A dynamic error may be raised  if the\n             specified collation does not support collation units.\n", 
        "params" : [ "$arg1", "$arg2" ]
      }, {
        "description" : " Returns true if the string $arg1 contains $arg2 as a\n             trailing substring, taking collations into account.The two-argument form of this function is deterministic, context-dependent,  and focus-independent.  It depends on\n \t\tcollations.\n \tThe three-argument form of this function is deterministic, context-dependent,  and focus-independent.  It depends on\n \t\tcollations, and static base uri.\n \tIf the value of $arg1 or $arg2 is the empty sequence, or\n             contains only ignorable collation units, it is interpreted as the zero-length\n             string.If the value of $arg2 is the zero-length string, then the function returns\n                true. If the value of $arg1 is the zero-length string and\n             the value of $arg2 is not the zero-length string, then the function returns\n                false.The collation used by this function is determined according to the rules in .The function returns an xs:boolean indicating whether or not the value of\n                $arg1 starts with a sequence of collation units that provides a\n                match to the collation units of $arg2 according to the\n             collation that is used.\n                Match is defined in . A dynamic error may be raised  if the\n             specified collation does not support collation units.\n", 
        "params" : [ "$arg1", "$arg2", "$collation" ]
      } ], 
      "environment-variable" : [ {
        "description" : " Returns the value of a system environment variable, if it exists.This function is deterministic, context-dependent,  and focus-independent.  It depends on\n \t\tenvironment variables.\n \tThe set of available environment variables\n             is a set of (name, value) pairs forming part\n             of the dynamic context, in which the name is unique within the set of pairs. The name\n             and value are arbitrary strings.If the $name argument matches the name of one of these pairs, the function\n             returns the corresponding value.If there is no environment variable with a matching name, the function returns the empty\n             sequence.The collation used for matching names is , but\n             must be the same as the collation used to ensure that the names of all environment\n             variables are unique.The function is deterministic,\n             which means that if it is called several times\n          within the same execution scope, with the same arguments,\n             it must return the same result.On many platforms, the term \"environment variable\" has a natural meaning in terms of\n             facilities provided by the operating system. This interpretation of the concept does not\n             exclude other interpretations, such as a mapping to a set of configuration parameters in\n             a database system.Environment variable names are usually case sensitive. Names are usually of the form\n                (letter|_) (letter|_|digit)*, but this varies by platform.On some platforms, there may sometimes be multiple environment variables with the same name;\n             in this case, it is implementation-dependent as to which is returned; see for example\n                 (Chapter 8, Environment Variables).\n             Implementations may use prefixes or other naming conventions\n             to disambiguate the names.The requirement to ensure that the function is deterministic means in practice that\n          the implementation must make a snapshot of the environment variables at some time\n          during execution, and return values obtained from this snapshot, rather than using\n          live values that are subject to change at any time.Operating system environment variables may be associated with a particular process,\n          while queries and stylesheets may execute across multiple processes (or multiple machines).\n          In such circumstances implementations may choose to provide access\n          to the environment variables associated with the process in which the query or stylesheet\n          processing was initiated.Security advice: Queries from untrusted sources should not be permitted unrestricted\n             access to environment variables. For example, the name of the account under which the\n             query is running may be useful information to a would-be intruder. An implementation may\n             therefore choose to restrict access to the environment, or may provide a facility to\n             make fn:environment-variable always return the empty sequence.\n", 
        "params" : [ "$name" ]
      }, {
        "description" : " Returns the value of a system environment variable, if it exists.This function is deterministic, context-dependent,  and focus-independent.  It depends on\n \t\tenvironment variables.\n \tThe set of available environment variables\n             is a set of (name, value) pairs forming part\n             of the dynamic context, in which the name is unique within the set of pairs. The name\n             and value are arbitrary strings.If the $name argument matches the name of one of these pairs, the function\n             returns the corresponding value.If there is no environment variable with a matching name, the function returns the empty\n             sequence.The collation used for matching names is , but\n             must be the same as the collation used to ensure that the names of all environment\n             variables are unique.The function is deterministic,\n             which means that if it is called several times\n          within the same execution scope, with the same arguments,\n             it must return the same result.On many platforms, the term \"environment variable\" has a natural meaning in terms of\n             facilities provided by the operating system. This interpretation of the concept does not\n             exclude other interpretations, such as a mapping to a set of configuration parameters in\n             a database system.Environment variable names are usually case sensitive. Names are usually of the form\n                (letter|_) (letter|_|digit)*, but this varies by platform.On some platforms, there may sometimes be multiple environment variables with the same name;\n             in this case, it is implementation-dependent as to which is returned; see for example\n                 (Chapter 8, Environment Variables).\n             Implementations may use prefixes or other naming conventions\n             to disambiguate the names.The requirement to ensure that the function is deterministic means in practice that\n          the implementation must make a snapshot of the environment variables at some time\n          during execution, and return values obtained from this snapshot, rather than using\n          live values that are subject to change at any time.Operating system environment variables may be associated with a particular process,\n          while queries and stylesheets may execute across multiple processes (or multiple machines).\n          In such circumstances implementations may choose to provide access\n          to the environment variables associated with the process in which the query or stylesheet\n          processing was initiated.Security advice: Queries from untrusted sources should not be permitted unrestricted\n             access to environment variables. For example, the name of the account under which the\n             query is running may be useful information to a would-be intruder. An implementation may\n             therefore choose to restrict access to the environment, or may provide a facility to\n             make fn:environment-variable always return the empty sequence.\n", 
        "params" : [ "$arg" ]
      } ], 
      "error" : [ {
        "description" : " Calling the fn:error function raises an application-defined\n             error.This function is nondeterministic, context-independent,  and focus-independent. This function never returns a value. Instead it always raises an error. The effect of\n             the error is identical to the effect of dynamic errors raised implicitly, for example\n             when an incorrect argument is supplied to a function.The parameters to the fn:error function supply information that is\n             associated with the error condition and that is made available to a caller that asks for\n             information about the error. The error may be caught either by the host language (using\n             a try/catch construct in XSLT or XQuery, for example), or by the calling application or\n             external processing environment. The way in which error information is returned to the\n             external processing environment is If fn:error is called with no arguments, then its behavior is the same as\n             the function call:  fn:error(fn:QName('http://www.w3.org/2005/xqt-errors', 'err:FOER0000')) If $code is the empty sequence then the effective value is the\n                xs:QName constructed by: fn:QName('http://www.w3.org/2005/xqt-errors', 'err:FOER0000')There are three pieces of information that may be associated with an error:The $code is an error code that distinguishes this error from others.\n                   It is an xs:QName; the namespace URI conventionally identifies the\n                   component, subsystem, or authority responsible for defining the meaning of the\n                   error code, while the local part identifies the specific error condition. The\n                   namespace URI http://www.w3.org/2005/xqt-errors is used for errors\n                   defined in this specification; other namespace URIs may be used for errors defined\n                   by the application.If the external processing environment expects the error code to be returned as a\n                   URI or a string rather than as an xs:QName, then an error code with\n                   namespace URI NS and local part LP will be returned in\n                   the form NS#LP. The namespace URI part of the error code should\n                   therefore not include a fragment identifier.The $description is a natural-language description of the error\n                   condition.The $error-object is an arbitrary value used to convey additional\n                   information about the error, and may be used in any way the application\n                   chooses.This function always raises a dynamic error. By default, it raises \n", 
        "params" : [  ]
      }, {
        "description" : " Calling the fn:error function raises an application-defined\n             error.This function is nondeterministic, context-independent,  and focus-independent. This function never returns a value. Instead it always raises an error. The effect of\n             the error is identical to the effect of dynamic errors raised implicitly, for example\n             when an incorrect argument is supplied to a function.The parameters to the fn:error function supply information that is\n             associated with the error condition and that is made available to a caller that asks for\n             information about the error. The error may be caught either by the host language (using\n             a try/catch construct in XSLT or XQuery, for example), or by the calling application or\n             external processing environment. The way in which error information is returned to the\n             external processing environment is If fn:error is called with no arguments, then its behavior is the same as\n             the function call:  fn:error(fn:QName('http://www.w3.org/2005/xqt-errors', 'err:FOER0000')) If $code is the empty sequence then the effective value is the\n                xs:QName constructed by: fn:QName('http://www.w3.org/2005/xqt-errors', 'err:FOER0000')There are three pieces of information that may be associated with an error:The $code is an error code that distinguishes this error from others.\n                   It is an xs:QName; the namespace URI conventionally identifies the\n                   component, subsystem, or authority responsible for defining the meaning of the\n                   error code, while the local part identifies the specific error condition. The\n                   namespace URI http://www.w3.org/2005/xqt-errors is used for errors\n                   defined in this specification; other namespace URIs may be used for errors defined\n                   by the application.If the external processing environment expects the error code to be returned as a\n                   URI or a string rather than as an xs:QName, then an error code with\n                   namespace URI NS and local part LP will be returned in\n                   the form NS#LP. The namespace URI part of the error code should\n                   therefore not include a fragment identifier.The $description is a natural-language description of the error\n                   condition.The $error-object is an arbitrary value used to convey additional\n                   information about the error, and may be used in any way the application\n                   chooses.This function always raises a dynamic error. By default, it raises \n", 
        "params" : [ "$code" ]
      }, {
        "description" : " Calling the fn:error function raises an application-defined\n             error.This function is nondeterministic, context-independent,  and focus-independent. This function never returns a value. Instead it always raises an error. The effect of\n             the error is identical to the effect of dynamic errors raised implicitly, for example\n             when an incorrect argument is supplied to a function.The parameters to the fn:error function supply information that is\n             associated with the error condition and that is made available to a caller that asks for\n             information about the error. The error may be caught either by the host language (using\n             a try/catch construct in XSLT or XQuery, for example), or by the calling application or\n             external processing environment. The way in which error information is returned to the\n             external processing environment is If fn:error is called with no arguments, then its behavior is the same as\n             the function call:  fn:error(fn:QName('http://www.w3.org/2005/xqt-errors', 'err:FOER0000')) If $code is the empty sequence then the effective value is the\n                xs:QName constructed by: fn:QName('http://www.w3.org/2005/xqt-errors', 'err:FOER0000')There are three pieces of information that may be associated with an error:The $code is an error code that distinguishes this error from others.\n                   It is an xs:QName; the namespace URI conventionally identifies the\n                   component, subsystem, or authority responsible for defining the meaning of the\n                   error code, while the local part identifies the specific error condition. The\n                   namespace URI http://www.w3.org/2005/xqt-errors is used for errors\n                   defined in this specification; other namespace URIs may be used for errors defined\n                   by the application.If the external processing environment expects the error code to be returned as a\n                   URI or a string rather than as an xs:QName, then an error code with\n                   namespace URI NS and local part LP will be returned in\n                   the form NS#LP. The namespace URI part of the error code should\n                   therefore not include a fragment identifier.The $description is a natural-language description of the error\n                   condition.The $error-object is an arbitrary value used to convey additional\n                   information about the error, and may be used in any way the application\n                   chooses.This function always raises a dynamic error. By default, it raises \n", 
        "params" : [ "$code", "$description" ]
      }, {
        "description" : " Calling the fn:error function raises an application-defined\n             error.This function is nondeterministic, context-independent,  and focus-independent. This function never returns a value. Instead it always raises an error. The effect of\n             the error is identical to the effect of dynamic errors raised implicitly, for example\n             when an incorrect argument is supplied to a function.The parameters to the fn:error function supply information that is\n             associated with the error condition and that is made available to a caller that asks for\n             information about the error. The error may be caught either by the host language (using\n             a try/catch construct in XSLT or XQuery, for example), or by the calling application or\n             external processing environment. The way in which error information is returned to the\n             external processing environment is If fn:error is called with no arguments, then its behavior is the same as\n             the function call:  fn:error(fn:QName('http://www.w3.org/2005/xqt-errors', 'err:FOER0000')) If $code is the empty sequence then the effective value is the\n                xs:QName constructed by: fn:QName('http://www.w3.org/2005/xqt-errors', 'err:FOER0000')There are three pieces of information that may be associated with an error:The $code is an error code that distinguishes this error from others.\n                   It is an xs:QName; the namespace URI conventionally identifies the\n                   component, subsystem, or authority responsible for defining the meaning of the\n                   error code, while the local part identifies the specific error condition. The\n                   namespace URI http://www.w3.org/2005/xqt-errors is used for errors\n                   defined in this specification; other namespace URIs may be used for errors defined\n                   by the application.If the external processing environment expects the error code to be returned as a\n                   URI or a string rather than as an xs:QName, then an error code with\n                   namespace URI NS and local part LP will be returned in\n                   the form NS#LP. The namespace URI part of the error code should\n                   therefore not include a fragment identifier.The $description is a natural-language description of the error\n                   condition.The $error-object is an arbitrary value used to convey additional\n                   information about the error, and may be used in any way the application\n                   chooses.This function always raises a dynamic error. By default, it raises \n", 
        "params" : [ "$code", "$description", "$error-object" ]
      } ], 
      "exactly-one" : [ {
        "description" : " Returns $arg if it contains exactly one item. Otherwise, raises an\n             error. This function is deterministic, context-independent,  and focus-independent. Except in error cases, the function returns $arg unchanged.For detailed type semantics, see [Formal Semantics].A dynamic error is raised  if $arg is an empty\n             sequence or a sequence containing more than one item.\n", 
        "params" : [ "$arg" ]
      } ], 
      "exists" : [ {
        "description" : " Returns true if the argument is a non-empty sequence.This function is deterministic, context-independent,  and focus-independent. If the value of $arg is a non-empty sequence, the function returns\n                true; otherwise, the function returns false. The expression fn:exists(fn:remove((\"hello\"), 1)) returns false().The expression fn:exists(fn:remove((\"hello\", \"world\"), 1)) returns true().\n", 
        "params" : [ "$arg" ]
      } ], 
      "false" : [ {
        "description" : " Returns the xs:boolean value false.This function is deterministic, context-independent,  and focus-independent. The result is equivalent to xs:boolean(\"0\").The expression fn:false() returns xs:boolean(0).\n", 
        "params" : [  ]
      } ], 
      "filter" : [ {
        "description" : " Returns those items from the sequence $seq for which the supplied\n             function $f returns true.This function is deterministic, context-independent,  and focus-independent. The effect of the function is equivalent to the following implementation in XQuery:\n declare function fn:filter(\n         $seq as item()*,\n         $f as function(item()) as xs:boolean)\n         as item()* {\n   if (fn:empty($seq))\n   then ()\n   else ( fn:head($seq)[$f(.) eq fn:true()],\n          fn:filter(fn:tail($seq), $f)\n        )\n };or its equivalent in XSLT:\n &lt;xsl:function name=\"fn:filter\" as=\"item()*\"&gt;\n   &lt;xsl:param name=\"seq\" as=\"item()*\"/&gt;\n   &lt;xsl:param name=\"f\" as=\"function(item()) as xs:boolean\"/&gt;\n   &lt;xsl:if test=\"fn:exists($seq)\"&gt;\n     &lt;xsl:sequence select=\"fn:head($seq)[$f(.) eq fn:true()], fn:filter(fn:tail($seq), $f)\"/&gt;\n   &lt;/xsl:if&gt;\n &lt;/xsl:function&gt;\n          As a consequence of the function signature and the function calling\n             rules, a type error occurs if the supplied function $f returns anything other\n             than a single xs:boolean item; there is no conversion to an effective\n             boolean value.\n", 
        "params" : [ "$seq", "$f" ]
      } ], 
      "floor" : [ {
        "description" : " Rounds $arg downwards to a whole number.This function is deterministic, context-independent,  and focus-independent. General rules: see .The function returns the largest (closest to positive infinity) number with no\n             fractional part that is not greater than the value of $arg.If the type of $arg is one of the four numeric types xs:float,\n                xs:double, xs:decimal or xs:integer the type\n             of the result is the same as the type of $arg. If the type of\n                $arg is a type derived from one of the numeric types, the result is an\n             instance of the base numeric type.For xs:float and xs:double arguments, if the argument is\n             positive zero, then positive zero is returned. If the argument is negative zero, then\n             negative zero is returned.For detailed type semantics, see [Formal Semantics].The expression fn:floor(10.5) returns 10.The expression fn:floor(-10.5) returns -11.\n", 
        "params" : [ "$arg" ]
      } ], 
      "fold-left" : [ {
        "description" : " Processes the supplied sequence from left to right, applying the supplied\n             function repeatedly to each item in turn, together with an accumulated result value.This function is deterministic, context-independent,  and focus-independent. The effect of the function is equivalent to the following implementation in XQuery:\n declare function fn:fold-left(\n         $seq as item()*\n         $zero as item()*,\n         $f as function(item()*, item()) as item()*)\n         as item()* {\n   if (fn:empty($seq))\n   then $zero\n   else fn:fold-left(fn:tail($seq), $f($zero, fn:head($seq)), $f)\n };or its equivalent in XSLT:\n &lt;xsl:function name=\"fn:fold-left\" as=\"item()*\"&gt;\n   &lt;xsl:param name=\"seq\" as=\"item()*\"/&gt;\n   &lt;xsl:param name=\"zero\" as=\"item()*\"/&gt;\n   &lt;xsl:param name=\"f\" as=\"function(item()*, item()) as item()*\"/&gt;\n   &lt;xsl:choose&gt;\n     &lt;xsl:when test=\"fn:empty($seq)\"&gt;\n       &lt;xsl:sequence select=\"$zero\"/&gt;\n     &lt;/xsl:when&gt;\n     &lt;xsl:otherwise&gt;\n       &lt;xsl:sequence select=\"fn:fold-left(fn:tail($seq), $f($zero, fn:head($seq)), $f)\"/&gt;\n     &lt;/xsl:otherwise&gt;\n   &lt;/xsl:choose&gt;\n &lt;/xsl:function&gt;\n          As a consequence of the function signature and the function calling\n             rules, a type error occurs if the supplied function $f cannot be applied to\n             two arguments, where the first argument is either the value of $zero or the\n             result of a previous application of $f, and the second is $seq or\n             any trailing subsequence of $seq.\n", 
        "params" : [ "$seq", "$zero", "$f" ]
      } ], 
      "fold-right" : [ {
        "description" : " Processes the supplied sequence from right to left, applying the supplied\n             function repeatedly to each item in turn, together with an accumulated result value.This function is deterministic, context-independent,  and focus-independent. The effect of the function is equivalent to the following implementation in XQuery:\n declare function fn:fold-right(\n         $seq as item()*,\n         $zero as item()*,\n         $f as function(item(), item()*) as item()*)\n         as item()* {\n   if (fn:empty($seq))\n   then $zero\n   else $f(fn:head($seq), fn:fold-right(fn:tail($seq), $zero, $f))\n };or its equivalent in XSLT:\n &lt;xsl:function name=\"fn:fold-right\" as=\"item()*\"&gt;\n   &lt;xsl:param name=\"seq\" as=\"item()*\"/&gt;\n   &lt;xsl:param name=\"zero\" as=\"item()*\"/&gt;\n   &lt;xsl:param name=\"f\" as=\"function(item(), item()*) as item()*\"/&gt;\n   &lt;xsl:choose&gt;\n     &lt;xsl:when test=\"fn:empty($seq)\"&gt;\n       &lt;xsl:sequence select=\"$zero\"/&gt;\n     &lt;/xsl:when&gt;\n     &lt;xsl:otherwise&gt;\n       &lt;xsl:sequence select=\"$f(fn:head($seq), fn:fold-right(fn:tail($seq), $zero, $f))\"/&gt;\n     &lt;/xsl:otherwise&gt;\n   &lt;/xsl:choose&gt;\n &lt;/xsl:function&gt;\n          As a consequence of the function signature and the function calling\n             rules, a type error occurs if the supplied function $f cannot be applied to\n             two arguments, where the first argument is any item in the sequence $seq, and\n             the second is either the value of $zero or the result of a previous\n             application of $f.\n", 
        "params" : [ "$seq", "$zero", "$f" ]
      } ], 
      "format-date" : [ {
        "description" : " Returns a string containing an xs:date value formatted for display.The two-argument form of this function is deterministic, context-dependent,  and focus-independent.  It depends on\n \t\tdefault calendar, and default language, and default place, and implicit timezone.\n \tThe five-argument form of this function is deterministic, context-dependent,  and focus-independent.  It depends on\n \t\timplicit timezone, and namespaces.\n \tSee .\n", 
        "params" : [ "$value", "$picture", "$language", "$calendar", "$place" ]
      }, {
        "description" : " Returns a string containing an xs:date value formatted for display.The two-argument form of this function is deterministic, context-dependent,  and focus-independent.  It depends on\n \t\tdefault calendar, and default language, and default place, and implicit timezone.\n \tThe five-argument form of this function is deterministic, context-dependent,  and focus-independent.  It depends on\n \t\timplicit timezone, and namespaces.\n \tSee .\n", 
        "params" : [ "$value", "$picture" ]
      } ], 
      "format-dateTime" : [ {
        "description" : " Returns a string containing an xs:dateTime value formatted for display.The two-argument form of this function is deterministic, context-dependent,  and focus-independent.  It depends on\n \t\tdefault calendar, and default language, and default place, and implicit timezone.\n \tThe five-argument form of this function is deterministic, context-dependent,  and focus-independent.  It depends on\n \t\timplicit timezone, and namespaces.\n \tSee .\n", 
        "params" : [ "$value", "$picture", "$language", "$calendar", "$place" ]
      }, {
        "description" : " Returns a string containing an xs:dateTime value formatted for display.The two-argument form of this function is deterministic, context-dependent,  and focus-independent.  It depends on\n \t\tdefault calendar, and default language, and default place, and implicit timezone.\n \tThe five-argument form of this function is deterministic, context-dependent,  and focus-independent.  It depends on\n \t\timplicit timezone, and namespaces.\n \tSee .\n", 
        "params" : [ "$value", "$picture" ]
      } ], 
      "format-integer" : [ {
        "description" : " Formats an integer according to a given picture string, using the conventions\n             of a given natural language if specified.The two-argument form of this function is deterministic, context-dependent,  and focus-independent.  It depends on\n \t\tdefault language.\n \tThe three-argument form of this function is deterministic, context-independent,  and focus-independent. If $value is an empty sequence, the function returns a zero-length\n             string.In all other cases, the $picture argument describes the format in which\n                $value is output.The rules that follow describe how non-negative numbers are output. If the value of\n                $value is negative, the rules below are applied to the absolute value of\n                $value, and a minus sign is prepended to the result.The value of $picture consists of a primary format token,\n             optionally followed\n             by a format modifier. The primary format token is always present and must not\n             be zero-length. If the string contains one or more semicolons then everything that\n             precedes the last semicolon is taken as the primary format token and everything\n             that follows is taken as the format modifier; if the string contains no\n             semicolon then the entire picture is taken as the primary format token, and the\n             format modifier is taken to be absent (which is equivalent to supplying a\n             zero-length string).The primary format token is classified as one of the following:A decimal-digit-pattern made up of optional-digit-signs,\n                      mandatory-digit-signs, and grouping-separator-signs.The optional-digit-sign is the character \"#\".A mandatory-digit-sign is a character in Unicode category Nd. All\n                            mandatory-digit-signs within the format token must be from the\n                         same digit family, where a digit family is a sequence of ten consecutive\n                         characters in Unicode category Nd, having digit values 0 through 9. Within\n                         the format token, these digits are interchangeable: a three-digit number may\n                         thus be indicated equivalently by 000, 001, or\n                            999.a grouping-separator-sign is a non-alphanumeric character, that\n                         is a character whose Unicode category is\n                         other than Nd, Nl, No, Lu, Ll, Lt, Lm or Lo.If the primary format token contains at least one Unicode digit\n                   then it is taken as a decimal digit pattern, and in this case it must\n                   match the regular expression ^((\\p{Nd}|#|[^\\p{N}\\p{L}])+?)$. If it contains\n                   a digit but does not match this pattern, a dynamic error\n                   is raised .If a semicolon is to be used as a grouping separator, then the primary\n                format token as a whole must be followed by another semicolon, to ensure that\n                the grouping separator is not mistaken as a separator between the primary format\n                token and the format modifier.There must be at least one mandatory-digit-sign. There may be zero or\n                   more optional-digit-signs, and (if present) these must precede all\n                      mandatory-digit-signs. There may be zero or more\n                      grouping-separator-signs. A grouping-separator-sign must\n                   not appear at the start or end of the decimal-digit-pattern, nor\n                   adjacent to another grouping-separator-sign.The corresponding output format is a decimal number, using this digit family, with\n                   at least as many digits as there are mandatory-digit-signs in the\n                   format token. Thus, a format token 1 generates the sequence 0 1\n                      2 ... 10 11 12 ..., and a format token 01 (or equivalently,\n                      00 or 99) generates the sequence 00 01 02 ...\n                      09 10 11 12 ... 99 100 101. A format token of &amp;#x661;\n                   (Arabic-Indic digit one) generates the sequence ١ then ٢\n                   then ٣ ...The grouping-separator-signs are handled as follows. The position of\n                   grouping separators within the format token, counting backwards from the last\n                   digit, indicates the position of grouping separators to appear within the\n                   formatted number, and the character used as the grouping-separator-sign\n                   within the format token indicates the character to be used as the corresponding\n                   grouping separator in the formatted number. If grouping-separator-signs\n                   appear at regular intervals within the format token, that is if the same grouping\n                   separator appears at positions forming a sequence N, 2N,\n                      3N, ... for some integer value N (including the case\n                   where there is only one number in the list), then the sequence is extrapolated to\n                   the left, so grouping separators will be used in the formatted number at every\n                   multiple of N. For example, if the format token is 0'000\n                   then the number one million will be formatted as 1'000'000, while the\n                   number fifteen will be formatted as 0'015.The only purpose of optional-digit-signs is to mark the position of\n                      grouping-separator-signs. For example, if the format token is\n                      #'##0 then the number one million will be formatted as\n                      1'000'000, while the number fifteen will be formatted as\n                      15. A grouping separator is included in the formatted number only\n                   if there is a digit to its left, which will only be the case if either (a) the\n                   number is large enough to require that digit, or (b) the number of\n                      mandatory-digit-signs in the format token requires insignificant\n                   leading zeros to be present.Numbers will never be truncated. Given the decimal-digit-pattern\n                      01, the number three hundred will be output as 300,\n                      despite the absence of any optional-digit-sign.The format token A, which generates the sequence A B C ... Z AA AB\n                      AC....The format token a, which generates the sequence a b c ... z aa ab\n                      ac....The format token i, which generates the sequence i ii iii iv v vi vii\n                      viii ix x ....The format token I, which generates the sequence I II III IV V VI VII\n                      VIII IX X ....The format token w, which generates numbers written as lower-case words, for\n                   example in English, one two three four ...\n                The format token W, which generates numbers written as upper-case words, for\n                   example in English, ONE TWO THREE FOUR ...\n                The format token Ww, which generates numbers written as title-case words, for\n                   example in English, One Two Three Four ...\n                Any other format token, which indicates a numbering sequence in which that token\n                   represents the number 1 (one) (but see the note below).\n                   \n                   It is implementation-defined which\n                   numbering sequences, additional to those listed above, are supported. If an\n                   implementation does not support a numbering sequence represented by the given\n                   token, it must use a format token of 1.In some traditional numbering sequences additional signs are added to denote\n                      that the letters should be interpreted as numbers; these are not included in\n                      the format token. An example (see also the example below) is classical Greek\n                      where a dexia keraia (x0374, ʹ) and sometimes an aristeri keraia\n                      (x0375, ͵) is added.For all format tokens other than the first kind above (one that consists of decimal\n             digits), there may be implementation-defined lower and upper bounds on the range of numbers that\n             can be formatted using this format token; indeed, for some numbering sequences there may\n             be intrinsic limits. For example, the format token &amp;#x2460; (circled\n             digit one, ①) has a range imposed by the Unicode character repertoire — 1 to 20 in\n             Unicode versions prior to 4.0, increased in subsequent versions. For\n             the numbering sequences described above any upper bound imposed by the implementation\n                must not be less than 1000 (one thousand) and any lower bound must\n             not be greater than 1. Numbers that fall outside this range must be\n             formatted using the format token 1.The above expansions of numbering sequences for format tokens such as a and\n                i are indicative but not prescriptive. There are various conventions in\n             use for how alphabetic sequences continue when the alphabet is exhausted, and differing\n             conventions for how roman numerals are written (for example, IV versus\n                IIII as the representation of the number 4). Sometimes alphabetic\n             sequences are used that omit letters such as i and o. This\n             specification does not prescribe the detail of any sequence other than those sequences\n             consisting entirely of decimal digits.Many numbering sequences are language-sensitive. This applies especially to the sequence\n             selected by the tokens w, W and Ww. It also\n             applies to other sequences, for example different languages using the Cyrillic alphabet\n             use different sequences of characters, each starting with the letter #x410 (Cyrillic\n             capital letter A). In such cases, the $lang argument specifies which\n             language's conventions are to be used. If the argument\n             is specified, the value should be either an empty sequence\n             or a value that would be valid for the xml:lang attribute (see ).\n             Note that this permits the identification of sublanguages based on country codes (from ISO 3166-1)\n             as well as identification of dialects and regions within a country..The set of languages\n             for which numbering is supported is .\n             If the $lang argument is absent,\n             or is set to an empty sequence, or is invalid, or is not a language supported by the\n             implementation, then the number is formatted using the\n             default language from the dynamic context.\n             The format modifier must\n             be a string that matches the regular expression ^([co](\\(.+\\))?)?[at]?$. \n             That is, if it is present it must consist of one or more of\n             the following, in any order:either c or o, optionally followed by\n                   a sequence of characters enclosed between parentheses, to indicate cardinal or\n                   ordinal numbering respectively, the default being cardinal numberingeither a or t, to indicate alphabetic\n                   or traditional numbering respectively, the default being implementation-defined.If the o modifier is present, this indicates a request to output ordinal\n             numbers rather than cardinal numbers. For example, in English, when used with the format\n             token 1, this outputs the sequence 1st 2nd 3rd 4th ..., and\n             when used with the format token w outputs the sequence first second\n             third fourth ....The string of characters between the parentheses, if present, is used to\n          select between other possible variations of cardinal or ordinal numbering sequences.\n          The interpretation of this string is implementation-defined. No error occurs\n          if the implementation does not define any interpretation for the defined string.For example, in some languages, ordinal numbers vary depending on the grammatical context:\n             they may have different genders and may decline with the noun that they qualify.\n             In such cases the string appearing in parentheses after the letter o may be\n             used to indicate the variation of the ordinal number required. The way in which the\n             variation is indicated will depend on the conventions of the language. For inflected\n             languages that vary the ending of the word, the recommended approach is to indicate the\n             required ending, preceded by a hyphen: for example in German, appropriate values are\n                o(-e), o(-er), o(-es), o(-en). It is implementation-defined what\n             combinations of values of the format token, the language, and the cardinal/ordinal\n             modifier are supported. If ordinal numbering is not supported for the combination of the\n             format token, the language, and the string appearing in parentheses, the request is\n             ignored and cardinal numbers are generated instead.Ordinal Numbering in ItalianThe specification \"1;o(-º)\" with $lang equal to\n                   it, if supported, should produce the sequence:1º 2º 3º 4º ...The specification \"Ww;o\" with $lang equal to\n                   it, if supported, should produce the sequence:Primo Secondo Terzo Quarto Quinto ...The use of the a or t\n                modifier disambiguates between numbering sequences that use letters. In many\n             languages there are two commonly used numbering sequences that use letters. One\n             numbering sequence assigns numeric values to letters in alphabetic sequence, and the\n             other assigns numeric values to each letter in some other manner traditional in that\n             language. In English, these would correspond to the numbering sequences specified by the\n             format tokens a and i. In some languages, the first member of\n             each sequence is the same, and so the format token alone would be ambiguous. In the absence of the a or t modifier,\n                the default is implementation-defined.A dynamic error is raised  if the format token is invalid,\n             that is, if it violates any mandatory rules (indicated by an emphasized must\n             or required keyword in the above rules). For example, the error is raised if\n             the primary format token contains a digit but does not match the required regular expression.\n", 
        "params" : [ "$value", "$picture" ]
      }, {
        "description" : " Formats an integer according to a given picture string, using the conventions\n             of a given natural language if specified.The two-argument form of this function is deterministic, context-dependent,  and focus-independent.  It depends on\n \t\tdefault language.\n \tThe three-argument form of this function is deterministic, context-independent,  and focus-independent. If $value is an empty sequence, the function returns a zero-length\n             string.In all other cases, the $picture argument describes the format in which\n                $value is output.The rules that follow describe how non-negative numbers are output. If the value of\n                $value is negative, the rules below are applied to the absolute value of\n                $value, and a minus sign is prepended to the result.The value of $picture consists of a primary format token,\n             optionally followed\n             by a format modifier. The primary format token is always present and must not\n             be zero-length. If the string contains one or more semicolons then everything that\n             precedes the last semicolon is taken as the primary format token and everything\n             that follows is taken as the format modifier; if the string contains no\n             semicolon then the entire picture is taken as the primary format token, and the\n             format modifier is taken to be absent (which is equivalent to supplying a\n             zero-length string).The primary format token is classified as one of the following:A decimal-digit-pattern made up of optional-digit-signs,\n                      mandatory-digit-signs, and grouping-separator-signs.The optional-digit-sign is the character \"#\".A mandatory-digit-sign is a character in Unicode category Nd. All\n                            mandatory-digit-signs within the format token must be from the\n                         same digit family, where a digit family is a sequence of ten consecutive\n                         characters in Unicode category Nd, having digit values 0 through 9. Within\n                         the format token, these digits are interchangeable: a three-digit number may\n                         thus be indicated equivalently by 000, 001, or\n                            999.a grouping-separator-sign is a non-alphanumeric character, that\n                         is a character whose Unicode category is\n                         other than Nd, Nl, No, Lu, Ll, Lt, Lm or Lo.If the primary format token contains at least one Unicode digit\n                   then it is taken as a decimal digit pattern, and in this case it must\n                   match the regular expression ^((\\p{Nd}|#|[^\\p{N}\\p{L}])+?)$. If it contains\n                   a digit but does not match this pattern, a dynamic error\n                   is raised .If a semicolon is to be used as a grouping separator, then the primary\n                format token as a whole must be followed by another semicolon, to ensure that\n                the grouping separator is not mistaken as a separator between the primary format\n                token and the format modifier.There must be at least one mandatory-digit-sign. There may be zero or\n                   more optional-digit-signs, and (if present) these must precede all\n                      mandatory-digit-signs. There may be zero or more\n                      grouping-separator-signs. A grouping-separator-sign must\n                   not appear at the start or end of the decimal-digit-pattern, nor\n                   adjacent to another grouping-separator-sign.The corresponding output format is a decimal number, using this digit family, with\n                   at least as many digits as there are mandatory-digit-signs in the\n                   format token. Thus, a format token 1 generates the sequence 0 1\n                      2 ... 10 11 12 ..., and a format token 01 (or equivalently,\n                      00 or 99) generates the sequence 00 01 02 ...\n                      09 10 11 12 ... 99 100 101. A format token of &amp;#x661;\n                   (Arabic-Indic digit one) generates the sequence ١ then ٢\n                   then ٣ ...The grouping-separator-signs are handled as follows. The position of\n                   grouping separators within the format token, counting backwards from the last\n                   digit, indicates the position of grouping separators to appear within the\n                   formatted number, and the character used as the grouping-separator-sign\n                   within the format token indicates the character to be used as the corresponding\n                   grouping separator in the formatted number. If grouping-separator-signs\n                   appear at regular intervals within the format token, that is if the same grouping\n                   separator appears at positions forming a sequence N, 2N,\n                      3N, ... for some integer value N (including the case\n                   where there is only one number in the list), then the sequence is extrapolated to\n                   the left, so grouping separators will be used in the formatted number at every\n                   multiple of N. For example, if the format token is 0'000\n                   then the number one million will be formatted as 1'000'000, while the\n                   number fifteen will be formatted as 0'015.The only purpose of optional-digit-signs is to mark the position of\n                      grouping-separator-signs. For example, if the format token is\n                      #'##0 then the number one million will be formatted as\n                      1'000'000, while the number fifteen will be formatted as\n                      15. A grouping separator is included in the formatted number only\n                   if there is a digit to its left, which will only be the case if either (a) the\n                   number is large enough to require that digit, or (b) the number of\n                      mandatory-digit-signs in the format token requires insignificant\n                   leading zeros to be present.Numbers will never be truncated. Given the decimal-digit-pattern\n                      01, the number three hundred will be output as 300,\n                      despite the absence of any optional-digit-sign.The format token A, which generates the sequence A B C ... Z AA AB\n                      AC....The format token a, which generates the sequence a b c ... z aa ab\n                      ac....The format token i, which generates the sequence i ii iii iv v vi vii\n                      viii ix x ....The format token I, which generates the sequence I II III IV V VI VII\n                      VIII IX X ....The format token w, which generates numbers written as lower-case words, for\n                   example in English, one two three four ...\n                The format token W, which generates numbers written as upper-case words, for\n                   example in English, ONE TWO THREE FOUR ...\n                The format token Ww, which generates numbers written as title-case words, for\n                   example in English, One Two Three Four ...\n                Any other format token, which indicates a numbering sequence in which that token\n                   represents the number 1 (one) (but see the note below).\n                   \n                   It is implementation-defined which\n                   numbering sequences, additional to those listed above, are supported. If an\n                   implementation does not support a numbering sequence represented by the given\n                   token, it must use a format token of 1.In some traditional numbering sequences additional signs are added to denote\n                      that the letters should be interpreted as numbers; these are not included in\n                      the format token. An example (see also the example below) is classical Greek\n                      where a dexia keraia (x0374, ʹ) and sometimes an aristeri keraia\n                      (x0375, ͵) is added.For all format tokens other than the first kind above (one that consists of decimal\n             digits), there may be implementation-defined lower and upper bounds on the range of numbers that\n             can be formatted using this format token; indeed, for some numbering sequences there may\n             be intrinsic limits. For example, the format token &amp;#x2460; (circled\n             digit one, ①) has a range imposed by the Unicode character repertoire — 1 to 20 in\n             Unicode versions prior to 4.0, increased in subsequent versions. For\n             the numbering sequences described above any upper bound imposed by the implementation\n                must not be less than 1000 (one thousand) and any lower bound must\n             not be greater than 1. Numbers that fall outside this range must be\n             formatted using the format token 1.The above expansions of numbering sequences for format tokens such as a and\n                i are indicative but not prescriptive. There are various conventions in\n             use for how alphabetic sequences continue when the alphabet is exhausted, and differing\n             conventions for how roman numerals are written (for example, IV versus\n                IIII as the representation of the number 4). Sometimes alphabetic\n             sequences are used that omit letters such as i and o. This\n             specification does not prescribe the detail of any sequence other than those sequences\n             consisting entirely of decimal digits.Many numbering sequences are language-sensitive. This applies especially to the sequence\n             selected by the tokens w, W and Ww. It also\n             applies to other sequences, for example different languages using the Cyrillic alphabet\n             use different sequences of characters, each starting with the letter #x410 (Cyrillic\n             capital letter A). In such cases, the $lang argument specifies which\n             language's conventions are to be used. If the argument\n             is specified, the value should be either an empty sequence\n             or a value that would be valid for the xml:lang attribute (see ).\n             Note that this permits the identification of sublanguages based on country codes (from ISO 3166-1)\n             as well as identification of dialects and regions within a country..The set of languages\n             for which numbering is supported is .\n             If the $lang argument is absent,\n             or is set to an empty sequence, or is invalid, or is not a language supported by the\n             implementation, then the number is formatted using the\n             default language from the dynamic context.\n             The format modifier must\n             be a string that matches the regular expression ^([co](\\(.+\\))?)?[at]?$. \n             That is, if it is present it must consist of one or more of\n             the following, in any order:either c or o, optionally followed by\n                   a sequence of characters enclosed between parentheses, to indicate cardinal or\n                   ordinal numbering respectively, the default being cardinal numberingeither a or t, to indicate alphabetic\n                   or traditional numbering respectively, the default being implementation-defined.If the o modifier is present, this indicates a request to output ordinal\n             numbers rather than cardinal numbers. For example, in English, when used with the format\n             token 1, this outputs the sequence 1st 2nd 3rd 4th ..., and\n             when used with the format token w outputs the sequence first second\n             third fourth ....The string of characters between the parentheses, if present, is used to\n          select between other possible variations of cardinal or ordinal numbering sequences.\n          The interpretation of this string is implementation-defined. No error occurs\n          if the implementation does not define any interpretation for the defined string.For example, in some languages, ordinal numbers vary depending on the grammatical context:\n             they may have different genders and may decline with the noun that they qualify.\n             In such cases the string appearing in parentheses after the letter o may be\n             used to indicate the variation of the ordinal number required. The way in which the\n             variation is indicated will depend on the conventions of the language. For inflected\n             languages that vary the ending of the word, the recommended approach is to indicate the\n             required ending, preceded by a hyphen: for example in German, appropriate values are\n                o(-e), o(-er), o(-es), o(-en). It is implementation-defined what\n             combinations of values of the format token, the language, and the cardinal/ordinal\n             modifier are supported. If ordinal numbering is not supported for the combination of the\n             format token, the language, and the string appearing in parentheses, the request is\n             ignored and cardinal numbers are generated instead.Ordinal Numbering in ItalianThe specification \"1;o(-º)\" with $lang equal to\n                   it, if supported, should produce the sequence:1º 2º 3º 4º ...The specification \"Ww;o\" with $lang equal to\n                   it, if supported, should produce the sequence:Primo Secondo Terzo Quarto Quinto ...The use of the a or t\n                modifier disambiguates between numbering sequences that use letters. In many\n             languages there are two commonly used numbering sequences that use letters. One\n             numbering sequence assigns numeric values to letters in alphabetic sequence, and the\n             other assigns numeric values to each letter in some other manner traditional in that\n             language. In English, these would correspond to the numbering sequences specified by the\n             format tokens a and i. In some languages, the first member of\n             each sequence is the same, and so the format token alone would be ambiguous. In the absence of the a or t modifier,\n                the default is implementation-defined.A dynamic error is raised  if the format token is invalid,\n             that is, if it violates any mandatory rules (indicated by an emphasized must\n             or required keyword in the above rules). For example, the error is raised if\n             the primary format token contains a digit but does not match the required regular expression.\n", 
        "params" : [ "$value", "$picture", "$language" ]
      } ], 
      "format-number" : [ {
        "description" : " Returns a string containing a number formatted according to a given picture\n             string, taking account of decimal formats specified in the static context.The two-argument form of this function is deterministic, context-independent,  and focus-independent. The three-argument form of this function is deterministic, context-dependent,  and focus-independent.  It depends on\n \t\tdecimal formats, and namespaces.\n \tThe effect of the two-argument form of the function is equivalent to calling\n          the three-argument form with an empty sequence as the value of the third argument.The function formats $value as a string using the picture string specified by the\n                $picture argument and the decimal-format named by the\n                $decimal-format-name argument, or the default decimal-format, if there\n             is no $decimal-format-name argument. The syntax of the picture string is\n             described in .The $value argument may be of any numeric data type\n             (xs:double, xs:float, xs:decimal, or their\n             subtypes including xs:integer). Note that if an xs:decimal is\n             supplied, it is not automatically promoted to an xs:double, as such\n             promotion can involve a loss of precision.If the supplied value of the $value argument is an empty sequence, the\n             function behaves as if the supplied value were the xs:double value\n                NaN.The value of $decimal-format-name,\n             if present and non-empty, \n             must be a string which after removal of leading and trailing whitespace is in the form of an\n             an EQName as defined in the XPath 3.0 grammar, that is one of the following:A lexical QName, which is expanded using the\n                statically known namespaces.\n                The default namespace is not used (no prefix means no namespace).A URIQualifiedName using the syntax Q{uri}local,\n             where the URI can be zero-length to indicate a name in no namespace.The decimal format that is used is the decimal format\n          in the static context whose name matches $decimal-format-name if supplied,\n          or the default decimal format in the static context otherwise.The evaluation of the format-number function takes place in two\n             phases, an analysis phase described in  and a\n             formatting phase described in .The analysis phase takes as its inputs the picture\n                string and the variables derived from the relevant decimal format in the\n             static context, and produces as its output a number of variables with defined values.\n             The formatting phase takes as its inputs the number to be formatted and the variables\n             produced by the analysis phase, and produces as its output a string containing a\n             formatted representation of the number.The result of the function is the formatted string representation of the supplied\n             number.A dynamic error is raised  if the name specified as the\n                $decimal-format-name argument is\n             neither a valid lexical QName nor a valid URIQualifiedName, or if it\n             uses a prefix that is not found in the statically known namespaces, or if the static\n             context does not contain a declaration of a decimal-format with a matching expanded\n             QName. If the processor is able to detect the error statically (for example, when the\n             argument is supplied as a string literal), then the processor may\n             optionally signal this as a static error.\n", 
        "params" : [ "$value", "$picture" ]
      }, {
        "description" : " Returns a string containing a number formatted according to a given picture\n             string, taking account of decimal formats specified in the static context.The two-argument form of this function is deterministic, context-independent,  and focus-independent. The three-argument form of this function is deterministic, context-dependent,  and focus-independent.  It depends on\n \t\tdecimal formats, and namespaces.\n \tThe effect of the two-argument form of the function is equivalent to calling\n          the three-argument form with an empty sequence as the value of the third argument.The function formats $value as a string using the picture string specified by the\n                $picture argument and the decimal-format named by the\n                $decimal-format-name argument, or the default decimal-format, if there\n             is no $decimal-format-name argument. The syntax of the picture string is\n             described in .The $value argument may be of any numeric data type\n             (xs:double, xs:float, xs:decimal, or their\n             subtypes including xs:integer). Note that if an xs:decimal is\n             supplied, it is not automatically promoted to an xs:double, as such\n             promotion can involve a loss of precision.If the supplied value of the $value argument is an empty sequence, the\n             function behaves as if the supplied value were the xs:double value\n                NaN.The value of $decimal-format-name,\n             if present and non-empty, \n             must be a string which after removal of leading and trailing whitespace is in the form of an\n             an EQName as defined in the XPath 3.0 grammar, that is one of the following:A lexical QName, which is expanded using the\n                statically known namespaces.\n                The default namespace is not used (no prefix means no namespace).A URIQualifiedName using the syntax Q{uri}local,\n             where the URI can be zero-length to indicate a name in no namespace.The decimal format that is used is the decimal format\n          in the static context whose name matches $decimal-format-name if supplied,\n          or the default decimal format in the static context otherwise.The evaluation of the format-number function takes place in two\n             phases, an analysis phase described in  and a\n             formatting phase described in .The analysis phase takes as its inputs the picture\n                string and the variables derived from the relevant decimal format in the\n             static context, and produces as its output a number of variables with defined values.\n             The formatting phase takes as its inputs the number to be formatted and the variables\n             produced by the analysis phase, and produces as its output a string containing a\n             formatted representation of the number.The result of the function is the formatted string representation of the supplied\n             number.A dynamic error is raised  if the name specified as the\n                $decimal-format-name argument is\n             neither a valid lexical QName nor a valid URIQualifiedName, or if it\n             uses a prefix that is not found in the statically known namespaces, or if the static\n             context does not contain a declaration of a decimal-format with a matching expanded\n             QName. If the processor is able to detect the error statically (for example, when the\n             argument is supplied as a string literal), then the processor may\n             optionally signal this as a static error.\n", 
        "params" : [ "$value", "$picture", "$decimal-format-name" ]
      } ], 
      "format-time" : [ {
        "description" : " Returns a string containing an xs:time value formatted for display.The two-argument form of this function is deterministic, context-dependent,  and focus-independent.  It depends on\n \t\tdefault calendar, and default language, and default place, and implicit timezone.\n \tThe five-argument form of this function is deterministic, context-dependent,  and focus-independent.  It depends on\n \t\timplicit timezone, and namespaces.\n \tSee .\n", 
        "params" : [ "$value", "$picture", "$language", "$calendar", "$place" ]
      }, {
        "description" : " Returns a string containing an xs:time value formatted for display.The two-argument form of this function is deterministic, context-dependent,  and focus-independent.  It depends on\n \t\tdefault calendar, and default language, and default place, and implicit timezone.\n \tThe five-argument form of this function is deterministic, context-dependent,  and focus-independent.  It depends on\n \t\timplicit timezone, and namespaces.\n \tSee .\n", 
        "params" : [ "$value", "$picture" ]
      } ], 
      "function-arity" : [ {
        "description" : " Returns the arity of the function identified by a function item.This function is deterministic, context-independent,  and focus-independent. The fn:function-arity function returns the arity (number of arguments) of\n             the function identified by $func.The expression fn:function-arity(fn:substring#2) returns 2.The expression fn:function-arity(function($node){name($node)}) returns 1.The expression let $initial := fn:substring(?, 1, 1) return fn:function-arity($initial) returns 1.\n", 
        "params" : [ "$func" ]
      } ], 
      "generate-id" : [ {
        "description" : " This function returns a string that uniquely identifies a given node. The zero-argument form of this function is deterministic, context-dependent,  and focus-dependent. The one-argument form of this function is deterministic, context-independent,  and focus-independent. If the argument is omitted, it defaults to the context item (.). The\n             behavior of the function if the argument is omitted is exactly the same as if the\n             context item had been passed as the argument.If the argument is the empty sequence, the result is the zero-length string.In other cases, the function returns a string that uniquely identifies a given node.The returned identifier must consist of ASCII alphanumeric characters\n             and must start with an alphabetic character. Thus, the string is\n             syntactically an XML name.An implementation is free to generate an identifier in any convenient way provided that\n             it always generates the same identifier for the same node and that different identifiers\n             are always generated from different nodes. An implementation is under no obligation to\n             generate the same identifiers each time a document is transformed or queried.The following errors may be raised when $arg is omitted:If the context\n                item is absent, dynamic error\n                If the context item is not a\n                node, type error .\n", 
        "params" : [  ]
      }, {
        "description" : " This function returns a string that uniquely identifies a given node. The zero-argument form of this function is deterministic, context-dependent,  and focus-dependent. The one-argument form of this function is deterministic, context-independent,  and focus-independent. If the argument is omitted, it defaults to the context item (.). The\n             behavior of the function if the argument is omitted is exactly the same as if the\n             context item had been passed as the argument.If the argument is the empty sequence, the result is the zero-length string.In other cases, the function returns a string that uniquely identifies a given node.The returned identifier must consist of ASCII alphanumeric characters\n             and must start with an alphabetic character. Thus, the string is\n             syntactically an XML name.An implementation is free to generate an identifier in any convenient way provided that\n             it always generates the same identifier for the same node and that different identifiers\n             are always generated from different nodes. An implementation is under no obligation to\n             generate the same identifiers each time a document is transformed or queried.The following errors may be raised when $arg is omitted:If the context\n                item is absent, dynamic error\n                If the context item is not a\n                node, type error .\n", 
        "params" : [ "$arg" ]
      } ], 
      "head" : [ {
        "description" : " Returns the first item in a sequence. This function is deterministic, context-independent,  and focus-independent. The function returns the value of the expression $arg[1]If $arg is the empty sequence, the empty sequence is returned. Otherwise\n             the first item in the sequence is returned.\n", 
        "params" : [ "$arg" ]
      } ], 
      "hours-from-duration" : [ {
        "description" : " Returns the number of hours in a duration.This function is deterministic, context-independent,  and focus-independent. If $arg is the empty sequence, the function returns the empty sequence.Otherwise, the function returns an xs:integer representing the hours\n             component in the value of $arg. The result is obtained by casting\n                $arg to an xs:dayTimeDuration (see ) and then computing the hours component as described in\n                .If $arg is a negative duration then the result will be negative..If $arg is an xs:yearMonthDuration the function returns 0.The expression fn:hours-from-duration(xs:dayTimeDuration(\"P3DT10H\")) returns 10.The expression fn:hours-from-duration(xs:dayTimeDuration(\"P3DT12H32M12S\")) returns 12.The expression fn:hours-from-duration(xs:dayTimeDuration(\"PT123H\")) returns 3.The expression fn:hours-from-duration(xs:dayTimeDuration(\"-P3DT10H\")) returns -10.\n", 
        "params" : [ "$arg" ]
      } ], 
      "hours-from-time" : [ {
        "description" : " Returns the hours component of an xs:time.This function is deterministic, context-independent,  and focus-independent. If $arg is the empty sequence, the function returns the empty sequence.Otherwise, the function returns an xs:integer between 0 and 23, both\n             inclusive, representing the value of the hours component in the local value of\n                $arg.Assume that the dynamic context provides an implicit timezone value of\n                   -05:00. The expression fn:hours-from-time(xs:time(\"11:23:00\")) returns 11.The expression fn:hours-from-time(xs:time(\"21:23:00\")) returns 21.The expression fn:hours-from-time(xs:time(\"01:23:00+05:00\")) returns 1.The expression fn:hours-from-time(fn:adjust-time-to-timezone(xs:time(\"01:23:00+05:00\"),\n                   xs:dayTimeDuration(\"PT0S\"))) returns 20.The expression fn:hours-from-time(xs:time(\"24:00:00\")) returns 0.\n", 
        "params" : [ "$arg" ]
      } ], 
      "id" : [ {
        "description" : " Returns the sequence of element nodes that have an ID value\n             matching the value of one or more of the IDREF values supplied in\n                $arg.The one-argument form of this function is deterministic, context-dependent,  and focus-dependent. The two-argument form of this function is deterministic, context-independent,  and focus-independent. The function returns a sequence, in document order with duplicates eliminated,\n             containing every element node E that satisfies all the following\n             conditions:\n                   E is in the target document. The target document is the document\n                   containing $node, or the document containing the context item\n                      (.) if the second argument is omitted. The behavior of the\n                   function if $node is omitted is exactly the same as if the context\n                   item had been passed as $node.E has an ID value equal to one of the candidate\n                      IDREF values, where: An element has an ID value equal to V if either\n                         or both of the following conditions are true:The is-id property (See .) of the element node is true, and the typed value\n                               of the element node is equal to V under the rules of the\n                                  eq operator using the Unicode codepoint collation\n                                  (http://www.w3.org/2005/xpath-functions/collation/codepoint).The element has an attribute node whose is-id property\n                               (See .) is true and whose typed\n                               value is equal to V under the rules of the\n                                  eq operator using the Unicode code point collation\n                                  (http://www.w3.org/2005/xpath-functions/collation/codepoint). Each xs:string in $arg is parsed as if it were of\n                         type IDREFS, that is, each xs:string in\n                            $arg is treated as a whitespace-separated sequence of\n                         tokens, each acting as an IDREF. These tokens are then included\n                         in the list of candidate IDREFs. If any of the tokens is not a\n                         lexically valid IDREF (that is, if it is not lexically an\n                            xs:NCName), it is ignored. Formally, the candidate\n                            IDREF values are the strings in the sequence given by the\n                         expression:for $s in $arg return\n     fn:tokenize(fn:normalize-space($s), ' ')[. castable as xs:IDREF]If several elements have the same ID value, then E is\n                   the one that is first in document order.A dynamic error is raised  if\n                $node, or the context item if the second argument is absent, is a node\n                in a tree whose root is not a document node.The following errors may be raised when $node is omitted:If the context\n                item is absent, dynamic error\n                If the context item is not a\n                node, type error .\n", 
        "params" : [ "$arg" ]
      }, {
        "description" : " Returns the sequence of element nodes that have an ID value\n             matching the value of one or more of the IDREF values supplied in\n                $arg.The one-argument form of this function is deterministic, context-dependent,  and focus-dependent. The two-argument form of this function is deterministic, context-independent,  and focus-independent. The function returns a sequence, in document order with duplicates eliminated,\n             containing every element node E that satisfies all the following\n             conditions:\n                   E is in the target document. The target document is the document\n                   containing $node, or the document containing the context item\n                      (.) if the second argument is omitted. The behavior of the\n                   function if $node is omitted is exactly the same as if the context\n                   item had been passed as $node.E has an ID value equal to one of the candidate\n                      IDREF values, where: An element has an ID value equal to V if either\n                         or both of the following conditions are true:The is-id property (See .) of the element node is true, and the typed value\n                               of the element node is equal to V under the rules of the\n                                  eq operator using the Unicode codepoint collation\n                                  (http://www.w3.org/2005/xpath-functions/collation/codepoint).The element has an attribute node whose is-id property\n                               (See .) is true and whose typed\n                               value is equal to V under the rules of the\n                                  eq operator using the Unicode code point collation\n                                  (http://www.w3.org/2005/xpath-functions/collation/codepoint). Each xs:string in $arg is parsed as if it were of\n                         type IDREFS, that is, each xs:string in\n                            $arg is treated as a whitespace-separated sequence of\n                         tokens, each acting as an IDREF. These tokens are then included\n                         in the list of candidate IDREFs. If any of the tokens is not a\n                         lexically valid IDREF (that is, if it is not lexically an\n                            xs:NCName), it is ignored. Formally, the candidate\n                            IDREF values are the strings in the sequence given by the\n                         expression:for $s in $arg return\n     fn:tokenize(fn:normalize-space($s), ' ')[. castable as xs:IDREF]If several elements have the same ID value, then E is\n                   the one that is first in document order.A dynamic error is raised  if\n                $node, or the context item if the second argument is absent, is a node\n                in a tree whose root is not a document node.The following errors may be raised when $node is omitted:If the context\n                item is absent, dynamic error\n                If the context item is not a\n                node, type error .\n", 
        "params" : [ "$arg", "$node" ]
      } ], 
      "idref" : [ {
        "description" : " Returns the sequence of element or attribute nodes with an IDREF\n             value matching the value of one or more of the ID values supplied in\n                $arg.The one-argument form of this function is deterministic, context-dependent,  and focus-dependent. The two-argument form of this function is deterministic, context-independent,  and focus-independent.  The function returns a sequence, in document order with duplicates eliminated,\n             containing every element or attribute node $N that satisfies all the\n             following conditions:$N is in the target document. The target document is the document\n                   containing $node or the document containing the context item\n                      (.) if the second argument is omitted. The behavior of the\n                   function if $node is omitted is exactly the same as if the context\n                   item had been passed as $node.$N has an IDREF value equal to one of the candidate\n                      ID values, where:A node $N has an IDREF value equal to\n                            V if both of the following conditions are true:The is-idrefs property (see ) of $N is true.The sequence fn:tokenize(fn:normalize-space(fn:string($N)), ' ')\n                                contains a string that is\n                               equal to V under the rules of the eq\n                               operator using the Unicode code point collation\n                                  (http://www.w3.org/2005/xpath-functions/collation/codepoint).Each xs:string in $arg is parsed as if it were of\n                         lexically of type xs:ID. These xs:strings are then\n                         included in the list of candidate xs:IDs. If any of the strings\n                         in $arg is not a lexically valid xs:ID (that is,\n                         if it is not lexically an xs:NCName), it is ignored. More\n                         formally, the candidate ID values are the strings in the\n                         sequence:$arg[. castable as xs:NCName]A dynamic error is raised  if\n                $node, or the context item if the second argument is omitted, is a node\n                in a tree whose root is not a document node. The following errors may be raised when $node is omitted:If the context\n                item is absent, dynamic error\n                If the context item is not a\n                node, type error .\n", 
        "params" : [ "$arg" ]
      }, {
        "description" : " Returns the sequence of element or attribute nodes with an IDREF\n             value matching the value of one or more of the ID values supplied in\n                $arg.The one-argument form of this function is deterministic, context-dependent,  and focus-dependent. The two-argument form of this function is deterministic, context-independent,  and focus-independent.  The function returns a sequence, in document order with duplicates eliminated,\n             containing every element or attribute node $N that satisfies all the\n             following conditions:$N is in the target document. The target document is the document\n                   containing $node or the document containing the context item\n                      (.) if the second argument is omitted. The behavior of the\n                   function if $node is omitted is exactly the same as if the context\n                   item had been passed as $node.$N has an IDREF value equal to one of the candidate\n                      ID values, where:A node $N has an IDREF value equal to\n                            V if both of the following conditions are true:The is-idrefs property (see ) of $N is true.The sequence fn:tokenize(fn:normalize-space(fn:string($N)), ' ')\n                                contains a string that is\n                               equal to V under the rules of the eq\n                               operator using the Unicode code point collation\n                                  (http://www.w3.org/2005/xpath-functions/collation/codepoint).Each xs:string in $arg is parsed as if it were of\n                         lexically of type xs:ID. These xs:strings are then\n                         included in the list of candidate xs:IDs. If any of the strings\n                         in $arg is not a lexically valid xs:ID (that is,\n                         if it is not lexically an xs:NCName), it is ignored. More\n                         formally, the candidate ID values are the strings in the\n                         sequence:$arg[. castable as xs:NCName]A dynamic error is raised  if\n                $node, or the context item if the second argument is omitted, is a node\n                in a tree whose root is not a document node. The following errors may be raised when $node is omitted:If the context\n                item is absent, dynamic error\n                If the context item is not a\n                node, type error .\n", 
        "params" : [ "$arg", "$node" ]
      } ], 
      "in-scope-prefixes" : [ {
        "description" : " Returns the prefixes of the in-scope namespaces for an element node.This function is deterministic, context-independent,  and focus-independent. The function returns a sequence of strings representing the prefixes of the in-scope\n             namespaces for $element.For namespace bindings that have a prefix, the function returns the prefix as an\n                xs:NCName. For the default namespace, which has no prefix, it returns\n             the zero-length string. The result sequence contains no duplicates.The ordering of the result sequence is implementation-dependent.\n", 
        "params" : [ "$element" ]
      } ], 
      "index-of" : [ {
        "description" : " Returns a sequence of positive integers giving the positions within the\n             sequence $seq of items that are equal to $search.The two-argument form of this function is deterministic, context-dependent,  and focus-independent.  It depends on\n \t\tcollations, and implicit timezone.\n \tThe three-argument form of this function is deterministic, context-dependent,  and focus-independent.  It depends on\n \t\tcollations, and static base uri, and implicit timezone.\n \tThe function returns a sequence of positive integers giving the positions within the\n             sequence $seq of items that are equal to $search.The collation used by this function is determined according to the rules in . This collation is used when string comparison is\n             required.The items in the sequence $seq are compared with $search under\n             the rules for the eq operator. Values of type xs:untypedAtomic\n             are compared as if they were of type xs:string. Values that cannot be\n             compared, because the eq operator is not defined for their types, are\n             considered to be distinct. If an item compares equal, then the position of that item in\n             the sequence $seq is included in the result.The first item in a sequence is at position 1, not position 0.The result sequence is in ascending numeric order.If the value of $seq is the empty sequence, or if no item in\n                $seq matches $search, then the function returns the empty\n             sequence.No error occurs if non-comparable values are encountered. So when\n             comparing two atomic values, the effective boolean value of fn:index-of($a,\n                $b) is true if $a and $b are equal, false if they\n             are not equal or not comparable.\n", 
        "params" : [ "$seq", "$search" ]
      }, {
        "description" : " Returns a sequence of positive integers giving the positions within the\n             sequence $seq of items that are equal to $search.The two-argument form of this function is deterministic, context-dependent,  and focus-independent.  It depends on\n \t\tcollations, and implicit timezone.\n \tThe three-argument form of this function is deterministic, context-dependent,  and focus-independent.  It depends on\n \t\tcollations, and static base uri, and implicit timezone.\n \tThe function returns a sequence of positive integers giving the positions within the\n             sequence $seq of items that are equal to $search.The collation used by this function is determined according to the rules in . This collation is used when string comparison is\n             required.The items in the sequence $seq are compared with $search under\n             the rules for the eq operator. Values of type xs:untypedAtomic\n             are compared as if they were of type xs:string. Values that cannot be\n             compared, because the eq operator is not defined for their types, are\n             considered to be distinct. If an item compares equal, then the position of that item in\n             the sequence $seq is included in the result.The first item in a sequence is at position 1, not position 0.The result sequence is in ascending numeric order.If the value of $seq is the empty sequence, or if no item in\n                $seq matches $search, then the function returns the empty\n             sequence.No error occurs if non-comparable values are encountered. So when\n             comparing two atomic values, the effective boolean value of fn:index-of($a,\n                $b) is true if $a and $b are equal, false if they\n             are not equal or not comparable.\n", 
        "params" : [ "$seq", "$search", "$collation" ]
      } ], 
      "insert-before" : [ {
        "description" : " Returns a sequence constructed by inserting an item or a sequence of items at a\n             given position within an existing sequence.This function is deterministic, context-independent,  and focus-independent. The value returned by the function consists of all items of $target whose\n             index is less than $position, followed by all items of\n                $inserts, followed by the remaining elements of $target, in\n             that order. For detailed type semantics, see [Formal Semantics].If $target is the empty sequence, $inserts is returned. If\n                $inserts is the empty sequence, $target is returned.If $position is less than one (1), the first position, the effective value\n             of $position is one (1). If $position is greater than the\n             number of items in $target, then the effective value of\n                $position is equal to the number of items in $target plus\n             1. The value of $target is not affected by the sequence construction.\n", 
        "params" : [ "$target", "$position", "$inserts" ]
      } ], 
      "local-name-from-QName" : [ {
        "description" : " Returns the local part of the supplied QName.This function is deterministic, context-independent,  and focus-independent. If $arg is the empty sequence the function returns the empty sequence.Otherwise, the function returns an xs:NCName representing the local part of\n                $arg.The expression fn:local-name-from-QName(fn:QName(\"http://www.example.com/example\",\n                   \"person\")) returns \"person\".\n", 
        "params" : [ "$arg" ]
      } ], 
      "lower-case" : [ {
        "description" : " Converts a string to lower case.This function is deterministic, context-independent,  and focus-independent. If the value of $arg is the empty sequence, the zero-length string is\n             returned.Otherwise, the function returns the value of $arg after translating every\n                character to its lower-case correspondent as\n             defined in the appropriate case mappings section in the Unicode standard . For versions of Unicode beginning with the 2.1.8 update, only\n             locale-insensitive case mappings should be applied. Beginning with version 3.2.0 (and\n             likely future versions) of Unicode, precise mappings are described in default case\n             operations, which are full case mappings in the absence of tailoring for particular\n             languages and environments. Every upper-case character that does not have a lower-case\n             correspondent, as well as every lower-case character, is included in the returned value\n             in its original form. Case mappings may change the length of a string. In general, the\n                fn:upper-case and fn:lower-case functions are not inverses\n             of each other: fn:lower-case(fn:upper-case($arg)) is not guaranteed to\n             return $arg, nor is fn:upper-case(fn:lower-case($arg)). The\n             Latin small letter dotless i (as used in Turkish) is perhaps the most prominent\n             lower-case letter which will not round-trip. The Latin capital letter i with dot above\n             is the most prominent upper-case letter which will not round trip; there are others,\n             such as Latin capital letter Sharp S (#1E9E) which is introduced in Unicode 5.1. These functions may not always be linguistically appropriate (e.g. Turkish i without\n             dot) or appropriate for the application (e.g. titlecase). In cases such as Turkish, a\n             simple translation should be used first. Because the function is not sensitive to locale, results will not always match user\n             expectations. In Quebec, for example, the standard uppercase equivalent of \"è\" is \"È\",\n             while in metropolitan France it is more commonly \"E\"; only one of these is supported by\n             the functions as defined. Many characters of class Ll lack uppercase equivalents in the Unicode case mapping\n             tables; many characters of class Lu lack lowercase equivalents.\n", 
        "params" : [ "$arg" ]
      } ], 
      "for-each" : [ {
        "description" : " Applies the function item $f to every item from the sequence\n                $seq in turn, returning the concatenation of the resulting sequences in\n             order.This function is deterministic, context-independent,  and focus-independent. The effect of the function is equivalent to the following implementation in XQuery:\n declare function fn:for-each($seq, $f) {\n   if (fn:empty($seq))\n   then ()\n   else ($f(fn:head($seq)), fn:for-each(fn:tail($seq), $f))\n };or its equivalent in XSLT:\n &lt;xsl:function name=\"fn:for-each\"&gt;\n   &lt;xsl:param name=\"seq\"/&gt;\n   &lt;xsl:param name=\"f\"/&gt;\n   &lt;xsl:if test=\"fn:exists($seq)\"&gt;\n     &lt;xsl:sequence select=\"$f(fn:head($seq)), fn:for-each(fn:tail($seq), $f)\"/&gt;\n   &lt;/xsl:if&gt;\n &lt;/xsl:function&gt;\n          The function call fn:for-each($SEQ, $F) is equivalent to the expression\n                for $i in $SEQ return $F($i), assuming that\n                ordering mode is ordered.\n", 
        "params" : [ "$seq", "$f" ]
      } ], 
      "for-each-pair" : [ {
        "description" : " Applies the function item $f to successive pairs of items taken one\n             from $seq1 and one from $seq2, returning the concatenation of the\n             resulting sequences in order.This function is deterministic, context-independent,  and focus-independent. The effect of the function is equivalent to the following implementation in XQuery:\n declare function fn:for-each-pair($seq1, $seq2, $f)\n {\n    if(fn:exists($seq1) and fn:exists($seq2))\n    then (\n      $f(fn:head($seq1), fn:head($seq2)),\n      fn:for-each-pair(fn:tail($seq1), fn:tail($seq2), $f)\n    )\n    else ()\n };or its equivalent in XSLT:\n &lt;xsl:function name=\"fn:for-each-pair\"&gt;\n   &lt;xsl:param name=\"seq1/&gt;\n   &lt;xsl:param name=\"seq2/&gt;\n   &lt;xsl:param name=\"f\"/&gt;\n   &lt;xsl:if test=\"fn:exists($seq1) and fn:exists($seq2)\"&gt;\n     &lt;xsl:sequence select=\"$f(fn:head($seq1), fn:head($seq2))\"/&gt;\n     &lt;xsl:sequence select=\"fn:for-each-pair(fn:tail($seq1), fn:tail($seq2), $f)\"/&gt;\n   &lt;/xsl:if&gt;\n &lt;/xsl:function&gt;\n          The expression fn:for-each-pair((\"a\", \"b\", \"c\"), (\"x\", \"y\", \"z\"), concat#2) returns (\"ax\", \"by\", \"cz\").The expression fn:for-each-pair(1 to 5, 1 to 5, function($a, $b){10*$a + $b} returns (11, 22, 33, 44, 55).\n", 
        "params" : [ "$seq1", "$seq2", "$f" ]
      } ], 
      "matches" : [ {
        "description" : " Returns true if the supplied string matches a given regular expression.This function is deterministic, context-independent,  and focus-independent. The effect of calling the first version of this function (omitting the argument\n                $flags) is the same as the effect of calling the second version with the\n                $flags argument set to a zero-length string. Flags are defined in\n                .If $input is the empty sequence, it is interpreted as the zero-length\n             string.The function returns true if $input or some substring of\n                $input matches the regular expression supplied as $pattern.\n             Otherwise, the function returns false. The matching rules are influenced by\n             the value of $flags if present. A dynamic error is raised  if the value of\n                $pattern is invalid according to the rules described in . A dynamic error is raised  if the value of\n                $flags is invalid according to the rules described in . \n", 
        "params" : [ "$input", "$pattern" ]
      }, {
        "description" : " Returns true if the supplied string matches a given regular expression.This function is deterministic, context-independent,  and focus-independent. The effect of calling the first version of this function (omitting the argument\n                $flags) is the same as the effect of calling the second version with the\n                $flags argument set to a zero-length string. Flags are defined in\n                .If $input is the empty sequence, it is interpreted as the zero-length\n             string.The function returns true if $input or some substring of\n                $input matches the regular expression supplied as $pattern.\n             Otherwise, the function returns false. The matching rules are influenced by\n             the value of $flags if present. A dynamic error is raised  if the value of\n                $pattern is invalid according to the rules described in . A dynamic error is raised  if the value of\n                $flags is invalid according to the rules described in . \n", 
        "params" : [ "$input", "$pattern", "$flags" ]
      } ], 
      "max" : [ {
        "description" : " Returns a value that is equal to the highest value appearing in the input\n             sequence.The zero-argument form of this function is deterministic, context-dependent,  and focus-independent.  It depends on\n \t\tcollations, and implicit timezone.\n \tThe one-argument form of this function is deterministic, context-dependent,  and focus-independent.  It depends on\n \t\tcollations, and static base uri, and implicit timezone.\n \tThe following rules are applied to the input sequence $arg:Values of type xs:untypedAtomic in $arg are cast to\n                      xs:double.Numeric and xs:anyURI values are converted to\n                   the least common type reachable by a combination of type promotion and subtype\n                   substitution. See  and .The items in the resulting sequence may be reordered in an arbitrary order. The\n             resulting sequence is referred to below as the converted sequence. The function returns\n             an item from the converted sequence rather than the input sequence. If the converted sequence is empty, the function returns the empty sequence.All items in the converted sequence must be\n                derived from a single base type for which the le operator is\n             defined. In addition, the values in the sequence must have a total order. If date/time\n             values do not have a timezone, they are considered to have the implicit timezone\n             provided by the dynamic context for the purpose of comparison. Duration values must\n             either all be xs:yearMonthDuration values or must all be\n                xs:dayTimeDuration values.If the converted sequence contains the value NaN, the value\n                NaN is returned.If the items in the converted sequence are of\n             type xs:string or types derived by restriction from xs:string,\n             then the determination of the item with the smallest value is made according to the\n             collation that is used. If the type of the items in the converted sequence is not xs:string and\n                $collation is specified, the collation is ignored.The collation used by this function is determined according to the rules in .The function returns the result of the expression:\n    if (every $v in $c satisfies $c[1] ge $v)\n    then $c[1]\n    else fn:max(fn:subsequence($c, 2))evaluated with $collation as the default collation if specified, and with\n                $c as the converted sequence.For detailed type semantics, see [Formal Semantics].A type error is raised  if the input sequence contains\n             items of incompatible types, as described above.\n", 
        "params" : [ "$arg" ]
      }, {
        "description" : " Returns a value that is equal to the highest value appearing in the input\n             sequence.The zero-argument form of this function is deterministic, context-dependent,  and focus-independent.  It depends on\n \t\tcollations, and implicit timezone.\n \tThe one-argument form of this function is deterministic, context-dependent,  and focus-independent.  It depends on\n \t\tcollations, and static base uri, and implicit timezone.\n \tThe following rules are applied to the input sequence $arg:Values of type xs:untypedAtomic in $arg are cast to\n                      xs:double.Numeric and xs:anyURI values are converted to\n                   the least common type reachable by a combination of type promotion and subtype\n                   substitution. See  and .The items in the resulting sequence may be reordered in an arbitrary order. The\n             resulting sequence is referred to below as the converted sequence. The function returns\n             an item from the converted sequence rather than the input sequence. If the converted sequence is empty, the function returns the empty sequence.All items in the converted sequence must be\n                derived from a single base type for which the le operator is\n             defined. In addition, the values in the sequence must have a total order. If date/time\n             values do not have a timezone, they are considered to have the implicit timezone\n             provided by the dynamic context for the purpose of comparison. Duration values must\n             either all be xs:yearMonthDuration values or must all be\n                xs:dayTimeDuration values.If the converted sequence contains the value NaN, the value\n                NaN is returned.If the items in the converted sequence are of\n             type xs:string or types derived by restriction from xs:string,\n             then the determination of the item with the smallest value is made according to the\n             collation that is used. If the type of the items in the converted sequence is not xs:string and\n                $collation is specified, the collation is ignored.The collation used by this function is determined according to the rules in .The function returns the result of the expression:\n    if (every $v in $c satisfies $c[1] ge $v)\n    then $c[1]\n    else fn:max(fn:subsequence($c, 2))evaluated with $collation as the default collation if specified, and with\n                $c as the converted sequence.For detailed type semantics, see [Formal Semantics].A type error is raised  if the input sequence contains\n             items of incompatible types, as described above.\n", 
        "params" : [ "$arg", "$collation" ]
      } ], 
      "min" : [ {
        "description" : " Returns a value that is equal to the lowest value appearing in the input\n             sequence.The zero-argument form of this function is deterministic, context-dependent,  and focus-independent.  It depends on\n \t\tcollations, and implicit timezone.\n \tThe one-argument form of this function is deterministic, context-dependent,  and focus-independent.  It depends on\n \t\tcollations, and static base uri, and implicit timezone.\n \tThe following rules are applied to the input sequence:Values of type xs:untypedAtomic in $arg are cast to\n                      xs:double.Numeric and xs:anyURI values are converted to\n                   the least common type reachable by a combination of type promotion and subtype\n                   substitution. See  and .The items in the resulting sequence may be reordered in an arbitrary order. The\n             resulting sequence is referred to below as the converted sequence. The function returns\n             an item from the converted sequence rather than the input sequence. If the converted sequence is empty, the empty sequence is returned.All items in the converted sequence must be\n                derived from a single base type for which the le operator is\n             defined. In addition, the values in the sequence must have a total order. If date/time\n             values do not have a timezone, they are considered to have the implicit timezone\n             provided by the dynamic context for the purpose of comparison. Duration values must\n             either all be xs:yearMonthDuration values or must all be\n                xs:dayTimeDuration values.If the converted sequence contains the value NaN, the value\n                NaN is returned.If the items in the converted sequence are of\n             type xs:string or types derived by restriction from xs:string,\n             then the determination of the item with the smallest value is made according to the\n             collation that is used. If the type of the items in the converted sequence is not xs:string and\n                $collation is specified, the collation is ignored.The collation used by this function is determined according to the rules in .The function returns the result of the expression:\n    if (every $v in $c satisfies $c[1] le $v)\n    then $c[1]\n    else fn:min(fn:subsequence($c, 2))evaluated with $collation as the default collation if specified, and with\n                $c as the converted sequence.For detailed type semantics, see [Formal Semantics].A type error is raised  if the input sequence contains\n             items of incompatible types, as described above.\n", 
        "params" : [ "$arg" ]
      }, {
        "description" : " Returns a value that is equal to the lowest value appearing in the input\n             sequence.The zero-argument form of this function is deterministic, context-dependent,  and focus-independent.  It depends on\n \t\tcollations, and implicit timezone.\n \tThe one-argument form of this function is deterministic, context-dependent,  and focus-independent.  It depends on\n \t\tcollations, and static base uri, and implicit timezone.\n \tThe following rules are applied to the input sequence:Values of type xs:untypedAtomic in $arg are cast to\n                      xs:double.Numeric and xs:anyURI values are converted to\n                   the least common type reachable by a combination of type promotion and subtype\n                   substitution. See  and .The items in the resulting sequence may be reordered in an arbitrary order. The\n             resulting sequence is referred to below as the converted sequence. The function returns\n             an item from the converted sequence rather than the input sequence. If the converted sequence is empty, the empty sequence is returned.All items in the converted sequence must be\n                derived from a single base type for which the le operator is\n             defined. In addition, the values in the sequence must have a total order. If date/time\n             values do not have a timezone, they are considered to have the implicit timezone\n             provided by the dynamic context for the purpose of comparison. Duration values must\n             either all be xs:yearMonthDuration values or must all be\n                xs:dayTimeDuration values.If the converted sequence contains the value NaN, the value\n                NaN is returned.If the items in the converted sequence are of\n             type xs:string or types derived by restriction from xs:string,\n             then the determination of the item with the smallest value is made according to the\n             collation that is used. If the type of the items in the converted sequence is not xs:string and\n                $collation is specified, the collation is ignored.The collation used by this function is determined according to the rules in .The function returns the result of the expression:\n    if (every $v in $c satisfies $c[1] le $v)\n    then $c[1]\n    else fn:min(fn:subsequence($c, 2))evaluated with $collation as the default collation if specified, and with\n                $c as the converted sequence.For detailed type semantics, see [Formal Semantics].A type error is raised  if the input sequence contains\n             items of incompatible types, as described above.\n", 
        "params" : [ "$arg", "$collation" ]
      } ], 
      "minutes-from-dateTime" : [ {
        "description" : " Returns the minute component of an xs:dateTime.This function is deterministic, context-independent,  and focus-independent. If $arg is the empty sequence, the function returns the empty sequence.Otherwise, the function returns an xs:integer value between 0 and 59, both\n             inclusive, representing the minute component in the local value of\n             $arg.The expression fn:minutes-from-dateTime(xs:dateTime(\"1999-05-31T13:20:00-05:00\")) returns 20.The expression fn:minutes-from-dateTime(xs:dateTime(\"1999-05-31T13:30:00+05:30\")) returns 30.\n", 
        "params" : [ "$arg" ]
      } ], 
      "minutes-from-duration" : [ {
        "description" : " Returns the number of minutes in a duration.This function is deterministic, context-independent,  and focus-independent. If $arg is the empty sequence, the function returns the empty sequence.Otherwise, the function returns an xs:integer representing the minutes\n             component in the value of $arg. The result is obtained by casting\n                $arg to an xs:dayTimeDuration (see ) and then computing the minutes component as described\n             in .If $arg is a negative duration then the result will be negative..If $arg is an xs:yearMonthDuration the function returns 0.The expression fn:minutes-from-duration(xs:dayTimeDuration(\"P3DT10H\")) returns 0.The expression fn:minutes-from-duration(xs:dayTimeDuration(\"-P5DT12H30M\")) returns -30.\n", 
        "params" : [ "$arg" ]
      } ], 
      "minutes-from-time" : [ {
        "description" : " Returns the minutes component of an xs:time.This function is deterministic, context-independent,  and focus-independent. If $arg is the empty sequence, the function returns the empty sequence.Otherwise, the function returns an xs:integer value between 0 and 59, both\n             inclusive, representing the value of the minutes component in the local value of\n                $arg.The expression fn:minutes-from-time(xs:time(\"13:00:00Z\")) returns 0.\n", 
        "params" : [ "$arg" ]
      } ], 
      "month-from-date" : [ {
        "description" : " Returns the month component of an xs:date.This function is deterministic, context-independent,  and focus-independent. If $arg is the empty sequence, the function returns the empty sequence.Otherwise, the function returns an xs:integer between 1 and 12, both\n             inclusive, representing the month component in the local value of $arg.\n          The expression fn:month-from-date(xs:date(\"1999-05-31-05:00\")) returns 5.The expression fn:month-from-date(xs:date(\"2000-01-01+05:00\")) returns 1.\n", 
        "params" : [ "$arg" ]
      } ], 
      "months-from-duration" : [ {
        "description" : " Returns the number of months in a duration.This function is deterministic, context-independent,  and focus-independent. If $arg is the empty sequence, the function returns the empty sequence.Otherwise, the function returns an xs:integer representing the months\n             component in the value of $arg. The result is obtained by casting\n                $arg to an xs:yearMonthDuration (see ) and then computing the months component as described in\n                .If $arg is a negative duration then the result will be negative..If $arg is an xs:dayTimeDuration the function returns 0.The expression fn:months-from-duration(xs:yearMonthDuration(\"P20Y15M\")) returns 3.The expression fn:months-from-duration(xs:yearMonthDuration(\"-P20Y18M\")) returns -6.The expression fn:months-from-duration(xs:dayTimeDuration(\"-P2DT15H0M0S\")) returns 0.\n", 
        "params" : [ "$arg" ]
      } ], 
      "namespace-uri-for-prefix" : [ {
        "description" : " Returns the namespace URI of one of the in-scope namespaces for\n                $element, identified by its namespace prefix.This function is deterministic, context-independent,  and focus-independent. If $element has an in-scope namespace whose namespace prefix is equal to\n                $prefix, the function returns the namespace URI of that namespace.If $element has no in-scope namespace whose namespace prefix is equal to\n             $prefix, the function returns the empty sequence.If $prefix is the zero-length string or the empty\n             sequence, then if $element has a default namespace (that is, a namespace\n             node with no name), the function returns the namespace URI of the default namespace. If\n                $element has no default namespace, the function returns the empty\n             sequence.Prefixes are equal only if their Unicode codepoints match exactly.let $e := \n &lt;z:a xmlns=\"http://example.org/one\" xmlns:z=\"http://example.org/two\"&gt;\n   &lt;b xmlns=\"\"/&gt;\n &lt;/z:a&gt;The expression fn:namespace-uri-for-prefix(\"z\", $e) returns \"http://example.org/two\".The expression fn:namespace-uri-for-prefix(\"\", $e) returns \"http://example.org/one\".The expression fn:namespace-uri-for-prefix((), $e) returns \"http://example.org/one\".The expression fn:namespace-uri-for-prefix(\"xml\", $e) returns \"http://www.w3.org/XML/1998/namespace\".The expression fn:namespace-uri-for-prefix(\"xml\", $e) returns \"http://www.w3.org/XML/1998/namespace\".\n", 
        "params" : [ "$prefix", "$element" ]
      } ], 
      "namespace-uri-from-QName" : [ {
        "description" : " Returns the namespace URI part of the supplied QName.This function is deterministic, context-independent,  and focus-independent. If $arg is the empty sequence the function returns the empty sequence.Otherwise, the function returns an xs:anyURI representing the namespace URI\n             part of $arg.If $arg is in no namespace, the function returns the zero-length\n                xs:anyURI.The expression fn:namespace-uri-from-QName(fn:QName(\"http://www.example.com/example\",\n                   \"person\")) returns xs:anyURI(\"http://www.example.com/example\").\n", 
        "params" : [ "$arg" ]
      } ], 
      "normalize-space" : [ {
        "description" : " Returns the value of $arg with leading and trailing whitespace\n             removed, and sequences of internal whitespace reduced to a single space character.The zero-argument form of this function is deterministic, context-dependent,  and focus-dependent. The one-argument form of this function is deterministic, context-independent,  and focus-independent. If the value of $arg is the empty sequence, the function returns the\n             zero-length string.The function returns a string constructed by stripping leading and trailing whitespace\n             from the value of $arg, and replacing sequences of one or more adjacent\n             whitespace characters with a single space, #x20.The whitespace characters are defined in the metasymbol S (Production 3) of .If no argument is supplied, then $arg defaults to the\n             string value (calculated using fn:string) of the context item\n                (.). If no argument is supplied and the context item is absent then a dynamic error is raised: .\n", 
        "params" : [  ]
      }, {
        "description" : " Returns the value of $arg with leading and trailing whitespace\n             removed, and sequences of internal whitespace reduced to a single space character.The zero-argument form of this function is deterministic, context-dependent,  and focus-dependent. The one-argument form of this function is deterministic, context-independent,  and focus-independent. If the value of $arg is the empty sequence, the function returns the\n             zero-length string.The function returns a string constructed by stripping leading and trailing whitespace\n             from the value of $arg, and replacing sequences of one or more adjacent\n             whitespace characters with a single space, #x20.The whitespace characters are defined in the metasymbol S (Production 3) of .If no argument is supplied, then $arg defaults to the\n             string value (calculated using fn:string) of the context item\n                (.). If no argument is supplied and the context item is absent then a dynamic error is raised: .\n", 
        "params" : [ "$arg" ]
      } ], 
      "normalize-unicode" : [ {
        "description" : " Returns the value of $arg after applying Unicode\n             normalization.This function is deterministic, context-independent,  and focus-independent. If the value of $arg is the empty sequence, the function returns the\n             zero-length string.If the single-argument version of the function is used, the result is the same as\n             calling the two-argument version with $normalizationForm set to the string\n             \"NFC\".Otherwise, the function returns the value of $arg normalized according to\n             the rules of the normalization form identified by the value of\n                $normalizationForm.The effective value of $normalizationForm is the value of the expression\n                fn:upper-case(fn:normalize-space($normalizationForm)).See  for a description of the\n             normalization forms.If the effective value of $normalizationForm is NFC,\n                   then the function returns the value of $arg converted to Unicode\n                   Normalization Form C (NFC).If the effective value of $normalizationForm is NFD,\n                   then the function returns the value of $arg converted to Unicode\n                   Normalization Form D (NFD).If the effective value of $normalizationForm is NFKC,\n                   then the function returns the value of $arg in Unicode Normalization\n                   Form KC (NFKC).If the effective value of $normalizationForm is NFKD,\n                   then the function returns the value of $arg converted to Unicode\n                   Normalization Form KD (NFKD).If the effective value of $normalizationForm is\n                      FULLY-NORMALIZED, then the function returns the value of\n                      $arg converted to fully normalized form. If the effective value of $normalizationForm is the zero-length\n                   string, no normalization is performed and $arg is returned.Normalization forms NFC, NFD, NFKC, and NFKD, and the algorithms to be\n             used for converting a string to each of these forms, are defined in .The motivation for normalization form FULLY-NORMALIZED is explained in\n                . However, as that specification did not\n             progress beyond working draft status, the normative specification is as follows:A string is fully-normalized if (a) it is in normalization form NFC\n                   as defined in , and (b) it does not start\n                   with a composing character.A composing character is a character that is one or both of the following:the second character in the canonical decomposition mapping of some\n                         character that is not listed in the Composition Exclusion Table defined in\n                            ;of non-zero canonical combining class (as defined in ).A string is converted to FULLY-NORMALIZED form as follows:if the first character in the string is a composing character, prepend a\n                         single space (x20);convert the resulting string to normalization form NFC.Conforming implementations must support normalization form \"NFC\" and\n                may support normalization forms \"NFD\", \"NFKC\", \"NFKD\", and\n             \"FULLY-NORMALIZED\". They may also support other normalization forms\n             with implementation-defined semantics. It is implementation-defined which version of\n             Unicode (and therefore, of the normalization algorithms and their underlying\n             data) is supported by the implementation. See  for details of the\n             stability policy regarding changes to the normalization rules in future\n             versions of Unicode. If the input string contains codepoints that are\n             unassigned in the relevant version of Unicode, or for which no normalization\n             rules are defined, the fn:normalize-unicode function leaves such codepoints\n             unchanged. If the implementation supports the requested normalization form then\n             it must be able to handle every input string without raising an error.A dynamic error is raised  if the effective value of the\n                $normalizationForm argument is not one of the values supported by the\n             implementation.\n", 
        "params" : [ "$arg" ]
      }, {
        "description" : " Returns the value of $arg after applying Unicode\n             normalization.This function is deterministic, context-independent,  and focus-independent. If the value of $arg is the empty sequence, the function returns the\n             zero-length string.If the single-argument version of the function is used, the result is the same as\n             calling the two-argument version with $normalizationForm set to the string\n             \"NFC\".Otherwise, the function returns the value of $arg normalized according to\n             the rules of the normalization form identified by the value of\n                $normalizationForm.The effective value of $normalizationForm is the value of the expression\n                fn:upper-case(fn:normalize-space($normalizationForm)).See  for a description of the\n             normalization forms.If the effective value of $normalizationForm is NFC,\n                   then the function returns the value of $arg converted to Unicode\n                   Normalization Form C (NFC).If the effective value of $normalizationForm is NFD,\n                   then the function returns the value of $arg converted to Unicode\n                   Normalization Form D (NFD).If the effective value of $normalizationForm is NFKC,\n                   then the function returns the value of $arg in Unicode Normalization\n                   Form KC (NFKC).If the effective value of $normalizationForm is NFKD,\n                   then the function returns the value of $arg converted to Unicode\n                   Normalization Form KD (NFKD).If the effective value of $normalizationForm is\n                      FULLY-NORMALIZED, then the function returns the value of\n                      $arg converted to fully normalized form. If the effective value of $normalizationForm is the zero-length\n                   string, no normalization is performed and $arg is returned.Normalization forms NFC, NFD, NFKC, and NFKD, and the algorithms to be\n             used for converting a string to each of these forms, are defined in .The motivation for normalization form FULLY-NORMALIZED is explained in\n                . However, as that specification did not\n             progress beyond working draft status, the normative specification is as follows:A string is fully-normalized if (a) it is in normalization form NFC\n                   as defined in , and (b) it does not start\n                   with a composing character.A composing character is a character that is one or both of the following:the second character in the canonical decomposition mapping of some\n                         character that is not listed in the Composition Exclusion Table defined in\n                            ;of non-zero canonical combining class (as defined in ).A string is converted to FULLY-NORMALIZED form as follows:if the first character in the string is a composing character, prepend a\n                         single space (x20);convert the resulting string to normalization form NFC.Conforming implementations must support normalization form \"NFC\" and\n                may support normalization forms \"NFD\", \"NFKC\", \"NFKD\", and\n             \"FULLY-NORMALIZED\". They may also support other normalization forms\n             with implementation-defined semantics. It is implementation-defined which version of\n             Unicode (and therefore, of the normalization algorithms and their underlying\n             data) is supported by the implementation. See  for details of the\n             stability policy regarding changes to the normalization rules in future\n             versions of Unicode. If the input string contains codepoints that are\n             unassigned in the relevant version of Unicode, or for which no normalization\n             rules are defined, the fn:normalize-unicode function leaves such codepoints\n             unchanged. If the implementation supports the requested normalization form then\n             it must be able to handle every input string without raising an error.A dynamic error is raised  if the effective value of the\n                $normalizationForm argument is not one of the values supported by the\n             implementation.\n", 
        "params" : [ "$arg", "$normalizationForm" ]
      } ], 
      "not" : [ {
        "description" : " Returns true if the effective boolean value of $arg\n             is false, or false if it is true.This function is deterministic, context-independent,  and focus-independent. The value of $arg is first reduced to an effective boolean value by\n             applying the fn:boolean() function. The function returns true\n             if the effective boolean value is false, or false if the\n             effective boolean value is true. The expression fn:not(fn:true()) returns false().The expression fn:not(\"false\") returns false().\n", 
        "params" : [ "$arg" ]
      } ], 
      "one-or-more" : [ {
        "description" : " Returns $arg if it contains one or more items. Otherwise, raises\n             an error. This function is deterministic, context-independent,  and focus-independent. Except in error cases, the function returns $arg unchanged.For detailed type semantics, see [Formal Semantics].A dynamic error is raised  if $arg is an empty\n             sequence.\n", 
        "params" : [ "$arg" ]
      } ], 
      "parse-xml" : [ {
        "description" : " This function takes as input an XML document represented as a string, and\n             returns the document node at the root of an XDM tree representing the parsed\n             document.This function is nondeterministic, context-dependent,  and focus-independent.  It depends on\n \t\tstatic base uri.\n \tIf $arg is the empty sequence, the function returns the\n             empty sequence.The precise process used to construct the XDM instance is . In\n             particular, it is implementation-defined whether DTD and/or schema validation is invoked, and it is\n             implementation-defined whether an XML 1.0 or XML 1.1 parser is used.The Static Base URI property from the static context of the\n             fn:parse-xml function call is used both as the base URI used by the XML parser to resolve\n             relative entity references within the document, and as the base URI of the document node\n             that is returned.The document URI of the returned node is absent.The function is not\n             deterministic: that is, if the function is called\n             twice with the same arguments, it is implementation-dependent whether the same node is returned on both\n             occasions.A dynamic error is raised  if the content of\n                $arg is not a well-formed and namespace-well-formed XML document.A dynamic error is raised  if DTD-based\n             validation is carried out and the content of $arg is not valid against its\n             DTD.\n", 
        "params" : [ "$arg" ]
      }, {
        "description" : " This function takes as input an XML document represented as a string, and\n             returns the document node at the root of an XDM tree representing the parsed\n             document.This function is nondeterministic, context-dependent,  and focus-independent.  It depends on\n \t\tstatic base uri.\n \tIf $arg is the empty sequence, the function returns the\n             empty sequence.The precise process used to construct the XDM instance is . In\n             particular, it is implementation-defined whether DTD and/or schema validation is invoked, and it is\n             implementation-defined whether an XML 1.0 or XML 1.1 parser is used.The Static Base URI property from the static context of the\n             fn:parse-xml function call is used both as the base URI used by the XML parser to resolve\n             relative entity references within the document, and as the base URI of the document node\n             that is returned.The document URI of the returned node is absent.The function is not\n             deterministic: that is, if the function is called\n             twice with the same arguments, it is implementation-dependent whether the same node is returned on both\n             occasions.A dynamic error is raised  if the content of\n                $arg is not a well-formed and namespace-well-formed XML document.A dynamic error is raised  if DTD-based\n             validation is carried out and the content of $arg is not valid against its\n             DTD.\n", 
        "params" : [ "$arg", "$baseURI" ]
      } ], 
      "parse-xml-fragment" : [ {
        "description" : " This function takes as input an XML external entity represented as a string,\n             and returns the document node at the root of an XDM tree representing the parsed\n             document fragment.This function is nondeterministic, context-dependent,  and focus-independent.  It depends on\n \t\tstatic base uri.\n \tIf $arg is the empty sequence, the function returns the empty sequence.The input must be a namespace-well-formed external general parsed entity. More specifically,\n             it must be a string conforming to the production rule extParsedEnt in , it must contain no entity references other\n             than references to predefined entities,\n             and it must satisfy all the rules\n             of  for namespace-well-formed documents with the exception\n             that the rule requiring it to be a well-formed document is replaced by the rule requiring\n             it to be a well-formed external general parsed entity.The string is parsed to form a sequence of nodes which\n             become children of the new document node, in the same way as the content of any element\n             is converted into a sequence of children for the resulting element node.Schema validation is not invoked, which means that the nodes in the\n             returned document will all be untyped.The precise process used to construct the XDM instance is . In\n             particular, it is implementation-defined whether an XML 1.0 or XML 1.1 parser is\n             used.The Static Base URI from the static context of the fn:parse-xml-fragment function call\n             is used as the base URI of the document node\n             that is returned.The document URI of the returned node is absent.The function is not\n             deterministic: that is, if the function is called\n             twice with the same arguments, it is implementation-dependent whether the same node is returned on both\n                occasions.A dynamic error is raised  if the content of\n                $arg is not a well-formed external general parsed entity,\n             if it contains entity references other than references to predefined entities, or if a document that\n             incorporates this well-formed parsed entity would not be namespace-well-formed.\n", 
        "params" : [ "$arg" ]
      } ], 
      "prefix-from-QName" : [ {
        "description" : " Returns the prefix component of the supplied QName.This function is deterministic, context-independent,  and focus-independent. If $arg is the empty sequence the function returns the empty sequence.If $arg has no prefix component the function returns the empty\n             sequence.Otherwise, the function returns an xs:NCName representing the prefix\n             component of $arg.\n", 
        "params" : [ "$arg" ]
      } ], 
      "remove" : [ {
        "description" : " Returns a new sequence containing all the items of $target except\n             the item at position $position.This function is deterministic, context-independent,  and focus-independent. The function returns a sequence consisting of all items of $target whose\n             index is less than $position, followed by all items of $target\n             whose index is greater than $position. For detailed type semantics, see [Formal Semantics].If $position is less than 1 or greater than the number of items in\n                $target, $target is returned.If $target is the empty sequence, the empty sequence is returned.\n", 
        "params" : [ "$target", "$position" ]
      } ], 
      "replace" : [ {
        "description" : " Returns a string produced from the input string by replacing any substrings\n             that match a given regular expression with a supplied replacement string.This function is deterministic, context-independent,  and focus-independent. The effect of calling the first version of this function (omitting the argument\n                $flags) is the same as the effect of calling the second version with the\n                $flags argument set to a zero-length string. Flags are defined in\n                .The $flags argument is interpreted in the same manner as for the\n                fn:matches function. If $input is the empty sequence, it is interpreted as the zero-length\n             string.The function returns the xs:string that is obtained by replacing each\n             non-overlapping substring of $input that matches the given\n                $pattern with an occurrence of the $replacement string.If two overlapping substrings of $input both match the\n                $pattern, then only the first one (that is, the one whose first character comes first in the $input string) is\n             replaced.If the q flag is present, the replacement string is used\n                as is.Otherwise, within the $replacement\n             string, a variable $N may be used to refer to the substring captured by the\n             Nth parenthesized sub-expression in the regular expression. For each match of the\n             pattern, these variables are assigned the value of the content matched by the relevant\n             sub-expression, and the modified replacement string is then substituted for the characters in $input that matched the pattern.\n                $0 refers to the substring captured by the regular expression as a\n             whole.More specifically, the rules are as follows, where S is the number of\n             parenthesized sub-expressions in the regular expression, and N is the\n             decimal number formed by taking all the digits that consecutively follow the\n                $ character:If N=0, then the variable is replaced by the substring\n                   matched by the regular expression as a whole.If 1&lt;=N&lt;=S, then the variable is\n                   replaced by the substring captured by the Nth parenthesized sub-expression. If the\n                      Nth parenthesized sub-expression was not matched, then the\n                   variable is replaced by the zero-length string.If S&lt;N&lt;=9, then the variable is\n                   replaced by the zero-length string.Otherwise (if N&gt;S and\n                      N&gt;9), the last digit of N is taken to\n                   be a literal character to be included \"as is\" in the replacement string, and the\n                   rules are reapplied using the number N formed by stripping off this\n                   last digit.For example, if the replacement string is \n                $23\n              and there are 5 substrings, the result contains the value of the substring that\n             matches the second sub-expression, followed by the digit \n                3\n             .Unless the q flag is used, a literal $\n             character within the replacement string must be written as \\$, and a\n             literal \\ character must be written as \\\\. If two alternatives within the pattern both match at the same position in the\n                $input, then the match that is chosen is the one matched by the first\n             alternative. For example: fn:replace(\"abcd\", \"(ab)|(a)\", \"[1=$1][2=$2]\") returns \"[1=ab][2=]cd\"A dynamic error is raised  if the value of\n                $pattern is invalid according to the rules described in section . A dynamic error is raised  if the value of\n                $flags is invalid according to the rules described in section . A dynamic error is raised  if the pattern matches a\n             zero-length string, that is, if the expression fn:matches(\"\", $pattern,\n                $flags) returns true. It is not an error, however, if a captured\n             substring is zero-length.A dynamic error is raised  if the value of\n                $replacement contains a \"$\" character that is not\n             immediately followed by a digit 0-9 and not immediately preceded by a\n             \"\\\".A dynamic error is raised  if the value of\n                $replacement contains a \"\\\" character that is not part of a\n                \"\\\\\" pair, unless it is immediately followed by a \"$\"\n             character.\n", 
        "params" : [ "$input", "$pattern", "$replacement" ]
      }, {
        "description" : " Returns a string produced from the input string by replacing any substrings\n             that match a given regular expression with a supplied replacement string.This function is deterministic, context-independent,  and focus-independent. The effect of calling the first version of this function (omitting the argument\n                $flags) is the same as the effect of calling the second version with the\n                $flags argument set to a zero-length string. Flags are defined in\n                .The $flags argument is interpreted in the same manner as for the\n                fn:matches function. If $input is the empty sequence, it is interpreted as the zero-length\n             string.The function returns the xs:string that is obtained by replacing each\n             non-overlapping substring of $input that matches the given\n                $pattern with an occurrence of the $replacement string.If two overlapping substrings of $input both match the\n                $pattern, then only the first one (that is, the one whose first character comes first in the $input string) is\n             replaced.If the q flag is present, the replacement string is used\n                as is.Otherwise, within the $replacement\n             string, a variable $N may be used to refer to the substring captured by the\n             Nth parenthesized sub-expression in the regular expression. For each match of the\n             pattern, these variables are assigned the value of the content matched by the relevant\n             sub-expression, and the modified replacement string is then substituted for the characters in $input that matched the pattern.\n                $0 refers to the substring captured by the regular expression as a\n             whole.More specifically, the rules are as follows, where S is the number of\n             parenthesized sub-expressions in the regular expression, and N is the\n             decimal number formed by taking all the digits that consecutively follow the\n                $ character:If N=0, then the variable is replaced by the substring\n                   matched by the regular expression as a whole.If 1&lt;=N&lt;=S, then the variable is\n                   replaced by the substring captured by the Nth parenthesized sub-expression. If the\n                      Nth parenthesized sub-expression was not matched, then the\n                   variable is replaced by the zero-length string.If S&lt;N&lt;=9, then the variable is\n                   replaced by the zero-length string.Otherwise (if N&gt;S and\n                      N&gt;9), the last digit of N is taken to\n                   be a literal character to be included \"as is\" in the replacement string, and the\n                   rules are reapplied using the number N formed by stripping off this\n                   last digit.For example, if the replacement string is \n                $23\n              and there are 5 substrings, the result contains the value of the substring that\n             matches the second sub-expression, followed by the digit \n                3\n             .Unless the q flag is used, a literal $\n             character within the replacement string must be written as \\$, and a\n             literal \\ character must be written as \\\\. If two alternatives within the pattern both match at the same position in the\n                $input, then the match that is chosen is the one matched by the first\n             alternative. For example: fn:replace(\"abcd\", \"(ab)|(a)\", \"[1=$1][2=$2]\") returns \"[1=ab][2=]cd\"A dynamic error is raised  if the value of\n                $pattern is invalid according to the rules described in section . A dynamic error is raised  if the value of\n                $flags is invalid according to the rules described in section . A dynamic error is raised  if the pattern matches a\n             zero-length string, that is, if the expression fn:matches(\"\", $pattern,\n                $flags) returns true. It is not an error, however, if a captured\n             substring is zero-length.A dynamic error is raised  if the value of\n                $replacement contains a \"$\" character that is not\n             immediately followed by a digit 0-9 and not immediately preceded by a\n             \"\\\".A dynamic error is raised  if the value of\n                $replacement contains a \"\\\" character that is not part of a\n                \"\\\\\" pair, unless it is immediately followed by a \"$\"\n             character.\n", 
        "params" : [ "$input", "$pattern", "$replacement", "$flags" ]
      } ], 
      "resolve-QName" : [ {
        "description" : " Returns an xs:QName value (that is, an expanded-QName) by taking\n             an xs:string that has the lexical form of an xs:QName (a\n             string in the form \"prefix:local-name\" or \"local-name\") and resolving it using the\n             in-scope namespaces for a given element.This function is deterministic, context-independent,  and focus-independent. If $qname is the empty sequence, returns the empty sequence.More specifically, the function searches the namespace bindings of $element\n             for a binding whose name matches the prefix of $qname, or the zero-length\n             string if it has no prefix, and constructs an expanded-QName whose local name is taken\n             from the supplied $qname, and whose namespace URI is taken from the string\n             value of the namespace binding.If the $qname has no prefix, and there is no namespace binding for\n                $element corresponding to the default (unnamed) namespace, then the\n             resulting expanded-QName has no namespace part.The prefix (or absence of a prefix) in the supplied $qname argument is\n             retained in the returned expanded-QName, as discussed in .A dynamic error is raised  if $qname does not\n             have the correct lexical form for an instance of xs:QName.A dynamic error is raised  if $qname has a\n             prefix and there is no namespace binding for $element that matches this\n             prefix.\n", 
        "params" : [ "$qname", "$element" ]
      } ], 
      "reverse" : [ {
        "description" : " Reverses the order of items in a sequence. This function is deterministic, context-independent,  and focus-independent. The function returns a sequence containing the items in $arg in reverse\n             order.For detailed type semantics, see [Formal Semantics].If $arg is the empty sequence, the empty sequence is returned. \n", 
        "params" : [ "$arg" ]
      } ], 
      "round" : [ {
        "description" : " Rounds a value to a specified number of decimal places, rounding upwards if two\n             such values are equally near.This function is deterministic, context-independent,  and focus-independent. General rules: see .The function returns the nearest (that is, numerically closest) value to\n                $arg that is a multiple of ten to the power of minus\n                $precision. If two such values are equally near (for example, if the\n             fractional part in $arg is exactly .5), the function returns the one that\n             is closest to positive infinity.If the type of $arg is one of the four numeric types xs:float,\n                xs:double, xs:decimal or xs:integer the type\n             of the result is the same as the type of $arg. If the type of\n                $arg is a type derived from one of the numeric types, the result is an\n             instance of the base numeric type.The single-argument version of this function produces the same result as the\n             two-argument version with $precision=0 (that is, it rounds to a whole\n             number).When $arg is of type xs:float and xs:double:If $arg is NaN, positive or negative zero, or positive or negative\n                   infinity, then the result is the same as the argument.For other values, the argument is cast to xs:decimal using an\n                   implementation of xs:decimal that imposes no limits on the number of\n                   digits that can be represented. The function is applied to this\n                      xs:decimal value, and the resulting xs:decimal is\n                   cast back to xs:float or xs:double as appropriate to\n                   form the function result. If the resulting xs:decimal value is zero,\n                   then positive or negative zero is returned according to the sign of\n                      $arg.For detailed type semantics, see [Formal Semantics].This function is typically used with a non-zero $precision in financial\n             applications where the argument is of type xs:decimal. For arguments of\n             type xs:float and xs:double the results may be\n             counter-intuitive. For example, consider round(35.425e0, 2). The result is\n             not 35.43, as might be expected, but 35.42. This is because the xs:double written as 35.425e0\n             has an exact value equal to 35.42499999999..., which is closer\n             to 35.42 than to 35.43.\n", 
        "params" : [ "$arg" ]
      }, {
        "description" : " Rounds a value to a specified number of decimal places, rounding upwards if two\n             such values are equally near.This function is deterministic, context-independent,  and focus-independent. General rules: see .The function returns the nearest (that is, numerically closest) value to\n                $arg that is a multiple of ten to the power of minus\n                $precision. If two such values are equally near (for example, if the\n             fractional part in $arg is exactly .5), the function returns the one that\n             is closest to positive infinity.If the type of $arg is one of the four numeric types xs:float,\n                xs:double, xs:decimal or xs:integer the type\n             of the result is the same as the type of $arg. If the type of\n                $arg is a type derived from one of the numeric types, the result is an\n             instance of the base numeric type.The single-argument version of this function produces the same result as the\n             two-argument version with $precision=0 (that is, it rounds to a whole\n             number).When $arg is of type xs:float and xs:double:If $arg is NaN, positive or negative zero, or positive or negative\n                   infinity, then the result is the same as the argument.For other values, the argument is cast to xs:decimal using an\n                   implementation of xs:decimal that imposes no limits on the number of\n                   digits that can be represented. The function is applied to this\n                      xs:decimal value, and the resulting xs:decimal is\n                   cast back to xs:float or xs:double as appropriate to\n                   form the function result. If the resulting xs:decimal value is zero,\n                   then positive or negative zero is returned according to the sign of\n                      $arg.For detailed type semantics, see [Formal Semantics].This function is typically used with a non-zero $precision in financial\n             applications where the argument is of type xs:decimal. For arguments of\n             type xs:float and xs:double the results may be\n             counter-intuitive. For example, consider round(35.425e0, 2). The result is\n             not 35.43, as might be expected, but 35.42. This is because the xs:double written as 35.425e0\n             has an exact value equal to 35.42499999999..., which is closer\n             to 35.42 than to 35.43.\n", 
        "params" : [ "$arg", "$precision" ]
      } ], 
      "round-half-to-even" : [ {
        "description" : " Rounds a value to a specified number of decimal places, rounding to make the\n             last digit even if two such values are equally near.This function is deterministic, context-independent,  and focus-independent. General rules: see .The function returns the nearest (that is, numerically closest) value to\n                $arg that is a multiple of ten to the power of minus\n                $precision. If two such values are equally near (e.g. if the fractional\n             part in $arg is exactly .500...), the function returns the one whose least\n             significant digit is even.If the type of $arg is one of the four numeric types xs:float,\n                xs:double, xs:decimal or xs:integer the type\n             of the result is the same as the type of $arg. If the type of\n                $arg is a type derived from one of the numeric types, the result is an\n             instance of the base numeric type. The first signature of this function produces the same result as the second signature\n             with $precision=0.For arguments of type xs:float and xs:double:If the argument is NaN, positive or negative zero, or positive or\n                   negative infinity, then the result is the same as the argument.In all other cases, the argument is cast to xs:decimal\n                   using an implementation of xs:decimal that imposes no\n                      limits on the number of digits that can be represented. The function\n                   is applied to this xs:decimal value, and the resulting\n                      xs:decimal is cast back to xs:float or\n                      xs:double as appropriate to form the function result. If the\n                   resulting xs:decimal value is zero, then positive or negative zero is\n                   returned according to the sign of the original argument.For detailed type semantics, see [Formal Semantics].This function is typically used in financial applications where the\n             argument is of type xs:decimal. For arguments of type xs:float\n             and xs:double the results may be counter-intuitive. For example, consider\n                round-half-to-even(xs:float(150.015), 2). The result is not 150.02 as\n             might be expected, but 150.01. This is because the conversion of the\n                xs:float value represented by the literal 150.015 to an\n                xs:decimal produces the xs:decimal value 150.014999389...,\n             which is closer to 150.01 than to 150.02.\n", 
        "params" : [ "$arg" ]
      }, {
        "description" : " Rounds a value to a specified number of decimal places, rounding to make the\n             last digit even if two such values are equally near.This function is deterministic, context-independent,  and focus-independent. General rules: see .The function returns the nearest (that is, numerically closest) value to\n                $arg that is a multiple of ten to the power of minus\n                $precision. If two such values are equally near (e.g. if the fractional\n             part in $arg is exactly .500...), the function returns the one whose least\n             significant digit is even.If the type of $arg is one of the four numeric types xs:float,\n                xs:double, xs:decimal or xs:integer the type\n             of the result is the same as the type of $arg. If the type of\n                $arg is a type derived from one of the numeric types, the result is an\n             instance of the base numeric type. The first signature of this function produces the same result as the second signature\n             with $precision=0.For arguments of type xs:float and xs:double:If the argument is NaN, positive or negative zero, or positive or\n                   negative infinity, then the result is the same as the argument.In all other cases, the argument is cast to xs:decimal\n                   using an implementation of xs:decimal that imposes no\n                      limits on the number of digits that can be represented. The function\n                   is applied to this xs:decimal value, and the resulting\n                      xs:decimal is cast back to xs:float or\n                      xs:double as appropriate to form the function result. If the\n                   resulting xs:decimal value is zero, then positive or negative zero is\n                   returned according to the sign of the original argument.For detailed type semantics, see [Formal Semantics].This function is typically used in financial applications where the\n             argument is of type xs:decimal. For arguments of type xs:float\n             and xs:double the results may be counter-intuitive. For example, consider\n                round-half-to-even(xs:float(150.015), 2). The result is not 150.02 as\n             might be expected, but 150.01. This is because the conversion of the\n                xs:float value represented by the literal 150.015 to an\n                xs:decimal produces the xs:decimal value 150.014999389...,\n             which is closer to 150.01 than to 150.02.\n", 
        "params" : [ "$arg", "$precision" ]
      } ], 
      "seconds-from-dateTime" : [ {
        "description" : " Returns the seconds component of an xs:dateTime.This function is deterministic, context-independent,  and focus-independent. If $arg is the empty sequence, the function returns the empty sequence.Otherwise, the function returns an xs:decimal value greater than or equal\n             to zero and less than 60, representing the seconds and fractional seconds in the local\n             value of $arg.The expression fn:seconds-from-dateTime(xs:dateTime(\"1999-05-31T13:20:00-05:00\")) returns 0.\n", 
        "params" : [ "$arg" ]
      } ], 
      "seconds-from-duration" : [ {
        "description" : " Returns the number of seconds in a duration.This function is deterministic, context-independent,  and focus-independent. If $arg is the empty sequence, the function returns the empty sequence.Otherwise, the function returns an xs:decimal representing the seconds\n             component in the value of $arg. The result is obtained by casting\n                $arg to an xs:dayTimeDuration (see ) and then computing the seconds component as described\n             in .If $arg is a negative duration then the result will be negative..If $arg is an xs:yearMonthDuration the function returns 0.The expression fn:seconds-from-duration(xs:dayTimeDuration(\"P3DT10H12.5S\")) returns 12.5.The expression fn:seconds-from-duration(xs:dayTimeDuration(\"-PT256S\")) returns -16.0.\n", 
        "params" : [ "$arg" ]
      } ], 
      "seconds-from-time" : [ {
        "description" : " Returns the seconds component of an xs:time.This function is deterministic, context-independent,  and focus-independent. If $arg is the empty sequence, the function returns the empty sequence.Otherwise, the function returns an xs:decimal value greater than or equal\n             to zero and less than 60, representing the seconds and fractional seconds in the local\n             value of $arg.The expression fn:seconds-from-time(xs:time(\"13:20:10.5\")) returns 10.5.\n", 
        "params" : [ "$arg" ]
      } ], 
      "serialize" : [ {
        "description" : " This function serializes the supplied input\n                sequence\n             $arg as described in ,\n             returning the serialized representation of the\n                sequence as a string.This function is deterministic, context-independent,  and focus-independent. The value of $arg acts as the input sequence to the serialization process,\n             which starts with sequence normalization.The single-argument version of this function has the same effect as\n             the two-argument version called with $params set to an empty sequence. This\n             in turn is the same as the effect of passing an\n                output:serialization-parameters element with no child elements.The $params argument is used to identify a set of\n             serialization parameters. These are supplied in the form of an\n                output:serialization-parameters element, having the format described in\n                .The final stage of serialization, that is, encoding, is skipped. If the serializer does\n             not allow this phase to be skipped, then the sequence of octets returned by the\n             serializer is decoded into a string by reversing the character encoding performed in the\n             final stage.If the host language makes serialization an optional feature and\n          the implementation does not support serialization, then a dynamic error\n              is raised.The serialization process will raise an error if $arg is an attribute or\n             namespace node.If any serialization error occurs, including the detection of an invalid value for a\n             serialization parameter, this results in the fn:serialize call failing with\n             a dynamic error.\n", 
        "params" : [ "$arg" ]
      }, {
        "description" : " This function serializes the supplied input\n                sequence\n             $arg as described in ,\n             returning the serialized representation of the\n                sequence as a string.This function is deterministic, context-independent,  and focus-independent. The value of $arg acts as the input sequence to the serialization process,\n             which starts with sequence normalization.The single-argument version of this function has the same effect as\n             the two-argument version called with $params set to an empty sequence. This\n             in turn is the same as the effect of passing an\n                output:serialization-parameters element with no child elements.The $params argument is used to identify a set of\n             serialization parameters. These are supplied in the form of an\n                output:serialization-parameters element, having the format described in\n                .The final stage of serialization, that is, encoding, is skipped. If the serializer does\n             not allow this phase to be skipped, then the sequence of octets returned by the\n             serializer is decoded into a string by reversing the character encoding performed in the\n             final stage.If the host language makes serialization an optional feature and\n          the implementation does not support serialization, then a dynamic error\n              is raised.The serialization process will raise an error if $arg is an attribute or\n             namespace node.If any serialization error occurs, including the detection of an invalid value for a\n             serialization parameter, this results in the fn:serialize call failing with\n             a dynamic error.\n", 
        "params" : [ "$arg", "$params" ]
      } ], 
      "starts-with" : [ {
        "description" : " Returns true if the string $arg1 contains $arg2 as a\n             leading substring, taking collations into account.The two-argument form of this function is deterministic, context-dependent,  and focus-independent.  It depends on\n \t\tcollations.\n \tThe three-argument form of this function is deterministic, context-dependent,  and focus-independent.  It depends on\n \t\tcollations, and static base uri.\n \tIf the value of $arg1 or $arg2 is the empty sequence, or\n             contains only ignorable collation units, it is interpreted as the zero-length\n             string.If the value of $arg2 is the zero-length string, then the function returns\n                true. If the value of $arg1 is the zero-length string and\n             the value of $arg2 is not the zero-length string, then the function returns\n                false.The collation used by this function is determined according to the rules in .The function returns an xs:boolean indicating whether or not the value of\n                $arg1 starts with a sequence of collation units that provides a\n                match to the collation units of $arg2 according to the\n             collation that is used.Match is defined in .A dynamic error may be raised  if the\n             specified collation does not support collation units.\n", 
        "params" : [ "$arg1", "$arg2" ]
      }, {
        "description" : " Returns true if the string $arg1 contains $arg2 as a\n             leading substring, taking collations into account.The two-argument form of this function is deterministic, context-dependent,  and focus-independent.  It depends on\n \t\tcollations.\n \tThe three-argument form of this function is deterministic, context-dependent,  and focus-independent.  It depends on\n \t\tcollations, and static base uri.\n \tIf the value of $arg1 or $arg2 is the empty sequence, or\n             contains only ignorable collation units, it is interpreted as the zero-length\n             string.If the value of $arg2 is the zero-length string, then the function returns\n                true. If the value of $arg1 is the zero-length string and\n             the value of $arg2 is not the zero-length string, then the function returns\n                false.The collation used by this function is determined according to the rules in .The function returns an xs:boolean indicating whether or not the value of\n                $arg1 starts with a sequence of collation units that provides a\n                match to the collation units of $arg2 according to the\n             collation that is used.Match is defined in .A dynamic error may be raised  if the\n             specified collation does not support collation units.\n", 
        "params" : [ "$arg1", "$arg2", "$collation" ]
      } ], 
      "string-join" : [ {
        "description" : " Returns a string created by concatenating the items in a sequence, with a\n             defined separator between adjacent items.This function is deterministic, context-independent,  and focus-independent. The effect of calling the single-argument version of this function is\n             the same as calling the two-argument version with $arg2 set to a\n             zero-length string.The function returns an xs:string created by concatenating the items in the\n             sequence $arg1, in order, using the value of $arg2 as a\n             separator between adjacent items. If the value of $arg2 is the zero-length\n             string, then the members of $arg1 are concatenated without a separator.If the value of $arg1 is the empty sequence, the function returns the\n             zero-length string.\n", 
        "params" : [ "$arg1" ]
      }, {
        "description" : " Returns a string created by concatenating the items in a sequence, with a\n             defined separator between adjacent items.This function is deterministic, context-independent,  and focus-independent. The effect of calling the single-argument version of this function is\n             the same as calling the two-argument version with $arg2 set to a\n             zero-length string.The function returns an xs:string created by concatenating the items in the\n             sequence $arg1, in order, using the value of $arg2 as a\n             separator between adjacent items. If the value of $arg2 is the zero-length\n             string, then the members of $arg1 are concatenated without a separator.If the value of $arg1 is the empty sequence, the function returns the\n             zero-length string.\n", 
        "params" : [ "$arg1", "$arg2" ]
      } ], 
      "string-length" : [ {
        "description" : " Returns the number of characters in a\n             string.The zero-argument form of this function is deterministic, context-dependent,  and focus-dependent. The one-argument form of this function is deterministic, context-independent,  and focus-independent. The function returns an xs:integer equal to the length in characters of the value of $arg.Calling the zero-argument version of the function is equivalent to calling\n                fn:string-length(fn:string(.)).If the value of $arg is the empty sequence, the function returns the\n                xs:integer value zero (0).If $arg is not specified and the context item is absent, a dynamic error is raised: .\n", 
        "params" : [  ]
      }, {
        "description" : " Returns the number of characters in a\n             string.The zero-argument form of this function is deterministic, context-dependent,  and focus-dependent. The one-argument form of this function is deterministic, context-independent,  and focus-independent. The function returns an xs:integer equal to the length in characters of the value of $arg.Calling the zero-argument version of the function is equivalent to calling\n                fn:string-length(fn:string(.)).If the value of $arg is the empty sequence, the function returns the\n                xs:integer value zero (0).If $arg is not specified and the context item is absent, a dynamic error is raised: .\n", 
        "params" : [ "$arg" ]
      } ], 
      "string-to-codepoints" : [ {
        "description" : " Returns the sequence of codepoints that\n             constitute an xs:string value. This function is deterministic, context-independent,  and focus-independent. The function returns a sequence of integers, each integer being the Unicode codepoints of the corresponding character in $arg.If $arg is a zero-length string or the empty sequence, the function returns\n             the empty sequence.The expression fn:string-to-codepoints(\"Thérèse\") returns (84, 104, 233, 114, 232, 115, 101).\n", 
        "params" : [ "$arg" ]
      }, {
        "description" : " Returns the sequence of codepoints that\n             constitute an xs:string value. This function is deterministic, context-independent,  and focus-independent. The function returns a sequence of integers, each integer being the Unicode codepoints of the corresponding character in $arg.If $arg is a zero-length string or the empty sequence, the function returns\n             the empty sequence.The expression fn:string-to-codepoints(\"Thérèse\") returns (84, 104, 233, 114, 232, 115, 101).\n", 
        "params" : [ "$arg" ]
      } ], 
      "subsequence" : [ {
        "description" : " Returns the contiguous sequence of items in the value of\n                $sourceSeq beginning at the position indicated by the value of\n                $startingLoc and continuing for the number of items indicated by the\n             value of $length. This function is deterministic, context-independent,  and focus-independent. In the two-argument case, returns:$sourceSeq[fn:round($startingLoc) le position()]In the three-argument case, returns:$sourceSeq[fn:round($startingLoc) le position()\n          and position() lt fn:round($startingLoc) + fn:round($length)]For detailed type semantics, see [Formal Semantics].The first item of a sequence is located at position 1, not position 0.If $sourceSeq is the empty sequence, the empty sequence is returned. If $startingLoc is zero or negative, the subsequence includes items from\n             the beginning of the $sourceSeq. If $length is not specified, the subsequence includes items to the end of\n                $sourceSeq. If $length is greater than the number of items in the value of\n                $sourceSeq following $startingLoc, the subsequence includes\n             items to the end of $sourceSeq.As an exception to the previous two notes, if\n                $startingLoc is -INF and $length is\n                +INF, then fn:round($startingLoc) + fn:round($length) is\n                NaN; since position() lt NaN is always false, the result is\n             an empty sequence.The reason the function accepts arguments of type xs:double is that many\n             computations on untyped data return an xs:double result; and the reason for\n             the rounding rules is to compensate for any imprecision in these floating-point\n             computations.\n", 
        "params" : [ "$sourceSeq", "$startingLoc" ]
      }, {
        "description" : " Returns the contiguous sequence of items in the value of\n                $sourceSeq beginning at the position indicated by the value of\n                $startingLoc and continuing for the number of items indicated by the\n             value of $length. This function is deterministic, context-independent,  and focus-independent. In the two-argument case, returns:$sourceSeq[fn:round($startingLoc) le position()]In the three-argument case, returns:$sourceSeq[fn:round($startingLoc) le position()\n          and position() lt fn:round($startingLoc) + fn:round($length)]For detailed type semantics, see [Formal Semantics].The first item of a sequence is located at position 1, not position 0.If $sourceSeq is the empty sequence, the empty sequence is returned. If $startingLoc is zero or negative, the subsequence includes items from\n             the beginning of the $sourceSeq. If $length is not specified, the subsequence includes items to the end of\n                $sourceSeq. If $length is greater than the number of items in the value of\n                $sourceSeq following $startingLoc, the subsequence includes\n             items to the end of $sourceSeq.As an exception to the previous two notes, if\n                $startingLoc is -INF and $length is\n                +INF, then fn:round($startingLoc) + fn:round($length) is\n                NaN; since position() lt NaN is always false, the result is\n             an empty sequence.The reason the function accepts arguments of type xs:double is that many\n             computations on untyped data return an xs:double result; and the reason for\n             the rounding rules is to compensate for any imprecision in these floating-point\n             computations.\n", 
        "params" : [ "$sourceSeq", "$startingLoc", "$length" ]
      } ], 
      "substring" : [ {
        "description" : " Returns the portion of the value of $sourceString beginning at the\n             position indicated by the value of $start and continuing for the number of\n                characters indicated by the value of\n                $length.This function is deterministic, context-independent,  and focus-independent. If the value of $sourceString is the empty sequence, the function returns\n             the zero-length string. Otherwise, the function returns a string comprising those characters of $sourceString whose index position (counting\n             from one) is greater than or equal to the value of $start (rounded to an\n             integer), and (if $length is specified) less than the sum of\n                $start and $length (both rounded to integers).The characters returned do not extend beyond $sourceString. If\n                $start is zero or negative, only those characters in positions greater\n             than zero are returned.More specifically, the three argument version of the function returns the characters in\n                $sourceString whose position $p satisfies:\n             fn:round($start) &lt;= $p &lt; fn:round($start) + fn:round($length)\n          The two argument version of the function assumes that $length is infinite\n             and thus returns the characters in\n                $sourceString whose position $p satisfies:\n             fn:round($start) &lt;= $p\n          In the above computations, the rules for op:numeric-less-than and\n                op:numeric-greater-than apply.The first character of a string is located at position 1, not position 0.\n", 
        "params" : [ "$sourceString", "$start" ]
      }, {
        "description" : " Returns the portion of the value of $sourceString beginning at the\n             position indicated by the value of $start and continuing for the number of\n                characters indicated by the value of\n                $length.This function is deterministic, context-independent,  and focus-independent. If the value of $sourceString is the empty sequence, the function returns\n             the zero-length string. Otherwise, the function returns a string comprising those characters of $sourceString whose index position (counting\n             from one) is greater than or equal to the value of $start (rounded to an\n             integer), and (if $length is specified) less than the sum of\n                $start and $length (both rounded to integers).The characters returned do not extend beyond $sourceString. If\n                $start is zero or negative, only those characters in positions greater\n             than zero are returned.More specifically, the three argument version of the function returns the characters in\n                $sourceString whose position $p satisfies:\n             fn:round($start) &lt;= $p &lt; fn:round($start) + fn:round($length)\n          The two argument version of the function assumes that $length is infinite\n             and thus returns the characters in\n                $sourceString whose position $p satisfies:\n             fn:round($start) &lt;= $p\n          In the above computations, the rules for op:numeric-less-than and\n                op:numeric-greater-than apply.The first character of a string is located at position 1, not position 0.\n", 
        "params" : [ "$sourceString", "$start", "$length" ]
      } ], 
      "substring-after" : [ {
        "description" : " Returns the part of $arg1 that follows the first occurrence of\n                $arg2, taking collations into account.The two-argument form of this function is deterministic, context-dependent,  and focus-independent.  It depends on\n \t\tcollations.\n \tThe three-argument form of this function is deterministic, context-dependent,  and focus-independent.  It depends on\n \t\tcollations, and static base uri.\n \tIf the value of $arg1 or $arg2 is the empty sequence, or\n             contains only ignorable collation units, it is interpreted as the zero-length\n             string.If the value of $arg2 is the zero-length string, then the function returns\n             the value of $arg1.If the value of $arg1 does not contain a string that is equal to the value\n             of $arg2, then the function returns the zero-length string. The collation used by this function is determined according to the rules in .The function returns the substring of the value of $arg1 that follows in\n             the value of $arg1 the first occurrence of a sequence of collation units\n             that provides a minimal match to the collation units of $arg2\n             according to the collation that is used. Minimal match is defined in . A dynamic error may be raised  if the\n             specified collation does not support collation units.\n", 
        "params" : [ "$arg1", "$arg2" ]
      }, {
        "description" : " Returns the part of $arg1 that follows the first occurrence of\n                $arg2, taking collations into account.The two-argument form of this function is deterministic, context-dependent,  and focus-independent.  It depends on\n \t\tcollations.\n \tThe three-argument form of this function is deterministic, context-dependent,  and focus-independent.  It depends on\n \t\tcollations, and static base uri.\n \tIf the value of $arg1 or $arg2 is the empty sequence, or\n             contains only ignorable collation units, it is interpreted as the zero-length\n             string.If the value of $arg2 is the zero-length string, then the function returns\n             the value of $arg1.If the value of $arg1 does not contain a string that is equal to the value\n             of $arg2, then the function returns the zero-length string. The collation used by this function is determined according to the rules in .The function returns the substring of the value of $arg1 that follows in\n             the value of $arg1 the first occurrence of a sequence of collation units\n             that provides a minimal match to the collation units of $arg2\n             according to the collation that is used. Minimal match is defined in . A dynamic error may be raised  if the\n             specified collation does not support collation units.\n", 
        "params" : [ "$arg1", "$arg2", "$collation" ]
      } ], 
      "substring-before" : [ {
        "description" : " Returns the part of $arg1 that precedes the first occurrence of\n                $arg2, taking collations into account.The two-argument form of this function is deterministic, context-dependent,  and focus-independent.  It depends on\n \t\tcollations.\n \tThe three-argument form of this function is deterministic, context-dependent,  and focus-independent.  It depends on\n \t\tcollations, and static base uri.\n \t If the value of $arg1 or $arg2 is the empty sequence, or\n             contains only ignorable collation units, it is interpreted as the zero-length\n             string.If the value of $arg2 is the zero-length string, then the function returns\n             the zero-length string. If the value of $arg1 does not contain a string that is equal to the value\n             of $arg2, then the function returns the zero-length string. The collation used by this function is determined according to the rules in .The function returns the substring of the value of $arg1 that precedes in\n             the value of $arg1 the first occurrence of a sequence of collation units\n             that provides a minimal match to the collation units of $arg2\n             according to the collation that is used.Minimal match is defined in . A dynamic error may be raised  if the\n             specified collation does not support collation units.\n", 
        "params" : [ "$arg1", "$arg2" ]
      }, {
        "description" : " Returns the part of $arg1 that precedes the first occurrence of\n                $arg2, taking collations into account.The two-argument form of this function is deterministic, context-dependent,  and focus-independent.  It depends on\n \t\tcollations.\n \tThe three-argument form of this function is deterministic, context-dependent,  and focus-independent.  It depends on\n \t\tcollations, and static base uri.\n \t If the value of $arg1 or $arg2 is the empty sequence, or\n             contains only ignorable collation units, it is interpreted as the zero-length\n             string.If the value of $arg2 is the zero-length string, then the function returns\n             the zero-length string. If the value of $arg1 does not contain a string that is equal to the value\n             of $arg2, then the function returns the zero-length string. The collation used by this function is determined according to the rules in .The function returns the substring of the value of $arg1 that precedes in\n             the value of $arg1 the first occurrence of a sequence of collation units\n             that provides a minimal match to the collation units of $arg2\n             according to the collation that is used.Minimal match is defined in . A dynamic error may be raised  if the\n             specified collation does not support collation units.\n", 
        "params" : [ "$arg1", "$arg2", "$collation" ]
      } ], 
      "sum" : [ {
        "description" : " Returns a value obtained by adding together the values in\n             $arg.This function is deterministic, context-independent,  and focus-independent. Any values of type xs:untypedAtomic in $arg are cast to\n                xs:double. The items in the resulting sequence may be reordered in an\n             arbitrary order. The resulting sequence is referred to below as the converted\n             sequence.If the converted sequence is empty, then the single-argument form of the function\n             returns the xs:integer value 0; the two-argument form returns\n             the value of the argument $zero.If the converted sequence contains the value NaN, NaN is\n             returned.All items in $arg must be numeric or derived from a single base type. In\n             addition, the type must support addition. Duration values must either all be\n                xs:yearMonthDuration values or must all be\n                xs:dayTimeDuration values. For numeric values, the numeric promotion\n             rules defined in  are used to promote all values to a single\n             common type. The sum of a sequence of integers will therefore be an integer, while the\n             sum of a numeric sequence that includes at least one xs:double will be an\n                xs:double. The result of the function, using the second signature, is the result of the\n             expression:\n if (fn:count($c) eq 0) then\n     $zero\n else if (fn:count($c) eq 1) then\n     $c[1]\n else\n     $c[1] + fn:sum(subsequence($c, 2))where $c is the converted sequence.The result of the function, using the first signature, is the result of the expression:\n                fn:sum($arg, 0).For detailed type semantics, see [Formal Semantics].A type error is raised  if the input sequence contains\n             items of incompatible types, as described above.\n", 
        "params" : [ "$arg" ]
      }, {
        "description" : " Returns a value obtained by adding together the values in\n             $arg.This function is deterministic, context-independent,  and focus-independent. Any values of type xs:untypedAtomic in $arg are cast to\n                xs:double. The items in the resulting sequence may be reordered in an\n             arbitrary order. The resulting sequence is referred to below as the converted\n             sequence.If the converted sequence is empty, then the single-argument form of the function\n             returns the xs:integer value 0; the two-argument form returns\n             the value of the argument $zero.If the converted sequence contains the value NaN, NaN is\n             returned.All items in $arg must be numeric or derived from a single base type. In\n             addition, the type must support addition. Duration values must either all be\n                xs:yearMonthDuration values or must all be\n                xs:dayTimeDuration values. For numeric values, the numeric promotion\n             rules defined in  are used to promote all values to a single\n             common type. The sum of a sequence of integers will therefore be an integer, while the\n             sum of a numeric sequence that includes at least one xs:double will be an\n                xs:double. The result of the function, using the second signature, is the result of the\n             expression:\n if (fn:count($c) eq 0) then\n     $zero\n else if (fn:count($c) eq 1) then\n     $c[1]\n else\n     $c[1] + fn:sum(subsequence($c, 2))where $c is the converted sequence.The result of the function, using the first signature, is the result of the expression:\n                fn:sum($arg, 0).For detailed type semantics, see [Formal Semantics].A type error is raised  if the input sequence contains\n             items of incompatible types, as described above.\n", 
        "params" : [ "$arg", "$zero" ]
      } ], 
      "tail" : [ {
        "description" : " Returns all but the first item in a sequence. This function is deterministic, context-independent,  and focus-independent. The function returns the value of the expression subsequence($arg, 2)If $arg is the empty sequence, or a sequence containing a single item, then\n             the empty sequence is returned. \n", 
        "params" : [ "$arg" ]
      } ], 
      "timezone-from-date" : [ {
        "description" : " Returns the timezone component of an xs:date.This function is deterministic, context-independent,  and focus-independent. If $arg is the empty sequence, the function returns the empty sequence.Otherwise, the function returns the timezone component of $arg, if any. If\n                $arg has a timezone component, then the result is an\n                xs:dayTimeDuration that indicates deviation from UTC; its value may\n             range from +14:00 to -14:00 hours, both inclusive. If $arg has no timezone\n             component, the result is the empty sequence.The expression fn:timezone-from-date(xs:date(\"1999-05-31-05:00\")) returns xs:dayTimeDuration(\"-PT5H\").The expression fn:timezone-from-date(xs:date(\"2000-06-12Z\")) returns xs:dayTimeDuration(\"PT0S\").\n", 
        "params" : [ "$arg" ]
      } ], 
      "timezone-from-dateTime" : [ {
        "description" : " Returns the timezone component of an xs:dateTime.This function is deterministic, context-independent,  and focus-independent. If $arg is the empty sequence, the function returns the empty sequence.Otherwise, the function returns the timezone component of $arg, if any. If\n                $arg has a timezone component, then the result is an\n                xs:dayTimeDuration that indicates deviation from UTC; its value may\n             range from +14:00 to -14:00 hours, both inclusive. If $arg has no timezone\n             component, the result is the empty sequence.The expression fn:timezone-from-dateTime(xs:dateTime(\"1999-05-31T13:20:00-05:00\")) returns xs:dayTimeDuration(\"-PT5H\").The expression fn:timezone-from-dateTime(xs:dateTime(\"2000-06-12T13:20:00Z\")) returns xs:dayTimeDuration(\"PT0S\").The expression fn:timezone-from-dateTime(xs:dateTime(\"2004-08-27T00:00:00\")) returns ().\n", 
        "params" : [ "$arg" ]
      } ], 
      "timezone-from-time" : [ {
        "description" : " Returns the timezone component of an xs:time.This function is deterministic, context-independent,  and focus-independent. If $arg is the empty sequence, the function returns the empty sequence.Otherwise, the function returns the timezone component of $arg, if any. If\n                $arg has a timezone component, then the result is an\n                xs:dayTimeDuration that indicates deviation from UTC; its value may\n             range from +14:00 to -14:00 hours, both inclusive. If $arg has no timezone\n             component, the result is the empty sequence.The expression fn:timezone-from-time(xs:time(\"13:20:00-05:00\")) returns xs:dayTimeDuration(\"-PT5H\").The expression fn:timezone-from-time(xs:time(\"13:20:00\")) returns ().\n", 
        "params" : [ "$arg" ]
      } ], 
      "tokenize" : [ {
        "description" : " Returns a sequence of strings constructed by splitting the input wherever a\n             separator is found; the separator is any substring that matches a given regular\n             expression.This function is deterministic, context-independent,  and focus-independent. The effect of calling the first version of this function (omitting the argument\n                $flags) is the same as the effect of calling the second version with the\n                $flags argument set to a zero-length string. Flags are defined in\n                .The $flags argument is interpreted in the same way as for the\n                fn:matches function.If $input is the empty sequence, or if $input is the\n             zero-length string, the function returns the empty sequence.The function returns a sequence of strings formed by breaking the $input\n             string into a sequence of strings, treating any substring that matches\n                $pattern as a separator. The separators themselves are not returned.If a separator occurs at the start of the $input string, the result\n             sequence will start with a zero-length string. Zero-length strings will also occur in\n             the result sequence if a separator occurs at the end of the $input string,\n             or if two adjacent substrings match the supplied $pattern. If two alternatives within the supplied $pattern both match at the same\n             position in the $input string, then the match that is chosen is the first.\n             For example: fn:tokenize(\"abracadabra\", \"(ab)|(a)\") returns (\"\", \"r\", \"c\", \"d\", \"r\", \"\")A dynamic error is raised  if the value of\n                $pattern is invalid according to the rules described in section .A dynamic error is raised  if the value of\n                $flags is invalid according to the rules described in section .A dynamic error is raised  if the supplied\n                $pattern matches a zero-length string, that is, if fn:matches(\"\",\n                $pattern, $flags) returns true. \n", 
        "params" : [ "$input", "$pattern" ]
      }, {
        "description" : " Returns a sequence of strings constructed by splitting the input wherever a\n             separator is found; the separator is any substring that matches a given regular\n             expression.This function is deterministic, context-independent,  and focus-independent. The effect of calling the first version of this function (omitting the argument\n                $flags) is the same as the effect of calling the second version with the\n                $flags argument set to a zero-length string. Flags are defined in\n                .The $flags argument is interpreted in the same way as for the\n                fn:matches function.If $input is the empty sequence, or if $input is the\n             zero-length string, the function returns the empty sequence.The function returns a sequence of strings formed by breaking the $input\n             string into a sequence of strings, treating any substring that matches\n                $pattern as a separator. The separators themselves are not returned.If a separator occurs at the start of the $input string, the result\n             sequence will start with a zero-length string. Zero-length strings will also occur in\n             the result sequence if a separator occurs at the end of the $input string,\n             or if two adjacent substrings match the supplied $pattern. If two alternatives within the supplied $pattern both match at the same\n             position in the $input string, then the match that is chosen is the first.\n             For example: fn:tokenize(\"abracadabra\", \"(ab)|(a)\") returns (\"\", \"r\", \"c\", \"d\", \"r\", \"\")A dynamic error is raised  if the value of\n                $pattern is invalid according to the rules described in section .A dynamic error is raised  if the value of\n                $flags is invalid according to the rules described in section .A dynamic error is raised  if the supplied\n                $pattern matches a zero-length string, that is, if fn:matches(\"\",\n                $pattern, $flags) returns true. \n", 
        "params" : [ "$input", "$pattern", "$flags" ]
      } ], 
      "trace" : [ {
        "description" : " Provides an execution trace intended to be used in debugging queries.This function is deterministic, context-independent,  and focus-independent. The function returns the value of $value, unchanged.In addition, the values of $value, converted to an xs:string,\n             and $label\n             may be directed to a trace data set. The destination of the trace\n             output is . The format of the trace output is\n                . The ordering of output from calls of the\n                fn:trace function is .Consider a situation in which a user wants to investigate the actual value passed to\n                a function. Assume that in a particular execution, $v is an\n                   xs:decimal with value 124.84. Writing fn:trace($v,\n                   'the value of $v is:') will put the strings \"124.84\" and\n                   \"the value of $v is:\" in the trace data set in implementation\n                dependent order.\n", 
        "params" : [ "$value", "$label" ]
      } ], 
      "translate" : [ {
        "description" : " Returns the value of $arg modified by replacing or removing\n             individual characters. This function is deterministic, context-independent,  and focus-independent. If the value of $arg is the empty sequence, the function returns the\n             zero-length string.Otherwise, the function returns a result string constructed by processing each character in the value of $arg, in order,\n             according to the following rules:If the character does not appear in the value of $mapString then it\n                   is added to the result string unchanged.If the character first appears in the value of $mapString at some\n                   position M, where the value of $transString is\n                      M or more characters in length, then the character at position\n                      M in $transString is added to the result string.If the character first appears in the value of $mapString at some\n                   position M, where the value of $transString is less than\n                      M characters in length, then the character is omitted from the\n                   result string.If $mapString is the zero-length string then the function returns\n                $arg unchanged.If a character occurs more than once in $mapString, then the first\n             occurrence determines the action taken.If $transString is longer than $mapString, the excess\n             characters are ignored.\n", 
        "params" : [ "$arg", "$mapString", "$transString" ]
      } ], 
      "true" : [ {
        "description" : " Returns the xs:boolean value true.This function is deterministic, context-independent,  and focus-independent. The result is equivalent to xs:boolean(\"1\").The expression fn:true() returns xs:boolean(1).\n", 
        "params" : [  ]
      } ], 
      "unordered" : [ {
        "description" : " Returns the items of $sourceSeq in an  order.This function is deterministic, context-independent,  and focus-independent. The function returns the items of $sourceSeq in an  order.Query optimizers may be able to do a better job if the order of the output sequence is\n             not specified. For example, when retrieving prices from a purchase order, if an index\n             exists on prices, it may be more efficient to return the prices in index order rather\n             than in document order.\n", 
        "params" : [ "$sourceSeq" ]
      } ], 
      "unparsed-text" : [ {
        "description" : " The fn:unparsed-text function reads an external resource (for example, a\n             file) and returns a string representation of the resource.This function is deterministic, context-dependent,  and focus-independent.  It depends on\n \t\tstatic base uri.\n \tThe $href argument must be a string in the form of a URI\n             reference, which must contain no fragment identifier, and\n                must identify a resource\n             for which a string representation is available. If the URI is a\n             relative URI reference, then it is resolved relative to the\n             Static Base URI property from the static context.The mapping of URIs to the string representation of a resource is the mapping defined\n             in the available text resources\n          component of the dynamic context.If the value of the $href argument is an empty sequence, the function\n             returns an empty sequence.The $encoding argument, if present, is the name of an encoding. The values\n             for this attribute follow the same rules as for the encoding attribute in\n             an XML declaration. The only values which every implementation is required to recognize are\n                utf-8 and utf-16.The encoding of the external resource is determined as follows:external encoding information is used if available, otherwiseif the media type of the resource is text/xml or\n                      application/xml (see ), or if it matches\n                   the conventions text/*+xml or application/*+xml (see\n                       and/or its successors), then the encoding is recognized\n                   as specified in , otherwisethe value of the $encoding argument is used if present, otherwisethe processor may use implementation-defined heuristics to determine the likely encoding,\n                   otherwiseUTF-8 is assumed.The result of the function is a string containing the\n             string representation of the resource retrieved\n             using the URI.A dynamic error is raised  if $href\n             contains a fragment identifier, or if it cannot be used to retrieve the\n             string representation of a resource.A dynamic error is raised  if the value\n             of the $encoding argument is not a valid encoding name, if the processor does not support the specified encoding,\n             if the string representation of the retrieved\n             resource contains octets that cannot be decoded into Unicode characters using the specified encoding, or if the resulting characters\n             are not permitted XML characters.A dynamic error is raised  if\n                $encoding is absent and the processor cannot infer the encoding using external information and the\n             encoding is not UTF-8.\n", 
        "params" : [ "$href" ]
      }, {
        "description" : " The fn:unparsed-text function reads an external resource (for example, a\n             file) and returns a string representation of the resource.This function is deterministic, context-dependent,  and focus-independent.  It depends on\n \t\tstatic base uri.\n \tThe $href argument must be a string in the form of a URI\n             reference, which must contain no fragment identifier, and\n                must identify a resource\n             for which a string representation is available. If the URI is a\n             relative URI reference, then it is resolved relative to the\n             Static Base URI property from the static context.The mapping of URIs to the string representation of a resource is the mapping defined\n             in the available text resources\n          component of the dynamic context.If the value of the $href argument is an empty sequence, the function\n             returns an empty sequence.The $encoding argument, if present, is the name of an encoding. The values\n             for this attribute follow the same rules as for the encoding attribute in\n             an XML declaration. The only values which every implementation is required to recognize are\n                utf-8 and utf-16.The encoding of the external resource is determined as follows:external encoding information is used if available, otherwiseif the media type of the resource is text/xml or\n                      application/xml (see ), or if it matches\n                   the conventions text/*+xml or application/*+xml (see\n                       and/or its successors), then the encoding is recognized\n                   as specified in , otherwisethe value of the $encoding argument is used if present, otherwisethe processor may use implementation-defined heuristics to determine the likely encoding,\n                   otherwiseUTF-8 is assumed.The result of the function is a string containing the\n             string representation of the resource retrieved\n             using the URI.A dynamic error is raised  if $href\n             contains a fragment identifier, or if it cannot be used to retrieve the\n             string representation of a resource.A dynamic error is raised  if the value\n             of the $encoding argument is not a valid encoding name, if the processor does not support the specified encoding,\n             if the string representation of the retrieved\n             resource contains octets that cannot be decoded into Unicode characters using the specified encoding, or if the resulting characters\n             are not permitted XML characters.A dynamic error is raised  if\n                $encoding is absent and the processor cannot infer the encoding using external information and the\n             encoding is not UTF-8.\n", 
        "params" : [ "$href", "$encoding" ]
      }, {
        "description" : " The fn:unparsed-text function reads an external resource (for example, a\n             file) and returns a string representation of the resource.This function is deterministic, context-dependent,  and focus-independent.  It depends on\n \t\tstatic base uri.\n \tThe $href argument must be a string in the form of a URI\n             reference, which must contain no fragment identifier, and\n                must identify a resource\n             for which a string representation is available. If the URI is a\n             relative URI reference, then it is resolved relative to the\n             Static Base URI property from the static context.The mapping of URIs to the string representation of a resource is the mapping defined\n             in the available text resources\n          component of the dynamic context.If the value of the $href argument is an empty sequence, the function\n             returns an empty sequence.The $encoding argument, if present, is the name of an encoding. The values\n             for this attribute follow the same rules as for the encoding attribute in\n             an XML declaration. The only values which every implementation is required to recognize are\n                utf-8 and utf-16.The encoding of the external resource is determined as follows:external encoding information is used if available, otherwiseif the media type of the resource is text/xml or\n                      application/xml (see ), or if it matches\n                   the conventions text/*+xml or application/*+xml (see\n                       and/or its successors), then the encoding is recognized\n                   as specified in , otherwisethe value of the $encoding argument is used if present, otherwisethe processor may use implementation-defined heuristics to determine the likely encoding,\n                   otherwiseUTF-8 is assumed.The result of the function is a string containing the\n             string representation of the resource retrieved\n             using the URI.A dynamic error is raised  if $href\n             contains a fragment identifier, or if it cannot be used to retrieve the\n             string representation of a resource.A dynamic error is raised  if the value\n             of the $encoding argument is not a valid encoding name, if the processor does not support the specified encoding,\n             if the string representation of the retrieved\n             resource contains octets that cannot be decoded into Unicode characters using the specified encoding, or if the resulting characters\n             are not permitted XML characters.A dynamic error is raised  if\n                $encoding is absent and the processor cannot infer the encoding using external information and the\n             encoding is not UTF-8.\n", 
        "params" : [ "$href" ]
      }, {
        "description" : " The fn:unparsed-text function reads an external resource (for example, a\n             file) and returns a string representation of the resource.This function is deterministic, context-dependent,  and focus-independent.  It depends on\n \t\tstatic base uri.\n \tThe $href argument must be a string in the form of a URI\n             reference, which must contain no fragment identifier, and\n                must identify a resource\n             for which a string representation is available. If the URI is a\n             relative URI reference, then it is resolved relative to the\n             Static Base URI property from the static context.The mapping of URIs to the string representation of a resource is the mapping defined\n             in the available text resources\n          component of the dynamic context.If the value of the $href argument is an empty sequence, the function\n             returns an empty sequence.The $encoding argument, if present, is the name of an encoding. The values\n             for this attribute follow the same rules as for the encoding attribute in\n             an XML declaration. The only values which every implementation is required to recognize are\n                utf-8 and utf-16.The encoding of the external resource is determined as follows:external encoding information is used if available, otherwiseif the media type of the resource is text/xml or\n                      application/xml (see ), or if it matches\n                   the conventions text/*+xml or application/*+xml (see\n                       and/or its successors), then the encoding is recognized\n                   as specified in , otherwisethe value of the $encoding argument is used if present, otherwisethe processor may use implementation-defined heuristics to determine the likely encoding,\n                   otherwiseUTF-8 is assumed.The result of the function is a string containing the\n             string representation of the resource retrieved\n             using the URI.A dynamic error is raised  if $href\n             contains a fragment identifier, or if it cannot be used to retrieve the\n             string representation of a resource.A dynamic error is raised  if the value\n             of the $encoding argument is not a valid encoding name, if the processor does not support the specified encoding,\n             if the string representation of the retrieved\n             resource contains octets that cannot be decoded into Unicode characters using the specified encoding, or if the resulting characters\n             are not permitted XML characters.A dynamic error is raised  if\n                $encoding is absent and the processor cannot infer the encoding using external information and the\n             encoding is not UTF-8.\n", 
        "params" : [ "$href", "$encoding" ]
      } ], 
      "unparsed-text-available" : [ {
        "description" : " Because errors in evaluating the fn:unparsed-text function are\n             non-recoverable, these two functions are provided to allow an application to determine\n             whether a call with particular arguments would succeed.This function is deterministic, context-dependent,  and focus-independent.  It depends on\n \t\tstatic base uri.\n \tThe fn:unparsed-text-available function determines whether a call\n             on the fn:unparsed-text function with identical arguments would\n             return a string.If the first argument is an empty sequence, the function returns false. If the second\n             argument is an empty sequence, the function behaves as if the second argument were\n             omitted.In other cases, the function returns true if a call on\n                fn:unparsed-text with the same arguments would succeed, and\n             false if a call on fn:unparsed-text with the same arguments would\n             fail with a non-recoverable dynamic error.The functions fn:unparsed-text and\n                fn:unparsed-text-available have the same requirement for\n                determinism as the functions\n                fn:doc and fn:doc-available. This means that unless the\n             user has explicitly stated a requirement for a reduced level of determinism, either of\n             these functions if called twice with the same arguments during the course of a\n             transformation must return the same results each time; moreover, the\n             results of a call on fn:unparsed-text-available\n             must be consistent with the results of a subsequent call on\n                unparsed-text with the same arguments.This requires that the unparsed-text-available function should\n             actually attempt to read the resource identified by the URI, and check that it is\n             correctly encoded and contains no characters that are invalid in XML. Implementations\n             may avoid the cost of repeating these checks for example by caching the validated\n             contents of the resource, to anticipate a subsequent call on the\n                unparsed-text\n             or unparsed-text-lines\n              function. Alternatively, implementations may be able to rewrite an expression\n             such as if (unparsed-text-available(A)) then unparsed-text(A) else ... to\n             generate a single call internally.\n", 
        "params" : [ "$href" ]
      }, {
        "description" : " Because errors in evaluating the fn:unparsed-text function are\n             non-recoverable, these two functions are provided to allow an application to determine\n             whether a call with particular arguments would succeed.This function is deterministic, context-dependent,  and focus-independent.  It depends on\n \t\tstatic base uri.\n \tThe fn:unparsed-text-available function determines whether a call\n             on the fn:unparsed-text function with identical arguments would\n             return a string.If the first argument is an empty sequence, the function returns false. If the second\n             argument is an empty sequence, the function behaves as if the second argument were\n             omitted.In other cases, the function returns true if a call on\n                fn:unparsed-text with the same arguments would succeed, and\n             false if a call on fn:unparsed-text with the same arguments would\n             fail with a non-recoverable dynamic error.The functions fn:unparsed-text and\n                fn:unparsed-text-available have the same requirement for\n                determinism as the functions\n                fn:doc and fn:doc-available. This means that unless the\n             user has explicitly stated a requirement for a reduced level of determinism, either of\n             these functions if called twice with the same arguments during the course of a\n             transformation must return the same results each time; moreover, the\n             results of a call on fn:unparsed-text-available\n             must be consistent with the results of a subsequent call on\n                unparsed-text with the same arguments.This requires that the unparsed-text-available function should\n             actually attempt to read the resource identified by the URI, and check that it is\n             correctly encoded and contains no characters that are invalid in XML. Implementations\n             may avoid the cost of repeating these checks for example by caching the validated\n             contents of the resource, to anticipate a subsequent call on the\n                unparsed-text\n             or unparsed-text-lines\n              function. Alternatively, implementations may be able to rewrite an expression\n             such as if (unparsed-text-available(A)) then unparsed-text(A) else ... to\n             generate a single call internally.\n", 
        "params" : [ "$href", "$encoding" ]
      }, {
        "description" : " Because errors in evaluating the fn:unparsed-text function are\n             non-recoverable, these two functions are provided to allow an application to determine\n             whether a call with particular arguments would succeed.This function is deterministic, context-dependent,  and focus-independent.  It depends on\n \t\tstatic base uri.\n \tThe fn:unparsed-text-available function determines whether a call\n             on the fn:unparsed-text function with identical arguments would\n             return a string.If the first argument is an empty sequence, the function returns false. If the second\n             argument is an empty sequence, the function behaves as if the second argument were\n             omitted.In other cases, the function returns true if a call on\n                fn:unparsed-text with the same arguments would succeed, and\n             false if a call on fn:unparsed-text with the same arguments would\n             fail with a non-recoverable dynamic error.The functions fn:unparsed-text and\n                fn:unparsed-text-available have the same requirement for\n                determinism as the functions\n                fn:doc and fn:doc-available. This means that unless the\n             user has explicitly stated a requirement for a reduced level of determinism, either of\n             these functions if called twice with the same arguments during the course of a\n             transformation must return the same results each time; moreover, the\n             results of a call on fn:unparsed-text-available\n             must be consistent with the results of a subsequent call on\n                unparsed-text with the same arguments.This requires that the unparsed-text-available function should\n             actually attempt to read the resource identified by the URI, and check that it is\n             correctly encoded and contains no characters that are invalid in XML. Implementations\n             may avoid the cost of repeating these checks for example by caching the validated\n             contents of the resource, to anticipate a subsequent call on the\n                unparsed-text\n             or unparsed-text-lines\n              function. Alternatively, implementations may be able to rewrite an expression\n             such as if (unparsed-text-available(A)) then unparsed-text(A) else ... to\n             generate a single call internally.\n", 
        "params" : [ "$href" ]
      }, {
        "description" : " Because errors in evaluating the fn:unparsed-text function are\n             non-recoverable, these two functions are provided to allow an application to determine\n             whether a call with particular arguments would succeed.This function is deterministic, context-dependent,  and focus-independent.  It depends on\n \t\tstatic base uri.\n \tThe fn:unparsed-text-available function determines whether a call\n             on the fn:unparsed-text function with identical arguments would\n             return a string.If the first argument is an empty sequence, the function returns false. If the second\n             argument is an empty sequence, the function behaves as if the second argument were\n             omitted.In other cases, the function returns true if a call on\n                fn:unparsed-text with the same arguments would succeed, and\n             false if a call on fn:unparsed-text with the same arguments would\n             fail with a non-recoverable dynamic error.The functions fn:unparsed-text and\n                fn:unparsed-text-available have the same requirement for\n                determinism as the functions\n                fn:doc and fn:doc-available. This means that unless the\n             user has explicitly stated a requirement for a reduced level of determinism, either of\n             these functions if called twice with the same arguments during the course of a\n             transformation must return the same results each time; moreover, the\n             results of a call on fn:unparsed-text-available\n             must be consistent with the results of a subsequent call on\n                unparsed-text with the same arguments.This requires that the unparsed-text-available function should\n             actually attempt to read the resource identified by the URI, and check that it is\n             correctly encoded and contains no characters that are invalid in XML. Implementations\n             may avoid the cost of repeating these checks for example by caching the validated\n             contents of the resource, to anticipate a subsequent call on the\n                unparsed-text\n             or unparsed-text-lines\n              function. Alternatively, implementations may be able to rewrite an expression\n             such as if (unparsed-text-available(A)) then unparsed-text(A) else ... to\n             generate a single call internally.\n", 
        "params" : [ "$href", "$encoding" ]
      } ], 
      "unparsed-text-lines" : [ {
        "description" : " The fn:unparsed-text-lines function reads an external resource (for\n             example, a file) and returns its contents as a sequence of strings, one for each line of\n             text in the  string representation of the resource.This function is deterministic, context-dependent,  and focus-independent.  It depends on\n \t\tstatic base uri.\n \tThe unparsed-text-lines function reads an external resource (for example, a\n             file) and returns its string representation as a sequence of strings, separated at newline\n             boundaries. The result of the single-argument function is the same as the result of the expression\n                fn:tokenize(fn:unparsed-text($href), '\\r\\n|\\r|\\n')[not(position()=last() and\n                .='')]. The result of the two-argument function is the same as the result of\n             the expression fn:tokenize(fn:unparsed-text($href, $encoding),\n                '\\r\\n|\\r|\\n'))[not(position()=last() and .='')]. The result is a thus a sequence of strings containing the text of the resource retrieved\n             using the URI, each string representing one line of text. Lines are separated by one of\n             the sequences x0A, x0D, or x0Dx0A. The characters representing the newline are not\n             included in the returned strings. If there are two adjacent newline sequences, a\n             zero-length string will be returned to represent the empty line; but if the external\n             resource ends with a newline sequence, no zero-length string will be returned as the\n             last item in the result.Error conditions are the same as for the fn:unparsed-text function.\n", 
        "params" : [ "$href" ]
      }, {
        "description" : " The fn:unparsed-text-lines function reads an external resource (for\n             example, a file) and returns its contents as a sequence of strings, one for each line of\n             text in the  string representation of the resource.This function is deterministic, context-dependent,  and focus-independent.  It depends on\n \t\tstatic base uri.\n \tThe unparsed-text-lines function reads an external resource (for example, a\n             file) and returns its string representation as a sequence of strings, separated at newline\n             boundaries. The result of the single-argument function is the same as the result of the expression\n                fn:tokenize(fn:unparsed-text($href), '\\r\\n|\\r|\\n')[not(position()=last() and\n                .='')]. The result of the two-argument function is the same as the result of\n             the expression fn:tokenize(fn:unparsed-text($href, $encoding),\n                '\\r\\n|\\r|\\n'))[not(position()=last() and .='')]. The result is a thus a sequence of strings containing the text of the resource retrieved\n             using the URI, each string representing one line of text. Lines are separated by one of\n             the sequences x0A, x0D, or x0Dx0A. The characters representing the newline are not\n             included in the returned strings. If there are two adjacent newline sequences, a\n             zero-length string will be returned to represent the empty line; but if the external\n             resource ends with a newline sequence, no zero-length string will be returned as the\n             last item in the result.Error conditions are the same as for the fn:unparsed-text function.\n", 
        "params" : [ "$href", "$encoding" ]
      }, {
        "description" : " The fn:unparsed-text-lines function reads an external resource (for\n             example, a file) and returns its contents as a sequence of strings, one for each line of\n             text in the  string representation of the resource.This function is deterministic, context-dependent,  and focus-independent.  It depends on\n \t\tstatic base uri.\n \tThe unparsed-text-lines function reads an external resource (for example, a\n             file) and returns its string representation as a sequence of strings, separated at newline\n             boundaries. The result of the single-argument function is the same as the result of the expression\n                fn:tokenize(fn:unparsed-text($href), '\\r\\n|\\r|\\n')[not(position()=last() and\n                .='')]. The result of the two-argument function is the same as the result of\n             the expression fn:tokenize(fn:unparsed-text($href, $encoding),\n                '\\r\\n|\\r|\\n'))[not(position()=last() and .='')]. The result is a thus a sequence of strings containing the text of the resource retrieved\n             using the URI, each string representing one line of text. Lines are separated by one of\n             the sequences x0A, x0D, or x0Dx0A. The characters representing the newline are not\n             included in the returned strings. If there are two adjacent newline sequences, a\n             zero-length string will be returned to represent the empty line; but if the external\n             resource ends with a newline sequence, no zero-length string will be returned as the\n             last item in the result.Error conditions are the same as for the fn:unparsed-text function.\n", 
        "params" : [ "$href", "$encoding" ]
      } ], 
      "upper-case" : [ {
        "description" : " Converts a string to upper case.This function is deterministic, context-independent,  and focus-independent. If the value of $arg is the empty sequence, the zero-length string is\n             returned.Otherwise, the function returns the value of $arg after translating every\n                character to its upper-case correspondent as\n             defined in the appropriate case mappings section in the Unicode standard . For versions of Unicode beginning with the 2.1.8 update, only\n             locale-insensitive case mappings should be applied. Beginning with version 3.2.0 (and\n             likely future versions) of Unicode, precise mappings are described in default case\n             operations, which are full case mappings in the absence of tailoring for particular\n             languages and environments. Every lower-case character that does not have an upper-case\n             correspondent, as well as every upper-case character, is included in the returned value\n             in its original form. Case mappings may change the length of a string. In general, the\n                fn:upper-case and fn:lower-case functions are not inverses\n             of each other: fn:lower-case(fn:upper-case($arg)) is not guaranteed to\n             return $arg, nor is fn:upper-case(fn:lower-case($arg)). The\n             Latin small letter dotless i (as used in Turkish) is perhaps the most prominent\n             lower-case letter which will not round-trip. The Latin capital letter i with dot above\n             is the most prominent upper-case letter which will not round trip; there are others,\n             such as Latin capital letter Sharp S (#1E9E) which is introduced in Unicode 5.1. These functions may not always be linguistically appropriate (e.g. Turkish i without\n             dot) or appropriate for the application (e.g. titlecase). In cases such as Turkish, a\n             simple translation should be used first. Because the function is not sensitive to locale, results will not always match user\n             expectations. In Quebec, for example, the standard uppercase equivalent of \"è\" is \"È\",\n             while in metropolitan France it is more commonly \"E\"; only one of these is supported by\n             the functions as defined. Many characters of class Ll lack uppercase equivalents in the Unicode case mapping\n             tables; many characters of class Lu lack lowercase equivalents.\n", 
        "params" : [ "$arg" ]
      } ], 
      "uri-collection" : [ {
        "description" : " Returns a sequence of xs:anyURI values representing the URIs in a resource collection.This function is deterministic, context-dependent,  and focus-independent.  It depends on\n \t\tavailable resource collections, and static base uri.\n \tThe zero-argument form of the function returns the URIs in the Default resource collection\n             described in .If the value of $arg is a relative xs:anyURI, it is resolved\n             against the value of the base-URI property from the static context. If $arg is the empty sequence, the function behaves as if it had been\n             called without an argument. See above.The single-argument form of the function returns the sequence of URIs corresponding to the\n             supplied URI in the Available resource collections described in\n             .A dynamic error is raised  if no URI is supplied (that is, if the\n             the function is called with no arguments, or with a single argument that evaluates to an empty sequence), and the\n             value of the default resource collection is absent.A dynamic error is raised \n             if available resource collections provides no mapping for the absolutized URI.A dynamic error is raised  if $arg is not a\n             valid xs:anyURI.\n", 
        "params" : [  ]
      }, {
        "description" : " Returns a sequence of xs:anyURI values representing the URIs in a resource collection.This function is deterministic, context-dependent,  and focus-independent.  It depends on\n \t\tavailable resource collections, and static base uri.\n \tThe zero-argument form of the function returns the URIs in the Default resource collection\n             described in .If the value of $arg is a relative xs:anyURI, it is resolved\n             against the value of the base-URI property from the static context. If $arg is the empty sequence, the function behaves as if it had been\n             called without an argument. See above.The single-argument form of the function returns the sequence of URIs corresponding to the\n             supplied URI in the Available resource collections described in\n             .A dynamic error is raised  if no URI is supplied (that is, if the\n             the function is called with no arguments, or with a single argument that evaluates to an empty sequence), and the\n             value of the default resource collection is absent.A dynamic error is raised \n             if available resource collections provides no mapping for the absolutized URI.A dynamic error is raised  if $arg is not a\n             valid xs:anyURI.\n", 
        "params" : [ "$arg" ]
      }, {
        "description" : " Returns a sequence of xs:anyURI values representing the URIs in a resource collection.This function is deterministic, context-dependent,  and focus-independent.  It depends on\n \t\tavailable resource collections, and static base uri.\n \tThe zero-argument form of the function returns the URIs in the Default resource collection\n             described in .If the value of $arg is a relative xs:anyURI, it is resolved\n             against the value of the base-URI property from the static context. If $arg is the empty sequence, the function behaves as if it had been\n             called without an argument. See above.The single-argument form of the function returns the sequence of URIs corresponding to the\n             supplied URI in the Available resource collections described in\n             .A dynamic error is raised  if no URI is supplied (that is, if the\n             the function is called with no arguments, or with a single argument that evaluates to an empty sequence), and the\n             value of the default resource collection is absent.A dynamic error is raised \n             if available resource collections provides no mapping for the absolutized URI.A dynamic error is raised  if $arg is not a\n             valid xs:anyURI.\n", 
        "params" : [  ]
      }, {
        "description" : " Returns a sequence of xs:anyURI values representing the URIs in a resource collection.This function is deterministic, context-dependent,  and focus-independent.  It depends on\n \t\tavailable resource collections, and static base uri.\n \tThe zero-argument form of the function returns the URIs in the Default resource collection\n             described in .If the value of $arg is a relative xs:anyURI, it is resolved\n             against the value of the base-URI property from the static context. If $arg is the empty sequence, the function behaves as if it had been\n             called without an argument. See above.The single-argument form of the function returns the sequence of URIs corresponding to the\n             supplied URI in the Available resource collections described in\n             .A dynamic error is raised  if no URI is supplied (that is, if the\n             the function is called with no arguments, or with a single argument that evaluates to an empty sequence), and the\n             value of the default resource collection is absent.A dynamic error is raised \n             if available resource collections provides no mapping for the absolutized URI.A dynamic error is raised  if $arg is not a\n             valid xs:anyURI.\n", 
        "params" : [ "$arg" ]
      } ], 
      "year-from-date" : [ {
        "description" : " Returns the year component of an xs:date.This function is deterministic, context-independent,  and focus-independent. If $arg is the empty sequence, the function returns the empty sequence.Otherwise, the function returns an xs:integer representing the year in the\n             local value of $arg. The value may be negative. The expression fn:year-from-date(xs:date(\"1999-05-31\")) returns 1999.The expression fn:year-from-date(xs:date(\"2000-01-01+05:00\")) returns 2000.\n", 
        "params" : [ "$arg" ]
      } ], 
      "years-from-duration" : [ {
        "description" : " Returns the number of years in a duration.This function is deterministic, context-independent,  and focus-independent. If $arg is the empty sequence, the function returns the empty sequence.Otherwise, the function returns an xs:integer representing the years\n             component in the value of $arg. The result is obtained by casting\n                $arg to an xs:yearMonthDuration (see ) and then computing the years component as described in\n                .If $arg is a negative duration then the result will be negative..If $arg is an xs:dayTimeDuration the function returns 0.The expression fn:years-from-duration(xs:yearMonthDuration(\"P20Y15M\")) returns 21.The expression fn:years-from-duration(xs:yearMonthDuration(\"-P15M\")) returns -1.The expression fn:years-from-duration(xs:dayTimeDuration(\"-P2DT15H\")) returns 0.\n", 
        "params" : [ "$arg" ]
      } ], 
      "zero-or-one" : [ {
        "description" : " Returns $arg if it contains zero or one items. Otherwise, raises\n             an error.This function is deterministic, context-independent,  and focus-independent. Except in error cases, the function returns $arg unchanged.For detailed type semantics, see [Formal Semantics].A dynamic error is raised  if $arg contains more\n             than one item.\n", 
        "params" : [ "$arg" ]
      } ], 
      "base-uri" : [ {
        "description" : " Returns the base URI of a node.The zero-argument form of this function is deterministic, context-dependent,  and focus-dependent. The one-argument form of this function is deterministic, context-independent,  and focus-independent. The zero-argument version of the function returns the base URI of the\n             context node: it is equivalent to calling fn:base-uri(.).The single-argument version of the function behaves as follows:If $arg is the empty sequence, the function returns the empty\n                sequence.Otherwise, the function returns the value of the dm:base-uri accessor\n                applied to the node $arg. This accessor is defined, for each kind of\n                node, in the XDM specification (See ).As explained in XDM, document, element and processing-instruction nodes have a\n             base-uri property which may be empty. The base-uri property for all other node kinds is\n             the empty sequence. The dm:base-uri accessor returns the base-uri property of a node if\n             it exists and is non-empty; otherwise it returns the result of applying the dm:base-uri\n             accessor to its parent, recursively. If the node does not have a parent, or if the\n             recursive ascent up the ancestor chain encounters a parentless node whose base-uri\n             property is empty, the empty sequence is returned. In the case of namespace nodes,\n             however, the result is always an empty sequence -- it does not depend on the base URI of\n             the parent element.See also fn:static-base-uri.The following errors may be raised when $arg is omitted:If the context\n                item is absent, dynamic error\n                If the context item is not a\n                node, type error .\n", 
        "params" : [  ]
      }, {
        "description" : " Returns the base URI of a node.The zero-argument form of this function is deterministic, context-dependent,  and focus-dependent. The one-argument form of this function is deterministic, context-independent,  and focus-independent. The zero-argument version of the function returns the base URI of the\n             context node: it is equivalent to calling fn:base-uri(.).The single-argument version of the function behaves as follows:If $arg is the empty sequence, the function returns the empty\n                sequence.Otherwise, the function returns the value of the dm:base-uri accessor\n                applied to the node $arg. This accessor is defined, for each kind of\n                node, in the XDM specification (See ).As explained in XDM, document, element and processing-instruction nodes have a\n             base-uri property which may be empty. The base-uri property for all other node kinds is\n             the empty sequence. The dm:base-uri accessor returns the base-uri property of a node if\n             it exists and is non-empty; otherwise it returns the result of applying the dm:base-uri\n             accessor to its parent, recursively. If the node does not have a parent, or if the\n             recursive ascent up the ancestor chain encounters a parentless node whose base-uri\n             property is empty, the empty sequence is returned. In the case of namespace nodes,\n             however, the result is always an empty sequence -- it does not depend on the base URI of\n             the parent element.See also fn:static-base-uri.The following errors may be raised when $arg is omitted:If the context\n                item is absent, dynamic error\n                If the context item is not a\n                node, type error .\n", 
        "params" : [ "$arg" ]
      } ], 
      "current-date" : [ {
        "description" : " Returns the current date.This function is deterministic, context-dependent,  and focus-independent.  It depends on\n \t\timplicit timezone.\n \tReturns xs:date(fn:current-dateTime()). This is an xs:date\n             (with timezone) that is current at some time during the evaluation of a query or\n             transformation in which fn:current-date is executed.This function is . The precise instant during the query or\n             transformation represented by the value of fn:current-date is .The returned date will always have an associated timezone, which will always be the same\n             as the implicit timezone in the dynamic context\n", 
        "params" : [  ]
      } ], 
      "current-dateTime" : [ {
        "description" : " Returns the current date and time (with timezone).This function is deterministic, context-dependent,  and focus-independent.  It depends on\n \t\timplicit timezone.\n \tReturns the current dateTime (with timezone) from the dynamic context. (See .) This is an\n                xs:dateTime that is current at some time during the evaluation of a\n             query or transformation in which fn:current-dateTime is executed.This function is . The precise instant during the query or\n             transformation represented by the value of fn:current-dateTime() is\n                .If the implementation supports data types from XSD 1.1 then the\n             returned value will be an instance of xs:dateTimeStamp. Otherwise, the only\n             guarantees are that it will be an instance of xs:dateTime and will have a\n             timezone component.The returned xs:dateTime will always have an associated timezone, which\n             will always be the same as the implicit timezone in the dynamic context\n", 
        "params" : [  ]
      } ], 
      "current-time" : [ {
        "description" : " Returns the current time.This function is deterministic, context-dependent,  and focus-independent.  It depends on\n \t\timplicit timezone.\n \tReturns xs:time(fn:current-dateTime()). This is an xs:time\n             (with timezone) that is current at some time during the evaluation of a query or\n             transformation in which fn:current-time is executed.This function is . The precise instant during the query or\n             transformation represented by the value of fn:current-time() is .The returned time will always have an associated timezone, which will always be the same\n             as the implicit timezone in the dynamic context\n", 
        "params" : [  ]
      } ], 
      "data" : [ {
        "description" : " Returns the result of atomizing a sequence, that is, replacing all nodes in the\n             sequence by their typed values.The zero-argument form of this function is deterministic, context-dependent,  and focus-dependent. The one-argument form of this function is deterministic, context-independent,  and focus-independent. If the argument is omitted, it defaults to the context item\n                (.). The behavior of the function if the argument is omitted is exactly\n             the same as if the context item had been passed as the argument. The result of fn:data is the sequence of atomic values produced by\n             applying the following rules to each item in $arg:If the item is an atomic value, it is appended to the result sequence. If the item is a node, the typed value of the node is appended to the result\n                   sequence. The typed value is a sequence of zero or more atomic values:\n                   specifically, the result of the dm:typed-value accessor as defined in\n                       (See ).A type error is raised  if an item in the\n             sequence $arg is a node that does not have a typed value. A type error is raised \n             if an item in the sequence $arg is a function item. A dynamic error is raised\n             if $arg is omitted\n             and the context item is absent.\n", 
        "params" : [  ]
      }, {
        "description" : " Returns the result of atomizing a sequence, that is, replacing all nodes in the\n             sequence by their typed values.The zero-argument form of this function is deterministic, context-dependent,  and focus-dependent. The one-argument form of this function is deterministic, context-independent,  and focus-independent. If the argument is omitted, it defaults to the context item\n                (.). The behavior of the function if the argument is omitted is exactly\n             the same as if the context item had been passed as the argument. The result of fn:data is the sequence of atomic values produced by\n             applying the following rules to each item in $arg:If the item is an atomic value, it is appended to the result sequence. If the item is a node, the typed value of the node is appended to the result\n                   sequence. The typed value is a sequence of zero or more atomic values:\n                   specifically, the result of the dm:typed-value accessor as defined in\n                       (See ).A type error is raised  if an item in the\n             sequence $arg is a node that does not have a typed value. A type error is raised \n             if an item in the sequence $arg is a function item. A dynamic error is raised\n             if $arg is omitted\n             and the context item is absent.\n", 
        "params" : [ "$arg" ]
      } ], 
      "default-collation" : [ {
        "description" : " Returns the value of the default collation property from the static context.\n          This function is deterministic, context-dependent,  and focus-independent.  It depends on\n \t\tcollations.\n \tReturns the value of the default collation property from the static context. Components\n             of the static context are discussed in .The default collation property can never be absent. If it is not explicitly defined, a\n             system defined default can be invoked. If this is not provided, the Unicode codepoint\n             collation (http://www.w3.org/2005/xpath-functions/collation/codepoint) is\n             used. \n", 
        "params" : [  ]
      } ], 
      "document-uri" : [ {
        "description" : " Returns the URI of a resource where a document can be found, if available.The zero-argument form of this function is deterministic, context-dependent,  and focus-dependent. The one-argument form of this function is deterministic, context-independent,  and focus-independent. If the argument is omitted, it defaults to the context item\n                (.). The behavior of the function if the argument is omitted is exactly\n             the same as if the context item had been passed as the argument.If $arg is the empty sequence, the function returns the empty sequence.If $arg is not a document node, the function returns the empty\n             sequence.Otherwise, the function returns the value of the document-uri accessor\n             applied to $arg, as defined in  (See\n                ).The following errors may be raised when $arg is omitted:If the context\n                item is absent, dynamic error\n                If the context item is not a\n                node, type error .\n", 
        "params" : [  ]
      }, {
        "description" : " Returns the URI of a resource where a document can be found, if available.The zero-argument form of this function is deterministic, context-dependent,  and focus-dependent. The one-argument form of this function is deterministic, context-independent,  and focus-independent. If the argument is omitted, it defaults to the context item\n                (.). The behavior of the function if the argument is omitted is exactly\n             the same as if the context item had been passed as the argument.If $arg is the empty sequence, the function returns the empty sequence.If $arg is not a document node, the function returns the empty\n             sequence.Otherwise, the function returns the value of the document-uri accessor\n             applied to $arg, as defined in  (See\n                ).The following errors may be raised when $arg is omitted:If the context\n                item is absent, dynamic error\n                If the context item is not a\n                node, type error .\n", 
        "params" : [ "$arg" ]
      } ], 
      "encode-for-uri" : [ {
        "description" : " Encodes reserved characters in a string that is intended to be used in the path\n             segment of a URI.This function is deterministic, context-independent,  and focus-independent. If $uri-part is the empty sequence, the function returns the zero-length\n             string.This function applies the URI escaping rules defined in section 2 of  to the xs:string supplied as $uri-part. The\n             effect of the function is to escape reserved characters. Each such character in the\n             string is replaced with its percent-encoded form as described in .Since  recommends that, for consistency, URI producers and\n             normalizers should use uppercase hexadecimal digits for all percent-encodings, this\n             function must always generate hexadecimal values using the upper-case letters A-F.All characters are escaped except those identified as \"unreserved\" by , that is the upper- and lower-case letters A-Z, the digits 0-9,\n             HYPHEN-MINUS (\"-\"), LOW LINE (\"_\"), FULL STOP \".\", and TILDE \"~\".This function escapes URI delimiters and therefore cannot be used indiscriminately to\n             encode \"invalid\" characters in a path segment.This function is invertible but not idempotent. This is because a string containing a\n             percent character will be modified by applying the function: for example\n                100% becomes 100%25, while 100%25 becomes\n                100%2525.\n", 
        "params" : [ "$uri-part" ]
      } ], 
      "escape-html-uri" : [ {
        "description" : " Escapes a URI in the same way that HTML user agents handle attribute values\n             expected to contain URIs.This function is deterministic, context-independent,  and focus-independent. If $uri is the empty sequence, the function returns the zero-length\n             string.Otherwise, the function escapes all characters except\n             printable characters of the US-ASCII coded character set, specifically the codepoints between 32 and 126 (decimal) inclusive. Each\n             character in $uri to be escaped is replaced by an escape sequence, which is\n             formed by encoding the character as a sequence of octets in UTF-8, and then representing\n             each of these octets in the form %HH, where HH is the hexadecimal representation of the\n             octet. This function must always generate hexadecimal values using the upper-case\n             letters A-F.The behavior of this function corresponds to the recommended handling of non-ASCII\n             characters in URI attribute values as described in  Appendix\n             B.2.1.\n", 
        "params" : [ "$uri" ]
      } ], 
      "has-children" : [ {
        "description" : " Returns true if the supplied node has one or more child nodes (of any kind).The zero-argument form of this function is deterministic, context-dependent,  and focus-dependent. The one-argument form of this function is deterministic, context-independent,  and focus-independent. If the argument is omitted, it defaults to the context item (.). The\n             behavior of the function if the argument is omitted is exactly the same as if the\n             context item had been passed as the argument.Provided that the supplied argument $node matches the expected\n          type node()?, the result of the function call fn:has-children($node) is defined to be\n             the same as the result of the expression\n             fn:exists($node/child::node()).The following errors may be raised when $node is omitted:If the context\n                item is absent, dynamic error\n                If the context item is not a\n                node, type error .\n", 
        "params" : [  ]
      }, {
        "description" : " Returns true if the supplied node has one or more child nodes (of any kind).The zero-argument form of this function is deterministic, context-dependent,  and focus-dependent. The one-argument form of this function is deterministic, context-independent,  and focus-independent. If the argument is omitted, it defaults to the context item (.). The\n             behavior of the function if the argument is omitted is exactly the same as if the\n             context item had been passed as the argument.Provided that the supplied argument $node matches the expected\n          type node()?, the result of the function call fn:has-children($node) is defined to be\n             the same as the result of the expression\n             fn:exists($node/child::node()).The following errors may be raised when $node is omitted:If the context\n                item is absent, dynamic error\n                If the context item is not a\n                node, type error .\n", 
        "params" : [ "$node" ]
      } ], 
      "implicit-timezone" : [ {
        "description" : " Returns the value of the implicit timezone property from the dynamic context.\n          This function is deterministic, context-dependent,  and focus-independent.  It depends on\n \t\timplicit timezone.\n \tReturns the value of the implicit timezone property from the dynamic context. Components\n             of the dynamic context are discussed in .\n", 
        "params" : [  ]
      } ], 
      "innermost" : [ {
        "description" : " Returns every node within the input sequence that is not an ancestor of another member\n             of the input sequence; the nodes are returned in document order with duplicates\n             eliminated.This function is deterministic, context-independent,  and focus-independent. The effect of the function call fn:innermost($nodes) is defined to be\n             equivalent to the result of the expression $nodes except\n                $nodes/ancestor::node().That is, the function takes as input a sequence of nodes, and returns every node within\n             the sequence that is not an ancestor of another node within the sequence; the nodes are\n             returned in document order with duplicates eliminated.If the source document contains nested sections represented by div\n                elements, the expression innermost(//div) returns those div\n                elements that do not contain further div elements.\n", 
        "params" : [ "$nodes" ]
      } ], 
      "iri-to-uri" : [ {
        "description" : " Converts a string containing an IRI into a URI according to the rules of\n                .This function is deterministic, context-independent,  and focus-independent. If $iri is the empty sequence, the function returns the zero-length\n             string.Otherwise, the function converts the value of $iri into a URI according to\n             the rules given in Section 3.1 of  by percent-encoding characters\n             that are allowed in an IRI but not in a URI. If $iri contains a character\n             that is invalid in an IRI, such as the space character (see note below), the invalid\n             character is replaced by its percent-encoded form as described in  before the conversion is performed.Since  recommends that, for consistency, URI producers and\n             normalizers should use uppercase hexadecimal digits for all percent-encodings, this\n             function must always generate hexadecimal values using the upper-case letters A-F.The function is idempotent but not invertible. Both the inputs My Documents\n             and My%20Documents will be converted to the output\n                My%20Documents.This function does not check whether $iri is a valid IRI. It treats it as\n             an string and operates on the characters in the string. The following printable ASCII characters are invalid in an IRI: \"&lt;\", \"&gt;\", \n                \"  (double quote), space, \"{\", \"}\", \"|\", \"\\\", \"^\", and \"`\". Since these\n             characters should not appear in an IRI, if they do appear in $iri they will\n             be percent-encoded. In addition, characters outside the range x20-x7E will be percent-encoded because they are invalid in a URI.  Since this function does not escape the PERCENT SIGN \"%\" and this character is not\n             allowed in data within a URI, users wishing to convert character strings (such as file\n             names) that include \"%\" to a URI should manually escape \"%\" by replacing it with \"%25\".\n          \n", 
        "params" : [ "$iri" ]
      } ], 
      "lang" : [ {
        "description" : " This function tests whether the language of $node, or the context\n             item if the second argument is omitted, as specified by xml:lang attributes\n             is the same as, or is a sublanguage of, the language specified by\n             $testlang.The one-argument form of this function is deterministic, context-dependent,  and focus-dependent. The two-argument form of this function is deterministic, context-independent,  and focus-independent. The behavior of the function if the second argument is omitted is exactly the same as if\n             the context item (.) had been passed as the second argument.The language of the argument $node, or the context item if the second\n             argument is omitted, is determined by the value of the xml:lang attribute\n             on the node, or, if the node has no such attribute, by the value of the\n                xml:lang attribute on the nearest ancestor of the node that has an\n                xml:lang attribute. If there is no such ancestor, then the function\n             returns false. If $testlang is the empty sequence it is interpreted as the zero-length\n             string.The relevant xml:lang attribute is determined by the value of the XPath\n             expression:(ancestor-or-self::*/@xml:lang)[last()]If this expression returns an empty sequence, the function returns false. Otherwise, the function returns true if and only if, based on a caseless\n             default match as specified in section 3.13 of , either:\n                   $testlang is equal to the string-value of the relevant\n                      xml:lang attribute, or\n                   $testlang is equal to some substring of the string-value of the\n                   relevant xml:lang attribute that starts at the start of the\n                   string-value and ends immediately before a hyphen, \"-\" (the character \"-\" is\n                   HYPHEN-MINUS, #x002D).The following errors may be raised when $arg is omitted:If the context\n                item is absent, dynamic error\n                If the context item is not a\n                node, type error .\n", 
        "params" : [ "$testlang" ]
      }, {
        "description" : " This function tests whether the language of $node, or the context\n             item if the second argument is omitted, as specified by xml:lang attributes\n             is the same as, or is a sublanguage of, the language specified by\n             $testlang.The one-argument form of this function is deterministic, context-dependent,  and focus-dependent. The two-argument form of this function is deterministic, context-independent,  and focus-independent. The behavior of the function if the second argument is omitted is exactly the same as if\n             the context item (.) had been passed as the second argument.The language of the argument $node, or the context item if the second\n             argument is omitted, is determined by the value of the xml:lang attribute\n             on the node, or, if the node has no such attribute, by the value of the\n                xml:lang attribute on the nearest ancestor of the node that has an\n                xml:lang attribute. If there is no such ancestor, then the function\n             returns false. If $testlang is the empty sequence it is interpreted as the zero-length\n             string.The relevant xml:lang attribute is determined by the value of the XPath\n             expression:(ancestor-or-self::*/@xml:lang)[last()]If this expression returns an empty sequence, the function returns false. Otherwise, the function returns true if and only if, based on a caseless\n             default match as specified in section 3.13 of , either:\n                   $testlang is equal to the string-value of the relevant\n                      xml:lang attribute, or\n                   $testlang is equal to some substring of the string-value of the\n                   relevant xml:lang attribute that starts at the start of the\n                   string-value and ends immediately before a hyphen, \"-\" (the character \"-\" is\n                   HYPHEN-MINUS, #x002D).The following errors may be raised when $arg is omitted:If the context\n                item is absent, dynamic error\n                If the context item is not a\n                node, type error .\n", 
        "params" : [ "$testlang", "$node" ]
      } ], 
      "last" : [ {
        "description" : " Returns the context size from the dynamic context.This function is deterministic, context-dependent,  and focus-dependent. Returns the context size from the dynamic context. (See .)A dynamic error is raised  if the\n             context item is absent.\n", 
        "params" : [  ]
      } ], 
      "local-name" : [ {
        "description" : " Returns the local part of the name of $arg as an\n                xs:string that is either the zero-length string, or has the lexical form\n             of an xs:NCName.The zero-argument form of this function is deterministic, context-dependent,  and focus-dependent. The one-argument form of this function is deterministic, context-independent,  and focus-independent. If the argument is omitted, it defaults to the context item (.). The\n             behavior of the function if the argument is omitted is exactly the same as if the\n             context item had been passed as the argument.If the argument is supplied and is the empty sequence, the function returns the\n             zero-length string.If the node identified by $arg has no name (that is, if it is a document\n             node, a comment, a text node, or a namespace node having no name), the function returns\n             the zero-length string.Otherwise, the function returns the local part of the expanded-QName of the node\n             identified by $arg, as determined by the dm:node-name accessor\n             defined in ). This will be an\n                xs:string whose lexical form is an xs:NCName.The following errors may be raised when $arg is omitted:If the context\n                item is absent, dynamic error\n                If the context item is not a\n                node, type error .\n", 
        "params" : [  ]
      }, {
        "description" : " Returns the local part of the name of $arg as an\n                xs:string that is either the zero-length string, or has the lexical form\n             of an xs:NCName.The zero-argument form of this function is deterministic, context-dependent,  and focus-dependent. The one-argument form of this function is deterministic, context-independent,  and focus-independent. If the argument is omitted, it defaults to the context item (.). The\n             behavior of the function if the argument is omitted is exactly the same as if the\n             context item had been passed as the argument.If the argument is supplied and is the empty sequence, the function returns the\n             zero-length string.If the node identified by $arg has no name (that is, if it is a document\n             node, a comment, a text node, or a namespace node having no name), the function returns\n             the zero-length string.Otherwise, the function returns the local part of the expanded-QName of the node\n             identified by $arg, as determined by the dm:node-name accessor\n             defined in ). This will be an\n                xs:string whose lexical form is an xs:NCName.The following errors may be raised when $arg is omitted:If the context\n                item is absent, dynamic error\n                If the context item is not a\n                node, type error .\n", 
        "params" : [ "$arg" ]
      } ], 
      "name" : [ {
        "description" : " Returns the name of a node, as an xs:string that is either the\n             zero-length string, or has the lexical form of an xs:QName. The zero-argument form of this function is deterministic, context-dependent,  and focus-dependent. The one-argument form of this function is deterministic, context-independent,  and focus-independent. If the argument is omitted, it defaults to the context item (.). The\n             behavior of the function if the argument is omitted is exactly the same as if the\n             context item had been passed as the argument.If the argument is supplied and is the empty sequence, the function returns the\n             zero-length string.If the node identified by $arg has no name (that is, if it is a document\n             node, a comment, a text node, or a namespace node having no name), the function returns\n             the zero-length string.Otherwise, the function returns the value of the expression\n                fn:string(fn:node-name($arg)).The following errors may be raised when $arg is omitted:If the context\n                item is absent, dynamic error\n                If the context item is not a\n                node, type error .\n", 
        "params" : [  ]
      }, {
        "description" : " Returns the name of a node, as an xs:string that is either the\n             zero-length string, or has the lexical form of an xs:QName. The zero-argument form of this function is deterministic, context-dependent,  and focus-dependent. The one-argument form of this function is deterministic, context-independent,  and focus-independent. If the argument is omitted, it defaults to the context item (.). The\n             behavior of the function if the argument is omitted is exactly the same as if the\n             context item had been passed as the argument.If the argument is supplied and is the empty sequence, the function returns the\n             zero-length string.If the node identified by $arg has no name (that is, if it is a document\n             node, a comment, a text node, or a namespace node having no name), the function returns\n             the zero-length string.Otherwise, the function returns the value of the expression\n                fn:string(fn:node-name($arg)).The following errors may be raised when $arg is omitted:If the context\n                item is absent, dynamic error\n                If the context item is not a\n                node, type error .\n", 
        "params" : [ "$arg" ]
      } ], 
      "namespace-uri" : [ {
        "description" : " Returns the namespace URI part of the name of\n                $arg, as an xs:anyURI value.The zero-argument form of this function is deterministic, context-dependent,  and focus-dependent. The one-argument form of this function is deterministic, context-independent,  and focus-independent. If the argument is omitted, it defaults to the context node (.). The\n             behavior of the function if the argument is omitted is exactly the same as if the\n             context item had been passed as the argument.If the node identified by $arg is neither an element nor an attribute node,\n             or if it is an element or attribute node whose expanded-QName (as determined by the\n                dm:node-name accessor in the )\n             is in no namespace, then the function returns the zero-length xs:anyURI\n             value.Otherwise, the result will be the namespace URI part of the expanded-QName of the node\n             identified by $arg, as determined by the dm:node-name accessor\n             defined in ), returned as an\n                xs:anyURI value.The following errors may be raised when $arg is omitted:If the context\n                item is absent, dynamic error\n                If the context item is not a\n                node, type error .\n", 
        "params" : [  ]
      }, {
        "description" : " Returns the namespace URI part of the name of\n                $arg, as an xs:anyURI value.The zero-argument form of this function is deterministic, context-dependent,  and focus-dependent. The one-argument form of this function is deterministic, context-independent,  and focus-independent. If the argument is omitted, it defaults to the context node (.). The\n             behavior of the function if the argument is omitted is exactly the same as if the\n             context item had been passed as the argument.If the node identified by $arg is neither an element nor an attribute node,\n             or if it is an element or attribute node whose expanded-QName (as determined by the\n                dm:node-name accessor in the )\n             is in no namespace, then the function returns the zero-length xs:anyURI\n             value.Otherwise, the result will be the namespace URI part of the expanded-QName of the node\n             identified by $arg, as determined by the dm:node-name accessor\n             defined in ), returned as an\n                xs:anyURI value.The following errors may be raised when $arg is omitted:If the context\n                item is absent, dynamic error\n                If the context item is not a\n                node, type error .\n", 
        "params" : [ "$arg" ]
      } ], 
      "nilled" : [ {
        "description" : " Returns true for an element that is nilled.The zero-argument form of this function is deterministic, context-dependent,  and focus-dependent. The one-argument form of this function is deterministic, context-independent,  and focus-independent. If the argument is omitted, it defaults to the context item (.). The\n             behavior of the function if the argument is omitted is exactly the same as if the\n             context item had been passed as the argument.If $arg is the empty sequence, the function returns the empty sequence.Otherwise the function returns the result of the dm:nilled accessor as\n             defined in  (see ).The following errors may be raised when $arg is omitted:If the context\n                item is absent, dynamic error\n                If the context item is not a\n                node, type error .\n", 
        "params" : [  ]
      }, {
        "description" : " Returns true for an element that is nilled.The zero-argument form of this function is deterministic, context-dependent,  and focus-dependent. The one-argument form of this function is deterministic, context-independent,  and focus-independent. If the argument is omitted, it defaults to the context item (.). The\n             behavior of the function if the argument is omitted is exactly the same as if the\n             context item had been passed as the argument.If $arg is the empty sequence, the function returns the empty sequence.Otherwise the function returns the result of the dm:nilled accessor as\n             defined in  (see ).The following errors may be raised when $arg is omitted:If the context\n                item is absent, dynamic error\n                If the context item is not a\n                node, type error .\n", 
        "params" : [ "$arg" ]
      } ], 
      "node-name" : [ {
        "description" : " Returns the name of a node, as an xs:QName.The zero-argument form of this function is deterministic, context-dependent,  and focus-dependent. The one-argument form of this function is deterministic, context-independent,  and focus-independent. If the argument is omitted, it defaults to the context item\n                (.). The behavior of the function if the argument is omitted is exactly\n             the same as if the context item had been passed as the argument.If $arg is the empty sequence, the empty sequence is returned.Otherwise, the function returns the result of the dm:node-name accessor as\n             defined in  (see ).The following errors may be raised when $arg is omitted:If the context\n                item is absent, dynamic error\n                If the context item is not a\n                node, type error .\n", 
        "params" : [  ]
      }, {
        "description" : " Returns the name of a node, as an xs:QName.The zero-argument form of this function is deterministic, context-dependent,  and focus-dependent. The one-argument form of this function is deterministic, context-independent,  and focus-independent. If the argument is omitted, it defaults to the context item\n                (.). The behavior of the function if the argument is omitted is exactly\n             the same as if the context item had been passed as the argument.If $arg is the empty sequence, the empty sequence is returned.Otherwise, the function returns the result of the dm:node-name accessor as\n             defined in  (see ).The following errors may be raised when $arg is omitted:If the context\n                item is absent, dynamic error\n                If the context item is not a\n                node, type error .\n", 
        "params" : [ "$arg" ]
      } ], 
      "number" : [ {
        "description" : " Returns the value indicated by $arg or, if $arg is\n             not specified, the context item after atomization, converted to an\n                xs:double. The zero-argument form of this function is deterministic, context-dependent,  and focus-dependent. The one-argument form of this function is deterministic, context-independent,  and focus-independent. Calling the zero-argument version of the function is defined to give the same result as\n             calling the single-argument version with the context item (.). That is,\n                fn:number() is equivalent to fn:number(.), as\n          defined by the rules that follow.If $arg is the empty sequence or if $arg or the context item\n             cannot be converted to an xs:double, the xs:double value\n                NaN is returned. Otherwise, $arg , or the context item after atomization, is converted to an\n                xs:double following the rules of . If\n             the conversion to xs:double fails, the xs:double value\n                NaN is returned.A dynamic error is raised  if\n                $arg is omitted and the context item is absent.As a consequence of the rules given above, a type error occurs if the context\n          item cannot be atomized, or if the result of atomizing the context item is a sequence containing\n          more than one atomic value.\n", 
        "params" : [  ]
      }, {
        "description" : " Returns the value indicated by $arg or, if $arg is\n             not specified, the context item after atomization, converted to an\n                xs:double. The zero-argument form of this function is deterministic, context-dependent,  and focus-dependent. The one-argument form of this function is deterministic, context-independent,  and focus-independent. Calling the zero-argument version of the function is defined to give the same result as\n             calling the single-argument version with the context item (.). That is,\n                fn:number() is equivalent to fn:number(.), as\n          defined by the rules that follow.If $arg is the empty sequence or if $arg or the context item\n             cannot be converted to an xs:double, the xs:double value\n                NaN is returned. Otherwise, $arg , or the context item after atomization, is converted to an\n                xs:double following the rules of . If\n             the conversion to xs:double fails, the xs:double value\n                NaN is returned.A dynamic error is raised  if\n                $arg is omitted and the context item is absent.As a consequence of the rules given above, a type error occurs if the context\n          item cannot be atomized, or if the result of atomizing the context item is a sequence containing\n          more than one atomic value.\n", 
        "params" : [ "$arg" ]
      } ], 
      "outermost" : [ {
        "description" : " Returns every node within the input sequence that has no ancestor that is itself a\n             member of the input sequence; the nodes are returned in document order with duplicates\n             eliminated.This function is deterministic, context-independent,  and focus-independent. The effect of the function call fn:outermost($nodes) is defined to be\n             equivalent to the result of the expression $nodes[not(ancestor::node() intersect\n                $nodes)]/..That is, the function takes as input a sequence of nodes, and returns every node within\n             the sequence that does not have another node within the sequence as an ancestor; the nodes are\n             returned in document order with duplicates eliminated.The formulation $nodes except $nodes/descendant::node() might appear to be\n             simpler, but does not correctly account for attribute nodes, as these are not\n             descendants of their parent element.The motivation for the function was based on XSLT streaming use cases. There are cases\n             where the  streaming rules allow the construct\n                outermost(//section) but do not allow //section; the\n             function can therefore be useful in cases where it is known that sections will not be\n             nested, as well as cases where the application actually wishes to process all sections\n             except those that are nested within another.\n", 
        "params" : [ "$nodes" ]
      } ], 
      "position" : [ {
        "description" : " Returns the context position from the dynamic context.This function is deterministic, context-dependent,  and focus-dependent. Returns the context position from the dynamic context. (See .)A dynamic error is raised  if the\n             context item is absent.\n", 
        "params" : [  ]
      } ], 
      "resolve-uri" : [ {
        "description" : " Resolves a relative IRI reference against an absolute IRI.The one-argument form of this function is deterministic, context-dependent,  and focus-independent.  It depends on\n \t\tstatic base uri.\n \tThe two-argument form of this function is deterministic, context-independent,  and focus-independent. If the second argument is absent, the effect is the same as calling the two-argument\n             function with the value of fn:static-base-uri() as the second argument.The function is defined to operate on IRI references as defined in , and the implementation must permit all arguments that are valid\n             according to that specification. In addition, the implementation may\n             accept some or all strings that conform to the rules for (absolute or relative) Legacy\n             Extended IRI references as defined in . For the purposes of this\n             section, the terms IRI and IRI reference include these extensions, insofar as the\n             implementation chooses to support them.If $relative is the empty sequence, the function returns the empty\n             sequence.If $relative is an absolute IRI (as defined above), then it is returned\n             unchanged.Otherwise, the function resolves the relative IRI reference $relative\n             against the base IRI $base using the algorithm defined in , adapted by treating any character\n             that would not be valid in an RFC3986 URI or relative reference in the same way that\n             RFC3986 treats unreserved characters. No percent-encoding takes place.The first form of this function resolves $relative against the value of the\n             base-uri property from the static context. A dynamic error is raised  if the base-uri property is not initialized in the static context. A dynamic error is raised  if $relative is not a\n             valid IRI according to the rules of RFC3987, extended with an implementation-defined\n             subset of the extensions permitted in LEIRI, or if it is not a suitable relative\n             reference to use as input to the RFC3986 resolution algorithm extended to handle\n             additional unreserved characters. A dynamic error is raised  if $base is not a\n             valid IRI according to the rules of RFC3987, extended with an implementation-defined\n             subset of the extensions permitted in LEIRI, or if it is not a suitable IRI to use as\n             input to the chosen resolution algorithm (for example, if it is a relative IRI\n             reference, if it is a non-hierarchic URI, or if it contains a fragment identifier). A dynamic error is raised  if the chosen resolution algorithm\n             fails for any other reason. \n", 
        "params" : [ "$relative" ]
      }, {
        "description" : " Resolves a relative IRI reference against an absolute IRI.The one-argument form of this function is deterministic, context-dependent,  and focus-independent.  It depends on\n \t\tstatic base uri.\n \tThe two-argument form of this function is deterministic, context-independent,  and focus-independent. If the second argument is absent, the effect is the same as calling the two-argument\n             function with the value of fn:static-base-uri() as the second argument.The function is defined to operate on IRI references as defined in , and the implementation must permit all arguments that are valid\n             according to that specification. In addition, the implementation may\n             accept some or all strings that conform to the rules for (absolute or relative) Legacy\n             Extended IRI references as defined in . For the purposes of this\n             section, the terms IRI and IRI reference include these extensions, insofar as the\n             implementation chooses to support them.If $relative is the empty sequence, the function returns the empty\n             sequence.If $relative is an absolute IRI (as defined above), then it is returned\n             unchanged.Otherwise, the function resolves the relative IRI reference $relative\n             against the base IRI $base using the algorithm defined in , adapted by treating any character\n             that would not be valid in an RFC3986 URI or relative reference in the same way that\n             RFC3986 treats unreserved characters. No percent-encoding takes place.The first form of this function resolves $relative against the value of the\n             base-uri property from the static context. A dynamic error is raised  if the base-uri property is not initialized in the static context. A dynamic error is raised  if $relative is not a\n             valid IRI according to the rules of RFC3987, extended with an implementation-defined\n             subset of the extensions permitted in LEIRI, or if it is not a suitable relative\n             reference to use as input to the RFC3986 resolution algorithm extended to handle\n             additional unreserved characters. A dynamic error is raised  if $base is not a\n             valid IRI according to the rules of RFC3987, extended with an implementation-defined\n             subset of the extensions permitted in LEIRI, or if it is not a suitable IRI to use as\n             input to the chosen resolution algorithm (for example, if it is a relative IRI\n             reference, if it is a non-hierarchic URI, or if it contains a fragment identifier). A dynamic error is raised  if the chosen resolution algorithm\n             fails for any other reason. \n", 
        "params" : [ "$relative", "$base" ]
      } ], 
      "root" : [ {
        "description" : " Returns the root of the tree to which $arg belongs. This will\n             usually, but not necessarily, be a document node.The zero-argument form of this function is deterministic, context-dependent,  and focus-dependent. The one-argument form of this function is deterministic, context-independent,  and focus-independent. If the function is called without an argument, the context item (.) is used\n             as the default argument. The behavior of the function if the argument is omitted is\n             exactly the same as if the context item had been passed as the argument.The function returns the value of the expression\n                ($arg/ancestor-or-self::node())[1].The following errors may be raised when $arg is omitted:If the context\n                item is absent, dynamic error\n                If the context item is not a\n                node, type error .\n", 
        "params" : [  ]
      }, {
        "description" : " Returns the root of the tree to which $arg belongs. This will\n             usually, but not necessarily, be a document node.The zero-argument form of this function is deterministic, context-dependent,  and focus-dependent. The one-argument form of this function is deterministic, context-independent,  and focus-independent. If the function is called without an argument, the context item (.) is used\n             as the default argument. The behavior of the function if the argument is omitted is\n             exactly the same as if the context item had been passed as the argument.The function returns the value of the expression\n                ($arg/ancestor-or-self::node())[1].The following errors may be raised when $arg is omitted:If the context\n                item is absent, dynamic error\n                If the context item is not a\n                node, type error .\n", 
        "params" : [ "$arg" ]
      } ], 
      "static-base-uri" : [ {
        "description" : " This function returns the value of the Static Base URI property from the static context.This function is deterministic, context-dependent,  and focus-independent.  It depends on\n \t\tstatic base uri.\n \tThe function returns the value of the Static Base URI property from the static context. If the\n             property is absent, the empty sequence is returned.Components of the static context are discussed in  .XQuery 3.0 and XSLT 3.0 give an implementation freedom to use different base URIs during the\n          static analysis phase and the dynamic evaluation phase, that is, for compile-time and run-time resources respectively.\n          In this situation, the fn:static-base-uri function should return a URI suitable for locating resources needed\n          during dynamic evaluation.\n", 
        "params" : [  ]
      } ], 
      "string" : [ {
        "description" : " Returns the value of $arg represented as an\n             xs:string.The zero-argument form of this function is deterministic, context-dependent,  and focus-dependent. The one-argument form of this function is deterministic, context-independent,  and focus-independent. In the zero-argument version of the function, $arg defaults to the context\n             item. That is, calling fn:string() is equivalent to calling\n                fn:string(.).If $arg is the empty sequence, the function returns the zero-length\n             string.If $arg is a node, the function returns the string-value of the node, as\n             obtained using the dm:string-value accessor defined in  (see ).If $arg is an atomic value, the function returns the result of the\n             expression $arg cast as xs:string (see ).A dynamic error is raised  by the\n             zero-argument version of the function if the context item is absent. A type error is raised  if\n                $arg is a function item. \n", 
        "params" : [  ]
      }, {
        "description" : " Returns the value of $arg represented as an\n             xs:string.The zero-argument form of this function is deterministic, context-dependent,  and focus-dependent. The one-argument form of this function is deterministic, context-independent,  and focus-independent. In the zero-argument version of the function, $arg defaults to the context\n             item. That is, calling fn:string() is equivalent to calling\n                fn:string(.).If $arg is the empty sequence, the function returns the zero-length\n             string.If $arg is a node, the function returns the string-value of the node, as\n             obtained using the dm:string-value accessor defined in  (see ).If $arg is an atomic value, the function returns the result of the\n             expression $arg cast as xs:string (see ).A dynamic error is raised  by the\n             zero-argument version of the function if the context item is absent. A type error is raised  if\n                $arg is a function item. \n", 
        "params" : [ "$arg" ]
      } ]
    }
  }, 
  "http://www.w3.org/2005/xpath-functions/math" : {
    "description" : " This module contains all the functions part of the\n W3C XPath and XQuery Functions and Operators 3.0\n section \"4.7 Trigonometric and exponential functions\".\n", 
    "functions" : {
      "pi" : [ {
        "description" : " Returns an approximation to the mathematical constant π.This function is deterministic, context-independent,  and focus-independent. This function returns the xs:double value whose lexical representation is\n             3.141592653589793e0The expression 2*math:pi() returns 6.283185307179586e0.The expression 60 * (math:pi() div 180) converts an angle of 60 degrees\n                to radians. \n", 
        "params" : [  ]
      } ], 
      "exp" : [ {
        "description" : " Returns the value of ex.This function is deterministic, context-independent,  and focus-independent. If $arg is the empty sequence, the function returns the empty sequence.Otherwise the result is the mathematical constant e\n             raised to the power of $arg, as defined in the \n             specification of the exp function applied to 64-bit binary floating point\n             values.The treatment of overflow and underflow is defined in .\n", 
        "params" : [ "$arg" ]
      } ], 
      "exp10" : [ {
        "description" : " Returns the value of 10x.This function is deterministic, context-independent,  and focus-independent. If $arg is the empty sequence, the function returns the empty sequence.Otherwise the result is ten raised to the power of $arg,\n             as defined in the  specification of the exp10\n             function applied to 64-bit binary floating point values.The treatment of overflow and underflow is defined in .\n", 
        "params" : [ "$arg" ]
      } ], 
      "log" : [ {
        "description" : " Returns the natural logarithm of the argument.This function is deterministic, context-independent,  and focus-independent. If $arg is the empty sequence, the function returns the empty sequence.Otherwise the result is the natural logarithm of $arg, as\n             defined in the  specification of the log\n             function applied to 64-bit binary floating point values.The treatment of divideByZero and invalidOperation exceptions\n             is defined in . The effect is that if the argument is less\n             than or equal to zero, the result is NaN.\n", 
        "params" : [ "$arg" ]
      } ], 
      "log10" : [ {
        "description" : " Returns the base-ten logarithm of the argument.This function is deterministic, context-independent,  and focus-independent. If $arg is the empty sequence, the function returns the empty sequence.Otherwise the result is the base-10 logarithm of $arg, as\n             defined in the  specification of the log10\n             function applied to 64-bit binary floating point values.The treatment of divideByZero and invalidOperation exceptions\n             is defined in . The effect is that if the argument is less\n             than or equal to zero, the result is NaN.\n", 
        "params" : [ "$arg" ]
      } ], 
      "pow" : [ {
        "description" : " Returns the result of raising the first argument to the power of the\n             second.This function is deterministic, context-independent,  and focus-independent. If $x is the empty sequence, the function returns the empty sequence.If $y is an instance of xs:integer, the result is\n                $x raised to the power of $y as defined in the  specification of the pown function applied to a\n             64-bit binary floating point value and an integer.Otherwise $y is converted to an xs:double by numeric\n             promotion, and the result is the value of $x raised to the power of\n                $y as defined in the  specification of the\n                pow function applied to two 64-bit binary floating point values.The treatment of the divideByZero and invalidOperation\n             exceptions is defined in . Some of the consequences are\n             illustrated in the examples below.\n", 
        "params" : [ "$x", "$y" ]
      } ], 
      "sqrt" : [ {
        "description" : " Returns the non-negative square root of the argument.This function is deterministic, context-independent,  and focus-independent. If $arg is the empty sequence, the function returns the empty sequence.Otherwise the result is the mathematical non-negative square root of\n                $arg as defined in the  specification of the\n                squareRoot function applied to 64-bit binary floating point values.The treatment of the invalidOperation exception is defined in . The effect is that if the argument is less than zero, the result\n             is NaN.If $arg is positive or negative zero, positive infinity, or\n                NaN, then the result is $arg. (Negative zero is the only\n             case where the result can have negative sign)\n", 
        "params" : [ "$arg" ]
      } ], 
      "sin" : [ {
        "description" : " Returns the sine of the argument, expressed in radians.This function is deterministic, context-independent,  and focus-independent. If $θ is the empty sequence, the function returns the empty\n             sequence.Otherwise the result is the sine of $θ,\n             treated as an angle in radians, as defined in the \n             specification of the sin function applied to 64-bit binary floating point\n             values.The treatment of the invalidOperation and underflow exceptions\n             is defined in . If $θ is positive or negative zero, the result is\n                $θ.If $θ is positive or negative infinity, or NaN,\n             then the result is NaN.Otherwise the result is always in the range -1.0e0 to +1.0e0\n", 
        "params" : [ "$theta" ]
      } ], 
      "cos" : [ {
        "description" : " Returns the cosine of the argument, expressed in radians.This function is deterministic, context-independent,  and focus-independent. If $θ is the empty sequence, the function returns the empty\n             sequence.If $θ is positive or negative infinity, or NaN,\n             then the result is NaN.Otherwise the result is the cosine of $θ,\n             treated as an angle in radians, as defined in the \n             specification of the cos function applied to 64-bit binary floating point\n             values.The treatment of the invalidOperation exception is defined in . If $θ is positive or negative zero, the result is\n                $θ.If $θ is positive or negative infinity, or NaN,\n             then the result is NaN.Otherwise the result is always in the range -1.0e0 to +1.0e0\n", 
        "params" : [ "$theta" ]
      } ], 
      "tan" : [ {
        "description" : " Returns the tangent of the argument, expressed in radians.This function is deterministic, context-independent,  and focus-independent. If $θ is the empty sequence, the function returns the empty\n             sequence.Otherwise the result is the tangent of $θ,\n             treated as an angle in radians, as defined in the \n             specification of the tan function applied to 64-bit binary floating point\n             values.The treatment of the invalidOperation and underflow exceptions\n             is defined in . If $θ is positive or negative infinity, or NaN,\n             then the result is NaN.\n", 
        "params" : [ "$theta" ]
      } ], 
      "asin" : [ {
        "description" : " Returns the arc sine of the argument, the result being in the range\n                -π/2 to +π/2 radians.This function is deterministic, context-independent,  and focus-independent. If $arg is the empty sequence, the function returns the empty sequence.Otherwise the result is the arc sine of $θ,\n             treated as an angle in radians, as defined in the \n             specification of the asin function applied to 64-bit binary floating point\n             values.The treatment of the invalidOperation and underflow exceptions\n             is defined in . If $arg is positive or negative zero, the result is $arg.If $arg is NaN, or if its absolute value is greater than one,\n             then the result is NaN.In other cases the result is an xs:double value representing an angle\n                θ in radians in the range -π/2 &lt;=\n                $θ &lt;= +π/2. \n", 
        "params" : [ "$arg" ]
      } ], 
      "acos" : [ {
        "description" : " Returns the arc cosine of the argument, the result being in the range zero to\n                +π radians.This function is deterministic, context-independent,  and focus-independent. If $arg is the empty sequence, the function returns the empty sequence.Otherwise the result is the arc cosine of $θ,\n             treated as an angle in radians, as defined in the \n             specification of the acos function applied to 64-bit binary floating point\n             values.The treatment of the invalidOperation exception is defined in . If $arg is NaN, or if its absolute value is greater than one,\n             then the result is NaN.In other cases the result is an xs:double value representing an angle\n                θ in radians in the range 0 &lt;= $θ &lt;=\n                +π. \n", 
        "params" : [ "$arg" ]
      } ], 
      "atan" : [ {
        "description" : " Returns the arc tangent of the argument, the result being in the range\n                -π/2 to +π/2 radians.This function is deterministic, context-independent,  and focus-independent. If $arg is the empty sequence, the function returns the empty sequence.Otherwise the result is the arc tangent of $θ,\n             treated as an angle in radians, as defined in the \n             specification of the atan function applied to 64-bit binary floating point\n             values.The treatment of the underflow exception is defined in . If $arg is positive or negative zero, the result is $arg.If $arg is NaN then the result is NaN.In other cases the result is an xs:double value representing an angle\n                θ in radians in the range -π/2 &lt;=\n                $θ &lt;= +π/2. \n", 
        "params" : [ "$arg" ]
      } ], 
      "atan2" : [ {
        "description" : " Returns the angle in radians subtended at the origin by the point on a plane\n             with coordinates (x, y) and the positive x-axis, the result being in the range\n                -π to +π.This function is deterministic, context-independent,  and focus-independent. The result is the value of atan2(y, x) as defined in the\n                 specification of the atan2 function applied\n             to 64-bit binary floating point values.The treatment of the underflow exception is defined in . If either argument is NaN\n             then the result is NaN.If $y is positive and $x is positive and finite, then\n             (subject to rules for overflow, underflow and approximation)\n          the value of atan2($y, $x) is atan($y div $x).If $y is positive and $x is negative and finite, then\n             (subject to the same caveats)\n             the value of atan2($y, $x) is π - atan($y div $x).Some results for special values of the arguments are shown in the examples below.\n", 
        "params" : [ "$y", "$x" ]
      } ]
    }
  }, 
  "http://www.w3.org/2005/xqt-errors" : {
    "description" : " This module contains one variable declaration for each diagnostic of the\n http://www.w3.org/2005/xqt-errors namespace.\n The variables serves as documentation for the errors but can also\n be used in the code. For example, one useful scenario is to compare\n an error caught in the catch clause of a try-catch expression with one of\n the variables.\n", 
    "functions" : {

    }
  }, 
  "http://www.zorba-xquery.com/modules/converters/html" : {
    "description" : " \n This module provides functions to tidy a HTML document. \n The functions in this module take an HTML document (a string) as parameter,\n tidy it in order to result in valid XHTML, and return this XHTML document as a document-node.\n \n", 
    "functions" : {
      "parse" : [ {
        "description" : " This function tidies the given HTML string and returns\n a valid XHTML document node.\n This functions automatically sets the following tidying parameters:\n   \n    output-xml=yes\n    doctype=omit\n    quote-nbsp=no\n    char-encoding=utf8\n    newline=LF\n    tidy-mark=no\n   \n \n", 
        "params" : [ "$html" ]
      }, {
        "description" : " This function tidies the given HTML string and returns\n a valid XHTML document node.\n The second parameter allows to specify options that\n configure the tidy process. This parameter is a sequence\n of name=value pairs. Allowed parameter names and values\n are documented at \n http://tidy.sourceforge.net/docs/quickref.html.\n", 
        "params" : [ "$html", "$options" ]
      } ], 
      "parse-internal" : [ {
        "description" : "", 
        "params" : [ "$html", "$options" ]
      } ]
    }
  }, 
  "http://www.zorba-xquery.com/modules/email/imap" : {
    "description" : " This module provides functions for accessing and manipulating emails on mail\n servers through the IMAP protocol.\n All functions in this module receive as the first argument the IMAP host and user\n information. This is an element with the type hostInfoType as defined\n in the email schema: http://www.zorba-xquery.com/modules/email.\n For example:\n \n &lt;email:hostInfo&gt;\n   &lt;email:hostName&gt;imap.example.com&lt;/email:hostName&gt;\n   &lt;email:userName&gt;myuser&lt;/email:userName&gt;\n   &lt;email:password&gt;mypassword&lt;/email:password&gt;\n &lt;/email:hostInfo&gt;\n \n The hostInfoType only needs to be in the email schema namespace\n (http://www.zorba-xquery.com/modules/email). It does not need\n to be validated since it's validated by the module.\n", 
    "functions" : {
      "status" : [ {
        "description" : " Returns the status of the given mailbox.\n The status of a mailbox contains:\n \n  messages: the number of messages in the mailbox\n  recent: the number of messages flagged as recent\n  unseen: the number of messages flagged as unseen\n  uidnext: the next unique identifier that will be assigned to a message\n  uidvalidity: a value that, together with the uidnext value\n    forms a 64 bit number that must be unique for the server\n \n", 
        "params" : [ "$host-info", "$mailbox" ]
      } ], 
      "status-impl" : [ {
        "description" : "", 
        "params" : [ "$host-info", "$mailbox" ]
      } ], 
      "create" : [ {
        "description" : " Creates a new mailbox for the given user.\n", 
        "params" : [ "$host-info", "$mailbox-name" ]
      } ], 
      "create-impl" : [ {
        "description" : "", 
        "params" : [ "$host-info", "$mailbox-name" ]
      } ], 
      "delete" : [ {
        "description" : " Deletes a mailbox for the given user.\n", 
        "params" : [ "$host-info", "$mailbox-name" ]
      } ], 
      "delete-impl" : [ {
        "description" : "", 
        "params" : [ "$host-info", "$mailbox-name" ]
      } ], 
      "rename" : [ {
        "description" : " Renames a mailbox.\n", 
        "params" : [ "$host-info", "$mailbox-old", "$mailbox-new" ]
      } ], 
      "rename-impl" : [ {
        "description" : "", 
        "params" : [ "$host-info", "$mailbox-old", "$mailbox-new" ]
      } ], 
      "list" : [ {
        "description" : " Lists IMAP folders for the specified user on the host that match the pattern.\n", 
        "params" : [ "$host-info", "$mailbox-ref", "$pattern", "$only-subscribed" ]
      } ], 
      "list-impl" : [ {
        "description" : "", 
        "params" : [ "$host-info", "$mailbox-ref", "$pattern", "$only-subscribed" ]
      } ], 
      "subscribe" : [ {
        "description" : " Subscribes the user to the specified mailbox.\n", 
        "params" : [ "$host-info", "$mailbox" ]
      } ], 
      "subscribe-impl" : [ {
        "description" : "", 
        "params" : [ "$host-info", "$mailbox" ]
      } ], 
      "unsubscribe" : [ {
        "description" : " Unsubscribes the user from the specified mailbox.\n", 
        "params" : [ "$host-info", "$mailbox" ]
      } ], 
      "unsubscribe-impl" : [ {
        "description" : "", 
        "params" : [ "$host-info", "$mailbox" ]
      } ], 
      "expunge" : [ {
        "description" : " Permanently deletes all messages of the given mailbox that have the \"deleted\" flag set.\n", 
        "params" : [ "$host-info", "$mailbox" ]
      } ], 
      "expunge-impl" : [ {
        "description" : "", 
        "params" : [ "$host-info", "$mailbox" ]
      } ], 
      "search" : [ {
        "description" : " Searches a mailbox for messages that match the given criteria.\n The criteria should be a string as defined in the RFC3501 (IMAP4rev1).\n A valid example would be: 'FROM zorba@gmail.com OR NOT SUBJECT Bug'.\n Depending on the value of $uid, the function will either\n return matching sequence numbers or unique identifiers.\n", 
        "params" : [ "$host-info", "$mailbox", "$criteria", "$uid" ]
      } ], 
      "search-impl" : [ {
        "description" : "", 
        "params" : [ "$host-info", "$mailbox", "$criteria", "$uid" ]
      } ], 
      "copy" : [ {
        "description" : " Copies messages between mailboxes.\n Depending on the value of $uid, the messages are either specified\n through their sequence number or through their unique id. Both mailboxes must exist.\n", 
        "params" : [ "$host-info", "$mailbox-from", "$mailbox-to", "$messages", "$uid" ]
      } ], 
      "copy-impl" : [ {
        "description" : "", 
        "params" : [ "$host-info", "$mailbox-from", "$mailbox-to", "$messages", "$uid", "$copy" ]
      } ], 
      "move" : [ {
        "description" : " Moves messages between mailboxes.\n Depending on the value of $uid, the messages are either specified through\n their sequence number or through their unique id. Both mailboxes must exist.\n", 
        "params" : [ "$host-info", "$mailbox-from", "$mailbox-to", "$messages", "$uid" ]
      } ], 
      "fetch-envelope" : [ {
        "description" : " Fetches the envelope of a message.\n", 
        "params" : [ "$host-info", "$mailbox", "$message-number", "$uid" ]
      } ], 
      "fetch-envelope-impl" : [ {
        "description" : "", 
        "params" : [ "$host-info", "$mailbox", "$message-number", "$uid" ]
      } ], 
      "fetch-message" : [ {
        "description" : " Fetches a whole message.\n", 
        "params" : [ "$host-info", "$mailbox", "$message-number", "$uid" ]
      } ], 
      "fetch-message-impl" : [ {
        "description" : "", 
        "params" : [ "$host-info", "$mailbox", "$message-number", "$uid" ]
      } ], 
      "fetch-subject" : [ {
        "description" : " Fetches the subject for a message.\n Please note that this function only works with message sequence numbers,\n not with unique identifiers. Only the first 255 characters of a subject\n are fetched.\n", 
        "params" : [ "$host-info", "$mailbox", "$message-number" ]
      } ], 
      "fetch-subject-impl" : [ {
        "description" : "", 
        "params" : [ "$host-info", "$mailbox", "$message-number" ]
      } ], 
      "fetch-from" : [ {
        "description" : " Fetches the 'from' string of a message.\n Please note that this function only words with message sequence numbers,\n not with unique identifiers. Only the first 255 characters of a 'from'\n string are fetched.\n", 
        "params" : [ "$host-info", "$mailbox", "$message-number" ]
      } ], 
      "fetch-from-impl" : [ {
        "description" : "", 
        "params" : [ "$host-info", "$mailbox", "$message-number" ]
      } ], 
      "fetch-uid" : [ {
        "description" : " Fetches the unique identifier for a given message sequence number.\n", 
        "params" : [ "$host-info", "$mailbox", "$message-number" ]
      } ], 
      "fetch-uid-impl" : [ {
        "description" : "", 
        "params" : [ "$host-info", "$mailbox", "$message-number" ]
      } ], 
      "fetch-message-sequence-number" : [ {
        "description" : " Fetches the message sequence number for a given unique identifier.\n", 
        "params" : [ "$host-info", "$mailbox", "$message-number" ]
      } ], 
      "fetch-message-sequence-number-impl" : [ {
        "description" : "", 
        "params" : [ "$host-info", "$mailbox", "$message-number" ]
      } ], 
      "fetch-flags" : [ {
        "description" : " Fetches the flags of a message.\n", 
        "params" : [ "$host-info", "$mailbox", "$message-number", "$uid" ]
      } ], 
      "fetch-flags-impl" : [ {
        "description" : "", 
        "params" : [ "$host-info", "$mailbox", "$message-number", "$uid" ]
      } ], 
      "set-flags" : [ {
        "description" : " Sets the flags for a given message.\n The flags are set and unset according to the passed $flags.\n", 
        "params" : [ "$host-info", "$mailbox", "$message-number", "$flags", "$uid" ]
      } ], 
      "set-flags-impl" : [ {
        "description" : "", 
        "params" : [ "$host-info", "$mailbox", "$message-number", "$flags", "$uid" ]
      } ]
    }
  }, 
  "http://www.zorba-xquery.com/modules/email/smtp" : {
    "description" : " This module can be used for sending emails.\n The SMTP module contains only one public function that receives two parameters.\n The SMTP server access information passed as an hostInfo element\n and the email message representation as a message element.\n For a quick start see the examples associates with the send(...)\n function. For a complete specification read, the description and the\n documentation associated with this function.\n", 
    "functions" : {
      "send" : [ {
        "description" : " This function sends an email message from the specified account.\n The hostName child element of $host-info must have the form:\n remote_system_name [\":\" port] [flags]. This syntax is part of the\n Remote names\n syntax defined in the UW IMAP toolkit. The remote_system_name and\n flags fragments are explained in the section III of this document.\n For example the hostName could look like:\n \n   &lt;hostName&gt;smtp.gmail.com:587/tls/novalidate-cert&lt;hostName&gt;\n   &lt;hostName&gt;[209.85.129.111]:587/tls/novalidate-cert&lt;hostName&gt;\n \n The $host-info parameter could then look like this:\n \n &lt;hostInfo&gt;\n   &lt;hostName&gt;smtp.gmail.com:587/tls/novalidate-cert&lt;/hostName&gt;\n   &lt;userName&gt;username&lt;/userName&gt;\n   &lt;password&gt;password&lt;/password&gt;\n &lt;/hostInfo&gt;\n \n For a complete of the structure of an email message, see the imported email\n schema: http://www.zorba-xquery.com/modules/email\n All the data passed to this function does not need to be validated.\n The only requirement is that they have a valid format and are in the\n correct namespace according to the schema:\n http://www.zorba-xquery.com/modules/email.\n", 
        "params" : [ "$host-info", "$message" ]
      } ], 
      "send-impl" : [ {
        "description" : "", 
        "params" : [ "$host-info", "$message" ]
      } ]
    }
  }, 
  "http://www.zorba-xquery.com/modules/http-client" : {
    "description" : " Introduction\n \n This module provides provides simple functions for performing HTTP requests\n (GET, POST, DELETE etc.), as well as a more flexible general\n purpose function (send-request()).\n \n Examples of how to use this module\n Simple GET Request\n \n import module namespace http=\"http://www.zorba-xquery.com/modules/http-client\";\n declare namespace svg=\"http://www.w3.org/2000/svg\";\n http:get(\"http://www.w3.org/Graphics/SVG/svglogo.svg\")[2]/svg:svg/svg:title\n \n \n This example downloads an XML resource from the web (in this case,\n an SVG file, which is an XML-based image format) and returns it as\n a document node. Since the XML is in a namespace, we declare that\n namespace; we can then perform a path expression directly on the\n return value of http:get().\n \n Simple GET Request (retrieving XHTML)\n   \n   import module namespace http=\"http://www.zorba-xquery.com/modules/http-client\";\n   declare namespace xhtml=\"http://www.w3.org/1999/xhtml\";\n   http:get-node( \"http://www.w3.org\" )[2]//xhtml:body\n   \n \n This example shows how to retrieve an XHTML resource. XHTML is\n XML, so the http:get-node() function will return it as a document node\n and you can operate on it with the full power of XQuery. As above, since this\n XML is in a particular namespace, the above query defines that namespace\n with the prefix \"xhtml\" so it can easily perform path expressions, etc.\n \n \n Note: many webservers, include www.w3.org, return XHTML with the\n HTTP Content-Type \"text/html\". Zorba cannot assume that \"text/html\"\n is actually XHTML, and so http:get() would have returned raw text\n rather than a document node. That is why the example above uses\n http:get-node(), which overrides the server's Content-Type and tells\n Zorba to attempt to parse the result as XML.\n \n Simple GET Request (retrieving HTML as text)\n \n Note that XQuery does not understand plain HTML, and so if the URL\n you retrieve contains plain HTML data (not XHTML), it will be treated as\n plain text as shown in the next example. If you want to operate on the HTML\n with XQuery, you should use the HTML language module which can transform\n HTML to XHTML. The HTML module is supported by the Zorba team, but it is\n not a \"core module\", meaning that it is not shipped with every Zorba\n installation and may not be available. See\n the Zorba downloads\n page for information about obtaining this module if you do not\n have it.\n \n import module namespace http=\"http://www.zorba-xquery.com/modules/http-client\";\n http:get(\"http://www.example.com\")[2]\n \n returns\n   \n   &lt;!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\"&gt;\n   &lt;html&gt;\n     &lt;head&gt;\n       &lt;meta http-equiv=\"Content-Type\"\n       content=\"text/html; charset=utf-8\" /&gt;\n       &lt;title&gt;Example Web Page&lt;/title&gt;\n     &lt;/head&gt;\n     &lt;body&gt;\n       &lt;p&gt;You have reached this web page by typing \"example.com\",\n       \"example.net\", or \"example.org\" into your web browser.&lt;/p&gt;\n       &lt;p&gt;These domain names are reserved for use in documentation and are\n       Not available for registration. See\n       &lt;a href=\"http://www.rfc-editor.org/rfc/rfc2606.txt\"&gt;RFC 2606&lt;/a&gt;,\n       Section 3.&lt;/p&gt;\n     &lt;/body&gt;\n   &lt;/html&gt;\n   \n Note that the response data above is a simple\n xs:string value containing the HTML data, not actual XML data. If you\n executed the above query using the Zorba command-line client, you would\n have actually seen data like the following:\n \n   &amp;lt;!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\"&amp;gt;\n   &amp;lt;html&amp;gt;\n      ...\n \n because Zorba would attempt to serialize it as XML data, and would\n escape all the raw angle brackets in the original xs:string.\n Simple POST Request\n \n Here is a simple example which sends text content by making an HTTP POST\n request.\n \n \n import module namespace http=\"http://www.zorba-xquery.com/modules/http-client\";\n http:post( \"...\", \"Hello World\" )\n \n Return Values\n Most functions in this module (all except\n options()) return one or more items.\n (head() returns exactly one.) For all of these,\n the first item returned will be a &lt;http-schema:response&gt;\n element, as seen in the examples above. This element has \"status\" and\n \"message\" attributes, representing the result of the HTTP call. It\n also has any number of &lt;http-schema:header&gt; child elements that\n encode the HTTP headers returned by the HTTP server. Finally, it\n will generally contain a &lt;http-schema:body&gt; child element with\n a \"media-type\" attribute that identifies the content-type of the\n result data.\n The full schema of this &lt;http-schema:response&gt; element is\n part of the EXPath\n HTTP Client module. You can see the schema\n here.\n Any items in function return values after the initial\n &lt;http-schema:response&gt; element are the body/bodies of the HTTP\n response from the server. (MIME Multi-part responses will have\n more than one body.) The type of these items depends on the\n Content-Type for each body. Each item will be:\n \n  \n    an element node, if the returned content type is one of:\n    \n      text/xml\n      application/xml\n      text/xml-external-parsed-entity\n      application/xml-external-parsed-entity\n      or if the Content-Type ends with \"+xml\".\n    \n  \n  \n    an xs:string, if the returned content type starts with \"text/\"\n    and does not match the above XML content types strings, or if\n    it is one of:\n    \n      \"application/json\"\n      \"application/x-javascript\"\n    \n  \n  xs:base64Binary for all other content types.\n \n This return value - a sequence of items comprising one\n &lt;http-schema:response&gt; element followed by zero or more\n response items - is referred to as the \"standard http-client\n return type\" in the function declarations below.\n $href Arguments to Functions\n All functions in this module accept a URL argument named $href. In\n all cases, the value passed to $href must be a valid xs:anyURI.\n However, all functions declare $href to be of type xs:string. This\n is for convenience, since you can pass a string literal value (that\n is, a URL in double-quotes spelled out explicitly in your query)\n to an xs:string parameter.\n Important Notice Regarding get() Functions\n All of the get() functions in this module -\n get(), get-node(),\n get-text(), and\n get-binary() - are declared to be\n nondeterministic, which means that Zorba will not cache\n their results. However, they are not declared to be\n sequential, which means that Zorba may re-order them\n as part of its query optimization. According to the HTTP RFC,\n GET requests should only return data, and should not have any\n side-effects. However, in practice it is not uncommon for GET\n requests to have side-effects. If your application depends on\n the ordering of side-effects from making GET requests, you should\n either use the more complex send-request()\n function (which is declared sequential), or alterately\n wrap each call to get() in your own sequential function, to ensure\n that Zorba does not place the GET requests out of order.\n Relation to the EXPath http-client module\n EXPath defines its own http-client\n module, which is available separately for Zorba as a non-core module.\n There are two primary differences between EXPath's http-client and\n Zorba's core http-client (this module):\n \n   EXPath defines only the send-request() function, although it\n does include convenient 1- and 2-argument forms in addition to the\n full 3-argument form. EXPath does not include the simpler get(),\n post(), put(), delete(), head(), and options() functions defined by\n this module.\n   EXPath specifies that all HTML content returned from the\n HTTP server will be tidied up into valid XML, and then parsed\n into an element. As this required an additional third-party library\n dependency, Zorba's http-client module does not perform this tidying.\n Instead, HTML content is returned as a string (with special XML\n characters replaced with XML entity references, as shown in the\n above examples).\n \n See the full spec\n of the EXPath http-client module for more information.\n", 
    "functions" : {
      "send-request" : [ {
        "description" : " This function sends an HTTP request and returns the corresponding response.\n Its inputs, outputs, and behavior are identical to the\n EXPath http-client's\n send-request() function (except that HTML responses are not tidied\n into XML - see the note above). It\n is provided here for use in Zorba installations that do not have\n the EXPath module available. If you have the option of using the\n EXPath module instead of this function, please do so, as it will\n allow your application to be more interoperable between different\n XQuery engines.\n Full documentation of the $request parameter can be found in\n the EXPath\n specification.\n", 
        "params" : [ "$request", "$href", "$bodies" ]
      } ], 
      "get" : [ {
        "description" : " This function makes a GET request to a given URL.\n", 
        "params" : [ "$href" ]
      } ], 
      "get-node" : [ {
        "description" : " This function makes a GET request to a given URL. All returned bodies\n are forced to be interpreted as XML and parsed into elements.\n", 
        "params" : [ "$href" ]
      } ], 
      "get-text" : [ {
        "description" : " This function makes a GET request to a given URL. All returned bodies\n are forced to be interpreted as plain strings, and will be returned\n as xs:string items.\n", 
        "params" : [ "$href" ]
      } ], 
      "get-binary" : [ {
        "description" : " This function makes a GET request on a given URL. All returned bodies\n are forced to be interpreted as binary data, and will be returned\n as xs:base64Binary items.\n", 
        "params" : [ "$href" ]
      } ], 
      "head" : [ {
        "description" : " This function makes an HTTP HEAD request on a given URL.\n", 
        "params" : [ "$href" ]
      } ], 
      "options" : [ {
        "description" : " This function makes an HTTP OPTIONS request, which asks the server\n which operations it supports.\n", 
        "params" : [ "$href" ]
      } ], 
      "put" : [ {
        "description" : " This function makes an HTTP PUT request to a given URL. If the body\n passed to this function is an element, it will be serialized to XML\n to be sent to the server, and the Content-Type sent to the server will\n be \"text/xml\". Otherwise, the body will be converted to\n a plain string, and the Content-Type will be \"text/plain\".\n", 
        "params" : [ "$href", "$body" ]
      }, {
        "description" : " This function makes an HTTP PUT request to a given URL. If the body\n passed to this function is an element, it will be serialized\n according to the $content-type parameter as follows:\n \n  If $content-type is \"text/xml\", \"application/xml\",\n \"text/xml-external-parsed-entity\", or\n \"application/xml-external-parsed-entity\", or if it ends with \"+xml\",\n $body will be serialized to XML.\n  If $content-type starts with \"text/html\", $body will be\n serialized to HTML.\n  Otherwise, $body will be serialized to text.\n \n If $body is not an element, $body will be serialized to text\n regardless of $content-type.\n In any case, Content-Type of the request sent to the server will\n be $content-type.\n", 
        "params" : [ "$href", "$body", "$content-type" ]
      } ], 
      "delete" : [ {
        "description" : " This function makes an HTTP DELETE request to a given URL.\n", 
        "params" : [ "$href" ]
      } ], 
      "post" : [ {
        "description" : " This function makes an HTTP POST request to a given URL. If the body\n passed to this function is an element, it will be serialized to XML\n to be sent to the server, and the Content-Type sent to the server will\n be \"text/xml\". Otherwise, the body will be converted to\n a plain string, and the Content-Type will be \"text/plain\".\n", 
        "params" : [ "$href", "$body" ]
      }, {
        "description" : " This function makes an HTTP POST request to a given URL. If the body\n passed to this function is an element, it will be serialized\n according to the $content-type parameter as follows:\n \n  If $content-type is \"text/xml\", \"application/xml\",\n \"text/xml-external-parsed-entity\", or\n \"application/xml-external-parsed-entity\", or if it ends with \"+xml\",\n $body will be serialized to XML.\n  If $content-type starts with \"text/html\", $body will be\n serialized to HTML.\n  Otherwise, $body will be serialized to text.\n \n If $body is not an element, $body will be serialized to text\n regardless of $content-type.\n In any case, Content-Type of the request sent to the server will\n be $content-type.\n", 
        "params" : [ "$href", "$body", "$content-type" ]
      } ]
    }
  }, 
  "http://www.zorba-xquery.com/modules/image/graphviz" : {
    "description" : " Module that provides functions for generating SVG graphs.\n The module provides two function for generating graphs given in the :\n DOT language (see \n http://www.graphviz.org)or in the XML-based Graph eXchange\n Language (see http://www.gupro.de/GXL/),\n respectively.\n Both functions use the Graphviz Visualization Library in order to\n layout and render the graphs. As a result, both return a sequence\n of (document)-nodes (one for each input graph).\n These nodes are instances of the Scalable Vector Graphics (SVG) format.\n SVG is a language for describing two-dimensional graphics and\n graphical applications in XML. More information about SVG can\n be found at http://www.w3.org/Graphics/SVG/.\n As second parameters, both functions take a sequence of strings that\n are parameters for the graph generation and rendering algorithms.\n Currently, only the empty-sequence is allowed here.\n These parameters exist for future use.\n Please note that this feature is only available on Unix-based\n platforms (i.e. not on Windows).\n", 
    "functions" : {
      "dot" : [ {
        "description" : " Layout one ore more graphs given in the DOT language and render\n them as SVG. For example,\n \n dot(\"digraph mygraph { p -&gt; q }\", ())\n \n", 
        "params" : [ "$dot", "$params" ]
      } ], 
      "gxl" : [ {
        "description" : " Layout one ore more graphs given in the GXL language and render\n them as SVG.\n", 
        "params" : [ "$gxl", "$params" ]
      } ]
    }
  }, 
  "http://www.zorba-xquery.com/modules/languages/xslt" : {
    "description" : " This module provides XSLT 1.0 transformation functionality.\n For details on XSLT see\n XSLT 1.0 specification.\n This module implements the invoking of an XSLT transformation from XQuery\n described in \n    Michael Kay's proposal.\n Example:\n import module namespace\n        xslt = \"http://www.zorba-xquery.com/modules/languages/xslt\";\n let $source :=\n     &lt;catalog&gt;\n         &lt;cd&gt;\n           &lt;title&gt;Empire Burlesque&lt;/title&gt;\n           &lt;artist&gt;Bob Dylan&lt;/artist&gt;\n           &lt;country&gt;USA&lt;/country&gt;\n           &lt;company&gt;Columbia&lt;/company&gt;\n           &lt;price&gt;10.90&lt;/price&gt;\n           &lt;year&gt;1985&lt;/year&gt;\n         &lt;/cd&gt;\n         &lt;cd&gt;\n           &lt;title&gt;Hide your heart&lt;/title&gt;\n           &lt;artist&gt;Bonnie Tyler&lt;/artist&gt;\n           &lt;country&gt;UK&lt;/country&gt;\n           &lt;company&gt;CBS Records&lt;/company&gt;\n           &lt;price&gt;9.90&lt;/price&gt;\n           &lt;year&gt;1988&lt;/year&gt;\n         &lt;/cd&gt;\n     &lt;/catalog&gt;\n let $stylesheet :=\n   &lt;xsl:stylesheet version=\"1.0\"\n       xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\"&gt;\n     &lt;xsl:template match=\"/\"&gt;\n       &lt;html&gt;\n       &lt;body&gt;\n       &lt;h2&gt;Music Collection&amp;lt;/h2&gt;\n         &lt;table border=\"1\"&gt;\n           &lt;tr bgcolor=\"lightblue\"&gt;\n             &lt;th&gt;Title&amp;lt;/th&gt;\n             &lt;th&gt;Artist&amp;lt;/th&gt;\n           &lt;/tr&gt;\n           &lt;xsl:for-each select=\"catalog/cd\"&gt;\n            &lt;tr&gt;\n              &lt;td&gt;&amp;lt;xsl:value-of select=\"title\"/&gt;&lt;/td&gt;\n              &lt;td&gt;&amp;lt;xsl:value-of select=\"artist\"/&gt;&lt;/td&gt;\n           &lt;/tr&gt;\n           &lt;/xsl:for-each&gt;\n         &lt;/table&gt;\n       &lt;/body&gt;\n       &lt;/html&gt;\n     &lt;/xsl:template&gt;\n   &lt;/xsl:stylesheet&gt;\n return\n   xslt:transform( $source, $stylesheet)\n", 
    "functions" : {
      "transform" : [ {
        "description" : "Invokes an XSLT transformation.\n", 
        "params" : [ "$source", "$stylesheet" ]
      } ]
    }
  }, 
  "http://www.zorba-xquery.com/modules/oauth/client" : {
    "description" : " This module provides the functions necessary to acquire access to the personal\n resources of a user through the open standard called\n OAuth.\n The application/mashup creator does not need to know the\n specifics of OAuth to use this module.\n", 
    "functions" : {
      "service-provider" : [ {
        "description" : " Utility function to build a service provider object.\n This object contains the information required by the\n OAuth client to interact with an OAuth service provider.\n For instance the following expression:\n \n let $consumer-key     := \"#\"\n let $consumer-secret  := \"#\"\n let $signature-method := \"HMAC-SHA1\"\n let $realm            := \"twitter.com\"\n let $authorize-url    := \"http://api.twitter.com/oauth/authorize\"\n let $request-token-method := \"POST\"\n let $request-token-url := \"https://twitter.com/oauth/request_token\"\n let $request-token-callback-url := \"https://twitter.com/oauth/request_token\"\n let $access-token-method := \"POST\"\n let $access-token-url := \"https://api.twitter.com/oauth/access_token\"\n return oauth:service-provider(\n   $consumer-key, $consumer-secret, $signature-method,\n   $realm, $authorize-url, $request-token-method,\n   $request-token-url, $request-token-callback-url,\n   $access-token-method, $access-token-url\n )\n \n Will return the following XML schema instance:\n \n \n   \n   \n \n \n", 
        "params" : [ "$consumer-key", "$consumer-secret", "$signature-method", "$realm", "$authorize-url", "$request-token-method", "$request-token-url", "$request-token-callback-url", "$access-token-method", "$access-token-url" ]
      } ], 
      "parameters" : [ {
        "description" : " Create an OAuth Parameters instance.\n Instances of OAuth parameters are used to\n contain value/pair data such as oauth_token\n and oauth_token_secret.\n For instance the following code snippet:\n \n  oauth:parameters(\"oauth_token\", \"#\")\n \n Returns the following XML schema instance:\n \n \n   \n \n \n", 
        "params" : [ "$name", "$value" ]
      } ], 
      "add-parameter" : [ {
        "description" : " Adds an OAuth parameter to an OAuth Parameters instance.\n Instances of OAuth parameters are used to\n contain value/pair data such as oauth_token\n and oauth_token_secret.\n For instance the following code snippet:\n \n  let $params := oauth:parameters(\"oauth_token\", \"#\")\n  let $params := oauth:add-parameter($params, \"oauth_token_secret\", \"#\")\n  return $params\n \n Returns the following XML schema instance:\n \n \n   \n   \n \n \n", 
        "params" : [ "$parameters", "$name", "$value" ]
      } ], 
      "parameter" : [ {
        "description" : " This function returns the string value of the parameters whose key matches a $string input.\n", 
        "params" : [ "$params", "$string" ]
      } ], 
      "request-token" : [ {
        "description" : " This function allows the client to obtain a set of temporary credentials from the service provider by making an authenticated HTTP request to the Temporary Credential Request endpoint.\n This function is provided for convenience for request-token#2.\n Invoking this function is equivalent to:\n \n oauth:request-token($service-provider, ())\n \n", 
        "params" : [ "$service-provider" ]
      }, {
        "description" : " This function allows the client to obtain a set of temporary credentials from the service provider by making an authenticated HTTP request to the Temporary Credential Request endpoint.\n This function is provided for convenience.\n", 
        "params" : [ "$service-provider", "$parameters" ]
      }, {
        "description" : " This function allows the client to obtain a set of temporary credentials from the service provider by making an authenticated HTTP request to the Temporary Credential Request endpoint.\n", 
        "params" : [ "$consumer-key", "$consumer-secret", "$signature-method", "$method", "$realm", "$temporary-credential-request", "$callback-url", "$additional-parameters" ]
      } ], 
      "access-token" : [ {
        "description" : " This function allows the client to obtain a set of token credentials from the service provider by making an authenticated HTTP request to the Token Request endpoint.\n This function is provided for convenience.\n", 
        "params" : [ "$service-provider", "$parameters" ]
      }, {
        "description" : " This function allows the client to obtain a set of token credentials from the service provider by making an authenticated HTTP request to the Token Request endpoint.\n", 
        "params" : [ "$consumer-key", "$consumer-secret", "$signature-method", "$realm", "$oauth-token", "$oauth-token-secret", "$method", "$token-request-uri", "$additional-parameters" ]
      } ], 
      "protected-resource" : [ {
        "description" : " This function allows the client access to the protected resources of the user.\n This function is provided for convenience.\n", 
        "params" : [ "$protected-resource", "$service-provider", "$parameters" ]
      }, {
        "description" : " This function allows the client access to the protected resources of the user.\n", 
        "params" : [ "$consumer-key", "$consumer-secret", "$signature-method", "$oauth-token", "$oauth-token-secret", "$realm", "$protected-resource", "$additional-parameters" ]
      } ], 
      "timestamp" : [ {
        "description" : " The timestamp is expressed in the number of seconds since January 1, 1970 00:00:00 GMT.\n", 
        "params" : [  ]
      } ], 
      "key" : [ {
        "description" : " This function returns a string key which is the client and temporary credential concatenated with an ampersand.\n", 
        "params" : [ "$oauth-consumer-secret", "$oauth-token-secret" ]
      } ], 
      "nonce" : [ {
        "description" : " This function should return a new UUID every time the function is invoked.\n", 
        "params" : [  ]
      } ], 
      "normalization" : [ {
        "description" : " This function normalizes parameters into a single string.\n", 
        "params" : [ "$params", "$divide", "$option", "$comma" ]
      } ], 
      "authorization-header" : [ {
        "description" : " This function formats the authorization header.\n", 
        "params" : [ "$params", "$realm", "$signature" ]
      } ], 
      "signature-base-string" : [ {
        "description" : " This function constructs the Signature Base String; a consistent, reproducible concatenation of several of the HTTP request elements into a single string.\n", 
        "params" : [ "$http-method", "$base-uri", "$params" ]
      } ], 
      "signature" : [ {
        "description" : " This function generates a signature string which becomes the \"oauth_signature\" parameter. The service provider verifies the signature as specified for each method.\n", 
        "params" : [ "$base-string", "$oauth-signature-method", "$key" ]
      } ], 
      "parse-parameters" : [ {
        "description" : " This function takes an input string and parses the parameters into parameter elements.\n", 
        "params" : [ "$input" ]
      } ], 
      "http-request" : [ {
        "description" : " This function makes the request, and sends it to the specified url using the specified http request method.\n", 
        "params" : [ "$consumer-secret", "$protected-resource", "$oauth-token-secret", "$params", "$realm", "$signature-method" ]
      } ], 
      "format-request" : [ {
        "description" : " This function creates the parameters to be given to the http-request function. It parses the response into\n parameter elements if the response status is 200 (OK).\n", 
        "params" : [ "$consumer-key", "$consumer-secret", "$protected-resource", "$oauth-token", "$oauth-token-secret", "$realm", "$signature-method", "$additional-parameters", "$format-params" ]
      }, {
        "description" : "", 
        "params" : [ "$consumer-key", "$consumer-secret", "$protected-resource", "$oauth-token", "$oauth-token-secret", "$realm", "$signature-method", "$additional-parameters" ]
      } ], 
      "additional-parameters" : [ {
        "description" : " This function finds the server-specific parameters. The specification states, \"Servers MAY specify additional parameters...\"\n", 
        "params" : [ "$parameters" ]
      } ]
    }
  }, 
  "http://www.zorba-xquery.com/modules/oauth/error" : {
    "description" : " Module that defines the errors raised in Oauth modules.\n", 
    "functions" : {

    }
  }, 
  "http://www.zorba-xquery.com/modules/process" : {
    "description" : " This module provides functions to create a native process and return the result\n (i.e. exit code, result on standard out and error).\n \n Example:\n\n  import module namespace proc = \"http://www.zorba-xquery.com/modules/process\";\n  proc:exec(\"ls\")\n\n \n \n Potential result:\n \n &lt;result xmlns=\"http://www.zorba-xquery.com/modules/process\"&gt;\n   &lt;stdout&gt;myfile.txt&lt;/stout&gt;\n   &lt;stderr/&gt;\n   &lt;exit-code&gt;0&lt;/exit-code&gt;\n &lt;/result&gt;\n \n \n", 
    "functions" : {
      "exec" : [ {
        "description" : " Executes the specified string command in a separate process.\n This function does not allow arguments to be passed to\n the command.\n", 
        "params" : [ "$cmd" ]
      }, {
        "description" : " Executes the specified string command in a separate process.\n Each of the strings in the sequence passed in as the second\n argument is passed as an argument to the executed command.\n", 
        "params" : [ "$cmd", "$args" ]
      } ]
    }
  }, 
  "http://www.zorba-xquery.com/modules/read-pdf" : {
    "description" : " This module provides funtionality to read the text from PDF documents and\n to render PDF documents to images.\n Apache PDFBox library is used to\n implement these functions.\n \n \n Note: Since this module has a Java library dependency a JVM required\n to be installed on the system. For Windows: jvm.dll is required on the system\n path ( usually located in \"C:\\Program Files\\Java\\jre6\\bin\\client\".\n Note: For Debian based Linux distributions install PdfBox and its dependencies:\n sudo apt-get install libpdfbox-java libfontbox-java libjempbox-java libcommons-logging-java .\n For Windows use PDFBOX_HOME environment variable.\n", 
    "functions" : {
      "extract-text" : [ {
        "description" : " Extracts the text of the input pdf.\n \n Please consult the\n official PDFBox documentation for further\n information.\n \n Example:\n  import module namespace read-pdf = \"http://www.zorba-xquery.com/modules/read-pdf\";\n  import module namespace file = \"http://expath.org/ns/file\";\n  declare namespace rpo =\n      \"http://www.zorba-xquery.com/modules/read-pdf/read-pdf-options\";\n  let $pdf := file:read-binary(\"path/to/my.pdf\")\n  let $options  :=\n     \n       simple\n       2\n       3\n       decription_password\n       false\n       false\n       ---start-page-separator---\n       ---end-page-separator---\n     \n  return\n      read-pdf:extract-text($pdf, $options)\n \n \n", 
        "params" : [ "$pdf", "$options" ]
      } ], 
      "extract-text-internal" : [ {
        "description" : "", 
        "params" : [ "$pdf", "$options" ]
      } ], 
      "render-to-images" : [ {
        "description" : " Renders each page of the PDF document as an image.\n \n Please consult the\n official PDFBox documentation for further\n information.\n \n Example:\n  import module namespace read-pdf = \"http://www.zorba-xquery.com/modules/read-pdf\";\n  import module namespace file = \"http://expath.org/ns/file\";\n  declare namespace rpo =\n      \"http://www.zorba-xquery.com/modules/read-pdf/read-pdf-options\";\n  let $pdf := file:read-binary(\"path/to/my.pdf\")\n  let $options  :=\n     \n       jpg\n       2\n       3\n       decription_password\n     \n  let $imgs := read-pdf:render-to-images($pdf, $options)\n  for $img at $pos in $imgs\n  return\n  {\n    file:write-binary(\"img-page\" || $pos || \".jpg\", $img);\n    $pos\n  }\n \n \n", 
        "params" : [ "$pdf", "$options" ]
      } ], 
      "render-to-images-internal" : [ {
        "description" : "", 
        "params" : [ "$pdf", "$options" ]
      } ]
    }
  }, 
  "http://www.zorba-xquery.com/modules/schema-tools" : {
    "description" : " This module provides funtionality to get sample XMLSchema from XML instances\n and sample XML instances from XMLSchema.\n Apache XMLBeans library is used to implement\n inst2xsd and xsd2inst functions.\n \n \n Note: Since this module has a Java library dependency a JVM required\n to be installed on the system. For Windows: jvm.dll is required on the system\n path ( usually located in \"C:\\Program Files\\Java\\jre6\\bin\\client\".\n", 
    "functions" : {
      "inst2xsd" : [ {
        "description" : " The inst2xsd function takes a set of sample XML instance elements as input and\n generates a set of sample XMLSchema documents that define\n the content of the given input.\n \n Please consult the\n official documentation for further\n information.\n \n Example:\n  import module namespace st = \"http://www.zorba-xquery.com/modules/schema-tools\";\n  declare namespace sto =\n      \"http://www.zorba-xquery.com/modules/schema-tools/schema-tools-options\";\n  let $instances := (&lt;a&gt;&lt;b/&gt;&lt;c/&gt;&lt;/a&gt;, &lt;b/&gt;, &lt;c&gt;ccc&lt;/c&gt;)\n  let $options  :=\n     &lt;sto:inst2xsd-options xmlns:sto=\n       \"http://www.zorba-xquery.com/modules/schema-tools/schema-tools-options\"&gt;\n       &lt;sto:design&gt;vbd&lt;/sto:design&gt;\n       &lt;sto:simple-content-types&gt;smart&lt;/sto:simple-content-types&gt;\n       &lt;sto:use-enumeration&gt;10&lt;/sto:use-enumeration&gt;\n     &lt;/sto:inst2xsd-options&gt;\n  return\n      st:inst2xsd($instances, $options)\n \n \n", 
        "params" : [ "$instances", "$options" ]
      } ], 
      "inst2xsd-internal" : [ {
        "description" : "", 
        "params" : [ "$instances", "$options" ]
      } ], 
      "xsd2inst" : [ {
        "description" : " The xsd2inst function takes a set of XML Schema elements as input and the\n local name of the root element and\n generates a document that represents one sample XML instance of the given\n input schemas. The local name is searched in schema global element definitions\n in the order of schemas parameter.\n \n Please consult the\n official documentation for further\n   information.\n \n Example: \n  import module namespace st = \"http://www.zorba-xquery.com/modules/schema-tools\";\n  declare namespace sto =\n      \"http://www.zorba-xquery.com/modules/schema-tools/schema-tools-options\";\n  let $xsds  :=\n     ( &lt;xs:schema xmlns:xs=\"http://www.w3.org/2001/XMLSchema\"\n           attributeFormDefault=\"unqualified\"\n           elementFormDefault=\"qualified\"&gt;\n         &lt;xs:element name=\"a\" type=\"aType\"/&gt;\n         &lt;xs:complexType name=\"aType\"&gt;\n           &lt;xs:sequence&gt;\n             &lt;xs:element type=\"xs:string\" name=\"b\"/&gt;\n             &lt;xs:element type=\"xs:string\" name=\"c\"/&gt;\n           &lt;/xs:sequence&gt;\n         &lt;/xs:complexType&gt;\n       &lt;/xs:schema&gt; )\n  let $options :=\n    &lt;sto:xsd2inst-options xmlns:sto=\n      \"http://www.zorba-xquery.com/modules/schema-tools/schema-tools-options\"&gt;\n      &lt;sto:network-downloads&gt;false&lt;/sto:network-downloads&gt;\n      &lt;sto:no-pvr&gt;false&lt;/sto:no-pvr&gt;\n      &lt;sto:no-upa&gt;false&lt;/sto:no-upa&gt;\n    &lt;/sto:xsd2inst-options&gt;\n  return\n      st:xsd2inst($xsds, \"a\", $options)\n \n", 
        "params" : [ "$schemas", "$rootElementName", "$options" ]
      } ], 
      "xsd2inst-internal" : [ {
        "description" : "", 
        "params" : [ "$schemas", "$rootElementName", "$options" ]
      } ]
    }
  }, 
  "http://www.zorba-xquery.com/modules/util-jvm" : {
    "description" : " This module provides common functionality for modules that use java\n implementations.\n \n \n Modules using java implementations must import this module\n to specify the dependency.\n \n \n Note: Since this module has a Java library dependency a JVM is required\n to be installed on the system. For Windows: jvm.dll is required on the system\n path (usually located in \"C:\\Program Files\\Java\\jre\\bin\\client\").\n", 
    "functions" : {

    }
  }, 
  "http://www.zorba-xquery.com/modules/xqdoc/batch" : {
    "description" : " Process XQDoc batches.\n This module generates XQDoc HTML documentation from multiple\n XQuery modules.\n", 
    "functions" : {
      "build-xqdoc" : [ {
        "description" : " Run an XQDoc batch.\n", 
        "params" : [ "$output-folder", "$static-folders", "$template", "$modules" ]
      } ], 
      "create-xml-folder" : [ {
        "description" : "", 
        "params" : [ "$folder" ]
      } ], 
      "save-xml" : [ {
        "description" : "", 
        "params" : [ "$output-file", "$page" ]
      } ], 
      "page" : [ {
        "description" : "", 
        "params" : [ "$template", "$menu", "$section" ]
      } ], 
      "create-page" : [ {
        "description" : "", 
        "params" : [ "$output-folder", "$page-name", "$page" ]
      } ], 
      "copy-static-folders" : [ {
        "description" : "", 
        "params" : [ "$output-folder", "$static-folders" ]
      } ], 
      "section" : [ {
        "description" : "", 
        "params" : [ "$sections" ]
      }, {
        "description" : "", 
        "params" : [ "$sections", "$level" ]
      } ], 
      "xqdoc" : [ {
        "description" : "", 
        "params" : [ "$module" ]
      } ], 
      "add-predeclared-namespaces" : [ {
        "description" : "", 
        "params" : [ "$xqdoc", "$namespaces" ]
      } ], 
      "add-trailing-slash" : [ {
        "description" : "", 
        "params" : [ "$path" ]
      } ], 
      "process-variable" : [ {
        "description" : "", 
        "params" : [ "$source", "$varname", "$value" ]
      } ]
    }
  }, 
  "http://www.zorba-xquery.com/modules/xqdoc/html" : {
    "description" : " Convert an XQDoc document into an HTML document.\n This module contains a single convert() function\n that transform an XQDoc document into an HTML document.\n Usage:\n \n let $xqdoc := xqdoc:xqdoc(\"http://expath.org/ns/file\")\n return html:convert($xqdoc)\n \n", 
    "functions" : {
      "convert" : [ {
        "description" : "", 
        "params" : [ "$xqdoc" ]
      } ], 
      "normalize-pre" : [ {
        "description" : "", 
        "params" : [ "$pre" ]
      } ], 
      "normalize" : [ {
        "description" : "", 
        "params" : [ "$nodes" ]
      } ], 
      "text" : [ {
        "description" : "", 
        "params" : [ "$nodes" ]
      } ], 
      "description-summary" : [ {
        "description" : "", 
        "params" : [ "$description" ]
      } ], 
      "serialize-params" : [ {
        "description" : "", 
        "params" : [ "$params" ]
      } ], 
      "serialize-annotations" : [ {
        "description" : "", 
        "params" : [ "$annotations" ]
      } ], 
      "function-properties" : [ {
        "description" : "", 
        "params" : [ "$function" ]
      } ], 
      "is-function-updating" : [ {
        "description" : "", 
        "params" : [ "$function" ]
      } ], 
      "is-function-private" : [ {
        "description" : "", 
        "params" : [ "$function" ]
      } ], 
      "is-function-nondeterministic" : [ {
        "description" : "", 
        "params" : [ "$function" ]
      } ], 
      "is-function-streamable" : [ {
        "description" : "", 
        "params" : [ "$function" ]
      } ], 
      "is-function-variadic" : [ {
        "description" : "", 
        "params" : [ "$function" ]
      } ], 
      "is-function-sequential" : [ {
        "description" : "", 
        "params" : [ "$function" ]
      } ], 
      "is-function-external" : [ {
        "description" : "", 
        "params" : [ "$function" ]
      } ]
    }
  }, 
  "http://www.zorba-xquery.com/modules/xqdoc/menu" : {
    "description" : " Generate navigation for XQDoc batches.\n", 
    "functions" : {
      "categories-as-js" : [ {
        "description" : "", 
        "params" : [ "$url-prefix", "$cats" ]
      } ], 
      "categories" : [ {
        "description" : "", 
        "params" : [ "$top" ]
      } ], 
      "item" : [ {
        "description" : "", 
        "params" : [ "$ctx", "$path" ]
      } ], 
      "item-uri" : [ {
        "description" : "", 
        "params" : [ "$item" ]
      }, {
        "description" : "", 
        "params" : [ "$item", "$result" ]
      } ], 
      "closed-tabs" : [ {
        "description" : "", 
        "params" : [ "$item", "$url-prefix" ]
      }, {
        "description" : "", 
        "params" : [ "$item", "$result", "$url-prefix" ]
      } ], 
      "menu" : [ {
        "description" : "", 
        "params" : [ "$item", "$url-prefix" ]
      } ]
    }
  }, 
  "http://xbrl.io/modules/bizql/archives" : {
    "description" : " This module provides functions for storing, retrieving, and modifying\n metadata about archives.\n Archive information is stored in a MongoDB datasource called xbrl.\n An archive can be an arbitrary JSON object. However, the entity\n field should refer to an entity. The value of such fields needs to be\n the URL of the entity as scheme#id (e.g. http://www.sec.gov/CIK#0000066740).\n \n", 
    "functions" : {
      "archives" : [ {
        "description" : " Retrieves all archives.\n", 
        "params" : [  ]
      }, {
        "description" : " Retrieves the archives with the given AIDs.\n", 
        "params" : [ "$archive-or-ids" ]
      } ], 
      "archives-for-entities" : [ {
        "description" : " Return all archives created by the supplied entities.\n", 
        "params" : [ "$entities_or_ids" ]
      } ], 
      "add" : [ {
        "description" : " Adds the given archive to the database.\n", 
        "params" : [ "$archive" ]
      } ], 
      "update" : [ {
        "description" : " Updates an archive.\n Replaces an archive object in the database with the given object.\n The archive to be replaced is identified by the value of the _id\n field of the given archive (AID).\n", 
        "params" : [ "$archive" ]
      } ], 
      "delete" : [ {
        "description" : " Deletes an archive from the database.\n", 
        "params" : [ "$archive-or-id" ]
      } ], 
      "normalize-id" : [ {
        "description" : " Converts the input to a normalized archive identifier (AID). The input\n can be either a pure AID, or an archive object which contains an AID.\n", 
        "params" : [ "$archive-or-id" ]
      } ], 
      "connection" : [ {
        "description" : "", 
        "params" : [  ]
      } ]
    }
  }, 
  "http://xbrl.io/modules/bizql/concept-maps" : {
    "description" : " This module provides functions for storing, retrieving, and modifying\n concept maps. Concept maps can be used in BizQL queries.\n Report schemas are stored in the collection conceptmaps in\n the project's MongoDB database.\n", 
    "functions" : {
      "maps" : [ {
        "description" : " Return all concept maps.\n", 
        "params" : [  ]
      } ], 
      "map" : [ {
        "description" : " Return the concept map with the given name.\n If more than one map with the same name is found,\n the function returns the first match.\n", 
        "params" : [ "$name" ]
      } ], 
      "add" : [ {
        "description" : " Add the given map to the database.\n", 
        "params" : [ "$c" ]
      } ], 
      "update" : [ {
        "description" : " Update a concept map.\n Replaces a concept map in the database with the given map.\n The map to be replaced is identified by the value of the name\n field of the given map.\n", 
        "params" : [ "$c" ]
      } ], 
      "delete" : [ {
        "description" : " Delete a map from the database.\n", 
        "params" : [ "$name" ]
      } ]
    }
  }, 
  "http://xbrl.io/modules/bizql/core" : {
    "description" : " This module provides core functionality for querying XBRL Models.\n \n", 
    "functions" : {
      "has-facts-for-concept" : [ {
        "description" : " Tells whether the supplied archive contain a fact associated with the\n supplied concept.\n", 
        "params" : [ "$archive_or_id", "$concept-name" ]
      }, {
        "description" : " Tells whether the supplied archive contains a fact associated with the\n supplied concept.\n", 
        "params" : [ "$archive_or_id", "$concept-name", "$options" ]
      } ], 
      "has-concept" : [ {
        "description" : " Tells whether the supplied archive contains a concept with the\n supplied concept-name in its model structure.\n", 
        "params" : [ "$archive_or_id", "$concept-name" ]
      } ], 
      "facts-for-concept" : [ {
        "description" : " Retrieves the fact associated with the supplied concept in the\n supplied archive.\n", 
        "params" : [ "$archive_or_id", "$concept-name" ]
      }, {
        "description" : " Retrieves the fact associated with the supplied concept in the\n supplied archive.\n", 
        "params" : [ "$archive_or_id", "$concept-name", "$options" ]
      } ], 
      "fact-values-for-concept" : [ {
        "description" : " Retrieves the value of the fact associated with the supplied concept in the\n supplied archive.\n", 
        "params" : [ "$archive_or_id", "$concept-name" ]
      }, {
        "description" : " Retrieves the value of the fact associated with the supplied concept in the\n supplied archive.\n", 
        "params" : [ "$archive_or_id", "$concept-name", "$options" ]
      } ], 
      "facts" : [ {
        "description" : " Retrieves all the facts in the supplied archive.\n", 
        "params" : [ "$archive_or_id" ]
      } ], 
      "populate-schema-with-facts" : [ {
        "description" : " Populates the supplied BizQL schema with facts from the supplied\n archive.\n", 
        "params" : [ "$archive_or_id", "$schema" ]
      }, {
        "description" : " Populates the supplied BizQL schema with facts from the supplied\n archive.\n", 
        "params" : [ "$archive_or_id", "$schema", "$options" ]
      } ], 
      "populate-internal" : [ {
        "description" : "", 
        "params" : [ "$archive_or_id", "$template", "$options" ]
      } ], 
      "resolve-facts" : [ {
        "description" : " Resolves the supplied concept according to the mappings.\n", 
        "params" : [ "$archive_or_id", "$concept-name", "$concept-maps" ]
      } ], 
      "filter-facts-for-aspects" : [ {
        "description" : " Filters the supplied facts only keeping those\n that match all supplied aspects.\n", 
        "params" : [ "$facts", "$aspects" ]
      } ]
    }
  }, 
  "http://xbrl.io/modules/bizql/entities" : {
    "description" : " This module provides functions for storing, retrieving, and modifying\n entities.\n Entities are stored in a MongoDB datasource called xbrl.\n An entity can be an arbitrary JSON object. However, the value of the\n id field needs to be the URL of the entity as scheme#id\n (e.g. http://www.sec.gov/CIK#0000066740).\n Each entity can be associated with a set of tags that makes it easier\n to manage them. Tags can be removed and added. The e:entities#1 function\n allows to retrieve all entities with a given tag.\n", 
    "functions" : {
      "entities" : [ {
        "description" : " Return all entities.\n", 
        "params" : [  ]
      }, {
        "description" : " Return the entities with the given EIDs.\n", 
        "params" : [ "$entities-or-ids" ]
      } ], 
      "entities-for-tags" : [ {
        "description" : " Return all entities with any of the given tags.\n", 
        "params" : [ "$tags" ]
      } ], 
      "add" : [ {
        "description" : " Add the given entity to the database.\n", 
        "params" : [ "$entity" ]
      } ], 
      "update" : [ {
        "description" : " Update an entity.\n Replaces an entity object in the database with the given object.\n The entity to be replaced is identified by the value of the _id\n field of the given entity (EID).\n", 
        "params" : [ "$entity" ]
      } ], 
      "delete" : [ {
        "description" : " Delete an entity from the database.\n", 
        "params" : [ "$entity-or-id" ]
      } ], 
      "add-tags" : [ {
        "description" : " Add a sequence of tags to an entity.\n", 
        "params" : [ "$entity-or-id", "$tags" ]
      } ], 
      "remove-tags" : [ {
        "description" : " Remove the given tags from an entity.\n Add a sequence of tags to an entity.\n", 
        "params" : [ "$entity-or-id", "$tags" ]
      } ], 
      "normalize-id" : [ {
        "description" : " Converts the input to a normalized entity identifier (EID). The input\n can be either an EID, or an entity object which contains an _id.\n", 
        "params" : [ "$entity-or-id" ]
      } ], 
      "connection" : [ {
        "description" : "", 
        "params" : [  ]
      } ]
    }
  }, 
  "http://xbrl.io/modules/bizql/facts" : {
    "description" : " This module provides functions for storing, retrieving, and modifying\n facts.\n Facts are stored in a MongoDB datasource called xbrl.\n A fact can be an arbitrary JSON object.\n", 
    "functions" : {
      "facts" : [ {
        "description" : " Return all facts.\n", 
        "params" : [  ]
      }, {
        "description" : " Return the fact with the given FIDs.\n", 
        "params" : [ "$fact-or-ids" ]
      } ], 
      "facts-for-archives" : [ {
        "description" : " Return all facts reported within a given archive.\n", 
        "params" : [ "$archive_or_ids" ]
      } ], 
      "facts-for-aspects" : [ {
        "description" : " Return all facts associated with the given aspects.\n", 
        "params" : [ "$aspects" ]
      } ], 
      "facts-for-archives-and-aspects" : [ {
        "description" : " Return all facts reported in a given archive, and associated with a\n given entity, concept, period and/or other aspects.\n", 
        "params" : [ "$archive_or_ids", "$aspects" ]
      }, {
        "description" : " Return all facts associated with a given entity, concept, period\n and/or other aspects.\n", 
        "params" : [ "$archive-or-ids", "$aspects", "$closed" ]
      } ], 
      "prefix-from-fact-concept" : [ {
        "description" : " Helper function to get the prefix of a given fact`s xbrl:Concept aspect.\n", 
        "params" : [ "$fact" ]
      } ], 
      "facts-for-archives-and-concept-prefix" : [ {
        "description" : " Return all facts having one of the defined prefixes reported in a\n given archive.\n", 
        "params" : [ "$archive_or_ids", "$prefixes" ]
      } ], 
      "facts-for-concepts" : [ {
        "description" : " Return all facts associated with given concepts.\n", 
        "params" : [ "$concepts" ]
      } ], 
      "facts-for-archives-and-concepts" : [ {
        "description" : " Return all facts associated with given concepts and archives.\n", 
        "params" : [ "$archives", "$concepts" ]
      }, {
        "description" : " Return all facts associated with given concepts and archives.\n", 
        "params" : [ "$archives", "$concepts", "$options" ]
      } ], 
      "facts-for-entities" : [ {
        "description" : " Return all facts reported by the given entities.\n", 
        "params" : [ "$entity-or-ids" ]
      }, {
        "description" : " Return all facts reported by the given entities.\n", 
        "params" : [ "$entity-or-ids", "$options" ]
      } ], 
      "add" : [ {
        "description" : " Add the given fact to the database.\n", 
        "params" : [ "$fact" ]
      } ], 
      "update" : [ {
        "description" : " Update a fact.\n Replaces a fact object in the database with the given object.\n The fact to be replaced is identified by the value of the _id\n field of the given fact (FID).\n", 
        "params" : [ "$fact" ]
      } ], 
      "delete" : [ {
        "description" : " Delete a fact from the database.\n", 
        "params" : [ "$fact-or-id" ]
      } ], 
      "normalize-id" : [ {
        "description" : " Converts the input to a normalized fact id (FID). The input\n can be either an FID, or a fact object which contains an _id.\n", 
        "params" : [ "$fact-or-id" ]
      } ], 
      "connection" : [ {
        "description" : "", 
        "params" : [  ]
      } ]
    }
  }, 
  "http://xbrl.io/modules/bizql/models" : {
    "description" : " This module provides functionality for storing and retrieving report models.\n \n", 
    "functions" : {
      "models" : [ {
        "description" : " Retrieves all models.\n", 
        "params" : [  ]
      }, {
        "description" : " Retrieves the models with the given MIDs.\n", 
        "params" : [ "$model-or-ids" ]
      } ], 
      "models-for-archives" : [ {
        "description" : " Retrieves all models that belong to the supplied archives.\n", 
        "params" : [ "$archive-or-ids" ]
      } ], 
      "add" : [ {
        "description" : " Adds the given model to the database.\n", 
        "params" : [ "$model" ]
      } ], 
      "update" : [ {
        "description" : " Updates an model.\n Replaces an model object in the database with the given object.\n The model to be replaced is identified by the value of the _id\n field of the given model (MID).\n", 
        "params" : [ "$model" ]
      } ], 
      "delete" : [ {
        "description" : " Deletes the model with the specified MID from the database.\n", 
        "params" : [ "$model-or-id" ]
      } ], 
      "normalize-id" : [ {
        "description" : " Converts the input to a normalized model id (MID). The input\n can be either an MID, or an model object which contains an _id.\n", 
        "params" : [ "$model-or-id" ]
      } ], 
      "connection" : [ {
        "description" : "", 
        "params" : [  ]
      } ]
    }
  }, 
  "http://xbrl.io/modules/bizql/profiles/sec/companies" : {
    "description" : " This module provides functionality for querying companies (XBRL entities) submitting to the SEC. For XBRL-generic requests on companies, use the entities module.\n \n", 
    "functions" : {
      "companies" : [ {
        "description" : " Return all companies\n", 
        "params" : [  ]
      }, {
        "description" : " Return the companies with the given identifiers.\n", 
        "params" : [ "$companies-or-ids" ]
      } ], 
      "companies-for-sector" : [ {
        "description" : " Retrieves all companies in the given sectors.\n", 
        "params" : [ "$sectors" ]
      } ], 
      "companies-for-SIC" : [ {
        "description" : " Retrieves all companies whose type of business\n matches the SIC (Standard Industrial Classification) code.\n", 
        "params" : [ "$sic-codes" ]
      } ], 
      "companies-by-types" : [ {
        "description" : " Retrieves all companies whose company type matches the passed string(s).\n", 
        "params" : [ "$company-types" ]
      } ], 
      "company-type" : [ {
        "description" : " Return company type for a given company name. Company type can be one of:\n \n   \n     Corporation\n     Partnership\n     unknown\n   \n \n", 
        "params" : [ "$company-name" ]
      } ], 
      "connection" : [ {
        "description" : "", 
        "params" : [  ]
      } ]
    }
  }, 
  "http://xbrl.io/modules/bizql/profiles/sec/components" : {
    "description" : " This module provides functionality for querying components (SEC models) of\n financial reports submitted to the SEC. For XBRL-generic operations on models, use the\n models module.\n", 
    "functions" : {
      "components-for-disclosures" : [ {
        "description" : " Retrieves all models that bear the supplied disclosures.\n", 
        "params" : [ "$disclosures" ]
      } ], 
      "components-for-archives-and-disclosures" : [ {
        "description" : " Retrieves all models that belong to the archives given as first\n parameter and that match the supplied disclosures.\n", 
        "params" : [ "$archive-or-ids", "$disclosures" ]
      } ], 
      "populate-hierarchical-fact-table" : [ {
        "description" : " Populates the component's hierarchical fact table (HFT)\n according to its model structure and the line item hierarchy.\n", 
        "params" : [ "$component_or_id" ]
      } ], 
      "connection" : [ {
        "description" : "", 
        "params" : [  ]
      } ]
    }
  }, 
  "http://xbrl.io/modules/bizql/profiles/sec/core" : {
    "description" : " This module provides functionality for querying XBRL Models of financial reports submitted to the SEC.\n \n", 
    "functions" : {
      "max-balance-sheet-date" : [ {
        "description" : " Retrieves the date at which the supplied entity last provided a\n balance sheet.\n", 
        "params" : [ "$cik_or_entity", "$form" ]
      } ], 
      "edgar-facts-for-archives" : [ {
        "description" : " Return all facts for concepts that are defined by one of the common\n edgar taxonomies. In particular, this function returns facts for concepts\n having one of the following prefixes:\n \n   xbrli\n   link\n   xl\n   xlink\n   xbrldt\n   xbrldi\n   nonnum\n   num\n   ref\n   us-gaap\n   dei\n   us-types\n   invest\n   country\n   currency\n   exch\n   naics\n   sic\n   stpr\n   rr\n   rr-ent\n   rr-cal\n   rr-def\n   rr-pre\n \n", 
        "params" : [ "$archive_or_ids" ]
      } ], 
      "extension-facts-for-archives" : [ {
        "description" : " Return all facts for concepts that are NOT defined by one of the common\n edgar taxonomies. In particular, this function returns facts for concepts\n having none of the prefixes listed under function\n sec:edgar-facts-for-archives.\n", 
        "params" : [ "$archive_or_ids" ]
      } ], 
      "normalize-cik" : [ {
        "description" : " Converts the input to a normalized CIK. The input\n can be either a pure CIK without scheme, or an already\n normalized CIK, or an entity object which contains a CIK\n in its id field.\n", 
        "params" : [ "$cik_or_entity" ]
      } ], 
      "latest-main-fact-value-for-concept" : [ {
        "description" : " Retrieves the value of the facts associated with the supplied concept from\n the latest period from supplied models.\n", 
        "params" : [ "$archive_or_id", "$concept-name" ]
      }, {
        "description" : " Retrieves the value of the facts associated with the supplied concept from\n the latest period from supplied archive.\n", 
        "params" : [ "$archive_or_id", "$concept-name", "$options" ]
      } ], 
      "latest-main-fact-for-concept" : [ {
        "description" : " Retrieves the fact associated with the supplied concept from the latest period\n from the supplied archive.\n", 
        "params" : [ "$archive_or_id", "$concept-name" ]
      }, {
        "description" : " Retrieves the fact associated with the supplied concept from the latest period\n from the supplied archive.\n", 
        "params" : [ "$archive_or_id", "$concept-name", "$options" ]
      } ], 
      "populate-schema-with-facts" : [ {
        "description" : " Populates the supplied BizQL schema with facts.\n", 
        "params" : [ "$archive_or_id", "$schema" ]
      }, {
        "description" : " Populates the supplied BizQL schema with facts.\n", 
        "params" : [ "$archive_or_id", "$schema", "$options" ]
      } ]
    }
  }, 
  "http://xbrl.io/modules/bizql/profiles/sec/filings" : {
    "description" : " This module provides functionality for querying financial reports submitted to the SEC.\n \n", 
    "functions" : {
      "document-type" : [ {
        "description" : " Retrieves the document type of the filing.\n", 
        "params" : [ "$filing_or_id" ]
      } ], 
      "end-date" : [ {
        "description" : " Retrieves the end date of the filing.\n", 
        "params" : [ "$filing_or_id" ]
      } ], 
      "connection" : [ {
        "description" : "", 
        "params" : [  ]
      } ]
    }
  }, 
  "http://xbrl.io/modules/bizql/profiles/sec/fiscal/core" : {
    "description" : " This module provides functionality for querying fiscal reports (10-K, 10-Q)\n submitted to the SEC.\n", 
    "functions" : {
      "fiscal-period" : [ {
        "description" : " Retrieves the fiscal period of the filing.\n", 
        "params" : [ "$filing-or-id" ]
      } ], 
      "fiscal-year" : [ {
        "description" : " Retrieves the fiscal year of the filing.\n", 
        "params" : [ "$filing-or-id" ]
      } ], 
      "filings-for-entities-and-fiscal-periods-and-years" : [ {
        "description" : " Retrieves all filings by entities and for given fiscal periods and years.\n", 
        "params" : [ "$entity-or-ids", "$fiscalPeriodFocus", "$fiscalYearFocus" ]
      } ], 
      "components-for-entities-and-fiscal-periods-and-years" : [ {
        "description" : " Retrieves all models that were reported by the supplied entities\n for the supplied fiscal periods.\n", 
        "params" : [ "$entity-or-ids", "$fiscalPeriodFocus", "$fiscalYearFocus" ]
      } ], 
      "balance-sheet-for-fiscal-periods-and-years" : [ {
        "description" : " Retrieves the balance sheet for the given entities and fiscal periods and years.\n", 
        "params" : [ "$entity-or-ids", "$fiscalPeriodFocus", "$fiscalYearFocus" ]
      } ], 
      "latest-reported-fiscal-period" : [ {
        "description" : " Retrieves the latest reported fiscal period and year for the\n supplied entity.\n", 
        "params" : [ "$entity-or-id" ]
      }, {
        "description" : " Retrieves the latest fiscal period and year for the\n supplied entity.\n", 
        "params" : [ "$entity-or-id", "$type" ]
      } ], 
      "connection" : [ {
        "description" : "", 
        "params" : [  ]
      } ]
    }
  }, 
  "http://xbrl.io/modules/bizql/report-schemas" : {
    "description" : " This module provides functions for storing, retrieving, and modifying\n report schemas. Report schemas can be used in BizQL queries. They can be\n instantiated generating a business report.\n Report schemas are stored in the collection reportschemas in\n the project's MongoDB database.\n A report schema needs to be a syntactically valid JSound document.\n", 
    "functions" : {
      "schemas" : [ {
        "description" : " Return all report schemas.\n", 
        "params" : [  ]
      } ], 
      "schema" : [ {
        "description" : " Return the report schema with the given name.\n If more than one schema with the same name is found,\n the function returns the first match.\n", 
        "params" : [ "$name" ]
      } ], 
      "add" : [ {
        "description" : " Add the given schema to the database.\n", 
        "params" : [ "$r" ]
      } ], 
      "update" : [ {
        "description" : " Update a report schema.\n Replaces a report schema in the database with the given schema.\n The schema to be replaced is identified by the value of the name\n field of the given schema.\n", 
        "params" : [ "$schema" ]
      } ], 
      "delete" : [ {
        "description" : " Delete a schema from the database.\n", 
        "params" : [ "$name" ]
      } ]
    }
  }, 
  "http://zorba.io/errors" : {
    "description" : " This module contains one variable declaration for each diagnostic of the\n http://zorba.io/errors namespace.\n The variables serves as documentation for the errors but can also\n be used in the code. For example, one useful scenario is to compare\n an error caught in the catch clause of a try-catch expression with one of\n the variables.\n", 
    "functions" : {

    }
  }, 
  "http://zorba.io/modules/archive" : {
    "description" : " This module provides functionality to work with (possibly compressed)\n archives. For example, it provides functions to retrieve the names or\n extract the values of several entries in a ZIP archive. Moreover,\n there exist functions that allow to create or update archives.\n The following archive formats and compression algorithms are supported:\n \n   ZIP (with compression DEFLATE or STORE)\n   TAR (with compression GZIP)\n \n \n", 
    "functions" : {
      "create" : [ {
        "description" : " Creates a new ZIP archive out of the given entries and contents. \n All entries are compressed with the DEFLATE compression algorithm.\n The parameters $entries and $contents have the same meaning as for\n the function a:create with three arguments.\n Entry entries can include a type element, this element can have one\n of two possible values: \"regular\" or \"directory\". If \"regular\" is\n specified then the entry will be created as a regular file; if \"directory\"\n is specified then the entry will be created as a directory, no contents\n will be read from $contents in this case. If no value is specified for type\n then it will be set to \"regular\". \n Example:\n \n $zip-file := a:create(\n    ({ \"encoding\" : \"ISO-8859-1\", \"type\" : \"directory\", \"name\" : \"dir1\" }, \"dir1/file1\"),\n    (\"file contents\"))\n \n \n", 
        "params" : [ "$entries", "$contents" ]
      }, {
        "description" : " Creates a new archive out of the given entries and contents. \n The $entries arguments provides meta data for each entry in the archive.\n For example, the name of the entry (mandatory) or the last-modified date\n (optional). An entry can either be of type xs:string to describe the entry\n name or of type xs:base64Binary to provide additional meta data.\n The $contents sequence provides the data (xs:string or xs:base64Binary) for\n the entries that should be included in the archive. Its length needs to\n match the length of the entries in the $entries sequence that don't describe\n directory entries (a:ARCH0001). All items of type xs:base64Binary are decoded\n before being added to the archive.\n For each entry, the name, last-modified date and time, and compression\n can be specified. In addition, an encoding can be specified which is used to\n store entries of type xs:string. If no last-modified attribute is given, the\n default is the current date and time. The compression is useful if various\n entries in a ZIP archive are compressed using different compression\n algorithms (i.e. store or deflate).\n For example, the following sequence may be used to describe an archive\n containing two elements: \n {\n   \"last-modified\" : \"{fn:current-dateTime()}\"\n   \"name\" : \"myfile.txt\"\n },\n {\n   \"encoding\" : \"ISO-8859-1\",\n   \"compression\" : \"store\",\n   \"name\" : \"dir/myfile.xml\"\n }\n \n \n The $options argument may be used to describe general options for the\n archive.  For example, the following options can be used to create a ZIP\n archive in which all entries are compressed with the DEFLATE compression\n algorithm: \n {\n   \"format\" : \"ZIP\",\n   \"compression\" : \"DEFLATE\"\n }\n \n \n The result of the function is the generated archive as a item of type\n xs:base64Binary.\n", 
        "params" : [ "$entries", "$contents", "$options" ]
      } ], 
      "entries" : [ {
        "description" : " Returns the header information of all entries in the given archive as a JSON\n objects sequence. \n Such information includes the name of the entry, the uncompressed size,\n as well as the last-modified timestamp. Note that not all values are\n available in every archive.\n", 
        "params" : [ "$archive" ]
      } ], 
      "extract-text" : [ {
        "description" : " Extracts the contents of all entries in the given archive as text\n using UTF-8 as default encoding. \n", 
        "params" : [ "$archive" ]
      }, {
        "description" : " Extracts the contets of the entries identified by a given sequence of\n names as text.\n The default encoding used to read the string is UTF-8. \n", 
        "params" : [ "$archive", "$entry-names" ]
      }, {
        "description" : " Extracts the contets of the entries identified by a given sequence of\n names as text. Each entry is treated with the given encoding. \n", 
        "params" : [ "$archive", "$entry-names", "$encoding" ]
      } ], 
      "extract-binary" : [ {
        "description" : " Returns the entries identified by the given paths from the archive\n as base64Binary. \n", 
        "params" : [ "$archive" ]
      }, {
        "description" : " Returns the entries identified by the given paths from the archive\n as base64Binary. \n", 
        "params" : [ "$archive", "$entry-names" ]
      } ], 
      "update" : [ {
        "description" : " Adds and replaces entries in an archive according to\n the given spec. The contents can be string and base64Binary items. \n The parameters $entries and $contents have the same meaning as for\n the function a:create with three arguments.\n", 
        "params" : [ "$archive", "$entries", "$contents" ]
      } ], 
      "delete" : [ {
        "description" : " Deletes entries from an archive. \n", 
        "params" : [ "$archive", "$entry-names" ]
      } ], 
      "options" : [ {
        "description" : " Returns the algorithm and format options as a JSON object for a given archive.\n For example, for a ZIP archive, the following options element\n would be returned: \n {\n   \"format\" : \"ZIP\",\n   \"compression\" : \"DEFLATE\"\n }\n \n \n", 
        "params" : [ "$archive" ]
      } ]
    }
  }, 
  "http://zorba.io/modules/base64" : {
    "description" : " Base64 encoding and decoding.\n", 
    "functions" : {
      "decode" : [ {
        "description" : " Decode a base64Binary.\n The function assumes that the content after decoding is valid\n UTF-8.\n", 
        "params" : [ "$base64" ]
      }, {
        "description" : " Decode a base64Binary.\n The function assumes that the content after decoding has\n the given encoding.\n", 
        "params" : [ "$base64", "$encoding" ]
      } ], 
      "encode" : [ {
        "description" : " Encode a string as base64Binary.\n", 
        "params" : [ "$string" ]
      } ]
    }
  }, 
  "http://www.zorba-xquery.com/modules/couchbase" : {
    "description" : " : This module provides minimal functionality to interact with the : Couchbase NoSQL database. : : The module is built using the libcouchbase C client library and : exposes most of its functionality in XQuery with JSONiq extensions. : Beyond just allowing for basic key-value store operations (e.g. : put-/get-text or put-/get-binary, this module also allows to work : with Couchbase views in order to allow for complex JSON query : operations. : : @author Juan Zacarias : @project DB Drivers/Couchbase :\n", 
    "functions" : {
      "connect" : [ {
        "description" : " : Connect to the Couchbase server and return an opaque identifier : representing the established connection. : : @param $host address of the couchbase server (e.g. \"localhost:8091\") : @param $username username used for the connection : @param $password password used for the connection : @param $bucket name of the bucket to use (e.g. \"default\") : : @error cb:LCB0001 if the connection to the given host/bucket :   could not be established. : : @return an identifier for the established connection.\n", 
        "params" : [ "$host", "$username", "$password", "$bucket" ]
      }, {
        "description" : " : Connect to the Couchbase server and return an opaque identifier : representing the established connection. : : @param $options a JSONiq object that contains the host, bucket, :   and user information. : : @option \"host\" endpoint of the Couchbase server (mandatory) : @option \"username\" username used for the connection (optional) : @option \"password\" password used for the connection (optional) : @option \"bucket\" name of an existing bucket (mandatory) : : @error cb:LCB0001 if the connection to the given host/bucket :   could not be established. : @error cb:CB0001 if mandatory connection information is missing. : @error cb:CB0007 if a given option is not supported. : : @return an identifier for the established connection. : : Example: :  : { :   \"host\": \"localhost:8091\", :   \"username\" : null, :   \"password\" : null, :   \"bucket\" : \"default\" : } : \n        ", 
        "params" : [ "$options" ]
      } ], 
      "get-text" : [ {
        "description" : " : Return the values of the given keys (type xs:string) as string. :  : @param $db connection reference : @param $key the requested keys : : @error cb:LCB0002 if any error occurs in the communication with :   the server. : : @return A sequence of string Items corresponding to the key\n", 
        "params" : [ "$db", "$key" ]
      }, {
        "description" : " : Return the values of the given keys (type xs:string) as string. :  : @param $db connection reference : @param $key the requested keys : @param $options JSONiq object with additional options : : @option \"expiration-time\" xs:integer value for refreshing the expiration :   time in seconds.  : @option \"encoding\" string with the name of the encoding of the returned :   string (if not UTF-8). :  : @error cb:LCB0002 if any error occurs in the communication with :   the server. : @error cb:CB0006 if the given encoding is not supported. : @error cb:CB0007 if any of the options is not supported. : @error cb:CB0009 if the given expiration time is not an xs:integer. : : @return a sequence of strings for the given keys.\n", 
        "params" : [ "$db", "$key", "$options" ]
      } ], 
      "get-binary" : [ {
        "description" : " : Return the values of the given keys (type xs:string) as base64Binary. :  : @param $db connection reference : @param $key the requested keys : : @error cb:LCB0002 if any error occurs in the communication with :   the server. : : @return a sequence of xs:base64Binary items for the given keys.\n", 
        "params" : [ "$db", "$key" ]
      }, {
        "description" : " : Return the values of the given keys (type xs:string) as base64Binary. :  : @param $db connection reference : @param $key the requested keys : @param $options JSONiq object with additional options : : @option \"expiration-time\" xs:integer value for refreshing the expiration :   time in seconds.  :  : @error cb:LCB0002 if any error occurs in the communication with :   the server. : @error cb:CB0007 if any of the options is not supported. : @error cb:CB0009 if the given expiration time is not an xs:integer. : : @return a sequence of xs:base64Binary items for the given keys.\n", 
        "params" : [ "$db", "$key", "$options" ]
      } ], 
      "remove" : [ {
        "description" : " : Remove the values matching the given keys (xs:string) from the server. : : @param $db connection reference : @param $key the keys of the values that should be removed. : : @error cb:LCB0002 if any error occurs in the communication with :   the server. : @return a empty sequence.\n", 
        "params" : [ "$db", "$key" ]
      } ], 
      "put-text" : [ {
        "description" : " : Store the given key-value bindings. : : The values are stored with the UTF-8 encoding and a default : expiration time of 60 seconds. : : @param $db connection reference : @param $key the keys to store : @param $value the values (as xs:string) to be stored. : : @error cb:LCB0002 if any error occurs in the communication with :   the server. : @error cb:CB0005 if the number of keys doesn't match the number :   of values. : @return a empty sequence.\n", 
        "params" : [ "$db", "$key", "$value" ]
      }, {
        "description" : " : Store the given key-value bindings. : : @param $db connection reference : @param $key the keys to store : @param $value the values (as xs:string) to be stored. : @param $options JSONiq object with additional options : : @option \"expiration-time\" integer value that represent the  :         expiration time in seconds. : @option \"operation\" type of operation, possible values are  :         \"add\", \"replace\", \"set\", \"append\" and \"prepend\". : @option \"encoding\" the encoding that should be used for the :         value (default is UTF-8). : @option \"wait\" variable for setting if a wait for persistancy in  :         the storing key is needed, possible values are \"persist\"  :         and \"false\". :  : @error cb:LCB0002 if any error occurs in the communication with :   the server. : @error cb:CB0005 if the number of keys doesn't match the number :   of values. : @error cb:CB0006 if the given encoding is not supported. : @error cb:CB0007 if any of the options is not supported. : @error cb:CB0009 if the given expiration time is not an xs:integer.  : @error cb:CB0011 if the stored Variable was not stored : : @return a empty sequence.\n", 
        "params" : [ "$db", "$key", "$value", "$options" ]
      } ], 
      "put-binary" : [ {
        "description" : " : Store the given key-value bindings. : : @param $db connection reference : @param $key the keys to store : @param $value the values (as xs:base64binary) to be stored. : : @error cb:LCB0002 if any error occurs in the communication with :   the server. : @error cb:CB0005 if the number of keys doesn't match the number :   of values. : : @return a empty sequence.\n", 
        "params" : [ "$db", "$key", "$value" ]
      }, {
        "description" : " : Store the given key-value bindings. : : @param $db connection reference : @param $key the keys to store : @param $value the values (as xs:base64binary) to be stored. : @param $options JSONiq object with additional options : @option \"expiration-time\" integer value that represent the  :         expiration time in seconds. : @option \"operation\" type of operation, possible values are  :         \"add\", \"replace\", \"set\", \"append\" and \"prepend\". : @option \"wait\" variable for setting if a wait for persistancy in  :         the storing key is needed, possible values are \"persist\"  :         and \"false\". : : @error cb:LCB0002 if any error occurs in the communication with :   the server. : @error cb:CB0005 if the number of keys doesn't match the number :   of values. : @error cb:CB0007 if any of the options is not supported. : @error cb:CB0009 if the given expiration time is not an xs:integer. : @error cb:CB0011 if the stored Variable was not stored : : @return a empty sequence.\n", 
        "params" : [ "$db", "$key", "$value", "$options" ]
      } ], 
      "flush" : [ {
        "description" : " : Remove all key/value pairs from the cluster : : @param $db connection reference : : @error cb:LCB0002 if any error occurs in the communication with :   the server. : : @return a empty sequence.\n", 
        "params" : [ "$db" ]
      } ], 
      "touch" : [ {
        "description" : " : Refresh the expiration time of the given keys. : : @param $db connection reference : @param $key the keys to touch : @param $exp-time new expieration time in seconds : : @error cb:LCB0002 if any error occurs in the communication with :   the server. : : @return a empty sequence.\n", 
        "params" : [ "$db", "$key", "$exp-time" ]
      } ], 
      "view" : [ {
        "description" : " : Retrieve the content of existing views. : : @param $db connection reference : @param $path contains the string of a view path  :        (e.g. \"_design/test/_view/vies\"). : : @error cb:LCB0002 if any error occurs in the communication with :   the server. : : @return a sequence of strings (as JSON) containing information of the views.\n", 
        "params" : [ "$db", "$path" ]
      }, {
        "description" : " : Retrieve the content of existing views. : : @param $db connection reference : @param $path contains the string of a view path  :        (e.g. \"_design/test/_view/vies\"). : @param $options JSONiq object with additional options : : @option Json object whith options for the querying the view. available options: :         \"encoding\" string with the name of the encoding of the returned :         strings (if not UTF-8). :         \"stale\" option's value is a string with the type of stale to be used.  :         Valid values: :           \"ok\" : the view is not updated :           \"false\" : the view is updated before the function view is executed,  :            this options needs the key to be on disk before the call of the  :            view function. :           \"update_after\" : the view is updated after the call of view :         \"limit\" option's value is an integer which sets a number of how many  :         rows the view will show.   : : @error cb:LCB0002 if any error occurs in the communication with :   the server. : @error cb:CB0007 if any of the options is not supported. : : @return a sequence of strings (as JSON) containing information of the views.\n", 
        "params" : [ "$db", "$path", "$options" ]
      } ], 
      "view-text" : [ {
        "description" : "", 
        "params" : [ "$db", "$path" ]
      }, {
        "description" : "", 
        "params" : [ "$db", "$path", "$options" ]
      } ], 
      "create-view" : [ {
        "description" : " : Create a document/view.  : If the document already exists, it is replaced. A document can hold several : views that must be specified in the same call of cb:create-view.  : : @param $db connection reference : @param $doc-name name of the document to create. : @param $view-names names of the views to create in the document. : : @error cb:LCB0002 if any error occurs in the communication with :   the server. : : @return the names of the paths for the views that have been :   created.\n", 
        "params" : [ "$db", "$doc-name", "$view-names" ]
      }, {
        "description" : " : Create a document/view.  : If the document already exists, it is replaced. A document can hold several : views that must be specified in the same call of cb:create-view.  : : @param $db connection reference : @param $doc-name name of the document to create. : @param $view-names names of the views to create in the document. : @param $options options describing how to create the view. : : @option \"key\" value must be a string containing the name of the value :         in the json object stored in couchbase that is wanted to be  :         displayed as the value of \"key\" in the resulting json. : @option \"values\" value must be a string or an array of strings containing :         the name of the value in the json object stored in couchbase that  :         is wanted to be displayed as the value of \"value\" in the resulting :         json. : @option \"function\" string with a javascript function describing the  :         map function of the view. cb:create-view won't throw an error :         if the javascript function is not compilable or functional. If :         this option is set the \"key\" and \"values\" options are ignored. : : @error cb:LCB0002 if any error occurs in the communication with :   the server. : @error cb:CB0005 if the number of options doesn't match the number of :   view-names. : @error cb:CB0007 if any of the options is not supported. : @error cb:CB0010 if any of the given options has an invalid type. : : @return the names of the paths for the views that have been :   created.\n", 
        "params" : [ "$db", "$doc-name", "$view-names", "$options" ]
      } ], 
      "delete-view" : [ {
        "description" : " : Delete a document/view.  : If the document doesn't exists, function does nothing. All the views hold in the : Document are deleted, this function can't delete single views.  : : @param $db connection reference : @param $doc-name name of the document to create. : : @error cb:LCB0002 if any error occurs in the communication with :   the server. : : @return empty sequence.\n", 
        "params" : [ "$db", "$doc" ]
      } ]
    }
  }, 
  "http://zorba.io/modules/csv" : {
    "description" : " Function library providing converters from CSV/TXT to XML and back.\n The functions are optimized to work with large amounts of data, in a streaming way.\n", 
    "functions" : {
      "parse" : [ {
        "description" : " Parse a CSV or fixed size text and convert to XML.\n By default each line is converted to a &lt;row&gt; element, and each field to a &lt;column&gt; element inside &lt;row&gt;.\n The format of the param $options is:\n  \n    &lt;csv-options:options&gt;\n        &lt;csv  [separator=\"default comma ,\"] ?\n          [quote-char=\"default double quotes &amp;quote;\"]?\n          [quote-escape=\"default double double quotes &amp;quote;&amp;quote;\"]? /&gt;\n        or\n        &lt;column-widths&gt;\n          &lt;column-width&gt;[column fixed width, unsigned int]&lt;column-width&gt;*\n        &lt;/column-widths&gt;\n        or\n        &lt;column-positions&gt;\n          &lt;column-position&gt;[column position on line, unsigned int]&lt;column-position&gt;*\n        &lt;/column-positions&gt;\n        &lt;first-row-is-header [line=\"first_line[-last_line]?\"]?/&gt;?\n        &lt;start-from-row line=\"first_line[-last_line]?\"/&gt;?\n        &lt;add-last-void-columns/&gt;?\n        &lt;xml-nodes&gt;\n          [&lt;row-name&gt;\n            [&lt;column-name/&gt;]?\n          &lt;/row-name&gt;]?\n        &lt;/xml-nodes&gt;?\n    &lt;/csv-options:options&gt;\n  \n    All the parameters are optional and can appear in any order.\n    All the parameters are case sensitive. The namespace used is \"http://zorba.io/modules/csv-options\".\n    All strings must have UTF-8 encoding.\n    Parameters csv, column-widths, column-positions are mutually exclusive. If none is specified,\n    the input string is assumed to be csv.\n    Description of parameters:\n    \n     csv\n      Specifies the parameters for parsing a csv string.\n       \n        separator\n        The character or group of characters used to separating fields in a row.\n            If it is not specified, it defaults to comma ','.\n        \n        quote-char\n        The character or group of characters used for quoting the fields that may contain special characters,\n             like separator, new line or this quote char. The default value is double quote \".\n        \n        quote-escape\n        The group of characters used for escaping the quote char inside a field. The whole quote escape group\n           is translated to a quote char during parsing. The default value is double double quotes \"\".\n        \n       \n     \n     \n     column-widths\n     Specifies the column widths for fixed size text. It contains multiple column-width child elements\n        specifying the fixed width of each column, from left to right.\n        If the line has more fields than specified, they are ignored.\n     \n     column-positions\n     This is an alternative to column-widths, and specifies instead the starting position of each column.\n        Column positions are 1 based, and are specified in order from left to right.\n        The last column is read until end of line. The first column position can be greater than 1, if you want\n        to parse only a part of the input text.\n     \n     first-row-is-header\n     The presence of this element indicates that the first row is to be treated as the name of the columns.\n        If it is not present, then each field is enclosed in a &lt;column&gt; element,\n        or how it is specified in &lt;xml-nodes&gt; parameter.\n        If the first row is the header, then each field is enclosed in an element with the corresponding name from the header.\n        For example, the csv:\n        \n        ID,Name,Occupation\n        1,John,student\n        \n        is parsed into:\n        \n        &lt;row&gt;\n        &lt;ID&gt;1&lt;/ID&gt;\n        &lt;Name&gt;John&lt;/Name&gt;\n        &lt;Occupation&gt;student&lt;/Occupation&gt;\n        &lt;/row&gt;\n        \n        If the header names contain characters that cannot be used in a QName, they are replaced with underscore '_'.\n        The namespace for the header QNames is taken from the column name specified in xml-nodes parameter, or from\n        the row name, or if that doesn't exist either then empty namespace is used. \n        If the header is not the first line in the input string, the starting line can be specified in the line attribute.\n        If a column does not have a name, a new name is constructed in the form columnN where N is the position of the column,\n        starting from 1.\n        Subheaders\n        If the header consists of more than one line, this can be specified in the line attribute in the form\n        \"first_line - last_line\". Having more lines as the header translates into a hierarchy of elements in the xml.\n        For example, the csv:\n        \n        ID,Name,,Occupation\n        ,First Name,Last Name,\n        1,John,Howard,student\n        \n        is parsed into:\n        \n        &lt;row&gt;\n        &lt;ID&gt;1&lt;/ID&gt;\n        &lt;Name&gt;\n          &lt;First_Name&gt;John&lt;/First_Name&gt;\n          &lt;Last_Name&gt;Howard&lt;/Last_Name&gt;\n        &lt;/Name&gt;\n        &lt;Occupation&gt;student&lt;/Occupation&gt;\n        &lt;/row&gt;\n        \n        This element can have an attribute \"accept-all-lines\" with values \"false\" or \"true\" (default \"false\").\n        When set to true it tells the parser to not report lines that do not have the same number of items as\n        the header. If set to false, the parser will raise a csv:WrongInput error for these lines.\n     \n     start-from-row\n     If the data does not start from line 1 or immediately after the header,\n        you can specify the starting line in the line attribute.\n        Also you can use this attribute in the form \"first_line - last_line\" to specify also the last line\n        if you don't want the whole csv to be parsed.\n     \n     add-last-void-columns\n     In the case when using headers and some data lines are shorter than the header, by default the excess columns are ignored\n          for those lines. You can set the add-last-void-columns parameter to make all the columns appear in xml even if they are void.\n     \n     xml-nodes\n     With this parameter you can specify the names for the row element and for the column element if there is no header.\n        The first element child of this element specifies the desired QName of the row element in the output xml.\n        The name of this element will be used as the name of the row element.\n        The element child of this row element is the column element, and its name will be used as the name of the column elements\n        that enclose the fields in the output xml if there is no header. \n        If the csv has a header, only the namespace is used from the column element.\n        For example, with parameter:\n        \n        &lt;xml-nodes&gt;\n        &lt;r&gt;\n          &lt;c/&gt;\n        &lt;/r&gt;\n        &lt;/xml-nodes&gt;\n        \n        the output for each line will look like:\n        \n        &lt;r&gt;\n          &lt;c&gt;field1&lt;/c&gt;\n          &lt;c&gt;field2&lt;/c&gt;\n          .......\n        &lt;/r&gt;\n        \n     \n    \n", 
        "params" : [ "$csv", "$options" ]
      } ], 
      "parse-internal" : [ {
        "description" : "", 
        "params" : [ "$csv", "$options" ]
      } ], 
      "serialize" : [ {
        "description" : " Convert XML into CSV or fixed size text.\n Note: if you want to serialize out the result, make sure that the serializer method is set to \"text\".\n For example, in zorba command line, you have to set the param --serialize-text.\n When using the file:write(...) function, you have to set the\n method serialization parameter to \"text\":\n \n &lt;output:serialization-parameters&lt;\n   &lt;output:method value=\"text\"/&lt;\n &lt;/output:serialization-parameters&lt;\n \n The $options parameter must have the following format:\n \n    &lt;csv-options:options&gt;\n        &lt;csv  [separator=\"default comma ,\"] ? \n          [quote-char=\"default double quotes &amp;quote;\"]? \n          [quote-escape=\"default double double quotes &amp;quote;&amp;quote;\"]? /&gt; \n        \n        or\n        &lt;column-widths [align=\"left|right\"]?&gt;\n          &lt;column-width [align=\"left|right\"]?&gt;[column fixed width, unsigned int]&lt;column-width&gt;*\n        &lt;/column-widths&gt;\n        \n        or\n        &lt;column-positions [align=\"left|right\"]?&gt;\n          &lt;column-position [align=\"left|right\"]?&gt;[column position on line, unsigned int]&lt;column-position&gt;*\n        &lt;/column-positions&gt;\n        \n        &lt;first-row-is-header/&gt;?\n    &lt;/csv-options:options&gt;\n \n All the parameters are optional and can appear in any order.\n All the parameters are case sensitive. The namespace used is \"http://zorba.io/modules/csv-options\".\n All strings must have UTF-8 encoding.\n Parameters csv, column-widths, column-positions are mutually exclusive.\n If none is specified, the xml is converted to csv.\n Description of parameters:\n    \n     csv\n      Specifies the parameters for converting to csv.\n       \n        separator\n        The character or group of characters used to separating fields in a row.\n            If it is not specified, it defaults to comma ','.\n        \n        quote-char\n        The character or group of characters used for quoting the fields that may contain special characters,\n             like separator, new line or this quote char. The default value is double quote \".\n        \n        quote-escape\n        The group of characters used for escaping the quote char inside a field. The whole quote escape group\n           is translated to a quote char during parsing. The default value is double double quotes \"\".\n        \n       \n     \n     \n     column-widths\n     Specifies the column widths for fixed size text. It contains multiple column-width child elements\n        specifying the fixed width of each column, from left to right.\n        With the attribute align you can specify how to align fields that are smaller than the column width.\n        The default alignment is left.\n     \n     column-positions\n     This is an alternative to column-widths, and specifies instead the starting position of each column.\n        Column positions are 1 based, and are specified in order from left to right.\n        The last column has a variable length.\n        With the attribute align you can specify how to align fields that are smaller than the column width.\n        The default alignment is left. The last column does not need alignment.\n     \n     first-row-is-header\n     The presence of this element indicates that the first row will contain the header, that is, the names of\n        the column elements. Only the column names from the first row element are taken into account.\n        For example, the row xml:\n        &lt;row&gt;\n        &lt;ID&gt;1&lt;/ID&gt;\n        &lt;Name&gt;John&lt;/Name&gt;\n        &lt;Occupation&gt;student&lt;/Occupation&gt;\n        &lt;/row&gt;\n        \n        is converted to\n        ID,Name,Occupation\n        1,John,student\n        \n        The header names are the localnames of the column elements, and the namespace is ignored.\n        Subheaders\n        If the row-column hierarchy is more complex, then subheaders are also generated on subsequent lines.\n        The number of subheaders depends on the depth of the column hierarchy.\n        When generating the subheaders, the non-whitespace text nodes are also taken into account,\n        and a separate column is generated for them too.\n        For example, the xml row element:\n        &lt;row&gt;\n        &lt;ID&gt;1&lt;/ID&gt;\n        &lt;Name&gt;\n          Mr.\n          &lt;First_Name&gt;John&lt;/First_Name&gt;\n          &lt;Last_Name&gt;Howard&lt;/Last_Name&gt;\n        &lt;/Name&gt;\n        &lt;Occupation&gt;student&lt;/Occupation&gt;\n        &lt;/row&gt;\n        is converted to\n        ID,Name,,Occupation\n        ,,First Name,Last Name,\n        1,Mr.,John,Howard,student\n        \n        If first-row-is-header is not specified and the columns have a deeper hierarchy,\n          only the first layer of columns is processed, and the fields are the string values of each column.\n        This element can have an attribute \"ignore-foreign-input\" with values \"false\" or \"true\" (default \"false\").\n        When set to true it tells the serializer to ignore elements that to not match the header names.\n        If set to false, the serializer will raise a csv:ForeignInput error for these elements.\n     \n    \n", 
        "params" : [ "$xml", "$options" ]
      } ], 
      "serialize-internal" : [ {
        "description" : "", 
        "params" : [ "$xml", "$options" ]
      } ]
    }
  }, 
  "http://zorba.io/modules/data-cleaning/character-based-string-similarity" : {
    "description" : " This library module provides character-based string similarity functions\n that view strings as sequences of characters, generally computing a similarity score\n that corresponds to the cost of transforming one string into another.\n These functions are particularly useful for matching near duplicate strings\n in the presence of typographical errors. \n The logic contained in this module is not specific to any particular XQuery implementation.\n", 
    "functions" : {
      "edit-distance" : [ {
        "description" : " Returns the edit distance between two strings.\n \n This distance, also refered to as the Levenshtein distance, is defined as the minimum number\n of edits needed to transform one string into the other, with the allowable edit operations\n being insertion, deletion, or substitution of a single character.\n \n Example usage : edit-distance(\"FLWOR\", \"FLOWER\")\n \n The function invocation in the example above returns : 2\n", 
        "params" : [ "$s1", "$s2" ]
      } ], 
      "jaro" : [ {
        "description" : " Returns the Jaro similarity coefficient between two strings.\n \n This similarity coefficient is based on the number of transposed characters and on a\n weighted sum of the percentage of matched characters held within the strings. The higher\n the Jaro-Winkler value is, the more similar the strings are. The coefficient is\n normalized such that 0 equates to no similarity and 1 is an exact match.\n \n Example usage : jaro(\"FLWOR Found.\", \"FLWOR Foundation\")\n \n The function invocation in the example above returns : 0.5853174603174603\n", 
        "params" : [ "$s1", "$s2" ]
      } ], 
      "jaro-winkler" : [ {
        "description" : " Returns the Jaro-Winkler similarity coefficient between two strings.\n \n This similarity coefficient corresponds to an extension of the Jaro similarity coefficient that weights or\n penalizes strings based on their similarity at the beginning of the string, up to a given prefix size.\n \n Example usage : jaro-winkler(\"DWAYNE\", \"DUANE\", 4, 0.1 )\n \n The function invocation in the example above returns : 0.8577777777777778\n", 
        "params" : [ "$s1", "$s2", "$prefix", "$fact" ]
      } ], 
      "needleman-wunsch" : [ {
        "description" : " Returns the Needleman-Wunsch distance between two strings.\n \n The Needleman-Wunsch distance is similar to the basic edit distance metric, adding a\n variable cost adjustment to the cost of a gap (i.e., an insertion or deletion) in the\n distance metric.\n \n Example usage : needleman-wunsch(\"KAK\", \"KQRK\", 1, 1)\n \n The function invocation in the example above returns : 0\n", 
        "params" : [ "$s1", "$s2", "$score", "$penalty" ]
      } ], 
      "smith-waterman" : [ {
        "description" : " Returns the Smith-Waterman distance between two strings.\n \n Example usage : smith-waterman(\"ACACACTA\", \"AGCACACA\", 2, 1)\n \n The function invocation in the example above returns : 12\n", 
        "params" : [ "$s1", "$s2", "$score", "$penalty" ]
      } ]
    }
  }, 
  "http://zorba.io/modules/data-cleaning/consolidation" : {
    "description" : " This library module provides data consolidation functions that generally take as input a sequence of XML nodes\n and apply some rule in order do decide which node is better suited to represent the entire sequence.\n \n The logic contained in this module is not specific to any particular XQuery implementation,\n although the consolidation functions based on matching sequences against XPath expressions require\n some form of dynamic evaluation for XPath expressions.\n", 
    "functions" : {
      "most-frequent" : [ {
        "description" : " Returns the single most frequent node in a sequence of nodes provided as input.\n If more then one answer is possible, returns the first node according to the order of the input sequence.\n \n Example usage : most-frequent( ( \"a\", \"a\", \"b\") )\n \n The function invocation in the example above returns : (\"a\")\n", 
        "params" : [ "$s" ]
      } ], 
      "least-frequent" : [ {
        "description" : " Returns the single less frequent node in a sequence of nodes provided as input.\n If more then one answer is possible, return the first node according to the order of the input sequence.\n \n Example usage : least-frequent( ( \"a\", \"a\", \"b\") )\n \n The function invocation in the example above returns : (\"b\")\n", 
        "params" : [ "$s" ]
      } ], 
      "longest" : [ {
        "description" : " Returns the single longest string, in terms of the number of characters, in a sequence of strings provided as input.\n If more then one answer is possible, return the first string according to the order of the input sequence.\n \n Example usage : con:longest( ( \"a\", \"aa\", \"aaa\") )\n \n The function invocation in the example above returns : (\"aaa\")\n", 
        "params" : [ "$s" ]
      } ], 
      "shortest" : [ {
        "description" : " Returns the single shortest string, in terms of the number of characters, in a sequence of strings provided as input.\n If more then one answer is possible, return the first string according to the order of the input sequence.\n \n Example usage : shortest( ( \"a\", \"aa\", \"aaa\") )\n \n The function invocation in the example above returns : (\"a\")\n", 
        "params" : [ "$s" ]
      } ], 
      "most-tokens" : [ {
        "description" : " Returns the single longest string, in terms of the number of tokens, in a sequence of strings provided as input.\n If more then one answer is possible, return the first string according to the order of the input sequence.\n \n Example usage : most-tokens( ( \"a b c\", \"a b\", \"a\"), \" +\" )\n \n The function invocation in the example above returns : (\"a b c\")\n", 
        "params" : [ "$s", "$r" ]
      } ], 
      "least-tokens" : [ {
        "description" : " Returns the single shortest string, in terms of the number of tokens, in a sequence of strings provided as input.\n If more then one answer is possible, return the first string according to the order of the input sequence.\n \n Example usage : least-tokens( ( \"a b c\", \"a b\", \"a\"), \" +\" )\n \n The function invocation in the example above returns : (\"a\")\n", 
        "params" : [ "$s", "$r" ]
      } ], 
      "matching" : [ {
        "description" : " Returns the strings from an input sequence of strings that match a particular regular expression.\n \n Example usage : matching( ( \"a A b\", \"c AAA d\", \"e BB f\"), \"A+\" )\n \n The function invocation in the example above returns : ( \"a A b\", \"c AAA d\")\n", 
        "params" : [ "$s", "$r" ]
      } ], 
      "superstring" : [ {
        "description" : " Returns the single string, from an input sequence of strings, that appears more frequently as part\n of the other strings in the sequence. If no such string exists, the function returns an empty sequence.\n If more then one answer is possible, the function returns the first string according to the order of the input sequence.\n \n Example usage : super-string( ( \"aaa bbb ccc\", \"aaa bbb\", \"aaa ddd\", \"eee fff\" ) )\n \n The function invocation in the example above returns : ( \"aaa bbb\" )\n", 
        "params" : [ "$s" ]
      } ], 
      "most-similar-edit-distance" : [ {
        "description" : " Returns the single most similar string, in terms of the edit distance metric towards an input string,\n in a sequence of strings provided as input. If more than one string has a maximum similarity (a minimum\n value for the edit distance metric), the function return the first string according to the order of the\n input sequence.\n \n Example usage : most-similar-edit-distance( ( \"aaabbbccc\", \"aaabbb\", \"eeefff\" ), \"aaab\" )\n \n The function invocation in the example above returns : ( \"aaabbb\" )\n", 
        "params" : [ "$s", "$m" ]
      } ], 
      "least-similar-edit-distance" : [ {
        "description" : " Returns the single least similar string, in terms of the edit distance metric towards an input string,\n in a sequence of strings provided as input. If more than one string has a minimum similarity (a maximum\n value for the edit distance metric), return the first string according to the order of the input sequence.\n \n Example usage : least-similar-edit-distance( ( \"aaabbbccc\", \"aaabbb\", \"eeefff\" ), \"aaab\" )\n \n The function invocation in the example above returns : ( \"eeefff\" )\n", 
        "params" : [ "$s", "$m" ]
      } ], 
      "most-elements" : [ {
        "description" : " Returns the single node having the largest number of descending elements (sub-elements at any given depth)\n in a sequence of nodes provided as input.\n If more then one answer is possible, return the first node according to the order of the input sequence.\n \n Example usage : most-elements( ( &lt;a&gt;&lt;b/&gt;&lt;/a&gt;, &lt;a/&gt;, &lt;b/&gt;) )\n \n The function invocation in the example above returns : (&lt;a&gt;&lt;b/&gt;&lt;/a&gt;)\n", 
        "params" : [ "$s" ]
      } ], 
      "most-attributes" : [ {
        "description" : " Returns the single node having the largest number of descending attributes (attributes at any given depth)\n in a sequence of nodes provided as input.\n If more then one answer is possible, return the first node according to the order of the input sequence.\n \n Example usage : most-attributes( ( &lt;a att1=\"a1\" att2=\"a2\"/&gt;, &lt;b att1=\"a1\" /&gt;, &lt;c/&gt; ) )\n \n The function invocation in the example above returns : (&lt;a att1=\"a1\" att2=\"a2\"/&gt;)\n", 
        "params" : [ "$s" ]
      } ], 
      "most-nodes" : [ {
        "description" : " Returns the single node having the largest number of descending nodes (sub-nodes at any given depth) in a\n sequence of nodes provided as input.\n If more then one answer is possible, return the first node according to the order of the input sequence.\n \n Example usage : most-nodes( ( &lt;a&gt;&lt;b/&gt;&lt;/a&gt;, &lt;a/&gt;, &lt;b/&gt;) )\n \n The function invocation in the example above returns : (&lt;a&gt;&lt;b/&gt;&lt;/a&gt;)\n", 
        "params" : [ "$s" ]
      } ], 
      "least-elements" : [ {
        "description" : " Returns the single node having the smallest number of descending elements (sub-elements at any given depth)\n in a sequence of nodes provided as input.\n If more then one answer is possible, return the first node according to the order of the input sequence.\n \n Example usage : least-elements( ( &lt;a&gt;&lt;b/&gt;&lt;/a&gt;, &lt;b&gt;&lt;c/&gt;&lt;/b&gt;, &lt;d/&gt;) )\n \n The function invocation in the example above returns : (&lt;d/&gt;)\n", 
        "params" : [ "$s" ]
      } ], 
      "least-attributes" : [ {
        "description" : " Returns the single node having the smallest number of descending attributes (attributes at any given depth)\n in a sequence of nodes provided as input.\n If more then one answer is possible, return the first node according to the order of the input sequence.\n \n Example usage : least-attributes( ( &lt;a att1=\"a1\" att2=\"a2\"/&gt;, &lt;b att1=\"a1\" /&gt;, &lt;c/&gt; ) )\n \n The function invocation in the example above returns : (&lt;c/&gt;)\n", 
        "params" : [ "$s" ]
      } ], 
      "least-nodes" : [ {
        "description" : " Returns the single node having the smallest number of descending nodes (sub-nodes at any given depth)\n in a sequence of nodes provided as input.\n If more then one answer is possible, return the first node according to the order of the input sequence.\n \n Example usage : least-nodes( ( &lt;a&gt;&lt;b/&gt;&lt;/a&gt;, &lt;b&gt;&lt;c/&gt;&lt;/b&gt;, &lt;d/&gt;) )\n \n The function invocation in the example above returns : (&lt;d/&gt;)\n", 
        "params" : [ "$s" ]
      } ], 
      "most-distinct-elements" : [ {
        "description" : " Returns the single node having the largest number of distinct descending elements (sub-elements at any\n given depth) in a sequence of nodes provided as input.\n If more then one answer is possible, return the first node according to the order of the input sequence.\n \n Example usage : most-distinct-elements( ( &lt;a&gt;&lt;b/&gt;&lt;c/&gt;&lt;d/&gt;&lt;/a&gt;, &lt;a&gt;&lt;b/&gt;&lt;b/&gt;&lt;c/&gt;&lt;/a&gt;, &lt;a/&gt; ) )\n \n The function invocation in the example above returns : (&lt;a&gt;&lt;b/&gt;&lt;c/&gt;&lt;d/&gt;&lt;/a&gt;)\n", 
        "params" : [ "$s" ]
      } ], 
      "most-distinct-attributes" : [ {
        "description" : " Returns the single node having the largest number of distinct descending attributes (attributes at any\n given depth) in a sequence of nodes provided as input.\n If more then one answer is possible, return the first node according to the order of the input sequence.\n \n Example usage : most-distinct-attributes( ( &lt;a att1=\"a1\" att2=\"a2\" att3=\"a3\"/&gt;, &lt;a att1=\"a1\" att2=\"a2\"&gt;&lt;b att2=\"a2\" /&gt;&lt;/a&gt;, &lt;c/&gt; ) )\n \n The function invocation in the example above returns : (&lt;a att1=\"a1\" att2=\"a2\" att3=\"a3\"/&gt;)\n", 
        "params" : [ "$s" ]
      } ], 
      "most-distinct-nodes" : [ {
        "description" : " Returns the single node having the largest number of distinct descending nodes (sub-nodes at any given depth) in\n a sequence of nodes provided as input.\n If more then one answer is possible, return the first node according to the order of the input sequence.\n \n Example usage : most-distinct-nodes( ( &lt;a&gt;&lt;b/&gt;&lt;/a&gt;, &lt;a&gt;&lt;a/&gt;&lt;/a&gt;, &lt;b/&gt;) )\n \n The function invocation in the example above returns : (&lt;a&gt;&lt;b/&gt;&lt;/a&gt;)\n", 
        "params" : [ "$s" ]
      } ], 
      "least-distinct-elements" : [ {
        "description" : " Returns the single node having the smallest number of distinct descending elements (sub-elements at any\n given depth) in a sequence of nodes provided as input.\n If more then one answer is possible, return the first node according to the order of the input sequence.\n \n Example usage :  least-distinct-elements( ( &lt;a&gt;&lt;b/&gt;&lt;/a&gt;, &lt;b&gt;&lt;c/&gt;&lt;/b&gt;, &lt;d/&gt;) ) \n \n The function invocation in the example above returns :  (&lt;d/&gt;) \n", 
        "params" : [ "$s" ]
      } ], 
      "least-distinct-attributes" : [ {
        "description" : " Returns the single node having the smallest number of distinct descending attributes (attributes at any\n given depth) in a sequence of nodes provided as input.\n If more then one answer is possible, return the first node according to the order of the input sequence.\n \n Example usage :  least-distinct-attributes( ( &lt;a att1=\"a1\" att2=\"a2\"/&gt;, &lt;b att1=\"a1\" /&gt;, &lt;c/&gt; ) ) \n \n The function invocation in the example above returns :  (&lt;c/&gt;) \n", 
        "params" : [ "$s" ]
      } ], 
      "least-distinct-nodes" : [ {
        "description" : " Returns the single node having the smallest number of distinct descending nodes (sub-nodes at any given depth)\n in a sequence of nodes provided as input.\n If more then one answer is possible, return the first node according to the order of the input sequence.\n \n Example usage :  least-distinct-nodes( ( &lt;a&gt;&lt;b/&gt;&lt;/a&gt;, &lt;b&gt;&lt;c/&gt;&lt;/b&gt;, &lt;d/&gt;) ) \n \n The function invocation in the example above returns :  (&lt;d/&gt;) \n", 
        "params" : [ "$s" ]
      } ], 
      "all-xpaths" : [ {
        "description" : " Returns the elements from an input sequence of elements that, when matched to a given set of XPath expressions,\n produce a non-empty set of nodes in all the cases.\n \n Example usage :  all-xpaths( ( &lt;a&gt;&lt;b/&gt;&lt;/a&gt;, &lt;c&gt;&lt;d/&gt;&lt;/c&gt;, &lt;d/&gt;), (\".//b\") ) \n \n The function invocation in the example above returns :  (&lt;a&gt;&lt;b/&gt;&lt;/a&gt;) \n", 
        "params" : [ "$s", "$paths" ]
      } ], 
      "some-xpaths" : [ {
        "description" : " Returns the elements from a sequence of elements that, when matched to a given set of XPath expressions,\n produce a non-empty set of nodes for some of the cases.\n \n Example usage :  some-xpaths( ( &lt;a&gt;&lt;b/&gt;&lt;/a&gt;, &lt;d&gt;&lt;c/&gt;&lt;/d&gt;, &lt;d/&gt;), (\".//b\", \".//c\") ) \n \n The function invocation in the example above returns :  ( &lt;a&gt;&lt;b/&gt;&lt;/a&gt; , &lt;d&gt;&lt;c/&gt;&lt;/d&gt; ) \n", 
        "params" : [ "$s", "$paths" ]
      } ], 
      "most-xpaths" : [ {
        "description" : " Returns the single element from an input sequence of elements that matches the largest number of\n XPath expressions from a given set, producing a non-empty set of nodes.\n If more then one answer is possible, return the first element according to the order of the input sequence.\n \n Example usage :  most-xpaths( ( &lt;a&gt;&lt;b/&gt;&lt;/a&gt;, &lt;d&gt;&lt;c/&gt;&lt;b/&gt;&lt;/d&gt;, &lt;d/&gt;) , (\".//b\", \".//c\") ) \n \n The function invocation in the example above returns :  ( &lt;d&gt;&lt;c/&gt;&lt;b/&gt;&lt;/d&gt; ) \n", 
        "params" : [ "$s", "$paths" ]
      } ], 
      "least-xpaths" : [ {
        "description" : " Returns the single element from an input sequence of elements that matches the smallest number of\n XPath expressions from a given set, producing a non-empty set of nodes.\n If more then one answer is possible, return the first element according to the order of the input sequence.\n \n Example usage :  least-xpaths( ( &lt;a&gt;&lt;b/&gt;&lt;/a&gt;, &lt;d&gt;&lt;c/&gt;&lt;b/&gt;&lt;/d&gt;, &lt;d/&gt;) , (\".//b\", \".//c\") ) \n \n The function invocation in the example above returns :  ( $lt;d/&gt; ) \n", 
        "params" : [ "$s", "$paths" ]
      } ], 
      "validating-schema" : [ {
        "description" : " Returns the nodes from an input sequence of nodes that validate against a given XML Schema.\n \n Example usage :  validating-schema ( ( &lt;a/&gt; , &lt;b/&gt; ), &lt;xs:schema xmlns:xs=\"http://www.w3.org/2001/XMLSchema\"&gt;&lt;xs:element name=\"a\" /&gt;&lt;/xs:schema&gt; ) \n \n The function invocation in the example above returns :  ( &lt;a/&gt; ) \n", 
        "params" : [ "$s", "$schema" ]
      } ]
    }
  }, 
  "http://zorba.io/modules/data-cleaning/conversion" : {
    "description" : " This library module provides data conversion functions for processing calendar dates,\n temporal values, currency values, units of measurement, location names and postal addresses.\n \n The logic contained in this module is not specific to any particular XQuery implementation.\n", 
    "functions" : {
      "phone-from-user" : [ {
        "description" : " Uses a White-pages Web service to discover information about a given name,\n returning a sequence of strings for the phone numbers associated to the name.\n", 
        "params" : [ "$name" ]
      } ], 
      "address-from-user" : [ {
        "description" : " Uses a White-pages Web service to discover information about a given name,\n returning a sequence of strings for the addresses associated to the name.\n", 
        "params" : [ "$name" ]
      } ], 
      "user-from-phone" : [ {
        "description" : " Uses a White-pages Web service to discover information about a given phone number,\n returning a sequence of strings for the name associated to the phone number.\n", 
        "params" : [ "$phone-number" ]
      } ], 
      "address-from-phone" : [ {
        "description" : " Uses a White-pages Web service to discover information about a given phone number,\n returning a string for the address associated to the phone number.\n", 
        "params" : [ "$phone-number" ]
      } ], 
      "user-from-address" : [ {
        "description" : " Uses a White-pages Web service to discover information about a given address,\n returning a sequence of strings for the names associated to the address.\n", 
        "params" : [ "$address" ]
      } ], 
      "phone-from-address" : [ {
        "description" : " Uses a White-pages Web service to discover information about a given address,\n returning a sequence of strings for the phone number associated to the address.\n", 
        "params" : [ "$address" ]
      } ], 
      "unit-convert" : [ {
        "description" : " Conversion function for units of measurement, acting as a wrapper over the CuppaIT WebService.\n", 
        "params" : [ "$v", "$t", "$m1", "$m2" ]
      } ], 
      "geocode-from-address" : [ {
        "description" : " Placename to geospatial coordinates converter, acting as a wrapper over the Yahoo! geocoder service.\n", 
        "params" : [ "$q" ]
      } ], 
      "address-from-geocode" : [ {
        "description" : " Geospatial coordinates to placename converter, acting as a wrapper over the Yahoo! reverse geocoder service.\n", 
        "params" : [ "$lat", "$lon" ]
      } ], 
      "currency-convert" : [ {
        "description" : " Currency conversion function, acting as a wrapper over the WebService from the European Central Bank.\n \n WebService documentation at http://www.ecb.int/stats/exchange/eurofxref/html/index.en.html\n", 
        "params" : [ "$v", "$m1", "$m2", "$date" ]
      } ], 
      "phone-from-domain" : [ {
        "description" : " Uses a whois service to discover information about a given domain name, returning a sequence of strings\n for the phone numbers associated to the name.\n", 
        "params" : [ "$domain" ]
      } ], 
      "address-from-domain" : [ {
        "description" : " Uses a whois service to discover information about a given domain name, returning a sequence of strings\n for the addresses associated to the name.\n", 
        "params" : [ "$domain" ]
      } ], 
      "name-from-domain" : [ {
        "description" : " Uses a whois service to discover information about a given domain name, returning a sequence of strings\n for the person or organization names associated to the name.\n", 
        "params" : [ "$domain" ]
      } ]
    }
  }, 
  "http://zorba.io/modules/data-cleaning/hybrid-string-similarity" : {
    "description" : " This library module provides hybrid string similarity functions, combining the properties of\n character-based string similarity functions and token-based string similarity functions.\n \n The logic contained in this module is not specific to any particular XQuery implementation,\n although the module requires the trigonometic functions of XQuery 3.0 or a math extension\n function such as sqrt($x as numeric) for computing the square root.\n", 
    "functions" : {
      "soft-cosine-tokens-soundex" : [ {
        "description" : " Returns the cosine similarity coefficient between sets of tokens extracted from two strings.\n \n The tokens from each string are weighted according to their occurence frequency (i.e., weighted according to the\n term-frequency heuristic from Information Retrieval).\n The Soundex phonetic similarity function is used to discover token identity, which is equivalent to saying that\n this function returns the cosine similarity coefficient between sets of Soundex keys.\n \n Example usage :  soft-cosine-tokens-soundex(\"ALEKSANDER SMITH\", \"ALEXANDER SMYTH\", \" +\") \n \n The function invocation in the example above returns :  1.0 \n", 
        "params" : [ "$s1", "$s2", "$r" ]
      } ], 
      "soft-cosine-tokens-metaphone" : [ {
        "description" : " Returns the cosine similarity coefficient between sets of tokens extracted from two strings.\n The tokens from each string are weighted according to their occurence frequency (i.e., weighted according to the\n term-frequency heuristic from Information Retrieval).\n The Metaphone phonetic similarity function is used to discover token identity, which is equivalent to saying that\n this function returns the cosine similarity coefficient between sets of Metaphone keys.\n \n Example usage :  soft-cosine-tokens-metaphone(\"ALEKSANDER SMITH\", \"ALEXANDER SMYTH\", \" +\" ) \n \n The function invocation in the example above returns :  1.0 \n", 
        "params" : [ "$s1", "$s2", "$r" ]
      } ], 
      "soft-cosine-tokens-edit-distance" : [ {
        "description" : " Returns the cosine similarity coefficient between sets of tokens extracted from two strings.\n The tokens from each string are weighted according to their occurence frequency (i.e., weighted according to the\n term-frequency heuristic from Information Retrieval).\n The Edit Distance similarity function is used to discover token identity, and tokens having an edit distance\n bellow a given threshold are considered as matching tokens.\n \n Example usage :  soft-cosine-tokens-edit-distance(\"The FLWOR Foundation\", \"FLWOR Found.\", \" +\", 0 ) \n \n The function invocation in the example above returns :  0.408248290463863 \n", 
        "params" : [ "$s1", "$s2", "$r", "$t" ]
      } ], 
      "soft-cosine-tokens-jaro" : [ {
        "description" : " Returns the cosine similarity coefficient between sets of tokens extracted from two strings.\n The tokens from each string are weighted according to their occurence frequency (i.e., weighted according to the\n term-frequency heuristic from Information Retrieval).\n The Jaro similarity function is used to discover token identity, and tokens having a Jaro similarity above\n a given threshold are considered as matching tokens.\n \n Example usage :  soft-cosine-tokens-jaro(\"The FLWOR Foundation\", \"FLWOR Found.\", \" +\", 1 ) \n \n The function invocation in the example above returns :  0.5 \n", 
        "params" : [ "$s1", "$s2", "$r", "$t" ]
      } ], 
      "soft-cosine-tokens-jaro-winkler" : [ {
        "description" : " Returns the cosine similarity coefficient between sets of tokens extracted from two strings.\n The tokens from each string are weighted according to their occurence frequency (i.e., weighted according to the\n term-frequency heuristic from Information Retrieval).\n The Jaro-Winkler similarity function is used to discover token identity, and tokens having a Jaro-Winkler\n similarity above a given threshold are considered as matching tokens.\n \n Example usage :  soft-cosine-tokens-jaro-winkler(\"The FLWOR Foundation\", \"FLWOR Found.\", \" +\", 1, 4, 0.1 ) \n \n The function invocation in the example above returns :  0.45 \n", 
        "params" : [ "$s1", "$s2", "$r", "$t", "$prefix", "$fact" ]
      } ], 
      "monge-elkan-jaro-winkler" : [ {
        "description" : " Returns the Monge-Elkan similarity coefficient between two strings, using the Jaro-Winkler\n similarity function to discover token identity.\n \n Example usage :  monge-elkan-jaro-winkler(\"Comput. Sci. and Eng. Dept., University of California, San Diego\", \"Department of Computer Scinece, Univ. Calif., San Diego\", 4, 0.1) \n \n The function invocation in the example above returns :  0.992 \n", 
        "params" : [ "$s1", "$s2", "$prefix", "$fact" ]
      } ]
    }
  }, 
  "http://zorba.io/modules/data-cleaning/normalization" : {
    "description" : " This library module provides data normalization functions for processing calendar dates,\n temporal values, currency values, units of measurement, location names and postal addresses.\n These functions are particularly useful for converting different data representations into cannonical formats.\n The logic contained in this module is not specific to any particular XQuery implementation.\n", 
    "functions" : {
      "to-date" : [ {
        "description" : " Converts a given string representation of a date value into a date representation valid according\n to the corresponding XML Schema type.\n", 
        "params" : [ "$sd", "$format" ]
      } ], 
      "to-time" : [ {
        "description" : " Converts a given string representation of a time value into a time representation valid according to\n the corresponding XML Schema type.\n", 
        "params" : [ "$sd", "$format" ]
      } ], 
      "to-dateTime" : [ {
        "description" : " Converts a given string representation of a dateTime value into a dateTime representation\n valid according to the corresponding XML Schema type.\n", 
        "params" : [ "$sd", "$format" ]
      } ], 
      "normalize-address" : [ {
        "description" : " Uses an address normalization Web service to convert a postal address given as input into a\n cannonical representation format.\n", 
        "params" : [ "$addr" ]
      } ], 
      "normalize-phone" : [ {
        "description" : " Uses an phone number normalization Web service to convert a phone number given as input into a\n cannonical representation.\n", 
        "params" : [ "$addr" ]
      } ], 
      "timeZone-dictionary" : [ {
        "description" : " Internal auxiliary function that returns an XML representation for a dictionary that contains the\n time-shift value associated to different time-zone abbreviations.\n", 
        "params" : [  ]
      } ], 
      "month-dictionary" : [ {
        "description" : " Internal auxiliary function that returns an XML representation for a dictionary that contains a\n numeric value associated to different month name abbreviations.\n", 
        "params" : [  ]
      } ], 
      "check-dateTime" : [ {
        "description" : " Internal auxiliary function that checks if a string is in xs:dateTime format\n", 
        "params" : [ "$dateTime" ]
      } ], 
      "check-date" : [ {
        "description" : " Internal auxiliary function that checks if a string is in xs:date format\n", 
        "params" : [ "$date" ]
      } ], 
      "check-time" : [ {
        "description" : " Internal auxiliary function that checks if a string is in xs:time format\n", 
        "params" : [ "$Time" ]
      } ]
    }
  }, 
  "http://zorba.io/modules/data-cleaning/phonetic-string-similarity" : {
    "description" : " This library module provides phonetic string similarity functions, comparing strings with basis on how they sound.\n \n These metrics are particularly effective in matching names, since names are often spelled in different\n ways that sound the same.\n \n The logic contained in this module is not specific to any particular XQuery implementation.\n", 
    "functions" : {
      "soundex-key" : [ {
        "description" : " Returns the Soundex key for a given string.\n \n Example usage : soundex-key(\"Robert\")\n \n The function invocation in the example above returns : \"R163\"\n", 
        "params" : [ "$s1" ]
      } ], 
      "soundex" : [ {
        "description" : " Checks if two strings have the same Soundex key.\n \n Example usage : soundex( \"Robert\" , \"Rupert\" )\n \n The function invocation in the example above returns : true\n", 
        "params" : [ "$s1", "$s2" ]
      } ], 
      "metaphone-key" : [ {
        "description" : " Returns the Metaphone key for a given string.\n The Metaphone algorithm produces variable length keys as its output, as opposed to Soundex's fixed-length keys.\n \n Example usage : metaphone-key(\"ALEKSANDER\")\n \n The function invocation in the example above returns : \"ALKSNTR\"\n", 
        "params" : [ "$s1" ]
      } ], 
      "metaphone" : [ {
        "description" : " Checks if two strings have the same Metaphone key.\n \n Example usage : metaphone(\"ALEKSANDER\", \"ALEXANDRE\")\n \n The function invocation in the example above returns : true\n", 
        "params" : [ "$s1", "$s2" ]
      } ]
    }
  }, 
  "http://zorba.io/modules/data-cleaning/set-similarity" : {
    "description" : " This library module provides similarity functions for comparing sets of XML\n nodes (e.g., sets of XML elements, attributes or atomic values).\n \n These functions are particularly useful for matching near duplicate sets of XML nodes.\n \n The logic contained in this module is not specific to any particular XQuery implementation.\n", 
    "functions" : {
      "deep-union" : [ {
        "description" : " Returns the union between two sets, using the deep-equal() function to compare the XML nodes from the sets.\n \n Example usage :  deep-union ( ( \"a\", \"b\", \"c\") , ( \"a\", \"a\",  ) ) \n \n The function invocation in the example above returns :  (\"a\", \"b\", \"c\",  ) \n", 
        "params" : [ "$s1", "$s2" ]
      } ], 
      "deep-intersect" : [ {
        "description" : " Returns the intersection between two sets, using the deep-equal() function to compare the XML nodes from the sets.\n \n Example usage :  deep-intersect ( ( \"a\", \"b\", \"c\") , ( \"a\", \"a\",  ) ) \n \n The function invocation in the example above returns :  (\"a\") \n", 
        "params" : [ "$s1", "$s2" ]
      } ], 
      "distinct" : [ {
        "description" : " Removes exact duplicates from a set, using the deep-equal() function to compare the XML nodes from the sets.\n \n Example usage :  distinct ( ( \"a\", \"a\",  ) ) \n \n The function invocation in the example above returns :  (\"a\",  ) \n", 
        "params" : [ "$s" ]
      } ], 
      "overlap" : [ {
        "description" : " Returns the overlap coefficient between two sets of XML nodes.\n The overlap coefficient is defined as the shared information between the input sets\n (i.e., the size of the intersection) over the size of the smallest input set.\n \n Example usage :  overlap ( ( \"a\", \"b\",  ) , ( \"a\", \"a\", \"b\" ) ) \n \n The function invocation in the example above returns :  1.0 \n", 
        "params" : [ "$s1", "$s2" ]
      } ], 
      "dice" : [ {
        "description" : " Returns the Dice similarity coefficient between two sets of XML nodes.\n The Dice coefficient is defined as defined as twice the shared information between the input sets\n (i.e., the size of the intersection) over the sum of the cardinalities for the input sets.\n \n Example usage :  dice ( ( \"a\", \"b\",  ) , ( \"a\", \"a\", \"d\") ) \n \n The function invocation in the example above returns :  0.4 \n", 
        "params" : [ "$s1", "$s2" ]
      } ], 
      "jaccard" : [ {
        "description" : " Returns the Jaccard similarity coefficient between two sets of XML nodes.\n The Jaccard coefficient is defined as the size of the intersection divided by the size of the\n union of the input sets.\n \n Example usage :  jaccard ( ( \"a\", \"b\",  ) , ( \"a\", \"a\", \"d\") ) \n \n The function invocation in the example above returns :  0.25 \n", 
        "params" : [ "$s1", "$s2" ]
      } ]
    }
  }, 
  "http://zorba.io/modules/data-cleaning/token-based-string-similarity" : {
    "description" : " This library module provides token-based string similarity functions that view strings\n as sets or multi-sets of tokens and use set-related properties to compute similarity scores.\n The tokens correspond to groups of characters extracted from the strings being compared, such as\n individual words or character n-grams.\n \n These functions are particularly useful for matching near duplicate strings in cases where\n typographical conventions often lead to rearrangement of words (e.g., \"John Smith\" versus \"Smith, John\").\n \n The logic contained in this module is not specific to any particular XQuery implementation,\n although the module requires the trigonometic functions of XQuery 3.0 or a math extension\n function such as sqrt($x as numeric) for computing the square root.\n", 
    "functions" : {
      "ngrams" : [ {
        "description" : " Returns the individual character n-grams forming a string.\n \n Example usage :  ngrams(\"FLWOR\", 2 ) \n \n The function invocation in the example above returns :  (\"_F\" , \"FL\" , \"LW\" , \"WO\" , \"LW\" , \"WO\" , \"OR\" , \"R_\") \n", 
        "params" : [ "$s", "$n" ]
      } ], 
      "cosine" : [ {
        "description" : " Auxiliary function for computing the cosine similarity coefficient between strings,\n using stringdescriptors based on sets of character n-grams or sets of tokens extracted from two strings.\n \n Example usage :  cosine( (\"aa\",\"bb\") , (\"bb\",\"aa\")) \n \n The function invocation in the example above returns :  1.0 \n", 
        "params" : [ "$desc1", "$desc2" ]
      } ], 
      "dice-ngrams" : [ {
        "description" : " Returns the Dice similarity coefficient between sets of character n-grams extracted from two strings.\n \n Example usage :  dice-ngrams(\"DWAYNE\", \"DUANE\", 2 ) \n \n The function invocation in the example above returns :  0.4615384615384616 \n", 
        "params" : [ "$s1", "$s2", "$n" ]
      } ], 
      "overlap-ngrams" : [ {
        "description" : " Returns the overlap similarity coefficient between sets of character n-grams extracted from two strings.\n \n Example usage :  overlap-ngrams(\"DWAYNE\", \"DUANE\", 2 ) \n \n The function invocation in the example above returns :  0.5 \n", 
        "params" : [ "$s1", "$s2", "$n" ]
      } ], 
      "jaccard-ngrams" : [ {
        "description" : " Returns the Jaccard similarity coefficient between sets of character n-grams extracted from two strings.\n \n Example usage :  jaccard-ngrams(\"DWAYNE\", \"DUANE\", 2 ) \n \n The function invocation in the example above returns :  0.3 \n", 
        "params" : [ "$s1", "$s2", "$n" ]
      } ], 
      "cosine-ngrams" : [ {
        "description" : " Returns the cosine similarity coefficient between sets of character n-grams extracted from two strings.\n The n-grams from each string are weighted according to their occurence frequency (i.e., weighted according to\n the term-frequency heuristic from Information Retrieval).\n \n Example usage :  cosine-ngrams(\"DWAYNE\", \"DUANE\", 2 ) \n \n The function invocation in the example above returns :  0.2401922307076307 \n", 
        "params" : [ "$s1", "$s2", "$n" ]
      } ], 
      "dice-tokens" : [ {
        "description" : " Returns the Dice similarity coefficient between sets of tokens extracted from two strings.\n \n Example usage :  dice-tokens(\"The FLWOR Foundation\", \"FLWOR Found.\", \" +\" ) \n \n The function invocation in the example above returns :  0.4 \n", 
        "params" : [ "$s1", "$s2", "$r" ]
      } ], 
      "overlap-tokens" : [ {
        "description" : " Returns the overlap similarity coefficient between sets of tokens extracted from two strings.\n \n Example usage :  overlap-tokens(\"The FLWOR Foundation\", \"FLWOR Found.\", \" +\" ) \n \n The function invocation in the example above returns :  0.5 \n", 
        "params" : [ "$s1", "$s2", "$r" ]
      } ], 
      "jaccard-tokens" : [ {
        "description" : " Returns the Jaccard similarity coefficient between sets of tokens extracted from two strings.\n \n Example usage :  jaccard-tokens(\"The FLWOR Foundation\", \"FLWOR Found.\", \" +\" ) \n \n The function invocation in the example above returns :  0.25 \n", 
        "params" : [ "$s1", "$s2", "$r" ]
      } ], 
      "cosine-tokens" : [ {
        "description" : " Returns the cosine similarity coefficient between sets of tokens extracted from two strings. The tokens\n from each string are weighted according to their occurence frequency (i.e., weighted according to the\n term-frequency heuristic from Information Retrieval).\n \n Example usage :  cosine-tokens(\"The FLWOR Foundation\", \"FLWOR Found.\", \" +\" ) \n \n The function invocation in the example above returns :  0.408248290463863 \n", 
        "params" : [ "$s1", "$s2", "$r" ]
      } ]
    }
  }, 
  "http://zorba.io/modules/datetime" : {
    "description" : " This module provides functions to retrieve the current dateTime and to\n parse dates and times.\n \n In contrast to the current-dateTime functions specified in\n XQuery Functions and\n Operators, the functions in this module are nondeterministic, that is,\n they do not return the current dateTime from the dynamic context, but return\n the actual value.\n \n Dates and times are parsed according to the format given by\n strptime.\n However, date and time values must be \"complete.\"\n For a date, the year and either month and day or day of the year must have\n been parsed.\n For a time, the hour must have been parsed.\n (If either the minute, second, or timezone has not been parsed, they default\n to 0.)\n For a dateTime, the parsing requirements of both date and time must be met.\n \n When a locale is given,\n it must be of the form {lang}[{sep}{country}[{encoding}]] where\n {lang} is an ISO 639-1 2-letter or 639-2 3-letter language code,\n {sep} is either '-' or '_',\n {country} is an ISO 3166-1 2-letter country code,\n and {encoding} is any string that begins with a '.'.\n The {sep}, {country}, and {encoding} are optional;\n {encoding} is always ignored.\n Examples include: de, en-US, fr_CA, ru_RU.UTF-8.\n", 
    "functions" : {
      "current-date" : [ {
        "description" : " Gets the current date value in Universal time.\n Note that this function is not stable: it returns the value of the date when\n the function is invoked.\n", 
        "params" : [  ]
      } ], 
      "current-dateTime" : [ {
        "description" : " Gets the current dateTime value in Universal time.\n Note that this function is not stable: it returns the value of the date and\n time when the function is invoked.\n", 
        "params" : [  ]
      } ], 
      "current-time" : [ {
        "description" : " Return the current time value in Universal time.\n Note that this function is not stable: it returns the value of the time when\n the function is invoked.\n", 
        "params" : [  ]
      } ], 
      "parse-date" : [ {
        "description" : " Parses a date from a string in the current locale.\n", 
        "params" : [ "$input", "$format" ]
      }, {
        "description" : " Parses a date from a string in the given locale.\n", 
        "params" : [ "$input", "$format", "$locale" ]
      } ], 
      "parse-dateTime" : [ {
        "description" : " Parses a dateTime from a string in the current locale.\n", 
        "params" : [ "$input", "$format" ]
      }, {
        "description" : " Parses a dateTime from a string in the given locale.\n", 
        "params" : [ "$input", "$format", "$locale" ]
      } ], 
      "parse-time" : [ {
        "description" : " Parses a time from a string in the current locale.\n", 
        "params" : [ "$input", "$format" ]
      }, {
        "description" : " Parses a time from a string in the given locale.\n", 
        "params" : [ "$input", "$format", "$locale" ]
      } ], 
      "millis-to-dateTime" : [ {
        "description" : " Converts the given number of milliseconds since epoch into its corresponding\n xs:dateTime.\n", 
        "params" : [ "$millis" ]
      } ], 
      "timestamp" : [ {
        "description" : " Gets the the number of milliseconds since epoch.\n", 
        "params" : [  ]
      } ], 
      "utc-offset" : [ {
        "description" : " Gets the offset of the current timezone from Universal time.\n", 
        "params" : [  ]
      } ]
    }
  }, 
  "http://zorba.io/modules/dbgp-message-handler" : {
    "description" : " Zorba debugger module.\n", 
    "functions" : {
      "status" : [ {
        "description" : "", 
        "params" : [ "$resp" ]
      } ], 
      "source" : [ {
        "description" : "", 
        "params" : [ "$resp" ]
      } ], 
      "breakpoint-set" : [ {
        "description" : "", 
        "params" : [ "$resp" ]
      } ], 
      "breakpoint-get" : [ {
        "description" : "", 
        "params" : [ "$resp" ]
      } ], 
      "breakpoint-list" : [ {
        "description" : "", 
        "params" : [ "$resp" ]
      } ], 
      "lpottl" : [ {
        "description" : " left-pad-or-trim-to-length\n", 
        "params" : [ "$value", "$length", "$padChar" ]
      } ], 
      "breakpoint-remove" : [ {
        "description" : "", 
        "params" : [ "$resp" ]
      } ], 
      "stack-depth" : [ {
        "description" : "", 
        "params" : [ "$resp" ]
      } ], 
      "stack-get" : [ {
        "description" : "", 
        "params" : [ "$resp" ]
      } ], 
      "context-names" : [ {
        "description" : "", 
        "params" : [ "$resp" ]
      } ], 
      "context-get" : [ {
        "description" : "", 
        "params" : [ "$resp" ]
      } ], 
      "eval" : [ {
        "description" : "", 
        "params" : [ "$resp" ]
      } ], 
      "report-error" : [ {
        "description" : "", 
        "params" : [ "$message" ]
      }, {
        "description" : "", 
        "params" : [ "$message", "$debugMessage" ]
      } ], 
      "process-response" : [ {
        "description" : "", 
        "params" : [ "$resp" ]
      } ], 
      "process-init" : [ {
        "description" : "", 
        "params" : [ "$init" ]
      } ], 
      "process" : [ {
        "description" : " Process one message received from the Zorba debugger server.\n", 
        "params" : [ "$message" ]
      } ]
    }
  }, 
  "http://zorba.io/modules/excel/datetime" : {
    "description" : " This is a library module offering the same set of functions\n defined by Microsoft Excel.\n", 
    "functions" : {
      "day-of-week" : [ {
        "description" : " The day of the week, from a date.\n", 
        "params" : [ "$date" ]
      } ], 
      "is-leap-year" : [ {
        "description" : " Tests if a year is leap or not.\n", 
        "params" : [ "$date" ]
      } ], 
      "days360" : [ {
        "description" : " Returns the number of days between two dates based on a 360-day year.\n", 
        "params" : [ "$start_date", "$end_date" ]
      }, {
        "description" : " Returns the number of days between two dates based on a 360-day year.\n", 
        "params" : [ "$start_date", "$end_date", "$method" ]
      } ], 
      "hour" : [ {
        "description" : " Returns the hour of a time value.\n", 
        "params" : [ "$time" ]
      } ], 
      "minute" : [ {
        "description" : " Returns the minutes of a time value.\n", 
        "params" : [ "$time" ]
      } ], 
      "month" : [ {
        "description" : " Returns the month of a $date.\n", 
        "params" : [ "$date" ]
      } ], 
      "second" : [ {
        "description" : " Returns the seconds of a $time value.\n", 
        "params" : [ "$time" ]
      } ], 
      "day" : [ {
        "description" : " Returns the day of a $date, represented by a serial number.\n", 
        "params" : [ "$date" ]
      } ], 
      "year" : [ {
        "description" : " Returns the year corresponding to a date.\n", 
        "params" : [ "$date" ]
      } ], 
      "today" : [ {
        "description" : " Returns the current date.\n", 
        "params" : [  ]
      } ], 
      "now" : [ {
        "description" : " Returns the current date and time.\n", 
        "params" : [  ]
      } ], 
      "date" : [ {
        "description" : " Constructs a date given the hours, months and days.\n", 
        "params" : [ "$year", "$month", "$day" ]
      } ], 
      "time" : [ {
        "description" : " Constructs a time given the hours, minutes and seconds.\n", 
        "params" : [ "$hour", "$minute", "$second" ]
      } ], 
      "weekday" : [ {
        "description" : " Returns the day of the week corresponding to a $date.\n", 
        "params" : [ "$date" ]
      }, {
        "description" : " Returns the day of the week corresponding to a $date depending on $return_type.\n", 
        "params" : [ "$date", "$return_type" ]
      } ], 
      "networkdays" : [ {
        "description" : " Returns the number of whole working days between $start_date and $end_date.\n", 
        "params" : [ "$start_date", "$end_date" ]
      }, {
        "description" : " Returns the number of whole working days between $start_date and $end_date.\n", 
        "params" : [ "$start_date", "$end_date", "$holidays" ]
      } ]
    }
  }, 
  "http://zorba.io/modules/excel/engineering" : {
    "description" : "  This is a library module offering the same set of functions\n defined by Microsoft Excel, under Engineering Functions.\n", 
    "functions" : {
      "is-hex" : [ {
        "description" : " Tests if a string is a hexadecimal representation of a number.\n", 
        "params" : [ "$arg" ]
      } ], 
      "is-oct" : [ {
        "description" : " Tests if a string is a octal representation of a number.\n", 
        "params" : [ "$arg" ]
      } ], 
      "is-bin" : [ {
        "description" : " Tests if a string is a binary representation of a number.\n", 
        "params" : [ "$arg" ]
      } ], 
      "dec2hexUtil" : [ {
        "description" : " Returns a binary representation of a number.\n", 
        "params" : [ "$number" ]
      } ], 
      "dec2octUtil" : [ {
        "description" : " Returns an octal representation of a number.\n", 
        "params" : [ "$number" ]
      } ], 
      "dec2binUtil" : [ {
        "description" : " Returns a binary representation of a number.\n", 
        "params" : [ "$arg" ]
      } ], 
      "hex2decUtil" : [ {
        "description" : " Returns a decimal representation of a number given it's hexadecimal representation.\n", 
        "params" : [ "$arg" ]
      } ], 
      "oct2decUtil" : [ {
        "description" : " Returns a decimal representation of a number given it's octal representation.\n", 
        "params" : [ "$arg" ]
      } ], 
      "bin2decUtil" : [ {
        "description" : " Returns a decimal representation of a number given it's binary representation.\n", 
        "params" : [ "$arg" ]
      } ], 
      "dec2hex" : [ {
        "description" : " Converts a decimal number to hexadecimal.\n", 
        "params" : [ "$arg" ]
      }, {
        "description" : " Converts a decimal number to hexadecimal.\n", 
        "params" : [ "$arg", "$places" ]
      } ], 
      "dec2oct" : [ {
        "description" : " Converts a decimal number to octal.\n", 
        "params" : [ "$arg" ]
      }, {
        "description" : " Converts a decimal number to octal.\n", 
        "params" : [ "$arg", "$places" ]
      } ], 
      "dec2bin" : [ {
        "description" : " Converts a decimal number to binary.\n", 
        "params" : [ "$arg" ]
      }, {
        "description" : " Converts a decimal number to binary.\n", 
        "params" : [ "$arg", "$places" ]
      } ], 
      "oct2bin" : [ {
        "description" : " Converts an octal number to binary.\n", 
        "params" : [ "$arg" ]
      }, {
        "description" : " Converts an octal number to binary.\n", 
        "params" : [ "$arg", "$places" ]
      } ], 
      "oct2dec" : [ {
        "description" : " Converts an octal number to decimal.\n", 
        "params" : [ "$arg" ]
      } ], 
      "bin2dec" : [ {
        "description" : " Converts a binary number to decimal.\n", 
        "params" : [ "$arg" ]
      } ], 
      "oct2hex" : [ {
        "description" : " Converts an octal number to hexadecimal.\n", 
        "params" : [ "$arg" ]
      }, {
        "description" : " Converts an octal number to hexadecimal.\n", 
        "params" : [ "$arg", "$places" ]
      } ], 
      "hex2bin" : [ {
        "description" : " Converts a hexadecimal number to binary.\n", 
        "params" : [ "$arg" ]
      }, {
        "description" : " Converts a hexadecimal number to binary.\n", 
        "params" : [ "$arg", "$places" ]
      } ], 
      "hex2oct" : [ {
        "description" : " Converts a hexadecimal number to octal.\n", 
        "params" : [ "$arg" ]
      }, {
        "description" : " Converts a hexadecimal number to octal.\n", 
        "params" : [ "$arg", "$places" ]
      } ], 
      "hex2dec" : [ {
        "description" : " Converts a hexadecimal number to decimal.\n", 
        "params" : [ "$arg" ]
      } ], 
      "bin2oct" : [ {
        "description" : " Converts a binary number to octal.\n", 
        "params" : [ "$arg" ]
      }, {
        "description" : " Converts a binary number to octal.\n", 
        "params" : [ "$arg", "$places" ]
      } ], 
      "bin2hex" : [ {
        "description" : " Converts a binary number to hexadecimal.\n", 
        "params" : [ "$arg" ]
      }, {
        "description" : " Converts a binary number to hexadecimal.\n", 
        "params" : [ "$arg", "$places" ]
      } ]
    }
  }, 
  "http://zorba.io/modules/excel/information" : {
    "description" : " This is a library module offering the same set of functions\n defined by Microsoft Excel, under Information Functions.\n", 
    "functions" : {
      "is-blank" : [ {
        "description" : " Test if the passed argument is empty of not.\n", 
        "params" : [ "$value" ]
      } ], 
      "is-even" : [ {
        "description" : " Test is a number is even.\n", 
        "params" : [ "$value" ]
      } ], 
      "is-odd" : [ {
        "description" : " Test is a number is odd.\n", 
        "params" : [ "$value" ]
      } ], 
      "islogical" : [ {
        "description" : " Tests if the passed $value is a logical value.\n", 
        "params" : [ "$value" ]
      } ], 
      "isnumber" : [ {
        "description" : " Tests if the passed $value is a number.\n", 
        "params" : [ "$value" ]
      } ], 
      "istext" : [ {
        "description" : " Tests if the passed $value is a string.\n", 
        "params" : [ "$value" ]
      } ], 
      "n" : [ {
        "description" : " Converts a $value to a number.\n", 
        "params" : [ "$value" ]
      } ], 
      "na" : [ {
        "description" : " Raises the error value #N/A.\n", 
        "params" : [  ]
      } ]
    }
  }, 
  "http://zorba.io/modules/excel/logical" : {
    "description" : " This is a library module offering the same set of functions\n defined by Microsoft Excel, under Logical Functions.\n", 
    "functions" : {
      "and" : [ {
        "description" : " Returns TRUE if all its arguments are TRUE; FALSE if one or more arguments are FALSE.\n", 
        "params" : [ "$arg1", "$arg2" ]
      }, {
        "description" : " Returns TRUE if all its arguments are TRUE; FALSE if one or more arguments are FALSE.\n", 
        "params" : [ "$values" ]
      } ], 
      "if" : [ {
        "description" : " Returns one value if a condition you specify evaluates to TRUE and another value if it evaluates to FALSE.\n", 
        "params" : [ "$logical_test", "$value_if_true", "$value_if_false" ]
      } ], 
      "or" : [ {
        "description" : " Returns TRUE if any argument is TRUE; FALSE if all arguments are FALSE.\n", 
        "params" : [ "$arg1", "$arg2" ]
      }, {
        "description" : " Returns TRUE if any argument is TRUE; FALSE if all arguments are FALSE.\n", 
        "params" : [ "$values" ]
      } ]
    }
  }, 
  "http://zorba.io/modules/excel/lookup" : {
    "description" : " This module implements some Excel 2003 lookup functions.\n", 
    "functions" : {
      "choose" : [ {
        "description" : " Uses index_num to return a value from the sequence of value arguments.\n", 
        "params" : [ "$index_num", "$values" ]
      }, {
        "description" : " Uses index_num to return a sequence from the list of sequences.\n Use CHOOSE to select one of up to 29 sequences based on the index number.\n", 
        "params" : [ "$index_num", "$value_sequence1", "$value_sequence2", "$value_sequence3", "$value_sequence4", "$value_sequence5", "$value_sequence6", "$value_sequence7", "$value_sequence8", "$value_sequence9", "$value_sequence10", "$value_sequence11", "$value_sequence12", "$value_sequence13", "$value_sequence14", "$value_sequence15", "$value_sequence16", "$value_sequence17", "$value_sequence18", "$value_sequence19", "$value_sequence20", "$value_sequence21", "$value_sequence22", "$value_sequence23", "$value_sequence24", "$value_sequence25", "$value_sequence26", "$value_sequence27", "$value_sequence28", "$value_sequence29" ]
      } ], 
      "lookup-column" : [ {
        "description" : " Function for HLOOKUP, LOOKUP, MATCH, VLOOKUP.\n This function should not be used outside this module.\n It searches a lookup_value in table_header with three different algorithms\n specified by range_lookup.\n", 
        "params" : [ "$lookup_value", "$table_header", "$range_lookup", "$pos", "$last_comparable_pos" ]
      } ], 
      "hlookup" : [ {
        "description" : " Searches for a value in the top row of an array of values,\n   and then returns a value in the same column from a row you specify in the array.\n Array is specified with 3 parameters:\n table_array is a sequence of elements, first row first, then second row and so on\n table_width specifies the number of elements in a row\n table_height specifies the number of rows\n The number of elements in table_array must be equal or more than table_width * table_height.\n For wildchar matching, the XQuery regex matcher is used.\n", 
        "params" : [ "$lookup_value", "$table_array", "$table_width", "$table_height", "$row_index_num", "$range_lookup" ]
      }, {
        "description" : " Same as above, only that range_lookup is defaulted to true.\n That is, this Hlookup looks for the approximate value\n   and the first row must be ordered ascending.\n", 
        "params" : [ "$lookup_value", "$table_array", "$table_width", "$table_height", "$row_index_num" ]
      } ], 
      "index" : [ {
        "description" : " Returns a value from within an array.\n This is the Array form of the Excel Index function.\n Array is specified with 3 parameters:\n array is a sequence of elements, first row first, then second row and so on\n array_height specifies the number of rows\n array_width specifies the number of elements in a row\n The number of elements in array must be equal or more than array_width * array_height.\n", 
        "params" : [ "$array", "$array_height", "$array_width", "$row_num", "$column_num" ]
      } ], 
      "lookup" : [ {
        "description" : " The Vector form. \n Looks in a sequence for a value\n   and return a value from the same position in a second sequence.\n If the value is not found, then it matches the largest value in lookup_vector\n   that is less than or equal to lookup_value.\n", 
        "params" : [ "$lookup_value", "$lookup_vector", "$result_vector" ]
      }, {
        "description" : " The Array form.\n It looks in the first row or column of an array for the specified value\n   and returns a value from the same position in the last row or column of the array.\n If array covers an area that is wider than it is tall (more columns than rows),\n   LOOKUP searches for lookup_value in the first row.\n If array is square or is taller than it is wide (more rows than columns),\n   LOOKUP searches in the first column.\n The values in the first row or first column must be in ascending order.\n", 
        "params" : [ "$lookup_value", "$array", "$array_width", "$array_height" ]
      } ], 
      "match" : [ {
        "description" : " Returns the relative position of an item in a sequence that\n   matches a specified value in a specified order.\n Only for one dimensional vector.\n", 
        "params" : [ "$lookup_value", "$sequence", "$match_type" ]
      }, {
        "description" : " Same as above, but match_type is defaulted to 1.\n It finds the largest value that is less than or equal to lookup_value.\n", 
        "params" : [ "$lookup_value", "$sequence" ]
      } ], 
      "offset" : [ {
        "description" : " Returns a sub-array from an array.\n The inner array must be within the reference array\n", 
        "params" : [ "$reference", "$reference_height", "$reference_width", "$rows", "$cols", "$height", "$width" ]
      }, {
        "description" : " Same as above, only that the sub-array is specified only by rows and cols relative position.\n The sub-array height and width is computed to contain the remaining elements of the array.\n", 
        "params" : [ "$reference", "$reference_height", "$reference_width", "$rows", "$cols" ]
      } ], 
      "transpose" : [ {
        "description" : " Transposes an array. The rows become columns and vice versa.\n", 
        "params" : [ "$array", "$array_width", "$array_height" ]
      } ], 
      "vlookup" : [ {
        "description" : " Searches for a value in the first column of a table array\n   and returns a value in the same row from another column in the table array.\n Array is specified with 3 parameters:\n table_array is a sequence of elements, first row first, then second row and so on\n table_width specifies the number of elements in a row\n table_height specifies the number of rows\n For wildchar matching, the XQuery regex matcher is used.\n", 
        "params" : [ "$lookup_value", "$table_array", "$table_width", "$table_height", "$col_index_num", "$range_lookup" ]
      }, {
        "description" : " Same as above, with range_lookup defaulted to true.\n It finds the largest value that is less than or equal to lookup_value.\n First column must be in ascending order.\n", 
        "params" : [ "$lookup_value", "$table_array", "$table_width", "$table_height", "$col_index_num" ]
      } ]
    }
  }, 
  "http://zorba.io/modules/excel/math-sumproduct" : {
    "description" : " Module implementing the sumproduct functions from Excel 2003 math library.\n There are 30 functions defined, implementing the same function\n but with 1 to 30 parameters.\n Each parameter can be a sequence of infinite length.\n", 
    "functions" : {
      "sumproduct" : [ {
        "description" : " Sums the values in the sequence.\n The sequence can be of any length.\n", 
        "params" : [ "$array1" ]
      }, {
        "description" : " Multiplies the elements on the same position in each sequence\n and sums up the results.\n", 
        "params" : [ "$array1", "$array2" ]
      }, {
        "description" : " Multiplies the elements on the same position in each sequence\n and sums up the results.\n", 
        "params" : [ "$array1", "$array2", "$array3" ]
      }, {
        "description" : " Multiplies the elements on the same position in each sequence\n and sums up the results.\n", 
        "params" : [ "$array1", "$array2", "$array3", "$array4" ]
      }, {
        "description" : " Multiplies the elements on the same position in each sequence\n and sums up the results.\n", 
        "params" : [ "$array1", "$array2", "$array3", "$array4", "$array5" ]
      }, {
        "description" : " Multiplies the elements on the same position in each sequence\n and sums up the results.\n", 
        "params" : [ "$array1", "$array2", "$array3", "$array4", "$array5", "$array6" ]
      }, {
        "description" : " Multiplies the elements on the same position in each sequence\n and sums up the results.\n", 
        "params" : [ "$array1", "$array2", "$array3", "$array4", "$array5", "$array6", "$array7" ]
      }, {
        "description" : " Multiplies the elements on the same position in each sequence\n and sums up the results.\n", 
        "params" : [ "$array1", "$array2", "$array3", "$array4", "$array5", "$array6", "$array7", "$array8" ]
      }, {
        "description" : " Multiplies the elements on the same position in each sequence\n and sums up the results.\n", 
        "params" : [ "$array1", "$array2", "$array3", "$array4", "$array5", "$array6", "$array7", "$array8", "$array9" ]
      }, {
        "description" : " Multiplies the elements on the same position in each sequence\n and sums up the results.\n", 
        "params" : [ "$array1", "$array2", "$array3", "$array4", "$array5", "$array6", "$array7", "$array8", "$array9", "$array10" ]
      }, {
        "description" : " Multiplies the elements on the same position in each sequence\n and sums up the results.\n", 
        "params" : [ "$array1", "$array2", "$array3", "$array4", "$array5", "$array6", "$array7", "$array8", "$array9", "$array10", "$array11" ]
      }, {
        "description" : " Multiplies the elements on the same position in each sequence\n and sums up the results.\n", 
        "params" : [ "$array1", "$array2", "$array3", "$array4", "$array5", "$array6", "$array7", "$array8", "$array9", "$array10", "$array11", "$array12" ]
      }, {
        "description" : " Multiplies the elements on the same position in each sequence\n and sums up the results.\n", 
        "params" : [ "$array1", "$array2", "$array3", "$array4", "$array5", "$array6", "$array7", "$array8", "$array9", "$array10", "$array11", "$array12", "$array13" ]
      }, {
        "description" : " Multiplies the elements on the same position in each sequence\n and sums up the results.\n", 
        "params" : [ "$array1", "$array2", "$array3", "$array4", "$array5", "$array6", "$array7", "$array8", "$array9", "$array10", "$array11", "$array12", "$array13", "$array14" ]
      }, {
        "description" : " Multiplies the elements on the same position in each sequence\n and sums up the results.\n", 
        "params" : [ "$array1", "$array2", "$array3", "$array4", "$array5", "$array6", "$array7", "$array8", "$array9", "$array10", "$array11", "$array12", "$array13", "$array14", "$array15" ]
      }, {
        "description" : " Multiplies the elements on the same position in each sequence\n and sums up the results.\n", 
        "params" : [ "$array1", "$array2", "$array3", "$array4", "$array5", "$array6", "$array7", "$array8", "$array9", "$array10", "$array11", "$array12", "$array13", "$array14", "$array15", "$array16" ]
      }, {
        "description" : " Multiplies the elements on the same position in each sequence\n and sums up the results.\n", 
        "params" : [ "$array1", "$array2", "$array3", "$array4", "$array5", "$array6", "$array7", "$array8", "$array9", "$array10", "$array11", "$array12", "$array13", "$array14", "$array15", "$array16", "$array17" ]
      }, {
        "description" : " Multiplies the elements on the same position in each sequence\n and sums up the results.\n", 
        "params" : [ "$array1", "$array2", "$array3", "$array4", "$array5", "$array6", "$array7", "$array8", "$array9", "$array10", "$array11", "$array12", "$array13", "$array14", "$array15", "$array16", "$array17", "$array18" ]
      }, {
        "description" : " Multiplies the elements on the same position in each sequence\n and sums up the results.\n", 
        "params" : [ "$array1", "$array2", "$array3", "$array4", "$array5", "$array6", "$array7", "$array8", "$array9", "$array10", "$array11", "$array12", "$array13", "$array14", "$array15", "$array16", "$array17", "$array18", "$array19" ]
      }, {
        "description" : " Multiplies the elements on the same position in each sequence\n and sums up the results.\n", 
        "params" : [ "$array1", "$array2", "$array3", "$array4", "$array5", "$array6", "$array7", "$array8", "$array9", "$array10", "$array11", "$array12", "$array13", "$array14", "$array15", "$array16", "$array17", "$array18", "$array19", "$array20" ]
      }, {
        "description" : " Multiplies the elements on the same position in each sequence\n and sums up the results.\n", 
        "params" : [ "$array1", "$array2", "$array3", "$array4", "$array5", "$array6", "$array7", "$array8", "$array9", "$array10", "$array11", "$array12", "$array13", "$array14", "$array15", "$array16", "$array17", "$array18", "$array19", "$array20", "$array21" ]
      }, {
        "description" : " Multiplies the elements on the same position in each sequence\n and sums up the results.\n", 
        "params" : [ "$array1", "$array2", "$array3", "$array4", "$array5", "$array6", "$array7", "$array8", "$array9", "$array10", "$array11", "$array12", "$array13", "$array14", "$array15", "$array16", "$array17", "$array18", "$array19", "$array20", "$array21", "$array22" ]
      }, {
        "description" : " Multiplies the elements on the same position in each sequence\n and sums up the results.\n", 
        "params" : [ "$array1", "$array2", "$array3", "$array4", "$array5", "$array6", "$array7", "$array8", "$array9", "$array10", "$array11", "$array12", "$array13", "$array14", "$array15", "$array16", "$array17", "$array18", "$array19", "$array20", "$array21", "$array22", "$array23" ]
      }, {
        "description" : " Multiplies the elements on the same position in each sequence\n and sums up the results.\n", 
        "params" : [ "$array1", "$array2", "$array3", "$array4", "$array5", "$array6", "$array7", "$array8", "$array9", "$array10", "$array11", "$array12", "$array13", "$array14", "$array15", "$array16", "$array17", "$array18", "$array19", "$array20", "$array21", "$array22", "$array23", "$array24" ]
      }, {
        "description" : " Multiplies the elements on the same position in each sequence\n and sums up the results.\n", 
        "params" : [ "$array1", "$array2", "$array3", "$array4", "$array5", "$array6", "$array7", "$array8", "$array9", "$array10", "$array11", "$array12", "$array13", "$array14", "$array15", "$array16", "$array17", "$array18", "$array19", "$array20", "$array21", "$array22", "$array23", "$array24", "$array25" ]
      }, {
        "description" : " Multiplies the elements on the same position in each sequence\n and sums up the results.\n", 
        "params" : [ "$array1", "$array2", "$array3", "$array4", "$array5", "$array6", "$array7", "$array8", "$array9", "$array10", "$array11", "$array12", "$array13", "$array14", "$array15", "$array16", "$array17", "$array18", "$array19", "$array20", "$array21", "$array22", "$array23", "$array24", "$array25", "$array26" ]
      }, {
        "description" : " Multiplies the elements on the same position in each sequence\n and sums up the results.\n", 
        "params" : [ "$array1", "$array2", "$array3", "$array4", "$array5", "$array6", "$array7", "$array8", "$array9", "$array10", "$array11", "$array12", "$array13", "$array14", "$array15", "$array16", "$array17", "$array18", "$array19", "$array20", "$array21", "$array22", "$array23", "$array24", "$array25", "$array26", "$array27" ]
      }, {
        "description" : " Multiplies the elements on the same position in each sequence\n and sums up the results.\n", 
        "params" : [ "$array1", "$array2", "$array3", "$array4", "$array5", "$array6", "$array7", "$array8", "$array9", "$array10", "$array11", "$array12", "$array13", "$array14", "$array15", "$array16", "$array17", "$array18", "$array19", "$array20", "$array21", "$array22", "$array23", "$array24", "$array25", "$array26", "$array27", "$array28" ]
      }, {
        "description" : " Multiplies the elements on the same position in each sequence\n and sums up the results.\n", 
        "params" : [ "$array1", "$array2", "$array3", "$array4", "$array5", "$array6", "$array7", "$array8", "$array9", "$array10", "$array11", "$array12", "$array13", "$array14", "$array15", "$array16", "$array17", "$array18", "$array19", "$array20", "$array21", "$array22", "$array23", "$array24", "$array25", "$array26", "$array27", "$array28", "$array29" ]
      }, {
        "description" : " Multiplies the elements on the same position in each sequence\n and sums up the results.\n", 
        "params" : [ "$array1", "$array2", "$array3", "$array4", "$array5", "$array6", "$array7", "$array8", "$array9", "$array10", "$array11", "$array12", "$array13", "$array14", "$array15", "$array16", "$array17", "$array18", "$array19", "$array20", "$array21", "$array22", "$array23", "$array24", "$array25", "$array26", "$array27", "$array28", "$array29", "$array30" ]
      } ], 
      "sumsq" : [ {
        "description" : " Returns the sum of the squares of the arguments.\n It used the sumproduct function.\n", 
        "params" : [ "$numbers" ]
      } ]
    }
  }, 
  "http://zorba.io/modules/excel/math" : {
    "description" : " This is a library module offering a part of the set of functions\n defined by Microsoft Excel 2003.\n", 
    "functions" : {
      "is-a-number" : [ {
        "description" : " Checks if the xs:anyAtomicType argument is actually a numeric type\n or can be converted to numeric.\n", 
        "params" : [ "$value" ]
      } ], 
      "cast-as-numeric" : [ {
        "description" : " Cast the xs:anyAtomicType to a numeric type.\n If the value is already of a numeric type then nothing is changed.\n Otherwise the value is casted to the numeric type that is most appropriate.\n", 
        "params" : [ "$number" ]
      } ], 
      "abs" : [ {
        "description" : " Compute the abs of a numeric value.\n The value can also be a string and it will be casted to the appropriate numeric first.\n", 
        "params" : [ "$arg" ]
      } ], 
      "ceiling" : [ {
        "description" : " Returns number rounded up, away from zero, to the nearest multiple of significance.\n Significance must have the same sign as number.\n Number and significance must be of a numeric type or castable to numeric.\n Significance must not be zero.\n", 
        "params" : [ "$number", "$significance" ]
      } ], 
      "even" : [ {
        "description" : " Returns number rounded up to the nearest even integer.\n Regardless of the sign of number, a value is rounded up when adjusted away from zero.\n", 
        "params" : [ "$number" ]
      } ], 
      "fact-integer" : [ {
        "description" : " Function for computing factorial.\n This function should not be used outside this module.\n This recursive function computes: number * fact(number-1)\n", 
        "params" : [ "$intnum" ]
      } ], 
      "fact" : [ {
        "description" : " Returns the factorial of a number.\n", 
        "params" : [ "$number" ]
      } ], 
      "floor" : [ {
        "description" : " Rounds number down, toward zero, to the nearest multiple of significance.\n Significance must have the same sign as number.\n", 
        "params" : [ "$number", "$significance" ]
      } ], 
      "int" : [ {
        "description" : " Rounds a number down to the nearest integer.\n Positive numbers are rounded toward zero, negative numbers are rounded away from zero.\n", 
        "params" : [ "$number" ]
      } ], 
      "mod" : [ {
        "description" : " Returns the remainder after number is divided by divisor.\n The result has the same sign as divisor.\n", 
        "params" : [ "$number", "$divisor" ]
      } ], 
      "odd" : [ {
        "description" : " Returns number rounded up to the nearest odd integer, away from zero.\n", 
        "params" : [ "$number" ]
      } ], 
      "pi" : [ {
        "description" : " Return the value of PI as decimal with 15 digits.\n", 
        "params" : [  ]
      } ], 
      "power" : [ {
        "description" : " Returns the result of a number raised to a power.\n The result is computed through successive multiplications.\n", 
        "params" : [ "$number", "$power" ]
      } ], 
      "product-internal" : [ {
        "description" : " Function for product.\n This function should not be used outside this module.\n Multiplies all numbers in the sequence.\n", 
        "params" : [ "$numbers" ]
      } ], 
      "product" : [ {
        "description" : " Multiplies all the numbers given as arguments and returns the product.\n", 
        "params" : [ "$numbers" ]
      } ], 
      "quotient" : [ {
        "description" : " Returns the integer portion of a division.\n", 
        "params" : [ "$numerator", "$denominator" ]
      } ], 
      "round" : [ {
        "description" : " Rounds a number to a specified number of digits.\n If precision is greater than 0 (zero), then number is rounded\n to the specified number of decimal places.\n If num_digits is 0, then number is rounded to the nearest integer.\n If num_digits is less than 0, then number is rounded to the left of the decimal point.\n The 0.5 is rounded away from zero.\n", 
        "params" : [ "$number", "$precision" ]
      } ], 
      "rounddown" : [ {
        "description" : " Rounds a number down, toward zero.\n If num_digits is greater than 0 (zero), then number is rounded down\n to the specified number of decimal places.\n If num_digits is 0, then number is rounded down to the nearest integer.\n If num_digits is less than 0, then number is rounded down to the left of the decimal point.\n", 
        "params" : [ "$number", "$precision" ]
      } ], 
      "roundup" : [ {
        "description" : " Rounds a number up, away from 0 (zero).\n If num_digits is greater than 0 (zero), then number is rounded down\n to the specified number of decimal places.\n If num_digits is 0, then number is rounded down to the nearest integer.\n If num_digits is less than 0, then number is rounded down to the left of the decimal point.\n", 
        "params" : [ "$number", "$precision" ]
      } ], 
      "sign" : [ {
        "description" : " Determines the sign of a number.\n Returns 1 if the number is positive, zero (0) if the number is 0,\n and -1 if the number is negative.\n", 
        "params" : [ "$number" ]
      } ], 
      "sum" : [ {
        "description" : " Adds all the numbers in the sequence.\n", 
        "params" : [ "$numbers" ]
      } ], 
      "trunc" : [ {
        "description" : " Truncates a number to an integer by removing the fractional part of the number.\n", 
        "params" : [ "$number" ]
      }, {
        "description" : " Truncates a number down to precision.\n This behaves exactly like rounddown.\n", 
        "params" : [ "$number", "$precision" ]
      } ], 
      "sort-numbers" : [ {
        "description" : " Helper function.\n Sorts a sequence of numbers or arguments castable to numeric.\n It first casts all arguments to numeric and then sorts ascending.\n", 
        "params" : [ "$numbers" ]
      } ], 
      "degrees" : [ {
        "description" : " Converts radians into degrees.\n", 
        "params" : [ "$radian" ]
      } ], 
      "factdouble" : [ {
        "description" : " Returns the double factorial of a number.\n Computes the double factorial of n as n(n-2)(n-4)...\n", 
        "params" : [ "$number" ]
      } ], 
      "min-without-zero" : [ {
        "description" : " Function for computing GCD.\n This function should not be used outside this module.\n It calculates the minimum value from a sequence of positive integers,\n not taking into account the zero value.\n", 
        "params" : [ "$numbers" ]
      } ], 
      "try-exact-divide" : [ {
        "description" : " Function for computing GCD.\n This function should not be used outside this module.\n Checks if all integer numbers from a sequence divide exactly to a divident.\n", 
        "params" : [ "$numbers", "$divident" ]
      } ], 
      "iterate-all-gcd" : [ {
        "description" : " Function for computing GCD.\n This function should not be used outside this module.\n This function iterates through possible divisors and checks if the sequence\n divides exactly to any of those. It starts from the minimum value from the\n sequence and searches downwards.\n", 
        "params" : [ "$numbers", "$min-nonzero", "$iteration" ]
      } ], 
      "gcd" : [ {
        "description" : " Returns the greatest common divisor GCD of a sequence of integers.\n The sequence can have one or more positive integers.\n", 
        "params" : [ "$numbers" ]
      } ], 
      "lcm" : [ {
        "description" : " Returns the least common multiple of integers.\n LCM for two numbers is computed by multiplying them and dividing with GCD. \n The function is applied recursively replacing the first two numbers in the sequence with their LCM.\n", 
        "params" : [ "$numbers" ]
      } ], 
      "mround" : [ {
        "description" : " Returns a number rounded to the desired multiple.\n MROUND rounds up, away from zero, if the remainder of dividing number by multiple\n is greater than or equal to half the value of multiple.\n MROUND is computed through floor function.\n", 
        "params" : [ "$number", "$multiple" ]
      } ], 
      "radians" : [ {
        "description" : " Converts degrees to radians.\n", 
        "params" : [ "$degree" ]
      } ], 
      "roman" : [ {
        "description" : " Converts an arabic numeral to roman, as text.\n Only the clasic format is supported (out of all formats Excel requires).\n M is the largest digit, it represents 1000.\n Numbers bigger than 2000 will be represented by a sequence of \"M\".\n D = 500, C = 100, L = 50, X = 10, V = 5, I = 1.\n", 
        "params" : [ "$number" ]
      } ]
    }
  }, 
  "http://zorba.io/modules/excel/statistical-zorba" : {
    "description" : " This module implements some Excel 2003 statistical functions\n that cannot be implemented with standard XQuery functions.\n It uses Zorba specific functions.\n", 
    "functions" : {
      "stdev" : [ {
        "description" : " Estimates standard deviation based on a sample.\n The standard deviation is a measure of how widely values are dispersed\n   from the average value (the mean).\n It is computed with formula:\n sqrt( sum((x-average_x)^2) / (n-1) )    = sqrt ( VAR(numbers) )\n", 
        "params" : [ "$numbers" ]
      } ], 
      "stdeva" : [ {
        "description" : " Estimates standard deviation based on a sample.\n The standard deviation is a measure of how widely values are dispersed\n   from the average value (the mean).\n It is computed with formula:\n sqrt( sum((x-average_x)^2) / (n-1) )    = sqrt ( VARA(numbers) )\n", 
        "params" : [ "$numbers" ]
      } ], 
      "stdevp" : [ {
        "description" : " Calculates standard deviation based on the entire population given as arguments.\n The standard deviation is a measure of how widely values are dispersed from\n   the average value (the mean).\n It is computed with formula:\n sqrt( sum((x-average_x)^2) / n )    = sqrt ( VARP(numbers) )\n", 
        "params" : [ "$numbers" ]
      } ], 
      "stdevpa" : [ {
        "description" : " Calculates standard deviation based on the entire population given as arguments.\n The standard deviation is a measure of how widely values are dispersed from\n   the average value (the mean).\n It is computed with formula:\n sqrt( sum((x-average_x)^2) / n )    = sqrt ( VARPA(numbers) )\n", 
        "params" : [ "$numbers" ]
      } ], 
      "subtotal" : [ {
        "description" : " Moved from math module.\n Returns a subtotal in a sequence of numbers.\n The function applied is given by $function_num.\n", 
        "params" : [ "$function_num", "$numbers" ]
      } ]
    }
  }, 
  "http://zorba.io/modules/excel/statistical" : {
    "description" : " This is a library module offering a part of the set of statistical functions\n defined by Microsoft Excel 2003.\n", 
    "functions" : {
      "count-non-empty" : [ {
        "description" : " Function for average function.\n This function should not be used outside this module.\n It counts all non-empty arguments from the sequence.\n The string value of every argument is used for checking.\n", 
        "params" : [ "$numbers" ]
      } ], 
      "average" : [ {
        "description" : " Returns the average (arithmetic mean) of the arguments.\n Arguments can be empty values, otherwise must be castable to numeric.\n If sequence is empty then zero is returned.\n The sequence can be of any length.\n", 
        "params" : [ "$numbers" ]
      } ], 
      "count" : [ {
        "description" : " Counts the number of cells that contain numbers or values castable to numeric.\n", 
        "params" : [ "$numbers" ]
      } ], 
      "countblank" : [ {
        "description" : " Counts the empty values in a sequence.\n The empty values are the ones with string value \"\".\n The value 0 is not counted.\n", 
        "params" : [ "$cells" ]
      } ], 
      "max" : [ {
        "description" : " Returns the largest number in a sequence.\n", 
        "params" : [ "$numbers" ]
      } ], 
      "min" : [ {
        "description" : " Returns the smallest number in a sequence.\n", 
        "params" : [ "$numbers" ]
      } ], 
      "median" : [ {
        "description" : " Returns the median of the given numbers.\n The median is the number in the middle of a set of numbers.\n Half the numbers have values that are greater than the median,\n and half the numbers have values that are less than the median.\n", 
        "params" : [ "$numbers" ]
      } ], 
      "mode" : [ {
        "description" : " Returns the most frequently occurring, or repetitive, value in a sequence.\n Arguments must be castable to numeric.\n", 
        "params" : [ "$numbers" ]
      } ], 
      "percentile" : [ {
        "description" : " Returns the k-th percentile of values in a sequence.\n If k is not a multiple of 1/(n - 1),\n   PERCENTILE interpolates to determine the value at the k-th percentile.\n The function is computed by (max-min)*k + min\n", 
        "params" : [ "$numbers", "$k_at" ]
      } ], 
      "sum-deviations" : [ {
        "description" : " Function for AVEDEV.\n This function should not be used outside this module.\n Computes formula sum(abs(x - average)) for every x in $numbers\n", 
        "params" : [ "$numbers", "$average" ]
      } ], 
      "avedev" : [ {
        "description" : " Returns the average of the absolute deviations of data points from their mean.\n The formula is sum(abs(x - average_x))/n, where n is the count of x in the sequence.\n", 
        "params" : [ "$numbers" ]
      } ], 
      "add-all-cells" : [ {
        "description" : " Function for AVERAGEA.\n This function should not be used outside this module.\n This function adds all values that are castable to numeric.\n", 
        "params" : [ "$numbers" ]
      } ], 
      "averagea" : [ {
        "description" : " Calculates the average (arithmetic mean) of the values in the sequence of arguments.\n Arguments can be of any type.\n The numbers are added, and the sum is divided by the size of entire sequence.\n", 
        "params" : [ "$numbers" ]
      } ], 
      "counta" : [ {
        "description" : " Counts the number of values that are not empty.\n Empty values are the one with string value \"\".\n", 
        "params" : [ "$numbers" ]
      } ], 
      "large" : [ {
        "description" : " Returns the k-th largest value in a data set.\n If n is the number of data points in a range,\n   then LARGE(array,1) returns the largest value,\n   and LARGE(array,n) returns the smallest value.\n", 
        "params" : [ "$numbers", "$k" ]
      } ], 
      "maxa" : [ {
        "description" : " Returns the largest value in a list of arguments.\n In this implementation there is no difference between MAX and MAXA.\n", 
        "params" : [ "$numbers" ]
      } ], 
      "mina" : [ {
        "description" : " Returns the smallest value in a list of arguments.\n In this implementation there is no difference between MAX and MAXA.\n", 
        "params" : [ "$numbers" ]
      } ], 
      "rank" : [ {
        "description" : " Returns the rank of a number in a list of numbers.\n The rank of a number is its size relative to other values in a list.\n (If you were to sort the list, the rank of the number would be its position.)\n RANK gives duplicate numbers the same rank.\n", 
        "params" : [ "$x", "$numbers", "$order_ascending" ]
      }, {
        "description" : " This RANK function is same as the above, only that $order_ascending is set by default to false.\n", 
        "params" : [ "$x", "$numbers" ]
      } ], 
      "percentrank" : [ {
        "description" : " Returns the rank of a value in a data set as a percentage of the data set.\n If x does not match one of the values in array,\n   PERCENTRANK interpolates to return the correct percentage rank. \n The formula is uses: (RANK - 1) / (size - 1) .\n", 
        "params" : [ "$numbers", "$x" ]
      } ], 
      "quartile" : [ {
        "description" : " Returns the quartile of a data set.\n", 
        "params" : [ "$numbers", "$quart" ]
      } ], 
      "small" : [ {
        "description" : " This function computes the k-th smallest value in a data set.\n Use this function to return values with a particular relative standing in a data set.\n If n is the number of data points in array, SMALL(array,1) equals the smallest value,\n   and SMALL(array,n) equals the largest value.\n", 
        "params" : [ "$numbers", "$k" ]
      } ], 
      "sumsq-deviations" : [ {
        "description" : " Function for VAR, VARA, VARP, VARPA and SLOPE.\n This function should not be used outside this module.\n It computes formula sum((x - average_x)^2) for all x in $numbers.\n", 
        "params" : [ "$numbers", "$average" ]
      } ], 
      "var" : [ {
        "description" : " Estimates variance based on a sample.\n The formula is sum(x - average_x)^2 / (n - 1).\n average_x is computed with AVERAGE function.\n n is the count of numbers from the sequence, excluding empty values.\n", 
        "params" : [ "$numbers" ]
      } ], 
      "vara" : [ {
        "description" : " Estimates variance based on a sample.\n The formula is sum(x - average_x)^2 / (n - 1).\n average_x is computed with AVERAGE function.\n n is the size of sequence, including empty values.\n", 
        "params" : [ "$numbers" ]
      } ], 
      "varp" : [ {
        "description" : " Calculates variance based on the entire population.\n The formula is sum(x - average_x)^2 / n.\n average_x is computed with AVERAGE function.\n n is the count of numbers from the sequence, excluding empty values.\n", 
        "params" : [ "$numbers" ]
      } ], 
      "varpa" : [ {
        "description" : " Calculates variance based on the entire population.\n The formula is sum(x - average_x)^2 / n.\n average_x is computed with AVERAGE function.\n n is the size of sequence, including empty values.\n", 
        "params" : [ "$numbers" ]
      } ], 
      "sum-prob" : [ {
        "description" : " Function for PROB function.\n This function should not be used outside this module.\n Computes the sum over a sequence of numbers.\n Checks if the values are between 0 and 1.\n", 
        "params" : [ "$prob_range" ]
      } ], 
      "sum-prob-x" : [ {
        "description" : " Function for PROB function.\n This function should not be used outside this module.\n Checks the prob range and x range if they have the same number of values.\n Adds all probabilities corresponding to values between range_lower_limit and upper_limit.\n", 
        "params" : [ "$x_range", "$prob_range", "$range_lower_limit", "$upper_limit" ]
      } ], 
      "prob" : [ {
        "description" : " Returns the probability that values in a range are between two limits.\n", 
        "params" : [ "$x_range", "$prob_range", "$range_lower_limit", "$upper_limit" ]
      }, {
        "description" : " This is the same as above, only that upper_limit is not specified.\n The probability is computed only for range_lower_limit.\n", 
        "params" : [ "$x_range", "$prob_range", "$range_lower_limit" ]
      } ], 
      "sum-x-y-deviations" : [ {
        "description" : " Function for SLOPE function.\n This function should not be used outside this module.\n It computes the formula:\n sum((x - average_x)(y - average_y)) \n where average_x and average_y are computed with AVERAGE function.\n", 
        "params" : [ "$x_numbers", "$x_average", "$y_numbers", "$y_average" ]
      } ], 
      "slope" : [ {
        "description" : " Returns the slope of the linear regression line through data points in known_y's and known_x's.\n The slope is the vertical distance divided by the horizontal distance between\n   any two points on the line, which is the rate of change along the regression line.\n It computes the formula:\n sum((x - average_x)(y - average_y)) / sum((x - average_x)^2)  \n where average_x and average_y are computed with AVERAGE function.\n", 
        "params" : [ "$known_y", "$known_x" ]
      } ], 
      "standardize" : [ {
        "description" : " Returns a normalized value from a distribution characterized by mean and standard_dev.\n The formula is (x - mean) / standard_dev .\n", 
        "params" : [ "$x", "$mean", "$standard_dev" ]
      } ]
    }
  }, 
  "http://zorba.io/modules/excel/text" : {
    "description" : " This is a library module offering the same set of functions\n defined by Microsoft Excel, under Text and Data Functions.\n", 
    "functions" : {
      "value-union" : [ {
        "description" : " Returns the union of the values in two sequences in an implementation-defined order. It removes duplicates.\n", 
        "params" : [ "$arg1", "$arg2" ]
      } ], 
      "value-intersect" : [ {
        "description" : " Returns the intersection of the values in two sequences in an implementation-defined order. It removes duplicates.\n", 
        "params" : [ "$arg1", "$arg2" ]
      } ], 
      "value-except" : [ {
        "description" : " Returns the values in one sequence that do not appear in the second sequence in an implementation-defined order.\n", 
        "params" : [ "$arg1", "$arg2" ]
      } ], 
      "reverse-string" : [ {
        "description" : " Reverses the order of characters in a string.\n", 
        "params" : [ "$arg" ]
      } ], 
      "pad-string-to-length" : [ {
        "description" : " Returns $string appended with enough repetitions of $padChar to make its length $length.\n", 
        "params" : [ "$string", "$padChar", "$length" ]
      } ], 
      "pad-integer-to-length" : [ {
        "description" : " Returns $toPad appended with enough repetitions of $padChar to make its length $length, the characters are added before the string.\n", 
        "params" : [ "$toPad", "$padChar", "$length" ]
      } ], 
      "index-of-match-first" : [ {
        "description" : " Returns an integer representing the first position of a substring that matches $pattern within $arg.\n", 
        "params" : [ "$arg", "$pattern" ]
      }, {
        "description" : " Returns an integer representing the first position of a substring that matches $pattern using $flags within $arg.\n", 
        "params" : [ "$arg", "$pattern", "$flags" ]
      } ], 
      "index-of-match" : [ {
        "description" : " Returns an integer representing the $instance_num position of a substring that matches $pattern within $arg starting from $pos.\n", 
        "params" : [ "$arg", "$pattern", "$pos", "$instance_num" ]
      } ], 
      "tokenize-length" : [ {
        "description" : " Splits $text in groups of $length characters starting from right to left.\n", 
        "params" : [ "$text", "$length" ]
      } ], 
      "asc" : [ {
        "description" : " Returns the given $text unchanged.\n", 
        "params" : [ "$text" ]
      } ], 
      "char" : [ {
        "description" : " Returns the character specified by a certain codepoint.\n", 
        "params" : [ "$number" ]
      } ], 
      "code" : [ {
        "description" : " Returns a codepoint for the first character in a text string.\n", 
        "params" : [ "$arg" ]
      } ], 
      "concatenate" : [ {
        "description" : " Joins two text strings into one text string.\n", 
        "params" : [ "$arg1", "$arg2" ]
      }, {
        "description" : " Joins several text strings into one text string.\n", 
        "params" : [ "$args" ]
      } ], 
      "clean" : [ {
        "description" : " Removes all nonprintable characters from text.\n", 
        "params" : [ "$arg" ]
      } ], 
      "fixed" : [ {
        "description" : " Rounds a number to the specified number of decimals, formats the number in\n decimal format using a period and commas, and returns the result as text.\n", 
        "params" : [ "$number", "$decimals" ]
      }, {
        "description" : " Rounds a number to the specified number of decimals, formats the number in\ndecimal format using a period and commas, and returns the result as text.\n", 
        "params" : [ "$number", "$decimals", "$no_commas" ]
      } ], 
      "dollar" : [ {
        "description" : " Converts a number to text format and applies a currency symbol. The number of\ndigits to the right of the decimal point is 2.\n", 
        "params" : [ "$number" ]
      }, {
        "description" : " Converts a number to text format and applies a currency symbol.\n", 
        "params" : [ "$number", "$decimals" ]
      } ], 
      "exact" : [ {
        "description" : " Compares two text strings and returns TRUE if they are exactly the same,\nFALSE otherwise. EXACT is case-sensitive but ignores formatting differences.\n", 
        "params" : [ "$arg1", "$arg2" ]
      } ], 
      "left" : [ {
        "description" : " Returns the first character in a text string.\n", 
        "params" : [ "$arg" ]
      }, {
        "description" : " Returns the first character or characters in $text, based on the number of $num_chars you specify.\n", 
        "params" : [ "$text", "$num_chars" ]
      } ], 
      "len" : [ {
        "description" : " Returns the number of characters in a text string.\n", 
        "params" : [ "$arg" ]
      } ], 
      "lower" : [ {
        "description" : " Converts all uppercase letters in a text string to lowercase.\n", 
        "params" : [ "$arg" ]
      } ], 
      "mid" : [ {
        "description" : " Returns a specific number of characters from a text string, starting at\nthe position you specify, based on the number of characters you specify.\n", 
        "params" : [ "$text", "$start_num", "$num_chars" ]
      } ], 
      "replace" : [ {
        "description" : " Replaces part of a text string, based on the number of characters you specify, with a different text string.\n", 
        "params" : [ "$old_text", "$start_num", "$num_chars", "$new_text" ]
      } ], 
      "right" : [ {
        "description" : " Returns the last character in a text string.\n", 
        "params" : [ "$arg" ]
      }, {
        "description" : " Returns the last character or characters in a text string, based on the number of characters you specify.\n", 
        "params" : [ "$text", "$num_chars" ]
      } ], 
      "search" : [ {
        "description" : " Locate one text string within a second text string, and return the number of\n the starting position of the first text string from the first character of the\n second text string.  The search starts at position 1, and it is not case sensitive.\n", 
        "params" : [ "$find_text", "$within_text" ]
      }, {
        "description" : " Locate one text string within a second text string, and return the number of\n the starting position of the first text string from the first character of the\n second text string. The search starts at $start_num, and it is not case sensitive.\n", 
        "params" : [ "$find_text", "$within_text", "$start_num" ]
      } ], 
      "find" : [ {
        "description" : " Locate one text string within a second text string, and return the number of the\n starting position of the first text string from the first character of the second text string. \n The search is case sensitive.\n", 
        "params" : [ "$find_text", "$within_text" ]
      }, {
        "description" : " Locate one text string within a second text string, and return the number of the\n starting position of the first text string from the first character of the second text string.\n The search is case sensitive.\n", 
        "params" : [ "$find_text", "$within_text", "$start_num" ]
      } ], 
      "substitute" : [ {
        "description" : " Substitutes new_text for old_text in a text string.\n", 
        "params" : [ "$text", "$old_text", "$new_text", "$instance_num" ]
      }, {
        "description" : " Substitutes new_text for old_text in a text string. Every occurrence of old_text in text is changed to new_text.\n", 
        "params" : [ "$text", "$old_text", "$new_text" ]
      } ], 
      "trim" : [ {
        "description" : " Removes all spaces from text except for single spaces between words.\n", 
        "params" : [ "$text" ]
      } ], 
      "upper" : [ {
        "description" : " Converts text to uppercase.\n", 
        "params" : [ "$text" ]
      } ], 
      "t" : [ {
        "description" : " Converts the $value to string.\n", 
        "params" : [ "$value" ]
      } ], 
      "value" : [ {
        "description" : " Converts a text string that represents a number to a number.\n", 
        "params" : [ "$arg" ]
      } ]
    }
  }, 
  "http://zorba.io/modules/fetch" : {
    "description" : " This module provides functions to fetch the content of a resource identified\n by a URI. For example, it fetches the content of file or http resources.\n In order to retrieve such content, the functions use the\n URI resolution and URL resolver process as documented at\n \n URI Resolvers.\n", 
    "functions" : {
      "content" : [ {
        "description" : " Tries to fetch the resource referred to by the given URI.\n It queries all URI mappers and resolvers with kind\n EntityData::SOME_CONTENT.\n The content is assumed to be UTF-8 encoded.\n", 
        "params" : [ "$uri" ]
      }, {
        "description" : " Tries to fetch the resource referred to by the given URI.\n It queries all URI mappers and resolvers with kind the specified\n entity kind.\n The content is assumed to be UTF-8 encoded.\n", 
        "params" : [ "$uri", "$entity-kind" ]
      }, {
        "description" : " Tries to fetch the resource referred to by the given URI.\n It queries all URI mappers and resolvers with kind the specified\n entity kind.\n", 
        "params" : [ "$uri", "$entity-kind", "$encoding" ]
      } ], 
      "content-binary" : [ {
        "description" : " Tries to fetch the resource referred to by the given URI and\n returning it as base64Binary.\n It queries all URI mappers and resolvers with kind\n EntityData::SOME_CONTENT.\n", 
        "params" : [ "$uri" ]
      }, {
        "description" : " Tries to fetch the resource referred to by the given URI and\n returning it as base64Binary.\n It queries all URI mappers and resolvers with kind the specified\n entity kind.\n", 
        "params" : [ "$uri", "$entity-kind" ]
      } ]
    }
  }, 
  "http://zorba.io/modules/full-text" : {
    "description" : " This module provides an XQuery API to full-text functions.\n For general information about this implementation of the\n XQuery and XPath Full Text 1.0 specification\n as well as instructions for building an installing a thesaurus,\n see the Full Text Thesaurus documentation.\n Notes on languages\n To refer to particular human languages,\n uses either the\n ISO 639-1\n or\n ISO 639-2\n languages codes.\n Note that only a subset of the\n complete list of language codes\n are supported and not every function supports the same subset.\n \n Most functions in this module take a language as a parameter\n using the\n xs:language\n XML schema data type.\n Notes on stemming\n The stem() functions return the\n stem\n of a word.\n The stem of a word itself, however, is not guaranteed to be a word.\n It is best to consider a stem as an opaque byte sequence.\n All that is guaranteed about a stem is that,\n for a given word,\n the stem of that word will always be the same byte sequence.\n Hence,\n you should never compare the result of one of the stem()\n functions against a non-stemmed string,\n for example:\n \n  if ( ft:stem( \"apples\" ) eq \"apple\" )             ** WRONG **\n \n Instead do:\n \n  if ( ft:stem( \"apples\" ) eq ft:stem( \"apple\" ) )  ** CORRECT **\n \n Notes on the thesaurus\n The thesaurus-lookup() functions have \"levels\"\n and \"relationship\" parameters.\n The values for these are implementation-defined.\n The default implementation uses the\n WordNet lexical database,\n version 3.0.\n \n In WordNet,\n the number of \"levels\" that two phrases are apart\n are how many hierarchical meanings apart they are.\n For example,\n \"canary\" is 5 levels away from \"vertebrate\"\n (carary &gt; finch &gt; oscine &gt; passerine &gt; bird &gt; vertebrate).\n \n When using the WordNet implementation,\n all of the relationships (and their abbreviations)\n specified by\n ISO 2788\n and\n ANSI/NISO Z39.19-2005\n with the exceptions of \"HN\" (history note)\n and \"X SN\" (see scope note for) are supported.\n These relationships are:\n  \n    \n      Rel.\n      Meaning\n      WordNet Rel.\n    \n    \n      BT\n      broader term\n      hypernym\n    \n    \n      BTG\n      broader term generic\n      hypernym\n    \n    \n      BTI\n      broader term instance\n      instance hypernym\n    \n    \n      BTP\n      broader term partitive\n      part meronym\n    \n    \n      NT\n      narrower term\n      hyponym\n    \n    \n      NTG\n      narrower term generic\n      hyponym\n    \n    \n      NTI\n      narrower term instance\n      instance hyponym\n    \n    \n      NTP\n      narrower term partitive\n      part holonym\n    \n    \n      RT\n      related term\n      also see\n    \n    \n      SN\n      scope note\n      n/a\n    \n    \n      TT\n      top term\n      hypernym\n    \n    \n      UF\n      non-preferred term\n      n/a\n    \n    \n      USE\n      preferred term\n      n/a\n    \n  \n Note that you can specify relationships\n either by their abbreviation\n or their meaning.\n Relationships are case-insensitive.\n In addition to the\n ISO 2788\n and\n ANSI/NISO Z39.19-2005\n relationships,\n All of the relationships offered by WordNet are also supported.\n These relationships are:\n  \n    \n      Relationship\n      Meaning\n    \n    \n      also see\n      \n        A word that is related to another,\n        e.g., for \"varnished\" (furniture)\n        one should also see \"finished.\"\n      \n    \n    \n      antonym\n      \n        A word opposite in meaning to another,\n        e.g., \"light\" is an antonym for \"heavy.\"\n      \n    \n    \n      attribute\n      \n        A noun for which adjectives express values,\n        e.g., \"weight\" is an attribute\n        for which the adjectives \"light\" and \"heavy\"\n        express values.\n      \n    \n    \n      cause\n      \n        A verb that causes another,\n        e.g., \"show\" is a cause of \"see.\"\n      \n    \n    \n      derivationally related form\n      \n        A word that is derived from a root word,\n        e.g., \"metric\" is a derivationally related form of \"meter.\"\n      \n    \n    \n      derived from adjective\n      \n        An adverb that is derived from an adjective,\n        e.g., \"correctly\" is derived from the adjective \"correct.\"\n      \n    \n    \n      entailment\n      \n        A verb that presupposes another,\n        e.g., \"snoring\" entails \"sleeping.\"\n      \n    \n    \n      hypernym\n      \n        A word with a broad meaning that more specific words fall under,\n        e.g., \"meal\" is a hypernym of \"breakfast.\"\n      \n    \n    \n      hyponym\n      \n        A word of more specific meaning than a general term applicable to it,\n        e.g., \"breakfast\" is a hyponym of \"meal.\"\n      \n    \n    \n      instance hypernym\n      \n        A word that denotes a category of some specific instance,\n        e.g., \"author\" is an instance hypernym of \"Asimov.\"\n      \n    \n    \n      instance hyponym\n      \n        A term that donotes a specific instance of some general category,\n        e.g., \"Asimov\" is an instance hyponym of \"author.\"\n      \n    \n    \n      member holonym\n      \n        A word that denotes a collection of individuals,\n        e.g., \"faculty\" is a member holonym of \"professor.\"\n      \n    \n    \n      member meronym\n      \n        A word that denotes a member of a larger group,\n        e.g., a \"person\" is a member meronym of a \"crowd.\"\n      \n    \n    \n      part holonym\n      \n        A word that denotes a larger whole comprised of some part,\n        e.g., \"car\" is a part holonym of \"engine.\"\n      \n    \n    \n      part meronym\n      \n        A word that denotes a part of a larger whole,\n        e.g., an \"engine\" is part meronym of a \"car.\"\n      \n    \n    \n      participle of verb\n      \n        An adjective that is the participle of some verb,\n        e.g., \"breaking\" is the participle of the verb \"break.\"\n      \n    \n    \n      pertainym\n      \n        An adjective that classifies its noun,\n        e.g., \"musical\" is a pertainym in \"musical instrument.\"\n      \n    \n    \n      similar to\n      \n        Similar, though not necessarily interchangeable, adjectives.\n        For example, \"shiny\" is similar to \"bright\",\n        but they have subtle differences.\n      \n    \n    \n      substance holonym\n      \n        A word that denotes a larger whole containing some constituent\n        substance, e.g., \"bread\" is a substance holonym of \"flour.\"\n      \n    \n    \n      substance meronym\n      \n        A word that denotes a constituant substance of some larger whole,\n        e.g., \"flour\" is a substance meronym of \"bread.\"\n      \n    \n    \n      verb group\n      \n        A verb that is a member of a group of similar verbs,\n        e.g., \"live\" is in the verb group\n        of \"dwell\", \"live\", \"inhabit\", etc.\n      \n    \n  \n Notes on tokenization\n For general information about the implementation of tokenization,\n including what constitutes a token,\n see the Full Text Tokenizer documentation.\n", 
    "functions" : {
      "current-compare-options" : [ {
        "description" : " Gets the current compare options.\n", 
        "params" : [  ]
      } ], 
      "current-lang" : [ {
        "description" : " Gets the current\n language:\n either the language specified by the\n declare ft-option using\n language\n statement (if any)\n or the one returned by ft:host-lang() (if none).\n", 
        "params" : [  ]
      } ], 
      "host-lang" : [ {
        "description" : " Gets the host's current\n language.\n The \"host\" is the computer on which the software is running.\n The host's current language is obtained as follows:\n  \n    \n      For *nix systems:\n      \n        \n          If setlocale(3) returns non-null,\n          the language corresponding to that locale is used.\n        \n        \n          Else, if the LANG environment variable is set,\n          that language is ued.\n        \n        \n          Otherwise, there is no default language.\n        \n      \n    \n    \n      For Windows systems,\n      the language corresponding to the locale returned by the\n      GetLocaleInfo()\n      function is used.\n    \n  \n", 
        "params" : [  ]
      } ], 
      "is-stem-lang-supported" : [ {
        "description" : " Checks whether the given\n language\n is supported for stemming.\n", 
        "params" : [ "$lang" ]
      } ], 
      "is-stop-word" : [ {
        "description" : " Checks whether the given word is a stop-word.\n", 
        "params" : [ "$word", "$lang" ]
      }, {
        "description" : " Checks whether the given word is a stop-word.\n", 
        "params" : [ "$word" ]
      } ], 
      "is-stop-word-lang-supported" : [ {
        "description" : " Checks whether the given\n language\n is supported for stop words.\n", 
        "params" : [ "$lang" ]
      } ], 
      "is-thesaurus-lang-supported" : [ {
        "description" : " Checks whether the given\n language\n is supported for look-up using the default thesaurus.\n", 
        "params" : [ "$lang" ]
      }, {
        "description" : " Checks whether the given\n language\n is supported for look-up using the thesaurus specified by the given URI.\n", 
        "params" : [ "$uri", "$lang" ]
      } ], 
      "is-tokenizer-lang-supported" : [ {
        "description" : " Checks whether the given\n language\n is supported for tokenization.\n", 
        "params" : [ "$lang" ]
      } ], 
      "stem" : [ {
        "description" : " Stems the given word.\n", 
        "params" : [ "$word", "$lang" ]
      }, {
        "description" : " Stems the given word.\n", 
        "params" : [ "$word" ]
      } ], 
      "strip-diacritics" : [ {
        "description" : " Strips all diacritical marks from all characters.\n", 
        "params" : [ "$string" ]
      } ], 
      "thesaurus-lookup" : [ {
        "description" : " Looks-up the given phrase in the default thesaurus.\n", 
        "params" : [ "$phrase" ]
      }, {
        "description" : " Looks-up the given phrase in the thesaurus specified by the given URI.\n", 
        "params" : [ "$uri", "$phrase", "$lang" ]
      }, {
        "description" : " Looks-up the given phrase in a thesaurus.\n", 
        "params" : [ "$uri", "$phrase" ]
      }, {
        "description" : " Looks-up the given phrase in a thesaurus.\n", 
        "params" : [ "$uri", "$phrase", "$lang", "$relationship" ]
      }, {
        "description" : " Looks-up the given phrase in a thesaurus.\n", 
        "params" : [ "$uri", "$phrase", "$lang", "$relationship", "$level-least", "$level-most" ]
      } ], 
      "tokenize-node" : [ {
        "description" : " Tokenizes the given node and all of its decendants.\n", 
        "params" : [ "$node", "$lang" ]
      }, {
        "description" : " Tokenizes the given node and all of its descendants.\n", 
        "params" : [ "$node" ]
      } ], 
      "tokenize-nodes" : [ {
        "description" : " Tokenizes the set of nodes comprising $includes (and all of its\n descendants) but excluding $excludes (and all of its\n descendants), if any.\n", 
        "params" : [ "$includes", "$excludes" ]
      }, {
        "description" : " Tokenizes the set of nodes comprising $includes (and all of its\n descendants) but excluding $excludes (and all of its\n descendants), if any.\n", 
        "params" : [ "$includes", "$excludes", "$lang" ]
      } ], 
      "tokenize-string" : [ {
        "description" : " Tokenizes the given string.\n", 
        "params" : [ "$string", "$lang" ]
      }, {
        "description" : " Tokenizes the given string.\n", 
        "params" : [ "$string" ]
      } ], 
      "tokenizer-properties" : [ {
        "description" : " Gets properties of the tokenizer for the given\n language.\n", 
        "params" : [ "$lang" ]
      }, {
        "description" : " Gets properties of the tokenizer for the\n language\n returned by ft:current-lang().\n", 
        "params" : [  ]
      } ]
    }
  }, 
  "http://zorba.io/modules/geoproj" : {
    "description" : " Geographic projection module.\n Forward and inverse projection from WGS84 lat-long coordinates to Oblique Mercator x-y projection.\n Oblique Mercator projection is a sphere to cylinder projection.\n This projection results in a conformal output, meaning the shape of small areas is preserved,\n no matter the distance from the origin. But it is not equal area, meaning the area size increases heavily\n when getting closer to North or South. The area size increases with the same amount on x and y axes,\n so the relative shape remains almost the same.\n Mercator projection is the oldest projection, and it is still widely used because it produces a rectangular map.\n This projection is used in Google Maps because of its conformal output.\n For military or measurements purposes the UTM projection is used (or variants). This splits the Earth into small\n areas and computes the cartesian coordinates relative to each area.\n \n Here we use Oblique Mercator projection. Its advantage over the normal Mercator is that you can set the tangent point\n between the cylinder and the sphere to be anywhere on Earth. So you can set the center of the map to be close\n to the area you want projected and be able to measure accurately the distances between points and lines.\n The map deformation is minimal close to the center point and close to the \"equator\" line.\n The advantage over the UTM projection is that it can also produce a global rectangular map, like Mercator,\n which is great for viewing.\n The disadvantage over Mercator is that it needs more processing power.\n \n WGS84 is the ellipsoid aproximation of the Earth, with big radius of 6,378,137 m and small radius of 6,356,752.3 m.\n The geographic coordinates expressed for this ellipsoid are widely used today in maps and gps coordinates.\n It is the default standard for representing geographic coordinates.\n \n The purpose of this module is to provide convertion from polar to cartesian coordinates, so you can\n process the geographic data with the Simple Features API functions implemented in the geo module.\n That module works only with cartesian coordinates, but most maps have polar coordinates.\n \n The projection formulas are taken from lib_proj library and implemented in XQuery.\n", 
    "functions" : {
      "deg-to-rad" : [ {
        "description" : " Convert angle from degrees to radians.\n The parameter is first reduced to value range of (-360, 360).\n", 
        "params" : [ "$deg" ]
      } ], 
      "rad-to-deg" : [ {
        "description" : " Convert angle from radians to degrees.\n", 
        "params" : [ "$rad" ]
      } ], 
      "proj-tsfn" : [ {
        "description" : " Compute the isometric latitude of $phi latitude.\n", 
        "params" : [ "$phi" ]
      } ], 
      "wgs84-to-omerc-validated" : [ {
        "description" : "", 
        "params" : [ "$lat_0", "$long_c", "$k0", "$lat_long_degrees" ]
      } ], 
      "wgs84-to-omerc" : [ {
        "description" : " Forward projection from geographic coordinates lat-long on WGS84 ellipsoid to Oblique Mercator cylinder.\n The Oblique Mercator projection is like the standard Mercator projection, but you can choose the point of origin.\n Specify the coordinates of the center point somewhere near the points being projected,\n so the projection deformation is small.\n The azimuth in the center point, alpha, is hardcoded to zero, so the true north is preserved.\n This is a simplification of the standard Oblique Mercator projection.\n Gamma, the azimuth of the rectified bearing of center line is also zero, calculated from alpha.\n \n The radius of the Earth in WGS84 is 6378137 m.\n Reverse flatening 298.257223563.\n Eccentricity e 0.0818192.\n", 
        "params" : [ "$lat-0", "$long-c", "$k0", "$lat-long-degrees" ]
      } ], 
      "wgs84-to-omerc-gmlpos" : [ {
        "description" : " Forward projection from geographic coordinates lat-long on WGS84 ellipsoid to Oblique Mercator cylinder.\n This is an intermediate function for wgs84-to-omerc.\n The difference is that it returns the x-y coordinates in gml:pos format,\n gml being the prefix for the GML namespace \"http://www.opengis.net/gml\".\n", 
        "params" : [ "$lat-0", "$long-c", "$k0", "$lat-long-degrees" ]
      } ], 
      "wgs84-to-omerc-gmlpos-validated" : [ {
        "description" : "", 
        "params" : [ "$lat_0", "$long_c", "$k0", "$lat_long_degrees" ]
      } ], 
      "proj-phi2-helper" : [ {
        "description" : " Function for iterative computing of the inverse isometric latitude.\n", 
        "params" : [ "$i", "$ts", "$e", "$prev_phi" ]
      } ], 
      "proj-phi2" : [ {
        "description" : " Function for computing the inverse isometric latitude.\n", 
        "params" : [ "$ts", "$e" ]
      } ], 
      "omerc-to-wgs84" : [ {
        "description" : " Inverse projection from cartesian coordinates on Oblique Mercator cylinder\n to geographic coordinates lat-long on WGS84 ellipsoid.\n The parameters for center point and scale should be the same as for the initial forward projection,\n otherwise you will get wrong results.\n", 
        "params" : [ "$lat-0", "$long-c", "$k0", "$coords" ]
      } ], 
      "omerc-to-wgs84-validated" : [ {
        "description" : "", 
        "params" : [ "$lat_0", "$long_c", "$k0", "$coords" ]
      } ], 
      "omerc-gmlpos-to-wgs84" : [ {
        "description" : " Inverse projection from cartesian coordinates on Oblique Mercator cylinder\n to geographic coordinates lat-long on WGS84 ellipsoid.\n This is an intermediate function for omerc-to-wgs84.\n The difference is that it works with coordinates in gml:pos format,\n gml being the prefix for the GML namespace \"http://www.opengis.net/gml\".\n", 
        "params" : [ "$lat_0", "$long_c", "$k0", "$gmlposs" ]
      } ], 
      "dms-to-deg" : [ {
        "description" : " Convertion from Degrees-Minutes-Seconds (DMS) to Degrees.\n The values for DMS can be like 11d12'13\", meaning 11 degrees, 12 minutes and 13 seconds.\n One degree has 60 minutes, and one minute has 60 seconds.\n The separator for degrees can be one of the characters [dDoO].\n The separator for minutes can be one of the characters ['m].\n The separator for seconds can be \" or nothing.\n The seconds can be a floating point number.\n \n The seconds can be missing, and if it is missing, the minutes can be missing too.\n The negative value can be expressed as -11d12'13\" or 11d12'13\"S or 11d12'13\"W.\n Values for N (North) and E (East) are positive, and S (South) and W (West) are negative.\n", 
        "params" : [ "$dms" ]
      } ], 
      "deg-to-dms" : [ {
        "description" : " Convertion from Degrees to Degrees-Minutes-Seconds (DMS).\n", 
        "params" : [ "$deg" ]
      } ]
    }
  }, 
  "http://zorba.io/modules/hash" : {
    "description" : " This module provides functions that perform different hash operations.\n For example, they compute MD5 and various SHA functions on either\n strings or binary. The result is the base64 encoded value of the hash.\n", 
    "functions" : {
      "md5" : [ {
        "description" : " Computes the MD5 hash of the string provided as parameter.\n", 
        "params" : [ "$value" ]
      } ], 
      "sha1" : [ {
        "description" : " Computes the SHA1 hash of the string provided as parameter.\n", 
        "params" : [ "$value" ]
      } ], 
      "md5-binary" : [ {
        "description" : " This function computes the MD5 hash value of the binary form of the given\n base64Binary item, i.e. the item is base64-decoded before hashing.\n", 
        "params" : [ "$value" ]
      } ], 
      "sha1-binary" : [ {
        "description" : " This function computes the SHA1 hash value of the binary form of the given\n base64Binary item, i.e. the item is base64-decoded before hashing.\n", 
        "params" : [ "$value" ]
      } ], 
      "hash" : [ {
        "description" : " This function computes a hash value of the string provided as parameter.\n The function expects the hash algorithm to be used as parameter.\n", 
        "params" : [ "$value", "$alg" ]
      } ], 
      "hash-binary" : [ {
        "description" : " This function computes a hash value of the binary form of the given\n base64Binary item, i.e. the item is base64-decoded before hashing.\n", 
        "params" : [ "$value", "$alg" ]
      } ]
    }
  }, 
  "http://zorba.io/modules/hmac" : {
    "description" : " This module provides functions that perform HMAC\n (hash-based message authentication code) operations.\n For example, they calculate message codes involving hash functions such\n as MD5 and various SHA variants. The result is the base64 encoded value\n of the hash. A hash may be used to verify the data integrity and\n the authenticity of a message.\n", 
    "functions" : {
      "md5" : [ {
        "description" : " Calculate the HMAC for the given message and secret-key involving\n the MD5 hash function.\n", 
        "params" : [ "$message", "$secret-key" ]
      } ], 
      "sha1" : [ {
        "description" : " Calculate the HMAC for the given message and secret-key involving\n the SHA1 hash function.\n", 
        "params" : [ "$message", "$secret-key" ]
      } ], 
      "md5-binary" : [ {
        "description" : " Calculate the HMAC for the given message and secret-key involving\n the MD5 hash function. Before calculating the code, the given\n base64-encoded message is base64-decoded.\n", 
        "params" : [ "$message", "$secret-key" ]
      } ], 
      "sha1-binary" : [ {
        "description" : " Calculate the HMAC for the given message and secret-key involving\n the SHA1 hash function. Before calculating the code, the given\n base64-encoded message is base64-decoded.\n", 
        "params" : [ "$message", "$secret-key" ]
      } ], 
      "compute" : [ {
        "description" : " Calculate the HMAC for the given message and secret-key involving\n an custom hash function.\n", 
        "params" : [ "$message", "$secret-key", "$alg" ]
      } ], 
      "compute-binary" : [ {
        "description" : " Calculate the HMAC for the given message and secret-key involving\n an custom hash function. Before calculating the code, the given\n base64-encoded message is base64-decoded.\n", 
        "params" : [ "$message", "$secret-key", "$hash-algo" ]
      } ]
    }
  }, 
  "http://zorba.io/modules/http-client-wrapper" : {
    "description" : " This module provides conversion functions between the\n XML Expath http-client request and response formats and the\n JSON http-client request and response formats used by the\n http://zorba.io/modules/http-client module.\n \n This module is reserved for internal use by the\n http://www.zorba-xquery.com/modules/http-client and the\n http://expath.org/ns/http-client modules.\n This module may be removed at any time. Method signature and\n semantics may change.\n \n", 
    "functions" : {
      "http-sequential-request" : [ {
        "description" : " This function sends an HTTP request and returns the corresponding response.\n This function is declared sequential and can be used to issue\n requests which change the state of the server.\n Its inputs, outputs, and behavior are identical to the\n EXPath http-client's\n send-request() function (except that HTML responses are not tidied\n into XML - see the note above). It\n is provided here for use in Zorba installations that do not have\n the EXPath module available. If you have the option of using the\n EXPath module instead of this function, please do so, as it will\n allow your application to be more interoperable between different\n XQuery engines.\n Full documentation of the $request parameter can be found in\n the EXPath\n specification.\n", 
        "params" : [ "$request", "$href", "$bodies" ]
      } ], 
      "http-nondeterministic-request" : [ {
        "description" : " This function sends an HTTP request and returns the corresponding response.\n This function is declared non-deterministic and should only be used to issue\n requests which do not change the state of the server.\n Its inputs, outputs, and behavior are identical to the\n EXPath http-client's\n send-request() function (except that HTML responses are not tidied\n into XML - see the note above). It\n is provided here for use in Zorba installations that do not have\n the EXPath module available. If you have the option of using the\n EXPath module instead of this function, please do so, as it will\n allow your application to be more interoperable between different\n XQuery engines.\n Full documentation of the $request parameter can be found in\n the EXPath\n specification.\n", 
        "params" : [ "$request", "$href", "$bodies" ]
      } ], 
      "xml-response" : [ {
        "description" : " Private function used internally by this module.\n This function accepts a JSON HTTP module response, as\n used by the http://zorba.io/modules/http-client module\n and returns its EXPath XML representation.\n", 
        "params" : [ "$response", "$override-media-type" ]
      } ], 
      "get-bodies" : [ {
        "description" : " Private function used internally by this module.\n This function accepts a JSON HTTP module response, as\n used by the http://zorba.io/modules/http-client module\n and returns its EXPath XML representation.\n If the body media-type indicates that the response body\n has an XML content, the response body is parsed as XML\n before being returned.\n", 
        "params" : [ "$bodies", "$override-media-type" ]
      } ], 
      "xml-headers" : [ {
        "description" : " Private function used internally by this module.\n This function accepts the headers portion of a JSON HTTP module\n response, as used by the http://zorba.io/modules/http-client module\n and returns its EXPath XML representation.\n", 
        "params" : [ "$headers" ]
      } ], 
      "xml-body" : [ {
        "description" : " Private function used internally by this module.\n This function accepts the body portion of a JSON HTTP module\n response, as used by the http://zorba.io/modules/http-client module\n and returns its EXPath XML representation.\n", 
        "params" : [ "$body" ]
      } ], 
      "xml-multipart" : [ {
        "description" : " Private function used internally by this module.\n This function accepts the multipart portion of a JSON HTTP module\n response, as used by the http://zorba.io/modules/http-client module\n and returns its EXPath XML representation.\n", 
        "params" : [ "$multipart" ]
      } ], 
      "json-request" : [ {
        "description" : " Private function used internally by this module.\n This function accepts an XML EXPath HTTP request and returns its\n JSON representation, as used by the http://zorba.io/modules/http-client\n module.\n", 
        "params" : [ "$request", "$href", "$bodies" ]
      } ], 
      "json-authentication" : [ {
        "description" : " Private function used internally by this module.\n This function accepts an XML EXPath HTTP request and returns the\n JSON representation of its authentication options, as used by the\n http://zorba.io/modules/http-client module.\n", 
        "params" : [ "$request" ]
      } ], 
      "json-options" : [ {
        "description" : " Private function used internally by this module.\n This function accepts an XML EXPath HTTP request and returns the\n JSON representation of its options, as used by the\n http://zorba.io/modules/http-client module.\n", 
        "params" : [ "$request" ]
      } ], 
      "json-headers" : [ {
        "description" : " Private function used internally by this module.\n This function accepts a sequence of headers in the XML EXPath HTTP request\n format and returns their JSON representation, as used by the\n http://zorba.io/modules/http-client module.\n", 
        "params" : [ "$headers" ]
      } ], 
      "json-body" : [ {
        "description" : " Private function used internally by this module.\n This function accept a body element in the XML EXPath HTTP request\n format and returns its JSON representation, as used by the\n http://zorba.io/modules/http-client module.\n", 
        "params" : [ "$body", "$content" ]
      } ], 
      "produce-content" : [ {
        "description" : " Private function used internally by this module.\n This function serializes a request body.\n", 
        "params" : [ "$body", "$content" ]
      } ], 
      "serialization-parameters" : [ {
        "description" : " Private function used internally by this module.\n This function accept a body element in the XML EXPath HTTP request\n format and returns the serializer parameters to be used to serialize\n its content.\n", 
        "params" : [ "$body" ]
      } ], 
      "default-serialization-parameters" : [ {
        "description" : " Private function used internally by this module.\n This function return this module default serialization parameters.\n", 
        "params" : [ "$body" ]
      } ], 
      "json-multipart" : [ {
        "description" : " Private function used internally by this module.\n This function accept a multipart element in the XML EXPath HTTP request\n format and returns its JSON representation, as used by the\n http://zorba.io/modules/http-client module.\n", 
        "params" : [ "$multipart", "$bodies" ]
      } ], 
      "json-part" : [ {
        "description" : " Private function used internally by this module.\n This function accept a part headers, body and content  in the XML\n EXPath HTTP request format and returns its JSON representation, as\n used by the http://zorba.io/modules/http-client module.\n", 
        "params" : [ "$headers", "$body", "$content" ]
      } ], 
      "check-params" : [ {
        "description" : " Private function used internally by this module.\n This function checks if the request, href, and bodies parameters\n are consistent.\n", 
        "params" : [ "$request", "$href", "$bodies" ]
      } ], 
      "set-content-type" : [ {
        "description" : " This adds a default method attribute to all body elements which\n don't contain a method attribute.\n", 
        "params" : [ "$request" ]
      } ], 
      "create-body" : [ {
        "description" : " This function takes an http-schema:body element, copies it, and\n adds a method attribute to the copy if there is none\n in the original element.\n", 
        "params" : [ "$body" ]
      } ], 
      "create-multipart" : [ {
        "description" : " This function takes an http-schema:multipart element, copies it and\n adds a @method attribute to all body elements which don't have\n one.\n", 
        "params" : [ "$multipart" ]
      } ]
    }
  }, 
  "http://zorba.io/modules/http-client" : {
    "description" : " \n This module provides functions for performing HTTP requests.\n \n A simple GET request using the get#1 convenience function\n \n import module namespace http=\"http://zorba.io/modules/http-client\";\n http:get(\"http://www.example.com\")\n \n \n This example makes a GET request to example.com and returns the server's response\n as a JSON object.\n \n \n {\n   \"status\" : 200,\n   \"message\" : \"OK\",\n   \"headers\" : {\n     \"Content-Length\" : \"1270\",\n     \"Date\" : \"Tue, 11 Jun 2013 22:27:10 GMT\",\n     ...\n   },\n   \"body\" : {\n     \"media-type\" : \"text/html\",\n     \"content\" : \"...\"\n   }\n }\n \n Response format\n Most functions in this module (all except options#1)\n return a single JSON item, describing the server's response, as in the previous\n example.\n The server status (integer) and message (string) fields are always present.\n If the server replied sending one or more headers, they are reported\n in an optional headers object. Each header is represented as a single (string)\n field.\n For non-multipart responses, as in the previous example, the response body,\n if any, is reported as a body object. This object contains both the (string)\n media-type returned by the server and its content.\n The type of the content field is determined by the media-type returned by the\n server. If the media-type indicates that the body content is textual,\n then the content has type string, base64Binary otherwise.\n Specifically, the body content is considered textual only if the MIME-type specified in\n the media-type is one of:\n \n   \"application/json\"\n   \"application/x-javascript\"\n   \"application/xml\"\n   \"application/xml-external-parsed-entity\"\n \n or if the MIME-type starts with \"text/\" or ends with \"+xml\".\n For multipart responses, multiple bodies are returned, as in the following example: \n \n {\n   \"status\" : 200,\n   \"message\" : \"OK\",\n   \"headers\" : {\n     \"Date\" : \"Tue, 11 Jun 2013 22:34:13 GMT\",\n     ...\n   },\n   \"multipart\" : {\n     \"boundary\": \"--AaB03x\",\n     \"parts\": [\n       {\n         \"headers\" : {\n            \"Content Disposition: file\",\n            ...\n         },\n         \"body\": {\n           \"media-type\" : \"image/gif\",\n           \"content\" : \"...\"\n         }\n       },\n       {\n         \"body\" : {\n           \"media-type\" : \"text/html\",\n           \"content\" : \"...\"\n         }\n       }\n    ]\n }\n \n The multipart field contains both the boundary used to separate parts\n and an array containing all parts. Each part contains its specific headers,\n if any, and the corresponding body.\n Important Notice Regarding Nondeterministic Functions\n \n The following functions in this module -\n get#1,\n get-text#1,\n get-binary#1,\n send-nondeterministic-request-1,\n head#1, and\n options#1\n are declared to be nondeterministic, which means that their results\n will not be cached.\n However, they are not declared to be\n sequential, which means that they may be re-ordered during query optimization.\n According to the HTTP RFC, GET, HEAD an OPTIONS requests should not have any side-effects.\n However, in practice it is not uncommon, especially for GET requests, to have side-effects.\n If your application depends on the ordering of side-effects from requests issued through\n these functions, you should either use the send-request()\n function (which is declared sequential), or alternatively\n wrap each call to get() in your own sequential function, to ensure\n that the requests are not reordered.\n Conversely, if you want their results to be cached you can use the\n send-deterministic-request()\n function (which is declared deterministic).\n \n $href Arguments to Functions\n Several functions in this module accept a URL argument named $href. In\n all cases, the value passed to $href must be a valid anyURI.\n However, all functions declare $href to be of type string. This\n is for convenience, since you can pass a string literal value (that\n is, a URL in double-quotes spelled out explicitly in your query)\n to an string parameter.\n Relation to the EXPath http-client module\n EXPath defines its own http-client\n module, which is available separately.\n There are two primary differences between EXPath's http-client and\n this module:\n \n   EXPath does not include the simpler get(), post(), put(), delete(),\n head(), options() and patch() functions defined by this module.\n EXPath uses XML to represent request for its send-request() function,\n whereas this module uses JSON.\n EXPath specifies that all XML content returned by an HTTP server\n will be parsed and returned as an XML document, whereas all HTML content\n will be tidied up into valid XML, and then parsed into an element.\n This module returns any textual content as string and any binary content\n as base6Binary.\n EXPath accepts XML nodes as body in the send-request() function and\n automatically serializes them into a string. The send-request() function\n defined in this module only allows string, base64Binary, and hexBinary\n as body types.\n \n \n \n \n See the full spec\n of the EXPath http-client module for more information.\n \n", 
    "functions" : {
      "send-request" : [ {
        "description" : " \n This function sends an HTTP request and returns the corresponding response.\n \n \n This function is declared as sequential and should be used whenever the\n request may have side-effects.\n \n \n The request parameters are specified in the $request JSON object, which\n has the following minimal structure:\n \n   {\n     \"href\": \"http://www.example.com\"\n   }\n \n \n This object specifies a GET request of the URI \"http://www.example.com\"\n Additional optional parameters can be specified when issuing a request,\n using the following structure:\n \n  {\n    \"method\": \"POST\",\n    \"href\": \"http://www.example.com\",\n    \"authentication\":\n    {\n      \"username\" : \"user\",\n      \"password\" : \"pass\",\n      \"auth-method\" : \"Basic\"\n    },\n    \"options\":\n    {\n      \"status-only\": true,\n      \"override-media-type\": \"text/plain\",\n      \"follow-redirect\": false,\n      \"timeout\": 30,\n      \"user-agent\": \"Mozilla/5.0\"\n    },\n    \"headers\":\n    {\n      \"name\": \"value\",\n      ...\n    },\n    \"body\":\n    {\n      \"media-type\": \"text/plain\",\n      \"content\": \"...\"\n    }\n  }\n\n \n The method field (string) defines the HTTP verb to use in the HTTP request (i.e., GET, HEAD, OPTIONS,\n POST, PUT, DELETE). If not specified GET will be used.\n The authentication field can be used to specify the credentials and authentication method\n used when issuing a request (e.g, Basic). If the authentication field is specified, all its (string)\n subfields must be specified. If an authentication object is provided, it overrides any\n Authorization header specified in the request.\n Additionally, the following options can be specified:\n \n    status-only. If true, the response body contents are omitted from the response object.\n    override-media-type. Is a MIME type that will override the Content-Type header returned\n        by the server. It affects the type of the result body content.\n    follow-redirect. Control whether an http redirect is automatically followed or not. If\n        it is false, the http redirect is returned as the response. If it is\n        true (the default) the function tries to follow the redirect, by\n        sending the same request to the new address (including body, headers,\n         and authentication credentials.) Maximum one redirect is followed\n        (there is no attempt to follow a redirect in response to following a\n          first redirect).\n    timeout. Is the maximum number of seconds to wait for the server to respond.\n         If no response is received withing this time duration, an error is thrown.\n    user-agent. The user agent sent to the server when issuing the request.\n        If not specified libcurl-agent/1.0 is used.\n \n \n One or more headers can be sent to the server, specifying them in an optional headers object.\n Each header is represented as a single (string) field. These headers are overridden if the corresponding\n option/authentication has been specified in the request.\n For non-multipart request a body object can be specified.\n This object must contain both the desired (string) media-type and its content.\n The type of the content field must be either string, base64Binary, or hexBinary. \n For multipart requests, multipart object can be specified in place of the body object.\n The multipart object has the following structure: \n \n  \"multipart\" : {\n    \"boundary\": \"--AaB03x\",\n    \"parts\": [\n      {\n        \"headers\" : {\n           \"Content Disposition: file\",\n           ...\n        },\n        \"body\": {\n          \"media-type\" : \"image/gif\",\n          \"content\" : \"...\"\n        }\n      },\n      {\n        \"body\" : {\n          \"media-type\" : \"text/html\",\n          \"content\" : \"...\"\n        }\n      }\n   ]\n }\n \n The multipart field contains an optional (string) field which specifies\n the boundary used to separate each part and an array containing all parts.\n Each part contains its specific headers, if any, and the corresponding body.\n \n", 
        "params" : [ "$request" ]
      } ], 
      "send-nondeterministic-request" : [ {
        "description" : " \n This function sends an HTTP request and returns the corresponding response.\n \n \n This function has the same semantics as send-request-1,\n but is declared as being non deterministic and thus should only be used when\n the request has no side-effects.\n \n", 
        "params" : [ "$request" ]
      } ], 
      "send-deterministic-request" : [ {
        "description" : " \n This function sends an HTTP request and returns the corresponding response.\n \n \n This function has the same semantics as send-request-1,\n but is declared as deterministic and thus should only be used when\n the request has no side-effects and behaves deterministic as required by the\n application.\n \n", 
        "params" : [ "$request" ]
      } ], 
      "get" : [ {
        "description" : " \n This function makes a GET request to a given URL.\n \n", 
        "params" : [ "$href" ]
      } ], 
      "get-text" : [ {
        "description" : " \n This function makes a GET request to a given URL. All returned bodies\n are forced to be interpreted as textual, with a UTF-8 charset and will\n be returned as string items.\n \n", 
        "params" : [ "$href" ]
      } ], 
      "get-binary" : [ {
        "description" : " \n This function makes a GET request on a given URL. All returned bodies\n are forced to be interpreted as binary data, and will be returned\n as base64Binary items.\n \n", 
        "params" : [ "$href" ]
      } ], 
      "head" : [ {
        "description" : " \n This function makes an HTTP HEAD request on a given URL.\n \n", 
        "params" : [ "$href" ]
      } ], 
      "options" : [ {
        "description" : " \n This function makes an HTTP OPTIONS request, which asks the server\n which operations it supports.\n \n", 
        "params" : [ "$href" ]
      } ], 
      "put" : [ {
        "description" : " \n This function makes an HTTP PUT request to a given URL.\n \n \n The body passed to this function must be either a string, a base64Binary or\n an hexBinary.\n If it is a string, the Content-Type sent to the server will be \"text/plain\",\n \"application/octet-stream\" otherwise.\n \n", 
        "params" : [ "$href", "$body" ]
      }, {
        "description" : " \n This function makes an HTTP PUT request to a given URL.\n \n \n The body passed to this function must be either a string, a base64Binary, or\n an hexBinary.\n In any case, Content-Type of the request sent to the server will\n be $content-type.\n \n", 
        "params" : [ "$href", "$body", "$content-type" ]
      } ], 
      "delete" : [ {
        "description" : " \n This function makes an HTTP DELETE request to a given URL.\n \n", 
        "params" : [ "$href" ]
      } ], 
      "post" : [ {
        "description" : " \n This function makes an HTTP POST request to a given URL.\n \n \n The body passed to this function must be either a string, a base64Binary, or an\n hexBinary.\n If it is a string, the Content-Type sent to the server will be \"text/plain\",\n \"application/octet-stream\" otherwise.\n \n", 
        "params" : [ "$href", "$body" ]
      }, {
        "description" : " \n This function makes an HTTP POST request to a given URL.\n \n \n The body passed to this function must be either a string, a base64Binary,\n or an hexBinary.\n In any case, Content-Type of the request sent to the server will\n be $content-type.\n \n", 
        "params" : [ "$href", "$body", "$content-type" ]
      } ], 
      "patch" : [ {
        "description" : " \n This function makes an HTTP PATCH request to a given URL.\n \n \n The body passed to this function must be either a string, a base64Binary or\n an hexBinary.\n If it is a string, the Content-Type sent to the server will be \"text/plain\",\n \"application/octet-stream\" otherwise.\n \n", 
        "params" : [ "$href", "$body" ]
      }, {
        "description" : " \n This function makes an HTTP PATCH request to a given URL.\n \n \n The body passed to this function must be either a string, a base64Binary, or\n an hexBinary.\n In any case, Content-Type of the request sent to the server will\n be $content-type.\n \n", 
        "params" : [ "$href", "$body", "$content-type" ]
      } ], 
      "check-request" : [ {
        "description" : " Private function used internally by this module.\n This function checks if the request, href, and bodies parameters\n are consistent.\n", 
        "params" : [ "$request" ]
      } ], 
      "http-sequential-impl" : [ {
        "description" : "", 
        "params" : [ "$request" ]
      } ], 
      "http-nondeterministic-impl" : [ {
        "description" : "", 
        "params" : [ "$request" ]
      } ], 
      "http-deterministic-impl" : [ {
        "description" : "", 
        "params" : [ "$request" ]
      } ]
    }
  }, 
  "http://zorba.io/modules/image/animation" : {
    "description" : " This module provides functions to create animated GIF images.\n", 
    "functions" : {
      "create-animated-gif" : [ {
        "description" : " Creates an animated GIF image.\n The resulting animated GIF shows the passed images consecutively.\n It has the same width and height as the first passed image.\n", 
        "params" : [ "$images", "$delay", "$iterations" ]
      } ], 
      "create-morphed-gif" : [ {
        "description" : " Creates an animated GIF image with morph effect.\n The resulting animated GIF shows the passed images consecutively with morph effect between the changes.\n It has the same width and height as the first passed image.\n", 
        "params" : [ "$images", "$delay", "$iterations", "$nr-of-morph-images" ]
      } ]
    }
  }, 
  "http://zorba.io/modules/image/basic" : {
    "description" : " This module provides function to do the following basic image operations:\n \n   create empty images\n   compare images\n   compress image\n   convert an image one format to another\n   retrieve with, height, format, and exif information from an image\n \n \n The following image formats are supported:\n \n   GIF\n   JPEG\n   PNG\n   TIFF\n   BMP\n \n \n The errors raised by functions of this module have the namespace\n http://zorba.io/modules/image/error (associated with prefix ierr).\n", 
    "functions" : {
      "width" : [ {
        "description" : " Returns the width of the passed image.\n", 
        "params" : [ "$image" ]
      } ], 
      "height" : [ {
        "description" : " Returns the height of the passed image.\n", 
        "params" : [ "$image" ]
      } ], 
      "compress" : [ {
        "description" : " Compresses the passed image.\n Compressing means lowering the quality and reducing the size.\n", 
        "params" : [ "$image", "$quality" ]
      } ], 
      "convert" : [ {
        "description" : " Converts an image to another format.\n", 
        "params" : [ "$image", "$format" ]
      } ], 
      "convert-impl" : [ {
        "description" : "", 
        "params" : [ "$image", "$format" ]
      } ], 
      "format" : [ {
        "description" : " Returns the format of the passed image.\n", 
        "params" : [ "$image" ]
      } ], 
      "create" : [ {
        "description" : " Creates an empty image with background color white.\n", 
        "params" : [ "$width", "$height", "$format" ]
      } ], 
      "create-impl" : [ {
        "description" : "", 
        "params" : [ "$width", "$height", "$format" ]
      } ], 
      "exif" : [ {
        "description" : " Reads exif information from an image.\n This function works for JPEG and TIFF images only.\n It returns empty sequence if no exif information matching the passed tag is found.\n", 
        "params" : [ "$image", "$tag" ]
      } ], 
      "equals" : [ {
        "description" : " Compares two images.\n", 
        "params" : [ "$image1", "$image2" ]
      } ], 
      "convert-svg" : [ {
        "description" : " Converts an SVG image to a supported image format.\n", 
        "params" : [ "$svg", "$format" ]
      } ], 
      "convert-svg-string" : [ {
        "description" : " Converts an SVG image to a supported image format.\n", 
        "params" : [ "$svg", "$format" ]
      } ], 
      "convert-svg-impl" : [ {
        "description" : "", 
        "params" : [ "$svg", "$format" ]
      } ]
    }
  }, 
  "http://zorba.io/modules/image/manipulation" : {
    "description" : " This module provides functions to handle image manipulations like resizing, zooming,\n special effects etc.\n The errors raised by functions of this module have the namespace\n http://zorba.io/modules/image/error (associated with prefix ierr).\n", 
    "functions" : {
      "resize" : [ {
        "description" : " Get a copy of the passed image with changed width and height (without\n zooming the image's content).\n To change the size of the actual contents of an image, use the zoom function.\n \n More in detail: If the new dimensions are greater than the current dimensions\n the new image will have the passed image in the upper left corner and the rest\n will be filled with the current background color.\n If the passed dimensions are less than the current dimensions, the new image\n will contain the specified rectangle of the passed image beginning at the upper\n left corner.\n", 
        "params" : [ "$image", "$width", "$height" ]
      } ], 
      "zoom" : [ {
        "description" : " Zoom the passed image by the specified factor while keeping the ratio between\n width and height.\n \n A ratio of less than 1 will make the image smaller.\n A ratio of less or equal than 0 will not effect the image.\n Important note: this function does not change the size information stored in the\n image (e.g. basic:width will not show a different value).\n", 
        "params" : [ "$image", "$ratio" ]
      } ], 
      "zoom-by-width" : [ {
        "description" : " Zoom the passed image to a given new width while keeping the ratio between\n width and height.\n So, the height is scaled accordingly.\n Important note: this function does not change the size information stored\n in the image (e.g. basic:width will not show a different value).\n", 
        "params" : [ "$image", "$width" ]
      } ], 
      "zoom-by-height" : [ {
        "description" : " Zoom the passed image to a given new height while keeping the ratio between\n width and height.\n So, the width is scaled accordingly.\n Important note: this function does not change the size information stored\n in the image (e.g. basic:width will not show a different value).\n", 
        "params" : [ "$image", "$height" ]
      } ], 
      "sub-image" : [ {
        "description" : " Copy a part of the source image specified by a rectangle.\n If the passed parameters for the sub-image specify a rectangle that isn't\n entirely within the source image only the area that lies within the image\n boundaries will be returned.\n", 
        "params" : [ "$image", "$left-upper-x", "$left-upper-y", "$width", "$height" ]
      } ], 
      "overlay" : [ {
        "description" : " Overlay $image with $overlay-image at the specfied position.\n \n The $operator defines the details of the overlay and can have one of the\n following values:\n \n   OverCompositeOp: The result is the union of the two image shapes\n       with the overlay image obscuring image in the region of overlap.\n   InCompositeOp: The result is a simple overlay image cut by the shape\n       of image. None of the image data of image is included in the result.\n   OutCompositeOp: The resulting image is the overlay image with the shape\n       of image cut out.\n   AtopCompositeOp: The result is the same shape as image, with overlay\n       image obscuring image there the image shapes overlap. Note that this\n       differs from OverCompositeOp because the portion of composite image\n       outside of image's shape does not appear in the result.\n   XorCompositeOp: The result is the image data from both overlay image\n       and image that is outside the overlap region. The overlap region will\n       be blank.\n   PlusCompositeOp: The result is just the sum of the image data of both\n       images. Output values are cropped to 255 (no overflow). This operation\n       is independent of the matte channels.\n   MinusCompositeOp: The result of overlay image - image, with overflow\n       cropped to zero. The matte chanel is ignored (set to 255, full\n       coverage).\n   AddCompositeOp: The result of overlay image + image, with overflow\n       wrapping around (mod 256).\n   SubtractCompositeOp: The result of overlay image - image, with underflow\n       wrapping around (mod 256). The add and subtract operators can be used to\n       perform reverible transformations.\n   DifferenceCompositeOp: The result of abs(overlay image - image). This is\n       useful for comparing two very similar images.\n   BumpmapCompositeOp: The result image shaded by overlay image.\n \n", 
        "params" : [ "$image", "$overlay-image", "$overlay-upper-left-x", "$overlay-upper-left-y", "$operator" ]
      } ], 
      "overlay-impl" : [ {
        "description" : "", 
        "params" : [ "$image", "$overlay-image", "$overlay-upper-left-x", "$overlay-upper-left-y", "$operator" ]
      } ], 
      "chop" : [ {
        "description" : " Copy a part of a source image as new image.\n The copied part is all right of $upper-left-x and below $upper-left-y.\n", 
        "params" : [ "$image", "$upper-left-x", "$upper-left-y" ]
      } ], 
      "crop" : [ {
        "description" : " Copy a part of a source image as new image.\n The copied part is all left of $lower-right-x and above $lower-right-y.\n", 
        "params" : [ "$image", "$lower-right-x", "$lower-right-y" ]
      } ], 
      "rotate" : [ {
        "description" : " Get a new image as rotated copy of a passed source image (rotated by -360 to\n 360 degrees).\n The image is enlarged if this is required for containing the rotated image,\n but never shrunk even if the rotation would make a smaller image possible.\n", 
        "params" : [ "$image", "$angle" ]
      } ], 
      "erase" : [ {
        "description" : " Set all pixels of the image to the current backround color.\n In most cases, this will result in all pixels to be set to white.\n", 
        "params" : [ "$image" ]
      } ], 
      "flop" : [ {
        "description" : " Flop an image (horizontal rotation).\n", 
        "params" : [ "$image" ]
      } ], 
      "flip" : [ {
        "description" : " Flip an image (vertical rotation).\n", 
        "params" : [ "$image" ]
      } ], 
      "trim" : [ {
        "description" : " Trim edges of the image's background color from the image.\n", 
        "params" : [ "$image" ]
      } ], 
      "add-noise" : [ {
        "description" : " Add noise to an image.\n \n Allowed noise types are:\n \n  UniformNoise\n  GaussianNoise\n  MultiplicativeGaussianNoise\n  ImpulseNoise\n  LaplaceianNoise\n  PoissonNoise\n \n", 
        "params" : [ "$image", "$noise-type" ]
      } ], 
      "add-noise-impl" : [ {
        "description" : "", 
        "params" : [ "$image", "$noise-type" ]
      } ], 
      "blur" : [ {
        "description" : " Blur an image.\n", 
        "params" : [ "$image", "$radius", "$sigma" ]
      } ], 
      "despeckle" : [ {
        "description" : " Despeckle an image.\n", 
        "params" : [ "$image" ]
      } ], 
      "enhance" : [ {
        "description" : " Enhance an images (minimizes noise).\n", 
        "params" : [ "$image" ]
      } ], 
      "equalize" : [ {
        "description" : " Equalize an images (histogramm equalization).\n", 
        "params" : [ "$image" ]
      } ], 
      "edge" : [ {
        "description" : " Highlight edges in an image.\n", 
        "params" : [ "$image", "$radius" ]
      } ], 
      "charcoal" : [ {
        "description" : " Apply a charcoal effect to the image (looks like a charcoal sketch).\n", 
        "params" : [ "$image", "$radius", "$sigma" ]
      } ], 
      "emboss" : [ {
        "description" : " Emboss an images (highlights edges with 3D effect).\n", 
        "params" : [ "$image", "$radius", "$sigma" ]
      } ], 
      "solarize" : [ {
        "description" : " Apply a solarize effect to the image (similar to the effect seen when\n exposing a photographic film to light during the development process).\n", 
        "params" : [ "$image", "$factor" ]
      } ], 
      "stereo" : [ {
        "description" : " Make two passed images appear as stereo image when viewed with red-blue glasses.\n Both images should be same but from a slightly different angle for this to work.\n Both images should have the same size, if not, the size of the left image will\n be taken.\n", 
        "params" : [ "$left-image", "$right-image" ]
      } ], 
      "transparent" : [ {
        "description" : " Make all pixels of the specfied color transparent.\n \n This works correctly only with image types supporting transparency\n (e.g GIF or PNG).\n", 
        "params" : [ "$image", "$color" ]
      } ], 
      "transparent-impl" : [ {
        "description" : "", 
        "params" : [ "$image", "$color" ]
      } ], 
      "swirl" : [ {
        "description" : " Swirl an image (image pixels are rotated by degree).\n", 
        "params" : [ "$image", "$degree" ]
      } ], 
      "reduce-noise" : [ {
        "description" : " Reduce noise of an image using a noise peak elemination filter.\n", 
        "params" : [ "$image", "$order" ]
      } ], 
      "contrast" : [ {
        "description" : " Contrast an image (enhances image intensity differences) by a given value.\n", 
        "params" : [ "$image", "$sharpen" ]
      } ], 
      "gamma" : [ {
        "description" : " Gamma correct an image.\n Gamma values less than zero will erase the image.\n", 
        "params" : [ "$image", "$gamma-value" ]
      }, {
        "description" : " Gamma correct an image for every color channel seperately.\n Gamma values less than zero for any color will erase the corresponding color.\n", 
        "params" : [ "$image", "$gamma-red", "$gamma-green", "$gamma-blue" ]
      } ], 
      "implode" : [ {
        "description" : " Apply an implode effect to an image (a sort of special effect).\n", 
        "params" : [ "$image", "$factor" ]
      } ], 
      "oil-paint" : [ {
        "description" : " Apply an oil paint effect to an image (makes the image look as if it was\n an oil paint).\n", 
        "params" : [ "$image", "$radius" ]
      } ], 
      "watermark" : [ {
        "description" : " Add a $watermark image to $image.\n", 
        "params" : [ "$image", "$watermark" ]
      } ]
    }
  }, 
  "http://zorba.io/modules/image/paint" : {
    "description" : " This module provides a function to extend an image with additional shapes.\n \n Fully supported image formats are:\n \n   GIF\n   JPEG\n   PNG\n   TIFF\n   BMP\n \n The errors raised by functions of this module have the namespace\n http://zorba.io/modules/image/error (associated with prefix ierr).\n", 
    "functions" : {
      "paint" : [ {
        "description" : " Extends the passed image with a sequence of shapes.\n The shapes are passed as a sequence of elements.\n The possibilities for shape elements are:\n    \n       line:\n        \n          {\n            \"line\" :\n            {\n              \"start\" : [0, 0],\n              \"end\" : [80, 80]\n            }\n          }\n          \n      \n        polyline:\n         \n           {\n             \"polyLine\" :\n             {\n               \"points\" : [ [10, 10], [30, 10], [30, 30], [10, 30] ]\n             }\n           }\n         \n       \n        stroked polyline:\n         \n           {\n             \"strokedPolyLine\" :\n             {\n               \"points\" : [ [10, 10], [40, 80], [50, 30] ],\n               \"strokeLength\" : 10,\n               \"gapLength\" : 2\n             }\n           }\n         \n       \n        rectangle:\n         \n           {\n             \"rectangle\" :\n             {\n               \"upperLeft\" : [ 20, 20 ],\n               \"lowerRight\" : [ 50, 50 ]\n             }\n           }\n         \n       \n        rounded rectangle:\n         \n           { \"roundedRectangle\" :\n             {\n               \"upperLeft\" : [ 20, 20 ],\n               \"lowerRight\" : [ 50, 50 ],\n               \"cornerWidth\" : 10,\n               \"cornerHeight\" : 10\n             }\n           }\n         \n       \n        circle:\n         \n           {\n             \"circle\" :\n             {\n               \"origin\" : [ 50, 50 ],\n               \"radius\" : 5\n             }\n           }\n         \n       \n        ellipse:\n         \n           {\n             \"ellipse\" :\n             {\n               \"origin\" : [ 50, 50 ],\n               \"radiusX\" : 30,\n               \"radiusY\" : 20\n             }\n           }\n         \n       \n        arc:\n         \n           {\n             \"arc\" :\n             {\n               \"origin\" : [ 50, 50 ],\n               \"radiusX\" : 10,\n               \"radiusY\" : 20,\n               \"startDegrees\" : 180,\n               \"endDegrees\" : 270\n             }\n           }\n         \n       \n        polygon:\n         \n           {\n             \"polygon\" :\n             {\n               \"points\" : [ [10, 10], [30, 10], [30, 30] ]\n             }\n           }\n         \n       \n        text:\n         \n           {\n             \"text\" :\n             {\n               \"origin\" : [ 50, 50 ],\n               \"text\" : \"Hello World!\",\n               \"font\" : \"Arial\",\n               \"font-size\" : 12\n             }\n           }\n         \n       \n     \n \n Optionally, each of the shape elements can contain elements to define the stroke with, stroke color, fill color, and anti-aliasing.\n E.g.:\n \n   \n     {\n       \"polygon\" :\n       {\n         \"strokeWidth\" : 3,\n         \"strokeColor\" : \"#FF0000\",\n         \"fillColor\" : \"#00FF00\",\n         \"antiAliasing\" : fn:true(),\n         \"points\" : [ [ 10, 10 ], [ 40, 80 ], [ 50, 30 ] ]\n       }\n     }\n   \n  \n", 
        "params" : [ "$image", "$shapes" ]
      } ], 
      "paint-impl" : [ {
        "description" : "", 
        "params" : [ "$image", "$shapes" ]
      } ]
    }
  }, 
  "http://zorba.io/modules/info-extraction" : {
    "description" : " This library module provides data extraction functions that return a list\n of entities, relations, categories and concepts present in a given text.\n", 
    "functions" : {
      "entities" : [ {
        "description" : " Uses Yahoo's Content Analysis webservice to return a list of entities\n encountered in the text supplied as input.\n See http://developer.yahoo.com/search/content/V2/contentAnalysis.html for more information.\n", 
        "params" : [ "$text" ]
      } ], 
      "categories" : [ {
        "description" : " Uses Yahoo's Content Analysis webservice to return a list of categories (topics) related\n to the text supplied as input.\n See http://developer.yahoo.com/search/content/V2/contentAnalysis.html for more information.\n", 
        "params" : [ "$text" ]
      } ], 
      "relations" : [ {
        "description" : " Uses Yahoo's Content Analysis webservice to return a list of relations (entities found and related wikipedia links)\n encountered in the text supplied as input.\n See http://developer.yahoo.com/search/content/V2/contentAnalysis.html for more information.\n", 
        "params" : [ "$text" ]
      } ], 
      "concepts" : [ {
        "description" : " Uses Yahoo's Content Analysis webservice to return a list of concepts (entity found and the corresponding wikipedia link)\n encountered in the text supplied as input.\n See http://developer.yahoo.com/search/content/V2/contentAnalysis.html for more information.\n", 
        "params" : [ "$text" ]
      } ], 
      "entities-inline" : [ {
        "description" : " Uses Yahoo's Content Analysis webservice to return the text supplied as input\n together with entities recognized annotated as xml elements in the text.\n", 
        "params" : [ "$text" ]
      } ], 
      "concepts-inline" : [ {
        "description" : " Uses Yahoo's Content Analysis webservice to return the text supplied as input\n together with concepts (entities with corresponding wikipedia link) annotated\n as xml elements in the text.\n", 
        "params" : [ "$text" ]
      } ], 
      "entity-inline-annotation" : [ {
        "description" : " Creates entities inline annotations in a given string\n", 
        "params" : [ "$text", "$entities", "$size" ]
      } ], 
      "concept-inline-annotation" : [ {
        "description" : " Creates concepts inline annotations in a given string\n", 
        "params" : [ "$text", "$concepts", "$size" ]
      } ], 
      "server-connection" : [ {
        "description" : " Establishes connection with the Yahoo Server\n", 
        "params" : [ "$text" ]
      } ]
    }
  }, 
  "http://zorba.io/modules/item" : {
    "description" : " This module provides utility functions on items. For example,\n it provides a function that allows estimating the size in bytes\n that a given item allocates in memory.\n", 
    "functions" : {
      "size" : [ {
        "description" : " Computes the size in bytes of the given item in main memory.\n", 
        "params" : [ "$item" ]
      } ]
    }
  }, 
  "http://www.zorba-xquery.com/modules/jdbc" : {
    "description" : " : This module contains functions to connect to any JDBC datasource  : using jvm-util module to handle Java interaction. : : @author Rodolfo Ochoa : @project DB Drivers/JDBC\n", 
    "functions" : {
      "connect" : [ {
        "description" : " : Opens a connection to a database. : Returns a URI identifying the connection that has been opened. The implementing code determines from the $connection-config either explicitly (interpreting the driver attribute) or implicitly (using the type attribute) which driver it has to load. : : @param $connection-config json object that has the host and user informations. : @option \"url\" URL of the server, this option must be specified and should be declared according to JDBC specification. : @option \"user\" username for the server, this is optional. : @option \"password\" password for the server, this is optional. : : @error SQL28000 Authentication failed. : @error SQL08001 Connection error. : @error SQL40003 Isolation level not supported. : @error SQL001 Descriptive error, see attached message. : : @return Return an identifier that represents the connection to the server. : : Connection coonfiguration example: : { \"url\" : \"jdbc:mysql://localhost/\",  :   \"user\" : \"root\", :   \"password\" : \"\" } :\n", 
        "params" : [ "$connection-config" ]
      }, {
        "description" : " : Opens a connection to a database with specified options. : Returns a URI identifying the connection that has been opened. The implementing code determines from the $connection-config either explicitly (interpreting the driver attribute) or implicitly (using the type attribute) which driver it has to load. : : @param $connection-config json object that has the host and user informations. : @option \"url\" URL of the server, this option must be specified and should be declared according to JDBC specification. : @option \"user\" username for the server, this option is optional. : @option \"password\" password for the server, this option is optional. : @param $options json object that specifies the connection options. : @option \"autocommit\" The created connection will have autocommit turned on if the value the attribute is set to \"true\". : @option \"readonly\" The created connection will be readonly if the value of the attribute is set to \"true\". : @option \"isolation-level\" The created connection will have the specified transaction isolation level,  : the following string typed in-scope variables represent the different transaction isolation levels  : that this attribute can be set to: : - $jsql:READ-COMMITTED : - $jsql:READ-UNCOMMITTED : - $jsql:REPEATABLE-READ : - $jsql:SERIALIZABLE : if no isolation level is provided by the user the connection will be created with the default  : isolation level of the database. : : : @error SQL28000 Authentication failed. : @error SQL08001 Connection error. : @error SQL40003 Isolation level not supported. : @error SQL001 Descriptive error, see error in attached message. : : @return Return an identifier that represents the connection to the server. : : Connection options example: : { \"autocommit\" : false,  :   \"readonly\"? : true, :   \"isolation-level\"? : $jdbc:READ-COMMITTED } :\n", 
        "params" : [ "$connection-config", "$options" ]
      } ], 
      "is-connected" : [ {
        "description" : " : Verify if a connection is still active. : : @param $connection-id The identifier to the connection to be verify. : : @error SQL08003 Connection doesn't exist : @error SQL001 Descriptive error, see error in attached message : : @return Returns true if connected.\n", 
        "params" : [ "$connection-id" ]
      } ], 
      "connection-options" : [ {
        "description" : " : Returns a set with options for a specified connection. : : @param $connection-id The identifier to the connection to be verify. : : @error SQL08003 Connection doesn't exist : @error SQL08000 Connection is closed : @error SQL001 Descriptive error, see error in attached message : : @return Returns and object with the connection options. : The returned options are equal to the options specified in function jdbc:connect.  : Consequently, the options are specified as follows: :    { \"autocommit\" : xs:boolean, :      \"readonly\" : xs:boolean, :      \"isolation-level\" : xs:string } :\n", 
        "params" : [ "$connection-id" ]
      } ], 
      "commit" : [ {
        "description" : " : Commit current transaction from an active connection. : : @param $connection-id The identifier to the connection to be commited. :  : @error SQL08003 Connection doesn't exist : @error SQL08000 Connection is closed : @error SQL001 Descriptive error, see error in attached message : : @return This function returns an empty-sequence()\n", 
        "params" : [ "$connection-id" ]
      } ], 
      "rollback" : [ {
        "description" : " : Rollback the current transaction of a connection. : : @param $connection-id The identifier to the connection to be rollbacked. : : @error SQL08003 Connection doesn't exist : @error SQL08000 Connection is closed : @error SQL001 Descriptive error, see error in attached message : : @return This function returns an empty-sequence()\n", 
        "params" : [ "$connection-id" ]
      } ], 
      "execute" : [ {
        "description" : " : Executes any kind of SQL statement.  : : @param $connection-id The identifier to an active connection. : @param $sql The query string to be executed. :  : @error SQL08003 Connection doesn't exist. : @error SQL08000 Connection is closed. : @error SQL001 Descriptive error, see error in attached message. : : @return Return an identifier that represents a DataSet.\n", 
        "params" : [ "$connection-id", "$sql" ]
      } ], 
      "execute-query" : [ {
        "description" : " : Executes non-updating SQL statements. : : @param $connection-id The identifier to an active connection. : @param $sql The query string to be executed. :  : @error SQL08003 Connection doesn't exist. : @error SQL08000 Connection is closed. : @error SQL005 The statement is Updating type. : @error SQL001 Descriptive error, see error in attached message. : : @return Return an object with the result data rows from the query provided, :  the data rows are defined as follows: :   { column:value* }* :  Every row is represented by an object of column-value representation of the returned SQL result. :\n", 
        "params" : [ "$connection-id", "$sql" ]
      } ], 
      "execute-update" : [ {
        "description" : " : Executes updating SQL statements. : : @param $connection-id The identifier to an active connection. : @param $sql The query string to be executed. :  : @error SQL08003 Connection doesn't exist. : @error SQL08000 Connection is closed. : @error SQL005 The statement is Read-only type. : @error SQL001 Descriptive error, see error in attached message. : : @return Returns an xs:integer with the number of affected rows.\n", 
        "params" : [ "$connection-id", "$sql" ]
      } ], 
      "prepare-statement" : [ {
        "description" : " :  Creates a prepared statement for multiple executions with diferent values. : : @param $connection-id The identifier to an active connection. : @param $sql The query string to be executed. :  : @error SQL08003 Connection doesn't exist. : @error SQL08000 Connection is closed. : @error SQL001 Descriptive error, see error in attached message. : : @return Return an identifier that represents the prepared statement. : : Example: : jsql:prepare-statement($connection, \"SELECT * FROM users WHERE id=? AND age&gt;?\")\n", 
        "params" : [ "$connection-id", "$sql" ]
      } ], 
      "set-numeric" : [ {
        "description" : " : Set the value of the designated parameter with the given value, this function will assign only numeric values. : : @param $prepared-statement The identifier to a prepared statement. : @param $parameter-index The index from the parameter to be set. : @param $value The value to be set. :  : @error SQL003 Prepared statement doesn't exist. : @error SQL007 Parameter casting error. : @error SQL08000 Connection is closed. : @error SQL001 Descriptive error, see error in attached message. : : @return This function returns an empty-sequence()\n", 
        "params" : [ "$prepared-statement", "$parameter-index", "$value" ]
      } ], 
      "set-string" : [ {
        "description" : " : Set the value of the designated parameter with the given value, this function will assign only string values. : : @param $prepared-statement The identifier to a prepared statement. : @param $parameter-index The index from the parameter to be set. : @param $value The value to be set. :  : @error SQL003 Prepared statement doesn't exist. : @error SQL007 Parameter casting error. : @error SQL08000 Connection is closed. : @error SQL001 Descriptive error, see error in attached message. : : @return This function returns an empty-sequence()\n", 
        "params" : [ "$prepared-statement", "$parameter-index", "$value" ]
      } ], 
      "set-boolean" : [ {
        "description" : " : Set the value of the designated parameter with the given value, this function will assign only boolean values. : : @param $prepared-statement The identifier to a prepared statement. : @param $parameter-index The index from the parameter to be set. : @param $value The value to be set. :  : @error SQL003 Prepared statement doesn't exist. : @error SQL007 Parameter casting error. : @error SQL08000 Connection is closed. : @error SQL001 Descriptive error, see error in attached message. : : @return This function returns an empty-sequence()\n", 
        "params" : [ "$prepared-statement", "$parameter-index", "$value" ]
      } ], 
      "set-null" : [ {
        "description" : " : Set the value of the designated parameter with the given value, this function will assign only null values if possible. : : @param $prepared-statement The identifier to a prepared statement. : @param $parameter-index The index from the parameter to be set. :  : @error SQL003 Prepared statement doesn't exist. : @error SQL007 Parameter casting error. : @error SQL08000 Connection is closed. : @error SQL001 Descriptive error, see error in attached message. : : @return This function returns an empty-sequence()\n", 
        "params" : [ "$prepared-statement", "$parameter-index" ]
      } ], 
      "set-value" : [ {
        "description" : " : Set the value of the designated parameter with the given value,  : this function will assign any value you send  : and it will try to cast to the correct type. : : @param $prepared-statement The identifier to a prepared statement. : @param $parameter-index The index from the parameter to be set. : @param $value The value to be set. :  : @error SQL003 Prepared statement doesn't exist. : @error SQL007 Parameter casting error. : @error SQL08000 Connection is closed. : @error SQL001 Descriptive error, see error in attached message. : : @return This function returns an empty-sequence()\n", 
        "params" : [ "$prepared-statement", "$parameter-index", "$value" ]
      } ], 
      "clear-params" : [ {
        "description" : " : Clears the current parameter values immediately. : : @param $prepared-statement The identifier to a prepared statement. :  : @error SQL003 Prepared statement doesn't exist. : @error SQL08000 Connection is closed. : @error SQL001 Descriptive error, see error in attached message. : : @return This function returns an empty-sequence()\n", 
        "params" : [ "$prepared-statement" ]
      } ], 
      "parameter-metadata" : [ {
        "description" : " : Retrieves the number, types and properties of the prepared statement parameters. : : @param $prepared-statement The identifier to a prepared statement. :  : @error SQL003 Prepared statement doesn't exist. : @error SQL08000 Connection is closed. : @error SQL001 Descriptive error, see error in attached message. : : @return This function returns the parameters metadata associated with a prepared statement.  : In other words, it returns information about the column name associated with the parameter, the type, etc. : The metadata node returned by this function is defined as follows: :   { :     columns: [{ :       \"name\": xs:string, :       \"type\": xs:string :       }] :   } : @option \"name\" The name of the column. : @option \"type\" The SQL type of the column.\n", 
        "params" : [ "$prepared-statement" ]
      } ], 
      "execute-prepared" : [ {
        "description" : " : Executes SQL statements prepared with 5.1 jsql:prepare-statement with values set : and returns an identifier to a Dataset. : : @param $prepared-statement The identifier to a prepared statement. :  : @error SQL003 Prepared statement doesn't exist. : @error SQL08000 Connection is closed. : @error SQL001 Descriptive error, see error in attached message. : : @return Return an identifier that represents a DataSet.\n", 
        "params" : [ "$prepared-statement" ]
      } ], 
      "execute-query-prepared" : [ {
        "description" : " : Executes a non-updating SQL statement prepared with 5.1 jsql:prepare-statement. : : @param $prepared-statement The identifier to a prepared statement. :  : @error SQL003 Prepared statement doesn't exist. : @error SQL005 The prepared statement is an updating query. : @error SQL08000 Connection is closed. : @error SQL001 Descriptive error, see error in attached message. : : @return Return an object with the result data rows from the query processed with the parameter values provided, :  the data rows are defined as follows: :   { column:value* }* :  Every row is represented by an object of column-value representation of the returned SQL result.\n", 
        "params" : [ "$prepared-statement" ]
      } ], 
      "execute-update-prepared" : [ {
        "description" : " : Executes an updating SQL statement prepared with 5.1 jsql:prepare-statement. : : @param $prepared-statement The identifier to a prepared statement. :  : @error SQL003 Prepared statement doesn't exist. : @error SQL006 The prepared statement is a non-updating query. : @error SQL08000 Connection is closed. : @error SQL001 Descriptive error, see error in attached message. : : @return Returns an xs:integer with the number of affected rows.\n", 
        "params" : [ "$prepared-statement" ]
      } ], 
      "close-prepared" : [ {
        "description" : " : Closes and frees from memory any prepared SQL statement created with jdbc:prepare-statement : : @param $prepared-statement The identifier to a prepared statement. :  : @error SQL003 Prepared statement doesn't exist. : @error SQL08000 Connection is closed. : @error SQL001 Descriptive error, see error in attached message. : : @return This function returns an empty-sequence()\n", 
        "params" : [ "$prepared-statement" ]
      } ], 
      "result-set" : [ {
        "description" : " : This function returns a sequence of objects representing the rows of data from a non-updating query. : : @param $dataset-id The identifier to a DataSet. :  : @error SQL008 DataSet doesn't exist. : @error SQL08000 Connection is closed. : @error SQL001 Descriptive error, see error in attached message. : : @return Return an object with the result data rows from the DataSet provided, :  the data rows are defined as follows: :   { column:value* }* :  Every row is represented by an object of column-value representation of the returned SQL result.\n", 
        "params" : [ "$dataset-id" ]
      } ], 
      "metadata" : [ {
        "description" : " : Return the metadata of the result of a particular DataSet. : : @param $dataset-id The identifier to a DataSet. :  : @error SQL008 DataSet doesn't exist. : @error SQL08000 Connection is closed. : @error SQL001 Descriptive error, see error in attached message. : : @return This function returns the metadata associated with an executed DataSet. More in detail, it returns information about column names, types, and whether a column can contain a null value. : The metadata information can only be returned for DataSets that have been executed explicitly using the jsql:execute function. :  : The metadata node returned by this function is defined as follows: : { :   \"columns\": [ { :       \"name\": xs:string, :       \"type\": xs:string, :       \"autoincrement\"? = xs:boolean, :       \"nillable\"? = xs:boolean } * ] : } : @option \"name\" The name of the column. : @option \"type\" The SQL type of the column. : @option \"autoincrement\" is true if this column is automatically maintained. : @option \"nillable\" If the colums can contain NULL values this attribute will be set to true. : : If the query is an updating query, then the result object will return the number of affected rows like: : { \"affectedrows\": xs:integer }\n", 
        "params" : [ "$dataset-id" ]
      } ], 
      "affected-rows" : [ {
        "description" : " : Return the number of affected rows of a particular DataSet. : : @param $dataset-id The identifier to a DataSet. :  : @error SQL008 DataSet doesn't exist. : @error SQL08000 Connection is closed. : @error SQL001 Descriptive error, see error in attached message. : : @return Returns an xs:integer with the number of affected rows.\n", 
        "params" : [ "$dataset-id" ]
      } ], 
      "close-dataset" : [ {
        "description" : " : Closes and free resources from a particular DataSet. : : @param $dataset-id The identifier to a DataSet. :  : @error SQL008 DataSet doesn't exist. : @error SQL08000 Connection is closed. : @error SQL001 Descriptive error, see error in attached message. : : @return This function returns an empty-sequence()\n", 
        "params" : [ "$dataset-id" ]
      } ], 
      "tables" : [ {
        "description" : " : Return the list of tables from a connection : : @param $connection-id The identifier to a connection. : @param $catalog A filter of the catalog name of the tables. :             Send empty-sequence for all tables. : @param $schema A filter of the schema name of the tables. :             Send empty-sequence for all tables. : @param $table A filter of the name of the tables. :             Send empty-sequence for all tables. :  : @error SQL08000 Connection is closed. : @error SQL001 Descriptive error, see error in attached message. : : @return Return an object with the result data rows from the query provided, :  the data rows are defined as follows: :   { column:value* }* :  Every row is represented by an object of column-value representation of the returned SQL result. :\n", 
        "params" : [ "$connection-id", "$catalog", "$schema", "$table" ]
      }, {
        "description" : " : : Return the list of tables from a connection : : @param $connection-id The identifier to a connection. : : @error SQL08000 Connection is closed. : @error SQL001 Descriptive error, see error in attached message. : : @return Return an object with the result data rows from the query provided, :  the data rows are defined as follows: :   { column:value* }* :  Every row is represented by an object of column-value representation of the returned SQL result.\n", 
        "params" : [ "$connection-id" ]
      } ]
    }
  }, 
  "http://zorba.io/modules/json-csv" : {
    "description" : " This module provides an API for parsing and serializing CSV (comma-separated\n values) files.\n See RFC 4180,\n \"Common Format and MIME Type for Comma-Separated Values (CSV) Files.\"\n", 
    "functions" : {
      "parse" : [ {
        "description" : " Parses a CSV (comma-separated values) string using the given options.\n A newline (U+000A), optionally preceeded by a carriage-return (U+000D),\n terminates lines, aka, \"records.\"\n \n Quoted values are always considered strings;\n unquoted values are attempted to be cast to other types, e.g., integer\n (unless the cast-unquoted-values option is false).\n Casting is attempted in the following order:\n integer, decimal, double, and boolean.\n If casting fails, the value is considered a string.\n Header field names are always considered strings even if unquoted.\n \n In addition to the \"normal\" values of\n true and false for boolean,\n T and Y are also considered \"true\"\n and F and N are also considered \"false.\"\n", 
        "params" : [ "$csv", "$options" ]
      }, {
        "description" : " Parses a CSV (comma-separated values) string using the default options.\n A newline (U+000A), optionally preceeded by a carriage-return (U+000D),\n terminates lines, aka, \"records.\"\n \n Quoted values are always considered strings;\n unquoted values are attempted to be cast to other types, e.g., integer\n (unless the cast-unquoted-values option is false).\n Casting is attempted in the following order:\n integer, decimal, double, and boolean.\n If casting fails, the value is considered a string.\n Header field names are always considered strings even if unquoted.\n \n In addition to the \"normal\" values of\n true and false for boolean,\n T and Y are also considered \"true\"\n and F and N are also considered \"false.\"\n \n The default options are:\n  \n    cast-unquoted-values\n      \n        Whether to attempt to cast unquoted values to\n        integer, decimal, double, or boolean;\n        default: true.\n      \n    extra-name\n      \n        The field name for extra values, if any;\n        default: none (error csv:EXTRA_VALUE is raised).\n      \n    field-names\n      \n        A JSON array of strings denoting field names;\n        default: none.\n        The first CSV line is assumed to be a header line\n        and the field names are taken from this line.\n      \n    missing-value\n      \n        What should happen when a missing value is detected;\n        default: \"null\".\n        A \"missing\" value is one of:\n        \n          Two consecutive quote-char characters.\n          A quote-char character as either the first\n              or last character on a line.\n          Fewer values than the number of field names.\n        \n        When a missing value is detected,\n        the value is set to null.\n      \n    quote-char\n      \n        The single ASCII character that may be used to quote values;\n        default: \" (U+0022).\n      \n    quote-escape\n      \n        The single ASCII character used to escape quote-char;\n        default: same as quote-char.\n        This means that an escaped quote is doubled as \"\".\n      \n    separator\n      \n        The single ASCII character used to separate values;\n        default: , (U+002C).\n      \n  \n", 
        "params" : [ "$csv" ]
      } ], 
      "serialize" : [ {
        "description" : " Serializes a sequence of JSON objects as CSV (comma-separated values) using\n the given options.\n", 
        "params" : [ "$obj", "$options" ]
      }, {
        "description" : " Serializes a sequence of JSON objects as CSV (comma-separated values) using\n the default options.\n The default options are:\n  \n    field-names\n      \n        A JSON array of strings denoting field names;\n        default: none.\n        The field names are taken from the first JSON object\n        and the order of the fields is implementation dependent.\n      \n    serialize-boolean-as\n      \n        What strings to serialize true and false as;\n        default: true and false.\n      \n    serialize-header\n      \n        Whether a header line is included;\n        default: true.\n        The first string result is the header line\n        comprised of all the objects' keys' names.\n      \n    serialize-null-as\n      \n        What string to serialize JSON null values as;\n        default: null.\n      \n    quote-char\n      \n        The single ASCII character that may be used to quote values;\n        default: \" (U+0022).\n      \n    quote-escape\n      \n        The single ASCII character used to escape quote-char;\n        default: same as quote-char.\n        This means that quote-char is doubled to escape it.\n      \n    separator\n      \n        The single ASCII character used to separate values;\n        default: , (U+002C).\n      \n  \n", 
        "params" : [ "$obj" ]
      } ]
    }
  }, 
  "http://zorba.io/modules/json-xml" : {
    "description" : " Using this module, you can parse JSON data into XML, manipulate it like any\n other XML data using XQuery, and serialize the result back as JSON.\n There are many ways to represent JSON data in XML, some loss-less (\"round\n tripable\") and some lossy (\"one way\").  Loss-less representations preserve\n the JSON data types boolean, number, and null; lossy\n representations convert all data to strings.\n \n For a loss-less representation, this module implements that proposed by\n John Snelson.\n For example:\n \n   {\n     \"firstName\" : \"John\",\n     \"lastName\" : \"Smith\",\n     \"address\" : {\n       \"streetAddress\" : \"21 2nd Street\",\n       \"city\" : \"New York\",\n       \"state\" : \"NY\",\n       \"postalCode\" : 10021\n     },\n     \"phoneNumbers\" : [ \"212 732-1234\", \"646 123-4567\" ]\n   }\n \n would be represented as:\n \n   &lt;json type=\"object\"&gt;\n     &lt;pair name=\"firstName\" type=\"string\"&gt;John&lt;/pair&gt;\n     &lt;pair name=\"lastName\" type=\"string\"&gt;Smith&lt;/pair&gt;\n     &lt;pair name=\"address\" type=\"object\"&gt;\n       &lt;pair name=\"streetAddress\" type=\"string\"&gt;21 2nd Street&lt;/pair&gt;\n       &lt;pair name=\"city\" type=\"string\"&gt;New York&lt;/pair&gt;\n       &lt;pair name=\"state\" type=\"string\"&gt;NY&lt;/pair&gt;\n       &lt;pair name=\"postalCode\" type=\"number\"&gt;10021&lt;/pair&gt;\n     &lt;/pair&gt;\n     &lt;pair name=\"phoneNumbers\" type=\"array\"&gt;\n       &lt;item type=\"string\"&gt;212 732-1234&lt;/item&gt;\n       &lt;item type=\"string\"&gt;646 123-4567&lt;/item&gt;\n     &lt;/pair&gt;\n   &lt;/json&gt;\n \n For a lossy representation, this module implements\n JsonML (the array form).\n For example:\n \n   [ \"person\",\n     { \"created\" : \"2006-11-11T19:23\",\n       \"modified\" : \"2006-12-31T23:59\" },\n     [ \"firstName\", \"Robert\" ],\n     [ \"lastName\", \"Smith\" ],\n     [ \"address\",\n       { \"type\" : \"home\" },\n       [ \"street\", \"12345 Sixth Ave\" ],\n       [ \"city\", \"Anytown\" ],\n       [ \"state\", \"CA\" ],\n       [ \"postalCode\", \"98765-4321\" ]\n     ]\n   ]\n \n would be represented as:\n \n   &lt;person created=\"2006-11-11T19:23\" modified=\"2006-12-31T23:59\"&gt;\n     &lt;firstName&gt;Robert&lt;/firstName&gt;\n     &lt;lastName&gt;Smith&lt;/lastName&gt;\n     &lt;address type=\"home\"&gt;\n       &lt;street&gt;12345 Sixth Ave&lt;/street&gt;\n       &lt;city&gt;Anytown&lt;/city&gt;\n       &lt;state&gt;CA&lt;/state&gt;\n       &lt;postalCode&gt;98765-4321&lt;/postalCode&gt;\n     &lt;/address&gt;\n   &lt;/person&gt;\n \n", 
    "functions" : {
      "json-to-xml" : [ {
        "description" : " Converts JSON data into an XDM instance using one of the representations\n described above.\n", 
        "params" : [ "$json", "$options" ]
      }, {
        "description" : " Converts JSON data into an XDM instance using the Snelson representation\n described above.\n", 
        "params" : [ "$json" ]
      } ], 
      "xml-to-json" : [ {
        "description" : " Converts XML data into a JSON item using one of the respresentations\n described above.\n", 
        "params" : [ "$xml", "$options" ]
      }, {
        "description" : " Converts XML data into a JSON item using the Snelson representation\n described above.\n", 
        "params" : [ "$xml" ]
      } ], 
      "json-to-xml-internal" : [ {
        "description" : "", 
        "params" : [ "$json", "$options" ]
      } ], 
      "xml-to-json-internal" : [ {
        "description" : "", 
        "params" : [ "$xml", "$options" ]
      } ]
    }
  }, 
  "http://zorba.io/modules/math" : {
    "description" : " Extensive math library.\n", 
    "functions" : {
      "cosh" : [ {
        "description" : " Returns the hyperbolic cosine of x.\n If the result it too large, INF is returned.\n", 
        "params" : [ "$arg" ]
      } ], 
      "acosh" : [ {
        "description" : " Inverse hyperbolic cosine.\n", 
        "params" : [ "$arg" ]
      } ], 
      "fmod" : [ {
        "description" : " Function performing the modulo operation between the two arguments.\n", 
        "params" : [ "$x", "$y" ]
      } ], 
      "frexp" : [ {
        "description" : " Returns the argument split as mantissa and exponent.\n The recombining formula is (mantissa * 2^exponent).\n", 
        "params" : [ "$arg" ]
      } ], 
      "ldexp" : [ {
        "description" : " Computes a real number from the mantissa and exponent.\n The formula is (x * 2^i).\n", 
        "params" : [ "$x", "$i" ]
      } ], 
      "modf" : [ {
        "description" : " Splits a floating-point value into fractional and integer parts.\n Both the fraction and integer keep the original sign of the value.\n", 
        "params" : [ "$arg" ]
      } ], 
      "sinh" : [ {
        "description" : " Calculate the hyperbolic sine.\n", 
        "params" : [ "$arg" ]
      } ], 
      "asinh" : [ {
        "description" : " Calculate the inverse hyperbolic sine.\n", 
        "params" : [ "$arg" ]
      } ], 
      "tanh" : [ {
        "description" : " Calculate the hyperbolic tangent.\n", 
        "params" : [ "$arg" ]
      } ], 
      "atanh" : [ {
        "description" : " Calculate the hyperbolic tangent.\n", 
        "params" : [ "$arg" ]
      } ], 
      "deg-to-rad" : [ {
        "description" : " Convert angle from degrees to radians. \n The parameter is first converted to value range of (-360, 360).\n", 
        "params" : [ "$deg" ]
      } ], 
      "rad-to-deg" : [ {
        "description" : " Convert angle from radians to degrees. \n", 
        "params" : [ "$rad" ]
      } ], 
      "is_inf" : [ {
        "description" : " Checks if the double value is positive or negative infinite.\n", 
        "params" : [ "$arg" ]
      } ], 
      "is_nan" : [ {
        "description" : " Checks if the double value is Not a Number (NaN).\n", 
        "params" : [ "$arg" ]
      } ], 
      "is-a-number" : [ {
        "description" : " Checks if the anyAtomicType argument is actually a numeric type\n or can be converted to numeric.\n Borrowed from excel module.\n", 
        "params" : [ "$value" ]
      } ], 
      "cast-as-numeric" : [ {
        "description" : " Cast the anyAtomicType to a numeric type.\n If the value is already of a numeric type then nothing is changed.\n Otherwise the value is casted to the numeric type that is most appropriate.\n \n Borrowed from excel module.\n", 
        "params" : [ "$number" ]
      } ], 
      "ceiling" : [ {
        "description" : " Returns number rounded up, away from zero, to the nearest multiple of significance.\n Significance must have the same sign as number.\n Number and significance must be of a numeric type or castable to numeric.\n Significance must not be zero.\n Borrowed from excel module.\n", 
        "params" : [ "$number", "$significance" ]
      } ], 
      "even" : [ {
        "description" : " Returns number rounded up to the nearest even integer.\n Regardless of the sign of number, a value is rounded up when adjusted away from zero.\n Borrowed from excel module.\n", 
        "params" : [ "$number" ]
      } ], 
      "fact-integer" : [ {
        "description" : " Function for computing factorial.\n This recursive function computes: number * fact(number-1)\n Borrowed from excel module.\n", 
        "params" : [ "$intnum" ]
      } ], 
      "fact" : [ {
        "description" : " Returns the factorial of a number.\n Borrowed from excel module.\n", 
        "params" : [ "$number" ]
      } ], 
      "floor" : [ {
        "description" : " Rounds number down, toward zero, to the nearest multiple of significance.\n Significance must have the same sign as number.\n Borrowed from excel module.\n", 
        "params" : [ "$number", "$significance" ]
      } ], 
      "int" : [ {
        "description" : " Rounds a number down to the nearest integer.\n Positive numbers are rounded toward zero, negative numbers are rounded away from zero.\n Borrowed from excel module.\n", 
        "params" : [ "$number" ]
      } ], 
      "mod" : [ {
        "description" : " Returns the remainder after number is divided by divisor.\n The result has the same sign as divisor.\n Borrowed from excel module.\n", 
        "params" : [ "$number", "$divisor" ]
      } ], 
      "odd" : [ {
        "description" : " Returns number rounded up to the nearest odd integer, away from zero.\n Borrowed from excel module.\n", 
        "params" : [ "$number" ]
      } ], 
      "product-internal" : [ {
        "description" : " Function for product.\n Multiplies all numbers in the sequence.\n Borrowed from excel module.\n", 
        "params" : [ "$numbers" ]
      } ], 
      "product" : [ {
        "description" : " Multiplies all the numbers given as arguments and returns the product.\n Borrowed from excel module.\n", 
        "params" : [ "$numbers" ]
      } ], 
      "quotient" : [ {
        "description" : " Returns the integer portion of a division.\n Borrowed from excel module.\n", 
        "params" : [ "$numerator", "$denominator" ]
      } ], 
      "round" : [ {
        "description" : " Rounds a number to a specified number of digits.\n If precision is greater than 0 (zero), then number is rounded\n to the specified number of decimal places.\n If num_digits is 0, then number is rounded to the nearest integer.\n If num_digits is less than 0, then number is rounded to the left of the decimal point.\n The 0.5 is rounded away from zero. \n Borrowed from excel module.\n", 
        "params" : [ "$number", "$precision" ]
      } ], 
      "rounddown" : [ {
        "description" : " Rounds a number down, toward zero.\n If num_digits is greater than 0 (zero), then number is rounded down\n to the specified number of decimal places.\n If num_digits is 0, then number is rounded down to the nearest integer.\n If num_digits is less than 0, then number is rounded down to the left of the decimal point. \n Borrowed from excel module.\n", 
        "params" : [ "$number", "$precision" ]
      } ], 
      "roundup" : [ {
        "description" : " Rounds a number up, away from 0 (zero).\n If num_digits is greater than 0 (zero), then number is rounded down\n to the specified number of decimal places.\n If num_digits is 0, then number is rounded down to the nearest integer.\n If num_digits is less than 0, then number is rounded down to the left of the decimal point. \n Borrowed from excel module.\n", 
        "params" : [ "$number", "$precision" ]
      } ], 
      "sign" : [ {
        "description" : " Determines the sign of a number. \n Returns 1 if the number is positive, zero (0) if the number is 0,\n and -1 if the number is negative.\n Borrowed from excel module.\n", 
        "params" : [ "$number" ]
      } ], 
      "trunc" : [ {
        "description" : " Truncates a number to an integer by removing the fractional part of the number.\n Borrowed from excel module.\n", 
        "params" : [ "$number" ]
      }, {
        "description" : " Truncates a number down to precision.\n This behaves exactly like rounddown.\n Borrowed from excel module.\n", 
        "params" : [ "$number", "$precision" ]
      } ], 
      "sort-numbers" : [ {
        "description" : " Sorts a sequence of numbers or arguments castable to numeric.\n It first casts all arguments to numeric and then sorts ascending.\n Helper function.\n Borrowed from excel module.\n", 
        "params" : [ "$numbers" ]
      } ], 
      "factdouble" : [ {
        "description" : " Returns the double factorial of a number.\n Computes the double factorial of n as n(n-2)(n-4)...\n Borrowed from excel module.\n", 
        "params" : [ "$number" ]
      } ], 
      "min-without-zero" : [ {
        "description" : " Function for computing GCD.\n It calculates the minimum value from a sequence of positive integers,\n not taking into account the zero value.\n Borrowed from excel module.\n", 
        "params" : [ "$numbers" ]
      } ], 
      "try-exact-divide" : [ {
        "description" : " Function for computing GCD.\n Checks if all integer numbers from a sequence divide exactly to a divider.\n Borrowed from excel module.\n", 
        "params" : [ "$numbers", "$divider" ]
      } ], 
      "iterate-all-gcd" : [ {
        "description" : " Function for computing GCD.\n This function iterates through possible divisors and checks if the sequence\n divides exactly to any of those. It starts from the minimum value from the\n sequence and searches downwards.\n Borrowed from excel module.\n", 
        "params" : [ "$numbers", "$min-nonzero", "$iteration" ]
      } ], 
      "gcd" : [ {
        "description" : " Returns the greatest common divisor GCD of a sequence of integers.\n The sequence can have one or more positive integers.\n Borrowed from excel module.\n", 
        "params" : [ "$numbers" ]
      } ], 
      "lcm" : [ {
        "description" : " Returns the least common multiple of integers.\n LCM for two numbers is computed by multiplying them and dividing with GCD.\n The function is applied recursively replacing the first two numbers in the sequence with their LCM.\n Borrowed from excel module.\n", 
        "params" : [ "$numbers" ]
      } ], 
      "mround" : [ {
        "description" : " Returns a number rounded to the desired multiple.\n MROUND rounds up, away from zero, if the remainder of dividing number by multiple\n is greater than or equal to half the value of multiple.\n MROUND is computed through math:floor function.\n Borrowed from excel module.\n", 
        "params" : [ "$number", "$multiple" ]
      } ], 
      "roman" : [ {
        "description" : " Converts an Arabic numeral to roman, as text.\n Only the classic format is supported (out of all formats Excel requires).\n M is the largest digit, it represents 1000.\n Numbers bigger than 2000 will be represented by a sequence of \"M\".\n D = 500, C = 100, L = 50, X = 10, V = 5, I = 1.\n Borrowed from excel module.\n", 
        "params" : [ "$number" ]
      } ], 
      "sumproduct" : [ {
        "description" : " Multiplies the elements on the same position in each sequence\n and sums up the results.\n Borrowed from excel module.\n", 
        "params" : [ "$array1", "$array2" ]
      } ], 
      "sumsq" : [ {
        "description" : " Returns the sum of the squares of the arguments.\n It uses the sumproduct function.\n Borrowed from excel module.\n", 
        "params" : [ "$numbers" ]
      } ], 
      "median" : [ {
        "description" : " Returns the median of the given numbers. \n The median is the number in the middle of a set of numbers.\n Half the numbers have values that are greater than the median,\n and half the numbers have values that are less than the median. \n Borrowed from excel module.\n", 
        "params" : [ "$numbers" ]
      } ], 
      "mode" : [ {
        "description" : " Returns the most frequently occurring, or repetitive, value in a sequence.\n Borrowed from excel module.\n", 
        "params" : [ "$numbers" ]
      } ], 
      "percentile" : [ {
        "description" : " Returns the k-th percentile of values in a sequence.\n If k is not a multiple of 1/(n - 1),\n   PERCENTILE interpolates to determine the value at the k-th percentile.\n The function is computed by (max-min)*k + min\n Borrowed from excel module.\n", 
        "params" : [ "$numbers", "$k_at" ]
      } ], 
      "sum-deviations" : [ {
        "description" : " Function for AVEDEV.\n Computes formula sum(abs(x - average)) for every x in $numbers\n Borrowed from excel module.\n", 
        "params" : [ "$numbers", "$average" ]
      } ], 
      "avedev" : [ {
        "description" : " Returns the average of the absolute deviations of data points from their mean.\n The formula is sum(abs(x - average_x))/n, where n is the count of x in the sequence.\n Borrowed from excel module.\n", 
        "params" : [ "$numbers" ]
      } ], 
      "large" : [ {
        "description" : " Returns the k-th largest value in a data set. \n If n is the number of data points in a range,\n   then LARGE(array,1) returns the largest value,\n   and LARGE(array,n) returns the smallest value.\n Borrowed from excel module.\n", 
        "params" : [ "$numbers", "$k" ]
      } ], 
      "rank" : [ {
        "description" : " Returns the rank of a number in a list of numbers. \n The rank of a number is its size relative to other values in a list.\n (If you were to sort the list, the rank of the number would be its position.)\n RANK gives duplicate numbers the same rank.\n Borrowed from excel module.\n", 
        "params" : [ "$x", "$numbers", "$order_ascending" ]
      }, {
        "description" : " This RANK function is same as the above, only that $order_ascending is set by default to false.\n Borrowed from excel module.\n", 
        "params" : [ "$x", "$numbers" ]
      } ], 
      "percentrank" : [ {
        "description" : " Returns the rank of a value in a data set as a percentage of the data set.\n If x does not match one of the values in array,\n   PERCENTRANK interpolates to return the correct percentage rank. \n The formula is uses: (RANK - 1) / (size - 1) .\n Borrowed from excel module.\n", 
        "params" : [ "$numbers", "$x" ]
      } ], 
      "quartile" : [ {
        "description" : " Returns the quartile of a data set. \n Borrowed from excel module.\n", 
        "params" : [ "$numbers", "$quart" ]
      } ], 
      "small" : [ {
        "description" : " This function computes the k-th smallest value in a data set. \n Use this function to return values with a particular relative standing in a data set.\n If n is the number of data points in array, SMALL(array,1) equals the smallest value,\n   and SMALL(array,n) equals the largest value.\n Borrowed from excel module.\n", 
        "params" : [ "$numbers", "$k" ]
      } ], 
      "sumsq-deviations" : [ {
        "description" : " Function for VAR, VARA, VARP, VARPA and SLOPE.\n It computes formula sum((x - average_x)^2) for all x in $numbers.\n Borrowed from excel module.\n", 
        "params" : [ "$numbers", "$average" ]
      } ], 
      "var" : [ {
        "description" : " Estimates variance based on a sample.\n The formula is sum(x - average_x)^2 / (n - 1).\n average_x is computed with AVERAGE function.\n n is the count of numbers from the sequence, excluding empty values.\n Borrowed from excel module.\n", 
        "params" : [ "$numbers" ]
      } ], 
      "vara" : [ {
        "description" : " Estimates variance based on a sample.\n The formula is sum(x - average_x)^2 / (n - 1).\n average_x is computed with AVERAGE function.\n n is the size of sequence, including empty values.\n Borrowed from excel module.\n", 
        "params" : [ "$numbers" ]
      } ], 
      "varp" : [ {
        "description" : " Calculates variance based on the entire population.\n The formula is sum(x - average_x)^2 / n.\n average_x is computed with AVERAGE function.\n n is the count of numbers from the sequence, excluding empty values.\n Borrowed from excel module.\n", 
        "params" : [ "$numbers" ]
      } ], 
      "varpa" : [ {
        "description" : " Calculates variance based on the entire population.\n The formula is sum(x - average_x)^2 / n.\n average_x is computed with AVERAGE function.\n n is the size of sequence, including empty values.\n Borrowed from excel module.\n", 
        "params" : [ "$numbers" ]
      } ], 
      "sum-prob" : [ {
        "description" : " Function for PROB function.\n Computes the sum over a sequence of numbers.\n Checks if the values are between 0 and 1.\n Borrowed from excel module.\n", 
        "params" : [ "$prob_range" ]
      } ], 
      "sum-prob-x" : [ {
        "description" : " Function for PROB function.\n Checks the prob range and x range if they have the same number of values.\n Adds all probabilities corresponding to values between range_lower_limit and upper_limit.\n Borrowed from excel module.\n", 
        "params" : [ "$x_range", "$prob_range", "$range_lower_limit", "$upper_limit" ]
      } ], 
      "prob" : [ {
        "description" : " Returns the probability that values in a range are between two limits.\n Borrowed from excel module.\n", 
        "params" : [ "$x_range", "$prob_range", "$range_lower_limit", "$upper_limit" ]
      }, {
        "description" : " This is the same as math:prob#4, only that upper_limit is not specified.\n The probability is computed only for range_lower_limit.\n Borrowed from excel module.\n", 
        "params" : [ "$x_range", "$prob_range", "$range_lower_limit" ]
      } ], 
      "sum-x-y-deviations" : [ {
        "description" : " Function for SLOPE function.\n It computes the formula:\n sum((x - average_x)(y - average_y))\n where average_x and average_y are computed with AVERAGE function.\n Borrowed from excel module.\n", 
        "params" : [ "$x_numbers", "$x_average", "$y_numbers", "$y_average" ]
      } ], 
      "slope" : [ {
        "description" : " Returns the slope of the linear regression line through data points in known_y's and known_x's.\n The slope is the vertical distance divided by the horizontal distance between\n   any two points on the line, which is the rate of change along the regression line.\n It computes the formula:\n sum((x - average_x)(y - average_y)) / sum((x - average_x)^2)\n where average_x and average_y are computed with AVERAGE function.\n Borrowed from excel module.\n", 
        "params" : [ "$known_y", "$known_x" ]
      } ], 
      "standardize" : [ {
        "description" : " Returns a normalized value from a distribution characterized by mean and standard_dev.\n The formula is (x - mean) / standard_dev .\n Borrowed from excel module.\n", 
        "params" : [ "$x", "$mean", "$standard_dev" ]
      } ], 
      "stdev" : [ {
        "description" : " Estimates standard deviation based on a sample. \n The standard deviation is a measure of how widely values are dispersed\n   from the average value (the mean).\n It is computed with formula:\n sqrt( sum((x-average_x)^2) / (n-1) )    = sqrt ( VAR(numbers) )\n Borrowed from excel module.\n", 
        "params" : [ "$numbers" ]
      } ], 
      "stdeva" : [ {
        "description" : " Estimates standard deviation based on a sample. \n The standard deviation is a measure of how widely values are dispersed\n   from the average value (the mean).\n It is computed with formula:\n sqrt( sum((x-average_x)^2) / (n-1) )    = sqrt ( VARA(numbers) )\n Borrowed from excel module.\n", 
        "params" : [ "$numbers" ]
      } ], 
      "stdevp" : [ {
        "description" : " Calculates standard deviation based on the entire population given as arguments. \n The standard deviation is a measure of how widely values are dispersed from\n   the average value (the mean).\n It is computed with formula:\n sqrt( sum((x-average_x)^2) / n )    = sqrt ( VARP(numbers) )\n Borrowed from excel module.\n", 
        "params" : [ "$numbers" ]
      } ], 
      "stdevpa" : [ {
        "description" : " Calculates standard deviation based on the entire population given as arguments. \n The standard deviation is a measure of how widely values are dispersed from\n   the average value (the mean).\n It is computed with formula:\n sqrt( sum((x-average_x)^2) / n )    = sqrt ( VARPA(numbers) )\n Borrowed from excel module.\n", 
        "params" : [ "$numbers" ]
      } ], 
      "subtotal" : [ {
        "description" : " Returns a subtotal in a sequence of numbers.\n The function applied is given by $function_num.\n Borrowed from excel module.\n", 
        "params" : [ "$function_num", "$numbers" ]
      } ]
    }
  }, 
  "http://zorba.io/modules/node-position" : {
    "description" : " This module provides a function (np:node-position) that, given a node,\n returns positional information about the node in the form of an xs:anyURI\n item. The module also defines functions that use such positional information\n to determine: (1) positional relationships between two nodes (e.g. if one\n is the ancestor of another) and (2) positional properties of a single node\n (e.g. its level in the tree).\n \n Within this module, the term \"node position\" will be used to refer to an\n xs:anyURI item that is returned by the np:node-position function.\n", 
    "functions" : {
      "node-position" : [ {
        "description" : " Return a URI item containing positional information for a given node.\n \n Within a snapshot, each has a different positional URI. However,\n different nodes in different snapshots might have the same URI.\n", 
        "params" : [ "$arg" ]
      } ], 
      "ancestor-of" : [ {
        "description" : " Determines whether the node position given as second argument is\n an ancestor of the node position given as first argument.\n \n If the two positions were obtained within the same snapshot S, then the\n result of the function applies to the corresponding nodes as well, that\n is, within snapshot S, the second node is an ancestor of the first.\n Otherwise, the result of the function does not imply anything about the\n positional relationship of the two nodes.\n", 
        "params" : [ "$pos1", "$pos2" ]
      } ], 
      "descendant-of" : [ {
        "description" : " Determines whether the node position given as second argument is\n a descendant of the node position given as first argument.\n \n If the two positions were obtained within the same snapshot S, then the\n result of the function applies to the corresponding nodes as well, that\n is, within snapshot S, the second node is a descendant of the first.\n Otherwise, the result of the function does not imply anything about the\n positional relationship of the two nodes.\n", 
        "params" : [ "$n-pos1", "$n-pos2" ]
      } ], 
      "in-subtree-of" : [ {
        "description" : " Determines whether the node position given as second argument belongs\n to the subtree rooted at the node position given as first argument.\n \n If the two positions were obtained within the same snapshot S, then the\n result of the function applies to the corresponding nodes as well, that\n is, within snapshot S, the second node belongs to the subtree rooted at the\n first. Otherwise, the result of the function does not imply anything about\n the positional relationship of the two nodes.\n \n This function differs from np:descendant-of in the way it treats attribute\n nodes. np:descendant-of follows the XQuery/XPath specification for the\n descendant axis, and as a result, it does not consider attributes as\n descendants of any nodes; it will always return false if $n-pos2 was\n obtained from an attribute node.In contrast, np:in-subtree-of will return\n true if $n-pos2 was obtained from an attribute node that appeared in the\n subtree of the node that $n-pos1 was obtained from.\n", 
        "params" : [ "$n-pos1", "$n-pos2" ]
      } ], 
      "parent-of" : [ {
        "description" : " Determines whether the node position given as second argument is\n the parent of the node position given as first argument.\n \n If the two positions were obtained within the same snapshot S, then the\n result of the function applies to the corresponding nodes as well, that\n is, within snapshot S, the second node is the parent of the first.\n Otherwise, the result of the function does not imply anything about the\n positional relationship of the two nodes.\n", 
        "params" : [ "$n-pos1", "$n-pos2" ]
      } ], 
      "child-of" : [ {
        "description" : " Determines whether the node position given as second argument is\n a child of the node position given as first argument.\n \n If the two positions were obtained within the same snapshot S, then the\n result of the function applies to the corresponding nodes as well, that\n is, within snapshot S, the second node is a child of the first.\n Otherwise, the result of the function does not imply anything about the\n positional relationship of the two nodes.\n", 
        "params" : [ "$n-pos1", "$n-pos2" ]
      } ], 
      "attribute-of" : [ {
        "description" : " Determines whether the node position given as second argument is\n an attribute of the node position given as first argument.\n \n If the two positions were obtained within the same snapshot S, then the\n result of the function applies to the corresponding nodes as well, that\n is, within snapshot S, the second node is an attribute of the first.\n Otherwise, the result of the function does not imply anything about the\n positional relationship of the two nodes.\n", 
        "params" : [ "$n-pos1", "$n-pos2" ]
      } ], 
      "following-sibling-of" : [ {
        "description" : " Determines whether the node position given as second argument is\n a following-sibling of the node position given as first argument.\n \n If the two positions were obtained within the same snapshot S, then the\n result of the function applies to the corresponding nodes as well, that\n is, within snapshot S, the second node is a following-sibling of the first.\n Otherwise, the result of the function does not imply anything about the\n positional relationship of the two nodes.\n", 
        "params" : [ "$n-pos1", "$n-pos2" ]
      } ], 
      "preceding-sibling-of" : [ {
        "description" : " Determines whether the node position given as second argument is\n a preceding-sibling of the node position given as first argument.\n \n If the two positions were obtained within the same snapshot S, then the\n result of the function applies to the corresponding nodes as well, that\n is, within snapshot S, the second node is a preceding-sibling of the first.\n Otherwise, the result of the function does not imply anything about the\n positional relationship of the two nodes.\n", 
        "params" : [ "$n-pos1", "$n-pos2" ]
      } ], 
      "sibling-of" : [ {
        "description" : " Determines whether two node positions are siblings.\n \n If the two positions were obtained within the same snapshot S, then the\n result of the function applies to the corresponding nodes as well, that\n is, within snapshot S, the second node is a sibling of the first.\n Otherwise, the result of the function does not imply anything about the\n positional relationship of the two nodes.\n", 
        "params" : [ "$n-pos1", "$n-pos2" ]
      } ], 
      "following-of" : [ {
        "description" : " Determines whether the node position given as second argument is\n following the node position given as first argument.\n \n If the two positions were obtained within the same snapshot S, then the\n result of the function applies to the corresponding nodes as well, that\n is, within snapshot S, the second node is following the first.\n Otherwise, the result of the function does not imply anything about the\n positional relationship of the two nodes.\n", 
        "params" : [ "$n-pos1", "$n-pos2" ]
      } ], 
      "following-in-document-order-of" : [ {
        "description" : " Determines whether the node position given as second argument is\n following in document order the node position given as first argument.\n \n If the two positions were obtained within the same snapshot S, then the\n result of the function applies to the corresponding nodes as well, that\n is, within snapshot S, the second node is following in document order the\n first.\n Otherwise, the result of the function does not imply anything about\n the positional relationship of the two nodes.\n", 
        "params" : [ "$n-pos1", "$n-pos2" ]
      } ], 
      "preceding-of" : [ {
        "description" : " Determines whether the node position given as second argument is\n preceding the node position given as first argument.\n \n If the two positions were obtained within the same snapshot S, then the\n result of the function applies to the corresponding nodes as well, that\n is, within snapshot S, the second node is preceding the first.\n Otherwise, the result of the function does not imply anything about the\n positional relationship of the two nodes.\n", 
        "params" : [ "$n-pos1", "$n-pos2" ]
      } ], 
      "preceding-in-document-order-of" : [ {
        "description" : " Determines whether the node position given as second argument is\n preceding in document order the node position given as first argument.\n \n If the two positions were obtained within the same snapshot S, then the\n result of the function applies to the corresponding nodes as well, that\n is, within snapshot S, the second node is preceding in document order the\n first.\n Otherwise, the result of the function does not imply anything about\n the positional relationship of the two nodes.\n", 
        "params" : [ "$n-pos1", "$n-pos2" ]
      } ], 
      "level" : [ {
        "description" : " Computes the level of a node position in its tree.\n \n Note: The root node of a tree is at level one.\n \n The result of the function applies to the corresponding node as well,\n that is, within the snapshot in which the position was computed, the node\n level is the returned one.\n The result of the function does not imply anything about the\n node level in other snapshots.\n", 
        "params" : [ "$n-pos" ]
      } ], 
      "is-attribute" : [ {
        "description" : " Determines whether a node position corresponds to an attribute node.\n", 
        "params" : [ "$n-pos1" ]
      } ], 
      "is-comment" : [ {
        "description" : " Determines whether a node position corresponds to a comment node.\n", 
        "params" : [ "$n-pos1" ]
      } ], 
      "is-document" : [ {
        "description" : " Determines whether a node position corresponds to a document node.\n", 
        "params" : [ "$n-pos1" ]
      } ], 
      "is-element" : [ {
        "description" : " Determines whether a node position corresponds to an element node.\n", 
        "params" : [ "$n-pos1" ]
      } ], 
      "is-processing-instruction" : [ {
        "description" : " Determines whether a node position corresponds to an processing-instruction\n node.\n", 
        "params" : [ "$n-pos1" ]
      } ], 
      "is-text" : [ {
        "description" : " Determines whether a node position corresponds to a text node.\n", 
        "params" : [ "$n-pos1" ]
      } ], 
      "in-same-tree-of" : [ {
        "description" : " Determines whether two node positions belong to the same tree.\n \n If the two positions were obtained within the same snapshot S, then the\n result of the function applies to the corresponding nodes as well, that\n is, within snapshot S, the two nodes belong to the same tree.\n Otherwise, the result of the function does not imply anything about\n the positional relationship of the two nodes.\n", 
        "params" : [ "$n-pos1", "$n-pos2" ]
      } ], 
      "in-collection" : [ {
        "description" : " Determines whether a node position belongs to a collection.\n", 
        "params" : [ "$n-pos" ]
      } ], 
      "in-same-collection-of" : [ {
        "description" : " Determines whether two node positions belong to the same collection.\n \n If the two positions were obtained within the same snapshot S, then the\n result of the function applies to the corresponding nodes as well, that\n is, within snapshot S, the two nodes belong to the same collection.\n Otherwise, the result of the function does not imply anything about\n the positional relationship of the two nodes.\n", 
        "params" : [ "$n-pos1", "$n-pos2" ]
      } ]
    }
  }, 
  "http://zorba.io/modules/node" : {
    "description" : " This module defines a set of function which can be used\n to determine (1) the relationship between two nodes (e.g. if one\n is the ancestor if another) and (2) properties of given\n nodes (e.g. their level in the tree).\n The same functionality can be achieved with simple XPath expressions.\n However, please note that using the functions in this modules instead\n of path expressions guarantees better performance.\n", 
    "functions" : {
      "ancestor-of" : [ {
        "description" : " Determines whether the node given as second argument is an\n ancestor of the node given as first argument.\n", 
        "params" : [ "$node1", "$node2" ]
      } ], 
      "descendant-of" : [ {
        "description" : " Determines whether the node given as second argument is a\n descendant of the node given as first argument.\n", 
        "params" : [ "$node1", "$node2" ]
      } ], 
      "parent-of" : [ {
        "description" : " Determines whether the node given as second argument is a\n parent of the node given as first argument.\n", 
        "params" : [ "$node1", "$node2" ]
      } ], 
      "child-of" : [ {
        "description" : " Determines whether the node given as second argument is a\n child of the node given as first argument.\n", 
        "params" : [ "$node1", "$node2" ]
      } ], 
      "following-sibling-of" : [ {
        "description" : " Determines whether the node given as second argument is a\n following-sibling of the node given as first argument.\n", 
        "params" : [ "$node1", "$node2" ]
      } ], 
      "preceding-sibling-of" : [ {
        "description" : " Determines whether the node given as second argument is a\n preceding-sibling of the node given as first argument.\n", 
        "params" : [ "$node1", "$node2" ]
      } ], 
      "following-of" : [ {
        "description" : " Determines whether the node given as second argument is\n following the node given as first argument.\n", 
        "params" : [ "$node1", "$node2" ]
      } ], 
      "preceding-of" : [ {
        "description" : " Determines whether the node given as second argument is\n preceding the node given as first argument.\n", 
        "params" : [ "$node1", "$node2" ]
      } ], 
      "level" : [ {
        "description" : " Computes the level of a given node in the tree.\n Note: The first level has the number one.\n", 
        "params" : [ "$node" ]
      } ], 
      "least-common-ancestor" : [ {
        "description" : " Computes the least common ancestor of two given nodes in\n the tree.\n", 
        "params" : [ "$node1", "$node2" ]
      } ], 
      "copy" : [ {
        "description" : " Return a deep copy of every given node according to the properties\n specified in the static context of the invoking module.\n Please note that a copy of a node is parentless.\n", 
        "params" : [ "$input" ]
      } ]
    }
  }, 
  "http://zorba.io/modules/oracle-nosqldb" : {
    "description" : " This module provides minimal functionality to interact with an\n \n Oracle NoSQL Database.\n Oracle NoSQL Database is built upon the proven Oracle Berkeley DB Java Edition\n high-availability storage engine, which is in widespread use in enterprises across\n industries. In addition to that it adds a layer of services for use in distributed environments.\n The resulting solution provides distributed, highly available key/value storage that is well\n suited to large-volume, latency-sensitive applications.\n The kvclient library is used to implement these functions. Set the NOSQLDB_HOME\n environment variable when compilling this module.\n \n \n Note: Since this module has a Java library dependency a JVM required\n to be installed on the system. For Windows: jvm.dll is required on the system\n path ( usually located in \"C:\\Program Files\\Java\\jre6\\bin\\client\".\n", 
    "functions" : {
      "connect" : [ {
        "description" : " Connect to a NoSQL Database KVStore\n", 
        "params" : [ "$options" ]
      } ], 
      "connect-internal" : [ {
        "description" : "", 
        "params" : [ "$store-name", "$helper-host-ports" ]
      } ], 
      "get" : [ {
        "description" : " Get the value as string and version associated with the key.\n Ex:  { \"value\":\"value as string\", \"version\":\"xs:long\" }\n", 
        "params" : [ "$db", "$key" ]
      } ], 
      "put" : [ {
        "description" : " Put a key/value pair, inserting or overwriting as appropriate.\n", 
        "params" : [ "$db", "$key", "$value" ]
      } ], 
      "delete" : [ {
        "description" : " Delete the key/value pair associated with the key.\n", 
        "params" : [ "$db", "$key" ]
      } ], 
      "put-binary" : [ {
        "description" : " Put a key/value pair, inserting or overwriting as appropriate.\n", 
        "params" : [ "$db", "$key", "$value" ]
      } ], 
      "put-text" : [ {
        "description" : " Put a key/value pair, inserting or overwriting as appropriate.\n", 
        "params" : [ "$db", "$key", "$string-value" ]
      } ], 
      "get-binary" : [ {
        "description" : " Get the value as base64Binary and version associated with the key.\n Ex:  { \"value\":\"value as base64Binary\", \"version\":\"xs:long\" }\n", 
        "params" : [ "$db", "$key" ]
      } ], 
      "get-text" : [ {
        "description" : " Get the value as string and version associated with the key.\n Ex:  { \"value\":\"value as string\", \"version\":\"xs:long\" }\n", 
        "params" : [ "$db", "$key" ]
      } ], 
      "remove" : [ {
        "description" : " Removes the key/value pair associated with the key.\n", 
        "params" : [ "$db", "$key" ]
      } ], 
      "multi-get-binary" : [ {
        "description" : " Returns the descendant key/value pairs associated with the $parent-key.\n The $sub-range and $depth arguments can be used to further limit the\n key/value pairs that are retrieved. The key/value pairs are fetched within\n the scope of a single transaction that effectively provides serializable isolation.\n This API should be used with caution since it could result in an\n OutOfMemoryError, or excessive GC activity, if the results cannot all be held\n in memory at one time.\n This method only allows fetching key/value pairs that are descendants of a\n $parent-key that has a complete major path.\n Ex:  { \"value\":\"value as base64Binary\", \"version\":\"xs:long\" }\n", 
        "params" : [ "$db", "$parent-key", "$sub-range", "$depth", "$direction" ]
      } ], 
      "multi-get-text" : [ {
        "description" : " Returns the descendant key/value pairs associated with the $parent-key.\n The $sub-range and $depth arguments can be used to further limit the\n key/value pairs that are retrieved. The key/value pairs are fetched within\n the scope of a single transaction that effectively provides serializable isolation.\n This API should be used with caution since it could result in an\n OutOfMemoryError, or excessive GC activity, if the results cannot all be held\n in memory at one time.\n This method only allows fetching key/value pairs that are descendants of a\n $parent-key that has a complete major path.\n Ex:  { \"value\":\"value as base64Binary\", \"version\":\"xs:long\" }\n", 
        "params" : [ "$db", "$parent-key", "$sub-range", "$depth", "$direction" ]
      } ], 
      "multi-remove" : [ {
        "description" : " Removes the descendant Key/Value pairs associated with the $parent-key. The\n $sub-range and $depth arguments can be used to further limit the key/value\n pairs that are deleted.\n", 
        "params" : [ "$db", "$parent-key", "$sub-range", "$depth" ]
      } ]
    }
  }, 
  "http://zorba.io/modules/process" : {
    "description" : " \n This module provides functions to create a native process and return the result\n (i.e. exit code, result on standard out and error) of executing the given\n file or command.\n \n \n Example:\n \n   import module namespace p = \"http://zorba.io/modules/process\";\n   p:exec(\"ls\")\n \n \n \n Potential result:\n \n {\n   \"exit-code\": 0,\n   \"stdout\": \"myfile.txt\",\n   \"stderr\": \"\"\n }\n \n \n \n The exec-command set of functions allows execution of commands\n through the command line interpreter of the operating system, such as \"sh\"\n on Unix systems or \"cmd.exe\" on Windows.\n \n \n For POSIX compliant platforms the functions return 128 + termination signal\n code of the process as their exit-code.\n On Windows platforms, the exit-code is the return value of the process or the exit\n or terminate process specified value.\n \n", 
    "functions" : {
      "exec" : [ {
        "description" : " \n Executes the specified program in a separate process.\n \n \n This function does not allow arguments to be passed to\n the command. The $filename parameter can contain the full path to the\n executable. On Unix systems,  if the specified filename does not contain\n a slash \"/\", the function duplicates the actions of the shell in searching\n for an executable file. The file is sought in the colon-separated list of\n directory pathnames specified in the PATH environment variable. If this\n variable isn't defined, the path list defaults to the current directory\n followed by the list of directories returned by the operating system.\n \n", 
        "params" : [ "$filename" ]
      }, {
        "description" : " \n Executes the specified program in a separate process.\n \n \n The $filename parameter can contain the full path to the\n executable. On Unix systems,  if the specified filename does not contain\n a slash \"/\", the function duplicates the actions of the shell in searching\n for an executable file. The file is sought in the colon-separated list of\n directory pathnames specified in the PATH environment variable. If this\n variable isn't defined, the path list defaults to the current directory\n followed by the list of directories returned by the operating system.\n The $args parameters will be passed to the executable file as arguments.\n \n", 
        "params" : [ "$filename", "$args" ]
      }, {
        "description" : " \n Executes the specified program in a separate process.\n \n \n The $filename parameter can contain the full path to the\n executable. On Unix systems,  if the specified filename does not contain\n a slash \"/\", the function duplicates the actions of the shell in searching\n for an executable file. The file is sought in the colon-separated list of\n directory pathnames specified in the PATH environment variable. If this\n variable isn't defined, the path list defaults to the current directory\n followed by the list of directories returned by the operating system.\n \n \n The $env allows defining and passing environment variables to the target\n process. They should be in the form \"ENVVAR=value\" where \"ENVVAR\" is the\n name of the environment variable and \"value' is the string value to set it to.\n \n", 
        "params" : [ "$filename", "$args", "$env" ]
      } ], 
      "exec-command" : [ {
        "description" : " \n Executes the specified string command in a separate process.\n \n \n This function does not allow arguments to be passed to the command.\n \n", 
        "params" : [ "$cmd" ]
      }, {
        "description" : " \n Executes the specified string command in a separate process.\n \n \n Each of the strings in the sequence passed in as the second\n argument is passed as an argument to the executed command.\n \n", 
        "params" : [ "$cmd", "$args" ]
      } ]
    }
  }, 
  "http://zorba.io/modules/queue" : {
    "description" : " Implementation of queue for items, using dynamic collections.\n Entries in the queue must be structured items - that is, either JSON\n Objects or Arrays, or XML Nodes. \n", 
    "functions" : {
      "create" : [ {
        "description" : " Create a queue with the name given. If a queue with the given name already exists, an error is raised. \n", 
        "params" : [ "$name" ]
      } ], 
      "front" : [ {
        "description" : " Return the first item in the queue (the first added), without removing it. \n", 
        "params" : [ "$name" ]
      } ], 
      "back" : [ {
        "description" : " Return the last item in the queue (the last added), without removing it. \n", 
        "params" : [ "$name" ]
      } ], 
      "pop" : [ {
        "description" : " Return the first item in the queue, and remove it. \n", 
        "params" : [ "$name" ]
      } ], 
      "push" : [ {
        "description" : " Add a new item to the queue; the queue will contain a copy of the given item. \n", 
        "params" : [ "$name", "$value" ]
      } ], 
      "empty" : [ {
        "description" : " Checks if a queue exists and is empty. \n", 
        "params" : [ "$name" ]
      } ], 
      "size" : [ {
        "description" : " Count of items in the queue. \n", 
        "params" : [ "$name" ]
      } ], 
      "copy" : [ {
        "description" : " Copy all items from source queue to a destination queue. \n If destination queue does not exist, it is created first. \n If destination queue is not empty, the items are appended last. \n", 
        "params" : [ "$destName", "$sourceName" ]
      } ]
    }
  }, 
  "http://zorba.io/modules/random" : {
    "description" : " This module provides several functions for generating (pseudo-)random\n numbers and strings.\n", 
    "functions" : {
      "seeded-random" : [ {
        "description" : " This function generates an arbitrary number of pseudo-random numbers.\n The sequence is repeatable by calling the function with the same\n seed.\n The function is based on posix function srand() and\n rand(). Specifically, it invokes srand($seed)\n and then returns the values returned by invoking rand()\n $num-times.\n Sequences returned by this function are not thread-safe (i.e.\n if multiple XQuery programs invoking this function are executed\n concurrently in several threads). This is because the function is\n based on srand() and rand().\n", 
        "params" : [ "$seed", "$num" ]
      } ], 
      "random" : [ {
        "description" : " This function generates an arbitrary number of random numbers.\n The function is nondeterministic because the sequence is\n not repeatable.\n However, the function is based on posix function srand() and\n rand(). Specifically, it invokes srand()\n with some random number based on the current time\n and then returns the values returned by invoking\n rand() $num-times.\n", 
        "params" : [ "$num" ]
      }, {
        "description" : " This function generates one random number.\n The function is nondeterministic.\n The function is based on r:random#1. Specifically, it\n returns the value of invoking r:random(1).\n", 
        "params" : [  ]
      } ], 
      "seeded-random-between" : [ {
        "description" : " This function generates an arbitrary number of pseudo-random numbers\n within a given range. The sequence is repeatable by calling the\n function with the same seed and boundaries.\n The function is based on the function r:seeded-random#2.\n Specifically, its result is repeatable if called with the\n same arguments.\n", 
        "params" : [ "$seed", "$lower", "$upper", "$num" ]
      } ], 
      "random-between" : [ {
        "description" : " This function generates an arbitrary number of random numbers\n within a given range. The function is nondeterministic because\n the sequence is not repeatable.\n", 
        "params" : [ "$lower", "$upper", "$num" ]
      }, {
        "description" : " This function generates one random number within a given range.\n The function is nondeterministic.\n The function is based on r:random-between#3.\n Specifically, it returns the value of invoking\n r:random-betwen($lower, $upper, 1).\n", 
        "params" : [ "$lower", "$upper" ]
      } ], 
      "uuid" : [ {
        "description" : " This function returns a uuid.\n  Note, that the function is not stable,\n that is, it returns a different UUID everytime the function is invoked.\n", 
        "params" : [  ]
      } ]
    }
  }, 
  "http://zorba.io/modules/reference" : {
    "description" : " The module provides functions to compute an immutable and opaque reference\n for nodes, objects, or arrays and to retrieve such items given their\n identifier, respectively.\n The identifiers are immutable, i.e. a identifier does not change\n during the items lifetime and cannot be reused for another item after the\n original item gets deleted.\n Identifiers are unique, in that, two different items will never have the same\n identifier. A item, at any time during its lifetime, can be retrieved by its\n identifier.\n", 
    "functions" : {
      "reference" : [ {
        "description" : " Returns an immutable and opaque reference (with type xs:anyURI) for\n a given node, object, or array.\n The generated identifier is immutable, i.e. a identifier does not\n change during the item's lifetime and cannot be reused for another node after\n the original item gets deleted.\n Identifiers are also unique, in that, two different items will never\n have the same identifier.\n A item, at any time during its lifetime, can be retrieved by its\n identifier, using the ref:dereference function.\n Please note that a reference can only be retrieved for a JSON object or JSON\n array if the item is a member of a collection.\n", 
        "params" : [ "$arg" ]
      } ], 
      "dereference" : [ {
        "description" : " Returns the node, object, or array identified by the given reference.\n The function returns the empty sequence if the item\n that is referenced does not exist.\n", 
        "params" : [ "$arg" ]
      } ]
    }
  }, 
  "http://zorba.io/modules/reflection" : {
    "description" : " This module provides functions to dynamically invoke functions or main modules,\n respectively. Each of the functions (invoke or eval) come in four variants depending\n whether the expression being invoked is simple, nondeterministic, updating,\n or sequential.\n", 
    "functions" : {
      "invoke" : [ {
        "description" : " The invoke function allows to dynamically call a function given its QName\n and parameters.\n It is possible to invoke a function whose name is not known\n at compilation time -- it can be computed, passed through an external\n variable, taken from a file, etc. The first parameter must always be a\n QName identifying a known function.\n The function is declared with the %an:variadic annotation. Hence, it allows\n for an arbitrary number of parameters. All of these parameters (except the\n first one) will be passed to the function that is called.\n \n Example usage :  reflection:invoke ( xs:QName(\"fn:max\"), (1,2,3) ) \n \n Returns  3 .\n", 
        "params" : [ "$name" ]
      } ], 
      "invoke-n" : [ {
        "description" : " See documentation for reflection:invoke except the function that\n is to be invoked may be nondeterministic.\n", 
        "params" : [ "$name" ]
      } ], 
      "invoke-u" : [ {
        "description" : " See documentation for reflection:invoke-n except the function that\n is to be invoked may be updating, i.e. return a pending update list.\n", 
        "params" : [ "$name" ]
      } ], 
      "invoke-s" : [ {
        "description" : " See documentation for reflection:invoke except the function that\n is to be invoked may be sequential, i.e. may have side-effects.\n", 
        "params" : [ "$name" ]
      } ], 
      "eval" : [ {
        "description" : " The purpose of this function is to (dynamically) execute an XQuery program\n from inside another XQuery program.\n The XQuery program that invokes the\n eval function will be referred to as the \"outer\" program and the XQuery\n program that is executed by the eval invocation will be referred to as\n the \"inner\" program. The function is given as a string argument.\n Typically, the outer program constructs this string dynamically,\n e.g., based on data extracted from documents and/or the values of\n external variables. The eval function treats this string as\n an XQuery main module. That is, it parses the string, compiles the\n resulting parse tree, executes the resulting execution plan, and finally\n returns the result or error (if any) to the outer program.\n The given XQuery program needs to be a valid according to XQuery's\n MainModule production (see \n http://www.w3.org/TR/xquery/#doc-xquery-MainModule. Please note\n that the inner pogram must at least have the XQuery version of the\n outer program [err:XQST0031].\n The inner program \"inherits\" the static and dynamic context of the outer\n program. Specifically, evaluation of the inner program is done in static and\n dynamic contextes that are initialized as copies of the static and dynamic\n contextes of the outer program at the place where the eval invocation appears\n at. This means that, for example, all variables that are in-scope at the place\n where the eval function is invoked from, are also in-scope inside the inner\n program and can be referenced there without having to be re-declared. On the other\n hand, declarations that appear in the prolog of the inner main module or are\n imported by the inner main module from library modules, hide their corresponding\n inherited declarations. For example, if the inner main module declares\n a variable or function with the same name as an inherited variable or function,\n the inner variable/function hides the inherited one.\n If the inner program declares an external variable with the same name as an\n inherited variable, the value of the inherited variable is used to initialize\n the inner external variable. If, however, an inner external variable has no\n default initializer and no corresponding inherited variable, it will remain\n uninitialized, causing the inner program to raise an error when executed.\n", 
        "params" : [ "$query" ]
      } ], 
      "eval-n" : [ {
        "description" : " See documentation of reflection:eval() except the main module that is to\n be executed may be nondeterministc.\n", 
        "params" : [ "$query" ]
      } ], 
      "eval-u" : [ {
        "description" : " See documentation of reflection:eval() except the main module that is to\n be executed may be updating, i.e. return a pending update list.\n", 
        "params" : [ "$query" ]
      } ], 
      "eval-s" : [ {
        "description" : " See documentation of reflection:eval() except the main module that is to\n be executed may be sequential, i.e. may have side-effects.\n", 
        "params" : [ "$query" ]
      } ]
    }
  }, 
  "http://zorba.io/modules/schema" : {
    "description" : " This module provides function that are related to XML Schema support\n in Zorba.\n", 
    "functions" : {
      "schema-type" : [ {
        "description" : " This function returns the name of the type of the item passed\n as parameter.\n", 
        "params" : [ "$item" ]
      } ], 
      "is-validated" : [ {
        "description" : " This function returns true if the given node has been validated,\n and false otherwise.\n", 
        "params" : [ "$node" ]
      } ], 
      "validate-in-place" : [ {
        "description" : " Updating function that validates the document in place. After the updating\n query is applied the $node will contain the validated content.\n", 
        "params" : [ "$node" ]
      } ]
    }
  }, 
  "http://zorba.io/modules/sctx" : {
    "description" : " This module provides functions that gets components of the static context.\n", 
    "functions" : {
      "base-uri" : [ {
        "description" : " Gets the base URI.\n", 
        "params" : [  ]
      } ], 
      "boundary-space-policy" : [ {
        "description" : " Gets the boundary whitespace policy used by direct element constructors.\n", 
        "params" : [  ]
      } ], 
      "construction-mode" : [ {
        "description" : " Gets the static context construction mode of element and document nodes.\n", 
        "params" : [  ]
      } ], 
      "copy-namespaces-mode" : [ {
        "description" : " Gets the static context components that control the the namespace bindings\n that are assigned when an existing element node is copied\n by an element constructor.\n", 
        "params" : [  ]
      } ], 
      "default-collation" : [ {
        "description" : " Gets one of statically known collations used by functions and operators\n for comparing and ordering values of type xs:string\n or xs:anyURI when no explicit collation is specified.\n", 
        "params" : [  ]
      } ], 
      "default-collection-type" : [ {
        "description" : " Gets the statically known default collection type.\n This is the type of the sequence of nodes that would result from calling the\n fn:collection function with no arguments.\n", 
        "params" : [  ]
      } ], 
      "default-function-namespace" : [ {
        "description" : " Gets the URI of the default function namespace.\n", 
        "params" : [  ]
      } ], 
      "default-order" : [ {
        "description" : " Gets the component that controls the processing of empty sequences and NaN\n values as ordering keys in an order by clause\n in a FLWOR expression.\n", 
        "params" : [  ]
      } ], 
      "function-annotations" : [ {
        "description" : " Gets the list of annotations declared for the given function.\n", 
        "params" : [ "$name", "$arity" ]
      } ], 
      "function-arguments-count" : [ {
        "description" : " Gets the number of arguments the given XQuery function takes.\n", 
        "params" : [ "$function" ]
      } ], 
      "function-names" : [ {
        "description" : " Gets a sequence containing the QNames of all defined functions\n that are available to be called from within an expression.\n", 
        "params" : [  ]
      } ], 
      "functions" : [ {
        "description" : " Gets a sequence of JSON objects containing the name, arity, and annotations\n of all defined functions that are available to be called form within an\n expression.\n", 
        "params" : [  ]
      } ], 
      "in-scope-attribute-declarations" : [ {
        "description" : " Gets a sequence of QNames identifying declared attributes\n in the imported schemas.\n", 
        "params" : [  ]
      } ], 
      "in-scope-attribute-groups" : [ {
        "description" : " Gets a sequence of QNames identifying declared in-scope\n schema attribute groups.\n", 
        "params" : [  ]
      } ], 
      "in-scope-element-declarations" : [ {
        "description" : " Gets a sequence of QNames identifying declared elements\n in the imported schemas.\n", 
        "params" : [  ]
      } ], 
      "in-scope-element-groups" : [ {
        "description" : " Gets a sequence of QNames identifying declared in-scope\n schema element groups.\n", 
        "params" : [  ]
      } ], 
      "in-scope-schema-types" : [ {
        "description" : " Gets a sequence of QNames identifying in-scope schema types\n including all the predefined schema types and all definitions\n found in imported schemas.\n", 
        "params" : [  ]
      } ], 
      "in-scope-variables" : [ {
        "description" : " Gets a sequence of QNames identifying declared variables\n from the static context.\n", 
        "params" : [  ]
      } ], 
      "option" : [ {
        "description" : " Gets the value of an option that is declared in the prolog of the module.\n", 
        "params" : [ "$name" ]
      } ], 
      "ordering-mode" : [ {
        "description" : " Gets the ordering mode that affects the ordering of the result sequences\n returned by certain expressions.\n", 
        "params" : [  ]
      } ], 
      "statically-known-collations" : [ {
        "description" : " Gets a sequence that contains the statically known collations.\n", 
        "params" : [  ]
      } ], 
      "statically-known-documents" : [ {
        "description" : " Gets a sequence that contains the URIs of all statically known documents.\n", 
        "params" : [  ]
      } ], 
      "statically-known-document-type" : [ {
        "description" : " For the given document, returns the static type of its root node.\n", 
        "params" : [ "$document" ]
      } ], 
      "statically-known-namespace-binding" : [ {
        "description" : " Gets the bound URI for the given prefix.\n", 
        "params" : [ "$prefix" ]
      } ], 
      "statically-known-namespaces" : [ {
        "description" : " Gets a list of known statically known namespaces as prefixes\n (fn, xml, xs, xsi, etc).\n", 
        "params" : [  ]
      } ], 
      "xpath10-compatibility-mode" : [ {
        "description" : " Gets true or false depending on whether rules for compatibility\n with XPath 1.0 are in effect.\n XQuery set the value of this component to false.\n", 
        "params" : [  ]
      } ]
    }
  }, 
  "http://zorba.io/modules/sequence" : {
    "description" : " This module provides an XQuery API to perform set operations on sequences.\n", 
    "functions" : {
      "value-intersect" : [ {
        "description" : " Performs a set intersection of two sequences of atomic items based on their\n values.\n", 
        "params" : [ "$seq1", "$seq2" ]
      } ], 
      "value-union" : [ {
        "description" : " Performs a set union of two sequences of atomic items based on their values.\n", 
        "params" : [ "$seq1", "$seq2" ]
      } ], 
      "value-except" : [ {
        "description" : " Filters the first sequence of atomic items such that they are not in the\n second sequence based on their values.\n", 
        "params" : [ "$seq1", "$seq2" ]
      } ]
    }
  }, 
  "http://zorba.io/modules/sqlite" : {
    "description" : " This module provides functionality to extract, add and modify data\n from SQLite databases.\n", 
    "functions" : {
      "connect" : [ {
        "description" : " Connect to a SQLite database.\n", 
        "params" : [ "$db-name" ]
      }, {
        "description" : " Connect to a SQLite database with optional options.\n All options are true/false values. Available options are: open-read-only,\n open-create, open-no-mutex, and open-shared-cache.\n The options are of the form:\n \n {\n   \"open_read_only\" : true,\n   \"open_create     : false,\n   ...\n }\n \n \n", 
        "params" : [ "$db-name", "$options" ]
      } ], 
      "is-connected" : [ {
        "description" : " Returns whether on not the passed SQLite database object is connected.\n", 
        "params" : [ "$conn" ]
      } ], 
      "commit" : [ {
        "description" : " Commits all pending update operations in this SQLite database.\n", 
        "params" : [ "$conn" ]
      } ], 
      "rollback" : [ {
        "description" : " Rollbacks all pending update operations in this SQLite database.\n", 
        "params" : [ "$conn" ]
      } ], 
      "execute-query" : [ {
        "description" : " Executes a query (select command) over an already opened SQLite database\n object.\n", 
        "params" : [ "$conn", "$sqlstr" ]
      } ], 
      "execute-update" : [ {
        "description" : " Executes an update command over an already opened SQLite database object.\n", 
        "params" : [ "$conn", "$sqlstr" ]
      } ], 
      "metadata" : [ {
        "description" : " Returns the metadata associated to a given prepared SQLite statement.\n SQLite metadata is returned in the following form:\n \n {\n   \"columns\" :\n       [{\n           \"name\"          : &lt;column name&gt;,\n           \"table\"         : &lt;table name&gt;,\n           \"database\"      : &lt;database name&gt;,\n           \"type\"          : &lt;type name&gt;,\n           \"collation\"     : [BINARY|NOCASE|RTRIM],\n           \"nullable\"      : [true|false],\n           \"primary key\"   : [true|false],\n           \"autoincrement\" : [true|false]\n       }*]\n }\n \n", 
        "params" : [ "$pstmnt" ]
      } ], 
      "prepare-statement" : [ {
        "description" : " Compiles a prepared statement based on an already connected SQLite database\n and a string that defines the sql command.\n You can use '?' in the sql command as placeholders so you will\n be able to bind variables later to such places.\n", 
        "params" : [ "$conn", "$stmnt" ]
      } ], 
      "set-value" : [ {
        "description" : " Binds a value to a placeholder inside a prepared statement using the\n same type as the item given.\n", 
        "params" : [ "$pstmnt", "$param-num", "$val" ]
      } ], 
      "set-boolean" : [ {
        "description" : " Binds a boolean to a placeholder inside a prepared statement.\n", 
        "params" : [ "$pstmnt", "$param-num", "$val" ]
      } ], 
      "set-numeric" : [ {
        "description" : " Binds a double variable to a placeholder inside a prepared statement.\n", 
        "params" : [ "$pstmnt", "$param-num", "$val" ]
      } ], 
      "set-string" : [ {
        "description" : " Binds a string variable to a placeholder inside a prepared statement.\n", 
        "params" : [ "$pstmnt", "$param-num", "$val" ]
      } ], 
      "set-null" : [ {
        "description" : " Set a null to a placeholder inside a prepared statement.\n", 
        "params" : [ "$pstmnt", "$param-num" ]
      } ], 
      "clear-params" : [ {
        "description" : " Set all parameters to null inside a prepared statement.\n", 
        "params" : [ "$pstmnt" ]
      } ], 
      "close-prepared" : [ {
        "description" : " Close and free resources associated to a prepared statement.\n", 
        "params" : [ "$pstmnt" ]
      } ], 
      "execute-query-prepared" : [ {
        "description" : " Execute a query (select command) over an already connected SQLite\n database object.\n", 
        "params" : [ "$pstmnt" ]
      } ], 
      "execute-update-prepared" : [ {
        "description" : " Execute a update command over an already connected SQLite\n database object.\n", 
        "params" : [ "$pstmnt" ]
      } ]
    }
  }, 
  "http://zorba.io/modules/stack" : {
    "description" : " Implementation of stack for items, using dynamic collections.\n Entries in the stack must be structured items - that is, either JSON\n Objects or Arrays, or XML Nodes. \n", 
    "functions" : {
      "create" : [ {
        "description" : " Create a stack with this name. If stack exists, an error is raised. \n", 
        "params" : [ "$name" ]
      } ], 
      "top" : [ {
        "description" : " Return the top item in the stack, without removing it. \n", 
        "params" : [ "$name" ]
      } ], 
      "pop" : [ {
        "description" : " Return the top item in the stack, and remove it. \n", 
        "params" : [ "$name" ]
      } ], 
      "push" : [ {
        "description" : " Add a new item to the stack; the stack will contain a copy of the given item. \n", 
        "params" : [ "$name", "$value" ]
      } ], 
      "empty" : [ {
        "description" : " Checks if a stack exists and is empty. \n", 
        "params" : [ "$name" ]
      } ], 
      "size" : [ {
        "description" : " Count of items in the stack. \n", 
        "params" : [ "$name" ]
      } ], 
      "copy" : [ {
        "description" : " Copy all items from source stack to a destination stack. \n If destination stack does not exist, it is created first. \n If destination stack is not empty, the items are appended on top. \n", 
        "params" : [ "$destName", "$sourceName" ]
      } ]
    }
  }, 
  "http://zorba.io/modules/store/documents" : {
    "description" : " This module defines a set of functions which manage documents that\n are persisted in the store. Specifically, it contains functions\n to put, remove, list, or retrieve documents.\n \n Please refer to\n our documentation\n for more information about the lifecycle management and manipulation of\n documents.\n", 
    "functions" : {
      "available-documents" : [ {
        "description" : " Retrieves a sequence of URIs of documents bound in the store.\n", 
        "params" : [  ]
      } ], 
      "document" : [ {
        "description" : " Gets the document with the given URI from the store.\n The difference to fn:doc is that this function does not attempt to retrieve\n the resource from the file system or the web before returning it.\n Its only responsibility is to return the document from the store that was\n bound using fn:put or doc:put.\n", 
        "params" : [ "$uri" ]
      } ], 
      "is-available-document" : [ {
        "description" : " Returns true if a document with the given URI exists in the store.\n", 
        "params" : [ "$uri" ]
      } ], 
      "put" : [ {
        "description" : " Adds a document to the store.\n The document is bound to the URI given as first parameter.\n This URI is the name of the document and can be used by the\n doc:document() function to retrieve the document from the\n store.\n \n The semantics of the function is similar to the fn:put()\n function.\n The difference is that this function accepts only document nodes as\n parameters.\n Please note that this function does not try to fetch the document from the\n external resource identified by the URI.\n Instead, the file or http-client modules can be used to retrieve the\n resource as string and fn:parse-xml() can be used to parse the\n string returning a document.\n", 
        "params" : [ "$uri", "$doc" ]
      } ], 
      "remove" : [ {
        "description" : " Removes the document with the given URI from the store.\n", 
        "params" : [ "$uri" ]
      } ]
    }
  }, 
  "http://zorba.io/modules/store/dynamic/collections/ddl" : {
    "description" : " This modules defines a set of functions for managing persistent, ordered,\n and updatable collections.\n \n Please refer to our documentation for\n more information\n about the lifecycle management and the manipulation of such collections.\n", 
    "functions" : {
      "available-collections" : [ {
        "description" : " Gets the QNames of the collections that are available, if any.\n", 
        "params" : [  ]
      } ], 
      "create" : [ {
        "description" : " Creates a collection.\n", 
        "params" : [ "$name" ]
      }, {
        "description" : " Creates a collection and adds the given sequence as content to the new\n collection.\n", 
        "params" : [ "$name", "$content" ]
      } ], 
      "delete" : [ {
        "description" : " Deletes the collection having the given name.\n", 
        "params" : [ "$name" ]
      } ], 
      "is-available-collection" : [ {
        "description" : " Gets whether a collection with the given name is available.\n", 
        "params" : [ "$name" ]
      } ]
    }
  }, 
  "http://zorba.io/modules/store/dynamic/collections/dml" : {
    "description" : " This modules provides a set of functions to modify a collection\n and retrieve the items contained in a particular collection.\n \n Please refer to our documentation for\n more information\n about the lifecycle management and the manipulation of such collections.\n", 
    "functions" : {
      "insert-before" : [ {
        "description" : " Inserts copies of the given items (nodes or JSON items)\n into a collection at the position directly preceding the given target item.\n", 
        "params" : [ "$name", "$target", "$content" ]
      } ], 
      "insert-first" : [ {
        "description" : " Inserts copies of the given items (nodes or JSON items)\n at the beginning of the collection.\n", 
        "params" : [ "$name", "$content" ]
      } ], 
      "insert-last" : [ {
        "description" : " Inserts copies of the given items (nodes or JSON items)\n at the end of the collection.\n", 
        "params" : [ "$name", "$content" ]
      } ], 
      "insert-after" : [ {
        "description" : " Inserts copies of the given items (nodes or JSON items)\n into a collection at the position directly following the given target item.\n", 
        "params" : [ "$name", "$pos", "$content" ]
      } ], 
      "apply-insert-first" : [ {
        "description" : " This function does the same thing as insert-first() except it\n immediately applies the resulting pending updates and returns the items that\n have been inserted.\n", 
        "params" : [ "$name", "$content" ]
      } ], 
      "apply-insert-last" : [ {
        "description" : " This function does the same thing as insert-last() except it\n immediately applies the resulting pending updates and returns the items that\n have been inserted.\n", 
        "params" : [ "$name", "$content" ]
      } ], 
      "apply-insert-before" : [ {
        "description" : " This function does the same thing as insert-before() except it\n immediately applies the resulting pending updates and returns the items that\n have been inserted.\n", 
        "params" : [ "$name", "$target", "$content" ]
      } ], 
      "apply-insert-after" : [ {
        "description" : " This function does the same thing as insert-after() except it\n immediately applies the resulting pending updates and returns the items that\n have been inserted.\n", 
        "params" : [ "$name", "$target", "$content" ]
      } ], 
      "collection" : [ {
        "description" : " Gets the sequence of nodes or JSON items from a collection.\n", 
        "params" : [ "$name" ]
      }, {
        "description" : " Gets the sequence of items (nodes or JSON items) from a collection.\n", 
        "params" : [ "$name", "$skip" ]
      }, {
        "description" : " Gets the sequence of items (nodes or JSON items) from a collection.\n The parameters $start and $skip can be used to\n skip over items at the beginning of the collection.\n If both are given, both are applied: first, $start to skip to\n that item and then $skip to skip that additional number of\n items.\n", 
        "params" : [ "$name", "$start", "$skip" ]
      } ], 
      "collection-name" : [ {
        "description" : " Gets the name of the collection the given item (node or JSON item) belongs\n to.\n", 
        "params" : [ "$item" ]
      } ], 
      "delete" : [ {
        "description" : " Deletes items (nodes or JSON items) from a collection.\n", 
        "params" : [ "$items" ]
      } ], 
      "delete-first" : [ {
        "description" : " Deletes the first item from a collection.\n", 
        "params" : [ "$name" ]
      }, {
        "description" : " Deletes the first N items from a collection.\n", 
        "params" : [ "$name", "$number" ]
      } ], 
      "delete-last" : [ {
        "description" : " Deletes the last item from a collection.\n", 
        "params" : [ "$name" ]
      }, {
        "description" : " Deletes the last N items from a collection.\n", 
        "params" : [ "$name", "$number" ]
      } ], 
      "edit" : [ {
        "description" : " Edits the first supplied item so as to make it look exactly like a copy of\n the second supplied item while retaining its original identity.\n", 
        "params" : [ "$target", "$content" ]
      } ], 
      "index-of" : [ {
        "description" : " Gets the position of the given item (node or JSON item) within its\n collection.\n", 
        "params" : [ "$item" ]
      } ], 
      "truncate" : [ {
        "description" : " Deletes the entire contents of a collection.\n", 
        "params" : [ "$name" ]
      } ]
    }
  }, 
  "http://zorba.io/modules/store/dynamic/collections/w3c/ddl" : {
    "description" : " This modules defines a set of functions for managing persistent, ordered,\n and updatable collections.\n \n Such collections are identified by a URI as defined in the XQuery\n specification.\n However, please note that we do not advise users to use collections\n identified by URIs.\n Instead, we refer to the\n data lifecycle documentation.\n It gives an overview of several ways to work with collections, documents,\n and other data-structures.\n", 
    "functions" : {
      "to-qname" : [ {
        "description" : " THIS FUNCTION IS FOR INTERNAL USE ONLY.\n Converts a URI given as a string into a reserved QName.\n This QName is used in the module to be able to store collections identified\n by URIs using dynamic collections that are identified by QNames.\n", 
        "params" : [ "$uri" ]
      } ], 
      "from-qname" : [ {
        "description" : " THIS FUNCTION IS FOR INTERNAL USE ONLY.\n Gets the namespace component of the given QName.\n", 
        "params" : [ "$name" ]
      } ], 
      "is-available-collection" : [ {
        "description" : " Checks whether a collection with the given URI exists.\n", 
        "params" : [ "$uri" ]
      } ], 
      "available-collections" : [ {
        "description" : " The function returns a sequence of URIs of the collections that are\n available. The sequence will be empty if there are no collections.\n", 
        "params" : [  ]
      } ], 
      "create" : [ {
        "description" : " Creates the collection with the given URI.\n", 
        "params" : [ "$uri" ]
      }, {
        "description" : " Creates the collection with the given URI and adds copies of the given\n sequence to the new collection.\n", 
        "params" : [ "$uri", "$content" ]
      } ], 
      "delete" : [ {
        "description" : " Deletes the collection with the given URI.\n", 
        "params" : [ "$uri" ]
      } ]
    }
  }, 
  "http://zorba.io/modules/store/dynamic/collections/w3c/dml" : {
    "description" : " This modules provides a set of functions to modify a collection and retrieve\n the nodes contained in a particular collection.\n \n Such collections are identified by a URI as defined in the XQuery\n specification.\n However, please note that we do not advice users to use collections\n identified by URIs.\n Instead, we refer to the\n data lifecycle documentation.\n It gives an overview of several ways to work with collections, documents,\n and other data-structures.\n", 
    "functions" : {
      "insert-nodes-first" : [ {
        "description" : " Inserts copies of the given nodes at the beginning of the collection.\n", 
        "params" : [ "$name", "$content" ]
      } ], 
      "insert-nodes-last" : [ {
        "description" : " Inserts copies of the given nodes at the end of the collection.\n", 
        "params" : [ "$name", "$content" ]
      } ], 
      "insert-nodes-before" : [ {
        "description" : " Inserts copies of the given nodes into a collection at the position directly\n preceding the given target node.\n", 
        "params" : [ "$name", "$target", "$content" ]
      } ], 
      "insert-nodes-after" : [ {
        "description" : " Inserts copies of the given nodes into a collection at the position\n directly following the given target node.\n", 
        "params" : [ "$name", "$pos", "$content" ]
      } ], 
      "apply-insert-nodes-first" : [ {
        "description" : " This function does the same as the insert-nodes() function\n except it immediately applies the resulting pending updates and returns the\n nodes that have been inserted.\n", 
        "params" : [ "$name", "$content" ]
      } ], 
      "apply-insert-nodes-last" : [ {
        "description" : " This function does the same as the insert-nodes-last() function\n except it immediately applies the resulting pending updates and returns the\n nodes that have been inserted.\n", 
        "params" : [ "$name", "$content" ]
      } ], 
      "apply-insert-nodes-before" : [ {
        "description" : " This function does the same as the insert-nodes-before()\n function except it immediately applies the resulting pending updates and\n returns the nodes that have been inserted.\n", 
        "params" : [ "$name", "$target", "$content" ]
      } ], 
      "apply-insert-nodes-after" : [ {
        "description" : " This function does the same as the insert-nodes-after()\n function except it immediately applies the resulting pending updates and\n returns the nodes that have been inserted.\n", 
        "params" : [ "$name", "$pos", "$content" ]
      } ], 
      "collection" : [ {
        "description" : " Gets the sequence of nodes of the collection identified by the given name.\n", 
        "params" : [ "$name" ]
      } ], 
      "collection-name" : [ {
        "description" : " Gets the name of the collection the given node belongs to.\n", 
        "params" : [ "$node" ]
      } ], 
      "delete-nodes" : [ {
        "description" : " Deletes nodes from a collection.\n", 
        "params" : [ "$nodes" ]
      } ], 
      "delete-node-first" : [ {
        "description" : " Deletes the first node from a collection.\n", 
        "params" : [ "$name" ]
      } ], 
      "delete-nodes-first" : [ {
        "description" : " Deletes the first N nodes from a collection.\n", 
        "params" : [ "$name", "$number" ]
      } ], 
      "delete-node-last" : [ {
        "description" : " Deletes the last node from a collection.\n", 
        "params" : [ "$name" ]
      } ], 
      "delete-nodes-last" : [ {
        "description" : " Deletes the last N nodes from a collection.\n", 
        "params" : [ "$name", "$number" ]
      } ], 
      "index-of" : [ {
        "description" : " Gets the index of the given node in the collection.\n", 
        "params" : [ "$node" ]
      } ]
    }
  }, 
  "http://zorba.io/modules/store/static/collections/ddl" : {
    "description" : " This modules defines a set of functions for managing collections that are\n declared in the prolog of a module.\n For example, it provides functions to create, delete, or introspect\n collections.\n \n This module is part of\n Zorba's XQuery Data Definition Facility.\n All the collections managed by this module\n have to be pre-declared in the prolog of a module. Please refer to the\n general documentation\n for more information and examples.\n", 
    "functions" : {
      "available-collections" : [ {
        "description" : " Gets the QNames of the collections that have been statically declared and\n are available, if any.\n", 
        "params" : [  ]
      } ], 
      "create" : [ {
        "description" : " Creates a collection.\n", 
        "params" : [ "$name" ]
      }, {
        "description" : " Creates a collection and adds the given sequence as content to the new\n collection.\n", 
        "params" : [ "$name", "$content" ]
      } ], 
      "declared-collections" : [ {
        "description" : " Gets the collections that have been declared in the prolog of the static\n context.\n", 
        "params" : [  ]
      } ], 
      "delete" : [ {
        "description" : " Deletes a collection.\n", 
        "params" : [ "$name" ]
      } ], 
      "is-available-collection" : [ {
        "description" : " Gets whether a collection is statically declared and available.\n", 
        "params" : [ "$name" ]
      } ], 
      "is-declared-collection" : [ {
        "description" : " Gers whether a collection was declared in the prolog of the static context.\n", 
        "params" : [ "$name" ]
      } ]
    }
  }, 
  "http://zorba.io/modules/store/static/collections/dml" : {
    "description" : " This modules provides a set of functions to modify a collection\n and retrieve the items contained in a particular collection.\n \n This module is part of\n Zorba's XQuery Data Definition Facility.\n All the collections managed by this module have to be pre-declared in the\n prolog of a module.\n Please refer to the\n general documentation\n for more information and examples.\n", 
    "functions" : {
      "collection" : [ {
        "description" : " Gets the sequence of nodes or JSON items from a collection.\n", 
        "params" : [ "$name" ]
      }, {
        "description" : " Gets the sequence of nodes or JSON items from a collection.\n", 
        "params" : [ "$name", "$skip" ]
      }, {
        "description" : " Gets the sequence of items (nodes or JSON items) from a collection.\n The parameters $start and $skip can be used to\n skip over some items at the beginning of the collection.\n If both are given, both are applied:\n first $start to skip to the referenced item\n and then $skip to skip that additional number of items.\n", 
        "params" : [ "$name", "$start", "$skip" ]
      } ], 
      "insert" : [ {
        "description" : " Inserts copies of the given items (nodes or JSON items) into a collection.\n Note that the insertion position of the items in the collection is not\n defined.\n", 
        "params" : [ "$name", "$content" ]
      } ], 
      "insert-after" : [ {
        "description" : " The insert-after function is an updating function that inserts copies of the\n given items (nodes or JSON items) into a collection at the position\n directly following the given target item.\n", 
        "params" : [ "$name", "$target", "$content" ]
      } ], 
      "insert-before" : [ {
        "description" : " Inserts copies of the given items (nodes or JSON items) into a collection at\n the position directly preceding the given target item.\n", 
        "params" : [ "$name", "$target", "$content" ]
      } ], 
      "insert-first" : [ {
        "description" : " Inserts copies of the given items (nodes or JSON items) at the beginning of\n a collection.\n", 
        "params" : [ "$name", "$content" ]
      } ], 
      "insert-last" : [ {
        "description" : " Inserts copies of the given items (nodes or JSON items) at the end of a\n collection.\n", 
        "params" : [ "$name", "$content" ]
      } ], 
      "apply-insert" : [ {
        "description" : " This function does the same thing as insert() except it\n immediately applies the resulting pending updates and returns the items that\n have been inserted.\n", 
        "params" : [ "$name", "$content" ]
      } ], 
      "apply-insert-first" : [ {
        "description" : " This function does the same thing as insert-first() except it\n immediately applies the resulting pending updates and returns the items that\n have been inserted.\n", 
        "params" : [ "$name", "$content" ]
      } ], 
      "apply-insert-last" : [ {
        "description" : " This function does the same thing as insert-last() except it\n immediately applies the resulting pending updates and returns the items that\n have been inserted.\n", 
        "params" : [ "$name", "$content" ]
      } ], 
      "apply-insert-before" : [ {
        "description" : " This function does the same thing as insert-before() except it\n immediately applies the resulting pending updates and returns the items that\n have been inserted.\n", 
        "params" : [ "$name", "$target", "$content" ]
      } ], 
      "apply-insert-after" : [ {
        "description" : " This function does the same thing as the insert-after()\n function except it immediately applies the resulting pending updates and\n returns the items that have been inserted.\n", 
        "params" : [ "$name", "$pos", "$content" ]
      } ], 
      "delete" : [ {
        "description" : " Deletes items (nodes or JSON items) from a collection.\n", 
        "params" : [ "$items" ]
      } ], 
      "delete-first" : [ {
        "description" : " Deletes the first item from a collection.\n", 
        "params" : [ "$name" ]
      }, {
        "description" : " Deletes the first N items from a collection.\n", 
        "params" : [ "$name", "$number" ]
      } ], 
      "delete-last" : [ {
        "description" : " Deletes the last item from a collection.\n", 
        "params" : [ "$name" ]
      }, {
        "description" : " Deletes the last N items from a collection.\n", 
        "params" : [ "$name", "$number" ]
      } ], 
      "edit" : [ {
        "description" : " Edits the first supplied item so as to make it look exactly like a copy of\n the second supplied item while retaining its original identity.\n", 
        "params" : [ "$target", "$content" ]
      } ], 
      "truncate" : [ {
        "description" : " Deletes the entire contents of collection.\n Please note that applying this function can not be undone in case\n an error happens during the application of the containing PUL.\n", 
        "params" : [ "$name" ]
      } ], 
      "collection-name" : [ {
        "description" : " Gets the name of the collection the given item (node or JSON item) belongs\n to.\n", 
        "params" : [ "$item" ]
      } ], 
      "index-of" : [ {
        "description" : " Gets the position of the given item (node or JSON item) within its\n collection.\n", 
        "params" : [ "$item" ]
      } ]
    }
  }, 
  "http://zorba.io/modules/store/static/indexes/ddl" : {
    "description" : " This modules defines a set of functions for managing indexes that are\n declared in the prolog of a module.\n \n This module is part of\n Zorba's XQuery Data Definition Facility.\n All the indexes managed by this module have to be pre-declared in the prolog\n of a module.\n Please refer to the\n general documentation\n for more information and examples.\n", 
    "functions" : {
      "available-indexes" : [ {
        "description" : " Gets the available indexes.\n", 
        "params" : [  ]
      } ], 
      "create" : [ {
        "description" : " Creates an index.\n", 
        "params" : [ "$name" ]
      } ], 
      "declared-indexes" : [ {
        "description" : " Gets a sequence of QNames representing the indexes that have been declared\n in the prolog of the static context.\n", 
        "params" : [  ]
      } ], 
      "delete" : [ {
        "description" : " Deletes an index.\n", 
        "params" : [ "$name" ]
      } ], 
      "is-available-index" : [ {
        "description" : " Gets whether an index exists.\n", 
        "params" : [ "$name" ]
      } ], 
      "is-declared-index" : [ {
        "description" : " Gets whether an index has been declared in the prolog of the static context.\n", 
        "params" : [ "$name" ]
      } ]
    }
  }, 
  "http://zorba.io/modules/store/static/indexes/dml" : {
    "description" : " This module defines a set of functions to probe and refresh indexes which are\n declared in the prolog of a module.\n \n This module is part of\n Zorba's XQuery Data Definition Facility.\n All the indexes managed by this module have to be pre-declared in the prolog\n of a library module.\n Please refer to the\n general documentation\n for more information and examples.\n", 
    "functions" : {
      "probe-index-point-value" : [ {
        "description" : " Gets the domain nodes from an index associated by value equality with a\n given search tuple.\n \n The search tuple consists of a number of search keys where each\n search key is either an atomic item or the empty sequence.  The number of\n search keys given must be equal to the number of keys declared for the\n index. Since the number of keys differs from one index to another, this\n function is variadic.\n", 
        "params" : [ "$name", "$key_i" ]
      } ], 
      "probe-index-point-value-skip" : [ {
        "description" : " This is an extension of the probe-index-point-value() function\n in that it allows index items to be skipped.\n", 
        "params" : [ "$name", "$skip", "$key_i" ]
      } ], 
      "probe-index-point-general" : [ {
        "description" : " Gets from an index the domain nodes associated by general equality with a\n given search sequence .\n The search sequence consists of an arbitrary number of search keys\n where each search key is an atomic item.\n The function is supported by general indexes only.\n", 
        "params" : [ "$name", "$key" ]
      } ], 
      "probe-index-range-value" : [ {
        "description" : " Gets the domain nodes associated by value order-comparison (operators\n le, lt, ge, gt) with a\n given search box.\n \n The search box is specified as a number M of rangespecs\n where each rangespec consists of six values.\n The number M must be greater than 0 and less than or equal to the\n number N of keyspecs found in the index declaration.\n If M &lt; N, then the \"missing\" rangespecs are assumed to have\n the following value: [(), (), false, false, false, false].\n As a result, we can assume that M = N.\n Remember that for general indexes, there can be only one IndexKeySpec and,\n as a result for general indexes, M = N = 1.\n Since the number of keys differs from one index to another,\n this function is variadic.\n \n The ith rangespec corresponds to the ith keyspec, and\n specifies a search condition on the key values that are produced by\n evaluating that keyspec for every domain node.\n Specifically, we define the ith rangespec result as the\n set of domain nodes for which the following XQuery expression returns\n true:\n  \n    if ( $haveLowerBound-i and $haveUpperBound-i ) then\n      $lowerBound-i lop $node/keyExpr-i and $node/keyExpr-i uop $upperBound-i\n    else if ( $haveLowerBound-i ) then\n      $lowerBound-i lop $node/keyExpr-i\n    else if ( $haveUpperBound-i ) then\n      $node/keyExpr-i uop $upperBound-i\n    else\n      fn:true()\n  \n where keyExpr-i is the expression specified by the ith\n keyspec of the index, lop is either the le or the\n lt operator depending on whether\n $lowerBoundsIncluded-i is true or false, and uop is\n either the le or the lt operator depending on whether\n $upperBoundsIncluded-i is true or false.\n", 
        "params" : [ "$name", "$lowerBound-i", "$upperBound-i", "$haveLowerBound-i", "$haveUpperBound-i", "$lowerBoundIncluded-i", "$upperBoundIncluded-i" ]
      } ], 
      "probe-index-range-value-skip" : [ {
        "description" : " This function is an extension of the probe-index-range-value()\n function that index items to be skipped.\n", 
        "params" : [ "$name", "$skip", "$lowerBound-i", "$upperBound-i", "$haveLowerBound-i", "$haveUpperBound-i", "$lowerBoundIncluded-i", "$upperBoundIncluded-i" ]
      } ], 
      "probe-index-range-general" : [ {
        "description" : " Gets the domain nodes associated by general order-comparison (operators\n &lt;=, &lt;, &gt;=,\n &gt;) with one or two search sequences.\n \n Each search sequence consists of an arbitrary number of\n search keys where each search key is an atomic item.\n This method is supported by general range indexes only.\n Its result is either an error or the set of domain nodes for which the\n following XQuery expression returns true:\n  \n    if ( $haveLowerBound and $haveUpperBound ) then\n      $lowerBoundKeys lop $node/keyExpr and $node/keyExpr uop $upperBoundKeys\n    else if ( $haveLowerBound ) then\n      $lowerBoundKeys lop $node/keyExpr\n    else if ( $haveUpperBound ) then\n      $node/keyExpr uop $upperBoundKeys\n    else\n      fn:true()\n  \n where keyExpr is the expression specified in the keyspec of the\n index, lop is either the &lt;= or the &lt;\n operator depending on whether $lowerBoundsIncluded is true or\n false, and uop is either the &lt;= or the\n &lt; operator depending on whether\n $upperBoundsIncluded is true or false.\n", 
        "params" : [ "$name", "$lowerBound", "$upperBound", "$haveLowerBound", "$haveUpperBound", "$lowerBoundIncluded", "$upperBoundIncluded" ]
      } ], 
      "refresh-index" : [ {
        "description" : " Updates the index with the given name.  Note that if the maintenance\n property of the index is automatic, this function does nothing.\n", 
        "params" : [ "$name" ]
      } ], 
      "keys" : [ {
        "description" : " Gets a sequence of all keys contained in the index with the given name.\n Each element has the following structure:\n  \n   &lt;key xmlns=\"http://zorba.io/modules/store/static/indexes/dml\"&gt;\n     &lt;attribute value=\"key1_value\"/&gt;\n     &lt;attribute value=\"key2_value\"/&gt;\n     &lt;attribute value=\"key3_value\"/&gt;\n   &lt;/key&gt;\n  \n Note that the order of the attribute elements reflects the order of\n the keys in the index specification. Also note that the values in\n these attributes have the type that is declared in the corresponding\n index specification.\n", 
        "params" : [ "$name" ]
      } ]
    }
  }, 
  "http://zorba.io/modules/store/static/integrity-constraints/ddl" : {
    "description" : " This module defines a set of functions to manage integrity constraints\n that are declared in the prolog of a module.\n For example, it provides functions to activate or deactivate integrity\n constraints.\n \n This module is part of\n Zorba's XQuery Data Definition Facility.\n All the integrity constraints managed by this module have to be pre-declared\n in the prolog of a module.\n Please refer to the\n general documentation\n for more information and examples.\n", 
    "functions" : {
      "activate" : [ {
        "description" : " Activates an integrity constraint in the dynamic context.\n", 
        "params" : [ "$name" ]
      } ], 
      "activated-integrity-constraints" : [ {
        "description" : " Gets the integrity constraints that are activated, if any.\n", 
        "params" : [  ]
      } ], 
      "deactivate" : [ {
        "description" : " Deactivates the integrity constraint.\n", 
        "params" : [ "$name" ]
      } ], 
      "is-activated-integrity-constraint" : [ {
        "description" : " Gets whether an integrity constraints is activated.\n", 
        "params" : [ "$name" ]
      } ], 
      "is-declared-integrity-constraint" : [ {
        "description" : " Gets whether an integrity constraint is declared in the prolog of the static\n context.\n", 
        "params" : [ "$name" ]
      } ], 
      "declared-integrity-constraints" : [ {
        "description" : " Gets the sequence of QNames representing the integrity constraints that have\n been declared in the prolog of the static context.\n", 
        "params" : [  ]
      } ]
    }
  }, 
  "http://zorba.io/modules/store/static/integrity-constraints/dml" : {
    "description" : " This module defines a function to check if an integrity constraint is\n satisfied.\n The integrity constraint needs to be declared in the prolog of a module.\n \n This module is part of\n Zorba's XQuery Data Definition Facility.\n All the integrity constraints managed by this module have to be pre-declared\n in the prolog of a module.\n Please refer to the\n general documentation\n for more information and examples.\n", 
    "functions" : {
      "check-integrity-constraint" : [ {
        "description" : " Checks if the specified constraints are valid in the database.\n", 
        "params" : [ "$name" ]
      } ]
    }
  }, 
  "http://zorba.io/modules/string" : {
    "description" : " This module provides string related functions.\n Mostly, the functions in this module provide primitives\n to work with streamable strings. For example, it allows to\n check whether a given string is streamable or seekable.\n", 
    "functions" : {
      "analyze-string" : [ {
        "description" : " Analyzes a string using a regular expression, returning sequence of JSON\n objects that identify which parts of the input string matched or failed to\n match the regular expression; and in the case of matched substrings, which\n substrings matched each capturing group in the regular expression.\n \n This function behaves like\n fn:analyze-string\n but returns a JSON array rather than an XML element.\n", 
        "params" : [ "$input", "$pattern", "$flags" ]
      }, {
        "description" : " Analyzes a string using a regular expression, returning sequence of JSON\n objects that identify which parts of the input string matched or failed to\n match the regular expression; and in the case of matched substrings, which\n substrings matched each capturing group in the regular expression.\n \n This function behaves like\n fn:analyze-string\n but returns a JSON array rather than an XML element.\n", 
        "params" : [ "$input", "$pattern" ]
      } ], 
      "materialize" : [ {
        "description" : " This function materializes a streamable string.\n The drawback of a streamable (non-seekable) string is that\n its value can only be consumed once. That is, only one function\n can access the value of astreamable string item.\n In order to remedy this situation, this function can be used to\n convert a streamable string into its non-streamable counterpart. As a\n result, the string returned by this function has the same value as its\n input but is materialized and, hence, can be consumed multiple times.\n", 
        "params" : [ "$s" ]
      } ], 
      "is-streamable" : [ {
        "description" : " This function checks whether a given string item is implemented by a\n streamable string.\n A streamable string is produced by some functions of a module.\n It's an optimized implementation of an string to handle arbitrary\n sized data. The drawback is that its value can only be consumed once.\n That is, only one function can access the value of a streamable string\n item.\n", 
        "params" : [ "$s" ]
      } ], 
      "is-seekable" : [ {
        "description" : " This function checks whether a given string item is a\n seekable stream string.\n For example, a seekable streamable string is returned by the\n file module.\n", 
        "params" : [ "$s" ]
      } ], 
      "split" : [ {
        "description" : " Returns a sequence of strings constructed by splitting the input wherever\n the given separator is found.\n The function is different from tokenize. It doesn't allow\n the separator to be a regular expression. This restriction allows for more\n performant implementation. Specifically, the function processes\n streamable strings as input in a streamable way which is particularly useful\n to tokenize huge strings.\n", 
        "params" : [ "$s", "$separator" ]
      } ]
    }
  }, 
  "http://zorba.io/modules/system" : {
    "description" : " The system module allows developers to access system properties.\n Part of these system properties are environment variables,\n local variable to the process running Zorba, and properties defined by Zorba.\n To avoid conflicts between environment variables and properties defined by Zorba,\n all environment variables are prefixed with env..\n For instance, the following query: \n \n import module namespace system = \"http://www.zorba-xquery.com/modules/system\";\n for $prop in system:properties()\n return concat($prop, \": \", system:property($prop), \"\n \")\n \n \n Will output:\n \n env.TERM_PROGRAM: Apple_Terminal\n ...\n \n In this example, it is important to notice that the environnement variable PATH\n with the key env.PATH.\n", 
    "functions" : {
      "property" : [ {
        "description" : " Gets the system property indicated by the specified key.\n", 
        "params" : [ "$key" ]
      } ], 
      "properties" : [ {
        "description" : " This function retrieves the names of the current system properties.\n This list includes environment variables, local variable to the process running Zorba, and properties defined by Zorba.\n \n To avoid conflicts between environment variables and properties defined by Zorba,\n all environment variables are prefixed with env..\n", 
        "params" : [  ]
      } ], 
      "all-properties" : [ {
        "description" : " This function retrieves all names and values from the current system properties.\n This list includes environment variables, local variable to the process running Zorba, and properties defined by Zorba.\n \n To avoid conflicts between environment variables and properties defined by Zorba,\n all environment variables are prefixed with env..\n", 
        "params" : [  ]
      } ]
    }
  }, 
  "http://zorba.io/modules/unordered-maps" : {
    "description" : " This module defines a set of functions for working with maps. A map\n is identified by a string and can be created using the map:create function\n and dropped using the map:drop function.\n \n It is possible to create persistent and transient maps. The lifetime of a\n transient map is limited by the execution of the current query.\n A persistent map lives until it is explicitly dropped.\n Accordingly, it is also available to other requests.\n \n For example,\n map:create(\"my-map\", [\"string\", \"integer\"], { \"persistent\" : false })\n will create a transient map named my-map having two keys.\n The types of the keys are string and integer.\n \n The key of a particular entry in the map can consist of a tuple of\n atomic values (called key attributes). The actual type of each attribute\n is determined when the map is created. The value of each entry is a\n sequence of items. If an item in this sequence is a object or array,\n this item needs to belong to a collection, otherwise, an error is raised.\n", 
    "functions" : {
      "create" : [ {
        "description" : " Create a persistent map with a given name and type identifiers for the key\n attributes.\n \n If the map has only one key attribute, a single type identifier is given,\n for more than one key attribute an array of type identifiers is given.\n Calling this function is equivalent to calling create with the options\n { \"persistent\" : true }\n Note that the function is sequential and immediately creates the map.\n \n Each key-type should be specified as string (e.g. \"integer\",\n \"string\", \"boolean\", \"double\", or \"datetime\").\n \n For example,\n map:create(\"my-map\", \"string\") or\n map:create(\"my-map\", [\"string\", \"integer\"]).\n", 
        "params" : [ "$name", "$key-types" ]
      }, {
        "description" : " Create a map with a given name, type identifiers for the key attributes, and\n options.\n \n If the map has only one key attribute, a single type identifier is given,\n for more than one key attribute an array of type identifiers is given.\n Currently only one option is supported: To create a transient map the object\n { \"persistent\" : false }\n has to be passed to the $options parameter.\n Note that the function is sequential and immediately creates the map in the\n store.\n \n Note that a map cannot be created if it already exists in a parent context.\n For example, a map that was created in an outer query cannot be\n created again in an inner query executed using the\n reflection:eval-s function.\n", 
        "params" : [ "$name", "$key-types", "$options" ]
      } ], 
      "drop" : [ {
        "description" : " Deletes the map with the given name.\n \n Note that a map can only be dropped in the context it was created.\n For example, a map that was created in an outer query cannot be\n dropped in an inner query executed using the\n reflection:eval-s function.\n", 
        "params" : [ "$name" ]
      } ], 
      "insert" : [ {
        "description" : " Inserts a new entry into the map with the given name.\n \n If the map has only one key attribute, a single key value is given, for\n more than one key attribute an array of key values is given.\n If an entry with the given key already exists in the map, the value\n sequences of the existing entry and the sequence passed using $value\n argument are concatenated.\n \n If an item in the value sequence is an object or array, this\n item needs to belong to a collection, otherwise, an an error\n is raised.\n \n Note that it is possible to insert entries with empty key attributes\n or key attributes having the value null. However, as\n the comparison with an empty sequence or null always returns false,\n it is not possible to retrieve these entries.\n \n For example,\n map:insert(\"my-map\", \"key\", \"value\") or\n map:insert(\"my-map\", [ \"key1\", \"key2\" ] , (42, \"value\")).\n", 
        "params" : [ "$name", "$key", "$value" ]
      } ], 
      "get" : [ {
        "description" : " Returns the value of the entry with the given key from the map.\n \n If the map has only one key attribute, a single key value is given, for\n more than one key attribute an array of key values is given.\n \n Note that it is possible to insert entries with empty key attributes.\n However as the getting the entries is based on the \"eq\" comparison and\n as \"eq\" with an empty sequence always return false, it is not possible\n to retrieve these entries.\n \n For example,\n map:get(\"my-map\", \"key\") or\n map:get(\"my-map\", [ \"key1\", \"key2\" ]).\n", 
        "params" : [ "$name", "$key" ]
      } ], 
      "delete" : [ {
        "description" : " Removes an entry identified by the given key from the map.\n \n If the map has only one key attribute, a single key value is given, for\n more than one key attribute an array of key values is given.\n \n Note that it is possible to insert entries with empty key attributes.\n However as the removing the entries is based on the \"eq\" comparison and\n as \"eq\" with an empty sequence always return false, it is not possible\n to delete these entries.\n", 
        "params" : [ "$name", "$key" ]
      } ], 
      "keys" : [ {
        "description" : " Returns the keys of all entries of a map. The keys\n are returned as sequence of arrays.\n \n The following condition always holds:\n map:size($name) eq count(map:keys($name))\n", 
        "params" : [ "$name" ]
      } ], 
      "size" : [ {
        "description" : " Returns the number of entries in a map.\n \n The following condition always holds:\n map:size($name) eq count(map:keys($name))\n", 
        "params" : [ "$name" ]
      } ], 
      "available-maps" : [ {
        "description" : " The function returns a sequence of names of the maps that are\n available (persistent and non-persistent). The sequence will be\n empty if there are no maps.\n \n", 
        "params" : [  ]
      } ], 
      "options" : [ {
        "description" : " The function returns the options that were passed during creation or the\n default options if no options were passed.\n", 
        "params" : [ "$name" ]
      } ]
    }
  }, 
  "http://zorba.io/modules/uri" : {
    "description" : " This module provides functions for processing URIs and URLs.\n", 
    "functions" : {
      "decode" : [ {
        "description" : " Percent-decodes (aka URL decoding) the given string.\n All percent encoded octets will be translated into their\n decoded UTF-8 representation.\n Please note that the percent encoding guarantees that a string\n consists of ASCII characters only. Passing a string that contains\n non-ASCII characters results in undefined behavior.\n", 
        "params" : [ "$u" ]
      }, {
        "description" : " Percent-decodes (aka URL decoding) the given string.\n All percent encoded octets will be translated into their\n decoded UTF-8 representation.\n If $decode-plus is specified all occurrences of the char '+'\n will be replaced with a space ' ' before the percent decoding\n happens.\n Please note that the percent encoding guarantees that a string\n consists of ASCII characters only. Passing a string that contains\n non-ASCII characters results in undefined behavior.\n", 
        "params" : [ "$u", "$decode-plus" ]
      }, {
        "description" : " Percent-decodes (aka URL decoding) the given string.\n All percent encoded octets will be translated into their\n decoded UTF-8 representation.\n If $decode-plus is specified all occurrences of the char '+'\n will be replaced with a space ' ' before the percent decoding\n happens.\n The $charset parameter specifies the source charset after precent\n decoding. It is used to convert the decoded string into UTF-8.\n Please note that the percent encoding guarantees that a string\n consists of ASCII characters only. Passing a string that contains\n non-ASCII characters results in undefined behavior.\n", 
        "params" : [ "$s", "$decode-plus", "$charset" ]
      } ], 
      "parse" : [ {
        "description" : " Parses the URI passed as string. The returned object\n contains only members with field names declared as constants in\n this module.\n For example,\n \n let my-uri := \"http://www.my.project.com/a/b/c?user=john;pass=1234#profile\"\n return uri:parse(my-uri)\n \n returns\n \n { \"squeme\" : \"http\", \"host\" : \"www.my.project.com\", \"path\" : \"/a/b/c\",\n   \"query\" : \"user=john;pass=123\", \"fragment\" : \"profile\" }\n \n", 
        "params" : [ "$uri" ]
      } ], 
      "serialize" : [ {
        "description" : " Serialize the URI passed as object into a string.\n", 
        "params" : [ "$uri" ]
      } ]
    }
  }, 
  "http://zorba.io/modules/xml" : {
    "description" : " \n This module provides functions for reading XML files from string inputs.\n It allows reading of well-formed XML documents as well as well-formed\n external parsed entities, described by\n XML 1.0 Well-Formed\n Parsed Entities. The functions can also perform Schema and DTD\n validation of the input documents.\n \n The following example parses a sequence of XML elements and returns\n them in a streaming fashion - each at a time:\n \n import module namespace x = \"http://zorba.io/modules/xml\";\n import schema namespace opt = \"http://zorba.io/modules/xml-options\";\n x:parse(\n   \"&lt;from1&gt;Jani&lt;/from1&gt;&lt;from2&gt;Jani&lt;/from2&gt;&lt;from3&gt;Jani&lt;/from3&gt;\",\n   &lt;opt:options&gt;\n     &lt;opt:parse-external-parsed-entity/&gt;\n   &lt;/opt:options&gt;\n )\n \n Another useful option allows to skip an arbitrary number of levels\n before returning a sequence of nodes as shown in the following example:\n \n import module namespace x = \"http://zorba.io/modules/xml\";\n import schema namespace opt = \"http://zorba.io/modules/xml-options\";\n x:parse(\n   \"&lt;root&gt;\n     &lt;from1&gt;Jani1&lt;/from1&gt;\n     &lt;from2&gt;Jani2&lt;/from2&gt;\n     &lt;from3&gt;Jani3&lt;/from3&gt;\n   &lt;/root&gt;\",\n   &lt;opt:options&gt;\n     &lt;opt:parse-external-parsed-entity opt:skip-root-nodes=\"1\"/&gt;\n   &lt;/opt:options&gt;\n )\n \n", 
    "functions" : {
      "parse" : [ {
        "description" : " A function to parse XML files and fragments (i.e.\n external general parsed\n entities).\n The functions takes two arguments: the first one is the\n string to be parsed and the second argument is an &lt;options/&gt; element that\n passes a list of options to the parsing function. They are described below.\n The options element must conform to the xml-options:options element type\n from the xml-options.xsd schema. Some of these\n will be passed to the underlying library (LibXml2) and further documentation\n for them can be found at \n LibXml2 parser.\n The list of available options:\n \n \n &lt;base-uri/&gt; - the element must have a \"value\" attribute, which will provide\n the baseURI that will be used as the baseURI for every node returned by this\n function.\n \n \n &lt;no-error/&gt; - if present, the option will disable fatal error processing. Any\n failure to parse or validate the input in the requested manner will result\n in the function returning an empty sequence and no error will raised.\n \n \n &lt;schema-validate/&gt; - if present, it will request that the input string be Schema\n validated. The element accepts an attribute named \"mode\" which can have two\n values: \"strict and \"lax\". Enabling the option will produce a result that is\n equivalent to processing the input with the option disabled, and then copying\n the result using the XQuery \"validate strict|lax\" expression. This option can not\n be used together with either the &lt;DTD-validate/&gt; or the &lt;parse-external-parsed-entity/&gt;\n option. Doing so will raise a zerr:ZXQD0003 error.\n \n \n &lt;DTD-validate/&gt; - the option will enable the DTD-based validation. If this\n option is enabled and the input references a DTD, then the input must be a\n well-formed and DTD-valid XML document. The &lt;DTD-load/&gt; option must be used for\n external DTD files to be loaded. If the option is enabled and the input does\n not reference a DTD then the option is ignored. If the option is disabled, the\n input is not required to reference a DTD and if it does reference a DTD then\n the DTD is ignored for validation purposes. This option can not\n be used together with either the &lt;schema-validate/&gt; or the &lt;parse-external-parsed-entity&gt;\n option. Doing so will raise a zerr:ZXQD0003 error.\n \n \n &lt;DTD-load/&gt; - if present, it will enable loading of external DTD files.\n \n \n &lt;default-DTD-attributes/&gt; - if present, it will enable the default DTD attributes.\n \n \n &lt;parse-external-parsed-entity/&gt; - if present, it will enable the processing of XML\n external entities. If the option\n is enabled, the input must conform to the syntax extParsedEnt (production\n [78] in XML 1.0, see \n Well-Formed Parsed Entities). In addition, by default a DOCTYPE declaration is allowed,\n as described by the [28] doctypedecl production, see \n Document Type Definition. A parameter is available to forbid the appearance of the DOCTYPE.\n The result of the function call is a list\n of nodes corresponding to the top-level components of the content of the\n external entity: that is, elements, processing instructions, comments, and\n text nodes. CDATA sections and character references are expanded, and\n adjacent characters are merged so the result contains no adjacent text\n nodes. If the option is disabled, the input must be a well-formed XML\n document conforming to the Document production\n (production [1] in XML 1.0).\n This option can not be used together with either the &lt;schema-validate/&gt; or the &lt;DTD-validate/&gt;\n option. Doing so will raise a zerr:ZXQD0003 error.\n The &lt;parse-external-parsed-entity/&gt; option has three parameters, given by attributes. The first\n attribute is \"skip-root-nodes\" and it can have a non-negative value. Specifying the paramter\n tells the parser to skip the given number of root nodes and return only their children. E.g.\n skip-root-nodes=\"1\" is equivalent to parse-xml($xml-string)/node()/node() . skip-root-nodes=\"2\" is equivalent\n to parse-xml($xml-string)/node()/node()/node() , etc. The second attribute is \"skip-top-level-text-nodes\" with a\n boolean value. Specifying \"true\" will tell the parser to skip top level text nodes, returning\n only the top level elements, comments, PIs, etc. This parameter works in combination with\n the \"skip-root-nodes\" paramter, thus top level text nodes are skipped after \"skip-root-nodes\" has\n been applied. The third paramter is \"error-on-doctype\" and will generate an error if a DOCTYPE\n declaration appears in the input, which by default is allowed.\n \n \n &lt;substitute-entities/&gt; - if present, it will enable the XML entities substitutions.\n \n \n &lt;remove-redundant-ns/&gt; - if present, the parser will remove redundant namespaces declarations.\n \n \n &lt;no-CDATA/&gt; - if present, the parser will merge CDATA nodes as text nodes.\n \n \n &lt;xinclude-substitutions/&gt; - if present, it will enable the XInclude substitutions.\n \n \n &lt;no-xinclude-nodes/&gt; - if present, the parser will not generate XInclude START/END nodes.\n \n \n \n An example that sets the base-uri of the parsed external entities:\n \n \n   import module namespace x = \"http://zorba.io/modules/xml\";\n   import schema namespace opt = \"http://zorba.io/modules/xml-options\";\n   x:parse(\"&lt;from1&gt;Jani&lt;/from1&gt;&lt;from2&gt;Jani&lt;/from2&gt;&lt;from3&gt;Jani&lt;/from3&gt;\",\n     &lt;opt:options&gt;\n       &lt;opt:base-uri opt:value=\"urn:test\"/&gt;\n       &lt;opt:parse-external-parsed-entity/&gt;\n     &lt;/opt:options&gt;\n   )\n \n", 
        "params" : [ "$xml-string", "$options" ]
      } ], 
      "canonicalize" : [ {
        "description" : " A function to canonicalize the given XML string, that is, transform\n it into Canonical XML as defined by Canonical XML.\n Note: This function is not streamable. If a streamable string is used\n as input for the function it will be materialized.\n Note: This function sets the\n XML_PARSE_NOERROR\n option when parsing the XML input.\n", 
        "params" : [ "$xml-string" ]
      }, {
        "description" : " A function to canonicalize the given XML string, that is, transform\n it into Canonical XML as defined by Canonical XML.\n This version of the function allows specifying certain options to be\n used when initially parsing the XML string. These are of the same form\n as the options to x:parse#2(), although the following options are\n currently ignored for this function:\n \n &lt;opt:no-error/&gt;\n &lt;opt:base-uri/&gt;\n &lt;opt:schema-validate/&gt;\n &lt;opt:parse-external-parsed-entity/&gt;\n \n \n Note: This function is not streamable, if a streamable string is used\n as input for the function it will be materialized.\n Note: This function sets the\n XML_PARSE_NOERROR\n option when parsing the XML input.\n", 
        "params" : [ "$xml-string", "$options" ]
      } ], 
      "canonicalize-impl" : [ {
        "description" : "", 
        "params" : [ "$xml-string", "$options" ]
      } ]
    }
  }, 
  "http://zorba.io/modules/xqdoc" : {
    "description" : " \n The goal of xqDoc is to provide a simple vendor neutral solution for\n documenting XQuery modules, as well as tools to generate a user friendly\n presentation of this documentation and cross referencing information.\n Therefore, xqDoc proposes a new commenting convention that extends the\n currently defined XQuery comment style. This convention is modeled\n after Java's Javadoc commenting style, and provides a simple, uniform\n way to document XQuery source code. You can find more information about\n xqDoc on the website of the xqDoc project.\n This library module provides XQDoc utility functions.\n \n \n Generating a user friendly presentation of the documentation is\n accomplished in the following steps:\n \n  Module, variable, function, collection, and index declarations need\n      to be commented using the xqDoc commenting conventions. For example,\n      this module contains xqDoc-style comments\n  A xqDoc-enabled processor can parse such documentation and generate\n      a vendor neutral XML document which stores all the information about\n      the code and the comments. Such a document adheres to the xqDoc\n      Schema.\n  The information of an XML document generated by the second step,\n      can be transformed into arbitrary presentation formats\n      (e.g. html).\n \n \n \n This module implements the first and second step of this process.\n That is, Zorba can parse XQuery modules which are annotated with\n xqDoc-style documentation and generate the vendor neutral\n XML representation.\n \n", 
    "functions" : {
      "xqdoc" : [ {
        "description" : " Generates an XQDoc XML document for the module located\n at the URI provided as parameter to this function.\n", 
        "params" : [ "$module-uri" ]
      }, {
        "description" : " Generates an XQDoc XML document for the module located\n at the URI provided as parameter to this function.\n In comparison to the single parameter version, this function does not\n generate XQDoc for all language components. By default, the\n following components are deactivated: XQuery comments, import\n statements, variable declarations, function declarations, collection\n declarations,  and index declarations. The second parameter is used to\n enable the XQDoc generation of those components.\n", 
        "params" : [ "$module-uri", "$options" ]
      } ], 
      "xqdoc-content-impl" : [ {
        "description" : "", 
        "params" : [ "$module", "$filename" ]
      } ], 
      "xqdoc-content" : [ {
        "description" : " Generated the an XQDoc XML document for the module provided\n as parameter to this function.\n", 
        "params" : [ "$module" ]
      }, {
        "description" : " Generated the an XQDoc XML document for the module provided\n as parameter to this function.\n In comparison to the single parameter version, this function does not\n generate XQDoc for all language components. By default, the\n following components are deactivated: XQuery comments, import\n statements, variable declarations, function declarations, collection\n declarations,  and index declarations. The second parameter is used to\n enable the XQDoc generation of those components.\n", 
        "params" : [ "$module", "$options" ]
      } ], 
      "xqdoc-content-options-impl" : [ {
        "description" : "", 
        "params" : [ "$module", "$filename", "$options" ]
      } ]
    }
  }, 
  "http://zorba.io/modules/xsl-fo" : {
    "description" : " This module converts XSL-FO documents\n to various formats such as PDF, EPS, PCL, AFP, Text, PNG, Postscript, RTF, and TIFF.\n For instance, the following example converts a simple XSL-FO document to PDF:\n \n import module namespace fop = \"http://zorba.io/modules/xsl-fo\";\n import module namespace file = \"http://expath.org/ns/file\";\n declare namespace fo = \"http://www.w3.org/1999/XSL/Format\";\n let $xsl-fo := &lt;fo:root xmlns:fo=\"http://www.w3.org/1999/XSL/Format\"&gt;\n   &lt;fo:layout-master-set&gt;\n     &lt;fo:simple-page-master master-name=\"my-page\"&gt;\n       &lt;fo:region-body margin=\"1in\"/&gt;\n     &lt;/fo:simple-page-master&gt;\n   &lt;/fo:layout-master-set&gt;\n   &lt;fo:page-sequence master-reference=\"my-page\"&gt;\n     &lt;fo:flow flow-name=\"xsl-region-body\"&gt;\n       &lt;fo:block&gt;Hello, world!&lt;/fo:block&gt;\n     &lt;/fo:flow&gt;\n   &lt;/fo:page-sequence&gt;\n  &lt;/fo:root&gt;\n let $pdf := fop:generator($fop:PDF, $xsl-fo)\n return file:write-binary(\"simple.pdf\", $pdf)\n \n This module uses Apache-FOP to generate content from an XSL-FO document.\n See the Apache FOP documentation for further information.\n \n Note for Windows users: On Windows, this module won't work out of the box, since\n this module uses Java. But the Java VM dll is not in the system path by default. To make\n this module work, you need to add the directory where the jvm.dll is located to the\n system path. This dll is located at JRE_DIR\\bin\\client. On a standard installation, this would\n be something a path like \"C:\\Program Files\\Java\\jre6\\bin\\client\".\n", 
    "functions" : {
      "generator" : [ {
        "description" : " The generator function takes an XSL-FO document as input and generates output\n in the format given as input.\n The output format can be given as a MIME type - for example \"application/pdf\"\n - or one of the predefined variables can be used - like $xsl-fo:PDF. Please\n refer to the Apache FOP documentation for\n supported output formats.\n Apache FOP does not support 100% of the XSL-FO standard.\n Please consult the official\n documentation for further information.\n This function tries to find the needed Java libraries itself.\n On a Mac OS X computer, it should be sufficient to install Apache FOP via Mac\n Ports.\n On Ubuntu it should be sufficient to install the fop packages via apt-get.\n On Windows, the classpath needs to be set manually using\n generator#3.\n This function tries to find the jar files via environment variables. The user can set the\n variable FOP_HOME to the root directory of an Apache FOP distribution. If you have all\n JAR files in the same directory, you can set the environment variable FOP_LIB_DIR to this\n directory.\n", 
        "params" : [ "$output-format", "$xsl-fo-document" ]
      } ], 
      "generator-impl" : [ {
        "description" : " Internal function used to format XSL-FO documents.\n", 
        "params" : [ "$output-format", "$xsl-fo-document" ]
      } ]
    }
  }, 
  "http://zorba.io/modules/zorba-query" : {
    "description" : " This module contains functions to compile and evaluate queries\n written in either JSONiq or XQuery. Also, it contains function that\n allow to parameterize the static or dynamic evaluation phase.\n", 
    "functions" : {
      "prepare-main-module" : [ {
        "description" : " The function prepares a given a query for execution.\n If the query was successfully compiled, the function returns an\n identifier as xs:anyURI. This URI can be passed to other functions\n of this module (e.g. to actually evaluate the query). The URI\n is opaque and its lifetime is bound by the lifetime of the query\n that invoked this function. Further reference or uses\n of the identifier lead to unexpected results.\n \n Successfully prepared queries need to be deleted by passing the resulting\n identifier to the zq:delete-query function of this module.\n", 
        "params" : [ "$main-module-text" ]
      }, {
        "description" : " The function prepares a given query for execution.\n If the query was successfully compiled, the function returns an\n identifier as xs:anyURI. This URI can be passed to other functions\n of this module (e.g. to actually evaluate the query). The URI\n is opaque and its lifetime is bound by the lifetime of the query\n that invoked this function. Further reference or uses\n of the identifier lead to unexpected results.\n \n Important notes regarding the second and third parameters of the function:\n --------------------------------------------------------------------------\n \n These parameters allow you to specify a URL resolver and a URI mapper\n for Zorba to use when executing this query. See\n here\n \n The second parameter is a function item for a URL\n resolver. The URL resolver function must recive 2 parameters:\n A $namespace as xs:string that will contain the url to be resolved.\n A $entity as xs:string that will contain the type of resolving needed.\n   This can be one of two values: \"module\" or \"schema\".\n \n The function must return the empty sequence when the specified $namespace\n or $entity are not the ones to be resolved.\n \n Example:\n \n declare function mymod:url-resolver($namespace as xs:string, $entity as xs:string) as item()?\n {\n  if($namespace = 'http://test.xq')\n  then \"module namespace test = 'http://test'; declare function test:foo(){'foo'};\"\n  else ()\n };\n \n The URL resolver function's namespace, name, and parameter naming are\n not restricted by ZQ.\n \n The URL resolver function's return type is not restricted, it could be a string, a sequence,\n a node, etc. All the outputs types are to be serialized as a string.\n \n The third parameter is a function item for a URI mapper.\n The URI mapper function, just like the URL resolver, receives 2 parameters:\n A $namespace as xs:string that will contain the URI to be mapped.\n A $entity as xs:string that will contain the type of resolving needed.\n   This can be one of two values: \"module\" or \"schema\".\n \n The URI mapper must return an empty sequence when the specified $namesapce or $entity\n are not to be mapped. Unlike the URL resolver this function must return a sequence of strings.\n \n Example:\n \n declare function mymod:uri-mapper($namespace as xs:string, $entity as xs:string)\n {\n  if($namespace = 'http://test')\n  then (\"http://zorba.io/test\", \"http://foo.com/schema/test\")\n  else ()\n };\n \n The URI mapper function's namespace, name, and parameter naming are\n not restricted by ZQ.\n \n In order to pass the above URL resolver and URI mapper to this function,\n use the following syntax:\n \n   variable $queryID := zq:prepare-main-module(\"..query text..\",\n      mymod:url-resolver#2, mymod:uri-mapper#2);\n \n That is, the QName of the function followed by \"#2\". This is XQuery\n \"higher-order function\" syntax, meaning the function with the specified\n QName which takes two arguments. Since URL resolvers and URI mappers\n must take two arguments, both will always be specified with \"#2\".\n \n Both the URL resolver and URI mapper functions are optional, meaning you\n may pass the empty-sequence () for either.\n \n Successfully prepared queries need to be deleted by passing the resulting\n identifier to the zq:delete-query function of this module.\n", 
        "params" : [ "$main-module-text", "$resolver", "$mapper" ]
      } ], 
      "prepare-library-module" : [ {
        "description" : " This function compiles a given XQuery or JSONiq library module.\n It can be used to compile-check a module.\n", 
        "params" : [ "$library-module-text" ]
      } ], 
      "is-bound-context-item" : [ {
        "description" : " The function tests if the context-item is bound for the\n execution of the query referred to by the given query identifier.\n", 
        "params" : [ "$query-key" ]
      } ], 
      "is-bound-variable" : [ {
        "description" : " The function tests if the given variable is bound for the\n execution of the query referred to by the given query identifier.\n", 
        "params" : [ "$query-key", "$var-name" ]
      } ], 
      "external-variables" : [ {
        "description" : " The function returns the names of the external variables that\n are declared in the given query (either in the main module or\n in any of the imported library modules).\n", 
        "params" : [ "$query-key" ]
      } ], 
      "is-updating" : [ {
        "description" : " The function tests if the query identified by the given key\n is an updating query.\n", 
        "params" : [ "$query-key" ]
      } ], 
      "is-sequential" : [ {
        "description" : " The function tests if the query identified by the given key\n is sequential query.\n", 
        "params" : [ "$query-key" ]
      } ], 
      "bind-context-item" : [ {
        "description" : " This function binds the context-item of the prepared query\n identified by the given key to the $dot argument.\n", 
        "params" : [ "$query-key", "$dot" ]
      } ], 
      "bind-variable" : [ {
        "description" : " This function binds the variable with name $name of\n the prepared query identified by $query-key to the given sequence.\n", 
        "params" : [ "$query-key", "$var", "$value" ]
      } ], 
      "evaluate" : [ {
        "description" : " Evaluates the given prepared query and returns the result\n of the evaluation. The query must not be sequential or\n updating.\n", 
        "params" : [ "$query-key" ]
      } ], 
      "evaluate-updating" : [ {
        "description" : " Evaluates the given prepared query and applies the updates\n computed by this query. The query must be an updating query.\n", 
        "params" : [ "$query-key" ]
      } ], 
      "evaluate-sequential" : [ {
        "description" : " Evaluates the given prepared query and returns the result\n of the evaluation. The query must be sequential.\n", 
        "params" : [ "$query-key" ]
      } ], 
      "delete-query" : [ {
        "description" : " Deletes the prepared query associated with the given identifier.\n After the query is deleted, the corresponding identifier should\n not be used as argument to any of the functions of this module.\n", 
        "params" : [ "$query-key" ]
      } ], 
      "variable-value" : [ {
        "description" : " This function returns the value of a variable that is bound in the\n given query.\n", 
        "params" : [ "$query-key", "$var-name" ]
      } ], 
      "query-plan" : [ {
        "description" : " Returns the compiled query identified by the given query-key\n as binary data.\n", 
        "params" : [ "$query-key" ]
      } ], 
      "load-from-query-plan" : [ {
        "description" : " The function loads a given query for execution from a\n xs:base64Binary query plan, obtained through the zq:query-plan function.\n If the query was successfully loaded, the function returns an\n identifier as xs:anyURI. This URI can be passed to other functions\n of this module (e.g. to actually evaluate the query). The URI\n is opaque and its lifetime is bound by the lifetime of the query\n that invoked this function. Further reference or uses\n of the identifier lead to unexpected results.\n \n Successfully prepared queries need to be deleted by passing the resulting\n identifier to the zq:delete-query function of this module.\n", 
        "params" : [ "$plan" ]
      }, {
        "description" : " The function loads a given query for execution from a\n xs:base64Binary query plan, obtained through the zq:query-plan function.\n If the query was successfully loaded, the function returns an\n identifier as xs:anyURI. This URI can be passed to other functions\n of this module (e.g. to actually evaluate the query). The URI\n is opaque and its lilfetime is bound by the lifetime of the query\n that invoked this function. Further reference or uses\n of the identifier lead to unexpected results.\n \n For important notes regarding the second and third parameters of the\n function, review the comments in zq:prepare-main-module#3.\n \n Successfully prepared queries need to be deleted by passing the resulting\n identifier to the zq:delete-query function of this module.\n", 
        "params" : [ "$plan", "$resolver", "$mapper" ]
      } ]
    }
  }, 
  "http://zorba.io/warnings" : {
    "description" : " This module contains one variable declaration for each diagnostic of the\n http://zorba.io/warnings namespace.\n The variables serves as documentation for the errors but can also\n be used in the code. For example, one useful scenario is to compare\n an error caught in the catch clause of a try-catch expression with one of\n the variables.\n", 
    "functions" : {

    }
  }
};
});
