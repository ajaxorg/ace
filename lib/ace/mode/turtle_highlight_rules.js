/* ***** BEGIN LICENSE BLOCK *****
 * Distributed under the BSD license:
 *
 * Copyright (c) 2012, Ajax.org B.V.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of Ajax.org B.V. nor the
 *       names of its contributors may be used to endorse or promote products
 *       derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL AJAX.ORG B.V. BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * ***** END LICENSE BLOCK ***** */

/* This file was autogenerated from /Users/brian/git-others/sparql-sublime/turtle.tmLanguage (uuid: ) */
/****************************************************************************************
 * IT MIGHT NOT BE PERFECT ...But it's a good start from an existing *.tmlanguage file. *
 * fileTypes                                                                            *
 ****************************************************************************************/

define(function(require, exports, module) {
"use strict";

var oop = require("../lib/oop");
var TextHighlightRules = require("./text_highlight_rules").TextHighlightRules;

var TurtleHighlightRules = function() {
    // regexp must not have capturing parentheses. Use (?:) instead.
    // regexps are ordered -> the first match is used

    this.$rules = { start: 
       [ { token: 'keyword.turtle',
           regex: '(?:^|\\s+)(?:@base|@prefix)\\b',
           comment: 'Keywords' },
         { token: 'string.uri.turtle',
           regex: '<[^<>"{}|^`\\]\\\\]*>',
           comment: 'URI' },
         { token: [ 'constant.language.turtle', 'entity.name.class.turtle' ],
           regex: '(_:)([^\\s]+)',
           comment: 'Blank node' },
         { token: [ 'constant.prefix.turtle', 'entity.name.class.turtle' ],
           regex: '(\\w*:)([^\\s|/^*?+{}()]*)',
           comment: 'Prefix / prefixed URI' },
         { token: 'entity.name.class.rdfs-type.turtle',
           regex: '\\sa\\s',
           comment: 'The special triple predicate \'a\'' },
         { token: 
            [ 'string.turtle',
              'keyword.operator.turtle',
              'support.type.turtle' ],
           regex: '("[^"]*")(\\^\\^)(<[^<>"{}|^`\\]\\\\]*>|\\w*:[^\\s)]+)',
           comment: 'Typed literal' },
         {
           token : "string.turtle",
           regex : '["](?:(?:\\\\.)|(?:[^"\\\\]))*?["]',
           comment: 'String literal'
         },
         {
           token : "string.turtle",
           regex : '[\'](?:(?:\\\\.)|(?:[^"\\\\]))*?[\']',
           comment: 'String literal'
         },
         {
           token : "support.type.turtle",
           regex : '@[a-z]+(?:-[a-z0-9]+)?',
           comment : 'Language specifier'
         },
         { token: 'comment.line.number-sign.turtle',
           regex: '#.*$',
           comment: 'Comments' },
         { token: 'constant.numeric.turtle',
           regex: '\\b[+-]?(?:\\d+|[0-9]+\\.[0-9]*|\\.[0-9]+(?:[eE][+-]?\\d+)?)\\b',
           comment: 'Numeric literal' },
         { token: 'constant.language.turtle',
           regex: '\\b(?:true|false)\\b',
           comment: 'Boolean' } ] }
    
    this.normalizeRules();
};

TurtleHighlightRules.metaData = { fileTypes: [ 'ttl' ],
      name: 'Turtle',
      scopeName: 'source.turtle' }


oop.inherits(TurtleHighlightRules, TextHighlightRules);

exports.TurtleHighlightRules = TurtleHighlightRules;
});