/* ***** BEGIN LICENSE BLOCK *****
 * Distributed under the BSD license:
 *
 * Copyright (c) 2012, Ajax.org B.V.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of Ajax.org B.V. nor the
 *       names of its contributors may be used to endorse or promote products
 *       derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL AJAX.ORG B.V. BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * ***** END LICENSE BLOCK ***** */

/* This file was autogenerated from ../rego.tmLanguage (uuid: ) */
/****************************************************************************************
 * IT MIGHT NOT BE PERFECT ...But it's a good start from an existing *.tmlanguage file. *
 * fileTypes                                                                            *
 ****************************************************************************************/

define(function(require, exports, module) {
"use strict";

var oop = require("../lib/oop");
var TextHighlightRules = require("./text_highlight_rules").TextHighlightRules;

var RegoHighlightRules = function() {
    // regexp must not have capturing parentheses. Use (?:) instead.
    // regexps are ordered -> the first match is used

    this.$rules = {
        start: [{
            include: "#comment"
        }, {
            include: "#keyword"
        }, {
            include: "#operator"
        }, {
            include: "#head"
        }, {
            include: "#term"
        }],
        "#call": [{
            token: [
                "support.function.any-method.rego",
                "meta.function-call.rego"
            ],
            regex: /([a-zA-Z_][a-zA-Z0-9_]*)(\()/
        }],
        "#comment": [{
            token: [
                "punctuation.definition.comment.rego",
                "comment.line.number-sign.rego"
            ],
            regex: /(#)(.*$)/
        }],
        "#constant": [{
            token: "constant.language.rego",
            regex: /\b(?:true|false|null)\b/
        }],
        "#head": [{
            token: "entity.name.function.declaration",
            regex: /^[[:alpha:]_][[:alnum:]_]*/,
            push: [{
                token: "meta.function.rego",
                regex: /=|{|$/,
                next: "pop"
            }, {
                include: "#term"
            }, {
                defaultToken: "meta.function.rego"
            }]
        }],
        "#keyword": [{
            token: "keyword.other.rego",
            regex: /(?:^|\s+)(?:default|not|package|import|as|with|else|some|in)\s+/
        }],
        "#number": [{
            token: "constant.numeric.rego",
            regex: /-?(?:0|[1-9]\d*)(?:(?:\.\d+)?(?:[eE][+-]?\d+)?)?/
        }],
        "#operator": [{
            token: "keyword.operator.comparison.rego",
            regex: /\=|\!\=|>|<|<\=|>\=|\+|-|\*|%|\/|\||&|:\=/
        }],
        "#string": [{
            token: "punctuation.definition.string.begin.rego",
            regex: /"/,
            push: [{
                token: "punctuation.definition.string.end.rego",
                regex: /"/,
                next: "pop"
            }, {
                token: "constant.character.escape.rego",
                regex: /\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/
            }, {
                token: "invalid.illegal.unrecognized-string-escape.rego",
                regex: /\\./
            }, {
                defaultToken: "string.quoted.double.rego"
            }]
        }],
        "#term": [{
            include: "#constant"
        }, {
            include: "#string"
        }, {
            include: "#number"
        }, {
            include: "#call"
        }, {
            include: "#variable"
        }],
        "#variable": [{
            token: "meta.identifier.rego",
            regex: /\b[[:alpha:]_][[:alnum:]_]*\b/
        }]
    }
    
    this.normalizeRules();
};

RegoHighlightRules.metaData = {
    fileTypes: ["Rego"],
    name: "Rego",
    scopeName: "source.rego"
}


oop.inherits(RegoHighlightRules, TextHighlightRules);

exports.RegoHighlightRules = RegoHighlightRules;
});