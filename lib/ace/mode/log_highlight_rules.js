/* ***** BEGIN LICENSE BLOCK *****
 * Distributed under the BSD license:
 *
 * Copyright (c) 2012, Ajax.org B.V.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of Ajax.org B.V. nor the
 *       names of its contributors may be used to endorse or promote products
 *       derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL AJAX.ORG B.V. BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * ***** END LICENSE BLOCK ***** */

/* This file was autogenerated from https://raw.githubusercontent.com/emilast/vscode-logfile-highlighter/master/syntaxes/log.tmLanguage (uuid: ) */

define(function(require, exports, module) {
"use strict";

var oop = require("../lib/oop");
var TextHighlightRules = require("./text_highlight_rules").TextHighlightRules;

var LogHighlightRules = function() {
    // regexp must not have capturing parentheses. Use (?:) instead.
    // regexps are ordered -> the first match is used

    this.$rules = {
        start: [{
            token: "comment log.verbose",
            regex: /\bTrace\b:/
        }, {
            token: "comment log.verbose",
            regex: /\[(?:verbose|verb|vrb|vb|v)\]/,
            caseInsensitive: true
        }, {
            token: "comment log.verbose",
            regex: /(?<=^[\s\d\p]*)\bV\b/
        }, {
            token: "markup.changed log.debug",
            regex: /\b(?:DEBUG|Debug)\b|\bdebug\:/,
            caseInsensitive: true
        }, {
            token: "markup.changed log.debug",
            regex: /\[(?:debug|dbug|dbg|de|d)\]/,
            caseInsensitive: true
        }, {
            token: "markup.changed log.debug",
            regex: /(?<=^[\s\d\p]*)\bD\b/
        }, {
            token: "markup.inserted log.info",
            regex: /\b(?:HINT|INFO|INFORMATION|Info|NOTICE|II)\b|\b(?:info|information)\:/,
            caseInsensitive: true
        }, {
            token: "markup.inserted log.info",
            regex: /\[(?:information|info|inf|in|i)\]/,
            caseInsensitive: true
        }, {
            token: "markup.inserted log.info",
            regex: /(?<=^[\s\d\p]*)\bI\b/
        }, {
            token: "markup.deleted log.warning",
            regex: /\b(?:WARNING|WARN|Warn|WW)\b|\bwarning\:/,
            caseInsensitive: true
        }, {
            token: "markup.deleted log.warning",
            regex: /\[(?:warning|warn|wrn|wn|w)\]/,
            caseInsensitive: true
        }, {
            token: "markup.deleted log.warning",
            regex: /(?<=^[\s\d\p]*)\bW\b/
        }, {
            token: "string.regexp, strong log.error",
            regex: /\b(?:ALERT|CRITICAL|EMERGENCY|ERROR|FAILURE|FAIL|Fatal|FATAL|Error|EE)\b|\berror\:/,
            caseInsensitive: true
        }, {
            token: "string.regexp, strong log.error",
            regex: /\[(?:error|eror|err|er|e|fatal|fatl|ftl|fa|f)\]/,
            caseInsensitive: true
        }, {
            token: "string.regexp, strong log.error",
            regex: /(?<=^[\s\d\p]*)\bE\b/
        }, {
            token: "comment log.date",
            regex: /\b\d{4}-\d{2}-\d{2}(?:T|\b)/
        }, {
            token: "comment log.date",
            regex: /(?<=(?:^|\s))\d{2}[^\w\s]\d{2}[^\w\s]\d{4}\b/
        }, {
            token: "comment log.date",
            regex: /\d{1,2}:\d{2}(?::\d{2}(?:[.,]\d{1,})?)?(?:Z| ?[+-]\d{1,2}:\d{2})?\b/
        }, {
            token: "constant.language",
            regex: /\b(?:[0-9a-fA-F]{40}|[0-9a-fA-F]{10}|[0-9a-fA-F]{7})\b/
        }, {
            token: "constant.language log.constant",
            regex: /\b[0-9a-fA-F]{8}[-]?(?:[0-9a-fA-F]{4}[-]?){3}[0-9a-fA-F]{12}\b/
        }, {
            token: "constant.language log.constant",
            regex: /\b(?:[0-9a-fA-F]{2,}[:-])+[0-9a-fA-F]{2,}\b/
        }, {
            token: "constant.language log.constant",
            regex: /\b(?:[0-9]+|true|false|null)\b/
        }, {
            token: "string log.string",
            regex: /"[^"]*"/
        }, {
            token: "string log.string",
            regex: /(?<![\w])'[^']*'/
        }, {
            token: "string.regexp, emphasis log.exceptiontype",
            regex: /\b[a-zA-Z.]*Exception\b/
        }, {
            token: "string.key, emphasis log.exception",
            regex: /^[\t ]*at/,
            push: [{
                token: "string.key, emphasis log.exception",
                regex: /$/,
                next: "pop"
            }, {
                defaultToken: "string.key, emphasis log.exception"
            }]
        }, {
            token: "constant.language log.constant",
            regex: /\b[a-z]+:\/\/\S+\b\/?/
        }, {
            token: "constant.language log.constant",
            regex: /(?<![\w\/\\])(?:[\w-]+\.)+(?:[\w-])+(?![\w\/\\])/
        }]
    }
    
    this.normalizeRules();
};

LogHighlightRules.metaData = {
    scopeName: "text.log",
    fileTypes: ["log"],
    name: "Log file"
}


oop.inherits(LogHighlightRules, TextHighlightRules);

exports.LogHighlightRules = LogHighlightRules;
});