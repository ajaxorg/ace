/* ***** BEGIN LICENSE BLOCK *****
 * Distributed under the BSD license:
 *
 * Copyright (c) 2012, Ajax.org B.V.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of Ajax.org B.V. nor the
 *       names of its contributors may be used to endorse or promote products
 *       derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL AJAX.ORG B.V. BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * ***** END LICENSE BLOCK ***** */

/* This file was autogenerated from Rholang.tmLanguage (uuid: ) */
/****************************************************************************************
 * IT MIGHT NOT BE PERFECT ...But it's a good start from an existing *.tmlanguage file. *
 * fileTypes                                                                            *
 ****************************************************************************************/

define(function(require, exports, module) {
"use strict";

var oop = require("../lib/oop");
var TextHighlightRules = require("./text_highlight_rules").TextHighlightRules;

var RholangHighlightRules = function() {
    // regexp must not have capturing parentheses. Use (?:) instead.
    // regexps are ordered -> the first match is used

    this.$rules = {
        start: [{
            include: "#declarations"
        }],
        "#declarations": [{
            include: "#comment"
        }, {
            include: "#string"
        }, {
            include: "#new-declaration"
        }, {
            include: "#contract-declaration"
        }, {
            include: "#func-declaration"
        }, {
            include: "#for-declaration"
        }, {
            include: "#match-declaration"
        }, {
            include: "#select-declaration"
        }, {
            include: "#block-declaration"
        }, {
            include: "#appl"
        }, {
            include: "#constant"
        }, {
            include: "#chan"
        }, {
            token: "keyword.control.rho",
            regex: /=>/
        }],
        "#terminals": [{
            include: "#comment"
        }, {
            include: "#string"
        }, {
            include: "#appl"
        }, {
            include: "#constant"
        }, {
            include: "#chan"
        }],
        "#constant": [{
            token: "constant.language.rho",
            regex: /\b(?:Nil|true|false)\b/
        }, {
            token: "constant.numeric.rho",
            regex: /-?\b[0-9]+\b/
        }],
        "#contract-declaration": [{
            token: "text",
            regex: /(?=\bcontract\b)/,
            push: [{
                token: "text",
                regex: /(?={)/,
                next: "pop"
            }, {
                token: "keyword.other.contract.rho",
                regex: /\bcontract\b/
            }, {
                token: "entity.name.function.rho",
                regex: /[-_'a-zA-Z0-9]+/
            }, {
                include: "#comment"
            }, {
                include: "#parameter-list"
            }, {
                token: "keyword.other.contract.rho",
                regex: /\=/
            }]
        }],
        "#for-declaration": [{
            token: "text",
            regex: /(?=\bfor\b)/,
            push: [{
                token: "text",
                regex: /(?={)/,
                next: "pop"
            }, {
                token: "keyword.control.for.rho",
                regex: /\bfor\b/
            }, {
                include: "#comment"
            }, {
                include: "#bind"
            }]
        }],
        "#bind": [{
            token: "paren.lparen.rho",
            regex: /\(/,
            push: [{
                token: "paren.rparen.rho",
                regex: /\)/,
                next: "pop"
            }, {
                include: "#parameter-bind"
            }, {
                include: "#terminals"
            }, {
                token: "keyword.other.bind.rho",
                regex: /<-|\/:|:\\/
            }]
        }],
        "#new-declaration": [{
            token: "keyword.other.new.rho",
            regex: /\b(new|export|import)\b/,
            push: [{
                token: ["keyword.other.in.rho", "text"],
                regex: /(in)(\s*)(?={)/,
                next: "pop"
            }, {
                include: "#comment"
            }, {
                include: "#parameter"
            }]
        }],
        "#match-declaration": [{
            token: "keyword.control.match.rho",
            regex: /\bmatch\b/,
            push: [{
                token: "keyword.control.match.rho",
                regex: /\bwith\b/,
                next: "pop"
            }, {
                include: "#comment"
            }, {
                include: "#terminals"
            }]
        }],
        "#argument-list": [{
            token: "paren.lparen.rho",
            regex: /\(/,
            push: [{
                token: "paren.rparen.rho",
                regex: /\)/,
                next: "pop"
            }, {
                include: "#terminals"
            }]
        }],
        "#select-declaration": [{
            token: "keyword.control.select.rho",
            regex: /\bselect\b/
        }, {
            include: "#comment"
        }, {
            include: "#case-declaration"
        }],
        "#case-declaration": [{
            token: "text",
            regex: /(?=\bcase\b)/,
            push: [{
                token: "text",
                regex: /(?={)/,
                next: "pop"
            }, {
                token: "keyword.control.case.rho",
                regex: /\bcase\b/
            }, {
                include: "#comment"
            }, {
                include: "#parameter-bind"
            }, {
                include: "#terminals"
            }, {
                token: "keyword.other.case.rho",
                regex: /<-/
            }, {
                token: "keyword.control.case.rho",
                regex: /=>/
            }]
        }],
        "#block-declaration": [{
            token: "paren.lparen.rho",
            regex: /\{/,
            push: [{
                token: "paren.rparen.rho",
                regex: /\}/,
                next: "pop"
            }, {
                include: "#declarations"
            }]
        }],
        "#chan": [{
            token: ["keyword.other.chan.rho", "text"],
            regex: /([@*#]*)([-_'a-zA-Z0-9]+)/
        }],
        "#appl": [{
            token: "text",
            regex: /(?=\b\.?[-_'a-zA-Z0-9]+\s*\()/,
            push: [{
                token: "text",
                regex: /(?=\()/,
                next: "pop"
            }, {
                token: "entity.name.function.rho",
                regex: /[-_'a-zA-Z0-9]+/
            }]
        }, {
            include: "#argument-list"
        }],
        "#parameter-list": [{
            token: "paren.lparen.rho",
            regex: /\(/,
            push: [{
                token: "paren.rparen.rho",
                regex: /\)/,
                next: "pop"
            }, {
                include: "#comment"
            }, {
                include: "#string"
            }, {
                include: "#constant"
            }, {
                include: "#parameter"
            }]
        }],
        "#parameter-bind": [{
            token: "variable.name.rho",
            regex: /[-_'a-zA-Z0-9]+\s*(?=<-)/
        }],
        "#parameter": [{
            token: "variable.name.rho",
            regex: /[-_'a-zA-Z0-9]+/
        }],
        "#string": [{
            token: "string.quoted.double.rho",
            regex: /"/,
            push: [{
                token: "string.quoted.double.rho",
                regex: /"/,
                next: "pop"
            }, {
                token: "constant.character.escape.rho",
                regex: /\\./
            }, {
                defaultToken: "string.quoted.double.rho"
            }]
        }],
        "#comment": [{
            token: "punctuation.definition.comment.rho",
            regex: /\/\*/,
            push: [{
                token: "punctuation.definition.comment.rho",
                regex: /\*\//,
                next: "pop"
            }, {
                defaultToken: "comment.block.rho"
            }]
        }, {
            token: "comment",
            regex: "\\/\\/.*$"
        }]
    };

    this.normalizeRules();
};

RholangHighlightRules.metaData = {
    name: "Rholang",
    fileTypes: ["rho"],
    scopeName: "source.rho",
    "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json"
};

oop.inherits(RholangHighlightRules, TextHighlightRules);

exports.RholangHighlightRules = RholangHighlightRules;
});
