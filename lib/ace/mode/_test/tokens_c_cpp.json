[
 {
  "state": "start",
  "data": [
   [ "comment", "// compound assignment operators" ]
  ]
 },
 {
  "state": "start",
  "data": []
 },
 {
  "state": "start",
  "data": [
   [ "keyword", "#include" ],
   [ "constant.other", " <iostream>" ]
  ]
 },
 {
  "state": "start",
  "data": []
 },
 {
  "state": "directive",
  "data": [
   [ "keyword", "#include" ],
   [ "constant.other.multiline", " \\" ]
  ]
 },
 {
  "state": "start",
  "data": [
   [ "constant.other", "   <iostream>" ]
  ]
 },
 {
  "state": "start",
  "data": []
 },
 {
  "state": "directive",
  "data": [
   [ "keyword", "#include" ],
   [ "constant.other.multiline", " \\" ]
  ]
 },
 {
  "state": "directive",
  "data": [
   [ "constant.other.multiline", "   \\" ]
  ]
 },
 {
  "state": "start",
  "data": [
   [ "constant.other", "   <iostream>" ]
  ]
 },
 {
  "state": "start",
  "data": []
 },
 {
  "state": "directive",
  "data": [
   [ "keyword", "#include" ],
   [ "constant.other.multiline", " \\" ]
  ]
 },
 {
  "state": "directive",
  "data": [
   [ "constant.other.multiline", "   \\" ]
  ]
 },
 {
  "state": "start",
  "data": [
   [ "constant.other", "   \"iostream\"" ]
  ]
 },
 {
  "state": "start",
  "data": []
 },
 {
  "state": "start",
  "data": [
   [ "keyword", "#include" ],
   [ "constant.other", " <boost/asio/io_service.hpp>" ]
  ]
 },
 {
  "state": "start",
  "data": [
   [ "keyword", "#include" ],
   [ "constant.other", " \"boost/asio/io_service.hpp\"" ]
  ]
 },
 {
  "state": "start",
  "data": []
 },
 {
  "state": "start",
  "data": [
   [ "keyword.control", "using" ],
   [ "text", " " ],
   [ "keyword.operator", "namespace" ],
   [ "text", " " ],
   [ "identifier", "std" ],
   [ "punctuation.operator", ";" ]
  ]
 },
 {
  "state": "start",
  "data": []
 },
 {
  "state": "start",
  "data": [
   [ "storage.type", "int" ],
   [ "text", " " ],
   [ "identifier", "main" ],
   [ "text", " " ],
   [ "paren.lparen", "(" ],
   [ "paren.rparen", ")" ]
  ]
 },
 {
  "state": "start",
  "data": [
   [ "paren.lparen", "{" ]
  ]
 },
 {
  "state": "start",
  "data": [
   [ "text", "    " ],
   [ "storage.type", "int" ],
   [ "text", " " ],
   [ "identifier", "a" ],
   [ "punctuation.operator", "," ],
   [ "text", " " ],
   [ "identifier", "b" ],
   [ "keyword.operator", "=" ],
   [ "constant.numeric", "3" ],
   [ "punctuation.operator", ";" ],
   [ "text", " " ],
   [ "comment", "/* foobar */" ]
  ]
 },
 {
  "state": "start",
  "data": [
   [ "text", "    " ],
   [ "identifier", "a" ],
   [ "text", " " ],
   [ "keyword.operator", "=" ],
   [ "text", " " ],
   [ "identifier", "b" ],
   [ "punctuation.operator", ";" ]
  ]
 },
 {
  "state": "start",
  "data": [
   [ "text", "    " ],
   [ "identifier", "a" ],
   [ "keyword.operator", "+=" ],
   [ "constant.numeric", "2" ],
   [ "punctuation.operator", ";" ],
   [ "text", " " ],
   [ "comment", "// equivalent to a=a+2" ]
  ]
 },
 {
  "state": "start",
  "data": [
   [ "text", "    " ],
   [ "identifier", "cout" ],
   [ "text", " " ],
   [ "keyword.operator", "<<" ],
   [ "text", " " ],
   [ "identifier", "a" ],
   [ "punctuation.operator", ";" ]
  ]
 },
 {
  "state": "start",
  "data": [
   [ "text", "    " ],
   [ "keyword", "#if" ],
   [ "constant.other", " VERBOSE >= 2" ]
  ]
 },
 {
  "state": "start",
  "data": [
   [ "text", "        " ],
   [ "identifier", "prints" ],
   [ "paren.lparen", "(" ],
   [ "string", "\"trace message\"" ],
   [ "paren.rparen", ")" ],
   [ "punctuation.operator", ";" ]
  ]
 },
 {
  "state": "start",
  "data": [
   [ "text", "    " ],
   [ "keyword", "#endif" ]
  ]
 },
 {
  "state": "start",
  "data": [
   [ "text", "    " ],
   [ "keyword.control", "return" ],
   [ "text", " " ],
   [ "constant.numeric", "0" ],
   [ "punctuation.operator", ";" ]
  ]
 },
 {
  "state": "start",
  "data": [
   [ "paren.rparen", "}" ]
  ]
 },
 {
  "state": "start",
  "data": []
 },
 {
  "state": "start",
  "data": [
   [ "comment", "/* Print an error message and get out */" ]
  ]
 },
 {
  "state": "directive",
  "data": [
   [ "keyword", "#define" ],
   [ "constant.other.multiline", " ABORT                             \\" ]
  ]
 },
 {
  "state": "directive",
  "data": [
   [ "constant.other.multiline", "    do {                                  \\" ]
  ]
 },
 {
  "state": "directive",
  "data": [
   [ "constant.other.multiline", "        print( \"Abort\\n\" );                \\" ]
  ]
 },
 {
  "state": "directive",
  "data": [
   [ "constant.other.multiline", "        exit(8);                          \\" ]
  ]
 },
 {
  "state": "start",
  "data": [
   [ "constant.other", "} while (0)                      " ],
   [ "comment", "/* Note: No semicolon */" ]
  ]
 }
]