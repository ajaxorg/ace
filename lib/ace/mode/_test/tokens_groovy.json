[
 {
  "state": "start",
  "data": [
   [ "comment", "//http://groovy.codehaus.org/Martin+Fowler%27s+closure+examples+in+Groovy" ]
  ]
 },
 {
  "state": "start",
  "data": []
 },
 {
  "state": "start",
  "data": [
   [ "keyword", "class" ],
   [ "text", " " ],
   [ "identifier", "Employee" ],
   [ "text", " " ],
   [ "lparen", "{" ]
  ]
 },
 {
  "state": "start",
  "data": [
   [ "text", "    " ],
   [ "keyword", "def" ],
   [ "text", " " ],
   [ "identifier", "name" ],
   [ "text", ", " ],
   [ "identifier", "salary" ]
  ]
 },
 {
  "state": "start",
  "data": [
   [ "text", "    " ],
   [ "keyword", "boolean" ],
   [ "text", " " ],
   [ "identifier", "manager" ]
  ]
 },
 {
  "state": "start",
  "data": [
   [ "text", "    " ],
   [ "support.function", "String" ],
   [ "text", " " ],
   [ "identifier", "toString" ],
   [ "lparen", "(" ],
   [ "rparen", ")" ],
   [ "text", " " ],
   [ "lparen", "{" ],
   [ "text", " " ],
   [ "keyword", "return" ],
   [ "text", " " ],
   [ "identifier", "name" ],
   [ "text", " " ],
   [ "rparen", "}" ]
  ]
 },
 {
  "state": "start",
  "data": [
   [ "rparen", "}" ]
  ]
 },
 {
  "state": "start",
  "data": []
 },
 {
  "state": "start",
  "data": [
   [ "keyword", "def" ],
   [ "text", " " ],
   [ "identifier", "emps" ],
   [ "text", " " ],
   [ "keyword.operator", "=" ],
   [ "text", " " ],
   [ "lparen", "[" ],
   [ "keyword", "new" ],
   [ "text", " " ],
   [ "identifier", "Employee" ],
   [ "lparen", "(" ],
   [ "identifier", "name" ],
   [ "text", ":" ],
   [ "string", "'Guillaume'" ],
   [ "text", ", " ],
   [ "identifier", "manager" ],
   [ "text", ":" ],
   [ "constant.language.boolean", "true" ],
   [ "text", ", " ],
   [ "identifier", "salary" ],
   [ "text", ":" ],
   [ "constant.numeric", "200" ],
   [ "rparen", ")" ],
   [ "text", "," ]
  ]
 },
 {
  "state": "start",
  "data": [
   [ "text", "    " ],
   [ "keyword", "new" ],
   [ "text", " " ],
   [ "identifier", "Employee" ],
   [ "lparen", "(" ],
   [ "identifier", "name" ],
   [ "text", ":" ],
   [ "string", "'Graeme'" ],
   [ "text", ", " ],
   [ "identifier", "manager" ],
   [ "text", ":" ],
   [ "constant.language.boolean", "true" ],
   [ "text", ", " ],
   [ "identifier", "salary" ],
   [ "text", ":" ],
   [ "constant.numeric", "200" ],
   [ "rparen", ")" ],
   [ "text", "," ]
  ]
 },
 {
  "state": "start",
  "data": [
   [ "text", "    " ],
   [ "keyword", "new" ],
   [ "text", " " ],
   [ "identifier", "Employee" ],
   [ "lparen", "(" ],
   [ "identifier", "name" ],
   [ "text", ":" ],
   [ "string", "'Dierk'" ],
   [ "text", ", " ],
   [ "identifier", "manager" ],
   [ "text", ":" ],
   [ "constant.language.boolean", "false" ],
   [ "text", ", " ],
   [ "identifier", "salary" ],
   [ "text", ":" ],
   [ "constant.numeric", "151" ],
   [ "rparen", ")" ],
   [ "text", "," ]
  ]
 },
 {
  "state": "start",
  "data": [
   [ "text", "    " ],
   [ "keyword", "new" ],
   [ "text", " " ],
   [ "identifier", "Employee" ],
   [ "lparen", "(" ],
   [ "identifier", "name" ],
   [ "text", ":" ],
   [ "string", "'Bernd'" ],
   [ "text", ", " ],
   [ "identifier", "manager" ],
   [ "text", ":" ],
   [ "constant.language.boolean", "false" ],
   [ "text", ", " ],
   [ "identifier", "salary" ],
   [ "text", ":" ],
   [ "constant.numeric", "50" ],
   [ "rparen", ")]" ]
  ]
 },
 {
  "state": "start",
  "data": []
 },
 {
  "state": "start",
  "data": [
   [ "keyword", "def" ],
   [ "text", " " ],
   [ "identifier", "managers" ],
   [ "lparen", "(" ],
   [ "identifier", "emps" ],
   [ "rparen", ")" ],
   [ "text", " " ],
   [ "lparen", "{" ]
  ]
 },
 {
  "state": "start",
  "data": [
   [ "text", "    " ],
   [ "identifier", "emps" ],
   [ "text", "." ],
   [ "identifier", "findAll" ],
   [ "text", " " ],
   [ "lparen", "{" ],
   [ "text", " " ],
   [ "identifier", "e" ],
   [ "text", " " ],
   [ "keyword.operator", "->" ],
   [ "text", " " ],
   [ "identifier", "e" ],
   [ "text", "." ],
   [ "identifier", "isManager" ],
   [ "lparen", "(" ],
   [ "rparen", ")" ],
   [ "text", " " ],
   [ "rparen", "}" ]
  ]
 },
 {
  "state": "start",
  "data": [
   [ "rparen", "}" ]
  ]
 },
 {
  "state": "start",
  "data": []
 },
 {
  "state": "start",
  "data": [
   [ "keyword", "assert" ],
   [ "text", " " ],
   [ "identifier", "emps" ],
   [ "lparen", "[" ],
   [ "constant.numeric", "0" ],
   [ "text", ".." ],
   [ "constant.numeric", "1" ],
   [ "rparen", "]" ],
   [ "text", " " ],
   [ "keyword.operator", "==" ],
   [ "text", " " ],
   [ "identifier", "managers" ],
   [ "lparen", "(" ],
   [ "identifier", "emps" ],
   [ "rparen", ")" ],
   [ "text", " " ],
   [ "comment", "// [Guillaume, Graeme]" ]
  ]
 },
 {
  "state": "start",
  "data": []
 },
 {
  "state": "start",
  "data": [
   [ "keyword", "def" ],
   [ "text", " " ],
   [ "identifier", "highPaid" ],
   [ "lparen", "(" ],
   [ "identifier", "emps" ],
   [ "rparen", ")" ],
   [ "text", " " ],
   [ "lparen", "{" ]
  ]
 },
 {
  "state": "start",
  "data": [
   [ "text", "    " ],
   [ "identifier", "threshold" ],
   [ "text", " " ],
   [ "keyword.operator", "=" ],
   [ "text", " " ],
   [ "constant.numeric", "150" ]
  ]
 },
 {
  "state": "start",
  "data": [
   [ "text", "    " ],
   [ "identifier", "emps" ],
   [ "text", "." ],
   [ "identifier", "findAll" ],
   [ "text", " " ],
   [ "lparen", "{" ],
   [ "text", " " ],
   [ "identifier", "e" ],
   [ "text", " " ],
   [ "keyword.operator", "->" ],
   [ "text", " " ],
   [ "identifier", "e" ],
   [ "text", "." ],
   [ "identifier", "salary" ],
   [ "text", " " ],
   [ "keyword.operator", ">" ],
   [ "text", " " ],
   [ "identifier", "threshold" ],
   [ "text", " " ],
   [ "rparen", "}" ]
  ]
 },
 {
  "state": "start",
  "data": [
   [ "rparen", "}" ]
  ]
 },
 {
  "state": "start",
  "data": []
 },
 {
  "state": "start",
  "data": [
   [ "keyword", "assert" ],
   [ "text", " " ],
   [ "identifier", "emps" ],
   [ "lparen", "[" ],
   [ "constant.numeric", "0" ],
   [ "text", ".." ],
   [ "constant.numeric", "2" ],
   [ "rparen", "]" ],
   [ "text", " " ],
   [ "keyword.operator", "==" ],
   [ "text", " " ],
   [ "identifier", "highPaid" ],
   [ "lparen", "(" ],
   [ "identifier", "emps" ],
   [ "rparen", ")" ],
   [ "text", " " ],
   [ "comment", "// [Guillaume, Graeme, Dierk]" ]
  ]
 },
 {
  "state": "start",
  "data": []
 },
 {
  "state": "start",
  "data": [
   [ "keyword", "def" ],
   [ "text", " " ],
   [ "identifier", "paidMore" ],
   [ "lparen", "(" ],
   [ "identifier", "amount" ],
   [ "rparen", ")" ],
   [ "text", " " ],
   [ "lparen", "{" ]
  ]
 },
 {
  "state": "start",
  "data": [
   [ "text", "    " ],
   [ "lparen", "{" ],
   [ "text", " " ],
   [ "identifier", "e" ],
   [ "text", " " ],
   [ "keyword.operator", "->" ],
   [ "text", " " ],
   [ "identifier", "e" ],
   [ "text", "." ],
   [ "identifier", "salary" ],
   [ "text", " " ],
   [ "keyword.operator", ">" ],
   [ "text", " " ],
   [ "identifier", "amount" ],
   [ "rparen", "}" ]
  ]
 },
 {
  "state": "start",
  "data": [
   [ "rparen", "}" ]
  ]
 },
 {
  "state": "start",
  "data": [
   [ "keyword", "def" ],
   [ "text", " " ],
   [ "identifier", "highPaid" ],
   [ "text", " " ],
   [ "keyword.operator", "=" ],
   [ "text", " " ],
   [ "identifier", "paidMore" ],
   [ "lparen", "(" ],
   [ "constant.numeric", "150" ],
   [ "rparen", ")" ]
  ]
 },
 {
  "state": "start",
  "data": []
 },
 {
  "state": "start",
  "data": [
   [ "keyword", "assert" ],
   [ "text", " " ],
   [ "identifier", "highPaid" ],
   [ "lparen", "(" ],
   [ "identifier", "emps" ],
   [ "lparen", "[" ],
   [ "constant.numeric", "0" ],
   [ "rparen", "])" ],
   [ "text", " " ],
   [ "comment", "// true" ]
  ]
 },
 {
  "state": "start",
  "data": [
   [ "keyword", "assert" ],
   [ "text", " " ],
   [ "identifier", "emps" ],
   [ "lparen", "[" ],
   [ "constant.numeric", "0" ],
   [ "text", ".." ],
   [ "constant.numeric", "2" ],
   [ "rparen", "]" ],
   [ "text", " " ],
   [ "keyword.operator", "==" ],
   [ "text", " " ],
   [ "identifier", "emps" ],
   [ "text", "." ],
   [ "identifier", "findAll" ],
   [ "lparen", "(" ],
   [ "identifier", "highPaid" ],
   [ "rparen", ")" ]
  ]
 },
 {
  "state": "start",
  "data": []
 },
 {
  "state": "start",
  "data": [
   [ "keyword", "def" ],
   [ "text", " " ],
   [ "identifier", "filename" ],
   [ "text", " " ],
   [ "keyword.operator", "=" ],
   [ "text", " " ],
   [ "string", "'test.txt'" ]
  ]
 },
 {
  "state": "start",
  "data": [
   [ "keyword", "new" ],
   [ "text", " " ],
   [ "identifier", "File" ],
   [ "lparen", "(" ],
   [ "identifier", "filename" ],
   [ "rparen", ")" ],
   [ "text", "." ],
   [ "identifier", "withReader" ],
   [ "lparen", "{" ],
   [ "text", " " ],
   [ "identifier", "reader" ],
   [ "text", " " ],
   [ "keyword.operator", "->" ],
   [ "text", " " ],
   [ "identifier", "doSomethingWith" ],
   [ "lparen", "(" ],
   [ "identifier", "reader" ],
   [ "rparen", ")" ],
   [ "text", " " ],
   [ "rparen", "}" ]
  ]
 },
 {
  "state": "start",
  "data": []
 },
 {
  "state": "start",
  "data": [
   [ "keyword", "def" ],
   [ "text", " " ],
   [ "identifier", "readersText" ]
  ]
 },
 {
  "state": "start",
  "data": [
   [ "keyword", "def" ],
   [ "text", " " ],
   [ "identifier", "doSomethingWith" ],
   [ "lparen", "(" ],
   [ "identifier", "reader" ],
   [ "rparen", ")" ],
   [ "text", " " ],
   [ "lparen", "{" ],
   [ "text", " " ],
   [ "identifier", "readersText" ],
   [ "text", " " ],
   [ "keyword.operator", "=" ],
   [ "text", " " ],
   [ "identifier", "reader" ],
   [ "text", "." ],
   [ "identifier", "text" ],
   [ "text", " " ],
   [ "rparen", "}" ]
  ]
 },
 {
  "state": "start",
  "data": []
 },
 {
  "state": "start",
  "data": [
   [ "keyword", "assert" ],
   [ "text", " " ],
   [ "keyword", "new" ],
   [ "text", " " ],
   [ "identifier", "File" ],
   [ "lparen", "(" ],
   [ "identifier", "filename" ],
   [ "rparen", ")" ],
   [ "text", "." ],
   [ "identifier", "text" ],
   [ "text", " " ],
   [ "keyword.operator", "==" ],
   [ "text", " " ],
   [ "identifier", "readersText" ]
  ]
 }
]